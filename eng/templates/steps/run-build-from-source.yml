parameters:
  # Specifies whether to add the ArcadeBuildNonPortable flag to the build
  includeNonPortable: 'false'

  # Specifies the targetRID to pass to the build.
  targetRID: ''

steps:
- script: |
    set -x
    df -h

    # Setup build arguments
    _BuildConfig="Release"
    _InternalBuildArgs=""
    if [[ "$BUILD_REASON" != "PullRequest" && "$SYSTEM_TEAMPROJECT" != "public" ]]; then
      _InternalBuildArgs="/p:DotNetPublishUsingPipelines=true /p:OfficialBuildId=$(BUILD.BUILDNUMBER)"
    fi
    if [[ "${{ parameters.includeNonPortable }}" == "true" ]]; then
      _InternalBuildArgs="$_InternalBuildArgs /p:ArcadeBuildNonPortable=true"
    fi
    if [[ "${{ parameters.targetRID }}" != "" ]]; then
      _InternalBuildArgs="$_InternalBuildArgs /p:TargetRid=${{ parameters.targetRID }}"
    fi
    
    ./build.sh --ci \
      --configuration $_BuildConfig \
      --restore --build --pack --publish \
      $_InternalBuildArgs \
      /p:ArcadeBuildFromSource=true
  displayName: Build

# Upload build logs for diagnosis.
- task: CopyFiles@2
  displayName: Prepare BuildLogs staging directory
  inputs:
    SourceFolder: '$(Build.SourcesDirectory)'
    Contents: |
      **/*.log
      **/*.binlog
    TargetFolder: '$(Build.StagingDirectory)/BuildLogs'
    CleanTargetFolder: true
  continueOnError: true
  condition: succeededOrFailed()

- task: PublishPipelineArtifact@1
  displayName: Publish BuildLogs
  inputs:
    targetPath: '$(Build.StagingDirectory)/BuildLogs'
    artifactName: BuildLogs_$(Agent.JobName)
  continueOnError: true
  condition: succeededOrFailed()
  