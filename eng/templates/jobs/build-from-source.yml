parameters:
  # Specifies the prefix for source-build jobs added to pipeline. Use this if disambiguation is necessary.
  jobNamePrefix: 'sourcebuild'

  # Specifies that the repo only builds managed components. This indicates that output is not RID-specific 
  # and only one build job is required. A linux x64 machine will be used, but the build must continue to 
  # work on all supported platforms equally.
  # If false, pecifies that the repo has native components that can link to platform-provided libraries.
  #   - Adds additional portable job(s) for supported portable platforms
  #   - Adds additiional non-portable jobs for supported non-portable platforms
  #     - The job passes /p:ArcadeBuildNonPortable=true to the build to enable non-portable behavior.
  #     - The job passes a platform-specific TargetRid MSBuild property.
  managedOnly: false
  
  # Specifies whether prebuilt checks are enforced. When true, if prebuilts are introduced, the build job will fail.
  prebuiltCheck: true

  # Defines the platforms on which to run each build job
  # Note: This parameter is not expected to be set by the consumer of this template
  platforms:

  # Always run centos71 portable build
  - name: 'centos71_portable'
    include: 'always'
    jobProperties:
      container: 'mcr.microsoft.com/dotnet-buildtools/prereqs:centos-7-3e800f1-20190501005343'
  
  # If managedOnly is false, run a macOS portable build
  - name: 'macOS_portable'
    jobProperties:
      pool:
        name: Hosted macOS

  # Non-portable platforms
  - name: 'centos71'
    targetRID: 'centos.7-x64'
    jobProperties:
      container: 'mcr.microsoft.com/dotnet-buildtools/prereqs:centos-7-3e800f1-20190501005343'

  - name: 'centos8'
    targetRID: 'centos.8-x64'
    jobProperties:
      container: 'mcr.microsoft.com/dotnet-buildtools/prereqs:centos-8-daa5116-20200325130212'

  - name: 'debian9'
    targetRID: 'debian.9-x64'
    jobProperties:
      container: 'mcr.microsoft.com/dotnet-buildtools/prereqs:debian-stretch-d61254f-20190807161114'

  - name: 'fedora30'
    targetRID: 'fedora.30-x64'
    jobProperties:
      container: 'mcr.microsoft.com/dotnet-buildtools/prereqs:fedora-30-38e0f29-20191126135223'

  - name: 'fedora32'
    targetRID: 'fedora.32-x64'
    jobProperties:
      container: 'mcr.microsoft.com/dotnet-buildtools/prereqs:fedora-32-20200512010618-163ed2a'

  - name: 'macOS'
    targetRID: 'osx.10.14-x64'
    jobProperties:
      pool:
        name: Hosted macOS

  - name: 'ubuntu1804'
    targetRID: 'ubuntu.18.04-x64'
    jobProperties:
      container: 'mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-f90bc20-20180320154721'

jobs:

- ${{ each platform in parameters.platforms }}:
  - ${{ if or(eq(platform.include,'always'), eq(parameters.managedOnly, false)) }}:
    - job: ${{ parameters.jobNamePrefix }}_${{ platform.name }}
      ${{ each property in platform.jobProperties }}:
        ${{ property.key }}: ${{ property.value }}
      workspace:
        clean: all

      variables:
      - name: _BuildConfig
        value: Release
      - name: _InternalBuildArgs
        value: ''
      - name: _NonPortableBuildArgs
        value: ''        
      - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
        - name: _InternalBuildArgs
          value: >-
            /p:DotNetPublishUsingPipelines=true
            /p:OfficialBuildId=$(BUILD.BUILDNUMBER)
      - ${{ if ne(platform.targetRID, '') }}:
        - name: _NonPortableBuildArgs
          value: >-
            /p:ArcadeBuildNonPortable=true
            /p:TargetRid=${{ platform.targetRID }}

      steps:
      - script: |
          set -x
          df -h
          ./build.sh --ci \
            --configuration $(_BuildConfig) \
            --restore --build --pack --publish \
            $(_InternalBuildArgs) \
            $(_NonPortableBuildArgs) \
           /p:ArcadeBuildFromSource=true
        displayName: Build

      # Upload build logs for diagnosis.
      - task: CopyFiles@2
        displayName: Prepare BuildLogs staging directory
        inputs:
          SourceFolder: '$(Build.SourcesDirectory)'
          Contents: |
            **/*.log
            **/*.binlog
          TargetFolder: '$(Build.StagingDirectory)/BuildLogs'
          CleanTargetFolder: true
        continueOnError: true
        condition: succeededOrFailed()

      - task: PublishPipelineArtifact@1
        displayName: Publish BuildLogs
        inputs:
          targetPath: '$(Build.StagingDirectory)/BuildLogs'
          artifactName: BuildLogs
        continueOnError: true
        condition: succeededOrFailed()
