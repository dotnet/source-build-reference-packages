parameters:
  # This template adds arcade-powered source-build to CI. The template produces a server job with a
  # default ID 'Source_Build_Complete' to put in a dependency list if necessary.

  # Specifies the prefix for source-build jobs added to pipeline. Use this if disambiguation is
  # necessary. This also changes the ID of 'Source_Build_Complete'.
  jobNamePrefix: 'Source_Build'

  # A container to use. Runs in docker.
  container: ''

  # A pool to use. Runs directly on an agent.
  pool: null

  # A list of job properties to inject at the top level. Only 'container' and 'pool' are expected so
  # far (so we provided shortcut parameters for those in particular), but this is left in for
  # potential extensibility.
  jobProperties: {}

  # Specifies the build script to invoke to perform the build in the repo. The default should work
  # for typical Arcade repositories, but this is customizable for difficult situations.
  buildScript: './build.sh'

  # Defines the platforms on which to run each build job. By default, runs one job on a linux-x64
  # machine, suitable for managed-only repositories.
  platforms:
  - name: 'Managed'
    container: 'mcr.microsoft.com/dotnet-buildtools/prereqs:centos-7-3e800f1-20190501005343'

jobs:

- job: ${{ parameters.jobNamePrefix }}_Complete
  displayName: Source-Build Complete
  pool: server
  dependsOn:
  - ${{ each platform in parameters.platforms }}:
    - ${{ parameters.jobNamePrefix }}_${{ platform.name }}

- ${{ each platform in parameters.platforms }}:
  - job: ${{ parameters.jobNamePrefix }}_${{ platform.name }}
    displayName: Source-Build (${{ platform.name }})

    ${{ each property in platform.jobProperties }}:
      ${{ property.key }}: ${{ property.value }}

    ${{ if ne(platform.container, '') }}:
      container: ${{ platform.container }}
    ${{ if ne(platform.pool, '') }}:
      pool: ${{ platform.pool }}

    workspace:
      clean: all

    variables:
    - name: _BuildConfig
      value: Release
    - name: _InternalBuildArgs
      value: ''
    - name: _TargetRidArgs
      value: ''
    - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
      - name: _InternalBuildArgs
        value: >-
          /p:DotNetPublishUsingPipelines=true
          /p:OfficialBuildId=$(BUILD.BUILDNUMBER)
    - ${{ if ne(platform.targetRID, '') }}:
      - name: _TargetRidArgs
        value: /p:TargetRid=${{ platform.targetRID }}

    steps:
    - script: |
        set -x
        df -h
        ${{ parameters.buildScript }} --ci \
          --configuration $(_BuildConfig) \
          --restore --build --pack --publish \
          $(_InternalBuildArgs) \
          $(_TargetRidArgs) \
          /p:SourceBuildNonPortable=${{ platform.nonPortable }} \
          /p:ArcadeBuildFromSource=true
      displayName: Build

    # Upload build logs for diagnosis.
    - task: CopyFiles@2
      displayName: Prepare BuildLogs staging directory
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)'
        Contents: |
          **/*.log
          **/*.binlog
          artifacts/source-build/self/prebuilt-report/**
        TargetFolder: '$(Build.StagingDirectory)/BuildLogs'
        CleanTargetFolder: true
      continueOnError: true
      condition: succeededOrFailed()

    - task: PublishPipelineArtifact@1
      displayName: Publish BuildLogs
      inputs:
        targetPath: '$(Build.StagingDirectory)/BuildLogs'
        artifactName: BuildLogs_SourceBuild_${{ platform.name }}_Attempt$(System.JobAttempt)
      continueOnError: true
      condition: succeededOrFailed()
