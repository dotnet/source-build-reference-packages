<Project>

  <!--
    These targets inject source-build into Arcade's build process.
  -->

  <PropertyGroup>
    <SourceBuildArtifactsDir>$([MSBuild]::NormalizeDirectory('$(ArtifactsDir)', 'source-build'))</SourceBuildArtifactsDir>
    <CurrentRepoSourceBuildArtifactsDir>$([MSBuild]::NormalizeDirectory('$(ArtifactsDir)', 'source-build', 'self'))</CurrentRepoSourceBuildArtifactsDir>
    <CurrentRepoSourceBuildArtifactsPackagesDir>$([MSBuild]::NormalizeDirectory('$(CurrentRepoSourceBuildArtifactsDir)', 'packages', '$(Configuration)'))</CurrentRepoSourceBuildArtifactsPackagesDir>

    <CurrentRepoSourceBuildBinlogFile>$([MSBuild]::NormalizePath('$(CurrentRepoSourceBuildArtifactsDir)', 'sourcebuild.binlog'))</CurrentRepoSourceBuildBinlogFile>
  </PropertyGroup>

  <Target Name="BuildUpstreamRepos"
          Condition="
            '$(FromSource)' == 'true' and
            '$(InnerBuildFromSource)' != 'true' and
            '$(BuildUpstreamRepos)' == 'true'">
    <!-- TODO: Clone upstream repos and build them, or download intermediate nupkgs to use. -->
  </Target>

  <!--
    Set up build args to append to the passed build command. These args specify what is unique about
    building from source, such as non-overlapping artifacts dirs and package caches. This target can
    be BeforeTargets'd or replaced to customize source-build.
  -->
  <Target Name="GetSourceBuildCommandConfiguration">
    <PropertyGroup>
      <!-- Track that this is the inner build to prevent infinite recursion. -->
      <InnerBuildArgs>$(InnerBuildArgs) /p:InnerBuildFromSource=true</InnerBuildArgs>
      <!-- Override the artifacts dir to cleanly separate the inner build from outer build. -->
      <InnerBuildArgs>$(InnerBuildArgs) /p:ArtifactsDir=$(CurrentRepoSourceBuildArtifactsDir)</InnerBuildArgs>
      <!-- Set a custom binlog location to avoid clashing over the currenly specified file. -->
      <InnerBuildArgs>$(InnerBuildArgs) /bl:$(CurrentRepoSourceBuildBinlogFile)</InnerBuildArgs>
    </PropertyGroup>
  </Target>

  <Target Name="ExecuteWithSourceBuiltTooling"
          DependsOnTargets="
            BuildUpstreamRepos;
            GetSourceBuildCommandConfiguration;
            ExecuteInnerSourceBuild;
            PackSourceBuildIntermediateNupkg"
          Condition="
            '$(FromSource)' == 'true' and
            '$(InnerBuildFromSource)' != 'true'"
          BeforeTargets="Execute" />

  <!--
    Separate target to execute to provide easy hook point for BeforeTargets that will only trigger
    when the inner build is actually happening. Hooking BeforeTargets on
    ExecuteWithSourceBuiltTooling would run unconditionally.
  -->
  <Target Name="ExecuteInnerSourceBuild">
    <PropertyGroup>
      <!-- Prevent any projects from building in the outside build: they would use prebuilts. -->
      <PreventPrebuiltBuild>true</PreventPrebuiltBuild>

      <!--
        Normally, the inner build should run using the original build command with some extra args
        appended. Allow the repo to override this default behavior if the repo is e.g. not onboarded
        enough on Arcade for this to work nicely.
      -->
      <BaseInnerSourceBuildCommand Condition="'$(BaseInnerSourceBuildCommand)' == ''">$(ARCADE_BUILD_TOOL_COMMAND)</BaseInnerSourceBuildCommand>
    </PropertyGroup>

    <Exec
      Command="$(BaseInnerSourceBuildCommand) $(InnerBuildArgs)"
      WorkingDirectory="$(ProjectDirectory)"
      EnvironmentVariables="@(InnerBuildEnv)"
      IgnoreStandardErrorWarningFormat="true" />
  </Target>

  <!--
    Create a source-build intermediate NuGet package for dependency transport.
  -->
  <Target Name="PackSourceBuildIntermediateNupkg">
    <PropertyGroup>
      <SourceBuildIntermediateProjFile>$(MSBuildThisFileDirectory)SourceBuildIntermediate.proj</SourceBuildIntermediateProjFile>
      <SourceBuildIntermediateProjTargetFile>$(ArtifactsObjDir)ArcadeGeneratedProjects\SourceBuildIntermediate\SourceBuildIntermediate.proj</SourceBuildIntermediateProjTargetFile>
    </PropertyGroup>

    <!-- Copy the project to artifacts/ so that the repo's global.json is in an ancestor dir. -->
    <Copy
      SourceFiles="$(SourceBuildIntermediateProjFile)"
      DestinationFiles="$(SourceBuildIntermediateProjTargetFile)" />

    <ItemGroup>
      <SourceBuildIntermediatePackTarget Include="Restore;Pack" />
    </ItemGroup>

    <MSBuild
      Projects="$(SourceBuildIntermediateProjTargetFile)"
      Targets="%(SourceBuildIntermediatePackTarget.Identity)"
      Properties="CurrentRepoSourceBuildArtifactsPackagesDir=$(CurrentRepoSourceBuildArtifactsPackagesDir)" />
  </Target>

  <Target Name="PreventPrebuiltBuild"
          DependsOnTargets="ExecuteWithSourceBuiltTooling"
          Condition="'$(PreventPrebuiltBuild)' == 'true'"
          BeforeTargets="Execute">
    <ItemGroup>
      <ProjectToBuild Remove="@(ProjectToBuild)" />
      <ProjectToBuild Include="$(MSBuildThisFileDirectory)Noop.proj" />
    </ItemGroup>
  </Target>

  <!-- Repository extension point -->
  <Import Project="$(RepositoryEngineeringDir)SourceBuild.props" Condition="Exists('$(RepositoryEngineeringDir)SourceBuild.props')" />

</Project>
