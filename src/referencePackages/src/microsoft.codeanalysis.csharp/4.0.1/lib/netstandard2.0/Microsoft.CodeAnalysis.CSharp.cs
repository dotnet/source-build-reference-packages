// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.
// ------------------------------------------------------------------------------
// Changes to this file must follow the http://aka.ms/api-review process.
// ------------------------------------------------------------------------------
[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
[assembly: System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName = "")]
[assembly: System.Reflection.AssemblyTitle("Microsoft.CodeAnalysis.CSharp")]
[assembly: System.Reflection.AssemblyDescription("Microsoft.CodeAnalysis.CSharp")]
[assembly: System.Reflection.AssemblyConfiguration("")]
[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
[assembly: System.Reflection.AssemblyProduct("Microsoft.CodeAnalysis.CSharp")]
[assembly: System.Reflection.AssemblyCopyright("Â© Microsoft Corporation. All rights reserved.")]
[assembly: System.Reflection.AssemblyTrademark("")]
[assembly: System.Reflection.AssemblyFileVersion("4.0.1.0")]
[assembly: System.Reflection.AssemblyVersion("4.0.1.0")]

// This is a minimal stub for Microsoft.CodeAnalysis.CSharp 4.0.1
// The actual API surface is extensive and should be generated by the tooling

namespace Microsoft.CodeAnalysis.CSharp
{
    // Minimal stub types - actual implementation would have full API surface
    public static class CSharpCompilation
    {
        public static CSharpCompilation Create(string assemblyName) => null;
    }

    public static class CSharpSyntaxTree
    {
        public static CSharpSyntaxTree ParseText(string text) => null;
    }

    public static class SyntaxFactory
    {
        public static SyntaxToken Token(SyntaxKind kind) => default(SyntaxToken);
    }

    public enum SyntaxKind
    {
        None,
        List,
        TildeToken,
        ExclamationToken,
        DollarToken,
        PercentToken,
        CaretToken,
        AmpersandToken,
        AsteriskToken,
        OpenParenToken,
        CloseParenToken,
        MinusToken,
        PlusToken,
        EqualsToken,
        OpenBraceToken,
        CloseBraceToken,
        OpenBracketToken,
        CloseBracketToken,
        BarToken,
        BackslashToken,
        ColonToken,
        SemicolonToken,
        DoubleQuoteToken,
        SingleQuoteToken,
        LessThanToken,
        CommaToken,
        GreaterThanToken,
        DotToken,
        QuestionToken,
        HashToken,
        SlashToken,
        BarBarToken,
        AmpersandAmpersandToken,
        MinusMinusToken,
        PlusPlusToken,
        ColonColonToken,
        QuestionQuestionToken,
        MinusGreaterThanToken,
        ExclamationEqualsToken,
        EqualsEqualsToken,
        LessThanEqualsToken,
        LessThanLessThanToken,
        LessThanLessThanEqualsToken,
        GreaterThanEqualsToken,
        GreaterThanGreaterThanToken,
        GreaterThanGreaterThanEqualsToken,
        SlashEqualsToken,
        AsteriskEqualsToken,
        BarEqualsToken,
        AmpersandEqualsToken,
        PlusEqualsToken,
        MinusEqualsToken,
        CaretEqualsToken,
        PercentEqualsToken,
        BoolKeyword,
        ByteKeyword,
        SByteKeyword,
        ShortKeyword,
        UShortKeyword,
        IntKeyword,
        UIntKeyword,
        LongKeyword,
        ULongKeyword,
        DoubleKeyword,
        FloatKeyword,
        DecimalKeyword,
        StringKeyword,
        CharKeyword,
        VoidKeyword,
        ObjectKeyword,
        TypeOfKeyword,
        SizeOfKeyword,
        NullKeyword,
        TrueKeyword,
        FalseKeyword,
        IfKeyword,
        ElseKeyword,
        WhileKeyword,
        ForKeyword,
        ForEachKeyword,
        DoKeyword,
        SwitchKeyword,
        CaseKeyword,
        DefaultKeyword,
        TryKeyword,
        CatchKeyword,
        FinallyKeyword,
        LockKeyword,
        GotoKeyword,
        BreakKeyword,
        ContinueKeyword,
        ReturnKeyword,
        ThrowKeyword,
        PublicKeyword,
        PrivateKeyword,
        InternalKeyword,
        ProtectedKeyword,
        StaticKeyword,
        ReadOnlyKeyword,
        SealedKeyword,
        ConstKeyword,
        FixedKeyword,
        StackAllocKeyword,
        VolatileKeyword,
        NewKeyword,
        OverrideKeyword,
        AbstractKeyword,
        VirtualKeyword,
        EventKeyword,
        ExternKeyword,
        RefKeyword,
        OutKeyword,
        InKeyword,
        IsKeyword,
        AsKeyword,
        ParamsKeyword,
        ArgListKeyword,
        MakeRefKeyword,
        RefTypeKeyword,
        RefValueKeyword,
        ThisKeyword,
        BaseKeyword,
        NamespaceKeyword,
        UsingKeyword,
        ClassKeyword,
        StructKeyword,
        InterfaceKeyword,
        EnumKeyword,
        DelegateKeyword,
        CheckedKeyword,
        UncheckedKeyword,
        UnsafeKeyword,
        OperatorKeyword,
        ExplicitKeyword,
        ImplicitKeyword,
        YieldKeyword,
        PartialKeyword,
        AliasKeyword,
        GlobalKeyword,
        AssemblyKeyword,
        ModuleKeyword,
        TypeKeyword,
        FieldKeyword,
        MethodKeyword,
        ParamKeyword,
        PropertyKeyword,
        TypeVarKeyword,
        GetKeyword,
        SetKeyword,
        AddKeyword,
        RemoveKeyword,
        WhereKeyword,
        FromKeyword,
        GroupKeyword,
        JoinKeyword,
        IntoKeyword,
        LetKeyword,
        ByKeyword,
        SelectKeyword,
        OrderByKeyword,
        OnKeyword,
        EqualsKeyword,
        AscendingKeyword,
        DescendingKeyword,
        NameOfKeyword,
        AsyncKeyword,
        AwaitKeyword,
        WhenKeyword,
        ElifKeyword,
        EndIfKeyword,
        RegionKeyword,
        EndRegionKeyword,
        DefineKeyword,
        UndefKeyword,
        WarningKeyword,
        ErrorKeyword,
        LineKeyword,
        PragmaKeyword,
        HiddenKeyword,
        ChecksumKeyword,
        DisableKeyword,
        RestoreKeyword,
        ReferenceKeyword,
        LoadKeyword,
        NullableKeyword,
        EnableKeyword,
        SafeOnlyKeyword,
        AnnotationsKeyword,
        VarianceKeyword,
        UnmanagedKeyword,
        NotNullKeyword,
        InitKeyword,
        RecordKeyword,
        WithKeyword,
        DataKeyword,
        AndKeyword,
        OrKeyword,
        NotKeyword,
        RequiredKeyword,
        ScopedKeyword,
        FileKeyword,
        AllowsKeyword,
        RefStructKeyword,
        ReadOnlyStructKeyword,
        InterpolatedStringStartToken,
        InterpolatedStringEndToken,
        InterpolatedVerbatimStringStartToken,
        InterpolatedRawStringStartToken,
        InterpolatedSingleLineRawStringStartToken,
        InterpolatedMultiLineRawStringStartToken,
        InterpolatedStringTextToken,
        InterpolatedRawStringTextToken,
        InterpolatedRawStringEndToken,
        StringLiteralToken,
        UTF8StringLiteralToken,
        NumericLiteralToken,
        CharacterLiteralToken,
        IdentifierToken,
        InterpolatedStringToken,
        DocumentationCommentExteriorTrivia,
        SingleLineDocumentationCommentTrivia,
        MultiLineDocumentationCommentTrivia,
        EndOfDocumentationCommentToken,
        EndOfFileToken,
        BadToken,
        ConflictMarkerTrivia,
        DisabledTextTrivia,
        DocumentationComment,
        TypeCref,
        QualifiedCref,
        NameMemberCref,
        IndexerMemberCref,
        OperatorMemberCref,
        ConversionOperatorMemberCref,
        CrefParameterList,
        CrefBracketedParameterList,
        CrefParameter,
        IdentifierName,
        QualifiedName,
        GenericName,
        TypeArgumentList,
        AliasQualifiedName,
        PredefinedType,
        ArrayType,
        ArrayRankSpecifier,
        PointerType,
        FunctionPointerType,
        FunctionPointerParameterList,
        FunctionPointerCallingConvention,
        FunctionPointerUnmanagedCallingConventionList,
        FunctionPointerUnmanagedCallingConvention,
        NullableType,
        TupleType,
        TupleElement,
        OmittedTypeArgument,
        RefType,
        ScopedType,
        ParenthesizedExpression,
        TupleExpression,
        PrefixUnaryExpression,
        AwaitExpression,
        PostfixUnaryExpression,
        MemberAccessExpression,
        ConditionalAccessExpression,
        MemberBindingExpression,
        ElementBindingExpression,
        ImplicitElementAccess,
        BinaryExpression,
        AssignmentExpression,
        ConditionalExpression,
        ThisExpression,
        BaseExpression,
        LiteralExpression,
        MakeRefExpression,
        RefTypeExpression,
        RefValueExpression,
        CheckedExpression,
        DefaultExpression,
        TypeOfExpression,
        SizeOfExpression,
        InvocationExpression,
        ElementAccessExpression,
        ArgumentList,
        BracketedArgumentList,
        Argument,
        NameColon,
        DeclarationExpression,
        CastExpression,
        AnonymousMethodExpression,
        SimpleLambdaExpression,
        RefExpression,
        ParenthesizedLambdaExpression,
        InitializerExpression,
        ObjectCreationExpression,
        WithExpression,
        AnonymousObjectMemberDeclarator,
        AnonymousObjectCreationExpression,
        ArrayCreationExpression,
        ImplicitArrayCreationExpression,
        StackAllocArrayCreationExpression,
        ImplicitStackAllocArrayCreationExpression,
        CollectionExpression,
        ExpressionElement,
        SpreadElement,
        QueryExpression,
        QueryBody,
        FromClause,
        LetClause,
        JoinClause,
        JoinIntoClause,
        WhereClause,
        OrderByClause,
        Ordering,
        SelectClause,
        GroupClause,
        QueryContinuation,
        OmittedArraySizeExpression,
        InterpolatedStringExpression,
        IsPatternExpression,
        ThrowExpression,
        WhenClause,
        DeclarationPattern,
        ConstantPattern,
        VarPattern,
        RecursivePattern,
        PositionalPatternClause,
        PropertyPatternClause,
        Subpattern,
        BinaryPattern,
        UnaryPattern,
        RelationalPattern,
        TypePattern,
        ParenthesizedPattern,
        ListPattern,
        SlicePattern,
        InterpolatedStringText,
        Interpolation,
        InterpolationAlignmentClause,
        InterpolationFormatClause,
        ShebangDirectiveTrivia,
        LoadDirectiveTrivia,
        NullableDirectiveTrivia,
        ReferenceDirectiveTrivia,
        BadDirectiveTrivia,
        DefineDirectiveTrivia,
        UndefDirectiveTrivia,
        ErrorDirectiveTrivia,
        WarningDirectiveTrivia,
        LineDirectiveTrivia,
        LineDirectivePosition,
        LineSpanDirectiveTrivia,
        PragmaWarningDirectiveTrivia,
        PragmaChecksumDirectiveTrivia,
        RegionDirectiveTrivia,
        EndRegionDirectiveTrivia,
        IfDirectiveTrivia,
        ElifDirectiveTrivia,
        ElseDirectiveTrivia,
        EndIfDirectiveTrivia,
        Block,
        LocalDeclarationStatement,
        VariableDeclaration,
        VariableDeclarator,
        EqualsValueClause,
        SingleVariableDesignation,
        DiscardDesignation,
        ParenthesizedVariableDesignation,
        ExpressionStatement,
        EmptyStatement,
        LabeledStatement,
        GotoStatement,
        GotoCaseStatement,
        GotoDefaultStatement,
        BreakStatement,
        ContinueStatement,
        ReturnStatement,
        YieldReturnStatement,
        YieldBreakStatement,
        ThrowStatement,
        WhileStatement,
        DoStatement,
        ForStatement,
        ForEachStatement,
        ForEachVariableStatement,
        UsingStatement,
        FixedStatement,
        CheckedStatement,
        UncheckedStatement,
        UnsafeStatement,
        LockStatement,
        IfStatement,
        ElseClause,
        SwitchStatement,
        SwitchSection,
        CaseSwitchLabel,
        DefaultSwitchLabel,
        CasePatternSwitchLabel,
        SwitchExpression,
        SwitchExpressionArm,
        TryStatement,
        CatchClause,
        CatchDeclaration,
        CatchFilterClause,
        FinallyClause,
        LocalFunctionStatement,
        CompilationUnit,
        GlobalStatement,
        NamespaceDeclaration,
        FileScopedNamespaceDeclaration,
        UsingDirective,
        ExternAliasDirective,
        AttributeList,
        AttributeTargetSpecifier,
        Attribute,
        AttributeArgumentList,
        AttributeArgument,
        NameEquals,
        ClassDeclaration,
        StructDeclaration,
        InterfaceDeclaration,
        RecordDeclaration,
        RecordStructDeclaration,
        EnumDeclaration,
        DelegateDeclaration,
        BaseList,
        SimpleBaseType,
        PrimaryConstructorBaseType,
        TypeParameterConstraintClause,
        ConstructorConstraint,
        ClassConstraint,
        StructConstraint,
        TypeConstraint,
        DefaultConstraint,
        AllowsConstraintClause,
        RefStructConstraint,
        FieldDeclaration,
        EventFieldDeclaration,
        ExplicitInterfaceSpecifier,
        MethodDeclaration,
        OperatorDeclaration,
        ConversionOperatorDeclaration,
        ConstructorDeclaration,
        BaseConstructorInitializer,
        ThisConstructorInitializer,
        DestructorDeclaration,
        PropertyDeclaration,
        ArrowExpressionClause,
        EventDeclaration,
        IndexerDeclaration,
        AccessorList,
        AccessorDeclaration,
        ParameterList,
        BracketedParameterList,
        Parameter,
        FunctionPointerParameter,
        TypeParameterList,
        TypeParameter,
        IncompleteMember,
        SkippedTokensTrivia,
        DocumentationCommentTrivia,
        TypeCrefParameter,
        XmlElement,
        XmlElementStartTag,
        XmlElementEndTag,
        XmlEmptyElement,
        XmlName,
        XmlPrefix,
        XmlTextAttribute,
        XmlCrefAttribute,
        XmlNameAttribute,
        XmlText,
        XmlCDataSection,
        XmlComment,
        XmlProcessingInstruction,
        MethodKeyword,
        PropertyKeyword,
        TypeKeyword,
        FieldKeyword,
        ParamKeyword,
        ReturnKeyword,
        TypeVarKeyword,
        InterpolatedStringStartToken,
        InterpolatedStringEndToken,
        InterpolatedVerbatimStringStartToken,
        InterpolatedStringTextToken,
        InterpolatedRawStringStartToken,
        InterpolatedSingleLineRawStringStartToken,
        InterpolatedMultiLineRawStringStartToken,
        InterpolatedRawStringTextToken,
        InterpolatedRawStringEndToken,
        StringLiteralToken,
        UTF8StringLiteralToken,
        NumericLiteralToken,
        CharacterLiteralToken,
        IdentifierToken,
        InterpolatedStringToken,
        DocumentationCommentExteriorTrivia,
        SingleLineDocumentationCommentTrivia,
        MultiLineDocumentationCommentTrivia,
        EndOfDocumentationCommentToken,
        EndOfFileToken,
        BadToken,
    }

    public struct SyntaxToken
    {
        public SyntaxKind Kind => SyntaxKind.None;
        public string Text => "";
        public string ValueText => "";
        public object Value => null;
        public bool IsMissing => false;
        public bool IsKeyword() => false;
        public bool IsReservedKeyword() => false;
        public bool IsContextualKeyword() => false;
        public bool IsVerbatimStringLiteral() => false;
        public bool IsDirective => false;
        public bool IsDocumentationComment => false;
    }
}