<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.Extensions.Compliance.Abstractions</name>
  </assembly>
  <members>
    <member name="T:Microsoft.Extensions.Compliance.Classification.DataClassification">
      <summary>
            Represents a set of data classes as a part of a data taxonomy.</summary>
    </member>
    <member name="F:Microsoft.Extensions.Compliance.Classification.DataClassification.NoneTaxonomyValue">
      <summary>
            Represents unclassified data.</summary>
    </member>
    <member name="F:Microsoft.Extensions.Compliance.Classification.DataClassification.UnknownTaxonomyValue">
      <summary>
            Represents the unknown classification.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Compliance.Classification.DataClassification.#ctor(System.String,System.UInt64)">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.Compliance.Classification.DataClassification" /> struct.</summary>
      <param name="taxonomyName">The name of the taxonomy this classification belongs to.</param>
      <param name="value">The taxonomy-specific bit vector representing the data classes.</param>
      <exception cref="T:System.ArgumentException">Bit 63, which corresponds to <see cref="F:Microsoft.Extensions.Compliance.Classification.DataClassification.UnknownTaxonomyValue" />, is set in the <paramref name="value" /> value.</exception>
    </member>
    <member name="M:Microsoft.Extensions.Compliance.Classification.DataClassification.Combine(Microsoft.Extensions.Compliance.Classification.DataClassification,Microsoft.Extensions.Compliance.Classification.DataClassification)">
      <summary>
            Combines together two data classifications.</summary>
      <param name="left">The first classification to combine.</param>
      <param name="right">The second classification to combine.</param>
      <exception cref="T:System.ArgumentException">The two classifications aren't part of the same taxonomy.</exception>
      <returns>A new classification object representing the combination of the two input classifications.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Compliance.Classification.DataClassification.Equals(Microsoft.Extensions.Compliance.Classification.DataClassification)">
      <summary>
            Checks if object is equal to this instance of <see cref="T:Microsoft.Extensions.Compliance.Classification.DataClassification" />.</summary>
      <param name="other">Instance of <see cref="T:Microsoft.Extensions.Compliance.Classification.DataClassification" /> to check for equality.</param>
      <returns>
        <see langword="true" /> if object instances are equal <see langword="false" /> otherwise.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Compliance.Classification.DataClassification.Equals(System.Object)">
      <summary>
            Checks if object is equal to this instance of <see cref="T:Microsoft.Extensions.Compliance.Classification.DataClassification" />.</summary>
      <param name="obj">Object to check for equality.</param>
      <returns>
        <see langword="true" /> if object instances are equal <see langword="false" /> otherwise.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Compliance.Classification.DataClassification.GetHashCode">
      <summary>
            Get the hash code the current instance.</summary>
      <returns>Hash code.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Compliance.Classification.DataClassification.op_BitwiseOr(Microsoft.Extensions.Compliance.Classification.DataClassification,Microsoft.Extensions.Compliance.Classification.DataClassification)">
      <summary>
            Combines together two data classifications.</summary>
      <param name="left">The first classification to combine.</param>
      <param name="right">The second classification to combine.</param>
      <exception cref="T:System.ArgumentException">The two classifications aren't part of the same taxonomy.</exception>
      <returns>A new classification object representing the combination of the two input classifications.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Compliance.Classification.DataClassification.op_Equality(Microsoft.Extensions.Compliance.Classification.DataClassification,Microsoft.Extensions.Compliance.Classification.DataClassification)">
      <summary>
            Check if two instances are equal.</summary>
      <param name="left">Left argument of the comparison.</param>
      <param name="right">Right argument of the comparison.</param>
      <returns>
        <see langword="true" /> if object instances are equal, or <see langword="false" /> otherwise.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Compliance.Classification.DataClassification.op_Inequality(Microsoft.Extensions.Compliance.Classification.DataClassification,Microsoft.Extensions.Compliance.Classification.DataClassification)">
      <summary>
            Check if two instances are not equal.</summary>
      <param name="left">Left argument of the comparison.</param>
      <param name="right">Right argument of the comparison.</param>
      <returns>
        <see langword="false" /> if object instances are equal, or <see langword="true" /> otherwise.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Compliance.Classification.DataClassification.ToString">
      <summary>
            Gets a string representation of this object.</summary>
      <returns>A string representing the object.</returns>
    </member>
    <member name="P:Microsoft.Extensions.Compliance.Classification.DataClassification.None">
      <summary>
            Gets the value to represent data with no defined classification.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Compliance.Classification.DataClassification.TaxonomyName">
      <summary>
            Gets the name of the taxonomy that recognizes this classification.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Compliance.Classification.DataClassification.Unknown">
      <summary>
            Gets the value to represent data with an unknown classification.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Compliance.Classification.DataClassification.Value">
      <summary>
            Gets the bit mask representing the data classes.</summary>
    </member>
    <member name="T:Microsoft.Extensions.Compliance.Classification.DataClassificationAttribute">
      <summary>
            Base attribute for data classification.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Compliance.Classification.DataClassificationAttribute.#ctor(Microsoft.Extensions.Compliance.Classification.DataClassification)">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.Compliance.Classification.DataClassificationAttribute" /> class.</summary>
      <param name="classification">The data classification to apply.</param>
    </member>
    <member name="P:Microsoft.Extensions.Compliance.Classification.DataClassificationAttribute.Classification">
      <summary>
            Gets the data class represented by this attribute.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Compliance.Classification.DataClassificationAttribute.Notes">
      <summary>
            Gets or sets the notes.</summary>
    </member>
    <member name="T:Microsoft.Extensions.Compliance.Classification.NoDataClassificationAttribute">
      <summary>
            Indicates data which is specifically not classified.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Compliance.Classification.NoDataClassificationAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.Compliance.Classification.NoDataClassificationAttribute" /> class.</summary>
    </member>
    <member name="T:Microsoft.Extensions.Compliance.Classification.UnknownDataClassificationAttribute">
      <summary>
            Indicates data whose classification is unknown.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Compliance.Classification.UnknownDataClassificationAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.Compliance.Classification.UnknownDataClassificationAttribute" /> class.</summary>
    </member>
    <member name="T:Microsoft.Extensions.Compliance.Redaction.IRedactionBuilder">
      <summary>
            Adds redactors to the application.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Compliance.Redaction.IRedactionBuilder.SetFallbackRedactor``1">
      <summary>
            Sets the redactor to use when processing classified data for which no specific redactor has been registered.</summary>
      <typeparam name="T">Redactor type.</typeparam>
      <returns>The value of this instance.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Compliance.Redaction.IRedactionBuilder.SetRedactor``1(Microsoft.Extensions.Compliance.Classification.DataClassification[])">
      <summary>
            Sets the redactor to use for a set of data classes.</summary>
      <param name="classifications">The data classes for which the redactor type should be used.</param>
      <typeparam name="T">Redactor type.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="classifications" /> is <see langword="null" />.</exception>
      <returns>The value of this instance.</returns>
    </member>
    <member name="P:Microsoft.Extensions.Compliance.Redaction.IRedactionBuilder.Services">
      <summary>
            Gets the service collection into which the redactor instances are registered.</summary>
    </member>
    <member name="T:Microsoft.Extensions.Compliance.Redaction.IRedactorProvider">
      <summary>
            Provides redactors for different data classes.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Compliance.Redaction.IRedactorProvider.GetRedactor(Microsoft.Extensions.Compliance.Classification.DataClassification)">
      <summary>
            Gets the redactor configured to handle the specified data class.</summary>
      <param name="classification">Data classification of the data to redact.</param>
      <returns>A redactor suitable to redact data of the given class.</returns>
    </member>
    <member name="T:Microsoft.Extensions.Compliance.Redaction.NullRedactor">
      <summary>
            Redactor that does nothing to its input and returns it as-is.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Compliance.Redaction.NullRedactor.#ctor" />
    <member name="M:Microsoft.Extensions.Compliance.Redaction.NullRedactor.GetRedactedLength(System.ReadOnlySpan{System.Char})">
      <summary>Gets the number of characters produced by redacting the input.</summary>
      <param name="input">Value to be redacted.</param>
      <returns>The number of characters produced by redacting the input.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Compliance.Redaction.NullRedactor.Redact(System.ReadOnlySpan{System.Char},System.Span{System.Char})">
      <summary>Redacts potentially sensitive data.</summary>
      <param name="source">Value to redact.</param>
      <param name="destination">Buffer to store redacted value.</param>
      <returns>Number of characters produced when redacting the given source input.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Compliance.Redaction.NullRedactor.Redact(System.String)">
      <summary>Redacts potentially sensitive data.</summary>
      <param name="source">Value to redact.</param>
      <returns>Redacted value.</returns>
    </member>
    <member name="P:Microsoft.Extensions.Compliance.Redaction.NullRedactor.Instance">
      <summary>
            Gets the singleton instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Extensions.Compliance.Redaction.NullRedactorProvider">
      <summary>
            A provider that only returns the <see langword="null" /> redactor implementation used for situations that don't require redaction.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Compliance.Redaction.NullRedactorProvider.#ctor" />
    <member name="M:Microsoft.Extensions.Compliance.Redaction.NullRedactorProvider.GetRedactor(Microsoft.Extensions.Compliance.Classification.DataClassification)">
      <summary>Gets the redactor configured to handle the specified data class.</summary>
      <param name="classification">Data classification of the data to redact.</param>
      <returns>A redactor suitable to redact data of the given class.</returns>
    </member>
    <member name="P:Microsoft.Extensions.Compliance.Redaction.NullRedactorProvider.Instance">
      <summary>
            Gets the singleton instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Extensions.Compliance.Redaction.RedactionAbstractionsExtensions">
      <summary>
            Redaction utility methods.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Compliance.Redaction.RedactionAbstractionsExtensions.AppendRedacted(System.Text.StringBuilder,Microsoft.Extensions.Compliance.Redaction.Redactor,System.ReadOnlySpan{System.Char})">
      <summary>
            Redacts potentially sensitive data and appends it to a <see cref="T:System.Text.StringBuilder" /> instance.</summary>
      <param name="stringBuilder">Instance of <see cref="T:System.Text.StringBuilder" /> to append the redacted value.</param>
      <param name="redactor">The redactor that will redact the input value.</param>
      <param name="value">Value to redact.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="redactor" /> is <see langword="null" />.</exception>
      <returns>Returns the value of <paramref name="stringBuilder" />.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Compliance.Redaction.RedactionAbstractionsExtensions.AppendRedacted(System.Text.StringBuilder,Microsoft.Extensions.Compliance.Redaction.Redactor,System.String)">
      <summary>
            Redacts potentially sensitive data and appends it to a <see cref="T:System.Text.StringBuilder" /> instance.</summary>
      <param name="stringBuilder">Instance of <see cref="T:System.Text.StringBuilder" /> to append the redacted value.</param>
      <param name="redactor">The redactor that will redact the input value.</param>
      <param name="value">Value to redact.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <returns>Returns the value of <paramref name="stringBuilder" />.</returns>
    </member>
    <member name="T:Microsoft.Extensions.Compliance.Redaction.Redactor">
      <summary>
            Enables the redaction of potentially sensitive data.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Compliance.Redaction.Redactor.#ctor" />
    <member name="M:Microsoft.Extensions.Compliance.Redaction.Redactor.GetRedactedLength(System.ReadOnlySpan{System.Char})">
      <summary>
            Gets the number of characters produced by redacting the input.</summary>
      <param name="input">Value to be redacted.</param>
      <returns>The number of characters produced by redacting the input.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Compliance.Redaction.Redactor.GetRedactedLength(System.String)">
      <summary>
            Gets the number of characters produced by redacting the input.</summary>
      <param name="input">Value to be redacted.</param>
      <returns>Minimum buffer size.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Compliance.Redaction.Redactor.Redact(System.ReadOnlySpan{System.Char})">
      <summary>
            Redacts potentially sensitive data.</summary>
      <param name="source">Value to redact.</param>
      <returns>Redacted value.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Compliance.Redaction.Redactor.Redact(System.ReadOnlySpan{System.Char},System.Span{System.Char})">
      <summary>
            Redacts potentially sensitive data.</summary>
      <param name="source">Value to redact.</param>
      <param name="destination">Buffer to store redacted value.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> is too small.</exception>
      <returns>Number of characters produced when redacting the given source input.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Compliance.Redaction.Redactor.Redact(System.String)">
      <summary>
            Redacts potentially sensitive data.</summary>
      <param name="source">Value to redact.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <returns>Redacted value.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Compliance.Redaction.Redactor.Redact(System.String,System.Span{System.Char})">
      <summary>
            Redacts potentially sensitive data.</summary>
      <param name="source">Value to redact.</param>
      <param name="destination">Buffer to redact into.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> is too small.</exception>
      <returns>Number of characters written to the buffer.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Compliance.Redaction.Redactor.Redact``1(``0,System.Span{System.Char},System.String,System.IFormatProvider)">
      <summary>
            Redacts potentially sensitive data.</summary>
      <param name="value">Value to redact.</param>
      <param name="destination">Buffer to redact into.</param>
      <param name="format">
            The optional format string that selects the specific formatting operation performed. Refer to the
            documentation of the type being formatted to understand the values you can supply here.</param>
      <param name="provider">Format provider used to produce a string representing the value.</param>
      <typeparam name="T">Type of value to redact.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> is too small.</exception>
      <returns>Number of characters written to the buffer.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Compliance.Redaction.Redactor.Redact``1(``0,System.String,System.IFormatProvider)">
      <summary>
            Redacts potentially sensitive data.</summary>
      <param name="value">Value to redact.</param>
      <param name="format">
            The optional format that selects the specific formatting operation performed. Refer to the
            documentation of the type being formatted to understand the values you can supply here.</param>
      <param name="provider">Format provider used to produce a string representing the value.</param>
      <typeparam name="T">Type of value to redact.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <returns>Redacted value.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Compliance.Redaction.Redactor.TryRedact``1(``0,System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <summary>
            Tries to redact potentially sensitive data.</summary>
      <param name="value">The value to redact.</param>
      <param name="destination">The buffer to redact into.</param>
      <param name="charsWritten">When this method returns, contains the number of redacted characters that were written to the destination buffer.</param>
      <param name="format">
            The format string that selects the specific formatting operation performed. Refer to the
            documentation of the type being formatted to understand the values you can supply here.</param>
      <param name="provider">The format provider used to produce a string representing the value.</param>
      <typeparam name="T">The type of value to redact.</typeparam>
      <returns>
        <see langword="true" /> if the destination buffer was large enough, otherwise <see langword="false" />.</returns>
    </member>
  </members>
</doc>