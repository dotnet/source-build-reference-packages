<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Numerics.Tensors</name>
  </assembly>
  <members>
    <member name="T:System.Buffers.NIndex">
      <summary>Represent a type can be used to index a collection either from the start or the end.</summary>
    </member>
    <member name="M:System.Buffers.NIndex.#ctor(System.Index)">
      <summary>Construct a <see cref="T:System.Buffers.NIndex" /> from a <see cref="T:System.Index" /></summary>
      <param name="index">The <see cref="T:System.Index" /> to create the <see cref="T:System.Buffers.NIndex" /> from.</param>
    </member>
    <member name="M:System.Buffers.NIndex.#ctor(System.IntPtr,System.Boolean)">
      <summary>Construct an <see cref="T:System.Buffers.NIndex" /> using a value and indicating if the <see cref="T:System.Buffers.NIndex" /> is from the start or from the end.</summary>
      <param name="value">The index value. it has to be zero or positive number.</param>
      <param name="fromEnd">Indicating if the index is from the start or from the end.</param>
    </member>
    <member name="M:System.Buffers.NIndex.Equals(System.Buffers.NIndex)">
      <summary>Indicates whether the current NIndex object is equal to another NIndex object.</summary>
      <param name="other">An object to compare with this object</param>
    </member>
    <member name="M:System.Buffers.NIndex.Equals(System.Object)">
      <summary>Indicates whether the current NIndex object is equal to another object of the same type.</summary>
      <param name="value">An object to compare with this object</param>
    </member>
    <member name="M:System.Buffers.NIndex.FromEnd(System.IntPtr)">
      <summary>Create an NIndex from the end at the position indicated by the value.</summary>
      <param name="value">The index value from the end.</param>
    </member>
    <member name="M:System.Buffers.NIndex.FromStart(System.IntPtr)">
      <summary>Create an <see cref="T:System.Buffers.NIndex" /> from the start at the position indicated by the value.</summary>
      <param name="value">The index value from the start.</param>
    </member>
    <member name="M:System.Buffers.NIndex.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
    </member>
    <member name="M:System.Buffers.NIndex.GetOffset(System.IntPtr)">
      <summary>Calculate the offset from the start using the giving collection length.</summary>
      <param name="length">The length of the collection that the NIndex will be used with. length has to be a positive value</param>
    </member>
    <member name="M:System.Buffers.NIndex.op_CheckedExplicit(System.Buffers.NIndex)">
      <param name="value" />
    </member>
    <member name="M:System.Buffers.NIndex.op_Explicit(System.Buffers.NIndex)~System.Index">
      <summary>Converts a <see cref="T:System.Buffers.NIndex" /> to an <see cref="T:System.Index" />."/&gt;</summary>
      <param name="value" />
    </member>
    <member name="M:System.Buffers.NIndex.op_Implicit(System.Index)~System.Buffers.NIndex">
      <summary>Converts native integer number to an NIndex.</summary>
      <param name="value" />
    </member>
    <member name="M:System.Buffers.NIndex.op_Implicit(System.IntPtr)~System.Buffers.NIndex">
      <summary>Converts integer number to an NIndex.</summary>
      <param name="value" />
    </member>
    <member name="M:System.Buffers.NIndex.ToIndex">
      <summary>
            Converts the <see cref="T:System.Buffers.NIndex" /> to an <see cref="T:System.Index" />.</summary>
      <returns>The converted Index.</returns>
    </member>
    <member name="M:System.Buffers.NIndex.ToIndexUnchecked">
      <summary>
            Converts the <see cref="T:System.Buffers.NIndex" /> to an <see cref="T:System.Index" /> without doing bounds checks.</summary>
      <returns>The converted Index.</returns>
    </member>
    <member name="M:System.Buffers.NIndex.ToString">
      <summary>Converts the value of the current NIndex object to its equivalent string representation.</summary>
    </member>
    <member name="P:System.Buffers.NIndex.End">
      <summary>Create an <see cref="T:System.Buffers.NIndex" /> pointing at beyond last element.</summary>
    </member>
    <member name="P:System.Buffers.NIndex.IsFromEnd">
      <summary>Gets a value that indicates whether the <see cref="T:System.Buffers.NIndex" /> is from the start or the end.</summary>
    </member>
    <member name="P:System.Buffers.NIndex.Start">
      <summary>Create an <see cref="T:System.Buffers.NIndex" /> pointing at first element.</summary>
    </member>
    <member name="P:System.Buffers.NIndex.Value">
      <summary>Returns the <see cref="T:System.Buffers.NIndex" /> value.</summary>
    </member>
    <member name="T:System.Buffers.NRange">
      <summary>Represent a range that has start and end indices.</summary>
    </member>
    <member name="M:System.Buffers.NRange.#ctor(System.Buffers.NIndex,System.Buffers.NIndex)">
      <summary>Constructs an <see cref="T:System.Buffers.NRange" /> object using the start and end <see cref="T:System.Buffers.NIndex" />.</summary>
      <param name="start">Represent the inclusive start <see cref="T:System.Buffers.NIndex" /> of the <see cref="T:System.Buffers.NRange" />.</param>
      <param name="end">Represent the exclusive end <see cref="T:System.Buffers.NIndex" /> of the <see cref="T:System.Buffers.NRange" />.</param>
    </member>
    <member name="M:System.Buffers.NRange.#ctor(System.Range)">
      <summary>
            Constructs an <see cref="T:System.Buffers.NRange" /> object using a <see cref="T:System.Range" />.</summary>
      <param name="range">The <see cref="T:System.Range" /> to use.</param>
    </member>
    <member name="M:System.Buffers.NRange.EndAt(System.Buffers.NIndex)">
      <summary>Create an NRange object starting from first element in the collection to the end NIndex.</summary>
      <param name="end" />
    </member>
    <member name="M:System.Buffers.NRange.Equals(System.Buffers.NRange)">
      <summary>Indicates whether the current NRange object is equal to another NRange object.</summary>
      <param name="other">An object to compare with this object</param>
    </member>
    <member name="M:System.Buffers.NRange.Equals(System.Object)">
      <summary>Indicates whether the current <see cref="T:System.Buffers.NRange" /> object is equal to another object of the same type.</summary>
      <param name="value">An object to compare with this object</param>
    </member>
    <member name="M:System.Buffers.NRange.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
    </member>
    <member name="M:System.Buffers.NRange.GetOffsetAndLength(System.IntPtr)">
      <summary>Calculate the start offset and length of NRange object using a collection length.</summary>
      <param name="length">The length of the collection that the NRange will be used with. length has to be a positive value.</param>
    </member>
    <member name="M:System.Buffers.NRange.op_CheckedExplicit(System.Buffers.NRange)">
      <param name="value" />
    </member>
    <member name="M:System.Buffers.NRange.op_Explicit(System.Buffers.NRange)~System.Range">
      <summary>
            Explicitly converts an <see cref="T:System.Buffers.NRange" /> to a <see cref="T:System.Range" /> without doing bounds checks.</summary>
      <param name="value">
        <see cref="T:System.Buffers.NRange" /> to convert.</param>
    </member>
    <member name="M:System.Buffers.NRange.op_Implicit(System.Range)~System.Buffers.NRange">
      <summary>
            Implicitly converts a <see cref="T:System.Range" /> to an <see cref="T:System.Buffers.NRange" />.</summary>
      <param name="range" />
    </member>
    <member name="M:System.Buffers.NRange.StartAt(System.Buffers.NIndex)">
      <summary>Create an NRange object starting from start NIndex to the end of the collection.</summary>
      <param name="start" />
    </member>
    <member name="M:System.Buffers.NRange.ToRange">
      <summary>
            Converts a <see cref="T:System.Buffers.NRange" /> to a <see cref="T:System.Range" />.</summary>
      <returns>The converted Range.</returns>
    </member>
    <member name="M:System.Buffers.NRange.ToRangeUnchecked">
      <summary>
            Converts a <see cref="T:System.Buffers.NRange" /> to a <see cref="T:System.Range" /> wihout doing bounds checks.</summary>
      <returns>The converted Range.</returns>
    </member>
    <member name="M:System.Buffers.NRange.ToString">
      <summary>Converts the value of the current NRange object to its equivalent string representation.</summary>
    </member>
    <member name="P:System.Buffers.NRange.All">
      <summary>Create an NRange object starting from first element to the end.</summary>
    </member>
    <member name="P:System.Buffers.NRange.End">
      <summary>Gets the exclusive end NIndex of the NRange.</summary>
    </member>
    <member name="P:System.Buffers.NRange.Start">
      <summary>Gets the inclusive start NIndex of the NRange.</summary>
    </member>
    <member name="T:System.Numerics.Tensors.IReadOnlyTensor`2">
      <summary>
            Represents a read-only tensor.</summary>
      <typeparam name="TSelf">The type that implements this interface.</typeparam>
      <typeparam name="T">The element type.</typeparam>
    </member>
    <member name="M:System.Numerics.Tensors.IReadOnlyTensor`2.AsReadOnlyTensorSpan">
      <summary>
            Creates a read-only tensor span for the entire underlying buffer.</summary>
      <returns>The converted <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.IReadOnlyTensor`2.AsReadOnlyTensorSpan(System.ReadOnlySpan{System.Buffers.NIndex})">
      <summary>
            Creates a read-only tensor span for the specified start indexes.</summary>
      <param name="startIndex">The started indexes to be used.</param>
      <returns>The converted <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.IReadOnlyTensor`2.AsReadOnlyTensorSpan(System.ReadOnlySpan{System.Buffers.NRange})">
      <summary>
            Creates a read-only tensor span for the specified ranges.</summary>
      <param name="range">The ranges to be used.</param>
      <returns>The converted <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.IReadOnlyTensor`2.AsReadOnlyTensorSpan(System.ReadOnlySpan{System.IntPtr})">
      <summary>
            Creates a read-only tensor span for the specified start indexes.</summary>
      <param name="start">The start locations to be used.</param>
      <returns>The converted <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.IReadOnlyTensor`2.CopyTo(System.Numerics.Tensors.TensorSpan{`1})">
      <summary>
            Copies the tensor to the specified destination. The destination tensor must be equal to or larger than the source tensor.</summary>
      <param name="destination">The destination span where the data should be copied to.</param>
    </member>
    <member name="M:System.Numerics.Tensors.IReadOnlyTensor`2.FlattenTo(System.Span{`1})">
      <summary>
            Flattens the tensor to the specified destination. The destination span must be equal to or larger than the number of elements in the source tensor.</summary>
      <param name="destination">The destination span where the data should be flattened to.</param>
    </member>
    <member name="M:System.Numerics.Tensors.IReadOnlyTensor`2.GetPinnableReference">
      <summary>
            Returns a reference to the 0th element of the tensor. If the tensor is empty, returns <see langword="null" />.</summary>
    </member>
    <member name="M:System.Numerics.Tensors.IReadOnlyTensor`2.Slice(System.ReadOnlySpan{System.Buffers.NIndex})">
      <summary>
            Slices the tensor using the specified start indexes.</summary>
      <param name="startIndex">The start indexes to be used.</param>
      <returns>The sliced tensor.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.IReadOnlyTensor`2.Slice(System.ReadOnlySpan{System.Buffers.NRange})">
      <summary>
            Slices the tensor using the specified ranges.</summary>
      <param name="range">The ranges to be used.</param>
      <returns>The sliced tensor.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.IReadOnlyTensor`2.Slice(System.ReadOnlySpan{System.IntPtr})">
      <summary>
            Slices the tensor using the specified start indexes.</summary>
      <param name="start">The start locations to be used.</param>
      <returns>The sliced tensor.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.IReadOnlyTensor`2.TryCopyTo(System.Numerics.Tensors.TensorSpan{`1})">
      <summary>
            Tries to copy the tensor to the specified destination. The destination tensor must be equal to or larger than the source tensor.</summary>
      <param name="destination">The destination span where the data should be copied to.</param>
      <returns>
        <see langword="true" /> if the copy succeeded, <see langword="false" /> otherwise.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.IReadOnlyTensor`2.TryFlattenTo(System.Span{`1})">
      <summary>
            Tries to flatten the tensor to the specified destination. The destination span must be equal to or larger than the number of elements in the source tensor.</summary>
      <param name="destination">The destination span where the data should be flattened to.</param>
      <returns>
        <see langword="true" /> if the flatten succeeded, <see langword="false" /> otherwise.</returns>
    </member>
    <member name="P:System.Numerics.Tensors.IReadOnlyTensor`2.Empty">
      <summary>
            Gets an empty tensor.</summary>
    </member>
    <member name="P:System.Numerics.Tensors.IReadOnlyTensor`2.FlattenedLength">
      <summary>
            Gets the number of elements in the tensor.</summary>
    </member>
    <member name="P:System.Numerics.Tensors.IReadOnlyTensor`2.IsEmpty">
      <summary>
            Gets a value that indicates whether the collection is currently empty.</summary>
    </member>
    <member name="P:System.Numerics.Tensors.IReadOnlyTensor`2.IsPinned">
      <summary>
            Gets a value that indicates whether the underlying buffer is pinned.</summary>
    </member>
    <member name="P:System.Numerics.Tensors.IReadOnlyTensor`2.Item(System.ReadOnlySpan{System.Buffers.NIndex})">
      <summary>
            Gets the value at the specified indexes.</summary>
      <param name="indexes">The indexes to be used.</param>
    </member>
    <member name="P:System.Numerics.Tensors.IReadOnlyTensor`2.Item(System.ReadOnlySpan{System.Buffers.NRange})">
      <summary>
            Gets the values at the specified ranges.</summary>
      <param name="ranges">The ranges to be used.</param>
    </member>
    <member name="P:System.Numerics.Tensors.IReadOnlyTensor`2.Item(System.ReadOnlySpan{System.IntPtr})">
      <summary>
            Gets the value at the specified indexes.</summary>
      <param name="indexes">The indexes to be used.</param>
    </member>
    <member name="P:System.Numerics.Tensors.IReadOnlyTensor`2.Lengths">
      <summary>
            Gets the length of each dimension in the tensor.</summary>
    </member>
    <member name="P:System.Numerics.Tensors.IReadOnlyTensor`2.Rank">
      <summary>
            Gets the number of dimensions in the tensor.</summary>
    </member>
    <member name="P:System.Numerics.Tensors.IReadOnlyTensor`2.Strides">
      <summary>
            Gets the stride of each dimension in the tensor.</summary>
    </member>
    <member name="T:System.Numerics.Tensors.ITensor`2">
      <summary>
            Represents a tensor.</summary>
      <typeparam name="TSelf">The type that implements this interface.</typeparam>
      <typeparam name="T">The element type.</typeparam>
    </member>
    <member name="M:System.Numerics.Tensors.ITensor`2.AsTensorSpan">
      <summary>
            Creates a tensor span for the entire underlying buffer.</summary>
      <returns>The converted <see cref="T:System.Numerics.Tensors.TensorSpan`1" />.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.ITensor`2.AsTensorSpan(System.ReadOnlySpan{System.Buffers.NIndex})">
      <summary>
            Creates a tensor span for the specified start indexes.</summary>
      <param name="startIndex">The start indexes to be used.</param>
      <returns>The converted <see cref="T:System.Numerics.Tensors.TensorSpan`1" />.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.ITensor`2.AsTensorSpan(System.ReadOnlySpan{System.Buffers.NRange})">
      <summary>
            Creates a tensor span for the specified ranges.</summary>
      <param name="range">The ranges to be used.</param>
      <returns>The converted <see cref="T:System.Numerics.Tensors.TensorSpan`1" />.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.ITensor`2.AsTensorSpan(System.ReadOnlySpan{System.IntPtr})">
      <summary>
            Creates a tensor span for the specified start indexes.</summary>
      <param name="start">The start locations to be used.</param>
      <returns>The converted <see cref="T:System.Numerics.Tensors.TensorSpan`1" />.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.ITensor`2.Clear">
      <summary>
            Clears the tensor.</summary>
    </member>
    <member name="M:System.Numerics.Tensors.ITensor`2.Create(System.ReadOnlySpan{System.IntPtr},System.Boolean)">
      <summary>
            Creates a new tensor with the specified lengths.</summary>
      <param name="lengths">The lengths of each dimension.</param>
      <param name="pinned">
        <see langword="true" /> to pin the underlying buffer. The default is <see langword="false" />.</param>
    </member>
    <member name="M:System.Numerics.Tensors.ITensor`2.Create(System.ReadOnlySpan{System.IntPtr},System.ReadOnlySpan{System.IntPtr},System.Boolean)">
      <summary>
            Creates a new tensor with the specified lengths and strides.</summary>
      <param name="lengths">The lengths of each dimension.</param>
      <param name="strides">The strides of each dimension.</param>
      <param name="pinned">
        <see langword="true" /> to pin the underlying buffer. The default is <see langword="false" />.</param>
    </member>
    <member name="M:System.Numerics.Tensors.ITensor`2.CreateUninitialized(System.ReadOnlySpan{System.IntPtr},System.Boolean)">
      <summary>
            Creates a new tensor with the specified lengths and strides.</summary>
      <param name="lengths">The lengths of each dimension.</param>
      <param name="pinned">
        <see langword="true" /> to pin the underlying buffer. The default is <see langword="false" />.</param>
    </member>
    <member name="M:System.Numerics.Tensors.ITensor`2.CreateUninitialized(System.ReadOnlySpan{System.IntPtr},System.ReadOnlySpan{System.IntPtr},System.Boolean)">
      <summary>
            Creates a new tensor with the specified lengths and strides. If <paramref name="pinned" /> is true the underlying buffer is
            created permanently pinned, otherwise the underlying buffer is not pinned. The underlying buffer is not initialized.</summary>
      <param name="lengths">The lengths of each dimension.</param>
      <param name="strides">The strides of each dimension.</param>
      <param name="pinned">
        <see langword="true" /> to pin the underlying buffer. The default is <see langword="false" />.</param>
    </member>
    <member name="M:System.Numerics.Tensors.ITensor`2.Fill(`1)">
      <summary>
            Fills the contents of this tensor with the given value.</summary>
      <param name="value" />
    </member>
    <member name="M:System.Numerics.Tensors.ITensor`2.GetPinnableReference">
      <summary>
            Returns a reference to the 0th element of the tensor. If the tensor is empty, returns <see langword="null" />.</summary>
    </member>
    <member name="P:System.Numerics.Tensors.ITensor`2.IsReadOnly">
      <summary>
            Gets a value that idicates whether the collection is read-only.</summary>
    </member>
    <member name="P:System.Numerics.Tensors.ITensor`2.Item(System.ReadOnlySpan{System.Buffers.NIndex})">
      <summary>
            Gets the value at the specified indexes.</summary>
      <param name="indexes">The indexes to use.</param>
    </member>
    <member name="P:System.Numerics.Tensors.ITensor`2.Item(System.ReadOnlySpan{System.Buffers.NRange})">
      <summary>
            Gets the values at the specified ranges.</summary>
      <param name="ranges">The ranges to be used.</param>
    </member>
    <member name="P:System.Numerics.Tensors.ITensor`2.Item(System.ReadOnlySpan{System.IntPtr})">
      <summary>
            Gets the value at the specified indexes.</summary>
      <param name="indexes">The indexes to use.</param>
    </member>
    <member name="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1">
      <summary>
            ReadOnlyTensorSpan represents a contiguous region of arbitrary memory. Unlike arrays, it can point to either managed
            or native memory, or to memory allocated on the stack. It is type-safe and memory-safe.</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.#ctor(`0[],System.Index,System.ReadOnlySpan{System.IntPtr},System.ReadOnlySpan{System.IntPtr})">
      <summary>
            Creates a new span over the portion of the target array beginning
            at 'start' index and ending at 'end' index (exclusive).</summary>
      <param name="array">The target array.</param>
      <param name="startIndex">The index at which to begin the span.</param>
      <param name="lengths">The lengths of the dimensions. If default is provided its assumed to have 1 dimension with a length equal to the length of the data.</param>
      <param name="strides">The strides of each dimension. If default or span of length 0 is provided then strides will be automatically calculated.</param>
      <exception cref="T:System.ArrayTypeMismatchException">Thrown when <paramref name="array" /> is covariant and array's type is not exactly T[].</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the specified <paramref name="startIndex" /> or end index is not in the range (&lt;0 or &gt;FlattenedLength).</exception>
    </member>
    <member name="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.#ctor(`0[],System.Int32,System.ReadOnlySpan{System.IntPtr},System.ReadOnlySpan{System.IntPtr})">
      <summary>
            Creates a new span over the portion of the target array beginning
            at 'start' index and ending at 'end' index (exclusive).</summary>
      <param name="array">The target array.</param>
      <param name="start">The index at which to begin the span.</param>
      <param name="lengths">The lengths of the dimensions. If default is provided its assumed to have 1 dimension with a length equal to the length of the data.</param>
      <param name="strides">The strides of each dimension. If default or span of length 0 is provided then strides will be automatically calculated.</param>
      <exception cref="T:System.ArrayTypeMismatchException">Thrown when <paramref name="array" /> is covariant and array's type is not exactly T[].</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the specified <paramref name="start" /> or end index is not in the range (&lt;0 or &gt;FlattenedLength).</exception>
    </member>
    <member name="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.#ctor(`0[])">
      <summary>
            Creates a new span over the entirety of the target array.</summary>
      <param name="array">The target array.</param>
      <exception cref="T:System.ArrayTypeMismatchException">Thrown when <paramref name="array" /> is covariant and array's type is not exactly T[].</exception>
    </member>
    <member name="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.#ctor(`0*,System.IntPtr,System.ReadOnlySpan{System.IntPtr},System.ReadOnlySpan{System.IntPtr})">
      <summary>
            Creates a new span over the target unmanaged buffer.  Clearly this
            is quite dangerous, because the length is not checked.
            But if this creation is correct, then all subsequent uses are correct.</summary>
      <param name="data">An unmanaged data to memory.</param>
      <param name="dataLength">The number of elements the unmanaged memory can hold.</param>
      <param name="lengths">The lengths of the dimensions. If default is provided its assumed to have 1 dimension with a length equal to the length of the data.</param>
      <param name="strides">The lengths of the strides. If nothing is provided it figures out the default stride configuration.</param>
      <exception cref="T:System.ArgumentException">
            Thrown when <typeparamref name="T" /> is reference type or contains pointers and hence cannot be stored in unmanaged memory.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the specified length is negative.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.#ctor(`0*,System.IntPtr)">
      <summary>
            Creates a new span over the target unmanaged buffer.  Clearly this
            is quite dangerous the length is not checked.
            But if this creation is correct, then all subsequent uses are correct.</summary>
      <param name="data">An unmanaged data to memory.</param>
      <param name="dataLength">The number of elements the unmanaged memory can hold.</param>
    </member>
    <member name="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.#ctor(System.Array,System.ReadOnlySpan{System.Buffers.NIndex},System.ReadOnlySpan{System.IntPtr},System.ReadOnlySpan{System.IntPtr})">
      <summary>
            Creates a new <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> over the provided <see cref="T:System.Array" /> using the specified start offsets, lengths, and strides.
            If the strides are not provided, they will be automatically calculated.</summary>
      <param name="array">The target array.</param>
      <param name="startIndex">The starting offset for each dimension.</param>
      <param name="lengths">The lengths of each dimension.</param>
      <param name="strides">The strides for each dimension. Will be automatically calculated if not provided.</param>
    </member>
    <member name="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.#ctor(System.Array,System.ReadOnlySpan{System.Int32},System.ReadOnlySpan{System.IntPtr},System.ReadOnlySpan{System.IntPtr})">
      <summary>
            Creates a new <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> over the provided <see cref="T:System.Array" /> using the specified start offsets, lengths, and strides.
            If the strides are not provided, they will be automatically calculated.</summary>
      <param name="array">The target array.</param>
      <param name="start">The starting offset for each dimension.</param>
      <param name="lengths">The lengths of each dimension.</param>
      <param name="strides">The strides for each dimension. Will be automatically calculated if not provided.</param>
    </member>
    <member name="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.#ctor(System.Array)">
      <summary>
            Creates a new <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> over the provided <see cref="T:System.Array" />. The new <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> will
            have a rank of 1 and a length equal to the length of the provided <see cref="T:System.Array" />.</summary>
      <param name="array">The target array.</param>
    </member>
    <member name="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.#ctor(System.ReadOnlySpan{`0},System.ReadOnlySpan{System.IntPtr},System.ReadOnlySpan{System.IntPtr})">
      <summary>
            Creates a new <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> over the provided <see cref="T:System.Span`1" /> using the specified lengths and strides.
            If the strides are not provided, they will be automatically calculated.</summary>
      <param name="span">The target span.</param>
      <param name="lengths">The lengths of each dimension.</param>
      <param name="strides">The strides for each dimension. Will be automatically calculated if not provided.</param>
    </member>
    <member name="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.#ctor(System.ReadOnlySpan{`0})">
      <summary>
            Creates a new <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> over the provided <see cref="T:System.ReadOnlySpan`1" />. The new <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> will
            have a rank of 1 and a length equal to the length of the provided <see cref="T:System.ReadOnlySpan`1" />.</summary>
      <param name="span">The target span.</param>
    </member>
    <member name="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.CastUp``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0})">
      <summary>
            Casts a read-only span of <typeparamref name="TDerived" /> to a read-only span of <typeparamref name="T" />.</summary>
      <param name="items">The source read-only span. No copy is made.</param>
      <typeparam name="TDerived">The element type of the source read-only span, which must be derived from <typeparamref name="T" />.</typeparam>
      <returns>A read-only span with elements cast to the new type.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.CopyTo(System.Numerics.Tensors.TensorSpan{`0})">
      <summary>
            Copies the contents of this read-only span into destination span. If the source
            and destinations overlap, this method behaves as if the original values in
            a temporary location before the destination is overwritten.</summary>
      <param name="destination">The span to copy items into.</param>
      <exception cref="T:System.ArgumentException">
            Thrown when the destination ReadOnlyTensorSpan is shorter than the source ReadOnlyTensorSpan.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.Equals(System.Object)">
      <summary>
            This method is not supported as spans cannot be boxed. To compare two spans, use operator==.</summary>
      <param name="obj" />
      <exception cref="T:System.NotSupportedException">
            Always thrown by this method.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.FlattenTo(System.Span{`0})">
      <summary>
            Flattens the contents of this span into the provided <see cref="T:System.Span`1" />.</summary>
      <param name="destination">The span to copy items into.</param>
    </member>
    <member name="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.GetEnumerator">
      <summary>Gets an enumerator for this span.</summary>
    </member>
    <member name="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.GetHashCode">
      <summary>
            This method is not supported as spans cannot be boxed.</summary>
      <exception cref="T:System.NotSupportedException">
            Always thrown by this method.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.GetPinnableReference">
      <summary>
            Returns a reference to the 0th element of the ReadOnlyTensorSpan. If the ReadOnlyTensorSpan is empty, returns null reference.
            It can be used for pinning and is required to support the use of span within a fixed statement.</summary>
    </member>
    <member name="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.op_Equality(System.Numerics.Tensors.ReadOnlyTensorSpan{`0},System.Numerics.Tensors.ReadOnlyTensorSpan{`0})">
      <summary>
            Returns true if left and right point at the same memory and have the same length.  Note that
            this does not check to see if the contents are equal.</summary>
      <param name="left" />
      <param name="right" />
      <returns>
        <see langword="true" /> if left and right point at the same memory and have the same length. This operator does not check if the contents are equal.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.op_Implicit(T[])~System.Numerics.Tensors.ReadOnlyTensorSpan{`0}">
      <param name="array" />
    </member>
    <member name="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.op_Inequality(System.Numerics.Tensors.ReadOnlyTensorSpan{`0},System.Numerics.Tensors.ReadOnlyTensorSpan{`0})">
      <summary>
            Returns false if left and right point at the same memory and have the same length.  Note that
            this does not check to see if the contents are equal.</summary>
      <param name="left" />
      <param name="right" />
      <returns>
        <see langword="false" /> if left and right point at the same memory and have the same length. This operator does not check if the contents are unequal.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.Slice(System.ReadOnlySpan{System.Buffers.NIndex})">
      <summary>
            Returns a reference to specified element of the TensorSpan.</summary>
      <param name="indexes">The indexes for the slice.</param>
      <exception cref="T:System.IndexOutOfRangeException">
            Thrown when any index is less than 0 or any index is greater than or equal to FlattenedLength</exception>
      <returns />
    </member>
    <member name="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.Slice(System.ReadOnlySpan{System.Buffers.NRange})">
      <summary>
            Forms a slice out of the given span</summary>
      <param name="ranges">The ranges for the slice</param>
      <returns>A <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> based on the provided <paramref name="ranges" /></returns>
    </member>
    <member name="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> with the name of the type and the number of elements.</summary>
    </member>
    <member name="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.TryCopyTo(System.Numerics.Tensors.TensorSpan{`0})">
      <summary>
            Copies the contents of this read-only span into destination span. If the source
            and destinations overlap, this method behaves as if the original values in
            a temporary location before the destination is overwritten.</summary>
      <param name="destination">The span to copy items into.</param>
      <returns>If the destination span is shorter than the source span, this method
            return false and no data is written to the destination.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.TryFlattenTo(System.Span{`0})">
      <summary>
            Flattens the contents of this span into the provided <see cref="T:System.Span`1" />.</summary>
      <param name="destination">The span to copy items into.</param>
    </member>
    <member name="P:System.Numerics.Tensors.ReadOnlyTensorSpan`1.Empty">
      <summary>
            Returns a 0-length read-only span whose base is the null pointer.</summary>
    </member>
    <member name="P:System.Numerics.Tensors.ReadOnlyTensorSpan`1.FlattenedLength">
      <summary>
            The number of items in the span.</summary>
    </member>
    <member name="P:System.Numerics.Tensors.ReadOnlyTensorSpan`1.IsEmpty">
      <summary>
            Gets a value indicating whether this <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> is empty.</summary>
      <returns>
        <see langword="true" /> if this span is empty; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Numerics.Tensors.ReadOnlyTensorSpan`1.Item(System.ReadOnlySpan{System.Buffers.NIndex})">
      <summary>
            Returns a reference to specified element of the ReadOnlyTensorSpan.</summary>
      <param name="indexes" />
      <exception cref="T:System.IndexOutOfRangeException">
            Thrown when any index is less than 0 or any index is greater than or equal to FlattenedLength</exception>
    </member>
    <member name="P:System.Numerics.Tensors.ReadOnlyTensorSpan`1.Item(System.ReadOnlySpan{System.Buffers.NRange})">
      <summary>
            Returns a slice of the ReadOnlyTensorSpan.</summary>
      <param name="ranges" />
      <exception cref="T:System.IndexOutOfRangeException">
            Thrown when any index is less than 0 or any index is greater than or equal to FlattenedLength</exception>
    </member>
    <member name="P:System.Numerics.Tensors.ReadOnlyTensorSpan`1.Item(System.ReadOnlySpan{System.IntPtr})">
      <summary>
            Returns a reference to specified element of the ReadOnlyTensorSpan.</summary>
      <param name="indexes" />
      <exception cref="T:System.IndexOutOfRangeException">
            Thrown when any index is less than 0 or any index is greater than or equal to FlattenedLength</exception>
    </member>
    <member name="P:System.Numerics.Tensors.ReadOnlyTensorSpan`1.Lengths">
      <summary>
            Gets the length of each dimension in this <see cref="T:System.Numerics.Tensors.TensorSpan`1" />.</summary>
    </member>
    <member name="P:System.Numerics.Tensors.ReadOnlyTensorSpan`1.Rank">
      <summary>
            Gets the rank, aka the number of dimensions, of this <see cref="T:System.Numerics.Tensors.TensorSpan`1" />.</summary>
    </member>
    <member name="P:System.Numerics.Tensors.ReadOnlyTensorSpan`1.Strides">
      <summary>
            Gets the strides of this <see cref="T:System.Numerics.Tensors.TensorSpan`1" /></summary>
    </member>
    <member name="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1.Enumerator">
      <summary>Enumerates the elements of a <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.Enumerator.MoveNext">
      <summary>Advances the enumerator to the next element of the span.</summary>
    </member>
    <member name="P:System.Numerics.Tensors.ReadOnlyTensorSpan`1.Enumerator.Current">
      <summary>Gets the element at the current position of the enumerator.</summary>
    </member>
    <member name="T:System.Numerics.Tensors.Tensor">
      <summary>
            Provides methods for tensor operations.</summary>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Abs``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>
            Takes the absolute value of each element of the <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> and returns a new <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> with the result.</summary>
      <param name="x">The <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> to take the abs of.</param>
      <param name="destination">The <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> destination.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Abs``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Takes the absolute value of each element of the <see cref="T:System.Numerics.Tensors.Tensor`1" /> and returns a new <see cref="T:System.Numerics.Tensors.Tensor`1" /> with the result.</summary>
      <param name="x">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to take the abs of.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Acos``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>
            Takes the inverse cosine of each element of the <see cref="T:System.Numerics.Tensors.Tensor`1" /> and returns a new <see cref="T:System.Numerics.Tensors.Tensor`1" /> with the result.</summary>
      <param name="x">The <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> to take the sin of.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Acos``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Takes the inverse cosine of each element of the <see cref="T:System.Numerics.Tensors.Tensor`1" /> and returns a new <see cref="T:System.Numerics.Tensors.Tensor`1" /> with the result.</summary>
      <param name="x">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to take the sin of.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Acosh``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>
            Takes the inverse hyperbolic cosine of each element of the <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> and returns a new <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> with the result.</summary>
      <param name="x">The <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> to take the sin of.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Acosh``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Takes the inverse hyperbolic cosine of each element of the <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> and returns a new <see cref="T:System.Numerics.Tensors.Tensor`1" /> with the result.</summary>
      <param name="x">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to take the sin of.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.AcosPi``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>
            Takes the inverse hyperbolic cosine divided by pi of each element of the <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> and returns a new <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> with the result.</summary>
      <param name="x">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to take the sin of.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.AcosPi``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Takes the inverse hyperbolic cosine divided by pi of each element of the <see cref="T:System.Numerics.Tensors.Tensor`1" /> and returns a new <see cref="T:System.Numerics.Tensors.Tensor`1" /> with the result.</summary>
      <param name="x">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to take the sin of.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Add``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,``0,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>
            Adds <paramref name="y" /> to each element of <paramref name="x" /> and returns a new <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> with the result.</summary>
      <param name="x">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> of values to add.</param>
      <param name="y">The <typeparamref name="T" /> to add to each element of <paramref name="x" />.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Add``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,``0)">
      <summary>
            Adds <paramref name="y" /> to each element of <paramref name="x" /> and returns a new <see cref="T:System.Numerics.Tensors.Tensor`1" /> with the result.</summary>
      <param name="x">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> of values to add.</param>
      <param name="y">The <typeparamref name="T" /> to add to each element of <paramref name="x" />.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Add``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>
            Adds each element of <paramref name="x" /> to each element of <paramref name="y" /> and returns a new <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> with the result.</summary>
      <param name="x">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> of values to add.</param>
      <param name="y">The second <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> of values to add.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Add``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Adds each element of <paramref name="x" /> to each element of <paramref name="y" /> and returns a new <see cref="T:System.Numerics.Tensors.Tensor`1" /> with the result.</summary>
      <param name="x">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> of values to add.</param>
      <param name="y">The second <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> of values to add.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Asin``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>
            Takes the inverse sin of each element of the <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> and returns a new <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> with the result.</summary>
      <param name="x">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to take the sin of.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Asin``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Takes the inverse sin of each element of the <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> and returns a new <see cref="T:System.Numerics.Tensors.Tensor`1" /> with the result.</summary>
      <param name="x">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to take the sin of.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Asinh``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>
            Takes the inverse hyperbolic sine of each element of the <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> and returns a new <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> with the result.</summary>
      <param name="x">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to take the sin of.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Asinh``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Takes the inverse hyperbolic sine of each element of the <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> and returns a new <see cref="T:System.Numerics.Tensors.Tensor`1" /> with the result.</summary>
      <param name="x">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to take the sin of.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.AsinPi``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>
            Takes the inverse hyperbolic sine divided by pi of each element of the <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> and returns a new <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> with the result.</summary>
      <param name="x">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to take the sin of.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.AsinPi``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Takes the inverse hyperbolic sine divided by pi of each element of the <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> and returns a new <see cref="T:System.Numerics.Tensors.Tensor`1" /> with the result.</summary>
      <param name="x">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to take the sin of.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.AsReadOnlyTensorSpan``1(``0[],System.ReadOnlySpan{System.IntPtr})">
      <summary>
            Extension method to more easily create a TensorSpan from an array.</summary>
      <param name="array">The <see cref="T:System.Array" /> with the data</param>
      <param name="lengths">The shape for the <see cref="T:System.Numerics.Tensors.TensorSpan`1" /></param>
      <typeparam name="T">The type of the elements in the array</typeparam>
      <returns />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.AsTensorSpan``1(``0[],System.ReadOnlySpan{System.IntPtr})">
      <summary>
            Extension method to more easily create a TensorSpan from an array.</summary>
      <param name="array">The <see cref="T:System.Array" /> with the data</param>
      <param name="lengths">The shape for the <see cref="T:System.Numerics.Tensors.TensorSpan`1" /></param>
      <typeparam name="T">The type of the elements in the array</typeparam>
      <returns />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Atan``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>
            Takes the arc tangent of each element of the <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> and returns a new <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> with the result.</summary>
      <param name="x">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /></param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Atan``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Takes the arc tangent of each element of the <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> and returns a new <see cref="T:System.Numerics.Tensors.Tensor`1" /> with the result.</summary>
      <param name="x">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /></param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Atan2``1(``0,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>
            Takes the arc tangent of the two input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> and returns a new <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> with the result.</summary>
      <param name="x">The left <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="y">The right <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Atan2``1(``0,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Takes the arc tangent of the two input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> and returns a new <see cref="T:System.Numerics.Tensors.Tensor`1" /> with the result.</summary>
      <param name="x">The left <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="y">The right <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Atan2``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,``0,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>
            Takes the arc tangent of the two input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> and returns a new <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> with the result.</summary>
      <param name="x">The left <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="y">The right <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Atan2``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,``0)">
      <summary>
            Takes the arc tangent of the two input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> and returns a new <see cref="T:System.Numerics.Tensors.Tensor`1" /> with the result.</summary>
      <param name="x">The left <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="y">The right <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Atan2``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>
            Takes the arc tangent of the two input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> and returns a new <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> with the result.</summary>
      <param name="x">The left <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="y">The right <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Atan2``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Takes the arc tangent of the two input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> and returns a new <see cref="T:System.Numerics.Tensors.Tensor`1" /> with the result.</summary>
      <param name="x">The left <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="y">The right <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Atan2Pi``1(``0,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>
            Takes the arc tangent of the two input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />, divides each element by pi, and returns a new <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> with the result.</summary>
      <param name="x">The left <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="y">The right <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Atan2Pi``1(``0,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Takes the arc tangent of the two input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />, divides each element by pi, and returns a new <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> with the result.</summary>
      <param name="x">The left <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="y">The right <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Atan2Pi``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,``0,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>
            Takes the arc tangent of the two input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />, divides each element by pi, and returns a new <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> with the result.</summary>
      <param name="x">The left <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="y">The right <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Atan2Pi``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,``0)">
      <summary>
            Takes the arc tangent of the two input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />, divides each element by pi, and returns a new <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> with the result.</summary>
      <param name="x">The left <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="y">The right <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Atan2Pi``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>
            Takes the arc tangent of the two input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />, divides each element by pi, and returns a new <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> with the result.</summary>
      <param name="x">The left <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="y">The right <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Atan2Pi``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Takes the arc tangent of the two input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />, divides each element by pi, and returns a new <see cref="T:System.Numerics.Tensors.Tensor`1" /> with the result.</summary>
      <param name="x">The left <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="y">The right <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Atanh``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>
            Takes the inverse hyperbolic tangent of each element of the <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> and returns a new <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> with the result.</summary>
      <param name="x">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Atanh``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Takes the inverse hyperbolic tangent of each element of the <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> and returns a new <see cref="T:System.Numerics.Tensors.Tensor`1" /> with the result.</summary>
      <param name="x">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.AtanPi``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>
            Takes the inverse hyperbolic tangent divided by pi of each element of the <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> and returns a new <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> with the result.</summary>
      <param name="x">The input<see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.AtanPi``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Takes the inverse hyperbolic tangent divided by pi of each element of the <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> and returns a new <see cref="T:System.Numerics.Tensors.Tensor`1" /> with the result.</summary>
      <param name="x">The input<see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Average``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Returns the average of the elements in the <paramref name="x" /> tensor.</summary>
      <param name="x">The <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> to take the mean of.</param>
      <typeparam name="T" />
      <returns>
        <typeparamref name="T" /> representing the mean.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.BitwiseAnd``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,``0,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>
            Computes the element-wise bitwise and of the two input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> and returns a new <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> with the result.</summary>
      <param name="x">The left <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="y">The second value.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.BitwiseAnd``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,``0)">
      <summary>
            Computes the element-wise bitwise and of the two input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> and returns a new <see cref="T:System.Numerics.Tensors.Tensor`1" /> with the result.</summary>
      <param name="x">The left <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="y">The second value.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.BitwiseAnd``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>
            Computes the element-wise bitwise and of the two input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> and returns a new <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> with the result.</summary>
      <param name="x">The left <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="y">The right <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.BitwiseAnd``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Computes the element-wise bitwise and of the two input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> and returns a new <see cref="T:System.Numerics.Tensors.Tensor`1" /> with the result.</summary>
      <param name="x">The left <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="y">The right <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.BitwiseOr``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,``0,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>
            Computes the element-wise bitwise or of the two input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> and returns a new <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> with the result.</summary>
      <param name="x">The left <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="y">The second value.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.BitwiseOr``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,``0)">
      <summary>
            Computes the element-wise bitwise or of the two input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> and returns a new <see cref="T:System.Numerics.Tensors.Tensor`1" /> with the result.</summary>
      <param name="x">The left <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="y">The second value.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.BitwiseOr``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>
            Computes the element-wise bitwise of of the two input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> and returns a new <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> with the result.</summary>
      <param name="x">The left <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="y">The right <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.BitwiseOr``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Computes the element-wise bitwise of of the two input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> and returns a new <see cref="T:System.Numerics.Tensors.Tensor`1" /> with the result.</summary>
      <param name="x">The left <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="y">The right <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Broadcast``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Broadcast the data from <paramref name="source" /> to the smallest broadcastable shape compatible with <paramref name="lengthsSource" />. Creates a new <see cref="T:System.Numerics.Tensors.Tensor`1" /> and allocates new memory.</summary>
      <param name="source">Input <see cref="T:System.Numerics.Tensors.Tensor`1" />.</param>
      <param name="lengthsSource">Other <see cref="T:System.Numerics.Tensors.Tensor`1" /> to make shapes broadcastable.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Broadcast``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.ReadOnlySpan{System.IntPtr})">
      <summary>
            Broadcast the data from <paramref name="source" /> to the new shape <paramref name="lengths" />. Creates a new <see cref="T:System.Numerics.Tensors.Tensor`1" /> and allocates new memory.
            If the shape of the <paramref name="source" /> is not compatible with the new shape, an exception is thrown.</summary>
      <param name="source">Input <see cref="T:System.Numerics.Tensors.Tensor`1" />.</param>
      <param name="lengths">
        <see cref="T:System.ReadOnlySpan`1" /> of the desired new shape.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">Thrown when the shapes are not broadcast compatible.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.BroadcastTo``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0},System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>
            Broadcast the data from <paramref name="source" /> to <paramref name="destination" />.</summary>
      <param name="source">Input <see cref="T:System.Numerics.Tensors.TensorSpan`1" />.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.BroadcastTo``1(System.Numerics.Tensors.Tensor{``0},System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>
            Broadcast the data from <paramref name="source" /> to <paramref name="destination" />.</summary>
      <param name="source">Input <see cref="T:System.Numerics.Tensors.TensorSpan`1" />.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.BroadcastTo``1(System.Numerics.Tensors.TensorSpan{``0},System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>
            Broadcast the data from <paramref name="source" /> to <paramref name="destination" />.</summary>
      <param name="source">Input <see cref="T:System.Numerics.Tensors.TensorSpan`1" />.</param>
      <param name="destination">Other <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> to make shapes broadcastable.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Cbrt``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>
            Computes the element-wise cube root of the input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> and returns a new <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> with the result.</summary>
      <param name="x">The left <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Cbrt``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Computes the element-wise cube root of the input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> and returns a new <see cref="T:System.Numerics.Tensors.Tensor`1" /> with the result.</summary>
      <param name="x">The left <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Ceiling``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>
            Computes the element-wise ceiling of the input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> and returns a new <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> with the result.</summary>
      <param name="x">The left <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Ceiling``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Computes the element-wise ceiling of the input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> and returns a new <see cref="T:System.Numerics.Tensors.Tensor`1" /> with the result.</summary>
      <param name="x">The left <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Concatenate``1(System.ReadOnlySpan{System.Numerics.Tensors.Tensor{``0}},System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>
            Join a sequence of tensors along an existing axis.</summary>
      <param name="tensors">The tensors must have the same shape, except in the dimension corresponding to axis (the first, by default).</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Concatenate``1(System.ReadOnlySpan{System.Numerics.Tensors.Tensor{``0}})">
      <summary>
            Join a sequence of tensors along an existing axis.</summary>
      <param name="tensors">The tensors must have the same shape, except in the dimension corresponding to axis (the first, by default).</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.ConcatenateOnDimension``1(System.Int32,System.ReadOnlySpan{System.Numerics.Tensors.Tensor{``0}},System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>
            Join a sequence of tensors along an existing axis.</summary>
      <param name="tensors">The tensors must have the same shape, except in the dimension corresponding to axis (the first, by default).</param>
      <param name="dimension">The axis along which the tensors will be joined. If axis is -1, arrays are flattened before use. Default is 0.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.ConcatenateOnDimension``1(System.Int32,System.ReadOnlySpan{System.Numerics.Tensors.Tensor{``0}})">
      <summary>
            Join a sequence of tensors along an existing axis.</summary>
      <param name="tensors">The tensors must have the same shape, except in the dimension corresponding to axis (the first, by default).</param>
      <param name="dimension">The axis along which the tensors will be joined. If axis is -1, arrays are flattened before use. Default is 0.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.ConvertChecked``2(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``1}@)">
      <summary>
            Copies <paramref name="source" /> to a new <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> converting each <typeparamref name="TFrom" />
            value to a <typeparamref name="TTo" /> value.</summary>
      <param name="source">The input <see cref="T:System.Numerics.Tensors.TensorSpan`1" />.</param>
      <param name="destination" />
      <typeparam name="TFrom" />
      <typeparam name="TTo" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.ConvertChecked``2(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Copies <paramref name="source" /> to a new <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> converting each <typeparamref name="TFrom" />
            value to a <typeparamref name="TTo" /> value.</summary>
      <param name="source">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <typeparam name="TFrom" />
      <typeparam name="TTo" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.ConvertSaturating``2(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``1}@)">
      <summary>
            Copies <paramref name="source" /> to a new <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> converting each <typeparamref name="TFrom" />
            value to a <typeparamref name="TTo" /> value.</summary>
      <param name="source">The input <see cref="T:System.Numerics.Tensors.TensorSpan`1" />.</param>
      <param name="destination" />
      <typeparam name="TFrom" />
      <typeparam name="TTo" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.ConvertSaturating``2(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Copies <paramref name="source" /> to a new <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> converting each <typeparamref name="TFrom" />
            value to a <typeparamref name="TTo" /> value.</summary>
      <param name="source">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <typeparam name="TFrom" />
      <typeparam name="TTo" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.ConvertTruncating``2(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``1}@)">
      <summary>
            Copies <paramref name="source" /> to a new <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> converting each <typeparamref name="TFrom" />
            value to a <typeparamref name="TTo" /> value.</summary>
      <param name="source">The input <see cref="T:System.Numerics.Tensors.TensorSpan`1" />.</param>
      <param name="destination" />
      <typeparam name="TFrom" />
      <typeparam name="TTo" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.ConvertTruncating``2(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Copies <paramref name="source" /> to a new <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> converting each <typeparamref name="TFrom" />
            value to a <typeparamref name="TTo" /> value.</summary>
      <param name="source">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <typeparam name="TFrom" />
      <typeparam name="TTo" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.CopySign``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,``0,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>
            Computes the element-wise result of copying the sign from one number to another number in the specified tensors and returns a new tensor with the result.</summary>
      <param name="x">Input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="sign">The number with the associated sign.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.CopySign``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,``0)">
      <summary>
            Computes the element-wise result of copying the sign from one number to another number in the specified tensors and returns a new tensor with the result.</summary>
      <param name="x">Input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="sign">The number with the associated sign.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.CopySign``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>
            Computes the element-wise result of copying the sign from one number to another number in the specified tensors and returns a new <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> with the result.</summary>
      <param name="x">Input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="sign">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> with the associated signs.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.CopySign``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Computes the element-wise result of copying the sign from one number to another number in the specified tensors and returns a new <see cref="T:System.Numerics.Tensors.Tensor`1" /> with the result.</summary>
      <param name="x">Input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="sign">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> with the associated signs.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Cos``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>
            Takes the cosine of each element of the <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> and returns a new <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> with the result.</summary>
      <param name="x">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to take the cosine of.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Cos``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Takes the cosine of each element of the <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> and returns a new <see cref="T:System.Numerics.Tensors.Tensor`1" /> with the result.</summary>
      <param name="x">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to take the cosine of.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Cosh``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>
            Takes the hyperbolic cosine of each element of the <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> and returns a new <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> with the result.</summary>
      <param name="x">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to take the cosine of.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Cosh``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Takes the hyperbolic cosine of each element of the <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> and returns a new <see cref="T:System.Numerics.Tensors.Tensor`1" /> with the result.</summary>
      <param name="x">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to take the cosine of.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.CosineSimilarity``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>
            Compute cosine similarity between <paramref name="x" /> and <paramref name="y" />.</summary>
      <param name="x">The first <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /></param>
      <param name="y">The second <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /></param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.CosineSimilarity``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Compute cosine similarity between <paramref name="x" /> and <paramref name="y" />.</summary>
      <param name="x">The first <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /></param>
      <param name="y">The second <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /></param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.CosPi``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>Computes the element-wise cosine of the value in the specified tensor that has been multiplied by Pi and returns a new <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> with the results.</summary>
      <param name="x">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /></param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.CosPi``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>Computes the element-wise cosine of the value in the specified tensor that has been multiplied by Pi and returns a new <see cref="T:System.Numerics.Tensors.Tensor`1" /> with the results.</summary>
      <param name="x">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /></param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Create``1(``0[],System.ReadOnlySpan{System.IntPtr},System.Boolean)">
      <summary>
            Creates a <see cref="T:System.Numerics.Tensors.Tensor`1" /> from the provided <paramref name="values" />. If the product of the
            <paramref name="lengths" /> does not equal the length of the <paramref name="values" /> array, an exception will be thrown.</summary>
      <param name="values">An array of the backing memory.</param>
      <param name="lengths">A <see cref="T:System.ReadOnlySpan`1" /> indicating the lengths of each dimension.</param>
      <param name="pinned">A <see cref="T:System.Boolean" /> indicating whether the <paramref name="values" /> were pinned or not.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentOutOfRangeException" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Create``1(``0[],System.ReadOnlySpan{System.IntPtr},System.ReadOnlySpan{System.IntPtr},System.Boolean)">
      <summary>
            Creates a <see cref="T:System.Numerics.Tensors.Tensor`1" /> from the provided <paramref name="values" />. If the product of the
            <paramref name="lengths" /> does not equal the length of the <paramref name="values" /> array, an exception will be thrown.</summary>
      <param name="values">An array of the backing memory.</param>
      <param name="lengths">A <see cref="T:System.ReadOnlySpan`1" /> indicating the lengths of each dimension.</param>
      <param name="strides">A <see cref="T:System.ReadOnlySpan`1" /> indicating the strides of each dimension.</param>
      <param name="pinned">A <see cref="T:System.Boolean" /> indicating whether the <paramref name="values" /> were pinned or not.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentOutOfRangeException" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Create``1(System.Collections.Generic.IEnumerable{``0},System.ReadOnlySpan{System.IntPtr},System.Boolean)">
      <summary>
            Creates a <see cref="T:System.Numerics.Tensors.Tensor`1" /> and initializes it with the data from <paramref name="values" />.</summary>
      <param name="values">A <see cref="T:System.Collections.Generic.IEnumerable`1" /> with the data to use for the initialization.</param>
      <param name="lengths">A <see cref="T:System.ReadOnlySpan`1" /> indicating the lengths of each dimension.</param>
      <param name="pinned">A <see cref="T:System.Boolean" /> indicating whether the <paramref name="values" /> were pinned or not.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Create``1(System.Collections.Generic.IEnumerable{``0},System.ReadOnlySpan{System.IntPtr},System.ReadOnlySpan{System.IntPtr},System.Boolean)">
      <summary>
            Creates a <see cref="T:System.Numerics.Tensors.Tensor`1" /> and initializes it with the data from <paramref name="values" />.</summary>
      <param name="values">A <see cref="T:System.Collections.Generic.IEnumerable`1" /> with the data to use for the initialization.</param>
      <param name="lengths">A <see cref="T:System.ReadOnlySpan`1" /> indicating the lengths of each dimension.</param>
      <param name="strides">A <see cref="T:System.ReadOnlySpan`1" /> indicating the strides of each dimension.</param>
      <param name="pinned">A <see cref="T:System.Boolean" /> indicating whether the <paramref name="values" /> were pinned or not.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Create``1(System.ReadOnlySpan{System.IntPtr},System.Boolean)">
      <summary>
            Creates a <see cref="T:System.Numerics.Tensors.Tensor`1" /> and initializes it with the default value of T. If <paramref name="pinned" /> is true, the memory will be pinned.</summary>
      <param name="lengths">A <see cref="T:System.ReadOnlySpan`1" /> indicating the lengths of each dimension.</param>
      <param name="pinned">A <see cref="T:System.Boolean" /> whether the underlying data should be pinned or not.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Create``1(System.ReadOnlySpan{System.IntPtr},System.ReadOnlySpan{System.IntPtr},System.Boolean)">
      <summary>
            Creates a <see cref="T:System.Numerics.Tensors.Tensor`1" /> and initializes it with the default value of T. If <paramref name="pinned" /> is true, the memory will be pinned.</summary>
      <param name="lengths">A <see cref="T:System.ReadOnlySpan`1" /> indicating the lengths of each dimension.</param>
      <param name="strides">A <see cref="T:System.ReadOnlySpan`1" /> indicating the strides of each dimension.</param>
      <param name="pinned">A <see cref="T:System.Boolean" /> whether the underlying data should be pinned or not.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.CreateAndFillGaussianNormalDistribution``1(System.Random,System.ReadOnlySpan{System.IntPtr})">
      <summary>
            Creates a <see cref="T:System.Numerics.Tensors.Tensor`1" /> and initializes it with random data in a gaussian normal distribution.</summary>
      <param name="random" />
      <param name="lengths">A <see cref="T:System.ReadOnlySpan`1" /> indicating the lengths of each dimension.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.CreateAndFillGaussianNormalDistribution``1(System.ReadOnlySpan{System.IntPtr})">
      <summary>
            Creates a <see cref="T:System.Numerics.Tensors.Tensor`1" /> and initializes it with random data in a gaussian normal distribution.</summary>
      <param name="lengths">A <see cref="T:System.ReadOnlySpan`1" /> indicating the lengths of each dimension.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.CreateAndFillUniformDistribution``1(System.Random,System.ReadOnlySpan{System.IntPtr})">
      <summary>
            Creates a <see cref="T:System.Numerics.Tensors.Tensor`1" /> and initializes it with random data uniformly distributed.</summary>
      <param name="random" />
      <param name="lengths">A <see cref="T:System.ReadOnlySpan`1" /> indicating the lengths of each dimension.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.CreateAndFillUniformDistribution``1(System.ReadOnlySpan{System.IntPtr})">
      <summary>
            Creates a <see cref="T:System.Numerics.Tensors.Tensor`1" /> and initializes it with random data uniformly distributed.</summary>
      <param name="lengths">A <see cref="T:System.ReadOnlySpan`1" /> indicating the lengths of each dimension.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.CreateUninitialized``1(System.ReadOnlySpan{System.IntPtr},System.Boolean)">
      <summary>
            Creates a <see cref="T:System.Numerics.Tensors.Tensor`1" /> and does not initialize it. If <paramref name="pinned" /> is true, the memory will be pinned.</summary>
      <param name="lengths">A <see cref="T:System.ReadOnlySpan`1" /> indicating the lengths of each dimension.</param>
      <param name="pinned">A <see cref="T:System.Boolean" /> whether the underlying data should be pinned or not.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.CreateUninitialized``1(System.ReadOnlySpan{System.IntPtr},System.ReadOnlySpan{System.IntPtr},System.Boolean)">
      <summary>
            Creates a <see cref="T:System.Numerics.Tensors.Tensor`1" /> and does not initialize it. If <paramref name="pinned" /> is true, the memory will be pinned.</summary>
      <param name="lengths">A <see cref="T:System.ReadOnlySpan`1" /> indicating the lengths of each dimension.</param>
      <param name="strides">A <see cref="T:System.ReadOnlySpan`1" /> indicating the strides of each dimension.</param>
      <param name="pinned">A <see cref="T:System.Boolean" /> whether the underlying data should be pinned or not.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.DegreesToRadians``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>
            Computes the element-wise conversion of each number of degrees in the specified tensor to radians and returns a new tensor with the results.</summary>
      <param name="x">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.DegreesToRadians``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Computes the element-wise conversion of each number of degrees in the specified tensor to radians and returns a new tensor with the results.</summary>
      <param name="x">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Distance``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Computes the distance between two points, specified as non-empty, equal-length tensors of numbers, in Euclidean space.</summary>
      <param name="x">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="y">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Divide``1(``0,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>
            Divides <paramref name="x" /> by each element of <paramref name="y" /> and returns a new <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> with the result."/&gt;</summary>
      <param name="x">The value to be divided.</param>
      <param name="y">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> divisor.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Divide``1(``0,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Divides <paramref name="x" /> by each element of <paramref name="y" /> and returns a new <see cref="T:System.Numerics.Tensors.Tensor`1" /> with the result."/&gt;</summary>
      <param name="x">The value to be divided.</param>
      <param name="y">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> divisor.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Divide``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,``0,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>
            Divides each element of <paramref name="x" /> by <paramref name="y" /> and returns a new <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> with the result.</summary>
      <param name="x">Input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="y">The divisor</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Divide``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,``0)">
      <summary>
            Divides each element of <paramref name="x" /> by <paramref name="y" /> and returns a new <see cref="T:System.Numerics.Tensors.Tensor`1" /> with the result.</summary>
      <param name="x">Input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="y">The divisor</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Divide``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>
            Divides each element of <paramref name="x" /> by its corresponding element in <paramref name="y" /> and returns
            a new <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> with the result.</summary>
      <param name="x">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to be divided.</param>
      <param name="y">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> divisor.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Divide``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Divides each element of <paramref name="x" /> by its corresponding element in <paramref name="y" /> and returns
            a new <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> with the result.</summary>
      <param name="x">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to be divided.</param>
      <param name="y">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> divisor.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Dot``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Computes the dot product of two tensors containing numbers.</summary>
      <param name="x">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="y">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Equals``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,``0,System.Numerics.Tensors.TensorSpan{System.Boolean}@)">
      <summary>
            Compares the elements of two <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> for equality. If the shapes are not the same, the tensors are broadcasted to the smallest broadcastable size
            before they are compared. It returns a <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> where the value is true if the elements are equal and false if they are not."/&gt;</summary>
      <param name="x">First <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare.</param>
      <param name="y">Second value to compare.</param>
      <param name="destination" />
      <typeparam name="T" />
      <returns>A <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> where the value is true if the elements are equal and false if they are not.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Equals``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,``0)">
      <summary>
            Compares the elements of two <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> for equality. If the shapes are not the same, the tensors are broadcasted to the smallest broadcastable size
            before they are compared. It returns a <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> where the value is true if the elements are equal and false if they are not."/&gt;</summary>
      <param name="x">First <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare.</param>
      <param name="y">Second value to compare.</param>
      <typeparam name="T" />
      <returns>A <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> where the value is true if the elements are equal and false if they are not.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Equals``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{System.Boolean}@)">
      <summary>
            Compares the elements of two <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> for equality. If the shapes are not the same, the tensors are broadcasted to the smallest broadcastable size
            before they are compared. It returns a <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> where the value is true if the elements are equal and false if they are not."/&gt;</summary>
      <param name="x">First <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare.</param>
      <param name="y">Second <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare.</param>
      <param name="destination" />
      <typeparam name="T" />
      <returns>A <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> where the value is true if the elements are equal and false if they are not.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Equals``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Compares the elements of two <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> for equality. If the shapes are not the same, the tensors are broadcasted to the smallest broadcastable size
            before they are compared. It returns a <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> where the value is true if the elements are equal and false if they are not."/&gt;</summary>
      <param name="x">First <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare.</param>
      <param name="y">Second <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare.</param>
      <typeparam name="T" />
      <returns>A <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> where the value is true if the elements are equal and false if they are not.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.EqualsAll``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,``0)">
      <summary>
            Compares the elements of two <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to see if all elements of <paramref name="x" /> are equal to <paramref name="y" />.
            If the shapes are not the same, the tensors are broadcasted to the smallest broadcastable size before they are compared.
            It returns a <see cref="T:System.Boolean" /> where the value is true if all elements in <paramref name="x" /> are eqaul to <paramref name="y" />.</summary>
      <param name="x">First <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare.</param>
      <param name="y">Second <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare against.</param>
      <typeparam name="T" />
      <returns>
        <see cref="T:System.Boolean" /> where the value is true if all elements in <paramref name="x" /> are equal to <paramref name="y" />.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.EqualsAll``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Compares the elements of two <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to see if all elements of <paramref name="x" /> are equal to <paramref name="y" />.
            If the shapes are not the same, the tensors are broadcasted to the smallest broadcastable size before they are compared.
            It returns a <see cref="T:System.Boolean" /> where the value is true if all elements in <paramref name="x" /> are eqaul to <paramref name="y" />.</summary>
      <param name="x">First <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare.</param>
      <param name="y">Second <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare against.</param>
      <typeparam name="T" />
      <returns>
        <see cref="T:System.Boolean" /> where the value is true if all elements in <paramref name="x" /> are equal to <paramref name="y" />.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.EqualsAny``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,``0)">
      <summary>
            Compares the elements of two <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to see if any elements of <paramref name="x" /> are equal to <paramref name="y" />.
            If the shapes are not the same, the tensors are broadcasted to the smallest broadcastable size before they are compared.
            It returns a <see cref="T:System.Boolean" /> where the value is true if any elements in <paramref name="x" /> are equal to <paramref name="y" />.</summary>
      <param name="x">First <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare.</param>
      <param name="y">Value to compare against.</param>
      <typeparam name="T" />
      <returns>
        <see cref="T:System.Boolean" /> where the value is true if any elements in <paramref name="x" /> are equal to <paramref name="y" />.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.EqualsAny``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Compares the elements of two <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to see if any elements of <paramref name="x" /> are equal to <paramref name="y" />.
            If the shapes are not the same, the tensors are broadcasted to the smallest broadcastable size before they are compared.
            It returns a <see cref="T:System.Boolean" /> where the value is true if any elements in <paramref name="x" /> are equal to <paramref name="y" />.</summary>
      <param name="x">First <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare.</param>
      <param name="y">Second <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare against.</param>
      <typeparam name="T" />
      <returns>
        <see cref="T:System.Boolean" /> where the value is true if any elements in <paramref name="x" /> are equal to <paramref name="y" />.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Exp``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>
            Computes the element-wise result of raising <c>e</c> to the single-precision floating-point number powers in the specified tensor.</summary>
      <param name="x">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Exp``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Computes the element-wise result of raising <c>e</c> to the single-precision floating-point number powers in the specified tensor.</summary>
      <param name="x">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Exp10``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>
            Computes the element-wise result of raising 10 to the number powers in the specified tensor.</summary>
      <param name="x">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Exp10``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Computes the element-wise result of raising 10 to the number powers in the specified tensor.</summary>
      <param name="x">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Exp10M1``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>Computes the element-wise result of raising 10 to the number powers in the specified tensor, minus one.</summary>
      <param name="x">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Exp10M1``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>Computes the element-wise result of raising 10 to the number powers in the specified tensor, minus one.</summary>
      <param name="x">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Exp2``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>Computes the element-wise result of raising 2 to the number powers in the specified tensor.</summary>
      <param name="x">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Exp2``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>Computes the element-wise result of raising 2 to the number powers in the specified tensor.</summary>
      <param name="x">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Exp2M1``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>Computes the element-wise result of raising 2 to the number powers in the specified tensor, minus one.</summary>
      <param name="x">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Exp2M1``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>Computes the element-wise result of raising 2 to the number powers in the specified tensor, minus one.</summary>
      <param name="x">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.ExpM1``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>Computes the element-wise result of raising <c>e</c> to the number powers in the specified tensor, minus 1.</summary>
      <param name="x">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.ExpM1``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>Computes the element-wise result of raising <c>e</c> to the number powers in the specified tensor, minus 1.</summary>
      <param name="x">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.FillGaussianNormalDistribution``1(System.Numerics.Tensors.TensorSpan{``0}@,System.Random)">
      <summary>
            Fills the given <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> with random data in a Gaussian normal distribution. <see cref="T:System.Random" />
            can optionally be provided for seeding.</summary>
      <param name="destination">The destination <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> where the data will be stored.</param>
      <param name="random">
        <see cref="T:System.Random" /> to provide random seeding. Defaults to <see cref="P:System.Random.Shared" /> if not provided.</param>
      <typeparam name="T">The element type.</typeparam>
      <returns />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.FillUniformDistribution``1(System.Numerics.Tensors.TensorSpan{``0}@,System.Random)">
      <summary>
            Fills the given <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> with random data in a uniform distribution. <see cref="T:System.Random" />
            can optionally be provided for seeding.</summary>
      <param name="destination">The destination <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> where the data will be stored.</param>
      <param name="random">
        <see cref="T:System.Random" /> to provide random seeding. Defaults to <see cref="P:System.Random.Shared" /> if not provided.</param>
      <typeparam name="T">The element type.</typeparam>
      <returns />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.FilteredUpdate``1(System.Numerics.Tensors.TensorSpan{``0},System.Numerics.Tensors.ReadOnlyTensorSpan{System.Boolean}@,``0)">
      <summary>
            Updates the <paramref name="tensor" /> tensor with the <paramref name="value" /> where the <paramref name="filter" /> is true.</summary>
      <param name="tensor">Input <see cref="T:System.Numerics.Tensors.Tensor`1" />.</param>
      <param name="filter">Input filter where if the index is true then it will update the <paramref name="tensor" />.</param>
      <param name="value">Value to update in the <paramref name="tensor" />.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.FilteredUpdate``1(System.Numerics.Tensors.TensorSpan{``0},System.Numerics.Tensors.ReadOnlyTensorSpan{System.Boolean}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Updates the <paramref name="tensor" /> tensor with the <paramref name="values" /> where the <paramref name="filter" /> is true.
            If dimensions are not the same an exception is thrown.</summary>
      <param name="tensor">Input <see cref="T:System.Numerics.Tensors.Tensor`1" />.</param>
      <param name="filter">Input filter where if the index is true then it will update the <paramref name="tensor" />.</param>
      <param name="values">Values to update in the <paramref name="tensor" />.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Floor``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>Computes the element-wise floor of numbers in the specified tensor.</summary>
      <param name="x">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Floor``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>Computes the element-wise floor of numbers in the specified tensor.</summary>
      <param name="x">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.GetSmallestBroadcastableLengths(System.ReadOnlySpan{System.IntPtr},System.ReadOnlySpan{System.IntPtr})">
      <summary>
            Gets the smallest broadcastable lengths for two shapes.</summary>
      <param name="shape1">The first shape to broadcast.</param>
      <param name="shape2">The second shape to broadcast.</param>
      <exception cref="T:System.ArgumentException">The lengths of <paramref name="shape1" /> and  <paramref name="shape2" /> are not broadcast compatible.</exception>
      <returns>The smallest lengths these shapes can be broadcast to.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.GreaterThan``1(``0,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{System.Boolean}@)">
      <summary>
            Compares <paramref name="x" /> to see which elements are greater than <paramref name="y" />.
            It returns a <see cref="T:System.Numerics.Tensors.Tensor`1" /> where the value is true if the elements in <paramref name="x" /> are greater than <paramref name="y" />
            and false if they are not."/&gt;</summary>
      <param name="x">
        <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare.</param>
      <param name="y">
        <typeparamref name="T" /> to compare against <paramref name="x" />.</param>
      <param name="destination" />
      <typeparam name="T" />
      <returns>
        <see cref="T:System.Numerics.Tensors.Tensor`1" /> where the value is true if the elements in <paramref name="x" /> are greater than <paramref name="y" />
            and false if they are not.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.GreaterThan``1(``0,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Compares <paramref name="x" /> to see which elements are greater than <paramref name="y" />.
            It returns a <see cref="T:System.Numerics.Tensors.Tensor`1" /> where the value is true if the elements in <paramref name="x" /> are greater than <paramref name="y" />
            and false if they are not."/&gt;</summary>
      <param name="x">
        <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare.</param>
      <param name="y">
        <typeparamref name="T" /> to compare against <paramref name="x" />.</param>
      <typeparam name="T" />
      <returns>
        <see cref="T:System.Numerics.Tensors.Tensor`1" /> where the value is true if the elements in <paramref name="x" /> are greater than <paramref name="y" />
            and false if they are not.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.GreaterThan``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,``0,System.Numerics.Tensors.TensorSpan{System.Boolean}@)">
      <summary>
            Compares the elements of a <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to see which elements are greater than <paramref name="y" />.
            It returns a <see cref="T:System.Numerics.Tensors.Tensor`1" /> where the value is true if the elements in <paramref name="x" /> are greater than <paramref name="y" />
            and false if they are not."/&gt;</summary>
      <param name="x">
        <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare.</param>
      <param name="y">
        <typeparamref name="T" /> to compare against <paramref name="x" />.</param>
      <param name="destination" />
      <typeparam name="T" />
      <returns>
        <see cref="T:System.Numerics.Tensors.Tensor`1" /> where the value is true if the elements in <paramref name="x" /> are greater than <paramref name="y" />
            and false if they are not.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.GreaterThan``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,``0)">
      <summary>
            Compares the elements of a <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to see which elements are greater than <paramref name="y" />.
            It returns a <see cref="T:System.Numerics.Tensors.Tensor`1" /> where the value is true if the elements in <paramref name="x" /> are greater than <paramref name="y" />
            and false if they are not."/&gt;</summary>
      <param name="x">
        <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare.</param>
      <param name="y">
        <typeparamref name="T" /> to compare against <paramref name="x" />.</param>
      <typeparam name="T" />
      <returns>
        <see cref="T:System.Numerics.Tensors.Tensor`1" /> where the value is true if the elements in <paramref name="x" /> are greater than <paramref name="y" />
            and false if they are not.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.GreaterThan``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{System.Boolean}@)">
      <summary>
            Compares the elements of two <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to see which elements of <paramref name="x" /> are greater than <paramref name="y" />.
            If the shapes are not the same, the tensors are broadcasted to the smallest broadcastable size before they are compared.
            It returns a <see cref="T:System.Numerics.Tensors.Tensor`1" /> where the value is true if the elements in <paramref name="x" /> are greater than <paramref name="y" />
            and false if they are not."/&gt;</summary>
      <param name="x">First <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare.</param>
      <param name="y">Second <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare.</param>
      <param name="destination" />
      <typeparam name="T" />
      <returns>A <see cref="T:System.Numerics.Tensors.Tensor`1" /> where the value is true if the elements in <paramref name="x" /> are greater than <paramref name="y" /> and
            false if they are not.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.GreaterThan``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Compares the elements of two <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to see which elements of <paramref name="x" /> are greater than <paramref name="y" />.
            If the shapes are not the same, the tensors are broadcasted to the smallest broadcastable size before they are compared.
            It returns a <see cref="T:System.Numerics.Tensors.Tensor`1" /> where the value is true if the elements in <paramref name="x" /> are greater than <paramref name="y" />
            and false if they are not."/&gt;</summary>
      <param name="x">First <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare.</param>
      <param name="y">Second <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare.</param>
      <typeparam name="T" />
      <returns>A <see cref="T:System.Numerics.Tensors.Tensor`1" /> where the value is true if the elements in <paramref name="x" /> are greater than <paramref name="y" /> and
            false if they are not.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.GreaterThanAll``1(``0,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Compares the elements of two <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to see if all elements of <paramref name="y" /> are greater than <paramref name="y" />.
            If the shapes are not the same, the tensors are broadcasted to the smallest broadcastable size before they are compared.
            It returns a <see cref="T:System.Boolean" /> where the value is true if all elements in <paramref name="y" /> are greater than <paramref name="y" />.</summary>
      <param name="x">First <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare.</param>
      <param name="y">Second <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare against.</param>
      <typeparam name="T" />
      <returns>
        <see cref="T:System.Boolean" /> where the value is true if all elements in <paramref name="y" /> are greater than <paramref name="y" />.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.GreaterThanAll``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,``0)">
      <summary>
            Compares the elements of two <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to see if all elements of <paramref name="x" /> are greater than <paramref name="y" />.
            If the shapes are not the same, the tensors are broadcasted to the smallest broadcastable size before they are compared.
            It returns a <see cref="T:System.Boolean" /> where the value is true if all elements in <paramref name="x" /> are greater than <paramref name="y" />.</summary>
      <param name="x">First <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare.</param>
      <param name="y">Second <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare against.</param>
      <typeparam name="T" />
      <returns>
        <see cref="T:System.Boolean" /> where the value is true if all elements in <paramref name="x" /> are greater than <paramref name="y" />.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.GreaterThanAll``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Compares the elements of two <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to see if all elements of <paramref name="x" /> are greater than <paramref name="y" />.
            If the shapes are not the same, the tensors are broadcasted to the smallest broadcastable size before they are compared.
            It returns a <see cref="T:System.Boolean" /> where the value is true if all elements in <paramref name="x" /> are greater than <paramref name="y" />.</summary>
      <param name="x">First <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare.</param>
      <param name="y">Second <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare against.</param>
      <typeparam name="T" />
      <returns>
        <see cref="T:System.Boolean" /> where the value is true if all elements in <paramref name="x" /> are greater than <paramref name="y" />.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.GreaterThanAny``1(``0,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Compares the elements of two <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to see if any elements of <paramref name="y" /> are greater than <paramref name="x" />.
            If the shapes are not the same, the tensors are broadcasted to the smallest broadcastable size before they are compared.
            It returns a <see cref="T:System.Boolean" /> where the value is true if any elements in <paramref name="y" /> are greater than <paramref name="x" />.</summary>
      <param name="y">First <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare.</param>
      <param name="x">Value to compare against.</param>
      <typeparam name="T" />
      <returns>
        <see cref="T:System.Boolean" /> where the value is true if any elements in <paramref name="y" /> are greater than <paramref name="x" />.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.GreaterThanAny``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,``0)">
      <summary>
            Compares the elements of two <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to see if any elements of <paramref name="x" /> are greater than <paramref name="y" />.
            If the shapes are not the same, the tensors are broadcasted to the smallest broadcastable size before they are compared.
            It returns a <see cref="T:System.Boolean" /> where the value is true if any elements in <paramref name="x" /> are greater than <paramref name="y" />.</summary>
      <param name="x">First <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare.</param>
      <param name="y">Value to compare against.</param>
      <typeparam name="T" />
      <returns>
        <see cref="T:System.Boolean" /> where the value is true if any elements in <paramref name="x" /> are greater than <paramref name="y" />.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.GreaterThanAny``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Compares the elements of two <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to see if any elements of <paramref name="x" /> are greater than <paramref name="y" />.
            If the shapes are not the same, the tensors are broadcasted to the smallest broadcastable size before they are compared.
            It returns a <see cref="T:System.Boolean" /> where the value is true if any elements in <paramref name="x" /> are greater than <paramref name="y" />.</summary>
      <param name="x">First <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare.</param>
      <param name="y">Second <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare against.</param>
      <typeparam name="T" />
      <returns>
        <see cref="T:System.Boolean" /> where the value is true if any elements in <paramref name="x" /> are greater than <paramref name="y" />.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.GreaterThanOrEqual``1(``0,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{System.Boolean}@)">
      <summary>
            Compares <paramref name="x" /> to see which elements are greater than or equal to <paramref name="y" />.
            It returns a <see cref="T:System.Numerics.Tensors.Tensor`1" /> where the value is true if the elements in <paramref name="x" /> are greater than <paramref name="y" />
            and false if they are not."/&gt;</summary>
      <param name="x">
        <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare.</param>
      <param name="y">
        <typeparamref name="T" /> to compare against <paramref name="x" />.</param>
      <param name="destination" />
      <typeparam name="T" />
      <returns>
        <see cref="T:System.Numerics.Tensors.Tensor`1" /> where the value is true if the elements in <paramref name="x" /> are greater than <paramref name="y" />
            and false if they are not.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.GreaterThanOrEqual``1(``0,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Compares <paramref name="x" /> to see which elements are greater than or equal to <paramref name="y" />.
            It returns a <see cref="T:System.Numerics.Tensors.Tensor`1" /> where the value is true if the elements in <paramref name="x" /> are greater than <paramref name="y" />
            and false if they are not."/&gt;</summary>
      <param name="x">
        <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare.</param>
      <param name="y">
        <typeparamref name="T" /> to compare against <paramref name="x" />.</param>
      <typeparam name="T" />
      <returns>
        <see cref="T:System.Numerics.Tensors.Tensor`1" /> where the value is true if the elements in <paramref name="x" /> are greater than <paramref name="y" />
            and false if they are not.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.GreaterThanOrEqual``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,``0,System.Numerics.Tensors.TensorSpan{System.Boolean}@)">
      <summary>
            Compares the elements of a <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to see which elements are greater than or equal to <paramref name="y" />.
            It returns a <see cref="T:System.Numerics.Tensors.Tensor`1" /> where the value is true if the elements in <paramref name="x" /> are greater than <paramref name="y" />
            and false if they are not."/&gt;</summary>
      <param name="x">
        <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare.</param>
      <param name="y">
        <typeparamref name="T" /> to compare against <paramref name="x" />.</param>
      <param name="destination" />
      <typeparam name="T" />
      <returns>
        <see cref="T:System.Numerics.Tensors.Tensor`1" /> where the value is true if the elements in <paramref name="x" /> are greater than <paramref name="y" />
            and false if they are not.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.GreaterThanOrEqual``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,``0)">
      <summary>
            Compares the elements of a <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to see which elements are greater than or equal to <paramref name="y" />.
            It returns a <see cref="T:System.Numerics.Tensors.Tensor`1" /> where the value is true if the elements in <paramref name="x" /> are greater than <paramref name="y" />
            and false if they are not."/&gt;</summary>
      <param name="x">
        <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare.</param>
      <param name="y">
        <typeparamref name="T" /> to compare against <paramref name="x" />.</param>
      <typeparam name="T" />
      <returns>
        <see cref="T:System.Numerics.Tensors.Tensor`1" /> where the value is true if the elements in <paramref name="x" /> are greater than <paramref name="y" />
            and false if they are not.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.GreaterThanOrEqual``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{System.Boolean}@)">
      <summary>
            Compares the elements of two <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to see which elements of <paramref name="x" /> are greater than or equal to <paramref name="y" />.
            If the shapes are not the same, the tensors are broadcasted to the smallest broadcastable size before they are compared.
            It returns a <see cref="T:System.Numerics.Tensors.Tensor`1" /> where the value is true if the elements in <paramref name="x" /> are greater than <paramref name="y" />
            and false if they are not."/&gt;</summary>
      <param name="x">First <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare.</param>
      <param name="y">Second <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare.</param>
      <param name="destination" />
      <typeparam name="T" />
      <returns>A <see cref="T:System.Numerics.Tensors.Tensor`1" /> where the value is true if the elements in <paramref name="x" /> are greater than <paramref name="y" /> and
            false if they are not.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.GreaterThanOrEqual``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Compares the elements of two <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to see which elements of <paramref name="x" /> are greater than or equal to <paramref name="y" />.
            If the shapes are not the same, the tensors are broadcasted to the smallest broadcastable size before they are compared.
            It returns a <see cref="T:System.Numerics.Tensors.Tensor`1" /> where the value is true if the elements in <paramref name="x" /> are greater than <paramref name="y" />
            and false if they are not."/&gt;</summary>
      <param name="x">First <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare.</param>
      <param name="y">Second <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare.</param>
      <typeparam name="T" />
      <returns>A <see cref="T:System.Numerics.Tensors.Tensor`1" /> where the value is true if the elements in <paramref name="x" /> are greater than <paramref name="y" /> and
            false if they are not.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.GreaterThanOrEqualAll``1(``0,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Compares the elements of two <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to see if all elements of <paramref name="y" /> are greater than <paramref name="y" />.
            If the shapes are not the same, the tensors are broadcasted to the smallest broadcastable size before they are compared.
            It returns a <see cref="T:System.Boolean" /> where the value is true if all elements in <paramref name="y" /> are greater than <paramref name="y" />.</summary>
      <param name="x">First <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare.</param>
      <param name="y">Second <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare against.</param>
      <typeparam name="T" />
      <returns>
        <see cref="T:System.Boolean" /> where the value is true if all elements in <paramref name="y" /> are greater than <paramref name="y" />.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.GreaterThanOrEqualAll``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,``0)">
      <summary>
            Compares the elements of two <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to see if all elements of <paramref name="x" /> are greater than <paramref name="y" />.
            If the shapes are not the same, the tensors are broadcasted to the smallest broadcastable size before they are compared.
            It returns a <see cref="T:System.Boolean" /> where the value is true if all elements in <paramref name="x" /> are greater than <paramref name="y" />.</summary>
      <param name="x">First <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare.</param>
      <param name="y">Second <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare against.</param>
      <typeparam name="T" />
      <returns>
        <see cref="T:System.Boolean" /> where the value is true if all elements in <paramref name="x" /> are greater than <paramref name="y" />.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.GreaterThanOrEqualAll``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Compares the elements of two <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to see if all elements of <paramref name="x" /> are greater than <paramref name="y" />.
            If the shapes are not the same, the tensors are broadcasted to the smallest broadcastable size before they are compared.
            It returns a <see cref="T:System.Boolean" /> where the value is true if all elements in <paramref name="x" /> are greater than <paramref name="y" />.</summary>
      <param name="x">First <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare.</param>
      <param name="y">Second <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare against.</param>
      <typeparam name="T" />
      <returns>
        <see cref="T:System.Boolean" /> where the value is true if all elements in <paramref name="x" /> are greater than <paramref name="y" />.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.GreaterThanOrEqualAny``1(``0,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Compares the elements of two <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to see if any elements of <paramref name="y" /> are greater than <paramref name="x" />.
            If the shapes are not the same, the tensors are broadcasted to the smallest broadcastable size before they are compared.
            It returns a <see cref="T:System.Boolean" /> where the value is true if any elements in <paramref name="y" /> are greater than <paramref name="x" />.</summary>
      <param name="y">First <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare.</param>
      <param name="x">Value to compare against.</param>
      <typeparam name="T" />
      <returns>
        <see cref="T:System.Boolean" /> where the value is true if any elements in <paramref name="y" /> are greater than <paramref name="x" />.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.GreaterThanOrEqualAny``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,``0)">
      <summary>
            Compares the elements of two <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to see if any elements of <paramref name="x" /> are greater than <paramref name="y" />.
            If the shapes are not the same, the tensors are broadcasted to the smallest broadcastable size before they are compared.
            It returns a <see cref="T:System.Boolean" /> where the value is true if any elements in <paramref name="x" /> are greater than <paramref name="y" />.</summary>
      <param name="x">First <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare.</param>
      <param name="y">Value to compare against.</param>
      <typeparam name="T" />
      <returns>
        <see cref="T:System.Boolean" /> where the value is true if any elements in <paramref name="x" /> are greater than <paramref name="y" />.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.GreaterThanOrEqualAny``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Compares the elements of two <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to see if any elements of <paramref name="x" /> are greater than <paramref name="y" />.
            If the shapes are not the same, the tensors are broadcasted to the smallest broadcastable size before they are compared.
            It returns a <see cref="T:System.Boolean" /> where the value is true if any elements in <paramref name="x" /> are greater than <paramref name="y" />.</summary>
      <param name="x">First <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare.</param>
      <param name="y">Second <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare against.</param>
      <typeparam name="T" />
      <returns>
        <see cref="T:System.Boolean" /> where the value is true if any elements in <paramref name="x" /> are greater than <paramref name="y" />.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Hypot``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>
            Computes the element-wise hypotenuse given values from two tensors representing the lengths of the shorter sides in a right-angled triangle.
            If the shapes are not the same they are broadcast to the smallest compatible shape.</summary>
      <param name="x">Left <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="y">Right <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Hypot``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Computes the element-wise hypotenuse given values from two tensors representing the lengths of the shorter sides in a right-angled triangle.
            If the shapes are not the same they are broadcast to the smallest compatible shape.</summary>
      <param name="x">Left <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="y">Right <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Ieee754Remainder``1(``0,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>Computes the element-wise remainder of the numbers in the specified tensors.</summary>
      <param name="x">The left <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="y">The right <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Ieee754Remainder``1(``0,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>Computes the element-wise remainder of the numbers in the specified tensors.</summary>
      <param name="x">The left <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="y">The right <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Ieee754Remainder``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,``0,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>Computes the element-wise remainder of the numbers in the specified tensors.</summary>
      <param name="x">The left <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="y">The right <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Ieee754Remainder``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,``0)">
      <summary>Computes the element-wise remainder of the numbers in the specified tensors.</summary>
      <param name="x">The left <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="y">The right <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Ieee754Remainder``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>Computes the element-wise remainder of the numbers in the specified tensors.</summary>
      <param name="x">Left <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="y">Right <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Ieee754Remainder``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>Computes the element-wise remainder of the numbers in the specified tensors.</summary>
      <param name="x">Left <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="y">Right <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.ILogB``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{System.Int32}@)">
      <summary>Computes the element-wise integer logarithm of numbers in the specified tensor.</summary>
      <param name="x">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.ILogB``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>Computes the element-wise integer logarithm of numbers in the specified tensor.</summary>
      <param name="x">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.IndexOfMax``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>Searches for the index of the largest number in the specified tensor.</summary>
      <param name="x">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.IndexOfMaxMagnitude``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>Searches for the index of the number with the largest magnitude in the specified tensor.</summary>
      <param name="x">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.IndexOfMin``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>Searches for the index of the smallest number in the specified tensor.</summary>
      <param name="x">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.IndexOfMinMagnitude``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Searches for the index of the number with the smallest magnitude in the specified tensor.</summary>
      <param name="x">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.LeadingZeroCount``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>
            Computes the element-wise leading zero count of numbers in the specified tensor.</summary>
      <param name="x">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.LeadingZeroCount``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Computes the element-wise leading zero count of numbers in the specified tensor.</summary>
      <param name="x">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.LessThan``1(``0,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{System.Boolean}@)">
      <summary>
            Compares the elements of a <see cref="T:System.Numerics.Tensors.Tensor`1" /> to see which elements are less than <paramref name="y" />.
            It returns a <see cref="T:System.Numerics.Tensors.Tensor`1" /> where the value is true if the elements in <paramref name="x" /> are less than <paramref name="y" />
            and false if they are not."/&gt;</summary>
      <param name="x">
        <see cref="T:System.Numerics.Tensors.Tensor`1" /> to compare.</param>
      <param name="y">
        <typeparamref name="T" /> to compare against <paramref name="x" />.</param>
      <param name="destination" />
      <typeparam name="T" />
      <returns>
        <see cref="T:System.Numerics.Tensors.Tensor`1" /> where the value is true if the elements in <paramref name="x" /> are less than <paramref name="y" />
            and false if they are not.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.LessThan``1(``0,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Compares the elements of a <see cref="T:System.Numerics.Tensors.Tensor`1" /> to see which elements are less than <paramref name="y" />.
            It returns a <see cref="T:System.Numerics.Tensors.Tensor`1" /> where the value is true if the elements in <paramref name="x" /> are less than <paramref name="y" />
            and false if they are not."/&gt;</summary>
      <param name="x">
        <see cref="T:System.Numerics.Tensors.Tensor`1" /> to compare.</param>
      <param name="y">
        <typeparamref name="T" /> to compare against <paramref name="x" />.</param>
      <typeparam name="T" />
      <returns>
        <see cref="T:System.Numerics.Tensors.Tensor`1" /> where the value is true if the elements in <paramref name="x" /> are less than <paramref name="y" />
            and false if they are not.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.LessThan``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,``0,System.Numerics.Tensors.TensorSpan{System.Boolean}@)">
      <summary>
            Compares the elements of a <see cref="T:System.Numerics.Tensors.Tensor`1" /> to see which elements are less than <paramref name="y" />.
            It returns a <see cref="T:System.Numerics.Tensors.Tensor`1" /> where the value is true if the elements in <paramref name="x" /> are less than <paramref name="y" />
            and false if they are not."/&gt;</summary>
      <param name="x">
        <see cref="T:System.Numerics.Tensors.Tensor`1" /> to compare.</param>
      <param name="y">
        <typeparamref name="T" /> to compare against <paramref name="x" />.</param>
      <param name="destination" />
      <typeparam name="T" />
      <returns>
        <see cref="T:System.Numerics.Tensors.Tensor`1" /> where the value is true if the elements in <paramref name="x" /> are less than <paramref name="y" />
            and false if they are not.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.LessThan``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,``0)">
      <summary>
            Compares the elements of a <see cref="T:System.Numerics.Tensors.Tensor`1" /> to see which elements are less than <paramref name="y" />.
            It returns a <see cref="T:System.Numerics.Tensors.Tensor`1" /> where the value is true if the elements in <paramref name="x" /> are less than <paramref name="y" />
            and false if they are not."/&gt;</summary>
      <param name="x">
        <see cref="T:System.Numerics.Tensors.Tensor`1" /> to compare.</param>
      <param name="y">
        <typeparamref name="T" /> to compare against <paramref name="x" />.</param>
      <typeparam name="T" />
      <returns>
        <see cref="T:System.Numerics.Tensors.Tensor`1" /> where the value is true if the elements in <paramref name="x" /> are less than <paramref name="y" />
            and false if they are not.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.LessThan``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{System.Boolean}@)">
      <summary>
            Compares the elements of two <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to see which elements of <paramref name="x" /> are less than <paramref name="y" />.
            If the shapes are not the same, the tensors are broadcasted to the smallest broadcastable size before they are compared.
            It returns a <see cref="T:System.Numerics.Tensors.Tensor`1" /> where the value is true if the elements in <paramref name="x" /> are less than <paramref name="y" />
            and false if they are not."/&gt;</summary>
      <param name="x">First <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare.</param>
      <param name="y">Second <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare.</param>
      <param name="destination" />
      <typeparam name="T" />
      <returns>A <see cref="T:System.Numerics.Tensors.Tensor`1" /> where the value is true if the elements in <paramref name="x" /> are less than <paramref name="y" /> and
            false if they are not.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.LessThan``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Compares the elements of two <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to see which elements of <paramref name="x" /> are less than <paramref name="y" />.
            If the shapes are not the same, the tensors are broadcasted to the smallest broadcastable size before they are compared.
            It returns a <see cref="T:System.Numerics.Tensors.Tensor`1" /> where the value is true if the elements in <paramref name="x" /> are less than <paramref name="y" />
            and false if they are not."/&gt;</summary>
      <param name="x">First <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare.</param>
      <param name="y">Second <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare.</param>
      <typeparam name="T" />
      <returns>A <see cref="T:System.Numerics.Tensors.Tensor`1" /> where the value is true if the elements in <paramref name="x" /> are less than <paramref name="y" /> and
            false if they are not.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.LessThanAll``1(``0,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Compares the elements of two <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to see if all elements of <paramref name="y" /> are less than <paramref name="x" />.
            If the shapes are not the same, the tensors are broadcasted to the smallest broadcastable size before they are compared.
            It returns a <see cref="T:System.Boolean" /> where the value is true if all elements in <paramref name="y" /> are less than <paramref name="x" />.</summary>
      <param name="y">First value to compare.</param>
      <param name="x">Second value to compare against.</param>
      <typeparam name="T" />
      <returns>
        <see cref="T:System.Boolean" /> where the value is true if all elements in <paramref name="y" /> are less than <paramref name="x" />.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.LessThanAll``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,``0)">
      <summary>
            Compares the elements of two <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to see if all elements of <paramref name="x" /> are less than <paramref name="y" />.
            If the shapes are not the same, the tensors are broadcasted to the smallest broadcastable size before they are compared.
            It returns a <see cref="T:System.Boolean" /> where the value is true if all elements in <paramref name="x" /> are less than <paramref name="y" />.</summary>
      <param name="x">First <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare.</param>
      <param name="y">Second value to compare against.</param>
      <typeparam name="T" />
      <returns>
        <see cref="T:System.Boolean" /> where the value is true if all elements in <paramref name="x" /> are less than <paramref name="y" />.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.LessThanAll``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Compares the elements of two <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to see if all elements of <paramref name="x" /> are less than <paramref name="y" />.
            If the shapes are not the same, the tensors are broadcasted to the smallest broadcastable size before they are compared.
            It returns a <see cref="T:System.Boolean" /> where the value is true if all elements in <paramref name="x" /> are less than <paramref name="y" />.</summary>
      <param name="x">First <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare.</param>
      <param name="y">Second <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare against.</param>
      <typeparam name="T" />
      <returns>
        <see cref="T:System.Boolean" /> where the value is true if all elements in <paramref name="x" /> are less than <paramref name="y" />.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.LessThanAny``1(``0,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Compares the elements of two <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to see if any elements of <paramref name="y" /> are less than <paramref name="y" />.
            If the shapes are not the same, the tensors are broadcasted to the smallest broadcastable size before they are compared.
            It returns a <see cref="T:System.Boolean" /> where the value is true if any elements in <paramref name="y" /> are less than <paramref name="y" />.</summary>
      <param name="x">First value to compare.</param>
      <param name="y">Second value to compare against.</param>
      <typeparam name="T" />
      <returns>
        <see cref="T:System.Boolean" /> where the value is true if any elements in <paramref name="y" /> are less than <paramref name="y" />.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.LessThanAny``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,``0)">
      <summary>
            Compares the elements of two <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to see if any elements of <paramref name="x" /> are less than <paramref name="y" />.
            If the shapes are not the same, the tensors are broadcasted to the smallest broadcastable size before they are compared.
            It returns a <see cref="T:System.Boolean" /> where the value is true if any elements in <paramref name="x" /> are less than <paramref name="y" />.</summary>
      <param name="x">First <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare.</param>
      <param name="y">Second value to compare against.</param>
      <typeparam name="T" />
      <returns>
        <see cref="T:System.Boolean" /> where the value is true if any elements in <paramref name="x" /> are less than <paramref name="y" />.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.LessThanAny``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Compares the elements of two <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to see if any elements of <paramref name="x" /> are less than <paramref name="y" />.
            If the shapes are not the same, the tensors are broadcasted to the smallest broadcastable size before they are compared.
            It returns a <see cref="T:System.Boolean" /> where the value is true if any elements in <paramref name="x" /> are less than <paramref name="y" />.</summary>
      <param name="x">First <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare.</param>
      <param name="y">Second <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare against.</param>
      <typeparam name="T" />
      <returns>
        <see cref="T:System.Boolean" /> where the value is true if any elements in <paramref name="x" /> are less than <paramref name="y" />.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.LessThanOrEqual``1(``0,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{System.Boolean}@)">
      <summary>
            Compares the elements of a <see cref="T:System.Numerics.Tensors.Tensor`1" /> to see which elements are less than <paramref name="y" />.
            It returns a <see cref="T:System.Numerics.Tensors.Tensor`1" /> where the value is true if the elements in <paramref name="x" /> are less than <paramref name="y" />
            and false if they are not."/&gt;</summary>
      <param name="x">
        <see cref="T:System.Numerics.Tensors.Tensor`1" /> to compare.</param>
      <param name="y">
        <typeparamref name="T" /> to compare against <paramref name="x" />.</param>
      <param name="destination" />
      <typeparam name="T" />
      <returns>
        <see cref="T:System.Numerics.Tensors.Tensor`1" /> where the value is true if the elements in <paramref name="x" /> are less than <paramref name="y" />
            and false if they are not.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.LessThanOrEqual``1(``0,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Compares the elements of a <see cref="T:System.Numerics.Tensors.Tensor`1" /> to see which elements are less than <paramref name="y" />.
            It returns a <see cref="T:System.Numerics.Tensors.Tensor`1" /> where the value is true if the elements in <paramref name="x" /> are less than <paramref name="y" />
            and false if they are not."/&gt;</summary>
      <param name="x">
        <see cref="T:System.Numerics.Tensors.Tensor`1" /> to compare.</param>
      <param name="y">
        <typeparamref name="T" /> to compare against <paramref name="x" />.</param>
      <typeparam name="T" />
      <returns>
        <see cref="T:System.Numerics.Tensors.Tensor`1" /> where the value is true if the elements in <paramref name="x" /> are less than <paramref name="y" />
            and false if they are not.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.LessThanOrEqual``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,``0,System.Numerics.Tensors.TensorSpan{System.Boolean}@)">
      <summary>
            Compares the elements of a <see cref="T:System.Numerics.Tensors.Tensor`1" /> to see which elements are less than <paramref name="y" />.
            It returns a <see cref="T:System.Numerics.Tensors.Tensor`1" /> where the value is true if the elements in <paramref name="x" /> are less than <paramref name="y" />
            and false if they are not."/&gt;</summary>
      <param name="x">
        <see cref="T:System.Numerics.Tensors.Tensor`1" /> to compare.</param>
      <param name="y">
        <typeparamref name="T" /> to compare against <paramref name="x" />.</param>
      <param name="destination" />
      <typeparam name="T" />
      <returns>
        <see cref="T:System.Numerics.Tensors.Tensor`1" /> where the value is true if the elements in <paramref name="x" /> are less than <paramref name="y" />
            and false if they are not.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.LessThanOrEqual``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,``0)">
      <summary>
            Compares the elements of a <see cref="T:System.Numerics.Tensors.Tensor`1" /> to see which elements are less than <paramref name="y" />.
            It returns a <see cref="T:System.Numerics.Tensors.Tensor`1" /> where the value is true if the elements in <paramref name="x" /> are less than <paramref name="y" />
            and false if they are not."/&gt;</summary>
      <param name="x">
        <see cref="T:System.Numerics.Tensors.Tensor`1" /> to compare.</param>
      <param name="y">
        <typeparamref name="T" /> to compare against <paramref name="x" />.</param>
      <typeparam name="T" />
      <returns>
        <see cref="T:System.Numerics.Tensors.Tensor`1" /> where the value is true if the elements in <paramref name="x" /> are less than <paramref name="y" />
            and false if they are not.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.LessThanOrEqual``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{System.Boolean}@)">
      <summary>
            Compares the elements of two <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to see which elements of <paramref name="x" /> are less than <paramref name="y" />.
            If the shapes are not the same, the tensors are broadcasted to the smallest broadcastable size before they are compared.
            It returns a <see cref="T:System.Numerics.Tensors.Tensor`1" /> where the value is true if the elements in <paramref name="x" /> are less than <paramref name="y" />
            and false if they are not."/&gt;</summary>
      <param name="x">First <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare.</param>
      <param name="y">Second <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare.</param>
      <param name="destination" />
      <typeparam name="T" />
      <returns>A <see cref="T:System.Numerics.Tensors.Tensor`1" /> where the value is true if the elements in <paramref name="x" /> are less than <paramref name="y" /> and
            false if they are not.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.LessThanOrEqual``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Compares the elements of two <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to see which elements of <paramref name="x" /> are less than <paramref name="y" />.
            If the shapes are not the same, the tensors are broadcasted to the smallest broadcastable size before they are compared.
            It returns a <see cref="T:System.Numerics.Tensors.Tensor`1" /> where the value is true if the elements in <paramref name="x" /> are less than <paramref name="y" />
            and false if they are not."/&gt;</summary>
      <param name="x">First <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare.</param>
      <param name="y">Second <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare.</param>
      <typeparam name="T" />
      <returns>A <see cref="T:System.Numerics.Tensors.Tensor`1" /> where the value is true if the elements in <paramref name="x" /> are less than <paramref name="y" /> and
            false if they are not.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.LessThanOrEqualAll``1(``0,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Compares the elements of two <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to see if all elements of <paramref name="y" /> are less than <paramref name="x" />.
            If the shapes are not the same, the tensors are broadcasted to the smallest broadcastable size before they are compared.
            It returns a <see cref="T:System.Boolean" /> where the value is true if all elements in <paramref name="y" /> are less than <paramref name="x" />.</summary>
      <param name="y">First value to compare.</param>
      <param name="x">Second value to compare against.</param>
      <typeparam name="T" />
      <returns>
        <see cref="T:System.Boolean" /> where the value is true if all elements in <paramref name="y" /> are less than <paramref name="x" />.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.LessThanOrEqualAll``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,``0)">
      <summary>
            Compares the elements of two <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to see if all elements of <paramref name="x" /> are less than <paramref name="y" />.
            If the shapes are not the same, the tensors are broadcasted to the smallest broadcastable size before they are compared.
            It returns a <see cref="T:System.Boolean" /> where the value is true if all elements in <paramref name="x" /> are less than <paramref name="y" />.</summary>
      <param name="x">First <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare.</param>
      <param name="y">Second value to compare against.</param>
      <typeparam name="T" />
      <returns>
        <see cref="T:System.Boolean" /> where the value is true if all elements in <paramref name="x" /> are less than <paramref name="y" />.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.LessThanOrEqualAll``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Compares the elements of two <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to see if all elements of <paramref name="x" /> are less than <paramref name="y" />.
            If the shapes are not the same, the tensors are broadcasted to the smallest broadcastable size before they are compared.
            It returns a <see cref="T:System.Boolean" /> where the value is true if all elements in <paramref name="x" /> are less than <paramref name="y" />.</summary>
      <param name="x">First <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare.</param>
      <param name="y">Second <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare against.</param>
      <typeparam name="T" />
      <returns>
        <see cref="T:System.Boolean" /> where the value is true if all elements in <paramref name="x" /> are less than <paramref name="y" />.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.LessThanOrEqualAny``1(``0,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Compares the elements of two <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to see if any elements of <paramref name="y" /> are less than <paramref name="y" />.
            If the shapes are not the same, the tensors are broadcasted to the smallest broadcastable size before they are compared.
            It returns a <see cref="T:System.Boolean" /> where the value is true if any elements in <paramref name="y" /> are less than <paramref name="y" />.</summary>
      <param name="x">First value to compare.</param>
      <param name="y">Second value to compare against.</param>
      <typeparam name="T" />
      <returns>
        <see cref="T:System.Boolean" /> where the value is true if any elements in <paramref name="y" /> are less than <paramref name="y" />.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.LessThanOrEqualAny``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,``0)">
      <summary>
            Compares the elements of two <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to see if any elements of <paramref name="x" /> are less than <paramref name="y" />.
            If the shapes are not the same, the tensors are broadcasted to the smallest broadcastable size before they are compared.
            It returns a <see cref="T:System.Boolean" /> where the value is true if any elements in <paramref name="x" /> are less than <paramref name="y" />.</summary>
      <param name="x">First <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare.</param>
      <param name="y">Second value to compare against.</param>
      <typeparam name="T" />
      <returns>
        <see cref="T:System.Boolean" /> where the value is true if any elements in <paramref name="x" /> are less than <paramref name="y" />.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.LessThanOrEqualAny``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Compares the elements of two <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to see if any elements of <paramref name="x" /> are less than <paramref name="y" />.
            If the shapes are not the same, the tensors are broadcasted to the smallest broadcastable size before they are compared.
            It returns a <see cref="T:System.Boolean" /> where the value is true if any elements in <paramref name="x" /> are less than <paramref name="y" />.</summary>
      <param name="x">First <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare.</param>
      <param name="y">Second <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to compare against.</param>
      <typeparam name="T" />
      <returns>
        <see cref="T:System.Boolean" /> where the value is true if any elements in <paramref name="x" /> are less than <paramref name="y" />.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Log``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,``0,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>Computes the element-wise logarithm of the numbers in a specified tensor to the specified base in another specified tensor.</summary>
      <param name="x">The first tensor</param>
      <param name="y">The second tensor</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Log``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,``0)">
      <summary>Computes the element-wise logarithm of the numbers in a specified tensor to the specified base in another specified tensor.</summary>
      <param name="x">The first tensor</param>
      <param name="y">The second tensor</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Log``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>Computes the element-wise logarithm of the numbers in a specified tensor to the specified base in another specified tensor.</summary>
      <param name="x">The first tensor</param>
      <param name="y">The second tensor</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Log``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>Computes the element-wise logarithm of the numbers in a specified tensor to the specified base in another specified tensor.</summary>
      <param name="x">The first tensor</param>
      <param name="y">The second tensor</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Log``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>
            Takes the natural logarithm of each element of the <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> and returns a new <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> with the result.</summary>
      <param name="x">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to take the natural logarithm of.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Log``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Takes the natural logarithm of each element of the <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> and returns a new <see cref="T:System.Numerics.Tensors.Tensor`1" /> with the result.</summary>
      <param name="x">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to take the natural logarithm of.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Log10``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>
            Takes the base 10 logarithm of each element of the <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> and returns a new <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> with the result.</summary>
      <param name="x">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to take the base 10 logarithm of.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Log10``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Takes the base 10 logarithm of each element of the <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> and returns a new <see cref="T:System.Numerics.Tensors.Tensor`1" /> with the result.</summary>
      <param name="x">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to take the base 10 logarithm of.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Log10P1``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>
            Takes the base 10 logarithm plus 1 of each element of the <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> and returns a new <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> with the result.</summary>
      <param name="x">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to take the base 10 logarithm of.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Log10P1``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Takes the base 10 logarithm plus 1 of each element of the <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> and returns a new <see cref="T:System.Numerics.Tensors.Tensor`1" /> with the result.</summary>
      <param name="x">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to take the base 10 logarithm of.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Log2``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>
            Takes the base 2 logarithm of each element of the <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> and returns a new <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> with the result.</summary>
      <param name="x">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to take the base 2 logarithm of.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Log2``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Takes the base 2 logarithm of each element of the <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> and returns a new <see cref="T:System.Numerics.Tensors.Tensor`1" /> with the result.</summary>
      <param name="x">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to take the base 2 logarithm of.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Log2P1``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>
            Takes the base 2 logarithm plus 1 of each element of the <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> and returns a new <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> with the result.</summary>
      <param name="x">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to take the base 2 logarithm of.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Log2P1``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Takes the base 2 logarithm plus 1 of each element of the <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> and returns a new <see cref="T:System.Numerics.Tensors.Tensor`1" /> with the result.</summary>
      <param name="x">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to take the base 2 logarithm of.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.LogP1``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>
            Takes the natural logarithm plus 1 of each element of the <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> and returns a new <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> with the result.</summary>
      <param name="x">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to take the natural logarithm of.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.LogP1``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Takes the natural logarithm plus 1 of each element of the <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> and returns a new <see cref="T:System.Numerics.Tensors.Tensor`1" /> with the result.</summary>
      <param name="x">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to take the natural logarithm of.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Max``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,``0,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>Computes the element-wise maximum of the numbers in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Max``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,``0)">
      <summary>Computes the element-wise maximum of the numbers in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Max``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>Computes the element-wise maximum of the numbers in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Max``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>Computes the element-wise maximum of the numbers in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Max``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>Searches for the largest number in the specified tensor.</summary>
      <param name="x">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />..</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.MaxMagnitude``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,``0,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>Computes the element-wise number with the largest magnitude in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.MaxMagnitude``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,``0)">
      <summary>Computes the element-wise number with the largest magnitude in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.MaxMagnitude``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>Computes the element-wise number with the largest magnitude in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.MaxMagnitude``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>Computes the element-wise number with the largest magnitude in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.MaxMagnitude``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>Searches for the number with the largest magnitude in the specified tensor.</summary>
      <param name="x">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />..</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.MaxMagnitudeNumber``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,``0,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>Computes the element-wise number with the largest magnitude in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.MaxMagnitudeNumber``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,``0)">
      <summary>Computes the element-wise number with the largest magnitude in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.MaxMagnitudeNumber``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>Computes the element-wise number with the largest magnitude in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.MaxMagnitudeNumber``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>Computes the element-wise number with the largest magnitude in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.MaxMagnitudeNumber``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>Searches for the number with the largest magnitude in the specified tensor.</summary>
      <param name="x">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />..</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.MaxNumber``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,``0,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>Computes the element-wise maximum of the numbers in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.MaxNumber``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,``0)">
      <summary>Computes the element-wise maximum of the numbers in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.MaxNumber``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>Computes the element-wise maximum of the numbers in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.MaxNumber``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>Computes the element-wise maximum of the numbers in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.MaxNumber``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>Searches for the largest number in the specified tensor.</summary>
      <param name="x">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />..</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Min``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,``0,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>Computes the element-wise minimum of the numbers in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Min``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,``0)">
      <summary>Computes the element-wise minimum of the numbers in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Min``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>Computes the element-wise minimum of the numbers in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Min``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>Computes the element-wise minimum of the numbers in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Min``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>Searches for the smallest number in the specified tensor.</summary>
      <param name="x">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.MinMagnitude``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,``0,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>Computes the element-wise number with the smallest magnitude in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.MinMagnitude``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,``0)">
      <summary>Computes the element-wise number with the smallest magnitude in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.MinMagnitude``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>Computes the element-wise number with the smallest magnitude in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.MinMagnitude``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>Computes the element-wise number with the smallest magnitude in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.MinMagnitude``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>Searches for the number with the smallest magnitude in the specified tensor.</summary>
      <param name="x">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.MinMagnitudeNumber``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,``0,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>Computes the element-wise number with the smallest magnitude in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.MinMagnitudeNumber``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,``0)">
      <summary>Computes the element-wise number with the smallest magnitude in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.MinMagnitudeNumber``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>Computes the element-wise number with the smallest magnitude in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.MinMagnitudeNumber``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>Computes the element-wise number with the smallest magnitude in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.MinMagnitudeNumber``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>Searches for the number with the smallest magnitude in the specified tensor.</summary>
      <param name="x">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />..</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.MinNumber``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,``0,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>Computes the element-wise minimum of the numbers in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.MinNumber``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,``0)">
      <summary>Computes the element-wise minimum of the numbers in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.MinNumber``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>Computes the element-wise minimum of the numbers in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.MinNumber``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>Computes the element-wise minimum of the numbers in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.MinNumber``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>Searches for the smallest number in the specified tensor.</summary>
      <param name="x">The input <see cref="T:System.Numerics.Tensors.TensorSpan`1" />..</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Multiply``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,``0,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>
            Multiplies each element of <paramref name="x" /> with <paramref name="y" /> and returns a new <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> with the result.</summary>
      <param name="x">Input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /></param>
      <param name="y">
        <typeparamref name="T" /> value to multiply by.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Multiply``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,``0)">
      <summary>
            Multiplies each element of <paramref name="x" /> with <paramref name="y" /> and returns a new <see cref="T:System.Numerics.Tensors.Tensor`1" /> with the result.</summary>
      <param name="x">Input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /></param>
      <param name="y">
        <typeparamref name="T" /> value to multiply by.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Multiply``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>
            Multiplies each element of <paramref name="x" /> with <paramref name="y" /> and returns a new <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> with the result.
            If the shapes are not the same they are broadcast to the smallest compatible shape.</summary>
      <param name="x">Left <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> for multiplication.</param>
      <param name="y">Right <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> for multiplication.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Multiply``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Multiplies each element of <paramref name="x" /> with <paramref name="y" /> and returns a new <see cref="T:System.Numerics.Tensors.Tensor`1" /> with the result.
            If the shapes are not the same they are broadcast to the smallest compatible shape.</summary>
      <param name="x">Left <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> for multiplication.</param>
      <param name="y">Right <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> for multiplication.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Negate``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>Computes the element-wise negation of each number in the specified tensor.</summary>
      <param name="x">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /></param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Negate``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>Computes the element-wise negation of each number in the specified tensor.</summary>
      <param name="x">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /></param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Norm``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
             Takes the norm of the <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> and returns the result.</summary>
      <param name="x">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to take the norm of.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.OnesComplement``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>Computes the element-wise one's complement of numbers in the specified tensor.</summary>
      <param name="y">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /></param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.OnesComplement``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>Computes the element-wise one's complement of numbers in the specified tensor.</summary>
      <param name="x">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /></param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.PermuteDimensions``1(System.Numerics.Tensors.Tensor{``0},System.ReadOnlySpan{System.Int32})">
      <summary>
            Swaps the dimensions of the <paramref name="tensor" /> tensor according to the <paramref name="dimensions" /> parameter.
            If <paramref name="tensor" /> is a 1D tensor, it will return <paramref name="tensor" />. Otherwise it creates a new <see cref="T:System.Numerics.Tensors.Tensor`1" />
            with the new axis ordering by allocating new memory.</summary>
      <param name="tensor">Input <see cref="T:System.Numerics.Tensors.Tensor`1" /></param>
      <param name="dimensions">
        <see cref="T:System.ReadOnlySpan`1" /> with the new axis ordering.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.PopCount``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>Computes the element-wise population count of numbers in the specified tensor.</summary>
      <param name="y">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /></param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.PopCount``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>Computes the element-wise population count of numbers in the specified tensor.</summary>
      <param name="x">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /></param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Pow``1(``0,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>Computes the element-wise power of a number in a specified tensor raised to a number in another specified tensors.</summary>
      <param name="x">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="y">The second input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /></param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Pow``1(``0,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>Computes the element-wise power of a number in a specified tensor raised to a number in another specified tensors.</summary>
      <param name="x">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="y">The second input</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Pow``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,``0,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>Computes the element-wise power of a number in a specified tensor raised to a number in another specified tensors.</summary>
      <param name="x">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="y">The second input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /></param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Pow``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,``0)">
      <summary>Computes the element-wise power of a number in a specified tensor raised to a number in another specified tensors.</summary>
      <param name="x">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="y">The second input</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Pow``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>Computes the element-wise power of a number in a specified tensor raised to a number in another specified tensors.</summary>
      <param name="x">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="y">The second input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /></param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Pow``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>Computes the element-wise power of a number in a specified tensor raised to a number in another specified tensors.</summary>
      <param name="x">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="y">The second input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /></param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Product``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>Computes the product of all elements in the specified non-empty tensor of numbers.</summary>
      <param name="x">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.RadiansToDegrees``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>Computes the element-wise conversion of each number of radians in the specified tensor to degrees.</summary>
      <param name="x">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.RadiansToDegrees``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>Computes the element-wise conversion of each number of radians in the specified tensor to degrees.</summary>
      <param name="x">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Reciprocal``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>Computes the element-wise reciprocal of numbers in the specified tensor.</summary>
      <param name="x">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Reciprocal``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>Computes the element-wise reciprocal of numbers in the specified tensor.</summary>
      <param name="x">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Reshape``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0},System.ReadOnlySpan{System.IntPtr})">
      <summary>
            Reshapes the <paramref name="tensor" /> tensor to the specified <paramref name="lengths" />. If one of the lengths is -1, it will be calculated automatically.
            Does not change the length of the underlying memory nor does it allocate new memory. If the new shape is not compatible with the old shape,
            an exception is thrown.</summary>
      <param name="tensor">
        <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> you want to reshape.</param>
      <param name="lengths">
        <see cref="T:System.ReadOnlySpan`1" /> with the new dimensions.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Reshape``1(System.Numerics.Tensors.Tensor{``0},System.ReadOnlySpan{System.IntPtr})">
      <summary>
            Reshapes the <paramref name="tensor" /> tensor to the specified <paramref name="lengths" />. If one of the lengths is -1, it will be calculated automatically.
            Does not change the length of the underlying memory nor does it allocate new memory. If the new shape is not compatible with the old shape,
            an exception is thrown.</summary>
      <param name="tensor">
        <see cref="T:System.Numerics.Tensors.Tensor`1" /> you want to reshape.</param>
      <param name="lengths">
        <see cref="T:System.ReadOnlySpan`1" /> with the new dimensions.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Reshape``1(System.Numerics.Tensors.TensorSpan{``0},System.ReadOnlySpan{System.IntPtr})">
      <summary>
            Reshapes the <paramref name="tensor" /> tensor to the specified <paramref name="lengths" />. If one of the lengths is -1, it will be calculated automatically.
            Does not change the length of the underlying memory nor does it allocate new memory. If the new shape is not compatible with the old shape,
            an exception is thrown.</summary>
      <param name="tensor">
        <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> you want to reshape.</param>
      <param name="lengths">
        <see cref="T:System.ReadOnlySpan`1" /> with the new dimensions.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Resize``1(System.Numerics.Tensors.Tensor{``0},System.ReadOnlySpan{System.IntPtr})">
      <summary>
            Creates a new <see cref="T:System.Numerics.Tensors.Tensor`1" />, allocates new memory, and copies the data from <paramref name="tensor" />. If the final shape is smaller all data after
            that point is ignored.</summary>
      <param name="tensor">Input <see cref="T:System.Numerics.Tensors.Tensor`1" />.</param>
      <param name="lengths">
        <see cref="T:System.ReadOnlySpan`1" /> of the desired new shape.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.ResizeTo``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>
            Copies the data from <paramref name="tensor" />. If the final shape is smaller all data after that point is ignored.
            If the final shape is bigger it is filled with 0s.</summary>
      <param name="tensor">Input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="destination">Destination <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> with the desired new shape.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.ResizeTo``1(System.Numerics.Tensors.Tensor{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>
            Copies the data from <paramref name="tensor" />. If the final shape is smaller all data after that point is ignored.
            If the final shape is bigger it is filled with 0s.</summary>
      <param name="tensor">Input <see cref="T:System.Numerics.Tensors.Tensor`1" />.</param>
      <param name="destination">Destination <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> with the desired new shape.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.ResizeTo``1(System.Numerics.Tensors.TensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>
            Copies the data from <paramref name="tensor" />. If the final shape is smaller all data after that point is ignored.
            If the final shape is bigger it is filled with 0s.</summary>
      <param name="tensor">Input <see cref="T:System.Numerics.Tensors.TensorSpan`1" />.</param>
      <param name="destination">Destination <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> with the desired new shape.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Reverse``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>
            Reverse the order of elements in the <paramref name="tensor" />. The shape of the tensor is preserved, but the elements are reordered.</summary>
      <param name="tensor">Input <see cref="T:System.Numerics.Tensors.TensorSpan`1" />.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Reverse``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Reverse the order of elements in the <paramref name="tensor" />. The shape of the tensor is preserved, but the elements are reordered.</summary>
      <param name="tensor">Input <see cref="T:System.Numerics.Tensors.Tensor`1" />.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.ReverseDimension``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Int32)">
      <summary>
            Reverse the order of elements in the <paramref name="tensor" /> along the given dimension. The shape of the tensor is preserved, but the elements are reordered.
            <paramref name="dimension" /> defaults to -1 when not provided, which reverses the entire tensor.</summary>
      <param name="tensor">Input <see cref="T:System.Numerics.Tensors.Tensor`1" />.</param>
      <param name="dimension">dimension along which to reverse over. -1 will reverse over all of the dimensions of the left tensor.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.ReverseDimension``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@,System.Int32)">
      <summary>
            Reverse the order of elements in the <paramref name="tensor" /> along the given axis. The shape of the tensor is preserved, but the elements are reordered.
            <paramref name="dimension" /> defaults to -1 when not provided, which reverses the entire span.</summary>
      <param name="tensor">Input <see cref="T:System.Numerics.Tensors.TensorSpan`1" />.</param>
      <param name="destination" />
      <param name="dimension">dimension along which to reverse over. -1 will reverse over all of the dimensions of the left tensor.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.RootN``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Int32,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>Computes the element-wise n-th root of the values in the specified tensor.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <param name="n">The degree of the root to be computed, represented as a scalar.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.RootN``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Int32)">
      <summary>Computes the element-wise n-th root of the values in the specified tensor.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="n">The degree of the root to be computed, represented as a scalar.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.RotateLeft``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Int32,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>Computes the element-wise rotation left of numbers in the specified tensor by the specified rotation amount.</summary>
      <param name="x">The tensor</param>
      <param name="rotateAmount">The number of bits to rotate, represented as a scalar.</param>
      <param name="destination" />
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">Destination is too short.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.RotateLeft``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Int32)">
      <summary>Computes the element-wise rotation left of numbers in the specified tensor by the specified rotation amount.</summary>
      <param name="x">The tensor</param>
      <param name="rotateAmount">The number of bits to rotate, represented as a scalar.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">Destination is too short.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.RotateRight``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Int32,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>Computes the element-wise rotation right of numbers in the specified tensor by the specified rotation amount.</summary>
      <param name="x">The tensor</param>
      <param name="rotateAmount">The number of bits to rotate, represented as a scalar.</param>
      <param name="destination" />
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">Destination is too short.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.RotateRight``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Int32)">
      <summary>Computes the element-wise rotation right of numbers in the specified tensor by the specified rotation amount.</summary>
      <param name="x">The tensor</param>
      <param name="rotateAmount">The number of bits to rotate, represented as a scalar.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">Destination is too short.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Round``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Int32,System.MidpointRounding,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>Computes the element-wise rounding of the numbers in the specified tensor</summary>
      <param name="x">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="digits" />
      <param name="mode" />
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Round``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Int32,System.MidpointRounding)">
      <summary>Computes the element-wise rounding of the numbers in the specified tensor</summary>
      <param name="x">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="digits" />
      <param name="mode" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Round``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Int32,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>Computes the element-wise rounding of the numbers in the specified tensor</summary>
      <param name="x">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="digits" />
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Round``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Int32)">
      <summary>Computes the element-wise rounding of the numbers in the specified tensor</summary>
      <param name="x">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="digits" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Round``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.MidpointRounding,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>Computes the element-wise rounding of the numbers in the specified tensor</summary>
      <param name="x">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="mode" />
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Round``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.MidpointRounding)">
      <summary>Computes the element-wise rounding of the numbers in the specified tensor</summary>
      <param name="x">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="mode" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Round``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>Computes the element-wise rounding of the numbers in the specified tensor</summary>
      <param name="x">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Round``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>Computes the element-wise rounding of the numbers in the specified tensor</summary>
      <param name="x">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.SequenceEqual``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0},System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Determines whether two sequences are equal by comparing the elements using IEquatable{T}.Equals(T).</summary>
      <param name="tensor" />
      <param name="other" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.SequenceEqual``1(System.Numerics.Tensors.TensorSpan{``0},System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Determines whether two sequences are equal by comparing the elements using IEquatable{T}.Equals(T).</summary>
      <param name="tensor" />
      <param name="other" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.SetSlice``1(System.Numerics.Tensors.Tensor{``0},System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.ReadOnlySpan{System.Buffers.NRange})">
      <summary>
            Sets a slice of the given <paramref name="tensor" /> with the provided <paramref name="values" /> for the given <paramref name="ranges" /></summary>
      <param name="tensor">Input <see cref="T:System.Numerics.Tensors.Tensor`1" />.</param>
      <param name="values">The values you want to set in the <paramref name="tensor" />.</param>
      <param name="ranges">The ranges you want to set.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.SetSlice``1(System.Numerics.Tensors.TensorSpan{``0},System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.ReadOnlySpan{System.Buffers.NRange})">
      <summary>
            Sets a slice of the given <paramref name="tensor" /> with the provided <paramref name="values" /> for the given <paramref name="ranges" /></summary>
      <param name="tensor">Input <see cref="T:System.Numerics.Tensors.Tensor`1" />.</param>
      <param name="values">The values you want to set in the <paramref name="tensor" />.</param>
      <param name="ranges">The ranges you want to set.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Sigmoid``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>Computes the element-wise sigmoid function on the specified non-empty tensor of numbers.</summary>
      <param name="x">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Sigmoid``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>Computes the element-wise sigmoid function on the specified non-empty tensor of numbers.</summary>
      <param name="x">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Sin``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>
            Takes the sin of each element of the <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> and returns a new <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> with the result.</summary>
      <param name="x">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to take the sin of.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Sin``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Takes the sin of each element of the <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> and returns a new <see cref="T:System.Numerics.Tensors.Tensor`1" /> with the result.</summary>
      <param name="x">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to take the sin of.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Sinh``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>Computes the element-wise hyperbolic sine of each radian angle in the specified tensor.</summary>
      <param name="x">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to take the sin of.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Sinh``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>Computes the element-wise hyperbolic sine of each radian angle in the specified tensor.</summary>
      <param name="x">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to take the sin of.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.SinPi``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>Computes the element-wise sine of the value in the specified tensor that has been multiplied by Pi.</summary>
      <param name="x">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to take the sin of.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.SinPi``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>Computes the element-wise sine of the value in the specified tensor that has been multiplied by Pi.</summary>
      <param name="x">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to take the sin of.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.SoftMax``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>Computes the softmax function over the specified non-empty tensor of numbers.</summary>
      <param name="x">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to take the sin of.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.SoftMax``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>Computes the softmax function over the specified non-empty tensor of numbers.</summary>
      <param name="x">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to take the sin of.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Split``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Int32,System.IntPtr)">
      <summary>
            Split a <see cref="T:System.Numerics.Tensors.Tensor`1" /> into <paramref name="splitCount" /> along the given <paramref name="dimension" />. If the tensor cannot be split
            evenly on the given <paramref name="dimension" /> an exception is thrown.</summary>
      <param name="tensor">Input <see cref="T:System.Numerics.Tensors.Tensor`1" />.</param>
      <param name="splitCount">How many times to split the <paramref name="tensor" /></param>
      <param name="dimension">The axis to split on.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Sqrt``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>
            Takes the square root of each element of the <paramref name="x" /> and returns a new <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> with the result.</summary>
      <param name="x">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to take the square root of.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Sqrt``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Takes the square root of each element of the <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> and returns a new <see cref="T:System.Numerics.Tensors.Tensor`1" /> with the result.</summary>
      <param name="x">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to take the square root of.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Squeeze``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0})">
      <summary>
            Removes all dimensions of length one from the <paramref name="tensor" />.</summary>
      <param name="tensor">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to remove all dimensions of length 1.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Squeeze``1(System.Numerics.Tensors.Tensor{``0})">
      <summary>
            Removes all dimensions of length one from the <paramref name="tensor" />.</summary>
      <param name="tensor">The <see cref="T:System.Numerics.Tensors.Tensor`1" /> to remove all dimensions of length 1.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Squeeze``1(System.Numerics.Tensors.TensorSpan{``0})">
      <summary>
            Removes all dimensions of length one from the <paramref name="tensor" />.</summary>
      <param name="tensor">The <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> to remove all dimensions of length 1.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.SqueezeDimension``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0},System.Int32)">
      <summary>
            Removes axis of length one from the <paramref name="tensor" /> for the given <paramref name="dimension" />.
            If the dimension is not of length one it will throw an exception.</summary>
      <param name="tensor">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to remove dimension of length 1.</param>
      <param name="dimension">The dimension to remove.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.SqueezeDimension``1(System.Numerics.Tensors.Tensor{``0},System.Int32)">
      <summary>
            Removes axis of length one from the <paramref name="tensor" /> for the given <paramref name="dimension" />.
            If the dimension is not of length one it will throw an exception.</summary>
      <param name="tensor">The <see cref="T:System.Numerics.Tensors.Tensor`1" /> to remove dimension of length 1.</param>
      <param name="dimension">The dimension to remove.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.SqueezeDimension``1(System.Numerics.Tensors.TensorSpan{``0},System.Int32)">
      <summary>
            Removes axis of length one from the <paramref name="tensor" /> for the given <paramref name="dimension" />.
            If the dimension is not of length one it will throw an exception.</summary>
      <param name="tensor">The <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> to remove dimension of length 1.</param>
      <param name="dimension">The dimension to remove.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Stack``1(System.ReadOnlySpan{System.Numerics.Tensors.Tensor{``0}})">
      <summary>
            Join multiple <see cref="T:System.Numerics.Tensors.Tensor`1" /> along a new dimension that is added at position 0. All tensors must have the same shape.</summary>
      <param name="tensors">Input <see cref="T:System.Numerics.Tensors.Tensor`1" />.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Stack``1(System.ReadOnlySpan{System.Numerics.Tensors.Tensor{``0}}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>
            Join multiple <see cref="T:System.Numerics.Tensors.Tensor`1" /> along a new dimension that is added at position 0. All tensors must have the same shape.</summary>
      <param name="tensors">Input <see cref="T:System.Numerics.Tensors.Tensor`1" />.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.StackAlongDimension``1(System.Int32,System.ReadOnlySpan{System.Numerics.Tensors.Tensor{``0}})">
      <summary>
            Join multiple <see cref="T:System.Numerics.Tensors.Tensor`1" /> along a new dimension. The axis parameter specifies the index of the new dimension. All tensors must have the same shape.</summary>
      <param name="tensors">Input <see cref="T:System.Numerics.Tensors.Tensor`1" />.</param>
      <param name="dimension">Index of where the new dimension will be.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.StackAlongDimension``1(System.ReadOnlySpan{System.Numerics.Tensors.Tensor{``0}},System.Numerics.Tensors.TensorSpan{``0}@,System.Int32)">
      <summary>
            Join multiple <see cref="T:System.Numerics.Tensors.Tensor`1" /> along a new dimension. The axis parameter specifies the index of the new dimension. All tensors must have the same shape.</summary>
      <param name="tensors">Input <see cref="T:System.Numerics.Tensors.Tensor`1" />.</param>
      <param name="destination" />
      <param name="dimension">Index of where the new dimension will be.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.StdDev``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Returns the standard deviation of the elements in the <paramref name="x" /> tensor.</summary>
      <param name="x">The <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> to take the standard deviation of.</param>
      <typeparam name="T" />
      <returns>
        <typeparamref name="T" /> representing the standard deviation.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Subtract``1(``0,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>
            Subtracts each element of <paramref name="y" /> from <paramref name="x" /> and returns a new <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> with the result.</summary>
      <param name="x">The <typeparamref name="T" /> value to be subtracted from.</param>
      <param name="y">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> values to subtract.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Subtract``1(``0,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Subtracts each element of <paramref name="y" /> from <paramref name="x" /> and returns a new <see cref="T:System.Numerics.Tensors.Tensor`1" /> with the result.</summary>
      <param name="x">The <typeparamref name="T" /> to be subtracted from.</param>
      <param name="y">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> of values to subtract.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Subtract``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,``0,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>
            Subtracts <paramref name="y" /> from each element of <paramref name="x" /> and returns a new <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> with the result.</summary>
      <param name="x">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> with values to be subtracted from.</param>
      <param name="y">The <typeparamref name="T" /> value to subtract.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Subtract``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,``0)">
      <summary>
            Subtracts <paramref name="y" /> from each element of <paramref name="x" /> and returns a new <see cref="T:System.Numerics.Tensors.Tensor`1" /> with the result.</summary>
      <param name="x">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="y">The <typeparamref name="T" /> to subtract.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Subtract``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>
            Subtracts each element of <paramref name="x" /> from <paramref name="y" /> and returns a new <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> with the result.</summary>
      <param name="x">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> of values to be subtracted from.</param>
      <param name="y">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />of values to subtract.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Subtract``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Subtracts each element of <paramref name="x" /> from <paramref name="y" /> and returns a new <see cref="T:System.Numerics.Tensors.Tensor`1" /> with the result.</summary>
      <param name="x">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> with values to be subtracted from.</param>
      <param name="y">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> with values to subtract.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Sum``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>
            Sums the elements of the specified tensor.</summary>
      <param name="x">Tensor to sum</param>
      <typeparam name="T" />
      <returns />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Tan``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>Computes the element-wise tangent of the value in the specified tensor.</summary>
      <param name="x">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to take the sin of.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Tan``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>Computes the element-wise tangent of the value in the specified tensor.</summary>
      <param name="x">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to take the sin of.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Tanh``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>Computes the element-wise hyperbolic tangent of each radian angle in the specified tensor.</summary>
      <param name="x">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to take the sin of.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Tanh``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>Computes the element-wise hyperbolic tangent of each radian angle in the specified tensor.</summary>
      <param name="x">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to take the sin of.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.TanPi``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>Computes the element-wise tangent of the value in the specified tensor that has been multiplied by Pi.</summary>
      <param name="x">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to take the sin of.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.TanPi``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>Computes the element-wise tangent of the value in the specified tensor that has been multiplied by Pi.</summary>
      <param name="x">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to take the sin of.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.ToString``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0},System.ReadOnlySpan{System.IntPtr})">
      <summary>
            Creates a <see cref="T:System.String" /> representation of the <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />."/&gt;</summary>
      <param name="tensor">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> you want to represent as a string.</param>
      <param name="maximumLengths">Maximum Length of each dimension</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.ToString``1(System.Numerics.Tensors.Tensor{``0},System.ReadOnlySpan{System.IntPtr})">
      <summary>
            Creates a <see cref="T:System.String" /> representation of the <see cref="T:System.Numerics.Tensors.Tensor`1" />."/&gt;</summary>
      <param name="tensor">The <see cref="T:System.Span`1" /> you want to represent as a string.</param>
      <param name="maximumLengths">Maximum Length of each dimension</param>
      <typeparam name="T" />
      <returns>A <see cref="T:System.String" /> representation of the <paramref name="tensor" /></returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.ToString``1(System.Numerics.Tensors.TensorSpan{``0},System.ReadOnlySpan{System.IntPtr})">
      <summary>
            Creates a <see cref="T:System.String" /> representation of the <see cref="T:System.Numerics.Tensors.TensorSpan`1" />."/&gt;</summary>
      <param name="tensor">The <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> you want to represent as a string.</param>
      <param name="maximumLengths">Maximum Length of each dimension</param>
      <typeparam name="T" />
      <returns>A <see cref="T:System.String" /> representation of the <paramref name="tensor" /></returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.TrailingZeroCount``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>Computes the element-wise trailing zero count of numbers in the specified tensor.</summary>
      <param name="x">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.TrailingZeroCount``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>Computes the element-wise trailing zero count of numbers in the specified tensor.</summary>
      <param name="x">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Transpose``1(System.Numerics.Tensors.Tensor{``0})">
      <summary>
            Swaps the last two dimensions of the <paramref name="tensor" /> tensor.</summary>
      <param name="tensor">Input <see cref="T:System.Numerics.Tensors.Tensor`1" />.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Truncate``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>Computes the element-wise truncation of numbers in the specified tensor.</summary>
      <param name="x">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Truncate``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>Computes the element-wise truncation of numbers in the specified tensor.</summary>
      <param name="x">The input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.TryBroadcastTo``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0},System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>
            Broadcast the data from <paramref name="tensor" /> to the smallest broadcastable shape compatible with <paramref name="destination" /> and stores it in <paramref name="destination" />
            If the shapes are not compatible, false is returned.</summary>
      <param name="tensor">Input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="destination">Destination <see cref="T:System.Numerics.Tensors.TensorSpan`1" />.</param>
      <typeparam name="T" />
      <returns>
        <see langword="false" /> if the shapes are not compatible, otherwise, <see langword="true" />.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.TryBroadcastTo``1(System.Numerics.Tensors.Tensor{``0},System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>
            Broadcast the data from <paramref name="tensor" /> to the smallest broadcastable shape compatible with <paramref name="destination" /> and stores it in <paramref name="destination" />
            If the shapes are not compatible, false is returned.</summary>
      <param name="tensor">Input <see cref="T:System.Numerics.Tensors.Tensor`1" />.</param>
      <param name="destination">Destination <see cref="T:System.Numerics.Tensors.TensorSpan`1" />.</param>
      <typeparam name="T" />
      <returns>
        <see langword="false" /> if the shapes are not compatible, otherwise, <see langword="true" />.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.TryBroadcastTo``1(System.Numerics.Tensors.TensorSpan{``0},System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>
            Broadcast the data from <paramref name="tensor" /> to the smallest broadcastable shape compatible with <paramref name="destination" /> and stores it in <paramref name="destination" />
            If the shapes are not compatible, false is returned.</summary>
      <param name="tensor">Input <see cref="T:System.Numerics.Tensors.TensorSpan`1" />.</param>
      <param name="destination">Destination <see cref="T:System.Numerics.Tensors.TensorSpan`1" />.</param>
      <typeparam name="T" />
      <returns>
        <see langword="false" /> if the shapes are not compatible, otherwise, <see langword="true" />.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Unsqueeze``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0},System.Int32)">
      <summary>
            Insert a new dimension of length 1 that will appear at the dimension position.</summary>
      <param name="tensor">The <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> to add a dimension of length 1.</param>
      <param name="dimension">The index of the dimension to add.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Unsqueeze``1(System.Numerics.Tensors.Tensor{``0},System.Int32)">
      <summary>
            Insert a new dimension of length 1 that will appear at the dimension position.</summary>
      <param name="tensor">The <see cref="T:System.Numerics.Tensors.Tensor`1" /> to add a dimension of length 1.</param>
      <param name="dimension">The index of the dimension to add.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Unsqueeze``1(System.Numerics.Tensors.TensorSpan{``0},System.Int32)">
      <summary>
            Insert a new dimension of length 1 that will appear at the dimension position.</summary>
      <param name="tensor">The <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> to add a dimension of length 1.</param>
      <param name="dimension">The index of the dimension to add.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Xor``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,``0,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>
            Computes the element-wise Xor of the two input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> and returns a new <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> with the result.</summary>
      <param name="x">The left <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="y">The second value.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Xor``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,``0)">
      <summary>
            Computes the element-wise Xor of the two input <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> and returns a new <see cref="T:System.Numerics.Tensors.Tensor`1" /> with the result.</summary>
      <param name="x">The left <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="y">The second value.</param>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Xor``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.TensorSpan{``0}@)">
      <summary>Computes the element-wise XOR of numbers in the specified tensors.</summary>
      <param name="x">The left <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="y">The right <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="destination" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor.Xor``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)">
      <summary>Computes the element-wise XOR of numbers in the specified tensors.</summary>
      <param name="x">The left <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <param name="y">The right <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</param>
      <typeparam name="T" />
    </member>
    <member name="T:System.Numerics.Tensors.Tensor`1">
      <summary>
            Represents a tensor.</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor`1.AsReadOnlyTensorSpan">
      <summary>
            Converts this <see cref="T:System.Numerics.Tensors.Tensor`1" /> to a <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> pointing to the same backing memory."/&gt;</summary>
      <returns>
        <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />
      </returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor`1.AsReadOnlyTensorSpan(System.ReadOnlySpan{System.Buffers.NIndex})">
      <summary>
            Converts this <see cref="T:System.Numerics.Tensors.Tensor`1" /> to a <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> pointing to the same backing memory based on the provided start indexes."/&gt;</summary>
      <param name="startIndex">The start indexes you want in the <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /></param>
      <returns />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor`1.AsReadOnlyTensorSpan(System.ReadOnlySpan{System.Buffers.NRange})">
      <summary>
            Converts this <see cref="T:System.Numerics.Tensors.Tensor`1" /> to a <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> pointing to the same backing memory based on the provided ranges."/&gt;</summary>
      <param name="start">The ranges you want in the <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /></param>
      <returns />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor`1.AsReadOnlyTensorSpan(System.ReadOnlySpan{System.IntPtr})">
      <summary>
            Converts this <see cref="T:System.Numerics.Tensors.Tensor`1" /> to a <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> pointing to the same backing memory based on the provided start locations."/&gt;</summary>
      <param name="start">The start locations you want in the <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /></param>
      <returns />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor`1.AsTensorSpan">
      <summary>
            Converts this <see cref="T:System.Numerics.Tensors.Tensor`1" /> to a <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> pointing to the same backing memory."/&gt;</summary>
      <returns>
        <see cref="T:System.Numerics.Tensors.TensorSpan`1" />
      </returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor`1.AsTensorSpan(System.ReadOnlySpan{System.Buffers.NIndex})">
      <summary>
            Converts this <see cref="T:System.Numerics.Tensors.Tensor`1" /> to a <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> pointing to the same backing memory based on the provided start indexes."/&gt;</summary>
      <param name="startIndex">The ranges you want in the <see cref="T:System.Numerics.Tensors.TensorSpan`1" />.</param>
      <returns>
        <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> based on the provided ranges.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor`1.AsTensorSpan(System.ReadOnlySpan{System.Buffers.NRange})">
      <summary>
            Converts this <see cref="T:System.Numerics.Tensors.Tensor`1" /> to a <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> pointing to the same backing memory based on the provided ranges."/&gt;</summary>
      <param name="start">The ranges you want in the <see cref="T:System.Numerics.Tensors.TensorSpan`1" />.</param>
      <returns>
        <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> based on the provided ranges.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor`1.AsTensorSpan(System.ReadOnlySpan{System.IntPtr})">
      <summary>
            Converts this <see cref="T:System.Numerics.Tensors.Tensor`1" /> to a <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> pointing to the same backing memory based on the provided start locations."/&gt;</summary>
      <param name="start">The start location you want in the <see cref="T:System.Numerics.Tensors.TensorSpan`1" />.</param>
      <returns>
        <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> based on the provided ranges.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor`1.Clear">
      <summary>
            Clears the contents of this tensor.</summary>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor`1.CopyTo(System.Numerics.Tensors.TensorSpan{`0})">
      <summary>
            Copies the contents of this tensor into destination span. If the source
            and destinations overlap, this method behaves as if the original values in
            a temporary location before the destination is overwritten.</summary>
      <param name="destination">The span to copy items into.</param>
      <exception cref="T:System.ArgumentException">
            Thrown when the destination TensorSpan is shorter than the source Tensor.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor`1.Fill(`0)">
      <summary>
            Fills the contents of this span with the given value.</summary>
      <param name="value" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor`1.FlattenTo(System.Span{`0})">
      <summary>
            Flattens the contents of this Tensor into the provided <see cref="T:System.Span`1" />.</summary>
      <param name="destination">The span to copy items into.</param>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor`1.GetEnumerator">
      <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerator`1" /> for the <see cref="T:System.Numerics.Tensors.Tensor`1" />.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerator`1" />
      </returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor`1.GetHashCode">
      <summary>
            Gets the hash code for the <see cref="T:System.Numerics.Tensors.Tensor`1" />.</summary>
      <exception cref="T:System.NotImplementedException">In all cases.</exception>
      <returns>The hash code of the tensor.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor`1.GetPinnableReference">
      <summary>
            Returns a reference to the 0th element of the Tensor. If the Tensor is empty, returns null reference.
            It can be used for pinning and is required to support the use of Tensor within a fixed statement.</summary>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor`1.op_Implicit(T[])~System.Numerics.Tensors.Tensor{`0}">
      <param name="array" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor`1.op_Implicit(System.Numerics.Tensors.Tensor{`0})~System.Numerics.Tensors.ReadOnlyTensorSpan{`0}">
      <param name="value" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor`1.op_Implicit(System.Numerics.Tensors.Tensor{`0})~System.Numerics.Tensors.TensorSpan{`0}">
      <param name="value" />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor`1.Slice(System.ReadOnlySpan{System.Buffers.NIndex})">
      <summary>
            Forms a slice out of the given tensor</summary>
      <param name="startIndex">The start indexes for the slice</param>
      <returns>
        <see cref="T:System.Numerics.Tensors.Tensor`1" /> as a copy of the provided ranges.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor`1.Slice(System.ReadOnlySpan{System.Buffers.NRange})">
      <summary>
            Forms a slice out of the given tensor</summary>
      <param name="start">The ranges for the slice</param>
      <returns>
        <see cref="T:System.Numerics.Tensors.Tensor`1" /> as a copy of the provided ranges.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor`1.Slice(System.ReadOnlySpan{System.IntPtr})">
      <summary>
            Forms a slice out of the given tensor</summary>
      <param name="start">The start indexes for the slice</param>
      <returns>
        <see cref="T:System.Numerics.Tensors.Tensor`1" /> as a copy of the provided ranges.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerator`1" /> for the <see cref="T:System.Numerics.Tensors.Tensor`1" />.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerator`1" />
      </returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Gets an <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:System.Numerics.Tensors.Tensor`1" />."/&gt;</summary>
      <returns />
    </member>
    <member name="M:System.Numerics.Tensors.Tensor`1.System#Numerics#Tensors#IReadOnlyTensor{System#Numerics#Tensors#Tensor{T}@T}#GetPinnableReference">
      <summary>
            Returns a reference to the 0th element of the ReadOnlyTensor. If the ReadOnlyTensor is empty, returns null reference.
            It can be used for pinning and is required to support the use of ReadOnlyTensor within a fixed statement.</summary>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor`1.System#Numerics#Tensors#ITensor{System#Numerics#Tensors#Tensor{T}@T}#Create(System.ReadOnlySpan{System.IntPtr},System.Boolean)">
      <summary>
            Creates a <see cref="T:System.Numerics.Tensors.Tensor`1" /> and initializes it with the default value of T. If <paramref name="pinned" /> is true, the memory will be pinned.</summary>
      <param name="lengths">A <see cref="T:System.ReadOnlySpan`1" /> indicating the lengths of each dimension.</param>
      <param name="pinned">A <see cref="T:System.Boolean" /> whether the underlying data should be pinned or not.</param>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor`1.System#Numerics#Tensors#ITensor{System#Numerics#Tensors#Tensor{T}@T}#Create(System.ReadOnlySpan{System.IntPtr},System.ReadOnlySpan{System.IntPtr},System.Boolean)">
      <summary>
            Creates a <see cref="T:System.Numerics.Tensors.Tensor`1" /> and initializes it with the default value of T. If <paramref name="pinned" /> is true, the memory will be pinned.</summary>
      <param name="lengths">A <see cref="T:System.ReadOnlySpan`1" /> indicating the lengths of each dimension.</param>
      <param name="strides">A <see cref="T:System.ReadOnlySpan`1" /> indicating the strides of each dimension.</param>
      <param name="pinned">A <see cref="T:System.Boolean" /> whether the underlying data should be pinned or not.</param>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor`1.System#Numerics#Tensors#ITensor{System#Numerics#Tensors#Tensor{T}@T}#CreateUninitialized(System.ReadOnlySpan{System.IntPtr},System.Boolean)">
      <summary>
            Creates a <see cref="T:System.Numerics.Tensors.Tensor`1" /> and does not initialize it. If <paramref name="pinned" /> is true, the memory will be pinned.</summary>
      <param name="lengths">A <see cref="T:System.ReadOnlySpan`1" /> indicating the lengths of each dimension.</param>
      <param name="pinned">A <see cref="T:System.Boolean" /> whether the underlying data should be pinned or not.</param>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor`1.System#Numerics#Tensors#ITensor{System#Numerics#Tensors#Tensor{T}@T}#CreateUninitialized(System.ReadOnlySpan{System.IntPtr},System.ReadOnlySpan{System.IntPtr},System.Boolean)">
      <summary>
            Creates a <see cref="T:System.Numerics.Tensors.Tensor`1" /> and does not initialize it. If <paramref name="pinned" /> is true, the memory will be pinned.</summary>
      <param name="lengths">A <see cref="T:System.ReadOnlySpan`1" /> indicating the lengths of each dimension.</param>
      <param name="strides">A <see cref="T:System.ReadOnlySpan`1" /> indicating the strides of each dimension.</param>
      <param name="pinned">A <see cref="T:System.Boolean" /> whether the underlying data should be pinned or not.</param>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor`1.ToString(System.ReadOnlySpan{System.IntPtr})">
      <summary>
            Creates a <see cref="T:System.String" /> representation of the <see cref="T:System.Numerics.Tensors.TensorSpan`1" />."/&gt;</summary>
      <param name="maximumLengths">Maximum Length of each dimension</param>
      <returns>A <see cref="T:System.String" /> representation of the <see cref="T:System.Numerics.Tensors.Tensor`1" /></returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor`1.TryCopyTo(System.Numerics.Tensors.TensorSpan{`0})">
      <summary>
            Copies the contents of this tensor into destination span. If the source
            and destinations overlap, this method behaves as if the original values in
            a temporary location before the destination is overwritten.</summary>
      <param name="destination">The span to copy items into.</param>
      <returns>If the destination span is shorter than the source tensor, this method
            return false and no data is written to the destination.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.Tensor`1.TryFlattenTo(System.Span{`0})">
      <summary>
            Flattens the contents of this Tensor into the provided <see cref="T:System.Span`1" />.</summary>
      <param name="destination">The span to copy items into.</param>
    </member>
    <member name="P:System.Numerics.Tensors.Tensor`1.Empty">
      <summary>
            The Empty Tensor.</summary>
    </member>
    <member name="P:System.Numerics.Tensors.Tensor`1.FlattenedLength">
      <summary>
            The number of items in the <see cref="T:System.Numerics.Tensors.Tensor`1" />.</summary>
      <returns>
        <see cref="T:System.IntPtr" /> with the number of items.</returns>
    </member>
    <member name="P:System.Numerics.Tensors.Tensor`1.IsEmpty">
      <summary>
            Gets a value indicating whether this <see cref="T:System.Numerics.Tensors.Tensor`1" /> is empty.</summary>
      <returns>
        <see langword="true" /> if this tensor is empty; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Numerics.Tensors.Tensor`1.IsPinned">
      <summary>
            Gets a value indicating whether the backing memory of the <see cref="T:System.Numerics.Tensors.Tensor`1" /> is pinned."/&gt;</summary>
      <returns>
        <see langword="true" /> if the backing memory is pinned; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Numerics.Tensors.Tensor`1.Item(System.Numerics.Tensors.Tensor{System.Boolean})">
      <param name="filter" />
      <exception cref="T:System.ArgumentOutOfRangeException" />
    </member>
    <member name="P:System.Numerics.Tensors.Tensor`1.Item(System.ReadOnlySpan{System.Buffers.NIndex})">
      <summary>
            Returns a reference to specified element of the Tensor.</summary>
      <param name="indexes" />
      <exception cref="T:System.IndexOutOfRangeException">
            Thrown when index less than 0 or index greater than or equal to FlattenedLength</exception>
    </member>
    <member name="P:System.Numerics.Tensors.Tensor`1.Item(System.ReadOnlySpan{System.Buffers.NRange})">
      <summary>
            Returns a slice of the Tensor.</summary>
      <param name="ranges" />
      <exception cref="T:System.IndexOutOfRangeException">
            Thrown when any index is less than 0 or any index is greater than or equal to FlattenedLength</exception>
    </member>
    <member name="P:System.Numerics.Tensors.Tensor`1.Item(System.ReadOnlySpan{System.IntPtr})">
      <summary>
            Returns a reference to specified element of the Tensor.</summary>
      <param name="indexes" />
      <exception cref="T:System.IndexOutOfRangeException">
            Thrown when index less than 0 or index greater than or equal to FlattenedLength</exception>
    </member>
    <member name="P:System.Numerics.Tensors.Tensor`1.Lengths">
      <summary>
            Gets the length of each dimension in this <see cref="T:System.Numerics.Tensors.Tensor`1" />.</summary>
      <returns>
        <see cref="T:System.ReadOnlySpan`1" /> with the lengths of each dimension.</returns>
    </member>
    <member name="P:System.Numerics.Tensors.Tensor`1.Rank">
      <summary>
            Gets a value indicating the rank, or number of dimensions, of this <see cref="T:System.Numerics.Tensors.Tensor`1" />.</summary>
      <returns>
        <see cref="T:System.IntPtr" /> with the number of dimensions.</returns>
    </member>
    <member name="P:System.Numerics.Tensors.Tensor`1.Strides">
      <summary>
            Gets the strides of each dimension in this <see cref="T:System.Numerics.Tensors.Tensor`1" />.</summary>
      <returns>
        <see cref="T:System.ReadOnlySpan`1" /> with the strides of each dimension.</returns>
    </member>
    <member name="P:System.Numerics.Tensors.Tensor`1.System#Numerics#Tensors#IReadOnlyTensor{System#Numerics#Tensors#Tensor{T}@T}#Item(System.ReadOnlySpan{System.Buffers.NIndex})">
      <summary>
            Returns the specified element of the ReadOnlyTensor.</summary>
      <param name="indexes" />
      <exception cref="T:System.IndexOutOfRangeException">
            Thrown when index less than 0 or index greater than or equal to FlattenedLength</exception>
    </member>
    <member name="P:System.Numerics.Tensors.Tensor`1.System#Numerics#Tensors#IReadOnlyTensor{System#Numerics#Tensors#Tensor{T}@T}#Item(System.ReadOnlySpan{System.Buffers.NRange})">
      <summary>
            Returns a slice of the ReadOnlyTensor.</summary>
      <param name="ranges" />
      <exception cref="T:System.IndexOutOfRangeException">
            Thrown when any index is less than 0 or any index is greater than or equal to FlattenedLength</exception>
    </member>
    <member name="P:System.Numerics.Tensors.Tensor`1.System#Numerics#Tensors#IReadOnlyTensor{System#Numerics#Tensors#Tensor{T}@T}#Item(System.ReadOnlySpan{System.IntPtr})">
      <summary>
            Returns the specified element of the ReadOnlyTensor.</summary>
      <param name="indexes" />
      <exception cref="T:System.IndexOutOfRangeException">
            Thrown when index less than 0 or index greater than or equal to FlattenedLength</exception>
    </member>
    <member name="P:System.Numerics.Tensors.Tensor`1.System#Numerics#Tensors#IReadOnlyTensor{System#Numerics#Tensors#Tensor{T}@T}#Lengths">
      <summary>
            Gets the length of each dimension in this <see cref="T:System.Numerics.Tensors.Tensor`1" />.</summary>
      <returns>
        <see cref="T:System.ReadOnlySpan`1" /> with the lengths of each dimension.</returns>
    </member>
    <member name="P:System.Numerics.Tensors.Tensor`1.System#Numerics#Tensors#IReadOnlyTensor{System#Numerics#Tensors#Tensor{T}@T}#Strides">
      <summary>
            Gets the strides of each dimension in this <see cref="T:System.Numerics.Tensors.Tensor`1" />.</summary>
      <returns>
        <see cref="T:System.ReadOnlySpan`1" /> with the strides of each dimension.</returns>
    </member>
    <member name="P:System.Numerics.Tensors.Tensor`1.System#Numerics#Tensors#ITensor{System#Numerics#Tensors#Tensor{T}@T}#IsReadOnly" />
    <member name="P:System.Numerics.Tensors.Tensor`1.System#Numerics#Tensors#ITensor{System#Numerics#Tensors#Tensor{T}@T}#Item(System.ReadOnlySpan{System.Buffers.NIndex})">
      <summary>
            Returns the specified element of the Tensor.</summary>
      <param name="indexes" />
      <exception cref="T:System.IndexOutOfRangeException">
            Thrown when index less than 0 or index greater than or equal to FlattenedLength</exception>
    </member>
    <member name="P:System.Numerics.Tensors.Tensor`1.System#Numerics#Tensors#ITensor{System#Numerics#Tensors#Tensor{T}@T}#Item(System.ReadOnlySpan{System.IntPtr})">
      <summary>
            Returns the specified element of the Tensor.</summary>
      <param name="indexes" />
      <exception cref="T:System.IndexOutOfRangeException">
            Thrown when index less than 0 or index greater than or equal to FlattenedLength</exception>
    </member>
    <member name="T:System.Numerics.Tensors.TensorPrimitives">
      <summary>Performs primitive tensor operations over spans of memory.</summary>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Abs(System.ReadOnlySpan{System.Single},System.Span{System.Single})">
      <summary>Computes the element-wise absolute value of each single-precision floating-point number in the specified tensor.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Abs``1(System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise absolute value of each number in the specified tensor.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
      <exception cref="T:System.OverflowException">
        <typeparamref name="T" /> is a signed integer type and <paramref name="x" /> contained a value equal to <typeparamref name="T" />'s minimum value.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Acos``1(System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise angle in radians whose cosine is the specifed number.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Acosh``1(System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise hyperbolic arc-cosine of the specifed number.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.AcosPi``1(System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise angle in radians whose cosine is the specifed number and divides the result by Pi.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Add(System.ReadOnlySpan{System.Single},System.ReadOnlySpan{System.Single},System.Span{System.Single})">
      <summary>Computes the element-wise addition of single-precision floating-point numbers in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="y" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Add(System.ReadOnlySpan{System.Single},System.Single,System.Span{System.Single})">
      <summary>Computes the element-wise addition of single-precision floating-point numbers in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a scalar.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Add``1(System.ReadOnlySpan{``0},``0,System.Span{``0})">
      <summary>Computes the element-wise addition of numbers in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a scalar.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Add``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise addition of numbers in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="y" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.AddMultiply(System.ReadOnlySpan{System.Single},System.ReadOnlySpan{System.Single},System.ReadOnlySpan{System.Single},System.Span{System.Single})">
      <summary>Computes the element-wise result of <c>(<paramref name="x" /> + <paramref name="y" />) * <paramref name="multiplier" /></c> for the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <param name="multiplier">The third tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="multiplier" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.AddMultiply(System.ReadOnlySpan{System.Single},System.ReadOnlySpan{System.Single},System.Single,System.Span{System.Single})">
      <summary>Computes the element-wise result of <c>(<paramref name="x" /> + <paramref name="y" />) * <paramref name="multiplier" /></c> for the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <param name="multiplier">The third tensor, represented as a scalar.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="y" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.AddMultiply(System.ReadOnlySpan{System.Single},System.Single,System.ReadOnlySpan{System.Single},System.Span{System.Single})">
      <summary>Computes the element-wise result of <c>(<paramref name="x" /> + <paramref name="y" />) * <paramref name="multiplier" /></c> for the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a scalar.</param>
      <param name="multiplier">The third tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="multiplier" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.AddMultiply``1(System.ReadOnlySpan{``0},``0,System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise result of <c>(<paramref name="x" /> + <paramref name="y" />) * <paramref name="multiplier" /></c> for the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a scalar.</param>
      <param name="multiplier">The third tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="multiplier" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.AddMultiply``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},``0,System.Span{``0})">
      <summary>Computes the element-wise result of <c>(<paramref name="x" /> + <paramref name="y" />) * <paramref name="multiplier" /></c> for the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <param name="multiplier">The third tensor, represented as a scalar.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="y" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.AddMultiply``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise result of <c>(<paramref name="x" /> + <paramref name="y" />) * <paramref name="multiplier" /></c> for the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <param name="multiplier">The third tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="multiplier" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Asin``1(System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise angle in radians whose sine is the specifed number.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Asinh``1(System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise hyperbolic arc-sine of the specifed number.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.AsinPi``1(System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise angle in radians whose sine is the specifed number and divides the result by Pi.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Atan``1(System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise angle in radians whose tangent is the specifed number.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Atan2``1(``0,System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise arc-tangent for the quotient of two values in the specified tensors.</summary>
      <param name="y">The first tensor, represented as a scalar.</param>
      <param name="x">The second tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Atan2``1(System.ReadOnlySpan{``0},``0,System.Span{``0})">
      <summary>Computes the element-wise arc-tangent for the quotient of two values in the specified tensors.</summary>
      <param name="y">The first tensor, represented as a span.</param>
      <param name="x">The second tensor, represented as a scalar.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="y" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Atan2``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise arc-tangent for the quotient of two values in the specified tensors.</summary>
      <param name="y">The first tensor, represented as a span.</param>
      <param name="x">The second tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Atan2Pi``1(``0,System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise arc-tangent for the quotient of two values in the specified tensors and divides the result by Pi.</summary>
      <param name="y">The first tensor, represented as a scalar.</param>
      <param name="x">The second tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Atan2Pi``1(System.ReadOnlySpan{``0},``0,System.Span{``0})">
      <summary>Computes the element-wise arc-tangent for the quotient of two values in the specified tensors and divides the result by Pi.</summary>
      <param name="y">The first tensor, represented as a span.</param>
      <param name="x">The second tensor, represented as a scalar.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="y" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Atan2Pi``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise arc-tangent for the quotient of two values in the specified tensors and divides the result by Pi.</summary>
      <param name="y">The first tensor, represented as a span.</param>
      <param name="x">The second tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Atanh``1(System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise hyperbolic arc-tangent of the specifed number.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.AtanPi``1(System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise angle in radians whose tangent is the specifed number and divides the result by Pi.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.BitwiseAnd``1(System.ReadOnlySpan{``0},``0,System.Span{``0})">
      <summary>Computes the element-wise bitwise AND of numbers in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a scalar.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.BitwiseAnd``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise bitwise AND of numbers in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="y" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.BitwiseOr``1(System.ReadOnlySpan{``0},``0,System.Span{``0})">
      <summary>Computes the element-wise bitwise OR of numbers in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a scalar.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.BitwiseOr``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise bitwise OR of numbers in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="y" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Cbrt``1(System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise cube root of numbers in the specified tensor.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Ceiling``1(System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise ceiling of numbers in the specified tensor.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.ConvertChecked``2(System.ReadOnlySpan{``0},System.Span{``1})">
      <summary>
            Copies <paramref name="source" /> to <paramref name="destination" />, converting each <typeparamref name="TFrom" />
            value to a <typeparamref name="TTo" /> value.</summary>
      <param name="source">The source span from which to copy values.</param>
      <param name="destination">The destination span into which the converted values should be written.</param>
      <typeparam name="TFrom" />
      <typeparam name="TTo" />
      <exception cref="T:System.ArgumentException">Destination is too short.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.ConvertSaturating``2(System.ReadOnlySpan{``0},System.Span{``1})">
      <summary>
            Copies <paramref name="source" /> to <paramref name="destination" />, converting each <typeparamref name="TFrom" />
            value to a <typeparamref name="TTo" /> value.</summary>
      <param name="source">The source span from which to copy values.</param>
      <param name="destination">The destination span into which the converted values should be written.</param>
      <typeparam name="TFrom" />
      <typeparam name="TTo" />
      <exception cref="T:System.ArgumentException">Destination is too short.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.ConvertToHalf(System.ReadOnlySpan{System.Single},System.Span{System.Half})">
      <summary>
            Copies <paramref name="source" /> to <paramref name="destination" />, converting each <see cref="T:System.Single" />
            value to its nearest representable half-precision floating-point value.</summary>
      <param name="source">The source span from which to copy values.</param>
      <param name="destination">The destination span into which the converted values should be written.</param>
      <exception cref="T:System.ArgumentException">Destination is too short.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.ConvertToSingle(System.ReadOnlySpan{System.Half},System.Span{System.Single})">
      <summary>
            Copies <paramref name="source" /> to <paramref name="destination" />, converting each half-precision
            floating-point value to its nearest representable <see cref="T:System.Single" /> value.</summary>
      <param name="source">The source span from which to copy values.</param>
      <param name="destination">The destination span into which the converted values should be written.</param>
      <exception cref="T:System.ArgumentException">Destination is too short.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.ConvertTruncating``2(System.ReadOnlySpan{``0},System.Span{``1})">
      <summary>
            Copies <paramref name="source" /> to <paramref name="destination" />, converting each <typeparamref name="TFrom" />
            value to a <typeparamref name="TTo" /> value.</summary>
      <param name="source">The source span from which to copy values.</param>
      <param name="destination">The destination span into which the converted values should be written.</param>
      <typeparam name="TFrom" />
      <typeparam name="TTo" />
      <exception cref="T:System.ArgumentException">Destination is too short.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.CopySign``1(System.ReadOnlySpan{``0},``0,System.Span{``0})">
      <summary>Computes the element-wise result of copying the sign from one number to another number in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="sign">The second tensor, represented as a scalar.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.CopySign``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise result of copying the sign from one number to another number in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="sign">The second tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="sign" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Cos``1(System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise cosine of the value in the specified tensor.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Cosh(System.ReadOnlySpan{System.Single},System.Span{System.Single})">
      <summary>Computes the element-wise hyperbolic cosine of each single-precision floating-point radian angle in the specified tensor.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Cosh``1(System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise hyperbolic cosine of each radian angle in the specified tensor.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.CosineSimilarity(System.ReadOnlySpan{System.Single},System.ReadOnlySpan{System.Single})">
      <summary>Computes the cosine similarity between the two specified non-empty, equal-length tensors of single-precision floating-point numbers.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="y" /> must not be empty.</exception>
      <returns>The cosine similarity of the two tensors.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.CosineSimilarity``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary>Computes the cosine similarity between the two specified non-empty, equal-length tensors of numbers.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="y" /> must not be empty.</exception>
      <returns>The cosine similarity of the two tensors.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.CosPi``1(System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise cosine of the value in the specified tensor that has been multiplied by Pi.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.DegreesToRadians``1(System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise conversion of each number of degrees in the specified tensor to radians.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Distance(System.ReadOnlySpan{System.Single},System.ReadOnlySpan{System.Single})">
      <summary>Computes the distance between two points, specified as non-empty, equal-length tensors of single-precision floating-point numbers, in Euclidean space.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="y" /> must not be empty.</exception>
      <returns>The Euclidean distance.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Distance``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary>Computes the distance between two points, specified as non-empty, equal-length tensors of numbers, in Euclidean space.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="y" /> must not be empty.</exception>
      <returns>The Euclidean distance.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Divide(System.ReadOnlySpan{System.Single},System.ReadOnlySpan{System.Single},System.Span{System.Single})">
      <summary>Computes the element-wise division of single-precision floating-point numbers in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="y" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Divide(System.ReadOnlySpan{System.Single},System.Single,System.Span{System.Single})">
      <summary>Computes the element-wise division of single-precision floating-point numbers in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a scalar.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Divide``1(``0,System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise division of numbers in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a scalar.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="y" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
      <exception cref="T:System.DivideByZeroException">
        <typeparamref name="T" /> is an integer type and an element in <paramref name="y" /> is equal to zero.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Divide``1(System.ReadOnlySpan{``0},``0,System.Span{``0})">
      <summary>Computes the element-wise division of numbers in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a scalar.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
      <exception cref="T:System.DivideByZeroException">
        <typeparamref name="T" /> is an integer type and <paramref name="y" /> is equal to zero.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Divide``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise division of numbers in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="y" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
      <exception cref="T:System.DivideByZeroException">
        <typeparamref name="T" /> is an integer type and an element in <paramref name="y" /> is equal to zero.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Dot(System.ReadOnlySpan{System.Single},System.ReadOnlySpan{System.Single})">
      <summary>Computes the dot product of two tensors containing single-precision floating-point numbers.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <exception cref="T:System.ArgumentException">Length of <paramref name="x" /> must be same as length of <paramref name="y" />.</exception>
      <returns>The dot product.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Dot``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary>Computes the dot product of two tensors containing numbers.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">Length of <paramref name="x" /> must be same as length of <paramref name="y" />.</exception>
      <returns>The dot product.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Exp(System.ReadOnlySpan{System.Single},System.Span{System.Single})">
      <summary>Computes the element-wise result of raising <c>e</c> to the single-precision floating-point number powers in the specified tensor.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Exp``1(System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise result of raising <c>e</c> to the number powers in the specified tensor.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Exp10``1(System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise result of raising 10 to the number powers in the specified tensor.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Exp10M1``1(System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise result of raising 10 to the number powers in the specified tensor, minus one.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Exp2``1(System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise result of raising 2 to the number powers in the specified tensor.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Exp2M1``1(System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise result of raising 2 to the number powers in the specified tensor, minus one.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.ExpM1``1(System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise result of raising <c>e</c> to the number powers in the specified tensor, minus 1.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Floor``1(System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise floor of numbers in the specified tensor.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.FusedMultiplyAdd``1(System.ReadOnlySpan{``0},``0,System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise result of <c>(<paramref name="x" /> * <paramref name="y" />) + <paramref name="addend" /></c> for the specified tensors of numbers.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a scalar.</param>
      <param name="addend">The third tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="addend" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.FusedMultiplyAdd``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},``0,System.Span{``0})">
      <summary>Computes the element-wise result of <c>(<paramref name="x" /> * <paramref name="y" />) + <paramref name="addend" /></c> for the specified tensors of numbers.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <param name="addend">The third tensor, represented as a scalar.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="y" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.FusedMultiplyAdd``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise result of <c>(<paramref name="x" /> * <paramref name="y" />) + <paramref name="addend" /></c> for the specified tensors of numbers.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <param name="addend">The third tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="addend" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.HammingBitDistance``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary>Computes the bitwise Hamming distance between two equal-length tensors of values.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="y" /> must not be empty.</exception>
      <returns>The number of bits that differ between the two spans.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.HammingDistance``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary>Computes the Hamming distance between two equal-length tensors of values.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="y" /> must not be empty.</exception>
      <returns>The number of elements that differ between the two spans.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Hypot``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise hypotenuse given values from two tensors representing the lengths of the shorter sides in a right-angled triangle.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="y" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Ieee754Remainder``1(``0,System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise remainder of the numbers in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a scalar.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="y" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Ieee754Remainder``1(System.ReadOnlySpan{``0},``0,System.Span{``0})">
      <summary>Computes the element-wise remainder of the numbers in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a scalar.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Ieee754Remainder``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise remainder of the numbers in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="y" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.ILogB``1(System.ReadOnlySpan{``0},System.Span{System.Int32})">
      <summary>Computes the element-wise integer logarithm of numbers in the specified tensor.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.IndexOfMax(System.ReadOnlySpan{System.Single})">
      <summary>Searches for the index of the largest single-precision floating-point number in the specified tensor.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <returns>The index of the maximum element in <paramref name="x" />, or -1 if <paramref name="x" /> is empty.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.IndexOfMax``1(System.ReadOnlySpan{``0})">
      <summary>Searches for the index of the largest number in the specified tensor.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <typeparam name="T" />
      <returns>The index of the maximum element in <paramref name="x" />, or -1 if <paramref name="x" /> is empty.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.IndexOfMaxMagnitude(System.ReadOnlySpan{System.Single})">
      <summary>Searches for the index of the single-precision floating-point number with the largest magnitude in the specified tensor.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <returns>The index of the element in <paramref name="x" /> with the largest magnitude (absolute value), or -1 if <paramref name="x" /> is empty.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.IndexOfMaxMagnitude``1(System.ReadOnlySpan{``0})">
      <summary>Searches for the index of the number with the largest magnitude in the specified tensor.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <typeparam name="T" />
      <returns>The index of the element in <paramref name="x" /> with the largest magnitude (absolute value), or -1 if <paramref name="x" /> is empty.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.IndexOfMin(System.ReadOnlySpan{System.Single})">
      <summary>Searches for the index of the smallest single-precision floating-point number in the specified tensor.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <returns>The index of the minimum element in <paramref name="x" />, or -1 if <paramref name="x" /> is empty.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.IndexOfMin``1(System.ReadOnlySpan{``0})">
      <summary>Searches for the index of the smallest number in the specified tensor.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <typeparam name="T" />
      <returns>The index of the minimum element in <paramref name="x" />, or -1 if <paramref name="x" /> is empty.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.IndexOfMinMagnitude(System.ReadOnlySpan{System.Single})">
      <summary>Searches for the index of the single-precision floating-point number with the smallest magnitude in the specified tensor.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <returns>The index of the element in <paramref name="x" /> with the smallest magnitude (absolute value), or -1 if <paramref name="x" /> is empty.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.IndexOfMinMagnitude``1(System.ReadOnlySpan{``0})">
      <summary>Searches for the index of the number with the smallest magnitude in the specified tensor.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <typeparam name="T" />
      <returns>The index of the element in <paramref name="x" /> with the smallest magnitude (absolute value), or -1 if <paramref name="x" /> is empty.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.LeadingZeroCount``1(System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise leading zero count of numbers in the specified tensor.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Lerp``1(System.ReadOnlySpan{``0},``0,System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise linear interpolation between two values based on the given weight in the specified tensors of numbers.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a scalar.</param>
      <param name="amount">The third tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="amount" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Lerp``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},``0,System.Span{``0})">
      <summary>Computes the element-wise linear interpolation between two values based on the given weight in the specified tensors of numbers.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <param name="amount">The third tensor, represented as a scalar.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="y" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Lerp``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise linear interpolation between two values based on the given weight in the specified tensors of numbers.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <param name="amount">The third tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="amount" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Log(System.ReadOnlySpan{System.Single},System.Span{System.Single})">
      <summary>Computes the element-wise natural (base <c>e</c>) logarithm of single-precision floating-point numbers in the specified tensor.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Log``1(System.ReadOnlySpan{``0},``0,System.Span{``0})">
      <summary>Computes the element-wise logarithm of the numbers in a specified tensor to the specified base in another specified tensor.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a scalar.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Log``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise logarithm of the numbers in a specified tensor to the specified base in another specified tensor.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="y" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Log``1(System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise natural (base <c>e</c>) logarithm of numbers in the specified tensor.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Log10``1(System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise base 10 logarithm of numbers in the specified tensor.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Log10P1``1(System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise base 10 logarithm of numbers in the specified tensor plus 1.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Log2(System.ReadOnlySpan{System.Single},System.Span{System.Single})">
      <summary>Computes the element-wise base 2 logarithm of single-precision floating-point numbers in the specified tensor.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Log2``1(System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise base 2 logarithm of numbers in the specified tensor.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Log2P1``1(System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise base 2 logarithm of numbers in the specified tensor plus 1.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.LogP1``1(System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise natural (base <c>e</c>) logarithm of numbers in the specified tensor plus 1.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Max(System.ReadOnlySpan{System.Single},System.ReadOnlySpan{System.Single},System.Span{System.Single})">
      <summary>Computes the element-wise maximum of the single-precision floating-point numbers in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="y" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Max(System.ReadOnlySpan{System.Single})">
      <summary>Searches for the largest single-precision floating-point number in the specified tensor.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <exception cref="T:System.ArgumentException">Length of <paramref name="x" /> must be greater than zero.</exception>
      <returns>The maximum element in <paramref name="x" />.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Max``1(System.ReadOnlySpan{``0},``0,System.Span{``0})">
      <summary>Computes the element-wise maximum of the numbers in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a scalar.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Max``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise maximum of the numbers in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="y" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Max``1(System.ReadOnlySpan{``0})">
      <summary>Searches for the largest number in the specified tensor.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">Length of <paramref name="x" /> must be greater than zero.</exception>
      <returns>The maximum element in <paramref name="x" />.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.MaxMagnitude(System.ReadOnlySpan{System.Single},System.ReadOnlySpan{System.Single},System.Span{System.Single})">
      <summary>Computes the element-wise single-precision floating-point number with the largest magnitude in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="y" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.MaxMagnitude(System.ReadOnlySpan{System.Single})">
      <summary>Searches for the single-precision floating-point number with the largest magnitude in the specified tensor.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <exception cref="T:System.ArgumentException">Length of <paramref name="x" /> must be greater than zero.</exception>
      <returns>The element in <paramref name="x" /> with the largest magnitude (absolute value).</returns>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.MaxMagnitude``1(System.ReadOnlySpan{``0},``0,System.Span{``0})">
      <summary>Computes the element-wise number with the largest magnitude in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a scalar.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.MaxMagnitude``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise number with the largest magnitude in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="y" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.MaxMagnitude``1(System.ReadOnlySpan{``0})">
      <summary>Searches for the number with the largest magnitude in the specified tensor.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">Length of <paramref name="x" /> must be greater than zero.</exception>
      <returns>The element in <paramref name="x" /> with the largest magnitude (absolute value).</returns>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.MaxMagnitudeNumber``1(System.ReadOnlySpan{``0},``0,System.Span{``0})">
      <summary>Computes the element-wise number with the largest magnitude in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a scalar.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.MaxMagnitudeNumber``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise number with the largest magnitude in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="y" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.MaxMagnitudeNumber``1(System.ReadOnlySpan{``0})">
      <summary>Searches for the number with the largest magnitude in the specified tensor.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">Length of <paramref name="x" /> must be greater than zero.</exception>
      <returns>The element in <paramref name="x" /> with the largest magnitude (absolute value).</returns>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.MaxNumber``1(System.ReadOnlySpan{``0},``0,System.Span{``0})">
      <summary>Computes the element-wise maximum of the numbers in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a scalar.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.MaxNumber``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise maximum of the numbers in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="y" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.MaxNumber``1(System.ReadOnlySpan{``0})">
      <summary>Searches for the largest number in the specified tensor.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">Length of <paramref name="x" /> must be greater than zero.</exception>
      <returns>The maximum element in <paramref name="x" />.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Min(System.ReadOnlySpan{System.Single},System.ReadOnlySpan{System.Single},System.Span{System.Single})">
      <summary>Computes the element-wise minimum of the single-precision floating-point numbers in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="y" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Min(System.ReadOnlySpan{System.Single})">
      <summary>Searches for the smallest single-precision floating-point number in the specified tensor.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <exception cref="T:System.ArgumentException">Length of <paramref name="x" /> must be greater than zero.</exception>
      <returns>The minimum element in <paramref name="x" />.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Min``1(System.ReadOnlySpan{``0},``0,System.Span{``0})">
      <summary>Computes the element-wise minimum of the numbers in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a scalar.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Min``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise minimum of the numbers in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="y" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Min``1(System.ReadOnlySpan{``0})">
      <summary>Searches for the smallest number in the specified tensor.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">Length of <paramref name="x" /> must be greater than zero.</exception>
      <returns>The minimum element in <paramref name="x" />.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.MinMagnitude(System.ReadOnlySpan{System.Single},System.ReadOnlySpan{System.Single},System.Span{System.Single})">
      <summary>Computes the element-wise single-precision floating-point number with the smallest magnitude in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="y" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.MinMagnitude(System.ReadOnlySpan{System.Single})">
      <summary>Searches for the single-precision floating-point number with the smallest magnitude in the specified tensor.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <exception cref="T:System.ArgumentException">Length of <paramref name="x" /> must be greater than zero.</exception>
      <returns>The element in <paramref name="x" /> with the smallest magnitude (absolute value).</returns>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.MinMagnitude``1(System.ReadOnlySpan{``0},``0,System.Span{``0})">
      <summary>Computes the element-wise number with the smallest magnitude in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a scalar.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.MinMagnitude``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise number with the smallest magnitude in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="y" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.MinMagnitude``1(System.ReadOnlySpan{``0})">
      <summary>Searches for the number with the smallest magnitude in the specified tensor.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">Length of <paramref name="x" /> must be greater than zero.</exception>
      <returns>The element in <paramref name="x" /> with the smallest magnitude (absolute value).</returns>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.MinMagnitudeNumber``1(System.ReadOnlySpan{``0},``0,System.Span{``0})">
      <summary>Computes the element-wise number with the smallest magnitude in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a scalar.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.MinMagnitudeNumber``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise number with the smallest magnitude in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="y" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.MinMagnitudeNumber``1(System.ReadOnlySpan{``0})">
      <summary>Searches for the number with the smallest magnitude in the specified tensor.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">Length of <paramref name="x" /> must be greater than zero.</exception>
      <returns>The element in <paramref name="x" /> with the smallest magnitude (absolute value).</returns>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.MinNumber``1(System.ReadOnlySpan{``0},``0,System.Span{``0})">
      <summary>Computes the element-wise maximum of the numbers in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a scalar.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.MinNumber``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise maximum of the numbers in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="y" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.MinNumber``1(System.ReadOnlySpan{``0})">
      <summary>Searches for the largest number in the specified tensor.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">Length of <paramref name="x" /> must be greater than zero.</exception>
      <returns>The maximum element in <paramref name="x" />.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Multiply(System.ReadOnlySpan{System.Single},System.ReadOnlySpan{System.Single},System.Span{System.Single})">
      <summary>Computes the element-wise product of single-precision floating-point numbers in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="y" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Multiply(System.ReadOnlySpan{System.Single},System.Single,System.Span{System.Single})">
      <summary>Computes the element-wise product of single-precision floating-point numbers in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a scalar.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Multiply``1(System.ReadOnlySpan{``0},``0,System.Span{``0})">
      <summary>Computes the element-wise product of numbers in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a scalar.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Multiply``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise product of numbers in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="y" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.MultiplyAdd(System.ReadOnlySpan{System.Single},System.ReadOnlySpan{System.Single},System.ReadOnlySpan{System.Single},System.Span{System.Single})">
      <summary>Computes the element-wise result of <c>(<paramref name="x" /> * <paramref name="y" />) + <paramref name="addend" /></c> for the specified tensors of single-precision floating-point numbers.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <param name="addend">The third tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="addend" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.MultiplyAdd(System.ReadOnlySpan{System.Single},System.ReadOnlySpan{System.Single},System.Single,System.Span{System.Single})">
      <summary>Computes the element-wise result of <c>(<paramref name="x" /> * <paramref name="y" />) + <paramref name="addend" /></c> for the specified tensors of single-precision floating-point numbers.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <param name="addend">The third tensor, represented as a scalar.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="y" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.MultiplyAdd(System.ReadOnlySpan{System.Single},System.Single,System.ReadOnlySpan{System.Single},System.Span{System.Single})">
      <summary>Computes the element-wise result of <c>(<paramref name="x" /> * <paramref name="y" />) + <paramref name="addend" /></c> for the specified tensors of single-precision floating-point numbers.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a scalar.</param>
      <param name="addend">The third tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="addend" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.MultiplyAdd``1(System.ReadOnlySpan{``0},``0,System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise result of <c>(<paramref name="x" /> * <paramref name="y" />) + <paramref name="addend" /></c> for the specified tensors of numbers.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a scalar.</param>
      <param name="addend">The third tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="addend" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.MultiplyAdd``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},``0,System.Span{``0})">
      <summary>Computes the element-wise result of <c>(<paramref name="x" /> * <paramref name="y" />) + <paramref name="addend" /></c> for the specified tensors of numbers.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <param name="addend">The third tensor, represented as a scalar.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="y" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.MultiplyAdd``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise result of <c>(<paramref name="x" /> * <paramref name="y" />) + <paramref name="addend" /></c> for the specified tensors of numbers.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <param name="addend">The third tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="addend" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.MultiplyAddEstimate``1(System.ReadOnlySpan{``0},``0,System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise result of <c>(<paramref name="x" /> * <paramref name="y" />) + <paramref name="addend" /></c> for the specified tensors of numbers.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a scalar.</param>
      <param name="addend">The third tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="addend" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.MultiplyAddEstimate``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},``0,System.Span{``0})">
      <summary>Computes the element-wise result of <c>(<paramref name="x" /> * <paramref name="y" />) + <paramref name="addend" /></c> for the specified tensors of numbers.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <param name="addend">The third tensor, represented as a scalar.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="y" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.MultiplyAddEstimate``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise result of <c>(<paramref name="x" /> * <paramref name="y" />) + <paramref name="addend" /></c> for the specified tensors of numbers.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <param name="addend">The third tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="addend" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Negate(System.ReadOnlySpan{System.Single},System.Span{System.Single})">
      <summary>Computes the element-wise negation of each single-precision floating-point number in the specified tensor.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Negate``1(System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise negation of each number in the specified tensor.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Norm(System.ReadOnlySpan{System.Single})">
      <summary>Computes the Euclidean norm of the specified tensor of single-precision floating-point numbers.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <returns>The norm.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Norm``1(System.ReadOnlySpan{``0})">
      <summary>Computes the Euclidean norm of the specified tensor of numbers.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <typeparam name="T" />
      <returns>The norm.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.OnesComplement``1(System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise one's complement of numbers in the specified tensor.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.PopCount``1(System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise population count of numbers in the specified tensor.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.PopCount``1(System.ReadOnlySpan{``0})">
      <summary>Computes the population count of all elements in the specified tensor.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <typeparam name="T" />
      <returns>The sum of the number of bits set in each element in <paramref name="x" />.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Pow``1(``0,System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise power of a number in a specified tensor raised to a number in another specified tensors.</summary>
      <param name="x">The first tensor, represented as a scalar.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="y" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Pow``1(System.ReadOnlySpan{``0},``0,System.Span{``0})">
      <summary>Computes the element-wise power of a number in a specified tensor raised to a number in another specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a scalar.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Pow``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise power of a number in a specified tensor raised to a number in another specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="y" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Product(System.ReadOnlySpan{System.Single})">
      <summary>Computes the product of all elements in the specified non-empty tensor of single-precision floating-point numbers.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <exception cref="T:System.ArgumentException">Length of <paramref name="x" /> must be greater than zero.</exception>
      <returns>The result of multiplying all elements in <paramref name="x" />.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Product``1(System.ReadOnlySpan{``0})">
      <summary>Computes the product of all elements in the specified non-empty tensor of numbers.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">Length of <paramref name="x" /> must be greater than zero.</exception>
      <returns>The result of multiplying all elements in <paramref name="x" />.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.ProductOfDifferences(System.ReadOnlySpan{System.Single},System.ReadOnlySpan{System.Single})">
      <summary>Computes the product of the element-wise differences of the single-precision floating-point numbers in the specified non-empty tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="y" /> must have the same length.</exception>
      <returns>The result of multiplying the element-wise subtraction of the elements in the second tensor from the first tensor.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.ProductOfDifferences``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary>Computes the product of the element-wise differences of the numbers in the specified non-empty tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="y" /> must have the same length.</exception>
      <returns>The result of multiplying the element-wise subtraction of the elements in the second tensor from the first tensor.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.ProductOfSums(System.ReadOnlySpan{System.Single},System.ReadOnlySpan{System.Single})">
      <summary>Computes the product of the element-wise sums of the single-precision floating-point numbers in the specified non-empty tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="y" /> must have the same length.</exception>
      <returns>The result of multiplying the element-wise additions of the elements in each tensor.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.ProductOfSums``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary>Computes the product of the element-wise sums of the numbers in the specified non-empty tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="y" /> must have the same length.</exception>
      <returns>The result of multiplying the element-wise additions of the elements in each tensor.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.RadiansToDegrees``1(System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise conversion of each number of radians in the specified tensor to degrees.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Reciprocal``1(System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise reciprocal of numbers in the specified tensor.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
      <exception cref="T:System.DivideByZeroException">
        <typeparamref name="T" /> is an integer type and an element in <paramref name="x" /> is equal to zero.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.ReciprocalEstimate``1(System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise reciprocal of numbers in the specified tensor.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
      <exception cref="T:System.DivideByZeroException">
        <typeparamref name="T" /> is an integer type and an element in <paramref name="x" /> is equal to zero.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.ReciprocalSqrt``1(System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise reciprocal of the square root of numbers in the specified tensor.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
      <exception cref="T:System.DivideByZeroException">
        <typeparamref name="T" /> is an integer type and an element in <paramref name="x" /> is equal to zero.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.ReciprocalSqrtEstimate``1(System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise reciprocal of the square root of numbers in the specified tensor.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
      <exception cref="T:System.DivideByZeroException">
        <typeparamref name="T" /> is an integer type and an element in <paramref name="x" /> is equal to zero.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.RootN``1(System.ReadOnlySpan{``0},System.Int32,System.Span{``0})">
      <summary>Computes the element-wise n-th root of the values in the specified tensor.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <param name="n">The degree of the root to be computed, represented as a scalar.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.RotateLeft``1(System.ReadOnlySpan{``0},System.Int32,System.Span{``0})">
      <summary>Computes the element-wise rotation left of numbers in the specified tensor by the specified rotation amount.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <param name="rotateAmount">The number of bits to rotate, represented as a scalar.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.RotateRight``1(System.ReadOnlySpan{``0},System.Int32,System.Span{``0})">
      <summary>Computes the element-wise rotation right of numbers in the specified tensor by the specified rotation amount.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <param name="rotateAmount">The number of bits to rotate, represented as a scalar.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Round``1(System.ReadOnlySpan{``0},System.Int32,System.MidpointRounding,System.Span{``0})">
      <summary>Computes the element-wise rounding of the numbers in the specified tensor</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="digits">The number of fractional digits to which the numbers in <paramref name="x" /> should be rounded.</param>
      <param name="mode">The mode under which <paramref name="x" /> should be rounded.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" /> is invalid.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="digits" /> is invalid.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Round``1(System.ReadOnlySpan{``0},System.Int32,System.Span{``0})">
      <summary>Computes the element-wise rounding of the numbers in the specified tensor</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="digits">The number of fractional digits to which the numbers in <paramref name="x" /> should be rounded.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Round``1(System.ReadOnlySpan{``0},System.MidpointRounding,System.Span{``0})">
      <summary>Computes the element-wise rounding of the numbers in the specified tensor</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="mode">The mode under which <paramref name="x" /> should be rounded.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Round``1(System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise rounding of the numbers in the specified tensor</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.ScaleB``1(System.ReadOnlySpan{``0},System.Int32,System.Span{``0})">
      <summary>Computes the element-wise product of numbers in the specified tensor and their base-radix raised to the specified power.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="n">The value to which base-radix is raised before multipliying x, represented as a scalar.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.ShiftLeft``1(System.ReadOnlySpan{``0},System.Int32,System.Span{``0})">
      <summary>Computes the element-wise shifting left of numbers in the specified tensor by the specified shift amount.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <param name="shiftAmount">The number of bits to shift, represented as a scalar.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.ShiftRightArithmetic``1(System.ReadOnlySpan{``0},System.Int32,System.Span{``0})">
      <summary>Computes the element-wise arithmetic (signed) shifting right of numbers in the specified tensor by the specified shift amount.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <param name="shiftAmount">The number of bits to shift, represented as a scalar.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.ShiftRightLogical``1(System.ReadOnlySpan{``0},System.Int32,System.Span{``0})">
      <summary>Computes the element-wise logical (unsigned) shifting right of numbers in the specified tensor by the specified shift amount.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <param name="shiftAmount">The number of bits to shift, represented as a scalar.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Sigmoid(System.ReadOnlySpan{System.Single},System.Span{System.Single})">
      <summary>Computes the element-wise sigmoid function on the specified non-empty tensor of single-precision floating-point numbers.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="destination">The destination tensor.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Sigmoid``1(System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise sigmoid function on the specified non-empty tensor of numbers.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="destination">The destination tensor.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Sin``1(System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise sine of the value in the specified tensor.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.SinCos``1(System.ReadOnlySpan{``0},System.Span{``0},System.Span{``0})">
      <summary>Computes the element-wise sine and cosine of the value in the specified tensor.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="sinDestination">The destination tensor for the element-wise sine result, represented as a span.</param>
      <param name="cosDestination">The destination tensor for the element-wise cosine result, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="sinDestination" /> or <paramref name="cosDestination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.SinCosPi``1(System.ReadOnlySpan{``0},System.Span{``0},System.Span{``0})">
      <summary>Computes the element-wise sine and cosine of the value in the specified tensor that has been multiplied by Pi.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="sinPiDestination">The destination tensor for the element-wise sine result, represented as a span.</param>
      <param name="cosPiDestination">The destination tensor for the element-wise cosine result, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="sinPiDestination" /> or <paramref name="cosPiDestination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Sinh(System.ReadOnlySpan{System.Single},System.Span{System.Single})">
      <summary>Computes the element-wise hyperbolic sine of each single-precision floating-point radian angle in the specified tensor.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Sinh``1(System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise hyperbolic sine of each radian angle in the specified tensor.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.SinPi``1(System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise sine of the value in the specified tensor that has been multiplied by Pi.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.SoftMax(System.ReadOnlySpan{System.Single},System.Span{System.Single})">
      <summary>Computes the softmax function over the specified non-empty tensor of single-precision floating-point numbers.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="destination">The destination tensor.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.SoftMax``1(System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the softmax function over the specified non-empty tensor of numbers.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="destination">The destination tensor.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Sqrt``1(System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise square root of numbers in the specified tensor.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Subtract(System.ReadOnlySpan{System.Single},System.ReadOnlySpan{System.Single},System.Span{System.Single})">
      <summary>Computes the element-wise difference between single-precision floating-point numbers in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a scalar.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="y" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Subtract(System.ReadOnlySpan{System.Single},System.Single,System.Span{System.Single})">
      <summary>Computes the element-wise difference between single-precision floating-point numbers in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a scalar.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Subtract``1(``0,System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise difference between numbers in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a scalar.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="y" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Subtract``1(System.ReadOnlySpan{``0},``0,System.Span{``0})">
      <summary>Computes the element-wise difference between numbers in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a scalar.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Subtract``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise difference between numbers in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a scalar.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="y" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Sum(System.ReadOnlySpan{System.Single})">
      <summary>Computes the sum of all elements in the specified tensor of single-precision floating-point numbers.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <returns>The result of adding all elements in <paramref name="x" />, or zero if <paramref name="x" /> is empty.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Sum``1(System.ReadOnlySpan{``0})">
      <summary>Computes the sum of all elements in the specified tensor of numbers.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <typeparam name="T" />
      <returns>The result of adding all elements in <paramref name="x" />, or zero if <paramref name="x" /> is empty.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.SumOfMagnitudes(System.ReadOnlySpan{System.Single})">
      <summary>Computes the sum of the absolute values of every element in the specified tensor of single-precision floating-point numbers.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <returns>The result of adding the absolute value of every element in <paramref name="x" />, or zero if <paramref name="x" /> is empty.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.SumOfMagnitudes``1(System.ReadOnlySpan{``0})">
      <summary>Computes the sum of the absolute values of every element in the specified tensor of numbers.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.OverflowException">
        <typeparamref name="T" /> is a signed integer type and <paramref name="x" /> contained a value equal to <typeparamref name="T" />'s minimum value.</exception>
      <returns>The result of adding the absolute value of every element in <paramref name="x" />, or zero if <paramref name="x" /> is empty.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.SumOfSquares(System.ReadOnlySpan{System.Single})">
      <summary>Computes the sum of the square of every element in the specified tensor of single-precision floating-point numbers.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <returns>The result of adding the square of every element in <paramref name="x" />, or zero if <paramref name="x" /> is empty.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.SumOfSquares``1(System.ReadOnlySpan{``0})">
      <summary>Computes the sum of the square of every element in the specified tensor of numbers.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <typeparam name="T" />
      <returns>The result of adding the square of every element in <paramref name="x" />, or zero if <paramref name="x" /> is empty.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Tan``1(System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise tangent of the value in the specified tensor.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Tanh(System.ReadOnlySpan{System.Single},System.Span{System.Single})">
      <summary>Computes the element-wise hyperbolic tangent of each single-precision floating-point radian angle in the specified tensor.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Tanh``1(System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise hyperbolic tangent of each radian angle in the specified tensor.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.TanPi``1(System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise tangent of the value in the specified tensor that has been multiplied by Pi.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.TrailingZeroCount``1(System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise trailing zero count of numbers in the specified tensor.</summary>
      <param name="x">The tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Truncate``1(System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise truncation of numbers in the specified tensor.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Xor``1(System.ReadOnlySpan{``0},``0,System.Span{``0})">
      <summary>Computes the element-wise XOR of numbers in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a scalar.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorPrimitives.Xor``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},System.Span{``0})">
      <summary>Computes the element-wise XOR of numbers in the specified tensors.</summary>
      <param name="x">The first tensor, represented as a span.</param>
      <param name="y">The second tensor, represented as a span.</param>
      <param name="destination">The destination tensor, represented as a span.</param>
      <typeparam name="T" />
      <exception cref="T:System.ArgumentException">
        <paramref name="y" /> and <paramref name="destination" /> reference overlapping memory locations and do not begin at the same location.</exception>
    </member>
    <member name="T:System.Numerics.Tensors.TensorSpan`1">
      <summary>
            TensorSpan represents a contiguous region of arbitrary memory. Unlike arrays, it can point to either managed
            or native memory, or to memory allocated on the stack. It is type-safe and memory-safe.</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.TensorSpan`1.#ctor(`0[],System.Index,System.ReadOnlySpan{System.IntPtr},System.ReadOnlySpan{System.IntPtr})">
      <summary>
            Creates a new span over the portion of the target array beginning
            at 'start' index and ending at 'end' index (exclusive).</summary>
      <param name="array">The target array.</param>
      <param name="startIndex">The index at which to begin the span.</param>
      <param name="lengths">The lengths of the dimensions. If default is provided its assumed to have 1 dimension with a length equal to the length of the data.</param>
      <param name="strides">The strides of each dimension. If default or span of length 0 is provided then strides will be automatically calculated.</param>
      <exception cref="T:System.ArrayTypeMismatchException">Thrown when <paramref name="array" /> is covariant and array's type is not exactly T[].</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the specified <paramref name="startIndex" /> or end index is not in the range (&lt;0 or &gt;FlattenedLength).</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorSpan`1.#ctor(`0[],System.Int32,System.ReadOnlySpan{System.IntPtr},System.ReadOnlySpan{System.IntPtr})">
      <summary>
            Creates a new span over the portion of the target array beginning
            at 'start' index and ending at 'end' index (exclusive).</summary>
      <param name="array">The target array.</param>
      <param name="start">The index at which to begin the span.</param>
      <param name="lengths">The lengths of the dimensions. If default is provided its assumed to have 1 dimension with a length equal to the length of the data.</param>
      <param name="strides">The strides of each dimension. If default or span of length 0 is provided then strides will be automatically calculated.</param>
      <exception cref="T:System.ArrayTypeMismatchException">Thrown when <paramref name="array" /> is covariant and array's type is not exactly T[].</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the specified <paramref name="start" /> or end index is not in the range (&lt;0 or &gt;FlattenedLength).</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorSpan`1.#ctor(`0[])">
      <summary>
            Creates a new span over the entirety of the target array.</summary>
      <param name="array">The target array.</param>
      <exception cref="T:System.ArrayTypeMismatchException">Thrown when <paramref name="array" /> is covariant and array's type is not exactly T[].</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorSpan`1.#ctor(`0*,System.IntPtr,System.ReadOnlySpan{System.IntPtr},System.ReadOnlySpan{System.IntPtr})">
      <summary>
            Creates a new span over the target unmanaged buffer.  Clearly this
            is quite dangerous, because the length is not checked.
            But if this creation is correct, then all subsequent uses are correct.</summary>
      <param name="data">An unmanaged data to memory.</param>
      <param name="dataLength">The number of elements the unmanaged memory can hold.</param>
      <param name="lengths">The lengths of the dimensions. If default is provided its assumed to have 1 dimension with a length equal to the length of the data.</param>
      <param name="strides">The lengths of the strides. If nothing is provided it figures out the default stride configuration.</param>
      <exception cref="T:System.ArgumentException">
            Thrown when <typeparamref name="T" /> is reference type or contains pointers and hence cannot be stored in unmanaged memory.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the specified length is negative.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorSpan`1.#ctor(`0*,System.IntPtr)">
      <summary>
            Creates a new span over the target unmanaged buffer.  Clearly this
            is quite dangerous the length is not checked.
            But if this creation is correct, then all subsequent uses are correct.</summary>
      <param name="data">An unmanaged data to memory.</param>
      <param name="dataLength">The number of elements the unmanaged memory can hold.</param>
    </member>
    <member name="M:System.Numerics.Tensors.TensorSpan`1.#ctor(System.Array,System.ReadOnlySpan{System.Buffers.NIndex},System.ReadOnlySpan{System.IntPtr},System.ReadOnlySpan{System.IntPtr})">
      <summary>
            Creates a new <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> over the provided <see cref="T:System.Array" /> using the specified start offsets, lengths, and strides.
            If the strides are not provided, they will be automatically calculated.</summary>
      <param name="array">The target array.</param>
      <param name="startIndex">The starting offset for each dimension.</param>
      <param name="lengths">The lengths of each dimension.</param>
      <param name="strides">The strides for each dimension. Will be automatically calculated if not provided.</param>
    </member>
    <member name="M:System.Numerics.Tensors.TensorSpan`1.#ctor(System.Array,System.ReadOnlySpan{System.Int32},System.ReadOnlySpan{System.IntPtr},System.ReadOnlySpan{System.IntPtr})">
      <summary>
            Creates a new <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> over the provided <see cref="T:System.Array" /> using the specified start offsets, lengths, and strides.
            If the strides are not provided, they will be automatically calculated.</summary>
      <param name="array">The target array.</param>
      <param name="start">The starting offset for each dimension.</param>
      <param name="lengths">The lengths of each dimension.</param>
      <param name="strides">The strides for each dimension. Will be automatically calculated if not provided.</param>
    </member>
    <member name="M:System.Numerics.Tensors.TensorSpan`1.#ctor(System.Array)">
      <summary>
            Creates a new <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> over the provided <see cref="T:System.Array" />. The new <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> will
            have a rank of 1 and a length equal to the length of the provided <see cref="T:System.Array" />.</summary>
      <param name="array">The target array.</param>
    </member>
    <member name="M:System.Numerics.Tensors.TensorSpan`1.#ctor(System.Span{`0},System.ReadOnlySpan{System.IntPtr},System.ReadOnlySpan{System.IntPtr})">
      <summary>
            Creates a new <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> over the provided <see cref="T:System.Span`1" /> using the specified lengths and strides.
            If the strides are not provided, they will be automatically calculated.</summary>
      <param name="span">The target span.</param>
      <param name="lengths">The lengths of each dimension.</param>
      <param name="strides">The strides for each dimension. Will be automatically calculated if not provided.</param>
    </member>
    <member name="M:System.Numerics.Tensors.TensorSpan`1.#ctor(System.Span{`0})">
      <summary>
            Creates a new <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> over the provided <see cref="T:System.Span`1" />. The new <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> will
            have a rank of 1 and a length equal to the length of the provided <see cref="T:System.Span`1" />.</summary>
      <param name="span">The target span.</param>
    </member>
    <member name="M:System.Numerics.Tensors.TensorSpan`1.Clear">
      <summary>
            Clears the contents of this span.</summary>
    </member>
    <member name="M:System.Numerics.Tensors.TensorSpan`1.CopyTo(System.Numerics.Tensors.TensorSpan{`0})">
      <summary>
            Copies the contents of this span into destination span. If the source
            and destinations overlap, this method behaves as if the original values in
            a temporary location before the destination is overwritten.</summary>
      <param name="destination">The span to copy items into.</param>
      <exception cref="T:System.ArgumentException">
            Thrown when the destination TensorSpan is shorter than the source Span.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorSpan`1.Equals(System.Object)">
      <summary>
            This method is not supported as spans cannot be boxed. To compare two spans, use operator==.</summary>
      <param name="obj" />
      <exception cref="T:System.NotSupportedException">
            Always thrown by this method.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorSpan`1.Fill(`0)">
      <summary>
            Fills the contents of this span with the given value.</summary>
      <param name="value" />
    </member>
    <member name="M:System.Numerics.Tensors.TensorSpan`1.FlattenTo(System.Span{`0})">
      <summary>
            Flattens the contents of this span into the provided <see cref="T:System.Span`1" />.</summary>
      <param name="destination">The span to copy items into.</param>
    </member>
    <member name="M:System.Numerics.Tensors.TensorSpan`1.GetEnumerator">
      <summary>Gets an enumerator for this span.</summary>
    </member>
    <member name="M:System.Numerics.Tensors.TensorSpan`1.GetHashCode">
      <summary>
            This method is not supported as spans cannot be boxed.</summary>
      <exception cref="T:System.NotSupportedException">
            Always thrown by this method.</exception>
    </member>
    <member name="M:System.Numerics.Tensors.TensorSpan`1.GetPinnableReference">
      <summary>
            Returns a reference to the 0th element of the TensorSpan. If the TensorSpan is empty, returns null reference.
            It can be used for pinning and is required to support the use of span within a fixed statement.</summary>
    </member>
    <member name="M:System.Numerics.Tensors.TensorSpan`1.op_Equality(System.Numerics.Tensors.TensorSpan{`0},System.Numerics.Tensors.TensorSpan{`0})">
      <summary>
            Returns true if left and right point at the same memory and have the same length.  Note that
            this does not check to see if the contents are equal.</summary>
      <param name="left" />
      <param name="right" />
      <returns>
        <see langword="true" /> if left and right point at the same memory and have the same length. This method does not check to see if the contents are equal.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.TensorSpan`1.op_Implicit(T[])~System.Numerics.Tensors.TensorSpan{`0}">
      <param name="array" />
    </member>
    <member name="M:System.Numerics.Tensors.TensorSpan`1.op_Implicit(System.Numerics.Tensors.TensorSpan{`0})~System.Numerics.Tensors.ReadOnlyTensorSpan{`0}">
      <summary>Converts a <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> to a <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</summary>
      <param name="span" />
    </member>
    <member name="M:System.Numerics.Tensors.TensorSpan`1.op_Inequality(System.Numerics.Tensors.TensorSpan{`0},System.Numerics.Tensors.TensorSpan{`0})">
      <summary>
            Returns false if left and right point at the same memory and have the same length.  Note that
            this does not check to see if the contents are equal.</summary>
      <param name="left" />
      <param name="right" />
      <returns>
        <see langword="false" /> if left and right point at the same memory and have the same length. This method does not check to see if the contents are unequal.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.TensorSpan`1.Slice(System.ReadOnlySpan{System.Buffers.NIndex})">
      <summary>
            Returns a reference to specified element of the TensorSpan.</summary>
      <param name="indexes">The indexes for the slice.</param>
      <exception cref="T:System.IndexOutOfRangeException">
            Thrown when any index is less than 0 or any index is greater than or equal to FlattenedLength</exception>
      <returns />
    </member>
    <member name="M:System.Numerics.Tensors.TensorSpan`1.Slice(System.ReadOnlySpan{System.Buffers.NRange})">
      <summary>
            Forms a slice out of the given span</summary>
      <param name="ranges">The ranges for the slice</param>
      <returns>A <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> based on the provided <paramref name="ranges" /></returns>
    </member>
    <member name="M:System.Numerics.Tensors.TensorSpan`1.ToString">
      <summary>
            For <see cref="T:System.Span`1" />, returns a new instance of string that represents the characters pointed to by the span.
            Otherwise, returns a <see cref="T:System.String" /> with the name of the type and the number of elements.</summary>
    </member>
    <member name="M:System.Numerics.Tensors.TensorSpan`1.TryCopyTo(System.Numerics.Tensors.TensorSpan{`0})">
      <summary>
            Copies the contents of this span into destination span. If the source
            and destinations overlap, this method behaves as if the original values in
            a temporary location before the destination is overwritten.</summary>
      <param name="destination">The span to copy items into.</param>
      <returns>If the destination span is shorter than the source span, this method
            return false and no data is written to the destination.</returns>
    </member>
    <member name="M:System.Numerics.Tensors.TensorSpan`1.TryFlattenTo(System.Span{`0})">
      <summary>
            Flattens the contents of this span into the provided <see cref="T:System.Span`1" />.</summary>
      <param name="destination">The span to copy items into.</param>
    </member>
    <member name="P:System.Numerics.Tensors.TensorSpan`1.Empty">
      <summary>
            Returns an empty <see cref="T:System.Numerics.Tensors.TensorSpan`1" /></summary>
    </member>
    <member name="P:System.Numerics.Tensors.TensorSpan`1.FlattenedLength">
      <summary>
            The number of items in the span.</summary>
    </member>
    <member name="P:System.Numerics.Tensors.TensorSpan`1.IsEmpty">
      <summary>
            Gets a value indicating whether this <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> is empty.</summary>
      <returns>
        <see langword="true" /> if this span is empty; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Numerics.Tensors.TensorSpan`1.Item(System.ReadOnlySpan{System.Buffers.NIndex})">
      <summary>
            Returns a reference to specified element of the TensorSpan.</summary>
      <param name="indexes" />
      <exception cref="T:System.IndexOutOfRangeException">
            Thrown when any index is less than 0 or any index is greater than or equal to FlattenedLength</exception>
    </member>
    <member name="P:System.Numerics.Tensors.TensorSpan`1.Item(System.ReadOnlySpan{System.Buffers.NRange})">
      <summary>
            Returns a slice of the TensorSpan.</summary>
      <param name="ranges" />
      <exception cref="T:System.IndexOutOfRangeException">
            Thrown when any index is less than 0 or any index is greater than or equal to FlattenedLength</exception>
    </member>
    <member name="P:System.Numerics.Tensors.TensorSpan`1.Item(System.ReadOnlySpan{System.IntPtr})">
      <summary>
            Returns a reference to specified element of the TensorSpan.</summary>
      <param name="indexes" />
      <exception cref="T:System.IndexOutOfRangeException">
            Thrown when any index is less than 0 or any index is greater than or equal to FlattenedLength</exception>
    </member>
    <member name="P:System.Numerics.Tensors.TensorSpan`1.Lengths">
      <summary>
            Gets the length of each dimension in this <see cref="T:System.Numerics.Tensors.TensorSpan`1" />.</summary>
    </member>
    <member name="P:System.Numerics.Tensors.TensorSpan`1.Rank">
      <summary>
            Gets the rank, aka the number of dimensions, of this <see cref="T:System.Numerics.Tensors.TensorSpan`1" />.</summary>
    </member>
    <member name="P:System.Numerics.Tensors.TensorSpan`1.Strides">
      <summary>
            Gets the strides of this <see cref="T:System.Numerics.Tensors.TensorSpan`1" /></summary>
    </member>
    <member name="T:System.Numerics.Tensors.TensorSpan`1.Enumerator">
      <summary>Enumerates the elements of a <see cref="T:System.Numerics.Tensors.TensorSpan`1" />.</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Tensors.TensorSpan`1.Enumerator.MoveNext">
      <summary>Advances the enumerator to the next element of the span.</summary>
    </member>
    <member name="P:System.Numerics.Tensors.TensorSpan`1.Enumerator.Current">
      <summary>Gets the element at the current position of the enumerator.</summary>
    </member>
  </members>
</doc>