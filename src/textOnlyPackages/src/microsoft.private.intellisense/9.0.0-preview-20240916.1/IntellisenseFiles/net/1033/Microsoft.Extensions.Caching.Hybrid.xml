<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.Extensions.Caching.Hybrid</name>
  </assembly>
  <members>
    <member name="T:Microsoft.Extensions.Caching.Distributed.IBufferDistributedCache">
      <summary>Represents a distributed cache of serialized values, with support for low allocation data transfer.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Distributed.IBufferDistributedCache.Set(System.String,System.Buffers.ReadOnlySequence{System.Byte},Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions)">
      <summary>Sets or overwrites a cache item.</summary>
      <param name="key">The key of the entry to create.</param>
      <param name="value">The value for this cache entry.</param>
      <param name="options">The cache options for the entry.</param>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Distributed.IBufferDistributedCache.SetAsync(System.String,System.Buffers.ReadOnlySequence{System.Byte},Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions,System.Threading.CancellationToken)">
      <summary>Asynchronously sets or overwrites a cache entry.</summary>
      <param name="key">The key of the entry to create.</param>
      <param name="value">The value for this cache entry.</param>
      <param name="options">The cache options for the value.</param>
      <param name="token">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Distributed.IBufferDistributedCache.TryGet(System.String,System.Buffers.IBufferWriter{System.Byte})">
      <summary>Attempts to retrieve an existing cache item.</summary>
      <param name="key">The unique key for the cache item.</param>
      <param name="destination">The target to write the cache contents on success.</param>
      <returns>
        <see langword="true" /> if the cache item is found, <see langword="false" /> otherwise.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Distributed.IBufferDistributedCache.TryGetAsync(System.String,System.Buffers.IBufferWriter{System.Byte},System.Threading.CancellationToken)">
      <summary>Asynchronously attempts to retrieve an existing cache entry.</summary>
      <param name="key">The unique key for the cache entry.</param>
      <param name="destination">The target to write the cache contents on success.</param>
      <param name="token">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
      <returns>
        <see langword="true" /> if the cache entry is found, <see langword="false" /> otherwise.</returns>
    </member>
    <member name="T:Microsoft.Extensions.Caching.Hybrid.HybridCache">
      <summary>Provides multi-tier caching services building on <see cref="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache" /> backends.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Hybrid.HybridCache.#ctor" />
    <member name="M:Microsoft.Extensions.Caching.Hybrid.HybridCache.GetOrCreateAsync``1(System.String,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``0}},Microsoft.Extensions.Caching.Hybrid.HybridCacheEntryOptions,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
      <param name="key" />
      <param name="factory" />
      <param name="options" />
      <param name="tags" />
      <param name="cancellationToken" />
      <typeparam name="T" />
    </member>
    <member name="M:Microsoft.Extensions.Caching.Hybrid.HybridCache.GetOrCreateAsync``2(System.String,``0,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``1}},Microsoft.Extensions.Caching.Hybrid.HybridCacheEntryOptions,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
      <param name="key" />
      <param name="state" />
      <param name="factory" />
      <param name="options" />
      <param name="tags" />
      <param name="cancellationToken" />
      <typeparam name="TState" />
      <typeparam name="T" />
    </member>
    <member name="M:Microsoft.Extensions.Caching.Hybrid.HybridCache.RemoveAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
      <summary>Asynchronously removes the value associated with the key if it exists.</summary>
      <param name="keys" />
      <param name="cancellationToken" />
    </member>
    <member name="M:Microsoft.Extensions.Caching.Hybrid.HybridCache.RemoveAsync(System.String,System.Threading.CancellationToken)">
      <summary>Asynchronously removes the value associated with the key if it exists.</summary>
      <param name="key" />
      <param name="cancellationToken" />
    </member>
    <member name="M:Microsoft.Extensions.Caching.Hybrid.HybridCache.RemoveByTagAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
      <summary>Asynchronously removes all values associated with the specified tags.</summary>
      <param name="tags" />
      <param name="cancellationToken" />
    </member>
    <member name="M:Microsoft.Extensions.Caching.Hybrid.HybridCache.RemoveByTagAsync(System.String,System.Threading.CancellationToken)">
      <summary>Asynchronously removes all values associated with the specified tag.</summary>
      <param name="tag" />
      <param name="cancellationToken" />
    </member>
    <member name="M:Microsoft.Extensions.Caching.Hybrid.HybridCache.SetAsync``1(System.String,``0,Microsoft.Extensions.Caching.Hybrid.HybridCacheEntryOptions,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
      <param name="key" />
      <param name="value" />
      <param name="options" />
      <param name="tags" />
      <param name="cancellationToken" />
      <typeparam name="T" />
    </member>
    <member name="T:Microsoft.Extensions.Caching.Hybrid.HybridCacheEntryFlags">
      <summary>Specifies additional flags that apply to a <see cref="T:Microsoft.Extensions.Caching.Hybrid.HybridCache" /> operation.</summary>
    </member>
    <member name="F:Microsoft.Extensions.Caching.Hybrid.HybridCacheEntryFlags.DisableCompression">
      <summary>Disables compression for this payload.</summary>
    </member>
    <member name="F:Microsoft.Extensions.Caching.Hybrid.HybridCacheEntryFlags.DisableDistributedCache">
      <summary>Disables both reading from and writing to the secondary distributed cache.</summary>
    </member>
    <member name="F:Microsoft.Extensions.Caching.Hybrid.HybridCacheEntryFlags.DisableDistributedCacheRead">
      <summary>Disables reading from the secondary distributed cache.</summary>
    </member>
    <member name="F:Microsoft.Extensions.Caching.Hybrid.HybridCacheEntryFlags.DisableDistributedCacheWrite">
      <summary>Disables writing to the secondary distributed cache.</summary>
    </member>
    <member name="F:Microsoft.Extensions.Caching.Hybrid.HybridCacheEntryFlags.DisableLocalCache">
      <summary>Disables both reading from and writing to the local in-process cache.</summary>
    </member>
    <member name="F:Microsoft.Extensions.Caching.Hybrid.HybridCacheEntryFlags.DisableLocalCacheRead">
      <summary>Disables reading from the local in-process cache.</summary>
    </member>
    <member name="F:Microsoft.Extensions.Caching.Hybrid.HybridCacheEntryFlags.DisableLocalCacheWrite">
      <summary>Disables writing to the local in-process cache.</summary>
    </member>
    <member name="F:Microsoft.Extensions.Caching.Hybrid.HybridCacheEntryFlags.DisableUnderlyingData">
      <summary>Only fetches the value from cache; does not attempt to access the underlying data store.</summary>
    </member>
    <member name="F:Microsoft.Extensions.Caching.Hybrid.HybridCacheEntryFlags.None">
      <summary>No additional flags.</summary>
    </member>
    <member name="T:Microsoft.Extensions.Caching.Hybrid.HybridCacheEntryOptions">
      <summary>
        <para>Specifies dditional options, such as expiration, that apply to a <see cref="T:Microsoft.Extensions.Caching.Hybrid.HybridCache" /> operation. When options</para>
        <para>can be specified at multiple levels (for example, globally and per-call), the values are composed; the</para>
        <para>most granular non-<see langword="null" /> value is used, with <see langword="null" /> values being inherited. If no value is specified at</para>
        <para>any level, the implementation can choose a reasonable default.</para>
      </summary>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Hybrid.HybridCacheEntryOptions.#ctor" />
    <member name="P:Microsoft.Extensions.Caching.Hybrid.HybridCacheEntryOptions.Expiration">
      <summary>Gets or sets the overall cache duration of this entry, passed to the backend distributed cache.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Caching.Hybrid.HybridCacheEntryOptions.Flags">
      <summary>Gets or sets additional flags that apply to the requested operation.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Caching.Hybrid.HybridCacheEntryOptions.LocalCacheExpiration" />
    <member name="T:Microsoft.Extensions.Caching.Hybrid.HybridCacheOptions" />
    <member name="M:Microsoft.Extensions.Caching.Hybrid.HybridCacheOptions.#ctor" />
    <member name="P:Microsoft.Extensions.Caching.Hybrid.HybridCacheOptions.DefaultEntryOptions" />
    <member name="P:Microsoft.Extensions.Caching.Hybrid.HybridCacheOptions.DisableCompression" />
    <member name="P:Microsoft.Extensions.Caching.Hybrid.HybridCacheOptions.MaximumKeyLength" />
    <member name="P:Microsoft.Extensions.Caching.Hybrid.HybridCacheOptions.MaximumPayloadBytes" />
    <member name="P:Microsoft.Extensions.Caching.Hybrid.HybridCacheOptions.ReportTagMetrics" />
    <member name="T:Microsoft.Extensions.Caching.Hybrid.IHybridCacheBuilder" />
    <member name="P:Microsoft.Extensions.Caching.Hybrid.IHybridCacheBuilder.Services" />
    <member name="T:Microsoft.Extensions.Caching.Hybrid.IHybridCacheSerializer`1">
      <summary>Provides per-type serialization and deserialization support for <see cref="T:Microsoft.Extensions.Caching.Hybrid.HybridCache" />.</summary>
      <typeparam name="T">The type being serialized/deserialized.</typeparam>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Hybrid.IHybridCacheSerializer`1.Deserialize(System.Buffers.ReadOnlySequence{System.Byte})">
      <summary>Deserializes a <typeparamref name="T" /> value from the provided <paramref name="source" />.</summary>
      <param name="source" />
    </member>
    <member name="M:Microsoft.Extensions.Caching.Hybrid.IHybridCacheSerializer`1.Serialize(`0,System.Buffers.IBufferWriter{System.Byte})">
      <summary>Serializes <paramref name="value" /> to the provided <paramref name="target" />.</summary>
      <param name="value" />
      <param name="target" />
    </member>
    <member name="T:Microsoft.Extensions.Caching.Hybrid.IHybridCacheSerializerFactory">
      <summary>Factory provider for per-type <see cref="T:Microsoft.Extensions.Caching.Hybrid.IHybridCacheSerializer`1" /> instances.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Hybrid.IHybridCacheSerializerFactory.TryCreateSerializer``1(Microsoft.Extensions.Caching.Hybrid.IHybridCacheSerializer{``0}@)">
      <summary>Requests a serializer for the provided type, if possible.</summary>
      <param name="serializer">The serializer.</param>
      <typeparam name="T">The type being serialized/deserialized.</typeparam>
      <returns>
        <see langword="true" /> if the factory supports this type, <see langword="false" /> otherwise.</returns>
    </member>
    <member name="T:Microsoft.Extensions.DependencyInjection.HybridCacheBuilderExtensions" />
    <member name="M:Microsoft.Extensions.DependencyInjection.HybridCacheBuilderExtensions.AddSerializer``1(Microsoft.Extensions.Caching.Hybrid.IHybridCacheBuilder,Microsoft.Extensions.Caching.Hybrid.IHybridCacheSerializer{``0})">
      <param name="builder" />
      <param name="serializer" />
      <typeparam name="T" />
    </member>
    <member name="M:Microsoft.Extensions.DependencyInjection.HybridCacheBuilderExtensions.AddSerializer``2(Microsoft.Extensions.Caching.Hybrid.IHybridCacheBuilder)">
      <param name="builder" />
      <typeparam name="T" />
      <typeparam name="TImplementation" />
    </member>
    <member name="M:Microsoft.Extensions.DependencyInjection.HybridCacheBuilderExtensions.AddSerializerFactory(Microsoft.Extensions.Caching.Hybrid.IHybridCacheBuilder,Microsoft.Extensions.Caching.Hybrid.IHybridCacheSerializerFactory)">
      <param name="builder" />
      <param name="factory" />
    </member>
    <member name="M:Microsoft.Extensions.DependencyInjection.HybridCacheBuilderExtensions.AddSerializerFactory``1(Microsoft.Extensions.Caching.Hybrid.IHybridCacheBuilder)">
      <param name="builder" />
      <typeparam name="TImplementation" />
    </member>
    <member name="T:Microsoft.Extensions.DependencyInjection.HybridCacheServiceExtensions" />
    <member name="M:Microsoft.Extensions.DependencyInjection.HybridCacheServiceExtensions.AddHybridCache(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Extensions.Caching.Hybrid.HybridCacheOptions})">
      <param name="services" />
      <param name="setupAction" />
    </member>
    <member name="M:Microsoft.Extensions.DependencyInjection.HybridCacheServiceExtensions.AddHybridCache(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
      <param name="services" />
    </member>
  </members>
</doc>