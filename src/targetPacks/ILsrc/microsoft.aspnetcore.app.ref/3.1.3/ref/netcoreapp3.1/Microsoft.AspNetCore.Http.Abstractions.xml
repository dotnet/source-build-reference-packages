<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.AspNetCore.Http.Abstractions</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Extensions.Internal.ActivatorUtilities">
            <summary>
            Helper code for the various activator services.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Internal.ActivatorUtilities.CreateInstance(System.IServiceProvider,System.Type,System.Object[])">
            <summary>
            Instantiate a type with constructor arguments provided directly and/or from an <see cref="T:System.IServiceProvider"/>.
            </summary>
            <param name="provider">The service provider used to resolve dependencies</param>
            <param name="instanceType">The type to activate</param>
            <param name="parameters">Constructor arguments not provided by the <paramref name="provider"/>.</param>
            <returns>An activated object of type instanceType</returns>
        </member>
        <member name="M:Microsoft.Extensions.Internal.ActivatorUtilities.CreateFactory(System.Type,System.Type[])">
            <summary>
            Create a delegate that will instantiate a type with constructor arguments provided directly
            and/or from an <see cref="T:System.IServiceProvider"/>.
            </summary>
            <param name="instanceType">The type to activate</param>
            <param name="argumentTypes">
            The types of objects, in order, that will be passed to the returned function as its second parameter
            </param>
            <returns>
            A factory that will instantiate instanceType using an <see cref="T:System.IServiceProvider"/>
            and an argument array containing objects matching the types defined in argumentTypes
            </returns>
        </member>
        <member name="M:Microsoft.Extensions.Internal.ActivatorUtilities.CreateInstance``1(System.IServiceProvider,System.Object[])">
            <summary>
            Instantiate a type with constructor arguments provided directly and/or from an <see cref="T:System.IServiceProvider"/>.
            </summary>
            <typeparam name="T">The type to activate</typeparam>
            <param name="provider">The service provider used to resolve dependencies</param>
            <param name="parameters">Constructor arguments not provided by the <paramref name="provider"/>.</param>
            <returns>An activated object of type T</returns>
        </member>
        <member name="M:Microsoft.Extensions.Internal.ActivatorUtilities.GetServiceOrCreateInstance``1(System.IServiceProvider)">
            <summary>
            Retrieve an instance of the given type from the service provider. If one is not found then instantiate it directly.
            </summary>
            <typeparam name="T">The type of the service</typeparam>
            <param name="provider">The service provider used to resolve dependencies</param>
            <returns>The resolved service or created instance</returns>
        </member>
        <member name="M:Microsoft.Extensions.Internal.ActivatorUtilities.GetServiceOrCreateInstance(System.IServiceProvider,System.Type)">
            <summary>
            Retrieve an instance of the given type from the service provider. If one is not found then instantiate it directly.
            </summary>
            <param name="provider">The service provider</param>
            <param name="type">The type of the service</param>
            <returns>The resolved service or created instance</returns>
        </member>
        <member name="T:Microsoft.Extensions.Internal.ActivatorUtilitiesConstructorAttribute">
            <summary>
            Marks the constructor to be used when activating type using <see cref="T:Microsoft.Extensions.Internal.ActivatorUtilities"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.Internal.ObjectFactory">
            <summary>
            The result of <see cref="M:Microsoft.Extensions.Internal.ActivatorUtilities.CreateFactory(System.Type,System.Type[])"/>.
            </summary>
            <param name="serviceProvider">The <see cref="T:System.IServiceProvider"/> to get service arguments from.</param>
            <param name="arguments">Additional constructor arguments.</param>
            <returns>The instantiated type.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Internal.PropertyHelper.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Initializes a fast <see cref="T:Microsoft.Extensions.Internal.PropertyHelper"/>.
            This constructor does not cache the helper. For caching, use <see cref="M:Microsoft.Extensions.Internal.PropertyHelper.GetProperties(System.Type)"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Internal.PropertyHelper.Property">
            <summary>
            Gets the backing <see cref="T:System.Reflection.PropertyInfo"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Internal.PropertyHelper.Name">
            <summary>
            Gets (or sets in derived types) the property name.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Internal.PropertyHelper.ValueGetter">
            <summary>
            Gets the property value getter.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Internal.PropertyHelper.ValueSetter">
            <summary>
            Gets the property value setter.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Internal.PropertyHelper.GetValue(System.Object)">
            <summary>
            Returns the property value for the specified <paramref name="instance"/>.
            </summary>
            <param name="instance">The object whose property value will be returned.</param>
            <returns>The property value.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Internal.PropertyHelper.SetValue(System.Object,System.Object)">
            <summary>
            Sets the property value for the specified <paramref name="instance" />.
            </summary>
            <param name="instance">The object whose property value will be set.</param>
            <param name="value">The property value.</param>
        </member>
        <member name="M:Microsoft.Extensions.Internal.PropertyHelper.GetProperties(System.Reflection.TypeInfo)">
            <summary>
            Creates and caches fast property helpers that expose getters for every public get property on the
            underlying type.
            </summary>
            <param name="typeInfo">The type info to extract property accessors for.</param>
            <returns>A cached array of all public properties of the specified type.
            </returns>
        </member>
        <member name="M:Microsoft.Extensions.Internal.PropertyHelper.GetProperties(System.Type)">
            <summary>
            Creates and caches fast property helpers that expose getters for every public get property on the
            specified type.
            </summary>
            <param name="type">The type to extract property accessors for.</param>
            <returns>A cached array of all public properties of the specified type.
            </returns>
        </member>
        <member name="M:Microsoft.Extensions.Internal.PropertyHelper.GetVisibleProperties(System.Reflection.TypeInfo)">
            <summary>
            <para>
            Creates and caches fast property helpers that expose getters for every non-hidden get property
            on the specified type.
            </para>
            <para>
            <see cref="M:GetVisibleProperties"/> excludes properties defined on base types that have been
            hidden by definitions using the <c>new</c> keyword.
            </para>
            </summary>
            <param name="typeInfo">The type info to extract property accessors for.</param>
            <returns>
            A cached array of all public properties of the specified type.
            </returns>
        </member>
        <member name="M:Microsoft.Extensions.Internal.PropertyHelper.GetVisibleProperties(System.Type)">
            <summary>
            <para>
            Creates and caches fast property helpers that expose getters for every non-hidden get property
            on the specified type.
            </para>
            <para>
            <see cref="M:GetVisibleProperties"/> excludes properties defined on base types that have been
            hidden by definitions using the <c>new</c> keyword.
            </para>
            </summary>
            <param name="type">The type to extract property accessors for.</param>
            <returns>
            A cached array of all public properties of the specified type.
            </returns>
        </member>
        <member name="M:Microsoft.Extensions.Internal.PropertyHelper.MakeFastPropertyGetter(System.Reflection.PropertyInfo)">
            <summary>
            Creates a single fast property getter. The result is not cached.
            </summary>
            <param name="propertyInfo">propertyInfo to extract the getter for.</param>
            <returns>a fast getter.</returns>
            <remarks>
            This method is more memory efficient than a dynamically compiled lambda, and about the
            same speed.
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.Internal.PropertyHelper.MakeNullSafeFastPropertyGetter(System.Reflection.PropertyInfo)">
            <summary>
            Creates a single fast property getter which is safe for a null input object. The result is not cached.
            </summary>
            <param name="propertyInfo">propertyInfo to extract the getter for.</param>
            <returns>a fast getter.</returns>
            <remarks>
            This method is more memory efficient than a dynamically compiled lambda, and about the
            same speed.
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.Internal.PropertyHelper.MakeFastPropertySetter(System.Reflection.PropertyInfo)">
            <summary>
            Creates a single fast property setter for reference types. The result is not cached.
            </summary>
            <param name="propertyInfo">propertyInfo to extract the setter for.</param>
            <returns>a fast getter.</returns>
            <remarks>
            This method is more memory efficient than a dynamically compiled lambda, and about the
            same speed. This only works for reference types.
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.Internal.PropertyHelper.ObjectToDictionary(System.Object)">
             <summary>
             Given an object, adds each instance property with a public get method as a key and its
             associated value to a dictionary.
            
             If the object is already an <see cref="T:System.Collections.Generic.IDictionary`2"/> instance, then a copy
             is returned.
             </summary>
             <remarks>
             The implementation of PropertyHelper will cache the property accessors per-type. This is
             faster when the same type is used multiple times with ObjectToDictionary.
             </remarks>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.ConnectionInfo.Id">
            <summary>
            Gets or sets a unique identifier to represent this connection.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Http.CookieBuilder">
            <summary>
            Defines settings used to create a cookie.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.CookieBuilder.Name">
            <summary>
            The name of the cookie.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.CookieBuilder.Path">
            <summary>
            The cookie path.
            </summary>
            <remarks>
            Determines the value that will set on <seealso cref="P:Microsoft.AspNetCore.Http.CookieOptions.Path"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.CookieBuilder.Domain">
            <summary>
            The domain to associate the cookie with.
            </summary>
            <remarks>
            Determines the value that will set on <seealso cref="P:Microsoft.AspNetCore.Http.CookieOptions.Domain"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.CookieBuilder.HttpOnly">
            <summary>
            Indicates whether a cookie is accessible by client-side script.
            </summary>
            <remarks>
            Determines the value that will set on <seealso cref="P:Microsoft.AspNetCore.Http.CookieOptions.HttpOnly"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.CookieBuilder.SameSite">
            <summary>
            The SameSite attribute of the cookie. The default value is <see cref="F:Microsoft.AspNetCore.Http.SameSiteMode.Unspecified"/>
            </summary>
            <remarks>
            Determines the value that will set on <seealso cref="P:Microsoft.AspNetCore.Http.CookieOptions.SameSite"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.CookieBuilder.SecurePolicy">
            <summary>
            The policy that will be used to determine <seealso cref="P:Microsoft.AspNetCore.Http.CookieOptions.Secure"/>.
            This is determined from the <see cref="T:Microsoft.AspNetCore.Http.HttpContext"/> passed to <see cref="M:Microsoft.AspNetCore.Http.CookieBuilder.Build(Microsoft.AspNetCore.Http.HttpContext,System.DateTimeOffset)"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.CookieBuilder.Expiration">
            <summary>
            Gets or sets the lifespan of a cookie.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.CookieBuilder.MaxAge">
            <summary>
            Gets or sets the max-age for the cookie.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.CookieBuilder.IsEssential">
            <summary>
            Indicates if this cookie is essential for the application to function correctly. If true then
            consent policy checks may be bypassed. The default value is false.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.CookieBuilder.Build(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Creates the cookie options from the given <paramref name="context"/>.
            </summary>
            <param name="context">The <see cref="T:Microsoft.AspNetCore.Http.HttpContext"/>.</param>
            <returns>The cookie options.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.CookieBuilder.Build(Microsoft.AspNetCore.Http.HttpContext,System.DateTimeOffset)">
            <summary>
            Creates the cookie options from the given <paramref name="context"/> with an expiration based on <paramref name="expiresFrom"/> and <see cref="P:Microsoft.AspNetCore.Http.CookieBuilder.Expiration"/>.
            </summary>
            <param name="context">The <see cref="T:Microsoft.AspNetCore.Http.HttpContext"/>.</param>
            <param name="expiresFrom">The time to use as the base for computing <seealso cref="P:Microsoft.AspNetCore.Http.CookieOptions.Expires" />.</param>
            <returns>The cookie options.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Http.CookieSecurePolicy">
            <summary>
            Determines how cookie security properties are set.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Http.CookieSecurePolicy.SameAsRequest">
            <summary>
            If the URI that provides the cookie is HTTPS, then the cookie will only be returned to the server on 
            subsequent HTTPS requests. Otherwise if the URI that provides the cookie is HTTP, then the cookie will 
            be returned to the server on all HTTP and HTTPS requests. This value ensures
            HTTPS for all authenticated requests on deployed servers, and also supports HTTP for localhost development 
            and for servers that do not have HTTPS support.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Http.CookieSecurePolicy.Always">
            <summary>
            Secure is always marked true. Use this value when your login page and all subsequent pages
            requiring the authenticated identity are HTTPS. Local development will also need to be done with HTTPS urls.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Http.CookieSecurePolicy.None">
            <summary>
            Secure is not marked true. Use this value when your login page is HTTPS, but other pages
            on the site which are HTTP also require authentication information. This setting is not recommended because
            the authentication information provided with an HTTP request may be observed and used by other computers
            on your local network or wireless connection.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HeaderDictionaryExtensions.Append(Microsoft.AspNetCore.Http.IHeaderDictionary,System.String,Microsoft.Extensions.Primitives.StringValues)">
            <summary>
            Add new values. Each item remains a separate array entry.
            </summary>
            <param name="headers">The <see cref="T:Microsoft.AspNetCore.Http.IHeaderDictionary"/> to use.</param>
            <param name="key">The header name.</param>
            <param name="value">The header value.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HeaderDictionaryExtensions.AppendCommaSeparatedValues(Microsoft.AspNetCore.Http.IHeaderDictionary,System.String,System.String[])">
            <summary>
            Quotes any values containing commas, and then comma joins all of the values with any existing values.
            </summary>
            <param name="headers">The <see cref="T:Microsoft.AspNetCore.Http.IHeaderDictionary"/> to use.</param>
            <param name="key">The header name.</param>
            <param name="values">The header values.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HeaderDictionaryExtensions.GetCommaSeparatedValues(Microsoft.AspNetCore.Http.IHeaderDictionary,System.String)">
            <summary>
            Get the associated values from the collection separated into individual values.
            Quoted values will not be split, and the quotes will be removed.
            </summary>
            <param name="headers">The <see cref="T:Microsoft.AspNetCore.Http.IHeaderDictionary"/> to use.</param>
            <param name="key">The header name.</param>
            <returns>the associated values from the collection separated into individual values, or StringValues.Empty if the key is not present.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HeaderDictionaryExtensions.SetCommaSeparatedValues(Microsoft.AspNetCore.Http.IHeaderDictionary,System.String,System.String[])">
            <summary>
            Quotes any values containing commas, and then comma joins all of the values.
            </summary>
            <param name="headers">The <see cref="T:Microsoft.AspNetCore.Http.IHeaderDictionary"/> to use.</param>
            <param name="key">The header name.</param>
            <param name="values">The header values.</param>
        </member>
        <member name="T:Microsoft.AspNetCore.Http.HttpResponseWritingExtensions">
            <summary>
            Convenience methods for writing to the response.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpResponseWritingExtensions.WriteAsync(Microsoft.AspNetCore.Http.HttpResponse,System.String,System.Threading.CancellationToken)">
            <summary>
            Writes the given text to the response body. UTF-8 encoding will be used.
            </summary>
            <param name="response">The <see cref="T:Microsoft.AspNetCore.Http.HttpResponse"/>.</param>
            <param name="text">The text to write to the response.</param>
            <param name="cancellationToken">Notifies when request operations should be cancelled.</param>
            <returns>A task that represents the completion of the write operation.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpResponseWritingExtensions.WriteAsync(Microsoft.AspNetCore.Http.HttpResponse,System.String,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Writes the given text to the response body using the given encoding.
            </summary>
            <param name="response">The <see cref="T:Microsoft.AspNetCore.Http.HttpResponse"/>.</param>
            <param name="text">The text to write to the response.</param>
            <param name="encoding">The encoding to use.</param>
            <param name="cancellationToken">Notifies when request operations should be cancelled.</param>
            <returns>A task that represents the completion of the write operation.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Http.RequestTrailerExtensions">
            <summary>
            HttpRequest extensions for working with request trailing headers.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.RequestTrailerExtensions.GetDeclaredTrailers(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            Gets the request "Trailer" header that lists which trailers to expect after the body.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.RequestTrailerExtensions.SupportsTrailers(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            Indicates if the request supports receiving trailer headers.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.RequestTrailerExtensions.CheckTrailersAvailable(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            Checks if the request supports trailers and they are available to be read now.
            This does not mean that there are any trailers to read.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.RequestTrailerExtensions.GetTrailer(Microsoft.AspNetCore.Http.HttpRequest,System.String)">
            <summary>
            Gets the requested trailing header from the response. Check <see cref="M:Microsoft.AspNetCore.Http.RequestTrailerExtensions.SupportsTrailers(Microsoft.AspNetCore.Http.HttpRequest)"/>
            or a NotSupportedException may be thrown.
            Check <see cref="M:Microsoft.AspNetCore.Http.RequestTrailerExtensions.CheckTrailersAvailable(Microsoft.AspNetCore.Http.HttpRequest)" /> or an InvalidOperationException may be thrown.
            </summary>
            <param name="request"></param>
            <param name="trailerName"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.ResponseTrailerExtensions.DeclareTrailer(Microsoft.AspNetCore.Http.HttpResponse,System.String)">
            <summary>
            Adds the given trailer name to the 'Trailer' response header. This must happen before the response headers are sent.
            </summary>
            <param name="response"></param>
            <param name="trailerName"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.ResponseTrailerExtensions.SupportsTrailers(Microsoft.AspNetCore.Http.HttpResponse)">
            <summary>
            Indicates if the server supports sending trailer headers for this response.
            </summary>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.ResponseTrailerExtensions.AppendTrailer(Microsoft.AspNetCore.Http.HttpResponse,System.String,Microsoft.Extensions.Primitives.StringValues)">
            <summary>
            Adds the given trailer header to the trailers collection to be sent at the end of the response body.
            Check <see cref="M:Microsoft.AspNetCore.Http.ResponseTrailerExtensions.SupportsTrailers(Microsoft.AspNetCore.Http.HttpResponse)" /> or an InvalidOperationException may be thrown.
            </summary>
            <param name="response"></param>
            <param name="trailerName"></param>
            <param name="trailerValues"></param>
        </member>
        <member name="T:Microsoft.AspNetCore.Http.FragmentString">
            <summary>
            Provides correct handling for FragmentString value when needed to generate a URI string
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Http.FragmentString.Empty">
            <summary>
            Represents the empty fragment string. This field is read-only.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.FragmentString.#ctor(System.String)">
            <summary>
            Initialize the fragment string with a given value. This value must be in escaped and delimited format with
            a leading '#' character.
            </summary>
            <param name="value">The fragment string to be assigned to the Value property.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.FragmentString.Value">
            <summary>
            The escaped fragment string with the leading '#' character
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.FragmentString.HasValue">
            <summary>
            True if the fragment string is not empty
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.FragmentString.ToString">
            <summary>
            Provides the fragment string escaped in a way which is correct for combining into the URI representation.
            A leading '#' character will be included unless the Value is null or empty. Characters which are potentially
            dangerous are escaped.
            </summary>
            <returns>The fragment string value</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.FragmentString.ToUriComponent">
            <summary>
            Provides the fragment string escaped in a way which is correct for combining into the URI representation.
            A leading '#' character will be included unless the Value is null or empty. Characters which are potentially
            dangerous are escaped.
            </summary>
            <returns>The fragment string value</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.FragmentString.FromUriComponent(System.String)">
            <summary>
            Returns an FragmentString given the fragment as it is escaped in the URI format. The string MUST NOT contain any
            value that is not a fragment.
            </summary>
            <param name="uriComponent">The escaped fragment as it appears in the URI format.</param>
            <returns>The resulting FragmentString</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.FragmentString.FromUriComponent(System.Uri)">
            <summary>
            Returns an FragmentString given the fragment as from a Uri object. Relative Uri objects are not supported.
            </summary>
            <param name="uri">The Uri object</param>
            <returns>The resulting FragmentString</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Http.HostString">
            <summary>
            Represents the host portion of a URI can be used to construct URI's properly formatted and encoded for use in
            HTTP headers.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HostString.#ctor(System.String)">
            <summary>
            Creates a new HostString without modification. The value should be Unicode rather than punycode, and may have a port.
            IPv4 and IPv6 addresses are also allowed, and also may have ports.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HostString.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new HostString from its host and port parts.
            </summary>
            <param name="host">The value should be Unicode rather than punycode. IPv6 addresses must use square braces.</param>
            <param name="port">A positive, greater than 0 value representing the port in the host string.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.HostString.Value">
            <summary>
            Returns the original value from the constructor.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.HostString.Host">
            <summary>
            Returns the value of the host part of the value. The port is removed if it was present.
            IPv6 addresses will have brackets added if they are missing.
            </summary>
            <returns>The host portion of the value.</returns>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.HostString.Port">
            <summary>
            Returns the value of the port part of the host, or <value>null</value> if none is found.
            </summary>
            <returns>The port portion of the value.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HostString.ToString">
            <summary>
            Returns the value as normalized by ToUriComponent().
            </summary>
            <returns>The value as normalized by <see cref="M:Microsoft.AspNetCore.Http.HostString.ToUriComponent"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HostString.ToUriComponent">
            <summary>
            Returns the value properly formatted and encoded for use in a URI in a HTTP header.
            Any Unicode is converted to punycode. IPv6 addresses will have brackets added if they are missing.
            </summary>
            <returns>The <see cref="T:Microsoft.AspNetCore.Http.HostString"/> value formated for use in a URI or HTTP header.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HostString.FromUriComponent(System.String)">
            <summary>
            Creates a new HostString from the given URI component.
            Any punycode will be converted to Unicode.
            </summary>
            <param name="uriComponent">The URI component string to create a <see cref="T:Microsoft.AspNetCore.Http.HostString"/> from.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Http.HostString"/> that was created.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HostString.FromUriComponent(System.Uri)">
            <summary>
            Creates a new HostString from the host and port of the give Uri instance.
            Punycode will be converted to Unicode.
            </summary>
            <param name="uri">The <see cref="T:System.Uri"/> to create a <see cref="T:Microsoft.AspNetCore.Http.HostString"/> from.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Http.HostString"/> that was created.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HostString.MatchesAny(Microsoft.Extensions.Primitives.StringSegment,System.Collections.Generic.IList{Microsoft.Extensions.Primitives.StringSegment})">
            <summary>
            Matches the host portion of a host header value against a list of patterns.
            The host may be the encoded punycode or decoded unicode form so long as the pattern
            uses the same format.
            </summary>
            <param name="value">Host header value with or without a port.</param>
            <param name="patterns">A set of pattern to match, without ports.</param>
            <remarks>
            The port on the given value is ignored. The patterns should not have ports.
            The patterns may be exact matches like "example.com", a top level wildcard "*"
            that matches all hosts, or a subdomain wildcard like "*.example.com" that matches
            "abc.example.com:443" but not "example.com:443".
            Matching is case insensitive.
            </remarks>
            <returns><code>true</code> if <paramref name="value"/> matches any of the patterns.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HostString.Equals(Microsoft.AspNetCore.Http.HostString)">
            <summary>
            Compares the equality of the Value property, ignoring case.
            </summary>
            <param name="other">The <see cref="T:Microsoft.AspNetCore.Http.HostString"/> to compare against.</param>
            <returns><code>true</code> if they have the same value.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HostString.Equals(System.Object)">
            <summary>
            Compares against the given object only if it is a HostString.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare against.</param>
            <returns><code>true</code> if they have the same value.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HostString.GetHashCode">
            <summary>
            Gets a hash code for the value.
            </summary>
            <returns>The hash code as an <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HostString.op_Equality(Microsoft.AspNetCore.Http.HostString,Microsoft.AspNetCore.Http.HostString)">
            <summary>
            Compares the two instances for equality.
            </summary>
            <param name="left">The left parameter.</param>
            <param name="right">The right parameter.</param>
            <returns><code>true</code> if both <see cref="T:Microsoft.AspNetCore.Http.HostString"/>'s have the same value.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HostString.op_Inequality(Microsoft.AspNetCore.Http.HostString,Microsoft.AspNetCore.Http.HostString)">
            <summary>
            Compares the two instances for inequality.
            </summary>
            <param name="left">The left parameter.</param>
            <param name="right">The right parameter.</param>
            <returns><code>true</code> if both <see cref="T:Microsoft.AspNetCore.Http.HostString"/>'s values are not equal.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HostString.GetParts(Microsoft.Extensions.Primitives.StringSegment,Microsoft.Extensions.Primitives.StringSegment@,Microsoft.Extensions.Primitives.StringSegment@)">
            <summary>
            Parses the current value. IPv6 addresses will have brackets added if they are missing.
            </summary>
            <param name="value">The value to get the parts of.</param>
            <param name="host">The portion of the <paramref name="value"/> which represents the host.</param>
            <param name="port">The portion of the <paramref name="value"/> which represents the port.</param>
        </member>
        <member name="T:Microsoft.AspNetCore.Http.HttpContext">
            <summary>
            Encapsulates all HTTP-specific information about an individual HTTP request.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.HttpContext.Features">
            <summary>
            Gets the collection of HTTP features provided by the server and middleware available on this request.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.HttpContext.Request">
            <summary>
            Gets the <see cref="T:Microsoft.AspNetCore.Http.HttpRequest"/> object for this request.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.HttpContext.Response">
            <summary>
            Gets the <see cref="T:Microsoft.AspNetCore.Http.HttpResponse"/> object for this request.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.HttpContext.Connection">
            <summary>
            Gets information about the underlying connection for this request.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.HttpContext.WebSockets">
            <summary>
            Gets an object that manages the establishment of WebSocket connections for this request.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.HttpContext.User">
            <summary>
            Gets or sets the user for this request.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.HttpContext.Items">
            <summary>
            Gets or sets a key/value collection that can be used to share data within the scope of this request.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.HttpContext.RequestServices">
            <summary>
            Gets or sets the <see cref="T:System.IServiceProvider"/> that provides access to the request's service container.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.HttpContext.RequestAborted">
            <summary>
            Notifies when the connection underlying this request is aborted and thus request operations should be
            cancelled.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.HttpContext.TraceIdentifier">
            <summary>
            Gets or sets a unique identifier to represent this request in trace logs.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.HttpContext.Session">
            <summary>
            Gets or sets the object used to manage user session data for this request.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContext.Abort">
            <summary>
            Aborts the connection underlying this request.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Http.HttpRequest">
            <summary>
            Represents the incoming side of an individual HTTP request.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.HttpRequest.HttpContext">
            <summary>
            Gets the <see cref="P:Microsoft.AspNetCore.Http.HttpRequest.HttpContext"/> for this request.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.HttpRequest.Method">
            <summary>
            Gets or sets the HTTP method.
            </summary>
            <returns>The HTTP method.</returns>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.HttpRequest.Scheme">
            <summary>
            Gets or sets the HTTP request scheme.
            </summary>
            <returns>The HTTP request scheme.</returns>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.HttpRequest.IsHttps">
            <summary>
            Returns true if the RequestScheme is https.
            </summary>
            <returns>true if this request is using https; otherwise, false.</returns>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.HttpRequest.Host">
            <summary>
            Gets or sets the Host header. May include the port.
            </summary>
            <return>The Host header.</return>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.HttpRequest.PathBase">
            <summary>
            Gets or sets the RequestPathBase.
            </summary>
            <returns>The RequestPathBase.</returns>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.HttpRequest.Path">
            <summary>
            Gets or sets the request path from RequestPath.
            </summary>
            <returns>The request path from RequestPath.</returns>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.HttpRequest.QueryString">
            <summary>
            Gets or sets the raw query string used to create the query collection in Request.Query.
            </summary>
            <returns>The raw query string.</returns>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.HttpRequest.Query">
            <summary>
            Gets the query value collection parsed from Request.QueryString.
            </summary>
            <returns>The query value collection parsed from Request.QueryString.</returns>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.HttpRequest.Protocol">
            <summary>
            Gets or sets the request protocol (e.g. HTTP/1.1).
            </summary>
            <returns>The request protocol.</returns>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.HttpRequest.Headers">
            <summary>
            Gets the request headers.
            </summary>
            <returns>The request headers.</returns>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.HttpRequest.Cookies">
            <summary>
            Gets the collection of Cookies for this request.
            </summary>
            <returns>The collection of Cookies for this request.</returns>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.HttpRequest.ContentLength">
            <summary>
            Gets or sets the Content-Length header.
            </summary>
            <returns>The value of the Content-Length header, if any.</returns>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.HttpRequest.ContentType">
            <summary>
            Gets or sets the Content-Type header.
            </summary>
            <returns>The Content-Type header.</returns>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.HttpRequest.Body">
            <summary>
            Gets or sets the request body <see cref="T:System.IO.Stream"/>.
            </summary>
            <value>The request body <see cref="T:System.IO.Stream"/>.</value>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.HttpRequest.BodyReader">
            <summary>
            Gets the request body <see cref="T:System.IO.Pipelines.PipeReader"/>.
            </summary>
            <value>The request body <see cref="T:System.IO.Pipelines.PipeReader"/>.</value>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.HttpRequest.HasFormContentType">
            <summary>
            Checks the Content-Type header for form types.
            </summary>
            <returns>true if the Content-Type header represents a form content type; otherwise, false.</returns>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.HttpRequest.Form">
            <summary>
            Gets or sets the request body as a form.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpRequest.ReadFormAsync(System.Threading.CancellationToken)">
            <summary>
            Reads the request body if it is a form.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.HttpRequest.RouteValues">
            <summary>
            Gets the collection of route values for this request.
            </summary>
            <returns>The collection of route values for this request.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Http.HttpResponse">
            <summary>
            Represents the outgoing side of an individual HTTP request.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.HttpResponse.HttpContext">
            <summary>
            Gets the <see cref="P:Microsoft.AspNetCore.Http.HttpResponse.HttpContext"/> for this response.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.HttpResponse.StatusCode">
            <summary>
            Gets or sets the HTTP response code.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.HttpResponse.Headers">
            <summary>
            Gets the response headers.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.HttpResponse.Body">
            <summary>
            Gets or sets the response body <see cref="T:System.IO.Stream"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.HttpResponse.BodyWriter">
            <summary>
            Gets the response body <see cref="T:System.IO.Pipelines.PipeWriter"/>
            </summary>
            <value>The response body <see cref="T:System.IO.Pipelines.PipeWriter"/>.</value>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.HttpResponse.ContentLength">
            <summary>
            Gets or sets the value for the <c>Content-Length</c> response header.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.HttpResponse.ContentType">
            <summary>
            Gets or sets the value for the <c>Content-Type</c> response header.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.HttpResponse.Cookies">
            <summary>
            Gets an object that can be used to manage cookies for this response.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.HttpResponse.HasStarted">
            <summary>
            Gets a value indicating whether response headers have been sent to the client.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpResponse.OnStarting(System.Func{System.Object,System.Threading.Tasks.Task},System.Object)">
            <summary>
            Adds a delegate to be invoked just before response headers will be sent to the client.
            </summary>
            <param name="callback">The delegate to execute.</param>
            <param name="state">A state object to capture and pass back to the delegate.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpResponse.OnStarting(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Adds a delegate to be invoked just before response headers will be sent to the client.
            </summary>
            <param name="callback">The delegate to execute.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpResponse.OnCompleted(System.Func{System.Object,System.Threading.Tasks.Task},System.Object)">
            <summary>
            Adds a delegate to be invoked after the response has finished being sent to the client.
            </summary>
            <param name="callback">The delegate to invoke.</param>
            <param name="state">A state object to capture and pass back to the delegate.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpResponse.RegisterForDispose(System.IDisposable)">
            <summary>
            Registers an object for disposal by the host once the request has finished processing.
            </summary>
            <param name="disposable">The object to be disposed.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpResponse.RegisterForDisposeAsync(System.IAsyncDisposable)">
            <summary>
            Registers an object for asynchronous disposal by the host once the request has finished processing.
            </summary>
            <param name="disposable">The object to be disposed asynchronously.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpResponse.OnCompleted(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Adds a delegate to be invoked after the response has finished being sent to the client.
            </summary>
            <param name="callback">The delegate to invoke.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpResponse.Redirect(System.String)">
            <summary>
            Returns a temporary redirect response (HTTP 302) to the client.
            </summary>
            <param name="location">The URL to redirect the client to. This must be properly encoded for use in http headers
            where only ASCII characters are allowed.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpResponse.Redirect(System.String,System.Boolean)">
            <summary>
            Returns a redirect response (HTTP 301 or HTTP 302) to the client.
            </summary>
            <param name="location">The URL to redirect the client to. This must be properly encoded for use in http headers
            where only ASCII characters are allowed.</param>
            <param name="permanent"><c>True</c> if the redirect is permanent (301), otherwise <c>false</c> (302).</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpResponse.StartAsync(System.Threading.CancellationToken)">
            <summary>
            Starts the response by calling OnStarting() and making headers unmodifiable.
            </summary>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpResponse.CompleteAsync">
            <summary>
            Flush any remaining response headers, data, or trailers.
            This may throw if the response is in an invalid state such as a Content-Length mismatch.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Http.IMiddleware">
            <summary>
            Defines middleware that can be added to the application's request pipeline.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.IMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            Request handling method.
            </summary>
            <param name="context">The <see cref="T:Microsoft.AspNetCore.Http.HttpContext"/> for the current request.</param>
            <param name="next">The delegate representing the remaining middleware in the request pipeline.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the execution of this middleware.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Http.IMiddlewareFactory">
            <summary>
            Provides methods to create middleware.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.IMiddlewareFactory.Create(System.Type)">
            <summary>
            Creates a middleware instance for each request.
            </summary>
            <param name="middlewareType">The concrete <see cref="T:System.Type"/> of the <see cref="T:Microsoft.AspNetCore.Http.IMiddleware"/>.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Http.IMiddleware"/> instance.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.IMiddlewareFactory.Release(Microsoft.AspNetCore.Http.IMiddleware)">
            <summary>
            Releases a <see cref="T:Microsoft.AspNetCore.Http.IMiddleware"/> instance at the end of each request.
            </summary>
            <param name="middleware">The <see cref="T:Microsoft.AspNetCore.Http.IMiddleware"/> instance to release.</param>
        </member>
        <member name="T:Microsoft.AspNetCore.Http.PathString">
            <summary>
            Provides correct escaping for Path and PathBase values when needed to reconstruct a request or redirect URI string
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Http.PathString.Empty">
            <summary>
            Represents the empty path. This field is read-only.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.PathString.#ctor(System.String)">
            <summary>
            Initialize the path string with a given value. This value must be in unescaped format. Use
            PathString.FromUriComponent(value) if you have a path value which is in an escaped format.
            </summary>
            <param name="value">The unescaped path to be assigned to the Value property.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.PathString.Value">
            <summary>
            The unescaped path value
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.PathString.HasValue">
            <summary>
            True if the path is not empty
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.PathString.ToString">
            <summary>
            Provides the path string escaped in a way which is correct for combining into the URI representation.
            </summary>
            <returns>The escaped path value</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.PathString.ToUriComponent">
            <summary>
            Provides the path string escaped in a way which is correct for combining into the URI representation.
            </summary>
            <returns>The escaped path value</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.PathString.FromUriComponent(System.String)">
            <summary>
            Returns an PathString given the path as it is escaped in the URI format. The string MUST NOT contain any
            value that is not a path.
            </summary>
            <param name="uriComponent">The escaped path as it appears in the URI format.</param>
            <returns>The resulting PathString</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.PathString.FromUriComponent(System.Uri)">
            <summary>
            Returns an PathString given the path as from a Uri object. Relative Uri objects are not supported.
            </summary>
            <param name="uri">The Uri object</param>
            <returns>The resulting PathString</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.PathString.StartsWithSegments(Microsoft.AspNetCore.Http.PathString)">
            <summary>
            Determines whether the beginning of this <see cref="T:Microsoft.AspNetCore.Http.PathString"/> instance matches the specified <see cref="T:Microsoft.AspNetCore.Http.PathString"/>.
            </summary>
            <param name="other">The <see cref="T:Microsoft.AspNetCore.Http.PathString"/> to compare.</param>
            <returns>true if value matches the beginning of this string; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.PathString.StartsWithSegments(Microsoft.AspNetCore.Http.PathString,System.StringComparison)">
            <summary>
            Determines whether the beginning of this <see cref="T:Microsoft.AspNetCore.Http.PathString"/> instance matches the specified <see cref="T:Microsoft.AspNetCore.Http.PathString"/> when compared
            using the specified comparison option.
            </summary>
            <param name="other">The <see cref="T:Microsoft.AspNetCore.Http.PathString"/> to compare.</param>
            <param name="comparisonType">One of the enumeration values that determines how this <see cref="T:Microsoft.AspNetCore.Http.PathString"/> and value are compared.</param>
            <returns>true if value matches the beginning of this string; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.PathString.StartsWithSegments(Microsoft.AspNetCore.Http.PathString,Microsoft.AspNetCore.Http.PathString@)">
            <summary>
            Determines whether the beginning of this <see cref="T:Microsoft.AspNetCore.Http.PathString"/> instance matches the specified <see cref="T:Microsoft.AspNetCore.Http.PathString"/> and returns
            the remaining segments.
            </summary>
            <param name="other">The <see cref="T:Microsoft.AspNetCore.Http.PathString"/> to compare.</param>
            <param name="remaining">The remaining segments after the match.</param>
            <returns>true if value matches the beginning of this string; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.PathString.StartsWithSegments(Microsoft.AspNetCore.Http.PathString,System.StringComparison,Microsoft.AspNetCore.Http.PathString@)">
            <summary>
            Determines whether the beginning of this <see cref="T:Microsoft.AspNetCore.Http.PathString"/> instance matches the specified <see cref="T:Microsoft.AspNetCore.Http.PathString"/> when compared
            using the specified comparison option and returns the remaining segments.
            </summary>
            <param name="other">The <see cref="T:Microsoft.AspNetCore.Http.PathString"/> to compare.</param>
            <param name="comparisonType">One of the enumeration values that determines how this <see cref="T:Microsoft.AspNetCore.Http.PathString"/> and value are compared.</param>
            <param name="remaining">The remaining segments after the match.</param>
            <returns>true if value matches the beginning of this string; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.PathString.StartsWithSegments(Microsoft.AspNetCore.Http.PathString,Microsoft.AspNetCore.Http.PathString@,Microsoft.AspNetCore.Http.PathString@)">
            <summary>
            Determines whether the beginning of this <see cref="T:Microsoft.AspNetCore.Http.PathString"/> instance matches the specified <see cref="T:Microsoft.AspNetCore.Http.PathString"/> and returns
            the matched and remaining segments.
            </summary>
            <param name="other">The <see cref="T:Microsoft.AspNetCore.Http.PathString"/> to compare.</param>
            <param name="matched">The matched segments with the original casing in the source value.</param>
            <param name="remaining">The remaining segments after the match.</param>
            <returns>true if value matches the beginning of this string; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.PathString.StartsWithSegments(Microsoft.AspNetCore.Http.PathString,System.StringComparison,Microsoft.AspNetCore.Http.PathString@,Microsoft.AspNetCore.Http.PathString@)">
            <summary>
            Determines whether the beginning of this <see cref="T:Microsoft.AspNetCore.Http.PathString"/> instance matches the specified <see cref="T:Microsoft.AspNetCore.Http.PathString"/> when compared
            using the specified comparison option and returns the matched and remaining segments.
            </summary>
            <param name="other">The <see cref="T:Microsoft.AspNetCore.Http.PathString"/> to compare.</param>
            <param name="comparisonType">One of the enumeration values that determines how this <see cref="T:Microsoft.AspNetCore.Http.PathString"/> and value are compared.</param>
            <param name="matched">The matched segments with the original casing in the source value.</param>
            <param name="remaining">The remaining segments after the match.</param>
            <returns>true if value matches the beginning of this string; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.PathString.Add(Microsoft.AspNetCore.Http.PathString)">
            <summary>
            Adds two PathString instances into a combined PathString value.
            </summary>
            <returns>The combined PathString value</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.PathString.Add(Microsoft.AspNetCore.Http.QueryString)">
            <summary>
            Combines a PathString and QueryString into the joined URI formatted string value.
            </summary>
            <returns>The joined URI formatted string value</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.PathString.Equals(Microsoft.AspNetCore.Http.PathString)">
            <summary>
            Compares this PathString value to another value. The default comparison is StringComparison.OrdinalIgnoreCase.
            </summary>
            <param name="other">The second PathString for comparison.</param>
            <returns>True if both PathString values are equal</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.PathString.Equals(Microsoft.AspNetCore.Http.PathString,System.StringComparison)">
            <summary>
            Compares this PathString value to another value using a specific StringComparison type
            </summary>
            <param name="other">The second PathString for comparison</param>
            <param name="comparisonType">The StringComparison type to use</param>
            <returns>True if both PathString values are equal</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.PathString.Equals(System.Object)">
            <summary>
            Compares this PathString value to another value. The default comparison is StringComparison.OrdinalIgnoreCase.
            </summary>
            <param name="obj">The second PathString for comparison.</param>
            <returns>True if both PathString values are equal</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.PathString.GetHashCode">
            <summary>
            Returns the hash code for the PathString value. The hash code is provided by the OrdinalIgnoreCase implementation.
            </summary>
            <returns>The hash code</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.PathString.op_Equality(Microsoft.AspNetCore.Http.PathString,Microsoft.AspNetCore.Http.PathString)">
            <summary>
            Operator call through to Equals
            </summary>
            <param name="left">The left parameter</param>
            <param name="right">The right parameter</param>
            <returns>True if both PathString values are equal</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.PathString.op_Inequality(Microsoft.AspNetCore.Http.PathString,Microsoft.AspNetCore.Http.PathString)">
            <summary>
            Operator call through to Equals
            </summary>
            <param name="left">The left parameter</param>
            <param name="right">The right parameter</param>
            <returns>True if both PathString values are not equal</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.PathString.op_Addition(System.String,Microsoft.AspNetCore.Http.PathString)">
            <summary>
            </summary>
            <param name="left">The left parameter</param>
            <param name="right">The right parameter</param>
            <returns>The ToString combination of both values</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.PathString.op_Addition(Microsoft.AspNetCore.Http.PathString,System.String)">
            <summary>
            </summary>
            <param name="left">The left parameter</param>
            <param name="right">The right parameter</param>
            <returns>The ToString combination of both values</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.PathString.op_Addition(Microsoft.AspNetCore.Http.PathString,Microsoft.AspNetCore.Http.PathString)">
            <summary>
            Operator call through to Add
            </summary>
            <param name="left">The left parameter</param>
            <param name="right">The right parameter</param>
            <returns>The PathString combination of both values</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.PathString.op_Addition(Microsoft.AspNetCore.Http.PathString,Microsoft.AspNetCore.Http.QueryString)">
            <summary>
            Operator call through to Add
            </summary>
            <param name="left">The left parameter</param>
            <param name="right">The right parameter</param>
            <returns>The PathString combination of both values</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.PathString.op_Implicit(System.String)~Microsoft.AspNetCore.Http.PathString">
            <summary>
            Implicitly creates a new PathString from the given string.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.PathString.op_Implicit(Microsoft.AspNetCore.Http.PathString)~System.String">
            <summary>
            Implicitly calls ToString().
            </summary>
            <param name="path"></param>
        </member>
        <member name="T:Microsoft.AspNetCore.Http.QueryString">
            <summary>
            Provides correct handling for QueryString value when needed to reconstruct a request or redirect URI string
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Http.QueryString.Empty">
            <summary>
            Represents the empty query string. This field is read-only.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.QueryString.#ctor(System.String)">
            <summary>
            Initialize the query string with a given value. This value must be in escaped and delimited format with
            a leading '?' character. 
            </summary>
            <param name="value">The query string to be assigned to the Value property.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.QueryString.Value">
            <summary>
            The escaped query string with the leading '?' character
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.QueryString.HasValue">
            <summary>
            True if the query string is not empty
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.QueryString.ToString">
            <summary>
            Provides the query string escaped in a way which is correct for combining into the URI representation. 
            A leading '?' character will be included unless the Value is null or empty. Characters which are potentially
            dangerous are escaped.
            </summary>
            <returns>The query string value</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.QueryString.ToUriComponent">
            <summary>
            Provides the query string escaped in a way which is correct for combining into the URI representation. 
            A leading '?' character will be included unless the Value is null or empty. Characters which are potentially
            dangerous are escaped.
            </summary>
            <returns>The query string value</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.QueryString.FromUriComponent(System.String)">
            <summary>
            Returns an QueryString given the query as it is escaped in the URI format. The string MUST NOT contain any
            value that is not a query.
            </summary>
            <param name="uriComponent">The escaped query as it appears in the URI format.</param>
            <returns>The resulting QueryString</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.QueryString.FromUriComponent(System.Uri)">
            <summary>
            Returns an QueryString given the query as from a Uri object. Relative Uri objects are not supported.
            </summary>
            <param name="uri">The Uri object</param>
            <returns>The resulting QueryString</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.QueryString.Create(System.String,System.String)">
            <summary>
            Create a query string with a single given parameter name and value.
            </summary>
            <param name="name">The un-encoded parameter name</param>
            <param name="value">The un-encoded parameter value</param>
            <returns>The resulting QueryString</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.QueryString.Create(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Creates a query string composed from the given name value pairs.
            </summary>
            <param name="parameters"></param>
            <returns>The resulting QueryString</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.QueryString.Create(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Extensions.Primitives.StringValues}})">
            <summary>
            Creates a query string composed from the given name value pairs.
            </summary>
            <param name="parameters"></param>
            <returns>The resulting QueryString</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Http.RequestDelegate">
            <summary>
            A function that can process an HTTP request.
            </summary>
            <param name="context">The <see cref="T:Microsoft.AspNetCore.Http.HttpContext"/> for the request.</param>
            <returns>A task that represents the completion of request processing.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Http.Endpoint">
            <summary>
            Represents a logical endpoint in an application.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.Endpoint.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.AspNetCore.Http.EndpointMetadataCollection,System.String)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.AspNetCore.Http.Endpoint"/>.
            </summary>
            <param name="requestDelegate">The delegate used to process requests for the endpoint.</param>
            <param name="metadata">
            The endpoint <see cref="T:Microsoft.AspNetCore.Http.EndpointMetadataCollection"/>. May be null.
            </param>
            <param name="displayName">
            The informational display name of the endpoint. May be null.
            </param>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.Endpoint.DisplayName">
            <summary>
            Gets the informational display name of this endpoint.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.Endpoint.Metadata">
            <summary>
            Gets the collection of metadata associated with this endpoint.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.Endpoint.RequestDelegate">
            <summary>
            Gets the delegate used to process requests for the endpoint.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Http.EndpointHttpContextExtensions">
            <summary>
            Extension methods to expose Endpoint on HttpContext.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.EndpointHttpContextExtensions.GetEndpoint(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Extension method for getting the <see cref="T:Microsoft.AspNetCore.Http.Endpoint"/> for the current request.
            </summary>
            <param name="context">The <see cref="T:Microsoft.AspNetCore.Http.HttpContext"/> context.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Http.Endpoint"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.EndpointHttpContextExtensions.SetEndpoint(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Http.Endpoint)">
            <summary>
            Extension method for setting the <see cref="T:Microsoft.AspNetCore.Http.Endpoint"/> for the current request.
            </summary>
            <param name="context">The <see cref="T:Microsoft.AspNetCore.Http.HttpContext"/> context.</param>
            <param name="endpoint">The <see cref="T:Microsoft.AspNetCore.Http.Endpoint"/>.</param>
        </member>
        <member name="T:Microsoft.AspNetCore.Http.EndpointMetadataCollection">
            <summary>
            A collection of arbitrary metadata associated with an endpoint.
            </summary>
            <remarks>
            <see cref="T:Microsoft.AspNetCore.Http.EndpointMetadataCollection"/> instances contain a list of metadata items
            of arbitrary types. The metadata items are stored as an ordered collection with
            items arranged in ascending order of precedence.
            </remarks>
        </member>
        <member name="F:Microsoft.AspNetCore.Http.EndpointMetadataCollection.Empty">
            <summary>
            An empty <see cref="T:Microsoft.AspNetCore.Http.EndpointMetadataCollection"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.EndpointMetadataCollection.#ctor(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Creates a new <see cref="T:Microsoft.AspNetCore.Http.EndpointMetadataCollection"/>.
            </summary>
            <param name="items">The metadata items.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.EndpointMetadataCollection.#ctor(System.Object[])">
            <summary>
            Creates a new <see cref="T:Microsoft.AspNetCore.Http.EndpointMetadataCollection"/>.
            </summary>
            <param name="items">The metadata items.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.EndpointMetadataCollection.Item(System.Int32)">
            <summary>
            Gets the item at <paramref name="index"/>.
            </summary>
            <param name="index">The index of the item to retrieve.</param>
            <returns>The item at <paramref name="index"/>.</returns>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.EndpointMetadataCollection.Count">
            <summary>
            Gets the count of metadata items.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.EndpointMetadataCollection.GetMetadata``1">
            <summary>
            Gets the most significant metadata item of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of metadata to retrieve.</typeparam>
            <returns>
            The most significant metadata of type <typeparamref name="T"/> or <c>null</c>.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.EndpointMetadataCollection.GetOrderedMetadata``1">
            <summary>
            Gets the metadata items of type <typeparamref name="T"/> in ascending
            order of precedence.
            </summary>
            <typeparam name="T">The type of metadata.</typeparam>
            <returns>A sequence of metadata items of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.EndpointMetadataCollection.GetEnumerator">
            <summary>
            Gets an <see cref="T:System.Collections.IEnumerator"/> of all metadata items.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> of all metadata items.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.EndpointMetadataCollection.System#Collections#Generic#IEnumerable{System#Object}#GetEnumerator">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerator`1"/> of all metadata items.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> of all metadata items.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.EndpointMetadataCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an <see cref="T:System.Collections.IEnumerator"/> of all metadata items.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> of all metadata items.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Http.EndpointMetadataCollection.Enumerator">
            <summary>
            Enumerates the elements of an <see cref="T:Microsoft.AspNetCore.Http.EndpointMetadataCollection"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.EndpointMetadataCollection.Enumerator.Current">
            <summary>
            Gets the element at the current position of the enumerator
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.EndpointMetadataCollection.Enumerator.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:Microsoft.AspNetCore.Http.EndpointMetadataCollection.Enumerator"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.EndpointMetadataCollection.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the <see cref="T:Microsoft.AspNetCore.Http.EndpointMetadataCollection.Enumerator"/>.
            </summary>
            <returns>
            <c>true</c> if the enumerator was successfully advanced to the next element;
            <c>false</c> if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.EndpointMetadataCollection.Enumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Http.Features.IEndpointFeature">
            <summary>
            A feature interface for endpoint routing. Use <see cref="P:Microsoft.AspNetCore.Http.HttpContext.Features"/>
            to access an instance associated with the current request.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.Features.IEndpointFeature.Endpoint">
            <summary>
            Gets or sets the selected <see cref="T:Microsoft.AspNetCore.Http.Endpoint"/> for the current
            request.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Http.Features.IRouteValuesFeature">
            <summary>
            A feature interface for routing values. Use <see cref="P:Microsoft.AspNetCore.Http.HttpContext.Features"/>
            to access the values associated with the current request.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.Features.IRouteValuesFeature.RouteValues">
            <summary>
            Gets or sets the <see cref="T:Microsoft.AspNetCore.Routing.RouteValueDictionary"/> associated with the currrent
            request.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Http.WebSocketManager">
            <summary>
            Manages the establishment of WebSocket connections for a specific HTTP request. 
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.WebSocketManager.IsWebSocketRequest">
            <summary>
            Gets a value indicating whether the request is a WebSocket establishment request.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.WebSocketManager.WebSocketRequestedProtocols">
            <summary>
            Gets the list of requested WebSocket sub-protocols.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.WebSocketManager.AcceptWebSocketAsync">
            <summary>
            Transitions the request to a WebSocket connection.
            </summary>
            <returns>A task representing the completion of the transition.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.WebSocketManager.AcceptWebSocketAsync(System.String)">
            <summary>
            Transitions the request to a WebSocket connection using the specified sub-protocol.
            </summary>
            <param name="subProtocol">The sub-protocol to use.</param>
            <returns>A task representing the completion of the transition.</returns>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.Abstractions.Resources.Exception_UseMiddlewareIServiceProviderNotAvailable">
            <summary>'{0}' is not available.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.Abstractions.Resources.FormatException_UseMiddlewareIServiceProviderNotAvailable(System.Object)">
            <summary>'{0}' is not available.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.Abstractions.Resources.Exception_UseMiddlewareNoInvokeMethod">
            <summary>No public '{0}' or '{1}' method found for middleware of type '{2}'.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.Abstractions.Resources.FormatException_UseMiddlewareNoInvokeMethod(System.Object,System.Object,System.Object)">
            <summary>No public '{0}' or '{1}' method found for middleware of type '{2}'.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.Abstractions.Resources.Exception_UseMiddlewareNonTaskReturnType">
            <summary>'{0}' or '{1}' does not return an object of type '{2}'.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.Abstractions.Resources.FormatException_UseMiddlewareNonTaskReturnType(System.Object,System.Object,System.Object)">
            <summary>'{0}' or '{1}' does not return an object of type '{2}'.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.Abstractions.Resources.Exception_UseMiddlewareNoParameters">
            <summary>The '{0}' or '{1}' method's first argument must be of type '{2}'.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.Abstractions.Resources.FormatException_UseMiddlewareNoParameters(System.Object,System.Object,System.Object)">
            <summary>The '{0}' or '{1}' method's first argument must be of type '{2}'.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.Abstractions.Resources.Exception_UseMiddleMutlipleInvokes">
            <summary>Multiple public '{0}' or '{1}' methods are available.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.Abstractions.Resources.FormatException_UseMiddleMutlipleInvokes(System.Object,System.Object)">
            <summary>Multiple public '{0}' or '{1}' methods are available.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.Abstractions.Resources.Exception_PathMustStartWithSlash">
            <summary>The path in '{0}' must start with '/'.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.Abstractions.Resources.FormatException_PathMustStartWithSlash(System.Object)">
            <summary>The path in '{0}' must start with '/'.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.Abstractions.Resources.Exception_InvokeMiddlewareNoService">
            <summary>Unable to resolve service for type '{0}' while attempting to Invoke middleware '{1}'.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.Abstractions.Resources.FormatException_InvokeMiddlewareNoService(System.Object,System.Object)">
            <summary>Unable to resolve service for type '{0}' while attempting to Invoke middleware '{1}'.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.Abstractions.Resources.Exception_InvokeDoesNotSupportRefOrOutParams">
            <summary>The '{0}' method must not have ref or out parameters.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.Abstractions.Resources.FormatException_InvokeDoesNotSupportRefOrOutParams(System.Object)">
            <summary>The '{0}' method must not have ref or out parameters.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.Abstractions.Resources.Exception_PortMustBeGreaterThanZero">
            <summary>The value must be greater than zero.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.Abstractions.Resources.Exception_UseMiddlewareNoMiddlewareFactory">
            <summary>No service for type '{0}' has been registered.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.Abstractions.Resources.FormatException_UseMiddlewareNoMiddlewareFactory(System.Object)">
            <summary>No service for type '{0}' has been registered.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.Abstractions.Resources.Exception_UseMiddlewareUnableToCreateMiddleware">
            <summary>'{0}' failed to create middleware of type '{1}'.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.Abstractions.Resources.FormatException_UseMiddlewareUnableToCreateMiddleware(System.Object,System.Object)">
            <summary>'{0}' failed to create middleware of type '{1}'.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.Abstractions.Resources.Exception_UseMiddlewareExplicitArgumentsNotSupported">
            <summary>Types that implement '{0}' do not support explicit arguments.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.Abstractions.Resources.FormatException_UseMiddlewareExplicitArgumentsNotSupported(System.Object)">
            <summary>Types that implement '{0}' do not support explicit arguments.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.Abstractions.Resources.ArgumentCannotBeNullOrEmpty">
            <summary>Argument cannot be null or empty.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.Abstractions.Resources.RouteValueDictionary_DuplicateKey">
            <summary>An element with the key '{0}' already exists in the {1}.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.Abstractions.Resources.FormatRouteValueDictionary_DuplicateKey(System.Object,System.Object)">
            <summary>An element with the key '{0}' already exists in the {1}.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.Abstractions.Resources.RouteValueDictionary_DuplicatePropertyName">
            <summary>The type '{0}' defines properties '{1}' and '{2}' which differ only by casing. This is not supported by {3} which uses case-insensitive comparisons.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.Abstractions.Resources.FormatRouteValueDictionary_DuplicatePropertyName(System.Object,System.Object,System.Object,System.Object)">
            <summary>The type '{0}' defines properties '{1}' and '{2}' which differ only by casing. This is not supported by {3} which uses case-insensitive comparisons.</summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.EndpointBuilder">
            <summary>
            A base class for building an new <see cref="T:Microsoft.AspNetCore.Http.Endpoint"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Builder.EndpointBuilder.RequestDelegate">
            <summary>
            Gets or sets the delegate used to process requests for the endpoint.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Builder.EndpointBuilder.DisplayName">
            <summary>
            Gets or sets the informational display name of this endpoint.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Builder.EndpointBuilder.Metadata">
            <summary>
            Gets the collection of metadata associated with this endpoint.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.EndpointBuilder.Build">
            <summary>
            Creates an instance of <see cref="T:Microsoft.AspNetCore.Http.Endpoint"/> from the <see cref="T:Microsoft.AspNetCore.Builder.EndpointBuilder"/>.
            </summary>
            <returns>The created <see cref="T:Microsoft.AspNetCore.Http.Endpoint"/>.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.IEndpointConventionBuilder">
            <summary>
            Builds conventions that will be used for customization of <see cref="T:Microsoft.AspNetCore.Builder.EndpointBuilder"/> instances.
            </summary>
            <remarks>
            This interface is used at application startup to customize endpoints for the application.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.IEndpointConventionBuilder.Add(System.Action{Microsoft.AspNetCore.Builder.EndpointBuilder})">
            <summary>
            Adds the specified convention to the builder. Conventions are used to customize <see cref="T:Microsoft.AspNetCore.Builder.EndpointBuilder"/> instances.
            </summary>
            <param name="convention">The convention to add to the builder.</param>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.MapExtensions">
            <summary>
            Extension methods for the <see cref="T:Microsoft.AspNetCore.Builder.Extensions.MapMiddleware"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.MapExtensions.Map(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Http.PathString,System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})">
            <summary>
            Branches the request pipeline based on matches of the given request path. If the request path starts with
            the given path, the branch is executed.
            </summary>
            <param name="app">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/> instance.</param>
            <param name="pathMatch">The request path to match.</param>
            <param name="configuration">The branch to take for positive path matches.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/> instance.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.Extensions.MapMiddleware">
            <summary>
            Represents a middleware that maps a request path to a sub-request pipeline.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.Extensions.MapMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.AspNetCore.Builder.Extensions.MapOptions)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.AspNetCore.Builder.Extensions.MapMiddleware"/>.
            </summary>
            <param name="next">The delegate representing the next middleware in the request pipeline.</param>
            <param name="options">The middleware options.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.Extensions.MapMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Executes the middleware.
            </summary>
            <param name="context">The <see cref="T:Microsoft.AspNetCore.Http.HttpContext"/> for the current request.</param>
            <returns>A task that represents the execution of this middleware.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.Extensions.MapOptions">
            <summary>
            Options for the <see cref="T:Microsoft.AspNetCore.Builder.Extensions.MapMiddleware"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Builder.Extensions.MapOptions.PathMatch">
            <summary>
            The path to match.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Builder.Extensions.MapOptions.Branch">
            <summary>
            The branch taken for a positive match.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.Extensions.MapWhenMiddleware">
            <summary>
            Represents a middleware that runs a sub-request pipeline when a given predicate is matched.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.Extensions.MapWhenMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.AspNetCore.Builder.Extensions.MapWhenOptions)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.AspNetCore.Builder.Extensions.MapWhenMiddleware"/>.
            </summary>
            <param name="next">The delegate representing the next middleware in the request pipeline.</param>
            <param name="options">The middleware options.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.Extensions.MapWhenMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Executes the middleware.
            </summary>
            <param name="context">The <see cref="T:Microsoft.AspNetCore.Http.HttpContext"/> for the current request.</param>
            <returns>A task that represents the execution of this middleware.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.Extensions.MapWhenOptions">
            <summary>
            Options for the <see cref="T:Microsoft.AspNetCore.Builder.Extensions.MapWhenMiddleware"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Builder.Extensions.MapWhenOptions.Predicate">
            <summary>
            The user callback that determines if the branch should be taken.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Builder.Extensions.MapWhenOptions.Branch">
            <summary>
            The branch taken for a positive match.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.Extensions.UsePathBaseMiddleware">
            <summary>
            Represents a middleware that extracts the specified path base from request path and postpend it to the request path base.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.Extensions.UsePathBaseMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.AspNetCore.Http.PathString)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.AspNetCore.Builder.Extensions.UsePathBaseMiddleware"/>.
            </summary>
            <param name="next">The delegate representing the next middleware in the request pipeline.</param>
            <param name="pathBase">The path base to extract.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.Extensions.UsePathBaseMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Executes the middleware.
            </summary>
            <param name="context">The <see cref="T:Microsoft.AspNetCore.Http.HttpContext"/> for the current request.</param>
            <returns>A task that represents the execution of this middleware.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.MapWhenExtensions">
            <summary>
            Extension methods for the <see cref="T:Microsoft.AspNetCore.Builder.Extensions.MapWhenMiddleware"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.MapWhenExtensions.MapWhen(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Func{Microsoft.AspNetCore.Http.HttpContext,System.Boolean},System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})">
            <summary>
            Branches the request pipeline based on the result of the given predicate.
            </summary>
            <param name="app"></param>
            <param name="predicate">Invoked with the request environment to determine if the branch should be taken</param>
            <param name="configuration">Configures a branch to take</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.RunExtensions">
            <summary>
            Extension methods for adding terminal middleware.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.RunExtensions.Run(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            Adds a terminal middleware delegate to the application's request pipeline.
            </summary>
            <param name="app">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/> instance.</param>
            <param name="handler">A delegate that handles the request.</param>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.UseExtensions">
            <summary>
            Extension methods for adding middleware.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.UseExtensions.Use(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Func{Microsoft.AspNetCore.Http.HttpContext,System.Func{System.Threading.Tasks.Task},System.Threading.Tasks.Task})">
            <summary>
            Adds a middleware delegate defined in-line to the application's request pipeline.
            </summary>
            <param name="app">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/> instance.</param>
            <param name="middleware">A function that handles the request or calls the given next function.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/> instance.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.UseMiddlewareExtensions">
            <summary>
            Extension methods for adding typed middleware.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.UseMiddlewareExtensions.UseMiddleware``1(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Object[])">
            <summary>
            Adds a middleware type to the application's request pipeline.
            </summary>
            <typeparam name="TMiddleware">The middleware type.</typeparam>
            <param name="app">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/> instance.</param>
            <param name="args">The arguments to pass to the middleware type instance's constructor.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/> instance.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.UseMiddlewareExtensions.UseMiddleware(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Type,System.Object[])">
            <summary>
            Adds a middleware type to the application's request pipeline.
            </summary>
            <param name="app">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/> instance.</param>
            <param name="middleware">The middleware type.</param>
            <param name="args">The arguments to pass to the middleware type instance's constructor.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/> instance.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.UsePathBaseExtensions">
            <summary>
            Extension methods for <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.UsePathBaseExtensions.UsePathBase(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Http.PathString)">
            <summary>
            Adds a middleware that extracts the specified path base from request path and postpend it to the request path base.
            </summary>
            <param name="app">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/> instance.</param>
            <param name="pathBase">The path base to extract.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/> instance.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.UseWhenExtensions">
            <summary>
            Extension methods for <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.UseWhenExtensions.UseWhen(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Func{Microsoft.AspNetCore.Http.HttpContext,System.Boolean},System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})">
            <summary>
            Conditionally creates a branch in the request pipeline that is rejoined to the main pipeline.
            </summary>
            <param name="app"></param>
            <param name="predicate">Invoked with the request environment to determine if the branch should be taken</param>
            <param name="configuration">Configures a branch to take</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.IApplicationBuilder">
            <summary>
            Defines a class that provides the mechanisms to configure an application's request pipeline.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Builder.IApplicationBuilder.ApplicationServices">
            <summary>
            Gets or sets the <see cref="T:System.IServiceProvider"/> that provides access to the application's service container.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Builder.IApplicationBuilder.ServerFeatures">
            <summary>
            Gets the set of HTTP features the application's server provides.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Builder.IApplicationBuilder.Properties">
            <summary>
            Gets a key/value collection that can be used to share data between middleware.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.IApplicationBuilder.Use(System.Func{Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.AspNetCore.Http.RequestDelegate})">
            <summary>
            Adds a middleware delegate to the application's request pipeline.
            </summary>
            <param name="middleware">The middleware delegate.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.IApplicationBuilder.New">
            <summary>
            Creates a new <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/> that shares the <see cref="P:Microsoft.AspNetCore.Builder.IApplicationBuilder.Properties"/> of this
            <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/>.
            </summary>
            <returns>The new <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.IApplicationBuilder.Build">
            <summary>
            Builds the delegate used by this application to process HTTP requests.
            </summary>
            <returns>The request handling delegate.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Cors.Infrastructure.ICorsMetadata">
            <summary>
            A marker interface which can be used to identify CORS metdata.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Routing.RouteValueDictionary">
            <summary>
            An <see cref="T:System.Collections.Generic.IDictionary`2"/> type for route values.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Routing.RouteValueDictionary.FromArray(System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Creates a new <see cref="T:Microsoft.AspNetCore.Routing.RouteValueDictionary"/> from the provided array.
            The new instance will take ownership of the array, and may mutate it.
            </summary>
            <param name="items">The items array.</param>
            <returns>A new <see cref="T:Microsoft.AspNetCore.Routing.RouteValueDictionary"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Routing.RouteValueDictionary.#ctor">
            <summary>
            Creates an empty <see cref="T:Microsoft.AspNetCore.Routing.RouteValueDictionary"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Routing.RouteValueDictionary.#ctor(System.Object)">
            <summary>
            Creates a <see cref="T:Microsoft.AspNetCore.Routing.RouteValueDictionary"/> initialized with the specified <paramref name="values"/>.
            </summary>
            <param name="values">An object to initialize the dictionary. The value can be of type
            <see cref="T:System.Collections.Generic.IDictionary`2"/> or <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2"/>
            or an object with public properties as key-value pairs.
            </param>
            <remarks>
            If the value is a dictionary or other <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Collections.Generic.KeyValuePair`2"/>,
            then its entries are copied. Otherwise the object is interpreted as a set of key-value pairs where the
            property names are keys, and property values are the values, and copied into the dictionary.
            Only public instance non-index properties are considered.
            </remarks>
        </member>
        <member name="P:Microsoft.AspNetCore.Routing.RouteValueDictionary.Item(System.String)">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.AspNetCore.Routing.RouteValueDictionary.Comparer">
            <summary>
            Gets the comparer for this dictionary.
            </summary>
            <remarks>
            This will always be a reference to <see cref="P:System.StringComparer.OrdinalIgnoreCase"/>
            </remarks>
        </member>
        <member name="P:Microsoft.AspNetCore.Routing.RouteValueDictionary.Count">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.AspNetCore.Routing.RouteValueDictionary.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#IsReadOnly">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.AspNetCore.Routing.RouteValueDictionary.Keys">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.AspNetCore.Routing.RouteValueDictionary.Values">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Routing.RouteValueDictionary.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Routing.RouteValueDictionary.Add(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Routing.RouteValueDictionary.Clear">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Routing.RouteValueDictionary.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Routing.RouteValueDictionary.ContainsKey(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Routing.RouteValueDictionary.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Routing.RouteValueDictionary.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Routing.RouteValueDictionary.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Routing.RouteValueDictionary.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Routing.RouteValueDictionary.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Routing.RouteValueDictionary.Remove(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Routing.RouteValueDictionary.Remove(System.String,System.Object@)">
            <summary>
            Attempts to remove and return the value that has the specified key from the <see cref="T:Microsoft.AspNetCore.Routing.RouteValueDictionary"/>.
            </summary>
            <param name="key">The key of the element to remove and return.</param>
            <param name="value">When this method returns, contains the object removed from the <see cref="T:Microsoft.AspNetCore.Routing.RouteValueDictionary"/>, or <c>null</c> if key does not exist.</param>
            <returns>
            <c>true</c> if the object was removed successfully; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Routing.RouteValueDictionary.TryAdd(System.String,System.Object)">
            <summary>
            Attempts to the add the provided <paramref name="key"/> and <paramref name="value"/> to the dictionary.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>Returns <c>true</c> if the value was added. Returns <c>false</c> if the key was already present.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Routing.RouteValueDictionary.TryGetValue(System.String,System.Object@)">
            <inheritdoc />
        </member>
    </members>
</doc>
