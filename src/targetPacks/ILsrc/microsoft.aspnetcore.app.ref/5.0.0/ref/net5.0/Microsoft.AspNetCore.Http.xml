<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.AspNetCore.Http</name>
    </assembly>
    <members>
        <member name="T:Microsoft.AspNetCore.Http.DefaultHttpContext">
            <summary>
            Represents an implementation of the HTTP Context class. 
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.DefaultHttpContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNetCore.Http.DefaultHttpContext"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.DefaultHttpContext.#ctor(Microsoft.AspNetCore.Http.Features.IFeatureCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNetCore.Http.DefaultHttpContext"/> class with provided features.
            </summary>
            <param name="features">Initial set of features for the <see cref="T:Microsoft.AspNetCore.Http.DefaultHttpContext"/>.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.DefaultHttpContext.Initialize(Microsoft.AspNetCore.Http.Features.IFeatureCollection)">
            <summary>
            Reinitialize  the current instant of the class with features passed in.
            </summary>
            <remarks>
            This method allows the consumer to re-use the <see cref="T:Microsoft.AspNetCore.Http.DefaultHttpContext" /> for another request, rather than having to allocate a new instance.
            </remarks>
            <param name="features">The new set of features for the <see cref="T:Microsoft.AspNetCore.Http.DefaultHttpContext" />.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.DefaultHttpContext.Uninitialize">
            <summary>
            Uninitialize all the features in the <see cref="T:Microsoft.AspNetCore.Http.DefaultHttpContext" />.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.DefaultHttpContext.FormOptions">
            <summary>
            Gets or set the <see cref="P:Microsoft.AspNetCore.Http.DefaultHttpContext.FormOptions" /> for this instance.
            </summary>
            <returns>
            <see cref="P:Microsoft.AspNetCore.Http.DefaultHttpContext.FormOptions"/>        
            </returns>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.DefaultHttpContext.ServiceScopeFactory">
            <summary>
            Gets or sets the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceScopeFactory" /> for this instance.
            </summary>
            <returns>   
            <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceScopeFactory"/>      
            </returns>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.DefaultHttpContext.Features">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.DefaultHttpContext.Request">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.DefaultHttpContext.Response">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.DefaultHttpContext.Connection">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.DefaultHttpContext.WebSockets">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.DefaultHttpContext.User">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.DefaultHttpContext.Items">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.DefaultHttpContext.RequestServices">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.DefaultHttpContext.RequestAborted">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.DefaultHttpContext.TraceIdentifier">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.DefaultHttpContext.Session">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.DefaultHttpContext.Abort">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.AspNetCore.Http.HttpRequestRewindExtensions">
            <summary>
            Extension methods for enabling buffering in an <see cref="T:Microsoft.AspNetCore.Http.HttpRequest"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpRequestRewindExtensions.EnableBuffering(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            Ensure the <paramref name="request"/> <see cref="P:Microsoft.AspNetCore.Http.HttpRequest.Body"/> can be read multiple times. Normally
            buffers request bodies in memory; writes requests larger than 30K bytes to disk.
            </summary>
            <param name="request">The <see cref="T:Microsoft.AspNetCore.Http.HttpRequest"/> to prepare.</param>
            <remarks>
            Temporary files for larger requests are written to the location named in the <c>ASPNETCORE_TEMP</c>
            environment variable, if any. If that environment variable is not defined, these files are written to the
            current user's temporary folder. Files are automatically deleted at the end of their associated requests.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpRequestRewindExtensions.EnableBuffering(Microsoft.AspNetCore.Http.HttpRequest,System.Int32)">
            <summary>
            Ensure the <paramref name="request"/> <see cref="P:Microsoft.AspNetCore.Http.HttpRequest.Body"/> can be read multiple times. Normally
            buffers request bodies in memory; writes requests larger than <paramref name="bufferThreshold"/> bytes to
            disk.
            </summary>
            <param name="request">The <see cref="T:Microsoft.AspNetCore.Http.HttpRequest"/> to prepare.</param>
            <param name="bufferThreshold">
            The maximum size in bytes of the in-memory <see cref="T:System.Buffers.ArrayPool`1"/> used to buffer the
            stream. Larger request bodies are written to disk.
            </param>
            <remarks>
            Temporary files for larger requests are written to the location named in the <c>ASPNETCORE_TEMP</c>
            environment variable, if any. If that environment variable is not defined, these files are written to the
            current user's temporary folder. Files are automatically deleted at the end of their associated requests.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpRequestRewindExtensions.EnableBuffering(Microsoft.AspNetCore.Http.HttpRequest,System.Int64)">
            <summary>
            Ensure the <paramref name="request"/> <see cref="P:Microsoft.AspNetCore.Http.HttpRequest.Body"/> can be read multiple times. Normally
            buffers request bodies in memory; writes requests larger than 30K bytes to disk.
            </summary>
            <param name="request">The <see cref="T:Microsoft.AspNetCore.Http.HttpRequest"/> to prepare.</param>
            <param name="bufferLimit">
            The maximum size in bytes of the request body. An attempt to read beyond this limit will cause an
            <see cref="T:System.IO.IOException"/>.
            </param>
            <remarks>
            Temporary files for larger requests are written to the location named in the <c>ASPNETCORE_TEMP</c>
            environment variable, if any. If that environment variable is not defined, these files are written to the
            current user's temporary folder. Files are automatically deleted at the end of their associated requests.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpRequestRewindExtensions.EnableBuffering(Microsoft.AspNetCore.Http.HttpRequest,System.Int32,System.Int64)">
            <summary>
            Ensure the <paramref name="request"/> <see cref="P:Microsoft.AspNetCore.Http.HttpRequest.Body"/> can be read multiple times. Normally
            buffers request bodies in memory; writes requests larger than <paramref name="bufferThreshold"/> bytes to
            disk.
            </summary>
            <param name="request">The <see cref="T:Microsoft.AspNetCore.Http.HttpRequest"/> to prepare.</param>
            <param name="bufferThreshold">
            The maximum size in bytes of the in-memory <see cref="T:System.Buffers.ArrayPool`1"/> used to buffer the
            stream. Larger request bodies are written to disk.
            </param>
            <param name="bufferLimit">
            The maximum size in bytes of the request body. An attempt to read beyond this limit will cause an
            <see cref="T:System.IO.IOException"/>.
            </param>
            <remarks>
            Temporary files for larger requests are written to the location named in the <c>ASPNETCORE_TEMP</c>
            environment variable, if any. If that environment variable is not defined, these files are written to the
            current user's temporary folder. Files are automatically deleted at the end of their associated requests.
            </remarks>
        </member>
        <member name="T:Microsoft.AspNetCore.Http.Features.DefaultSessionFeature">
            <summary>
            This type exists only for the purpose of unit testing where the user can directly set the
            <see cref="P:Microsoft.AspNetCore.Http.HttpContext.Session"/> property without the need for creating a <see cref="T:Microsoft.AspNetCore.Http.Features.ISessionFeature"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.Features.FormOptions.BufferBody">
            <summary>
            Enables full request body buffering. Use this if multiple components need to read the raw stream.
            The default value is false.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.Features.FormOptions.MemoryBufferThreshold">
            <summary>
            If <see cref="P:Microsoft.AspNetCore.Http.Features.FormOptions.BufferBody"/> is enabled, this many bytes of the body will be buffered in memory.
            If this threshold is exceeded then the buffer will be moved to a temp file on disk instead.
            This also applies when buffering individual multipart section bodies.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.Features.FormOptions.BufferBodyLengthLimit">
            <summary>
            If <see cref="P:Microsoft.AspNetCore.Http.Features.FormOptions.BufferBody"/> is enabled, this is the limit for the total number of bytes that will
            be buffered. Forms that exceed this limit will throw an <see cref="T:System.IO.InvalidDataException"/> when parsed.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.Features.FormOptions.ValueCountLimit">
            <summary>
            A limit for the number of form entries to allow.
            Forms that exceed this limit will throw an <see cref="T:System.IO.InvalidDataException"/> when parsed.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.Features.FormOptions.KeyLengthLimit">
            <summary>
            A limit on the length of individual keys. Forms containing keys that exceed this limit will
            throw an <see cref="T:System.IO.InvalidDataException"/> when parsed.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.Features.FormOptions.ValueLengthLimit">
            <summary>
            A limit on the length of individual form values. Forms containing values that exceed this
            limit will throw an <see cref="T:System.IO.InvalidDataException"/> when parsed.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.Features.FormOptions.MultipartBoundaryLengthLimit">
            <summary>
            A limit for the length of the boundary identifier. Forms with boundaries that exceed this
            limit will throw an <see cref="T:System.IO.InvalidDataException"/> when parsed.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.Features.FormOptions.MultipartHeadersCountLimit">
            <summary>
            A limit for the number of headers to allow in each multipart section. Headers with the same name will
            be combined. Form sections that exceed this limit will throw an <see cref="T:System.IO.InvalidDataException"/>
            when parsed.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.Features.FormOptions.MultipartHeadersLengthLimit">
            <summary>
            A limit for the total length of the header keys and values in each multipart section.
            Form sections that exceed this limit will throw an <see cref="T:System.IO.InvalidDataException"/> when parsed.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.Features.FormOptions.MultipartBodyLengthLimit">
            <summary>
            A limit for the length of each multipart body. Forms sections that exceed this limit will throw an
            <see cref="T:System.IO.InvalidDataException"/> when parsed.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Http.Features.ResponseCookiesFeature">
            <summary>
            Default implementation of <see cref="T:Microsoft.AspNetCore.Http.Features.IResponseCookiesFeature"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.Features.ResponseCookiesFeature.#ctor(Microsoft.AspNetCore.Http.Features.IFeatureCollection)">
            <summary>
            Initializes a new <see cref="T:Microsoft.AspNetCore.Http.Features.ResponseCookiesFeature"/> instance.
            </summary>
            <param name="features">
            <see cref="T:Microsoft.AspNetCore.Http.Features.IFeatureCollection"/> containing all defined features, including this
            <see cref="T:Microsoft.AspNetCore.Http.Features.IResponseCookiesFeature"/> and the <see cref="T:Microsoft.AspNetCore.Http.Features.IHttpResponseFeature"/>.
            </param>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.Features.ResponseCookiesFeature.#ctor(Microsoft.AspNetCore.Http.Features.IFeatureCollection,Microsoft.Extensions.ObjectPool.ObjectPool{System.Text.StringBuilder})">
            <summary>
            Initializes a new <see cref="T:Microsoft.AspNetCore.Http.Features.ResponseCookiesFeature"/> instance.
            </summary>
            <param name="features">
            <see cref="T:Microsoft.AspNetCore.Http.Features.IFeatureCollection"/> containing all defined features, including this
            <see cref="T:Microsoft.AspNetCore.Http.Features.IResponseCookiesFeature"/> and the <see cref="T:Microsoft.AspNetCore.Http.Features.IHttpResponseFeature"/>.
            </param>
            <param name="builderPool">The <see cref="T:Microsoft.Extensions.ObjectPool.ObjectPool`1"/>, if available.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.Features.ResponseCookiesFeature.Cookies">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNetCore.Http.Features.RouteValuesFeature">
            <summary>
            A feature for routing values. Use <see cref="P:Microsoft.AspNetCore.Http.HttpContext.Features"/>
            to access the values associated with the current request.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.Features.RouteValuesFeature.RouteValues">
            <summary>
            Gets or sets the <see cref="T:Microsoft.AspNetCore.Routing.RouteValueDictionary"/> associated with the currrent
            request.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Http.FormCollection">
            <summary>
            Contains the parsed form values.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.FormCollection.Item(System.String)">
            <summary>
            Get or sets the associated value from the collection as a single string.
            </summary>
            <param name="key">The header name.</param>
            <returns>the associated value from the collection as a StringValues or StringValues.Empty if the key is not present.</returns>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.FormCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:Microsoft.AspNetCore.Http.HeaderDictionary" />;.
            </summary>
            <returns>The number of elements contained in the <see cref="T:Microsoft.AspNetCore.Http.HeaderDictionary" />.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.FormCollection.ContainsKey(System.String)">
            <summary>
            Determines whether the <see cref="T:Microsoft.AspNetCore.Http.HeaderDictionary" /> contains a specific key.
            </summary>
            <param name="key">The key.</param>
            <returns>true if the <see cref="T:Microsoft.AspNetCore.Http.HeaderDictionary" /> contains a specific key; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.FormCollection.TryGetValue(System.String,Microsoft.Extensions.Primitives.StringValues@)">
            <summary>
            Retrieves a value from the dictionary.
            </summary>
            <param name="key">The header name.</param>
            <param name="value">The value.</param>
            <returns>true if the <see cref="T:Microsoft.AspNetCore.Http.HeaderDictionary" /> contains the key; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.FormCollection.GetEnumerator">
            <summary>
            Returns an struct enumerator that iterates through a collection without boxing and is also used via the <see cref="T:Microsoft.AspNetCore.Http.IFormCollection" /> interface.
            </summary>
            <returns>An <see cref="T:Microsoft.AspNetCore.Http.FormCollection.Enumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.FormCollection.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,Microsoft#Extensions#Primitives#StringValues}}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection, boxes in non-empty path.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.FormCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection, boxes in non-empty path.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Http.FormFile">
            <summary>
            Default implementation of <see cref="T:Microsoft.AspNetCore.Http.IFormFile"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.FormFile.ContentDisposition">
            <summary>
            Gets the raw Content-Disposition header of the uploaded file.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.FormFile.ContentType">
            <summary>
            Gets the raw Content-Type header of the uploaded file.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.FormFile.Headers">
            <summary>
            Gets the header dictionary of the uploaded file.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.FormFile.Length">
            <summary>
            Gets the file length in bytes.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.FormFile.Name">
            <summary>
            Gets the name from the Content-Disposition header.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.FormFile.FileName">
            <summary>
            Gets the file name from the Content-Disposition header.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.FormFile.OpenReadStream">
            <summary>
            Opens the request stream for reading the uploaded file.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.FormFile.CopyTo(System.IO.Stream)">
            <summary>
            Copies the contents of the uploaded file to the <paramref name="target"/> stream.
            </summary>
            <param name="target">The stream to copy the file contents to.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.FormFile.CopyToAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Asynchronously copies the contents of the uploaded file to the <paramref name="target"/> stream.
            </summary>
            <param name="target">The stream to copy the file contents to.</param>
            <param name="cancellationToken"></param>
        </member>
        <member name="T:Microsoft.AspNetCore.Http.FormFileCollection">
            <summary>
            Default implementation of <see cref="T:Microsoft.AspNetCore.Http.IFormFileCollection"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.FormFileCollection.Item(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Http.FormFileCollection.GetFile(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Http.FormFileCollection.GetFiles(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNetCore.Http.HeaderDictionary">
            <summary>
            Represents a wrapper for RequestHeaders and ResponseHeaders.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.HeaderDictionary.Item(System.String)">
            <summary>
            Get or sets the associated value from the collection as a single string.
            </summary>
            <param name="key">The header name.</param>
            <returns>the associated value from the collection as a StringValues or StringValues.Empty if the key is not present.</returns>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.HeaderDictionary.System#Collections#Generic#IDictionary{System#String,Microsoft#Extensions#Primitives#StringValues}#Item(System.String)">
            <summary>
            Throws KeyNotFoundException if the key is not present.
            </summary>
            <param name="key">The header name.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.HeaderDictionary.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:Microsoft.AspNetCore.Http.HeaderDictionary" />;.
            </summary>
            <returns>The number of elements contained in the <see cref="T:Microsoft.AspNetCore.Http.HeaderDictionary" />.</returns>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.HeaderDictionary.IsReadOnly">
            <summary>
            Gets a value that indicates whether the <see cref="T:Microsoft.AspNetCore.Http.HeaderDictionary" /> is in read-only mode.
            </summary>
            <returns>true if the <see cref="T:Microsoft.AspNetCore.Http.HeaderDictionary" /> is in read-only mode; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HeaderDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,Microsoft.Extensions.Primitives.StringValues})">
            <summary>
            Adds a new list of items to the collection.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HeaderDictionary.Add(System.String,Microsoft.Extensions.Primitives.StringValues)">
            <summary>
            Adds the given header and values to the collection.
            </summary>
            <param name="key">The header name.</param>
            <param name="value">The header values.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HeaderDictionary.Clear">
            <summary>
            Clears the entire list of objects.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HeaderDictionary.Contains(System.Collections.Generic.KeyValuePair{System.String,Microsoft.Extensions.Primitives.StringValues})">
            <summary>
            Returns a value indicating whether the specified object occurs within this collection.
            </summary>
            <param name="item">The item.</param>
            <returns>true if the specified object occurs within this collection; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HeaderDictionary.ContainsKey(System.String)">
            <summary>
            Determines whether the <see cref="T:Microsoft.AspNetCore.Http.HeaderDictionary" /> contains a specific key.
            </summary>
            <param name="key">The key.</param>
            <returns>true if the <see cref="T:Microsoft.AspNetCore.Http.HeaderDictionary" /> contains a specific key; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HeaderDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.String,Microsoft.Extensions.Primitives.StringValues}[],System.Int32)">
            <summary>
            Copies the <see cref="T:Microsoft.AspNetCore.Http.HeaderDictionary" /> elements to a one-dimensional Array instance at the specified index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the specified objects copied from the <see cref="T:Microsoft.AspNetCore.Http.HeaderDictionary" />.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HeaderDictionary.Remove(System.Collections.Generic.KeyValuePair{System.String,Microsoft.Extensions.Primitives.StringValues})">
            <summary>
            Removes the given item from the the collection.
            </summary>
            <param name="item">The item.</param>
            <returns>true if the specified object was removed from the collection; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HeaderDictionary.Remove(System.String)">
            <summary>
            Removes the given header from the collection.
            </summary>
            <param name="key">The header name.</param>
            <returns>true if the specified object was removed from the collection; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HeaderDictionary.TryGetValue(System.String,Microsoft.Extensions.Primitives.StringValues@)">
            <summary>
            Retrieves a value from the dictionary.
            </summary>
            <param name="key">The header name.</param>
            <param name="value">The value.</param>
            <returns>true if the <see cref="T:Microsoft.AspNetCore.Http.HeaderDictionary" /> contains the key; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HeaderDictionary.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:Microsoft.AspNetCore.Http.HeaderDictionary.Enumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HeaderDictionary.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,Microsoft#Extensions#Primitives#StringValues}}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HeaderDictionary.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Http.HttpContextAccessor">
            <summary>
            Provides an implementation of <see cref="T:Microsoft.AspNetCore.Http.IHttpContextAccessor" /> based on the current execution context. 
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.HttpContextAccessor.HttpContext">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.AspNetCore.Http.HttpContextFactory">
            <summary>
            Represents methods used to create an HTTP context object. 
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextFactory.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Http.Features.FormOptions})">
            <summary>
            Initializes a new instance of the HttpContext class with options passed in.
            </summary>
            <param name="formOptions">Options to set when instantianting the HTTP context object.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextFactory.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Http.Features.FormOptions},Microsoft.Extensions.DependencyInjection.IServiceScopeFactory)">
            <summary>
            Initializes a new instance of the DefaultHttpContext class with options passed in.
            </summary>
            <param name="formOptions">Options to set when instantianting the HTTP context object.</param>
            <param name="serviceScopeFactory">Factory object used to create the service scope for the HTTP context.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextFactory.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Http.Features.FormOptions},Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            Initializes a new instance of the DefaultHttpContext class with options passed in.
            </summary>
            <param name="formOptions">Options to set when instantianting the HTTP context object.</param>
            <param name="httpContextAccessor">Object to be used to access the HTTP context instance.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextFactory.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Http.Features.FormOptions},Microsoft.Extensions.DependencyInjection.IServiceScopeFactory,Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            Initializes a new instance of the DefaultHttpContext class with options passed in.
            </summary>
            <param name="formOptions">Options to set when instantianting the HTTP context object.</param>
            <param name="serviceScopeFactory">Factory object used to create the service scope for the HTTP context.</param>
            <param name="httpContextAccessor">Options to set when instantianting the Default HTTP context object.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextFactory.Create(Microsoft.AspNetCore.Http.Features.IFeatureCollection)">
            <summary>
            Initializes a new instance of the DefaultHttpContext class with options passed in.
            </summary>
            <param name="featureCollection">Options to set when instantianting the Default HTTP context object.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextFactory.Dispose(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Sets the HTTP context object to null for garbage collection. 
            </summary>
            <param name="httpContext">HTTP context to dispose.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.DefaultConnectionInfo.Id">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNetCore.Http.ReferenceReadStream">
            <summary>
            A Stream that wraps another stream starting at a certain offset and reading for the given length.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.RequestCookieCollection.GetEnumerator">
            <summary>
            Returns an struct enumerator that iterates through a collection without boxing.
            </summary>
            <returns>An <see cref="T:Microsoft.AspNetCore.Http.RequestCookieCollection.Enumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.RequestCookieCollection.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,System#String}}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection, boxes in non-empty path.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.RequestCookieCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection, boxes in non-empty path.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Http.ResponseCookies">
            <summary>
            A wrapper for the response Set-Cookie header.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.ResponseCookies.#ctor(Microsoft.AspNetCore.Http.Features.IFeatureCollection)">
            <summary>
            Create a new wrapper.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.ResponseCookies.Append(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Http.ResponseCookies.Append(System.String,System.String,Microsoft.AspNetCore.Http.CookieOptions)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Http.ResponseCookies.Delete(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.Http.ResponseCookies.Delete(System.String,Microsoft.AspNetCore.Http.CookieOptions)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNetCore.Http.QueryCollection">
            <summary>
            The HttpRequest query string collection
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.QueryCollection.Item(System.String)">
            <summary>
            Gets the associated set of values from the collection.
            </summary>
            <param name="key">The key name.</param>
            <returns>the associated value from the collection as a StringValues or StringValues.Empty if the key is not present.</returns>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.QueryCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:Microsoft.AspNetCore.Http.QueryCollection" />;.
            </summary>
            <returns>The number of elements contained in the <see cref="T:Microsoft.AspNetCore.Http.QueryCollection" />.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.QueryCollection.ContainsKey(System.String)">
            <summary>
            Determines whether the <see cref="T:Microsoft.AspNetCore.Http.QueryCollection" /> contains a specific key.
            </summary>
            <param name="key">The key.</param>
            <returns>true if the <see cref="T:Microsoft.AspNetCore.Http.QueryCollection" /> contains a specific key; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.QueryCollection.TryGetValue(System.String,Microsoft.Extensions.Primitives.StringValues@)">
            <summary>
            Retrieves a value from the collection.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>true if the <see cref="T:Microsoft.AspNetCore.Http.QueryCollection" /> contains the key; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.QueryCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:Microsoft.AspNetCore.Http.QueryCollection.Enumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.QueryCollection.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,Microsoft#Extensions#Primitives#StringValues}}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.QueryCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.RequestFormReaderExtensions.ReadFormAsync(Microsoft.AspNetCore.Http.HttpRequest,Microsoft.AspNetCore.Http.Features.FormOptions,System.Threading.CancellationToken)">
            <summary>
            Read the request body as a form with the given options. These options will only be used
            if the form has not already been read.
            </summary>
            <param name="request">The request.</param>
            <param name="options">Options for reading the form.</param>
            <param name="cancellationToken"></param>
            <returns>The parsed form.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.SendFileFallback.SendFileAsync(System.IO.Stream,System.String,System.Int64,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Copies the segment of the file to the destination stream.
            </summary>
            <param name="destination">The stream to write the file segment to.</param>
            <param name="filePath">The full disk path to the file.</param>
            <param name="offset">The offset in the file to start at.</param>
            <param name="count">The number of bytes to send, or null to send the remainder of the file.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> used to abort the transmission.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Http.StreamResponseBodyFeature">
            <summary>
            An implementation of <see cref="T:Microsoft.AspNetCore.Http.Features.IHttpResponseBodyFeature"/> that aproximates all of the APIs over the given Stream.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.StreamResponseBodyFeature.#ctor(System.IO.Stream)">
            <summary>
            Wraps the given stream.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.StreamResponseBodyFeature.#ctor(System.IO.Stream,Microsoft.AspNetCore.Http.Features.IHttpResponseBodyFeature)">
            <summary>
            Wraps the given stream and tracks the prior feature instance.
            </summary>
            <param name="stream"></param>
            <param name="priorFeature"></param>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.StreamResponseBodyFeature.Stream">
            <summary>
            The original response body stream.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.StreamResponseBodyFeature.PriorFeature">
            <summary>
            The prior feature, if any.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Http.StreamResponseBodyFeature.Writer">
            <summary>
            A PipeWriter adapted over the given stream.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.StreamResponseBodyFeature.DisableBuffering">
            <summary>
            Opts out of write buffering for the response.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.StreamResponseBodyFeature.SendFileAsync(System.String,System.Int64,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Copies the specified file segment to the given response stream.
            This calls StartAsync if it has not previoulsy been called.
            </summary>
            <param name="path">The full disk path to the file.</param>
            <param name="offset">The offset in the file to start at.</param>
            <param name="count">The number of bytes to send, or null to send the remainder of the file.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> used to abort the transmission.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.StreamResponseBodyFeature.StartAsync(System.Threading.CancellationToken)">
            <summary>
            Flushes the given stream if this has not previously been called.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.StreamResponseBodyFeature.CompleteAsync">
            <summary>
            This calls StartAsync if it has not previously been called.
            It will complete the adapted pipe if it exists.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.StreamResponseBodyFeature.Dispose">
            <summary>
            Prevents CompleteAsync from operating.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.StreamCopyOperationInternal.CopyToAsync(System.IO.Stream,System.IO.Stream,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>Asynchronously reads the given number of bytes from the source stream and writes them to another stream.</summary>
            <returns>A task that represents the asynchronous copy operation.</returns>
            <param name="source">The stream from which the contents will be copied.</param>
            <param name="destination">The stream to which the contents of the current stream will be copied.</param>
            <param name="count">The count of bytes to be copied.</param>
            <param name="cancel">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.StreamCopyOperationInternal.CopyToAsync(System.IO.Stream,System.IO.Stream,System.Nullable{System.Int64},System.Int32,System.Threading.CancellationToken)">
            <summary>Asynchronously reads the given number of bytes from the source stream and writes them to another stream, using a specified buffer size.</summary>
            <returns>A task that represents the asynchronous copy operation.</returns>
            <param name="source">The stream from which the contents will be copied.</param>
            <param name="destination">The stream to which the contents of the current stream will be copied.</param>
            <param name="count">The count of bytes to be copied.</param>
            <param name="bufferSize">The size, in bytes, of the buffer. This value must be greater than zero. The default size is 4096.</param>
            <param name="cancel">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.HttpServiceCollectionExtensions">
            <summary>
            Extension methods for configuring HttpContext services.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.HttpServiceCollectionExtensions.AddHttpContextAccessor(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds a default implementation for the <see cref="T:Microsoft.AspNetCore.Http.IHttpContextAccessor"/> service.
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.</param>
            <returns>The service collection.</returns>
        </member>
    </members>
</doc>
