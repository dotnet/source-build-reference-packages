
//  Microsoft (R) .NET IL Disassembler.  Version 5.0.0


// ----- DOS Header:
// Magic:                      0x5a4d
// Bytes on last page:         0x0090
// Pages in file:              0x0003
// Relocations:                0x0000
// Size of header (paragraphs):0x0004
// Min extra paragraphs:       0x0000
// Max extra paragraphs:       0xffff
// Initial (relative) SS:      0x0000
// Initial SP:                 0x00b8
// Checksum:                   0x0000
// Initial IP:                 0x0000
// Initial (relative) CS:      0x0000
// File addr. of reloc table:  0x0040
// Overlay number:             0x0000
// OEM identifier:             0x0000
// OEM info:                   0x0000
// File addr. of COFF header:  0x0080
// ----- COFF/PE Headers:
// Signature:                  0x00004550
// ----- COFF Header:
// Machine:                    0x014c
// Number of sections:         0x0003
// Time-date stamp:            0xc0494698
// Ptr to symbol table:        0x00000000
// Number of symbols:          0x00000000
// Size of optional header:    0x00e0
// Characteristics:            0x2022
// ----- PE Optional Header (32 bit):
// Magic:                          0x010b
// Major linker version:           0x30
// Minor linker version:           0x00
// Size of code:                   0x00002000
// Size of init.data:              0x00000800
// Size of uninit.data:            0x00000000
// Addr. of entry point:           0x00003ea6
// Base of code:                   0x00002000
// Base of data:                   0x00004000
// Image base:                     0x10000000
// Section alignment:              0x00002000
// File alignment:                 0x00000200
// Major OS version:               0x0004
// Minor OS version:               0x0000
// Major image version:            0x0000
// Minor image version:            0x0000
// Major subsystem version:        0x0004
// Minor subsystem version:        0x0000
// Size of image:                  0x00008000
// Size of headers:                0x00000200
// Checksum:                       0x0000c6c7
// Subsystem:                      0x0003
// DLL characteristics:            0x8560
// Size of stack reserve:          0x00100000
// Size of stack commit:           0x00001000
// Size of heap reserve:           0x00100000
// Size of heap commit:            0x00001000
// Loader flags:                   0x00000000
// Directories:                    0x00000010
// 0x00000000 [0x00000000] address [size] of Export Directory:          
// 0x00003e52 [0x0000004f] address [size] of Import Directory:          
// 0x00004000 [0x000004b4] address [size] of Resource Directory:        
// 0x00000000 [0x00000000] address [size] of Exception Directory:       
// 0x00002a00 [0x00002448] address [size] of Security Directory:        
// 0x00006000 [0x0000000c] address [size] of Base Relocation Table:     
// 0x00003d60 [0x00000054] address [size] of Debug Directory:           
// 0x00000000 [0x00000000] address [size] of Architecture Specific:     
// 0x00000000 [0x00000000] address [size] of Global Pointer:            
// 0x00000000 [0x00000000] address [size] of TLS Directory:             
// 0x00000000 [0x00000000] address [size] of Load Config Directory:     
// 0x00000000 [0x00000000] address [size] of Bound Import Directory:    
// 0x00002000 [0x00000008] address [size] of Import Address Table:      
// 0x00000000 [0x00000000] address [size] of Delay Load IAT:            
// 0x00002008 [0x00000048] address [size] of CLR Header:                


// Image sections:
//              .text
//              0x00001eac Virtual Size
//              0x00002000 Virtual Address
//              0x00002000 Size of Raw Data
//              0x00000200 Pointer to Raw Data
//              0x00000000 Pointer to Relocations
//              0x00000000 Pointer to Linenumbers
//                  0x0000 Number of Relocations
//                  0x0000 Number of Linenumbers
//              0x60000020 Characteristics
//                         CNT_CODE
//                         MEM_EXECUTE
//                         MEM_READ

//              .rsrc
//              0x000004b4 Virtual Size
//              0x00004000 Virtual Address
//              0x00000600 Size of Raw Data
//              0x00002200 Pointer to Raw Data
//              0x00000000 Pointer to Relocations
//              0x00000000 Pointer to Linenumbers
//                  0x0000 Number of Relocations
//                  0x0000 Number of Linenumbers
//              0x40000040 Characteristics
//                         CNT_INITIALIZED_DATA
//                         MEM_READ

//              .reloc
//              0x0000000c Virtual Size
//              0x00006000 Virtual Address
//              0x00000200 Size of Raw Data
//              0x00002800 Pointer to Raw Data
//              0x00000000 Pointer to Relocations
//              0x00000000 Pointer to Linenumbers
//                  0x0000 Number of Relocations
//                  0x0000 Number of Linenumbers
//              0x42000040 Characteristics
//                         CNT_INITIALIZED_DATA
//                         MEM_DISCARDABLE
//                         MEM_READ

// Base Relocation Table
//              0x00003000 Page RVA
//              0x0000000c Block Size
//              0x00000002 Number of Entries
//              Entry 1: Type 0x3 Offset 0x00000ea8
//              Entry 2: Type 0x0 Offset 0x00000000

// Import Address Table
//     DLL : mscoree.dll
//              0x00002000 Import Address Table
//              0x00003e94 Import Name Table
//              0          Time Date Stamp
//              0          Index of First Forwarder Reference
//
//              0x0000  _CorDllMain

// Delay Load Import Address Table
// No data.

// Entry point code:
//FF 25 00 20 00 10 


// ----- CLR Header:
// Header size:                        0x00000048
// Major runtime version:              0x0002
// Minor runtime version:              0x0005
// 0x00002170 [0x00001b70] address [size] of Metadata Directory:        
// Flags:                              0x00000009
// Entry point token:                  0x00000000
// 0x00000000 [0x00000000] address [size] of Resources Directory:       
// 0x00003ce0 [0x00000080] address [size] of Strong Name Signature:     
// 0x00000000 [0x00000000] address [size] of CodeManager Table:         
// 0x00000000 [0x00000000] address [size] of VTableFixups Directory:    
// 0x00000000 [0x00000000] address [size] of Export Address Table:      
// 0x00000000 [0x00000000] address [size] of Precompile Header:         

// Metadata Header
//    Storage Signature:
//              0x424a5342 Signature
//                  0x0001 Major Version
//                  0x0001 Minor Version
//              0x00000000 Extra Data Offset
//              0x0000000c Version String Length
//              'v4.0.30319' Version String
//    Storage Header:
//                    0x00 Flags
//                  0x0005 Number of Streams
//    Stream 1:
//              0x0000006c Offset
//              0x00000cc8 Size
//              '#~' Name
//    Stream 2:
//              0x00000d34 Offset
//              0x000009a0 Size
//              '#Strings' Name
//    Stream 3:
//              0x000016d4 Offset
//              0x00000004 Size
//              '#US' Name
//    Stream 4:
//              0x000016d8 Offset
//              0x00000010 Size
//              '#GUID' Name
//    Stream 5:
//              0x000016e8 Offset
//              0x00000488 Size
//              '#Blob' Name

//    Metadata Stream Header:
//              0x00000000 Reserved
//                    0x02 Major
//                    0x00 Minor
//                    0x00 Heaps
//                    0x01 Rid
//      0x0000000901a01f57 MaskValid
//      0x000016003301fa00 Sorted

// Code Manager Table:
//  default


// Export Address Table Jumps:
// No data.

// File size            : 20040
// PE header size       : 512 (496 used)    ( 2.55%)
// PE additional info   : 10747             (53.63%)
// Num.of PE sections   : 3
// CLR header size     : 72                 ( 0.36%)
// CLR meta-data size  : 7024               (35.05%)
// CLR additional info : 128                ( 0.64%)
// CLR method headers  : 75                 ( 0.37%)
// Managed code         : 211               ( 1.05%)
// Data                 : 2048              (10.22%)
// Unaccounted          : -777              (-3.88%)

// Num.of PE sections   : 3
//   .text    - 8192
//   .rsrc    - 1536
//   .reloc   - 512

// CLR meta-data size  : 7024
//   Module        -    1 (10 bytes)
//   TypeDef       -   14 (196 bytes)     0 interfaces, 0 explicit layout
//   TypeRef       -   32 (192 bytes)
//   MethodDef     -   75 (1050 bytes)    0 abstract, 0 native, 75 bodies
//   FieldDef      -   51 (306 bytes)     6 constant
//   MemberRef     -   20 (120 bytes)
//   ParamDef      -  122 (732 bytes)
//   Constant      -   38 (228 bytes)
//   CustomAttribute-   19 (114 bytes)
//   InterfaceImpl -    1 (4 bytes)
//   PropertyMap   -    5 (20 bytes)
//   Property      -   11 (66 bytes)
//   MethodSemantic-   11 (66 bytes)
//   Assembly      -    1 (22 bytes)
//   AssemblyRef   -    3 (60 bytes)
//   Strings       -  2463 bytes
//   Blobs         -  1160 bytes
//   UserStrings   -     4 bytes
//   Guids         -    16 bytes
//   Uncategorized -   195 bytes

// CLR additional info : 128

// CLR method headers : 75
//   Num.of method bodies  - 75
//   Num.of fat headers    - 0
//   Num.of tiny headers   - 75

// Managed code : 211
//   Ave method size - 2
// Classes defined in this module:
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Class RegistryAccessRule             (public) (auto) (ansi) (sealed) 
// Class RegistryAuditRule              (public) (auto) (ansi) (sealed) 
// Class RegistryRights                 (public) (auto) (ansi) (sealed) 
// Class RegistrySecurity               (public) (auto) (ansi) (sealed) 
// Class Registry                       (public) (abstract) (auto) (ansi) (sealed) 
// Class RegistryHive                   (public) (auto) (ansi) (sealed) 
// Class RegistryKey                    (public) (auto) (ansi) (sealed) 
// Class RegistryKeyPermissionCheck     (public) (auto) (ansi) (sealed) 
// Class RegistryOptions                (public) (auto) (ansi) (sealed) 
// Class RegistryValueKind              (public) (auto) (ansi) (sealed) 
// Class RegistryValueOptions           (public) (auto) (ansi) (sealed) 
// Class RegistryView                   (public) (auto) (ansi) (sealed) 
// Class SafeRegistryHandle             (public) (auto) (ansi) (sealed) 
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


// Metadata version: v4.0.30319
.assembly extern /*23000001*/ netstandard
{
  .publickeytoken = (CC 7B 13 FF CD 2D DD 51 )                         // .{...-.Q
  .ver 2:0:0:0
}
.assembly extern /*23000002*/ System.Security.AccessControl
{
  .publickeytoken = (B0 3F 5F 7F 11 D5 0A 3A )                         // .?_....:
  .ver 4:1:1:0
}
.assembly extern /*23000003*/ System.Security.Principal.Windows
{
  .publickeytoken = (B0 3F 5F 7F 11 D5 0A 3A )                         // .?_....:
  .ver 4:1:1:0
}
.assembly /*20000001*/ noplatform Microsoft.Win32.Registry
{
  .custom /*0C000001:0A000001*/ instance void [netstandard/*23000001*/]System.Runtime.CompilerServices.CompilationRelaxationsAttribute/*01000001*/::.ctor(int32) /* 0A000001 */ = ( 01 00 08 00 00 00 00 00 ) 
  .custom /*0C000002:0A000002*/ instance void [netstandard/*23000001*/]System.Runtime.CompilerServices.RuntimeCompatibilityAttribute/*01000002*/::.ctor() /* 0A000002 */ = ( 01 00 01 00 54 02 16 57 72 61 70 4E 6F 6E 45 78   // ....T..WrapNonEx
                                                                                                                                                                             63 65 70 74 69 6F 6E 54 68 72 6F 77 73 01 )       // ceptionThrows.

  // --- The following custom attribute is added automatically, do not uncomment -------
  //  .custom /*0C000003:0A000003*/ instance void [netstandard/*23000001*/]System.Diagnostics.DebuggableAttribute/*01000003*/::.ctor(valuetype [netstandard/*23000001*/]System.Diagnostics.DebuggableAttribute/*01000003*//DebuggingModes/*01000004*/) /* 0A000003 */ = ( 01 00 02 00 00 00 00 00 ) 

  .custom /*0C000004:0A000004*/ instance void [netstandard/*23000001*/]System.Reflection.AssemblyDefaultAliasAttribute/*01000005*/::.ctor(string) /* 0A000004 */ = ( 01 00 18 4D 69 63 72 6F 73 6F 66 74 2E 57 69 6E   // ...Microsoft.Win
                                                                                                                                                                     33 32 2E 52 65 67 69 73 74 72 79 00 00 )          // 32.Registry..
  .custom /*0C000005:0A000005*/ instance void [netstandard/*23000001*/]System.Reflection.AssemblyMetadataAttribute/*01000006*/::.ctor(string,
                                                                                                                                      string) /* 0A000005 */ = ( 01 00 15 2E 4E 45 54 46 72 61 6D 65 77 6F 72 6B   // ....NETFramework
                                                                                                                                                                 41 73 73 65 6D 62 6C 79 00 00 00 )                // Assembly...
  .custom /*0C000006:0A000005*/ instance void [netstandard/*23000001*/]System.Reflection.AssemblyMetadataAttribute/*01000006*/::.ctor(string,
                                                                                                                                      string) /* 0A000005 */ = ( 01 00 0B 53 65 72 76 69 63 65 61 62 6C 65 04 54   // ...Serviceable.T
                                                                                                                                                                 72 75 65 00 00 )                                  // rue..
  .custom /*0C000007:0A000005*/ instance void [netstandard/*23000001*/]System.Reflection.AssemblyMetadataAttribute/*01000006*/::.ctor(string,
                                                                                                                                      string) /* 0A000005 */ = ( 01 00 0B 50 72 65 66 65 72 49 6E 62 6F 78 04 54   // ...PreferInbox.T
                                                                                                                                                                 72 75 65 00 00 )                                  // rue..
  .custom /*0C000008:0A000006*/ instance void [netstandard/*23000001*/]System.Reflection.AssemblyCompanyAttribute/*01000007*/::.ctor(string) /* 0A000006 */ = ( 01 00 15 4D 69 63 72 6F 73 6F 66 74 20 43 6F 72   // ...Microsoft Cor
                                                                                                                                                                70 6F 72 61 74 69 6F 6E 00 00 )                   // poration..
  .custom /*0C000009:0A000007*/ instance void [netstandard/*23000001*/]System.Reflection.AssemblyCopyrightAttribute/*01000008*/::.ctor(string) /* 0A000007 */ = ( 01 00 2E C2 A9 20 4D 69 63 72 6F 73 6F 66 74 20   // ..... Microsoft 
                                                                                                                                                                  43 6F 72 70 6F 72 61 74 69 6F 6E 2E 20 41 6C 6C   // Corporation. All
                                                                                                                                                                  20 72 69 67 68 74 73 20 72 65 73 65 72 76 65 64   //  rights reserved
                                                                                                                                                                  2E 00 00 )                                        // ...
  .custom /*0C00000A:0A000008*/ instance void [netstandard/*23000001*/]System.Reflection.AssemblyDescriptionAttribute/*01000009*/::.ctor(string) /* 0A000008 */ = ( 01 00 18 4D 69 63 72 6F 73 6F 66 74 2E 57 69 6E   // ...Microsoft.Win
                                                                                                                                                                    33 32 2E 52 65 67 69 73 74 72 79 00 00 )          // 32.Registry..
  .custom /*0C00000B:0A000009*/ instance void [netstandard/*23000001*/]System.Reflection.AssemblyFileVersionAttribute/*0100000A*/::.ctor(string) /* 0A000009 */ = ( 01 00 0E 34 2E 37 30 30 2E 31 39 2E 35 36 34 30   // ...4.700.19.5640
                                                                                                                                                                    34 00 00 )                                        // 4..
  .custom /*0C00000C:0A00000A*/ instance void [netstandard/*23000001*/]System.Reflection.AssemblyInformationalVersionAttribute/*0100000B*/::.ctor(string) /* 0A00000A */ = ( 01 00 2E 33 2E 31 2E 30 2B 30 66 37 66 33 38 63   // ...3.1.0+0f7f38c
                                                                                                                                                                             34 66 64 33 32 33 62 32 36 64 61 31 30 63 63 65   // 4fd323b26da10cce
                                                                                                                                                                             39 35 66 38 35 37 66 37 37 66 30 66 30 39 62 34   // 95f857f77f0f09b4
                                                                                                                                                                             38 00 00 )                                        // 8..
  .custom /*0C00000D:0A00000B*/ instance void [netstandard/*23000001*/]System.Reflection.AssemblyProductAttribute/*0100000C*/::.ctor(string) /* 0A00000B */ = ( 01 00 15 4D 69 63 72 6F 73 6F 66 74 C2 AE 20 2E   // ...Microsoft.. .
                                                                                                                                                                4E 45 54 20 43 6F 72 65 00 00 )                   // NET Core..
  .custom /*0C00000E:0A00000C*/ instance void [netstandard/*23000001*/]System.Reflection.AssemblyTitleAttribute/*0100000D*/::.ctor(string) /* 0A00000C */ = ( 01 00 18 4D 69 63 72 6F 73 6F 66 74 2E 57 69 6E   // ...Microsoft.Win
                                                                                                                                                              33 32 2E 52 65 67 69 73 74 72 79 00 00 )          // 32.Registry..
  .custom /*0C00000F:0A00000D*/ instance void [netstandard/*23000001*/]System.Runtime.CompilerServices.ReferenceAssemblyAttribute/*0100000E*/::.ctor() /* 0A00000D */ = ( 01 00 00 00 ) 
  .custom /*0C000010:0A00000E*/ instance void [netstandard/*23000001*/]System.CLSCompliantAttribute/*0100000F*/::.ctor(bool) /* 0A00000E */ = ( 01 00 01 00 00 ) 
  .publickey = (00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00   // .$..............
                00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00   // .$..RSA1........
                07 D1 FA 57 C4 AE D9 F0 A3 2E 84 AA 0F AE FD 0D   // ...W............
                E9 E8 FD 6A EC 8F 87 FB 03 76 6C 83 4C 99 92 1E   // ...j.....vl.L...
                B2 3B E7 9A D9 D5 DC C1 DD 9A D2 36 13 21 02 90   // .;.........6.!..
                0B 72 3C F9 80 95 7F C4 E1 77 10 8F C6 07 77 4F   // .r<......w....wO
                29 E8 32 0E 92 EA 05 EC E4 E8 21 C0 A5 EF E8 F1   // ).2.......!.....
                64 5C 4C 0C 93 C1 AB 99 28 5D 62 2C AA 65 2C 1D   // d\L.....(]b,.e,.
                FA D6 3D 74 5D 6F 2D E5 F1 7E 5E AF 0F C4 96 3D   // ..=t]o-..~^....=
                26 1C 8A 12 43 65 18 20 6D C0 93 34 4D 5A D2 93 ) // &...Ce. m..4MZ..
  .hash algorithm 0x00008004
  .ver 4:1:3:0
}
.module Microsoft.Win32.Registry.dll
// MVID: {bfcdcd84-af29-4062-9a9a-84911911989b}
.imagebase 0x10000000
.file alignment 0x00000200
.stackreserve 0x00100000
.subsystem 0x0003       // WINDOWS_CUI
.corflags 0x00000009    //  ILONLY
// Image base: 0x00007FADBE103000


// =============== CLASS MEMBERS DECLARATION ===================

.class /*02000002*/ public auto ansi sealed beforefieldinit System.Security.AccessControl.RegistryAccessRule
       extends [System.Security.AccessControl/*23000002*/]System.Security.AccessControl.AccessRule/*01000010*/
{
  .method /*06000001*/ public hidebysig specialname rtspecialname 
          instance void  .ctor(class [System.Security.Principal.Windows/*23000003*/]System.Security.Principal.IdentityReference/*01000011*/ identity,
                               valuetype System.Security.AccessControl.RegistryRights/*02000004*/ registryRights,
                               valuetype [System.Security.AccessControl/*23000002*/]System.Security.AccessControl.AccessControlType/*01000012*/ 'type') cil managed
  // SIG: 20 03 01 12 45 11 10 11 49
  {
    // Method begins at RVA 0x2050
    // Code size       13 (0xd)
    .maxstack  8
    IL_0000:  /* 02   |                  */ ldarg.0
    IL_0001:  /* 14   |                  */ ldnull
    IL_0002:  /* 16   |                  */ ldc.i4.0
    IL_0003:  /* 16   |                  */ ldc.i4.0
    IL_0004:  /* 16   |                  */ ldc.i4.0
    IL_0005:  /* 16   |                  */ ldc.i4.0
    IL_0006:  /* 16   |                  */ ldc.i4.0
    IL_0007:  /* 28   | (0A)000010       */ call       instance void [System.Security.AccessControl/*23000002*/]System.Security.AccessControl.AccessRule/*01000010*/::.ctor(class [System.Security.Principal.Windows/*23000003*/]System.Security.Principal.IdentityReference/*01000011*/,
                                                                                                                                                                            int32,
                                                                                                                                                                            bool,
                                                                                                                                                                            valuetype [System.Security.AccessControl/*23000002*/]System.Security.AccessControl.InheritanceFlags/*01000013*/,
                                                                                                                                                                            valuetype [System.Security.AccessControl/*23000002*/]System.Security.AccessControl.PropagationFlags/*01000014*/,
                                                                                                                                                                            valuetype [System.Security.AccessControl/*23000002*/]System.Security.AccessControl.AccessControlType/*01000012*/) /* 0A000010 */
    IL_000c:  /* 2A   |                  */ ret
  } // end of method RegistryAccessRule::.ctor

  .method /*06000002*/ public hidebysig specialname rtspecialname 
          instance void  .ctor(class [System.Security.Principal.Windows/*23000003*/]System.Security.Principal.IdentityReference/*01000011*/ identity,
                               valuetype System.Security.AccessControl.RegistryRights/*02000004*/ registryRights,
                               valuetype [System.Security.AccessControl/*23000002*/]System.Security.AccessControl.InheritanceFlags/*01000013*/ inheritanceFlags,
                               valuetype [System.Security.AccessControl/*23000002*/]System.Security.AccessControl.PropagationFlags/*01000014*/ propagationFlags,
                               valuetype [System.Security.AccessControl/*23000002*/]System.Security.AccessControl.AccessControlType/*01000012*/ 'type') cil managed
  // SIG: 20 05 01 12 45 11 10 11 4D 11 51 11 49
  {
    // Method begins at RVA 0x205e
    // Code size       13 (0xd)
    .maxstack  8
    IL_0000:  /* 02   |                  */ ldarg.0
    IL_0001:  /* 14   |                  */ ldnull
    IL_0002:  /* 16   |                  */ ldc.i4.0
    IL_0003:  /* 16   |                  */ ldc.i4.0
    IL_0004:  /* 16   |                  */ ldc.i4.0
    IL_0005:  /* 16   |                  */ ldc.i4.0
    IL_0006:  /* 16   |                  */ ldc.i4.0
    IL_0007:  /* 28   | (0A)000010       */ call       instance void [System.Security.AccessControl/*23000002*/]System.Security.AccessControl.AccessRule/*01000010*/::.ctor(class [System.Security.Principal.Windows/*23000003*/]System.Security.Principal.IdentityReference/*01000011*/,
                                                                                                                                                                            int32,
                                                                                                                                                                            bool,
                                                                                                                                                                            valuetype [System.Security.AccessControl/*23000002*/]System.Security.AccessControl.InheritanceFlags/*01000013*/,
                                                                                                                                                                            valuetype [System.Security.AccessControl/*23000002*/]System.Security.AccessControl.PropagationFlags/*01000014*/,
                                                                                                                                                                            valuetype [System.Security.AccessControl/*23000002*/]System.Security.AccessControl.AccessControlType/*01000012*/) /* 0A000010 */
    IL_000c:  /* 2A   |                  */ ret
  } // end of method RegistryAccessRule::.ctor

  .method /*06000003*/ public hidebysig specialname rtspecialname 
          instance void  .ctor(string identity,
                               valuetype System.Security.AccessControl.RegistryRights/*02000004*/ registryRights,
                               valuetype [System.Security.AccessControl/*23000002*/]System.Security.AccessControl.AccessControlType/*01000012*/ 'type') cil managed
  // SIG: 20 03 01 0E 11 10 11 49
  {
    // Method begins at RVA 0x206c
    // Code size       13 (0xd)
    .maxstack  8
    IL_0000:  /* 02   |                  */ ldarg.0
    IL_0001:  /* 14   |                  */ ldnull
    IL_0002:  /* 16   |                  */ ldc.i4.0
    IL_0003:  /* 16   |                  */ ldc.i4.0
    IL_0004:  /* 16   |                  */ ldc.i4.0
    IL_0005:  /* 16   |                  */ ldc.i4.0
    IL_0006:  /* 16   |                  */ ldc.i4.0
    IL_0007:  /* 28   | (0A)000010       */ call       instance void [System.Security.AccessControl/*23000002*/]System.Security.AccessControl.AccessRule/*01000010*/::.ctor(class [System.Security.Principal.Windows/*23000003*/]System.Security.Principal.IdentityReference/*01000011*/,
                                                                                                                                                                            int32,
                                                                                                                                                                            bool,
                                                                                                                                                                            valuetype [System.Security.AccessControl/*23000002*/]System.Security.AccessControl.InheritanceFlags/*01000013*/,
                                                                                                                                                                            valuetype [System.Security.AccessControl/*23000002*/]System.Security.AccessControl.PropagationFlags/*01000014*/,
                                                                                                                                                                            valuetype [System.Security.AccessControl/*23000002*/]System.Security.AccessControl.AccessControlType/*01000012*/) /* 0A000010 */
    IL_000c:  /* 2A   |                  */ ret
  } // end of method RegistryAccessRule::.ctor

  .method /*06000004*/ public hidebysig specialname rtspecialname 
          instance void  .ctor(string identity,
                               valuetype System.Security.AccessControl.RegistryRights/*02000004*/ registryRights,
                               valuetype [System.Security.AccessControl/*23000002*/]System.Security.AccessControl.InheritanceFlags/*01000013*/ inheritanceFlags,
                               valuetype [System.Security.AccessControl/*23000002*/]System.Security.AccessControl.PropagationFlags/*01000014*/ propagationFlags,
                               valuetype [System.Security.AccessControl/*23000002*/]System.Security.AccessControl.AccessControlType/*01000012*/ 'type') cil managed
  // SIG: 20 05 01 0E 11 10 11 4D 11 51 11 49
  {
    // Method begins at RVA 0x207a
    // Code size       13 (0xd)
    .maxstack  8
    IL_0000:  /* 02   |                  */ ldarg.0
    IL_0001:  /* 14   |                  */ ldnull
    IL_0002:  /* 16   |                  */ ldc.i4.0
    IL_0003:  /* 16   |                  */ ldc.i4.0
    IL_0004:  /* 16   |                  */ ldc.i4.0
    IL_0005:  /* 16   |                  */ ldc.i4.0
    IL_0006:  /* 16   |                  */ ldc.i4.0
    IL_0007:  /* 28   | (0A)000010       */ call       instance void [System.Security.AccessControl/*23000002*/]System.Security.AccessControl.AccessRule/*01000010*/::.ctor(class [System.Security.Principal.Windows/*23000003*/]System.Security.Principal.IdentityReference/*01000011*/,
                                                                                                                                                                            int32,
                                                                                                                                                                            bool,
                                                                                                                                                                            valuetype [System.Security.AccessControl/*23000002*/]System.Security.AccessControl.InheritanceFlags/*01000013*/,
                                                                                                                                                                            valuetype [System.Security.AccessControl/*23000002*/]System.Security.AccessControl.PropagationFlags/*01000014*/,
                                                                                                                                                                            valuetype [System.Security.AccessControl/*23000002*/]System.Security.AccessControl.AccessControlType/*01000012*/) /* 0A000010 */
    IL_000c:  /* 2A   |                  */ ret
  } // end of method RegistryAccessRule::.ctor

  .method /*06000005*/ public hidebysig specialname 
          instance valuetype System.Security.AccessControl.RegistryRights/*02000004*/ 
          get_RegistryRights() cil managed
  // SIG: 20 00 11 10
  {
    // Method begins at RVA 0x2088
    // Code size       2 (0x2)
    .maxstack  8
    IL_0000:  /* 14   |                  */ ldnull
    IL_0001:  /* 7A   |                  */ throw
  } // end of method RegistryAccessRule::get_RegistryRights

  .property /*17000001*/ instance callconv(8) valuetype System.Security.AccessControl.RegistryRights/*02000004*/
          RegistryRights()
  {
    .get instance valuetype System.Security.AccessControl.RegistryRights/*02000004*/ System.Security.AccessControl.RegistryAccessRule/*02000002*/::get_RegistryRights() /* 06000005 */
  } // end of property RegistryAccessRule::RegistryRights
} // end of class System.Security.AccessControl.RegistryAccessRule

.class /*02000003*/ public auto ansi sealed beforefieldinit System.Security.AccessControl.RegistryAuditRule
       extends [System.Security.AccessControl/*23000002*/]System.Security.AccessControl.AuditRule/*01000015*/
{
  .method /*06000006*/ public hidebysig specialname rtspecialname 
          instance void  .ctor(class [System.Security.Principal.Windows/*23000003*/]System.Security.Principal.IdentityReference/*01000011*/ identity,
                               valuetype System.Security.AccessControl.RegistryRights/*02000004*/ registryRights,
                               valuetype [System.Security.AccessControl/*23000002*/]System.Security.AccessControl.InheritanceFlags/*01000013*/ inheritanceFlags,
                               valuetype [System.Security.AccessControl/*23000002*/]System.Security.AccessControl.PropagationFlags/*01000014*/ propagationFlags,
                               valuetype [System.Security.AccessControl/*23000002*/]System.Security.AccessControl.AuditFlags/*01000016*/ 'flags') cil managed
  // SIG: 20 05 01 12 45 11 10 11 4D 11 51 11 59
  {
    // Method begins at RVA 0x208b
    // Code size       13 (0xd)
    .maxstack  8
    IL_0000:  /* 02   |                  */ ldarg.0
    IL_0001:  /* 14   |                  */ ldnull
    IL_0002:  /* 16   |                  */ ldc.i4.0
    IL_0003:  /* 16   |                  */ ldc.i4.0
    IL_0004:  /* 16   |                  */ ldc.i4.0
    IL_0005:  /* 16   |                  */ ldc.i4.0
    IL_0006:  /* 16   |                  */ ldc.i4.0
    IL_0007:  /* 28   | (0A)000011       */ call       instance void [System.Security.AccessControl/*23000002*/]System.Security.AccessControl.AuditRule/*01000015*/::.ctor(class [System.Security.Principal.Windows/*23000003*/]System.Security.Principal.IdentityReference/*01000011*/,
                                                                                                                                                                           int32,
                                                                                                                                                                           bool,
                                                                                                                                                                           valuetype [System.Security.AccessControl/*23000002*/]System.Security.AccessControl.InheritanceFlags/*01000013*/,
                                                                                                                                                                           valuetype [System.Security.AccessControl/*23000002*/]System.Security.AccessControl.PropagationFlags/*01000014*/,
                                                                                                                                                                           valuetype [System.Security.AccessControl/*23000002*/]System.Security.AccessControl.AuditFlags/*01000016*/) /* 0A000011 */
    IL_000c:  /* 2A   |                  */ ret
  } // end of method RegistryAuditRule::.ctor

  .method /*06000007*/ public hidebysig specialname rtspecialname 
          instance void  .ctor(string identity,
                               valuetype System.Security.AccessControl.RegistryRights/*02000004*/ registryRights,
                               valuetype [System.Security.AccessControl/*23000002*/]System.Security.AccessControl.InheritanceFlags/*01000013*/ inheritanceFlags,
                               valuetype [System.Security.AccessControl/*23000002*/]System.Security.AccessControl.PropagationFlags/*01000014*/ propagationFlags,
                               valuetype [System.Security.AccessControl/*23000002*/]System.Security.AccessControl.AuditFlags/*01000016*/ 'flags') cil managed
  // SIG: 20 05 01 0E 11 10 11 4D 11 51 11 59
  {
    // Method begins at RVA 0x2099
    // Code size       13 (0xd)
    .maxstack  8
    IL_0000:  /* 02   |                  */ ldarg.0
    IL_0001:  /* 14   |                  */ ldnull
    IL_0002:  /* 16   |                  */ ldc.i4.0
    IL_0003:  /* 16   |                  */ ldc.i4.0
    IL_0004:  /* 16   |                  */ ldc.i4.0
    IL_0005:  /* 16   |                  */ ldc.i4.0
    IL_0006:  /* 16   |                  */ ldc.i4.0
    IL_0007:  /* 28   | (0A)000011       */ call       instance void [System.Security.AccessControl/*23000002*/]System.Security.AccessControl.AuditRule/*01000015*/::.ctor(class [System.Security.Principal.Windows/*23000003*/]System.Security.Principal.IdentityReference/*01000011*/,
                                                                                                                                                                           int32,
                                                                                                                                                                           bool,
                                                                                                                                                                           valuetype [System.Security.AccessControl/*23000002*/]System.Security.AccessControl.InheritanceFlags/*01000013*/,
                                                                                                                                                                           valuetype [System.Security.AccessControl/*23000002*/]System.Security.AccessControl.PropagationFlags/*01000014*/,
                                                                                                                                                                           valuetype [System.Security.AccessControl/*23000002*/]System.Security.AccessControl.AuditFlags/*01000016*/) /* 0A000011 */
    IL_000c:  /* 2A   |                  */ ret
  } // end of method RegistryAuditRule::.ctor

  .method /*06000008*/ public hidebysig specialname 
          instance valuetype System.Security.AccessControl.RegistryRights/*02000004*/ 
          get_RegistryRights() cil managed
  // SIG: 20 00 11 10
  {
    // Method begins at RVA 0x20a7
    // Code size       2 (0x2)
    .maxstack  8
    IL_0000:  /* 14   |                  */ ldnull
    IL_0001:  /* 7A   |                  */ throw
  } // end of method RegistryAuditRule::get_RegistryRights

  .property /*17000002*/ instance callconv(8) valuetype System.Security.AccessControl.RegistryRights/*02000004*/
          RegistryRights()
  {
    .get instance valuetype System.Security.AccessControl.RegistryRights/*02000004*/ System.Security.AccessControl.RegistryAuditRule/*02000003*/::get_RegistryRights() /* 06000008 */
  } // end of property RegistryAuditRule::RegistryRights
} // end of class System.Security.AccessControl.RegistryAuditRule

.class /*02000004*/ public auto ansi sealed System.Security.AccessControl.RegistryRights
       extends [netstandard/*23000001*/]System.Enum/*01000018*/
{
  .custom /*0C000011:0A00000F*/ instance void [netstandard/*23000001*/]System.FlagsAttribute/*01000017*/::.ctor() /* 0A00000F */ = ( 01 00 00 00 ) 
  .field /*04000001*/ public specialname rtspecialname int32 value__
  .field /*04000002*/ public static literal valuetype System.Security.AccessControl.RegistryRights/*02000004*/ QueryValues = int32(0x00000001)
  .field /*04000003*/ public static literal valuetype System.Security.AccessControl.RegistryRights/*02000004*/ SetValue = int32(0x00000002)
  .field /*04000004*/ public static literal valuetype System.Security.AccessControl.RegistryRights/*02000004*/ CreateSubKey = int32(0x00000004)
  .field /*04000005*/ public static literal valuetype System.Security.AccessControl.RegistryRights/*02000004*/ EnumerateSubKeys = int32(0x00000008)
  .field /*04000006*/ public static literal valuetype System.Security.AccessControl.RegistryRights/*02000004*/ Notify = int32(0x00000010)
  .field /*04000007*/ public static literal valuetype System.Security.AccessControl.RegistryRights/*02000004*/ CreateLink = int32(0x00000020)
  .field /*04000008*/ public static literal valuetype System.Security.AccessControl.RegistryRights/*02000004*/ Delete = int32(0x00010000)
  .field /*04000009*/ public static literal valuetype System.Security.AccessControl.RegistryRights/*02000004*/ ReadPermissions = int32(0x00020000)
  .field /*0400000A*/ public static literal valuetype System.Security.AccessControl.RegistryRights/*02000004*/ WriteKey = int32(0x00020006)
  .field /*0400000B*/ public static literal valuetype System.Security.AccessControl.RegistryRights/*02000004*/ ExecuteKey = int32(0x00020019)
  .field /*0400000C*/ public static literal valuetype System.Security.AccessControl.RegistryRights/*02000004*/ ReadKey = int32(0x00020019)
  .field /*0400000D*/ public static literal valuetype System.Security.AccessControl.RegistryRights/*02000004*/ ChangePermissions = int32(0x00040000)
  .field /*0400000E*/ public static literal valuetype System.Security.AccessControl.RegistryRights/*02000004*/ TakeOwnership = int32(0x00080000)
  .field /*0400000F*/ public static literal valuetype System.Security.AccessControl.RegistryRights/*02000004*/ FullControl = int32(0x000F003F)
} // end of class System.Security.AccessControl.RegistryRights

.class /*02000005*/ public auto ansi sealed beforefieldinit System.Security.AccessControl.RegistrySecurity
       extends [System.Security.AccessControl/*23000002*/]System.Security.AccessControl.NativeObjectSecurity/*01000019*/
{
  .method /*06000009*/ public hidebysig specialname rtspecialname 
          instance void  .ctor() cil managed
  // SIG: 20 00 01
  {
    // Method begins at RVA 0x20aa
    // Code size       9 (0x9)
    .maxstack  8
    IL_0000:  /* 02   |                  */ ldarg.0
    IL_0001:  /* 16   |                  */ ldc.i4.0
    IL_0002:  /* 16   |                  */ ldc.i4.0
    IL_0003:  /* 28   | (0A)000012       */ call       instance void [System.Security.AccessControl/*23000002*/]System.Security.AccessControl.NativeObjectSecurity/*01000019*/::.ctor(bool,
                                                                                                                                                                                      valuetype [System.Security.AccessControl/*23000002*/]System.Security.AccessControl.ResourceType/*01000020*/) /* 0A000012 */
    IL_0008:  /* 2A   |                  */ ret
  } // end of method RegistrySecurity::.ctor

  .method /*0600000A*/ public hidebysig specialname virtual 
          instance class [netstandard/*23000001*/]System.Type/*0100001A*/ 
          get_AccessRightType() cil managed
  // SIG: 20 00 12 69
  {
    // Method begins at RVA 0x20b4
    // Code size       2 (0x2)
    .maxstack  8
    IL_0000:  /* 14   |                  */ ldnull
    IL_0001:  /* 7A   |                  */ throw
  } // end of method RegistrySecurity::get_AccessRightType

  .method /*0600000B*/ public hidebysig specialname virtual 
          instance class [netstandard/*23000001*/]System.Type/*0100001A*/ 
          get_AccessRuleType() cil managed
  // SIG: 20 00 12 69
  {
    // Method begins at RVA 0x20b7
    // Code size       2 (0x2)
    .maxstack  8
    IL_0000:  /* 14   |                  */ ldnull
    IL_0001:  /* 7A   |                  */ throw
  } // end of method RegistrySecurity::get_AccessRuleType

  .method /*0600000C*/ public hidebysig specialname virtual 
          instance class [netstandard/*23000001*/]System.Type/*0100001A*/ 
          get_AuditRuleType() cil managed
  // SIG: 20 00 12 69
  {
    // Method begins at RVA 0x20ba
    // Code size       2 (0x2)
    .maxstack  8
    IL_0000:  /* 14   |                  */ ldnull
    IL_0001:  /* 7A   |                  */ throw
  } // end of method RegistrySecurity::get_AuditRuleType

  .method /*0600000D*/ public hidebysig virtual 
          instance class [System.Security.AccessControl/*23000002*/]System.Security.AccessControl.AccessRule/*01000010*/ 
          AccessRuleFactory(class [System.Security.Principal.Windows/*23000003*/]System.Security.Principal.IdentityReference/*01000011*/ identityReference,
                            int32 accessMask,
                            bool isInherited,
                            valuetype [System.Security.AccessControl/*23000002*/]System.Security.AccessControl.InheritanceFlags/*01000013*/ inheritanceFlags,
                            valuetype [System.Security.AccessControl/*23000002*/]System.Security.AccessControl.PropagationFlags/*01000014*/ propagationFlags,
                            valuetype [System.Security.AccessControl/*23000002*/]System.Security.AccessControl.AccessControlType/*01000012*/ 'type') cil managed
  // SIG: 20 06 12 41 12 45 08 02 11 4D 11 51 11 49
  {
    // Method begins at RVA 0x20bd
    // Code size       2 (0x2)
    .maxstack  8
    IL_0000:  /* 14   |                  */ ldnull
    IL_0001:  /* 7A   |                  */ throw
  } // end of method RegistrySecurity::AccessRuleFactory

  .method /*0600000E*/ public hidebysig instance void 
          AddAccessRule(class System.Security.AccessControl.RegistryAccessRule/*02000002*/ rule) cil managed
  // SIG: 20 01 01 12 08
  {
    // Method begins at RVA 0x20c0
    // Code size       1 (0x1)
    .maxstack  8
    IL_0000:  /* 2A   |                  */ ret
  } // end of method RegistrySecurity::AddAccessRule

  .method /*0600000F*/ public hidebysig instance void 
          AddAuditRule(class System.Security.AccessControl.RegistryAuditRule/*02000003*/ rule) cil managed
  // SIG: 20 01 01 12 0C
  {
    // Method begins at RVA 0x20c2
    // Code size       1 (0x1)
    .maxstack  8
    IL_0000:  /* 2A   |                  */ ret
  } // end of method RegistrySecurity::AddAuditRule

  .method /*06000010*/ public hidebysig virtual 
          instance class [System.Security.AccessControl/*23000002*/]System.Security.AccessControl.AuditRule/*01000015*/ 
          AuditRuleFactory(class [System.Security.Principal.Windows/*23000003*/]System.Security.Principal.IdentityReference/*01000011*/ identityReference,
                           int32 accessMask,
                           bool isInherited,
                           valuetype [System.Security.AccessControl/*23000002*/]System.Security.AccessControl.InheritanceFlags/*01000013*/ inheritanceFlags,
                           valuetype [System.Security.AccessControl/*23000002*/]System.Security.AccessControl.PropagationFlags/*01000014*/ propagationFlags,
                           valuetype [System.Security.AccessControl/*23000002*/]System.Security.AccessControl.AuditFlags/*01000016*/ 'flags') cil managed
  // SIG: 20 06 12 55 12 45 08 02 11 4D 11 51 11 59
  {
    // Method begins at RVA 0x20c4
    // Code size       2 (0x2)
    .maxstack  8
    IL_0000:  /* 14   |                  */ ldnull
    IL_0001:  /* 7A   |                  */ throw
  } // end of method RegistrySecurity::AuditRuleFactory

  .method /*06000011*/ public hidebysig instance bool 
          RemoveAccessRule(class System.Security.AccessControl.RegistryAccessRule/*02000002*/ rule) cil managed
  // SIG: 20 01 02 12 08
  {
    // Method begins at RVA 0x20c7
    // Code size       2 (0x2)
    .maxstack  8
    IL_0000:  /* 14   |                  */ ldnull
    IL_0001:  /* 7A   |                  */ throw
  } // end of method RegistrySecurity::RemoveAccessRule

  .method /*06000012*/ public hidebysig instance void 
          RemoveAccessRuleAll(class System.Security.AccessControl.RegistryAccessRule/*02000002*/ rule) cil managed
  // SIG: 20 01 01 12 08
  {
    // Method begins at RVA 0x20ca
    // Code size       1 (0x1)
    .maxstack  8
    IL_0000:  /* 2A   |                  */ ret
  } // end of method RegistrySecurity::RemoveAccessRuleAll

  .method /*06000013*/ public hidebysig instance void 
          RemoveAccessRuleSpecific(class System.Security.AccessControl.RegistryAccessRule/*02000002*/ rule) cil managed
  // SIG: 20 01 01 12 08
  {
    // Method begins at RVA 0x20cc
    // Code size       1 (0x1)
    .maxstack  8
    IL_0000:  /* 2A   |                  */ ret
  } // end of method RegistrySecurity::RemoveAccessRuleSpecific

  .method /*06000014*/ public hidebysig instance bool 
          RemoveAuditRule(class System.Security.AccessControl.RegistryAuditRule/*02000003*/ rule) cil managed
  // SIG: 20 01 02 12 0C
  {
    // Method begins at RVA 0x20ce
    // Code size       2 (0x2)
    .maxstack  8
    IL_0000:  /* 14   |                  */ ldnull
    IL_0001:  /* 7A   |                  */ throw
  } // end of method RegistrySecurity::RemoveAuditRule

  .method /*06000015*/ public hidebysig instance void 
          RemoveAuditRuleAll(class System.Security.AccessControl.RegistryAuditRule/*02000003*/ rule) cil managed
  // SIG: 20 01 01 12 0C
  {
    // Method begins at RVA 0x20d1
    // Code size       1 (0x1)
    .maxstack  8
    IL_0000:  /* 2A   |                  */ ret
  } // end of method RegistrySecurity::RemoveAuditRuleAll

  .method /*06000016*/ public hidebysig instance void 
          RemoveAuditRuleSpecific(class System.Security.AccessControl.RegistryAuditRule/*02000003*/ rule) cil managed
  // SIG: 20 01 01 12 0C
  {
    // Method begins at RVA 0x20d3
    // Code size       1 (0x1)
    .maxstack  8
    IL_0000:  /* 2A   |                  */ ret
  } // end of method RegistrySecurity::RemoveAuditRuleSpecific

  .method /*06000017*/ public hidebysig instance void 
          ResetAccessRule(class System.Security.AccessControl.RegistryAccessRule/*02000002*/ rule) cil managed
  // SIG: 20 01 01 12 08
  {
    // Method begins at RVA 0x20d5
    // Code size       1 (0x1)
    .maxstack  8
    IL_0000:  /* 2A   |                  */ ret
  } // end of method RegistrySecurity::ResetAccessRule

  .method /*06000018*/ public hidebysig instance void 
          SetAccessRule(class System.Security.AccessControl.RegistryAccessRule/*02000002*/ rule) cil managed
  // SIG: 20 01 01 12 08
  {
    // Method begins at RVA 0x20d7
    // Code size       1 (0x1)
    .maxstack  8
    IL_0000:  /* 2A   |                  */ ret
  } // end of method RegistrySecurity::SetAccessRule

  .method /*06000019*/ public hidebysig instance void 
          SetAuditRule(class System.Security.AccessControl.RegistryAuditRule/*02000003*/ rule) cil managed
  // SIG: 20 01 01 12 0C
  {
    // Method begins at RVA 0x20d9
    // Code size       1 (0x1)
    .maxstack  8
    IL_0000:  /* 2A   |                  */ ret
  } // end of method RegistrySecurity::SetAuditRule

  .property /*17000003*/ instance callconv(8) class [netstandard/*23000001*/]System.Type/*0100001A*/
          AccessRightType()
  {
    .get instance class [netstandard/*23000001*/]System.Type/*0100001A*/ System.Security.AccessControl.RegistrySecurity/*02000005*/::get_AccessRightType() /* 0600000A */
  } // end of property RegistrySecurity::AccessRightType
  .property /*17000004*/ instance callconv(8) class [netstandard/*23000001*/]System.Type/*0100001A*/
          AccessRuleType()
  {
    .get instance class [netstandard/*23000001*/]System.Type/*0100001A*/ System.Security.AccessControl.RegistrySecurity/*02000005*/::get_AccessRuleType() /* 0600000B */
  } // end of property RegistrySecurity::AccessRuleType
  .property /*17000005*/ instance callconv(8) class [netstandard/*23000001*/]System.Type/*0100001A*/
          AuditRuleType()
  {
    .get instance class [netstandard/*23000001*/]System.Type/*0100001A*/ System.Security.AccessControl.RegistrySecurity/*02000005*/::get_AuditRuleType() /* 0600000C */
  } // end of property RegistrySecurity::AuditRuleType
} // end of class System.Security.AccessControl.RegistrySecurity

.class /*02000006*/ public abstract auto ansi sealed beforefieldinit Microsoft.Win32.Registry
       extends [netstandard/*23000001*/]System.Object/*0100001B*/
{
  .field /*04000010*/ public static initonly class Microsoft.Win32.RegistryKey/*02000008*/ ClassesRoot
  .field /*04000011*/ public static initonly class Microsoft.Win32.RegistryKey/*02000008*/ CurrentConfig
  .field /*04000012*/ public static initonly class Microsoft.Win32.RegistryKey/*02000008*/ CurrentUser
  .field /*04000013*/ public static initonly class Microsoft.Win32.RegistryKey/*02000008*/ LocalMachine
  .field /*04000014*/ public static initonly class Microsoft.Win32.RegistryKey/*02000008*/ PerformanceData
  .field /*04000015*/ public static initonly class Microsoft.Win32.RegistryKey/*02000008*/ Users
  .method /*0600001A*/ public hidebysig static 
          object  GetValue(string keyName,
                           string valueName,
                           object defaultValue) cil managed
  // SIG: 00 03 1C 0E 0E 1C
  {
    // Method begins at RVA 0x20db
    // Code size       2 (0x2)
    .maxstack  8
    IL_0000:  /* 14   |                  */ ldnull
    IL_0001:  /* 7A   |                  */ throw
  } // end of method Registry::GetValue

  .method /*0600001B*/ public hidebysig static 
          void  SetValue(string keyName,
                         string valueName,
                         object 'value') cil managed
  // SIG: 00 03 01 0E 0E 1C
  {
    // Method begins at RVA 0x20de
    // Code size       1 (0x1)
    .maxstack  8
    IL_0000:  /* 2A   |                  */ ret
  } // end of method Registry::SetValue

  .method /*0600001C*/ public hidebysig static 
          void  SetValue(string keyName,
                         string valueName,
                         object 'value',
                         valuetype Microsoft.Win32.RegistryValueKind/*0200000B*/ valueKind) cil managed
  // SIG: 00 04 01 0E 0E 1C 11 2C
  {
    // Method begins at RVA 0x20e0
    // Code size       1 (0x1)
    .maxstack  8
    IL_0000:  /* 2A   |                  */ ret
  } // end of method Registry::SetValue

} // end of class Microsoft.Win32.Registry

.class /*02000007*/ public auto ansi sealed Microsoft.Win32.RegistryHive
       extends [netstandard/*23000001*/]System.Enum/*01000018*/
{
  .field /*04000016*/ public specialname rtspecialname int32 value__
  .field /*04000017*/ public static literal valuetype Microsoft.Win32.RegistryHive/*02000007*/ ClassesRoot = int32(0x80000000)
  .field /*04000018*/ public static literal valuetype Microsoft.Win32.RegistryHive/*02000007*/ CurrentUser = int32(0x80000001)
  .field /*04000019*/ public static literal valuetype Microsoft.Win32.RegistryHive/*02000007*/ LocalMachine = int32(0x80000002)
  .field /*0400001A*/ public static literal valuetype Microsoft.Win32.RegistryHive/*02000007*/ Users = int32(0x80000003)
  .field /*0400001B*/ public static literal valuetype Microsoft.Win32.RegistryHive/*02000007*/ PerformanceData = int32(0x80000004)
  .field /*0400001C*/ public static literal valuetype Microsoft.Win32.RegistryHive/*02000007*/ CurrentConfig = int32(0x80000005)
} // end of class Microsoft.Win32.RegistryHive

.class /*02000008*/ public auto ansi sealed beforefieldinit Microsoft.Win32.RegistryKey
       extends [netstandard/*23000001*/]System.MarshalByRefObject/*0100001C*/
       implements [netstandard/*23000001*/]System.IDisposable/*0100001D*/
{
  .method /*0600001D*/ assembly hidebysig specialname rtspecialname 
          instance void  .ctor() cil managed
  // SIG: 20 00 01
  {
    // Method begins at RVA 0x20e2
    // Code size       7 (0x7)
    .maxstack  8
    IL_0000:  /* 02   |                  */ ldarg.0
    IL_0001:  /* 28   | (0A)000013       */ call       instance void [netstandard/*23000001*/]System.MarshalByRefObject/*0100001C*/::.ctor() /* 0A000013 */
    IL_0006:  /* 2A   |                  */ ret
  } // end of method RegistryKey::.ctor

  .method /*0600001E*/ public hidebysig specialname 
          instance class Microsoft.Win32.SafeHandles.SafeRegistryHandle/*0200000E*/ 
          get_Handle() cil managed
  // SIG: 20 00 12 38
  {
    // Method begins at RVA 0x20ea
    // Code size       2 (0x2)
    .maxstack  8
    IL_0000:  /* 14   |                  */ ldnull
    IL_0001:  /* 7A   |                  */ throw
  } // end of method RegistryKey::get_Handle

  .method /*0600001F*/ public hidebysig specialname 
          instance string  get_Name() cil managed
  // SIG: 20 00 0E
  {
    // Method begins at RVA 0x20ed
    // Code size       2 (0x2)
    .maxstack  8
    IL_0000:  /* 14   |                  */ ldnull
    IL_0001:  /* 7A   |                  */ throw
  } // end of method RegistryKey::get_Name

  .method /*06000020*/ public hidebysig specialname 
          instance int32  get_SubKeyCount() cil managed
  // SIG: 20 00 08
  {
    // Method begins at RVA 0x20f0
    // Code size       2 (0x2)
    .maxstack  8
    IL_0000:  /* 14   |                  */ ldnull
    IL_0001:  /* 7A   |                  */ throw
  } // end of method RegistryKey::get_SubKeyCount

  .method /*06000021*/ public hidebysig specialname 
          instance int32  get_ValueCount() cil managed
  // SIG: 20 00 08
  {
    // Method begins at RVA 0x20f3
    // Code size       2 (0x2)
    .maxstack  8
    IL_0000:  /* 14   |                  */ ldnull
    IL_0001:  /* 7A   |                  */ throw
  } // end of method RegistryKey::get_ValueCount

  .method /*06000022*/ public hidebysig specialname 
          instance valuetype Microsoft.Win32.RegistryView/*0200000D*/ 
          get_View() cil managed
  // SIG: 20 00 11 34
  {
    // Method begins at RVA 0x20f6
    // Code size       2 (0x2)
    .maxstack  8
    IL_0000:  /* 14   |                  */ ldnull
    IL_0001:  /* 7A   |                  */ throw
  } // end of method RegistryKey::get_View

  .method /*06000023*/ public hidebysig instance void 
          Close() cil managed
  // SIG: 20 00 01
  {
    // Method begins at RVA 0x20f9
    // Code size       1 (0x1)
    .maxstack  8
    IL_0000:  /* 2A   |                  */ ret
  } // end of method RegistryKey::Close

  .method /*06000024*/ public hidebysig instance class Microsoft.Win32.RegistryKey/*02000008*/ 
          CreateSubKey(string subkey) cil managed
  // SIG: 20 01 12 20 0E
  {
    // Method begins at RVA 0x20fb
    // Code size       2 (0x2)
    .maxstack  8
    IL_0000:  /* 14   |                  */ ldnull
    IL_0001:  /* 7A   |                  */ throw
  } // end of method RegistryKey::CreateSubKey

  .method /*06000025*/ public hidebysig instance class Microsoft.Win32.RegistryKey/*02000008*/ 
          CreateSubKey(string subkey,
                       valuetype Microsoft.Win32.RegistryKeyPermissionCheck/*02000009*/ permissionCheck) cil managed
  // SIG: 20 02 12 20 0E 11 24
  {
    // Method begins at RVA 0x20fe
    // Code size       2 (0x2)
    .maxstack  8
    IL_0000:  /* 14   |                  */ ldnull
    IL_0001:  /* 7A   |                  */ throw
  } // end of method RegistryKey::CreateSubKey

  .method /*06000026*/ public hidebysig instance class Microsoft.Win32.RegistryKey/*02000008*/ 
          CreateSubKey(string subkey,
                       valuetype Microsoft.Win32.RegistryKeyPermissionCheck/*02000009*/ permissionCheck,
                       valuetype Microsoft.Win32.RegistryOptions/*0200000A*/ registryOptions) cil managed
  // SIG: 20 03 12 20 0E 11 24 11 28
  {
    // Method begins at RVA 0x2101
    // Code size       2 (0x2)
    .maxstack  8
    IL_0000:  /* 14   |                  */ ldnull
    IL_0001:  /* 7A   |                  */ throw
  } // end of method RegistryKey::CreateSubKey

  .method /*06000027*/ public hidebysig instance class Microsoft.Win32.RegistryKey/*02000008*/ 
          CreateSubKey(string subkey,
                       valuetype Microsoft.Win32.RegistryKeyPermissionCheck/*02000009*/ permissionCheck,
                       valuetype Microsoft.Win32.RegistryOptions/*0200000A*/ registryOptions,
                       class System.Security.AccessControl.RegistrySecurity/*02000005*/ registrySecurity) cil managed
  // SIG: 20 04 12 20 0E 11 24 11 28 12 14
  {
    // Method begins at RVA 0x2104
    // Code size       2 (0x2)
    .maxstack  8
    IL_0000:  /* 14   |                  */ ldnull
    IL_0001:  /* 7A   |                  */ throw
  } // end of method RegistryKey::CreateSubKey

  .method /*06000028*/ public hidebysig instance class Microsoft.Win32.RegistryKey/*02000008*/ 
          CreateSubKey(string subkey,
                       valuetype Microsoft.Win32.RegistryKeyPermissionCheck/*02000009*/ permissionCheck,
                       class System.Security.AccessControl.RegistrySecurity/*02000005*/ registrySecurity) cil managed
  // SIG: 20 03 12 20 0E 11 24 12 14
  {
    // Method begins at RVA 0x2107
    // Code size       2 (0x2)
    .maxstack  8
    IL_0000:  /* 14   |                  */ ldnull
    IL_0001:  /* 7A   |                  */ throw
  } // end of method RegistryKey::CreateSubKey

  .method /*06000029*/ public hidebysig instance class Microsoft.Win32.RegistryKey/*02000008*/ 
          CreateSubKey(string subkey,
                       bool writable) cil managed
  // SIG: 20 02 12 20 0E 02
  {
    // Method begins at RVA 0x210a
    // Code size       2 (0x2)
    .maxstack  8
    IL_0000:  /* 14   |                  */ ldnull
    IL_0001:  /* 7A   |                  */ throw
  } // end of method RegistryKey::CreateSubKey

  .method /*0600002A*/ public hidebysig instance class Microsoft.Win32.RegistryKey/*02000008*/ 
          CreateSubKey(string subkey,
                       bool writable,
                       valuetype Microsoft.Win32.RegistryOptions/*0200000A*/ options) cil managed
  // SIG: 20 03 12 20 0E 02 11 28
  {
    // Method begins at RVA 0x210d
    // Code size       2 (0x2)
    .maxstack  8
    IL_0000:  /* 14   |                  */ ldnull
    IL_0001:  /* 7A   |                  */ throw
  } // end of method RegistryKey::CreateSubKey

  .method /*0600002B*/ public hidebysig instance void 
          DeleteSubKey(string subkey) cil managed
  // SIG: 20 01 01 0E
  {
    // Method begins at RVA 0x2110
    // Code size       1 (0x1)
    .maxstack  8
    IL_0000:  /* 2A   |                  */ ret
  } // end of method RegistryKey::DeleteSubKey

  .method /*0600002C*/ public hidebysig instance void 
          DeleteSubKey(string subkey,
                       bool throwOnMissingSubKey) cil managed
  // SIG: 20 02 01 0E 02
  {
    // Method begins at RVA 0x2112
    // Code size       1 (0x1)
    .maxstack  8
    IL_0000:  /* 2A   |                  */ ret
  } // end of method RegistryKey::DeleteSubKey

  .method /*0600002D*/ public hidebysig instance void 
          DeleteSubKeyTree(string subkey) cil managed
  // SIG: 20 01 01 0E
  {
    // Method begins at RVA 0x2114
    // Code size       1 (0x1)
    .maxstack  8
    IL_0000:  /* 2A   |                  */ ret
  } // end of method RegistryKey::DeleteSubKeyTree

  .method /*0600002E*/ public hidebysig instance void 
          DeleteSubKeyTree(string subkey,
                           bool throwOnMissingSubKey) cil managed
  // SIG: 20 02 01 0E 02
  {
    // Method begins at RVA 0x2116
    // Code size       1 (0x1)
    .maxstack  8
    IL_0000:  /* 2A   |                  */ ret
  } // end of method RegistryKey::DeleteSubKeyTree

  .method /*0600002F*/ public hidebysig instance void 
          DeleteValue(string name) cil managed
  // SIG: 20 01 01 0E
  {
    // Method begins at RVA 0x2118
    // Code size       1 (0x1)
    .maxstack  8
    IL_0000:  /* 2A   |                  */ ret
  } // end of method RegistryKey::DeleteValue

  .method /*06000030*/ public hidebysig instance void 
          DeleteValue(string name,
                      bool throwOnMissingValue) cil managed
  // SIG: 20 02 01 0E 02
  {
    // Method begins at RVA 0x211a
    // Code size       1 (0x1)
    .maxstack  8
    IL_0000:  /* 2A   |                  */ ret
  } // end of method RegistryKey::DeleteValue

  .method /*06000031*/ public hidebysig newslot virtual final 
          instance void  Dispose() cil managed
  // SIG: 20 00 01
  {
    // Method begins at RVA 0x211c
    // Code size       1 (0x1)
    .maxstack  8
    IL_0000:  /* 2A   |                  */ ret
  } // end of method RegistryKey::Dispose

  .method /*06000032*/ public hidebysig instance void 
          Flush() cil managed
  // SIG: 20 00 01
  {
    // Method begins at RVA 0x211e
    // Code size       1 (0x1)
    .maxstack  8
    IL_0000:  /* 2A   |                  */ ret
  } // end of method RegistryKey::Flush

  .method /*06000033*/ public hidebysig static 
          class Microsoft.Win32.RegistryKey/*02000008*/ 
          FromHandle(class Microsoft.Win32.SafeHandles.SafeRegistryHandle/*0200000E*/ handle) cil managed
  // SIG: 00 01 12 20 12 38
  {
    // Method begins at RVA 0x2120
    // Code size       2 (0x2)
    .maxstack  8
    IL_0000:  /* 14   |                  */ ldnull
    IL_0001:  /* 7A   |                  */ throw
  } // end of method RegistryKey::FromHandle

  .method /*06000034*/ public hidebysig static 
          class Microsoft.Win32.RegistryKey/*02000008*/ 
          FromHandle(class Microsoft.Win32.SafeHandles.SafeRegistryHandle/*0200000E*/ handle,
                     valuetype Microsoft.Win32.RegistryView/*0200000D*/ view) cil managed
  // SIG: 00 02 12 20 12 38 11 34
  {
    // Method begins at RVA 0x2123
    // Code size       2 (0x2)
    .maxstack  8
    IL_0000:  /* 14   |                  */ ldnull
    IL_0001:  /* 7A   |                  */ throw
  } // end of method RegistryKey::FromHandle

  .method /*06000035*/ public hidebysig instance class System.Security.AccessControl.RegistrySecurity/*02000005*/ 
          GetAccessControl() cil managed
  // SIG: 20 00 12 14
  {
    // Method begins at RVA 0x2126
    // Code size       2 (0x2)
    .maxstack  8
    IL_0000:  /* 14   |                  */ ldnull
    IL_0001:  /* 7A   |                  */ throw
  } // end of method RegistryKey::GetAccessControl

  .method /*06000036*/ public hidebysig instance class System.Security.AccessControl.RegistrySecurity/*02000005*/ 
          GetAccessControl(valuetype [System.Security.AccessControl/*23000002*/]System.Security.AccessControl.AccessControlSections/*0100001E*/ includeSections) cil managed
  // SIG: 20 01 12 14 11 79
  {
    // Method begins at RVA 0x2129
    // Code size       2 (0x2)
    .maxstack  8
    IL_0000:  /* 14   |                  */ ldnull
    IL_0001:  /* 7A   |                  */ throw
  } // end of method RegistryKey::GetAccessControl

  .method /*06000037*/ public hidebysig instance string[] 
          GetSubKeyNames() cil managed
  // SIG: 20 00 1D 0E
  {
    // Method begins at RVA 0x212c
    // Code size       2 (0x2)
    .maxstack  8
    IL_0000:  /* 14   |                  */ ldnull
    IL_0001:  /* 7A   |                  */ throw
  } // end of method RegistryKey::GetSubKeyNames

  .method /*06000038*/ public hidebysig instance object 
          GetValue(string name) cil managed
  // SIG: 20 01 1C 0E
  {
    // Method begins at RVA 0x212f
    // Code size       2 (0x2)
    .maxstack  8
    IL_0000:  /* 14   |                  */ ldnull
    IL_0001:  /* 7A   |                  */ throw
  } // end of method RegistryKey::GetValue

  .method /*06000039*/ public hidebysig instance object 
          GetValue(string name,
                   object defaultValue) cil managed
  // SIG: 20 02 1C 0E 1C
  {
    // Method begins at RVA 0x2132
    // Code size       2 (0x2)
    .maxstack  8
    IL_0000:  /* 14   |                  */ ldnull
    IL_0001:  /* 7A   |                  */ throw
  } // end of method RegistryKey::GetValue

  .method /*0600003A*/ public hidebysig instance object 
          GetValue(string name,
                   object defaultValue,
                   valuetype Microsoft.Win32.RegistryValueOptions/*0200000C*/ options) cil managed
  // SIG: 20 03 1C 0E 1C 11 30
  {
    // Method begins at RVA 0x2135
    // Code size       2 (0x2)
    .maxstack  8
    IL_0000:  /* 14   |                  */ ldnull
    IL_0001:  /* 7A   |                  */ throw
  } // end of method RegistryKey::GetValue

  .method /*0600003B*/ public hidebysig instance valuetype Microsoft.Win32.RegistryValueKind/*0200000B*/ 
          GetValueKind(string name) cil managed
  // SIG: 20 01 11 2C 0E
  {
    // Method begins at RVA 0x2138
    // Code size       2 (0x2)
    .maxstack  8
    IL_0000:  /* 14   |                  */ ldnull
    IL_0001:  /* 7A   |                  */ throw
  } // end of method RegistryKey::GetValueKind

  .method /*0600003C*/ public hidebysig instance string[] 
          GetValueNames() cil managed
  // SIG: 20 00 1D 0E
  {
    // Method begins at RVA 0x213b
    // Code size       2 (0x2)
    .maxstack  8
    IL_0000:  /* 14   |                  */ ldnull
    IL_0001:  /* 7A   |                  */ throw
  } // end of method RegistryKey::GetValueNames

  .method /*0600003D*/ public hidebysig static 
          class Microsoft.Win32.RegistryKey/*02000008*/ 
          OpenBaseKey(valuetype Microsoft.Win32.RegistryHive/*02000007*/ hKey,
                      valuetype Microsoft.Win32.RegistryView/*0200000D*/ view) cil managed
  // SIG: 00 02 12 20 11 1C 11 34
  {
    // Method begins at RVA 0x213e
    // Code size       2 (0x2)
    .maxstack  8
    IL_0000:  /* 14   |                  */ ldnull
    IL_0001:  /* 7A   |                  */ throw
  } // end of method RegistryKey::OpenBaseKey

  .method /*0600003E*/ public hidebysig static 
          class Microsoft.Win32.RegistryKey/*02000008*/ 
          OpenRemoteBaseKey(valuetype Microsoft.Win32.RegistryHive/*02000007*/ hKey,
                            string machineName) cil managed
  // SIG: 00 02 12 20 11 1C 0E
  {
    // Method begins at RVA 0x2141
    // Code size       2 (0x2)
    .maxstack  8
    IL_0000:  /* 14   |                  */ ldnull
    IL_0001:  /* 7A   |                  */ throw
  } // end of method RegistryKey::OpenRemoteBaseKey

  .method /*0600003F*/ public hidebysig static 
          class Microsoft.Win32.RegistryKey/*02000008*/ 
          OpenRemoteBaseKey(valuetype Microsoft.Win32.RegistryHive/*02000007*/ hKey,
                            string machineName,
                            valuetype Microsoft.Win32.RegistryView/*0200000D*/ view) cil managed
  // SIG: 00 03 12 20 11 1C 0E 11 34
  {
    // Method begins at RVA 0x2144
    // Code size       2 (0x2)
    .maxstack  8
    IL_0000:  /* 14   |                  */ ldnull
    IL_0001:  /* 7A   |                  */ throw
  } // end of method RegistryKey::OpenRemoteBaseKey

  .method /*06000040*/ public hidebysig instance class Microsoft.Win32.RegistryKey/*02000008*/ 
          OpenSubKey(string name) cil managed
  // SIG: 20 01 12 20 0E
  {
    // Method begins at RVA 0x2147
    // Code size       2 (0x2)
    .maxstack  8
    IL_0000:  /* 14   |                  */ ldnull
    IL_0001:  /* 7A   |                  */ throw
  } // end of method RegistryKey::OpenSubKey

  .method /*06000041*/ public hidebysig instance class Microsoft.Win32.RegistryKey/*02000008*/ 
          OpenSubKey(string name,
                     valuetype Microsoft.Win32.RegistryKeyPermissionCheck/*02000009*/ permissionCheck) cil managed
  // SIG: 20 02 12 20 0E 11 24
  {
    // Method begins at RVA 0x214a
    // Code size       2 (0x2)
    .maxstack  8
    IL_0000:  /* 14   |                  */ ldnull
    IL_0001:  /* 7A   |                  */ throw
  } // end of method RegistryKey::OpenSubKey

  .method /*06000042*/ public hidebysig instance class Microsoft.Win32.RegistryKey/*02000008*/ 
          OpenSubKey(string name,
                     valuetype Microsoft.Win32.RegistryKeyPermissionCheck/*02000009*/ permissionCheck,
                     valuetype System.Security.AccessControl.RegistryRights/*02000004*/ rights) cil managed
  // SIG: 20 03 12 20 0E 11 24 11 10
  {
    // Method begins at RVA 0x214d
    // Code size       2 (0x2)
    .maxstack  8
    IL_0000:  /* 14   |                  */ ldnull
    IL_0001:  /* 7A   |                  */ throw
  } // end of method RegistryKey::OpenSubKey

  .method /*06000043*/ public hidebysig instance class Microsoft.Win32.RegistryKey/*02000008*/ 
          OpenSubKey(string name,
                     bool writable) cil managed
  // SIG: 20 02 12 20 0E 02
  {
    // Method begins at RVA 0x2150
    // Code size       2 (0x2)
    .maxstack  8
    IL_0000:  /* 14   |                  */ ldnull
    IL_0001:  /* 7A   |                  */ throw
  } // end of method RegistryKey::OpenSubKey

  .method /*06000044*/ public hidebysig instance class Microsoft.Win32.RegistryKey/*02000008*/ 
          OpenSubKey(string name,
                     valuetype System.Security.AccessControl.RegistryRights/*02000004*/ rights) cil managed
  // SIG: 20 02 12 20 0E 11 10
  {
    // Method begins at RVA 0x2153
    // Code size       2 (0x2)
    .maxstack  8
    IL_0000:  /* 14   |                  */ ldnull
    IL_0001:  /* 7A   |                  */ throw
  } // end of method RegistryKey::OpenSubKey

  .method /*06000045*/ public hidebysig instance void 
          SetAccessControl(class System.Security.AccessControl.RegistrySecurity/*02000005*/ registrySecurity) cil managed
  // SIG: 20 01 01 12 14
  {
    // Method begins at RVA 0x2156
    // Code size       1 (0x1)
    .maxstack  8
    IL_0000:  /* 2A   |                  */ ret
  } // end of method RegistryKey::SetAccessControl

  .method /*06000046*/ public hidebysig instance void 
          SetValue(string name,
                   object 'value') cil managed
  // SIG: 20 02 01 0E 1C
  {
    // Method begins at RVA 0x2158
    // Code size       1 (0x1)
    .maxstack  8
    IL_0000:  /* 2A   |                  */ ret
  } // end of method RegistryKey::SetValue

  .method /*06000047*/ public hidebysig instance void 
          SetValue(string name,
                   object 'value',
                   valuetype Microsoft.Win32.RegistryValueKind/*0200000B*/ valueKind) cil managed
  // SIG: 20 03 01 0E 1C 11 2C
  {
    // Method begins at RVA 0x215a
    // Code size       1 (0x1)
    .maxstack  8
    IL_0000:  /* 2A   |                  */ ret
  } // end of method RegistryKey::SetValue

  .method /*06000048*/ public hidebysig virtual 
          instance string  ToString() cil managed
  // SIG: 20 00 0E
  {
    // Method begins at RVA 0x215c
    // Code size       2 (0x2)
    .maxstack  8
    IL_0000:  /* 14   |                  */ ldnull
    IL_0001:  /* 7A   |                  */ throw
  } // end of method RegistryKey::ToString

  .property /*17000006*/ instance callconv(8) class Microsoft.Win32.SafeHandles.SafeRegistryHandle/*0200000E*/
          Handle()
  {
    .get instance class Microsoft.Win32.SafeHandles.SafeRegistryHandle/*0200000E*/ Microsoft.Win32.RegistryKey/*02000008*/::get_Handle() /* 0600001E */
  } // end of property RegistryKey::Handle
  .property /*17000007*/ instance callconv(8) string
          Name()
  {
    .get instance string Microsoft.Win32.RegistryKey/*02000008*/::get_Name() /* 0600001F */
  } // end of property RegistryKey::Name
  .property /*17000008*/ instance callconv(8) int32
          SubKeyCount()
  {
    .get instance int32 Microsoft.Win32.RegistryKey/*02000008*/::get_SubKeyCount() /* 06000020 */
  } // end of property RegistryKey::SubKeyCount
  .property /*17000009*/ instance callconv(8) int32
          ValueCount()
  {
    .get instance int32 Microsoft.Win32.RegistryKey/*02000008*/::get_ValueCount() /* 06000021 */
  } // end of property RegistryKey::ValueCount
  .property /*1700000A*/ instance callconv(8) valuetype Microsoft.Win32.RegistryView/*0200000D*/
          View()
  {
    .get instance valuetype Microsoft.Win32.RegistryView/*0200000D*/ Microsoft.Win32.RegistryKey/*02000008*/::get_View() /* 06000022 */
  } // end of property RegistryKey::View
} // end of class Microsoft.Win32.RegistryKey

.class /*02000009*/ public auto ansi sealed Microsoft.Win32.RegistryKeyPermissionCheck
       extends [netstandard/*23000001*/]System.Enum/*01000018*/
{
  .field /*0400001D*/ public specialname rtspecialname int32 value__
  .field /*0400001E*/ public static literal valuetype Microsoft.Win32.RegistryKeyPermissionCheck/*02000009*/ Default = int32(0x00000000)
  .field /*0400001F*/ public static literal valuetype Microsoft.Win32.RegistryKeyPermissionCheck/*02000009*/ ReadSubTree = int32(0x00000001)
  .field /*04000020*/ public static literal valuetype Microsoft.Win32.RegistryKeyPermissionCheck/*02000009*/ ReadWriteSubTree = int32(0x00000002)
} // end of class Microsoft.Win32.RegistryKeyPermissionCheck

.class /*0200000A*/ public auto ansi sealed Microsoft.Win32.RegistryOptions
       extends [netstandard/*23000001*/]System.Enum/*01000018*/
{
  .custom /*0C000012:0A00000F*/ instance void [netstandard/*23000001*/]System.FlagsAttribute/*01000017*/::.ctor() /* 0A00000F */ = ( 01 00 00 00 ) 
  .field /*04000021*/ public specialname rtspecialname int32 value__
  .field /*04000022*/ public static literal valuetype Microsoft.Win32.RegistryOptions/*0200000A*/ None = int32(0x00000000)
  .field /*04000023*/ public static literal valuetype Microsoft.Win32.RegistryOptions/*0200000A*/ Volatile = int32(0x00000001)
} // end of class Microsoft.Win32.RegistryOptions

.class /*0200000B*/ public auto ansi sealed Microsoft.Win32.RegistryValueKind
       extends [netstandard/*23000001*/]System.Enum/*01000018*/
{
  .field /*04000024*/ public specialname rtspecialname int32 value__
  .field /*04000025*/ public static literal valuetype Microsoft.Win32.RegistryValueKind/*0200000B*/ None = int32(0xFFFFFFFF)
  .field /*04000026*/ public static literal valuetype Microsoft.Win32.RegistryValueKind/*0200000B*/ Unknown = int32(0x00000000)
  .field /*04000027*/ public static literal valuetype Microsoft.Win32.RegistryValueKind/*0200000B*/ String = int32(0x00000001)
  .field /*04000028*/ public static literal valuetype Microsoft.Win32.RegistryValueKind/*0200000B*/ ExpandString = int32(0x00000002)
  .field /*04000029*/ public static literal valuetype Microsoft.Win32.RegistryValueKind/*0200000B*/ Binary = int32(0x00000003)
  .field /*0400002A*/ public static literal valuetype Microsoft.Win32.RegistryValueKind/*0200000B*/ DWord = int32(0x00000004)
  .field /*0400002B*/ public static literal valuetype Microsoft.Win32.RegistryValueKind/*0200000B*/ MultiString = int32(0x00000007)
  .field /*0400002C*/ public static literal valuetype Microsoft.Win32.RegistryValueKind/*0200000B*/ QWord = int32(0x0000000B)
} // end of class Microsoft.Win32.RegistryValueKind

.class /*0200000C*/ public auto ansi sealed Microsoft.Win32.RegistryValueOptions
       extends [netstandard/*23000001*/]System.Enum/*01000018*/
{
  .custom /*0C000013:0A00000F*/ instance void [netstandard/*23000001*/]System.FlagsAttribute/*01000017*/::.ctor() /* 0A00000F */ = ( 01 00 00 00 ) 
  .field /*0400002D*/ public specialname rtspecialname int32 value__
  .field /*0400002E*/ public static literal valuetype Microsoft.Win32.RegistryValueOptions/*0200000C*/ None = int32(0x00000000)
  .field /*0400002F*/ public static literal valuetype Microsoft.Win32.RegistryValueOptions/*0200000C*/ DoNotExpandEnvironmentNames = int32(0x00000001)
} // end of class Microsoft.Win32.RegistryValueOptions

.class /*0200000D*/ public auto ansi sealed Microsoft.Win32.RegistryView
       extends [netstandard/*23000001*/]System.Enum/*01000018*/
{
  .field /*04000030*/ public specialname rtspecialname int32 value__
  .field /*04000031*/ public static literal valuetype Microsoft.Win32.RegistryView/*0200000D*/ Default = int32(0x00000000)
  .field /*04000032*/ public static literal valuetype Microsoft.Win32.RegistryView/*0200000D*/ Registry64 = int32(0x00000100)
  .field /*04000033*/ public static literal valuetype Microsoft.Win32.RegistryView/*0200000D*/ Registry32 = int32(0x00000200)
} // end of class Microsoft.Win32.RegistryView

.class /*0200000E*/ public auto ansi sealed beforefieldinit Microsoft.Win32.SafeHandles.SafeRegistryHandle
       extends [netstandard/*23000001*/]Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid/*0100001F*/
{
  .method /*06000049*/ public hidebysig specialname rtspecialname 
          instance void  .ctor(native int preexistingHandle,
                               bool ownsHandle) cil managed
  // SIG: 20 02 01 18 02
  {
    // Method begins at RVA 0x215f
    // Code size       8 (0x8)
    .maxstack  8
    IL_0000:  /* 02   |                  */ ldarg.0
    IL_0001:  /* 16   |                  */ ldc.i4.0
    IL_0002:  /* 28   | (0A)000014       */ call       instance void [netstandard/*23000001*/]Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid/*0100001F*/::.ctor(bool) /* 0A000014 */
    IL_0007:  /* 2A   |                  */ ret
  } // end of method SafeRegistryHandle::.ctor

  .method /*0600004A*/ public hidebysig specialname virtual 
          instance bool  get_IsInvalid() cil managed
  // SIG: 20 00 02
  {
    // Method begins at RVA 0x2168
    // Code size       2 (0x2)
    .maxstack  8
    IL_0000:  /* 14   |                  */ ldnull
    IL_0001:  /* 7A   |                  */ throw
  } // end of method SafeRegistryHandle::get_IsInvalid

  .method /*0600004B*/ family hidebysig virtual 
          instance bool  ReleaseHandle() cil managed
  // SIG: 20 00 02
  {
    // Method begins at RVA 0x216b
    // Code size       2 (0x2)
    .maxstack  8
    IL_0000:  /* 14   |                  */ ldnull
    IL_0001:  /* 7A   |                  */ throw
  } // end of method SafeRegistryHandle::ReleaseHandle

  .property /*1700000B*/ instance callconv(8) bool
          IsInvalid()
  {
    .get instance bool Microsoft.Win32.SafeHandles.SafeRegistryHandle/*0200000E*/::get_IsInvalid() /* 0600004A */
  } // end of property SafeRegistryHandle::IsInvalid
} // end of class Microsoft.Win32.SafeHandles.SafeRegistryHandle


// =============================================================

// *********** DISASSEMBLY COMPLETE ***********************
