<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Data.Entity</name>
  </assembly>
  <members>
    <member name="T:System.Data.EntityCommandCompilationException">
      <summary>Represents errors that occur during command compilation; when a command tree could not be produced to represent the command text.</summary>
    </member>
    <member name="M:System.Data.EntityCommandCompilationException.#ctor">
      <summary>Initializes a new instance of <see cref="T:System.Data.EntityCommandCompilationException" />.</summary>
    </member>
    <member name="M:System.Data.EntityCommandCompilationException.#ctor(System.String)">
      <summary>Initializes a new instance of <see cref="T:System.Data.EntityCommandCompilationException" />.</summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.Data.EntityCommandCompilationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of <see cref="T:System.Data.EntityCommandCompilationException" />.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="T:System.Data.EntityCommandExecutionException">
      <summary>Represents errors that occur when the underlying storage provider could not execute the specified command. This exception usually wraps a provider-specific exception.</summary>
    </member>
    <member name="M:System.Data.EntityCommandExecutionException.#ctor">
      <summary>Initializes a new instance of <see cref="T:System.Data.EntityCommandExecutionException" />.</summary>
    </member>
    <member name="M:System.Data.EntityCommandExecutionException.#ctor(System.String)">
      <summary>Initializes a new instance of <see cref="T:System.Data.EntityCommandExecutionException" />.</summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.Data.EntityCommandExecutionException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of <see cref="T:System.Data.EntityCommandExecutionException" />.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="T:System.Data.EntityException">
      <summary>Represents Entity Framework-related errors that occur in the EntityClient namespace. The EntityException is the base class for all Entity Framework exceptions thrown by the EntityClient.</summary>
    </member>
    <member name="M:System.Data.EntityException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.EntityException" /> class.</summary>
    </member>
    <member name="M:System.Data.EntityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.EntityException" /> class.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Data.EntityException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.EntityException" /> class.</summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.Data.EntityException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.EntityException" /> class.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="T:System.Data.EntityKey">
      <summary>Provides a durable reference to an object that is an instance of an entity type.</summary>
    </member>
    <member name="M:System.Data.EntityKey.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.EntityKey" /> class.</summary>
    </member>
    <member name="M:System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
      <summary>Initializes a new instance of the <see cref="T:System.Data.EntityKey" /> class with an entity set name and a generic <see cref="T:System.Collections.Generic.KeyValuePair" /> collection.</summary>
      <param name="qualifiedEntitySetName">A <see cref="T:System.String" /> that is the entity set name qualified by the entity container name.</param>
      <param name="entityKeyValues">A generic <see cref="T:System.Collections.Generic.KeyValuePair" /> collection.Each key/value pair has a property name as the key and the value of that property as the value. There should be one pair for each property that is part of the <see cref="T:System.Data.EntityKey" />. The order of the key/value pairs is not important, but each key property should be included. The property names are simple names that are not qualified with an entity type name or the schema name.</param>
    </member>
    <member name="M:System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.EntityKeyMember})">
      <summary>Initializes a new instance of the <see cref="T:System.Data.EntityKey" /> class with an entity set name and an <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of <see cref="T:System.Data.EntityKeyMember" /> objects.</summary>
      <param name="qualifiedEntitySetName">A <see cref="T:System.String" /> that is the entity set name qualified by the entity container name.</param>
      <param name="entityKeyValues">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of <see cref="T:System.Data.EntityKeyMember" /> objects with which to initialize the key. </param>
    </member>
    <member name="M:System.Data.EntityKey.#ctor(System.String,System.String,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.EntityKey" /> class with an entity set name and specific entity key pair.</summary>
      <param name="qualifiedEntitySetName">A <see cref="T:System.String" /> that is the entity set name qualified by the entity container name.</param>
      <param name="keyName">A <see cref="T:System.String" /> that is the name of the key.</param>
      <param name="keyValue">An <see cref="T:System.Object" /> that is the key value.</param>
    </member>
    <member name="P:System.Data.EntityKey.EntityContainerName">
      <summary>Gets or sets the name of the entity container.</summary>
      <returns>A <see cref="T:System.String" /> value that is the name of the entity container for the entity to which the <see cref="T:System.Data.EntityKey" /> belongs.</returns>
    </member>
    <member name="P:System.Data.EntityKey.EntityKeyValues">
      <summary>Gets or sets the key values associated with this <see cref="T:System.Data.EntityKey" />.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of key values for this <see cref="T:System.Data.EntityKey" />.</returns>
    </member>
    <member name="F:System.Data.EntityKey.EntityNotValidKey">
      <summary>A simple <see cref="T:System.Data.EntityKey" /> identifying an entity that resulted from a failed TREAT operation.</summary>
    </member>
    <member name="P:System.Data.EntityKey.EntitySetName">
      <summary>Gets or sets the name of the entity set.</summary>
      <returns>A <see cref="T:System.String" /> value that is the name of the entity set for the entity to which the <see cref="T:System.Data.EntityKey" /> belongs.</returns>
    </member>
    <member name="M:System.Data.EntityKey.Equals(System.Data.EntityKey)">
      <summary>Returns a value that indicates whether this instance is equal to a specified <see cref="T:System.Data.EntityKey" />. </summary>
      <returns>true if this instance and <paramref name="other" /> have equal values; otherwise, false. </returns>
      <param name="other">An <see cref="T:System.Data.EntityKey" /> object to compare with this instance.</param>
    </member>
    <member name="M:System.Data.EntityKey.Equals(System.Object)">
      <summary>Returns a value that indicates whether this instance is equal to a specified object. </summary>
      <returns>true if this instance and <paramref name="obj" /> have equal values; otherwise, false. </returns>
      <param name="obj">An <see cref="T:System.Object" /> to compare with this instance.</param>
    </member>
    <member name="M:System.Data.EntityKey.GetEntitySet(System.Data.Metadata.Edm.MetadataWorkspace)">
      <summary>Gets the entity set for this entity key from the given metadata workspace.</summary>
      <returns>The <see cref="T:System.Data.Metadata.Edm.EntitySet" /> for the entity key.</returns>
      <param name="metadataWorkspace">The metadata workspace that contains the entity.</param>
      <exception cref="T:System.ArgumentException">The entity set could not be located in the specified metadata workspace.</exception>
    </member>
    <member name="M:System.Data.EntityKey.GetHashCode">
      <summary>Serves as a hash function for the current <see cref="T:System.Data.EntityKey" /> object. <see cref="M:System.Data.EntityKey.GetHashCode" /> is suitable for hashing algorithms and data structures such as a hash table.</summary>
      <returns>A hash code for the current <see cref="T:System.Data.EntityKey" />.</returns>
    </member>
    <member name="P:System.Data.EntityKey.IsTemporary">
      <summary>Gets a value that indicates whether the <see cref="T:System.Data.EntityKey" /> is temporary.  </summary>
      <returns>true if the <see cref="T:System.Data.EntityKey" /> is temporary; otherwise, false.</returns>
    </member>
    <member name="F:System.Data.EntityKey.NoEntitySetKey">
      <summary>A singleton <see cref="T:System.Data.EntityKey" /> by which a read-only entity is identified. </summary>
    </member>
    <member name="M:System.Data.EntityKey.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>Helper method that is used to deserialize an <see cref="T:System.Data.EntityKey" />.</summary>
      <param name="context">Describes the source and destination of a given serialized stream and provides an additional caller-defined context.</param>
    </member>
    <member name="M:System.Data.EntityKey.OnDeserializing(System.Runtime.Serialization.StreamingContext)">
      <summary>Helper method that is used to deserialize an <see cref="T:System.Data.EntityKey" />.</summary>
      <param name="context">Describes the source and destination of a given serialized stream, and provides an additional caller-defined context.</param>
    </member>
    <member name="M:System.Data.EntityKey.op_Equality(System.Data.EntityKey,System.Data.EntityKey)">
      <summary>Compares two <see cref="T:System.Data.EntityKey" /> objects. </summary>
      <returns>true if the <paramref name="key1" /> and <paramref name="key2" /> values are equal; otherwise, false.</returns>
      <param name="key1">A <see cref="T:System.Data.EntityKey" /> to compare.</param>
      <param name="key2">A <see cref="T:System.Data.EntityKey" /> to compare.</param>
    </member>
    <member name="M:System.Data.EntityKey.op_Inequality(System.Data.EntityKey,System.Data.EntityKey)">
      <summary>Compares two <see cref="T:System.Data.EntityKey" /> objects. </summary>
      <returns>true if the <paramref name="key1" /> and <paramref name="key2" /> values are not equal; otherwise, false.</returns>
      <param name="key1">A <see cref="T:System.Data.EntityKey" /> to compare.</param>
      <param name="key2">A <see cref="T:System.Data.EntityKey" /> to compare.</param>
    </member>
    <member name="T:System.Data.EntityKeyMember">
      <summary>Represents a key name and value pair that is part of an <see cref="T:System.Data.EntityKey" />.</summary>
    </member>
    <member name="M:System.Data.EntityKeyMember.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.EntityKeyMember" /> class.</summary>
    </member>
    <member name="M:System.Data.EntityKeyMember.#ctor(System.String,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.EntityKeyMember" /> class with the specified entity key pair.</summary>
      <param name="keyName">A <see cref="T:System.String" /> that is the name of the key.</param>
      <param name="keyValue">An <see cref="T:System.Object" /> that is the key value.</param>
    </member>
    <member name="P:System.Data.EntityKeyMember.Key">
      <summary>The name of the entity key.</summary>
      <returns>A <see cref="T:System.String" /> that is the key name.</returns>
    </member>
    <member name="M:System.Data.EntityKeyMember.ToString">
      <summary>Returns a string representation of the entity key.</summary>
      <returns>A <see cref="T:System.String" />. </returns>
    </member>
    <member name="P:System.Data.EntityKeyMember.Value">
      <summary>The value of the entity key.</summary>
      <returns>An <see cref="T:System.Object" /> that is the key value.</returns>
    </member>
    <member name="T:System.Data.EntitySqlException">
      <summary>Represents errors that occur when parsing Entity SQL command text. This exception is thrown when syntactic or semantic rules are violated.</summary>
    </member>
    <member name="M:System.Data.EntitySqlException.#ctor">
      <summary>Initializes a new instance of <see cref="T:System.Data.EntitySqlException" />.</summary>
    </member>
    <member name="M:System.Data.EntitySqlException.#ctor(System.String)">
      <summary>Initializes a new instance of <see cref="T:System.Data.EntitySqlException" /> with a specialized error message.</summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.Data.EntitySqlException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.EntitySqlException" /> class that uses a specified error message and a reference to the inner exception that is the cause of this exception. </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="P:System.Data.EntitySqlException.Column">
      <summary>Gets the approximate column number where the error occurred.</summary>
      <returns>An integer that describes the column number where the error occurred.</returns>
    </member>
    <member name="P:System.Data.EntitySqlException.ErrorContext">
      <summary>Gets the approximate context where the error occurred, if available.</summary>
      <returns>A string that describes the approximate context where the error occurred, if available.</returns>
    </member>
    <member name="P:System.Data.EntitySqlException.ErrorDescription">
      <summary>Gets a description of the error.</summary>
      <returns>A string that describes the error.</returns>
    </member>
    <member name="M:System.Data.EntitySqlException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="P:System.Data.EntitySqlException.Line">
      <summary>Gets the approximate line number where the error occurred.</summary>
      <returns>An integer that describes the line number where the error occurred.</returns>
    </member>
    <member name="P:System.Data.EntitySqlException.Message">
      <summary>Gets the full error message. As available, the message contains the error description, context, line number, and column number.</summary>
      <returns>A string describing the full error message. As available, the message contains the error description, context, line number, and column number. </returns>
    </member>
    <member name="T:System.Data.EntityState">
      <summary>The state of an entity object. </summary>
    </member>
    <member name="F:System.Data.EntityState.Detached">
      <summary>The object exists but is not being tracked. An entity is in this state immediately after it has been created and before it is added to the object context. An entity is also in this state after it has been removed from the context by calling the <see cref="M:System.Data.Objects.ObjectContext.Detach(System.Object)" /> method or if it is loaded by using a <see cref="F:System.Data.Objects.MergeOption.NoTracking" /><see cref="T:System.Data.Objects.MergeOption" />. There is no <see cref="T:System.Data.Objects.ObjectStateEntry" /> instance associated with objects in the <see cref="F:System.Data.EntityState.Detached" /> state.</summary>
    </member>
    <member name="F:System.Data.EntityState.Unchanged">
      <summary>The object has not been modified since it was attached to the context or since the last time that the <see cref="M:System.Data.Objects.ObjectContext.SaveChanges" /> method was called.</summary>
    </member>
    <member name="F:System.Data.EntityState.Added">
      <summary>The object is new, has been added to the object context, and the <see cref="M:System.Data.Objects.ObjectContext.SaveChanges" /> method has not been called. After the changes are saved, the object state changes to <see cref="F:System.Data.EntityState.Unchanged" />. Objects in the <see cref="F:System.Data.EntityState.Added" /> state do not have original values in the <see cref="T:System.Data.Objects.ObjectStateEntry" />.</summary>
    </member>
    <member name="F:System.Data.EntityState.Deleted">
      <summary>The object has been deleted from the object context. After the changes are saved, the object state changes to <see cref="F:System.Data.EntityState.Detached" />.</summary>
    </member>
    <member name="F:System.Data.EntityState.Modified">
      <summary>One of the scalar properties on the object was modified and the <see cref="M:System.Data.Objects.ObjectContext.SaveChanges" /> method has not been called. In POCO entities without change-tracking proxies, the state of the modified properties changes to <see cref="F:System.Data.EntityState.Modified" /> when the <see cref="M:System.Data.Objects.ObjectContext.DetectChanges" /> method is called. After the changes are saved, the object state changes to <see cref="F:System.Data.EntityState.Unchanged" />.</summary>
    </member>
    <member name="T:System.Data.IExtendedDataRecord">
      <summary>Provides access to the column values within each row of a <see cref="T:System.Data.Common.DbDataRecord" /> for a <see cref="T:System.Data.Common.DbDataReader" />.</summary>
    </member>
    <member name="P:System.Data.IExtendedDataRecord.DataRecordInfo">
      <summary>Gets <see cref="T:System.Data.Common.DataRecordInfo" /> for this <see cref="T:System.Data.IExtendedDataRecord" />.</summary>
      <returns>A <see cref="T:System.Data.Common.DataRecordInfo" /> object.</returns>
    </member>
    <member name="M:System.Data.IExtendedDataRecord.GetDataReader(System.Int32)">
      <summary>Returns nested readers as <see cref="T:System.Data.Common.DbDataReader" /> objects.</summary>
      <returns>Nested readers as <see cref="T:System.Data.Common.DbDataReader" /> objects.</returns>
      <param name="i">The ordinal of the column.</param>
    </member>
    <member name="M:System.Data.IExtendedDataRecord.GetDataRecord(System.Int32)">
      <summary>Gets a <see cref="T:System.Data.Common.DbDataRecord" /> object with the specified index.</summary>
      <returns>A <see cref="T:System.Data.Common.DbDataRecord" /> object. </returns>
      <param name="i">The index of the row.</param>
    </member>
    <member name="T:System.Data.InvalidCommandTreeException">
      <summary>The exception that is thrown to indicate that a command tree is invalid. This exception is currently not thrown anywhere in the Entity Framework.</summary>
    </member>
    <member name="M:System.Data.InvalidCommandTreeException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.InvalidCommandTreeException" /> class  with a default message. </summary>
    </member>
    <member name="M:System.Data.InvalidCommandTreeException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.InvalidCommandTreeException" /> class with the specified message. </summary>
      <param name="message">The exception message.</param>
    </member>
    <member name="M:System.Data.InvalidCommandTreeException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.InvalidCommandTreeException" /> class  with the specified message and inner exception. </summary>
      <param name="message">The exception message.</param>
      <param name="innerException">The exception that is the cause of this <see cref="T:System.Data.InvalidCommandTreeException" />.</param>
    </member>
    <member name="T:System.Data.MappingException">
      <summary>The exception that is thrown when mapping related service requests fail.</summary>
    </member>
    <member name="M:System.Data.MappingException.#ctor">
      <summary>Initializes a new instance of <see cref="T:System.Data.MappingException" />.</summary>
    </member>
    <member name="M:System.Data.MappingException.#ctor(System.String)">
      <summary>Initializes a new instance of <see cref="T:System.Data.MappingException" /> with a specialized error message.</summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.Data.MappingException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of <see cref="T:System.Data.MappingException" /> that uses a specified error message and a reference to the inner exception.</summary>
      <param name="message">The message that describes the error.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="T:System.Data.MetadataException">
      <summary>The exception that is thrown when metadata related service requests fails. </summary>
    </member>
    <member name="M:System.Data.MetadataException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.MetadataException" /> class with a default message. </summary>
    </member>
    <member name="M:System.Data.MetadataException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.MetadataException" /> class with the specified message. </summary>
      <param name="message">The exception message.</param>
    </member>
    <member name="M:System.Data.MetadataException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.MetadataException" /> class with the specified message and inner exception. </summary>
      <param name="message">The exception message.</param>
      <param name="innerException">The exception that is the cause of this <see cref="T:System.Data.MetadataException" />.</param>
    </member>
    <member name="M:System.Data.MetadataException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="T:System.Data.ObjectNotFoundException">
      <summary>The exception that is thrown when an object is not present.</summary>
    </member>
    <member name="M:System.Data.ObjectNotFoundException.#ctor">
      <summary>Initializes a new instance of <see cref="T:System.Data.ObjectNotFoundException" />.</summary>
    </member>
    <member name="M:System.Data.ObjectNotFoundException.#ctor(System.String)">
      <summary>Initializes a new instance of <see cref="T:System.Data.ObjectNotFoundException" /> with a specialized error message.</summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.Data.ObjectNotFoundException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of <see cref="T:System.Data.ObjectNotFoundException" /> class that uses a specified error message and a reference to the inner exception.</summary>
      <param name="message">The message that describes the error.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="T:System.Data.OptimisticConcurrencyException">
      <summary>The exception that is thrown when an optimistic concurrency violation occurs. </summary>
    </member>
    <member name="M:System.Data.OptimisticConcurrencyException.#ctor">
      <summary>Initializes a new instance of <see cref="T:System.Data.OptimisticConcurrencyException" />.</summary>
    </member>
    <member name="M:System.Data.OptimisticConcurrencyException.#ctor(System.String)">
      <summary>Initializes a new instance of <see cref="T:System.Data.OptimisticConcurrencyException" /> with a specialized error message.</summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.Data.OptimisticConcurrencyException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of <see cref="T:System.Data.OptimisticConcurrencyException" /> that uses a specified error message and a reference to the inner exception.</summary>
      <param name="message">The message that describes the error.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:System.Data.OptimisticConcurrencyException.#ctor(System.String,System.Exception,System.Collections.Generic.IEnumerable{System.Data.Objects.ObjectStateEntry})">
      <summary>Initializes a new instance of <see cref="T:System.Data.OptimisticConcurrencyException" /> that uses a specified error message, a reference to the inner exception, and an enumerable collection of <see cref="T:System.Data.Objects.ObjectStateEntry" /> objects.</summary>
      <param name="message">The message that describes the error.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
      <param name="stateEntries">The enumerable collection of <see cref="T:System.Data.Objects.ObjectStateEntry" /> objects.</param>
    </member>
    <member name="T:System.Data.ProviderIncompatibleException">
      <summary>The exception that is thrown when the underlying data provider is incompatible with the Entity Framework. </summary>
    </member>
    <member name="M:System.Data.ProviderIncompatibleException.#ctor">
      <summary>Initializes a new instance of <see cref="T:System.Data.ProviderIncompatibleException" />.</summary>
    </member>
    <member name="M:System.Data.ProviderIncompatibleException.#ctor(System.String)">
      <summary>Initializes a new instance of <see cref="T:System.Data.ProviderIncompatibleException" /> with a specialized error message.</summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.Data.ProviderIncompatibleException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of <see cref="T:System.Data.ProviderIncompatibleException" /> that uses a specified error message.</summary>
      <param name="message">The message that describes the error.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="T:System.Data.UpdateException">
      <summary>The exception that is thrown when modifications to object instances cannot be persisted to the data source.</summary>
    </member>
    <member name="M:System.Data.UpdateException.#ctor">
      <summary>Initializes a new instance of <see cref="T:System.Data.UpdateException" />.</summary>
    </member>
    <member name="M:System.Data.UpdateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of <see cref="T:System.Data.UpdateException" /> with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown. </param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination. </param>
    </member>
    <member name="M:System.Data.UpdateException.#ctor(System.String)">
      <summary>Initializes a new instance of <see cref="T:System.Data.UpdateException" /> with a specialized error message.</summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.Data.UpdateException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.UpdateException" /> class that uses a specified error message and a reference to the inner exception that is the cause of this exception. </summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:System.Data.UpdateException.#ctor(System.String,System.Exception,System.Collections.Generic.IEnumerable{System.Data.Objects.ObjectStateEntry})">
      <summary>Initializes a new instance of the <see cref="T:System.Data.UpdateException" /> class that uses a specified error message, a reference to the inner exception, and an enumerable collection of <see cref="T:System.Data.Objects.ObjectStateEntry" /> objects.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
      <param name="stateEntries">The collection of <see cref="T:System.Data.Objects.ObjectStateEntry" /> objects.</param>
    </member>
    <member name="P:System.Data.UpdateException.StateEntries">
      <summary>Gets the <see cref="T:System.Data.Objects.ObjectStateEntry" /> objects for this <see cref="T:System.Data.UpdateException" />.</summary>
      <returns>A collection of <see cref="T:System.Data.Objects.ObjectStateEntry" /> objects comprised of either a single entity and 0 or more relationships, or 0 entities and 1 or more relationships.</returns>
    </member>
    <member name="T:System.Data.Common.DataRecordInfo">
      <summary>Provides access to information about the structural type and column information for a <see cref="T:System.Data.Common.DbDataRecord" />.  </summary>
    </member>
    <member name="M:System.Data.Common.DataRecordInfo.#ctor(System.Data.Metadata.Edm.TypeUsage,System.Collections.Generic.IEnumerable{System.Data.Metadata.Edm.EdmMember})">
      <summary>Initializes a new <see cref="T:System.Data.Common.DbDataRecord" /> object for a specific type with an enumerable collection of data fields.</summary>
      <param name="metadata">The metadata for the type represented by this object, supplied by <see cref="T:System.Data.Metadata.Edm.TypeUsage" />.</param>
      <param name="memberInfo">An enumerable collection of <see cref="T:System.Data.Metadata.Edm.EdmMember" /> objects that represent column information.</param>
    </member>
    <member name="P:System.Data.Common.DataRecordInfo.FieldMetadata">
      <summary>Gets <see cref="T:System.Data.Common.FieldMetadata" /> for this <see cref="P:System.Data.IExtendedDataRecord.DataRecordInfo" /> object.</summary>
      <returns>A <see cref="T:System.Data.Common.FieldMetadata" /> object.</returns>
    </member>
    <member name="P:System.Data.Common.DataRecordInfo.RecordType">
      <summary>Gets type info for this object as a <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> object.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> value.</returns>
    </member>
    <member name="T:System.Data.Common.DbCommandDefinition">
      <summary>Defines a cacheable command plan.</summary>
    </member>
    <member name="M:System.Data.Common.DbCommandDefinition.#ctor">
      <summary>Initializes a new <see cref="T:System.Data.Common.DbCommandDefinition" />.</summary>
    </member>
    <member name="M:System.Data.Common.DbCommandDefinition.#ctor(System.Data.Common.DbCommand)">
      <summary>Initializes a new <see cref="T:System.Data.Common.DbCommandDefinition" /> using the supplied <see cref="T:System.Data.Common.DbCommand" />.</summary>
      <param name="prototype">The supplied <see cref="T:System.Data.Common.DbCommand" />.</param>
    </member>
    <member name="M:System.Data.Common.DbCommandDefinition.CreateCommand">
      <summary>Creates and returns a <see cref="T:System.Data.Common.DbCommand" /> object that can be executed. </summary>
      <returns>A <see cref="T:System.Data.Common.DbCommand" />.</returns>
    </member>
    <member name="T:System.Data.Common.DbProviderManifest">
      <summary>Represents the metadata interface for all CLR types.</summary>
    </member>
    <member name="M:System.Data.Common.DbProviderManifest.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Common.DbProviderManifest" /> class. </summary>
    </member>
    <member name="F:System.Data.Common.DbProviderManifest.ConceptualSchemaDefinition">
      <summary>Value to pass to the <see cref="M:System.Data.Common.DbProviderManifest.GetInformation" /> method to get the conceptual schema definition information.</summary>
    </member>
    <member name="M:System.Data.Common.DbProviderManifest.EscapeLikeArgument(System.String)">
      <summary>Provider writers should override this method to return the argument with the wildcards and the escape  character escaped. This method is only used if <see cref="M:System.Data.Common.DbProviderManifest.SupportsEscapingLikeArgument(System.Char@)" /> returns true.</summary>
      <returns>The argument with the wildcards and the escape character escaped.</returns>
      <param name="argument">The argument to be escaped.</param>
    </member>
    <member name="M:System.Data.Common.DbProviderManifest.GetDbInformation(System.String)">
      <summary>When overridden in a derived class, this method returns provider-specific information. This method should never return null.</summary>
      <returns>The <see cref="T:System.Xml.XmlReader" /> object that represents the mapping to the underlying data store catalog. Providers should override GetDbInformation to return information specific to their provider. The schema of the returned XmlReader must comply with the EDM specification for the given type of information.</returns>
      <param name="informationType">The type of the information to return. Possible values are:StoreSchemaDefinitionStoreSchemaMapping</param>
    </member>
    <member name="M:System.Data.Common.DbProviderManifest.GetEdmType(System.Data.Metadata.Edm.TypeUsage)">
      <summary>When overridden in a derived class, this method maps the specified storage type and a set of facets for that type to an EDM type.</summary>
      <returns>The T:System.Data.Metadata.Edm.TypeUsage instance that describes an EDM type and a set of facets for that type.</returns>
      <param name="storeType">The <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> instance that describes a storage type and a set of facets for that type to be mapped to the EDM type.</param>
    </member>
    <member name="M:System.Data.Common.DbProviderManifest.GetFacetDescriptions(System.Data.Metadata.Edm.EdmType)">
      <summary>Returns the <see cref="T:System.Data.Metadata.Edm.FacetDescription" /> objects for a particular type.</summary>
      <returns>The <see cref="T:System.Data.Metadata.Edm.FacetDescription" /> objects for the specified EDM type.</returns>
      <param name="edmType">The EDM type to return the facet description for.</param>
    </member>
    <member name="M:System.Data.Common.DbProviderManifest.GetInformation(System.String)">
      <summary>Gets provider-specific information.</summary>
      <param name="informationType">The type of the information to return. Possible values are:StoreSchemaDefinitionStoreSchemaMappingConceptualSchemaDefinition</param>
    </member>
    <member name="M:System.Data.Common.DbProviderManifest.GetStoreFunctions">
      <summary>When overridden in a derived class, returns a collection of EDM functions supported by the provider manifest.</summary>
      <returns>A collection of EDM functions.</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderManifest.GetStoreType(System.Data.Metadata.Edm.TypeUsage)">
      <summary>When overridden in a derived class, this method maps the specified EDM type and a set of facets for that type to a storage type.</summary>
      <returns>The <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> instance that describes a storage type and a set of facets for that type.</returns>
      <param name="edmType">The <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> instance that describes the EDM type and a set of facets for that type to be mapped to a storage type.</param>
    </member>
    <member name="M:System.Data.Common.DbProviderManifest.GetStoreTypes">
      <summary>When overridden in a derived class, returns the set of primative types supported by the data source.</summary>
      <returns>The set of types supported by the data source.</returns>
    </member>
    <member name="P:System.Data.Common.DbProviderManifest.NamespaceName">
      <summary>Gets the namespace used by this provider manifest.</summary>
      <returns>The namespace used by this provider manifest.</returns>
    </member>
    <member name="F:System.Data.Common.DbProviderManifest.StoreSchemaDefinition">
      <summary>Value to pass to the <see cref="M:System.Data.Common.DbProviderManifest.GetInformation" /> method to get the store schema definition information.</summary>
    </member>
    <member name="F:System.Data.Common.DbProviderManifest.StoreSchemaMapping">
      <summary>Value to pass to the <see cref="M:System.Data.Common.DbProviderManifest.GetInformation" /> method to get the store schema mapping information.</summary>
    </member>
    <member name="M:System.Data.Common.DbProviderManifest.SupportsEscapingLikeArgument(System.Char@)">
      <summary>Indicates if the provider supports escaping strings to be used as patterns in a Like expression.</summary>
      <returns>Returns true if this provider supports escaping strings to be used as patterns in a Like expression; otherwise, false. The default implementation returns false.</returns>
      <param name="escapeCharacter">If the provider supports escaping, the character that would be used as the escape character.</param>
    </member>
    <member name="T:System.Data.Common.DbProviderServices">
      <summary>Represents a set of methods for creating correct command definition objects and accessing provider manifest information.</summary>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.#ctor">
      <summary>Initializes a new instance of a <see cref="T:System.Data.Common.DbProviderServices" /> class.</summary>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.CreateCommandDefinition(System.Data.Common.CommandTrees.DbCommandTree)">
      <summary>Creates a command definition object from the specified command tree.</summary>
      <returns>An exectable command definition object.</returns>
      <param name="commandTree">The command tree for the statement. </param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.CreateCommandDefinition(System.Data.Common.DbCommand)">
      <summary>Creates a <see cref="T:System.Data.Common.DbCommandDefinition" /> that uses the specified <see cref="T:System.Data.Common.DbCommand" />.</summary>
      <returns>A <see cref="T:System.Data.Common.DbCommandDefinition" /> object that represents the executable command definition object.</returns>
      <param name="prototype">A <see cref="T:System.Data.Common.DbCommand" /> used to create the <see cref="T:System.Data.Common.DbCommandDefinition" />.</param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.CreateCommandDefinition(System.Data.Common.DbProviderManifest,System.Data.Common.CommandTrees.DbCommandTree)">
      <summary>Creates a <see cref="T:System.Data.Common.DbCommandDefinition" /> object from a command tree.</summary>
      <returns>An exectable command definition object.</returns>
      <param name="providerManifest">A provider manifest previously retrieved from the store provider.</param>
      <param name="commandTree">A command tree for the statement.</param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.CreateDatabase(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Metadata.Edm.StoreItemCollection)">
      <summary>Creates a database indicated by connection and creates schema objects (tables, primary keys, foreign keys) based on the contents of a <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" />.</summary>
      <param name="connection">A connection to a non-existent database that needs to be created and populated with the store objects indicated by the <paramref name="storeItemCollection" /> parameter.</param>
      <param name="commandTimeout">Execution timeout for any commands needed to create the database.</param>
      <param name="storeItemCollection">The collection of all store items based on which the script should be created.</param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.CreateDatabaseScript(System.String,System.Data.Metadata.Edm.StoreItemCollection)">
      <summary>Generates a data definition langauge (DDL script that creates schema objects (tables, primary keys, foreign keys) based on the contents of the <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" /> parameter and targeted for the version of the database corresponding to the provider manifest token.</summary>
      <returns>A DDL script that creates schema objects based on the contents of the <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" /> parameter and targeted for the version of the database corresponding to the provider manifest token.</returns>
      <param name="providerManifestToken">The provider manifest token identifying the target version.</param>
      <param name="storeItemCollection">The structure of the database to create.</param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.CreateDbCommandDefinition(System.Data.Common.DbProviderManifest,System.Data.Common.CommandTrees.DbCommandTree)">
      <summary>Creates a command definition object for the specified provider manifest and command tree.</summary>
      <returns>An exectable command definition object.</returns>
      <param name="providerManifest">Provider manifest previously retrieved from the store provider.</param>
      <param name="commandTree">Command tree for the statement.</param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.DatabaseExists(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Metadata.Edm.StoreItemCollection)">
      <summary>Returns a value indicating whether a given database exists on the server and whether schema objects contained in the storeItemCollection have been created.</summary>
      <returns>true if the database indicated by the connection and the <paramref name="storeItemCollection" /> parameter exists.</returns>
      <param name="connection">Connection to a database whose existence is verified by this method.</param>
      <param name="commandTimeout">Execution timeout for any commands needed to determine the existence of the database.</param>
      <param name="storeItemCollection">The collection of all store items contained in the database whose existence is determined by this method.</param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.DbCreateDatabase(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Metadata.Edm.StoreItemCollection)">
      <summary>Creates a database indicated by connection and creates schema objects (tables, primary keys, foreign keys) based on the contents of a <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" />.</summary>
      <param name="connection">Connection to a non-existent database that needs to be created and populated with the store objects indicated with the storeItemCollection parameter.</param>
      <param name="commandTimeout">Execution timeout for any commands needed to create the database.</param>
      <param name="storeItemCollection">The collection of all store items based on which the script should be created.</param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.DbCreateDatabaseScript(System.String,System.Data.Metadata.Edm.StoreItemCollection)">
      <summary>Generates a data definition langauge (DDL script that creates schema objects (tables, primary keys, foreign keys) based on the contents of the <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" /> parameter and targeted for the version of the database corresponding to the provider manifest token.</summary>
      <returns>A DDL script that creates schema objects based on the contents of the <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" /> parameter and targeted for the version of the database corresponding to the provider manifest token.</returns>
      <param name="providerManifestToken">The provider manifest token identifying the target version.</param>
      <param name="storeItemCollection">The structure of the database.</param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.DbDatabaseExists(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Metadata.Edm.StoreItemCollection)">
      <summary>Returns a value indicating whether a given database exists on the server and whether schema objects contained in the storeItemCollection have been created.</summary>
      <returns>true if the database indicated by the connection and the <paramref name="storeItemCollection" /> parameter exists.</returns>
      <param name="connection">Connection to a database whose existence is verified by this method.</param>
      <param name="commandTimeout">Execution timeout for any commands needed to determine the existence of the database.</param>
      <param name="storeItemCollection">The structure of the database whose existence is determined by this method.</param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.DbDeleteDatabase(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Metadata.Edm.StoreItemCollection)">
      <summary>Deletes all store objects specified in the store item collection from the database and the database itself.</summary>
      <param name="connection">Connection to an existing database that needs to be deleted.</param>
      <param name="commandTimeout">Execution timeout for any commands needed to delete the database.</param>
      <param name="storeItemCollection">The structure of the database to be deleted. </param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.DeleteDatabase(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Metadata.Edm.StoreItemCollection)">
      <summary>Deletes all store objects specified in the store item collection from the database and the database itself.</summary>
      <param name="connection">Connection to an existing database that needs to be deleted.</param>
      <param name="commandTimeout">Execution timeout for any commands needed to delete the database.</param>
      <param name="storeItemCollection">The structure of the database to be deleted.</param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.GetDbProviderManifest(System.String)">
      <summary>When overridden in a derived class, returns an instance of a class that derives from the <see cref="T:System.Data.Common.DbProviderManifest" />.</summary>
      <returns>A <see cref="T:System.Data.Common.DbProviderManifest" /> object that represents the provider manifest.</returns>
      <param name="manifestToken">The token information associated with the provider manifest.</param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.GetDbProviderManifestToken(System.Data.Common.DbConnection)">
      <summary>Returns provider manifest token given a connection.</summary>
      <returns>The provider manifest token for the specified connection.</returns>
      <param name="connection">Connection to provider.</param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.GetProviderFactory(System.Data.Common.DbConnection)">
      <summary>Retrieves the <see cref="T:System.Data.Common.DbProviderFactory" /> based on the specified <see cref="T:System.Data.Common.DbConnection" />.</summary>
      <returns>An instance of <see cref="T:System.Data.Common.DbProviderFactory" />.</returns>
      <param name="connection">The <see cref="T:System.Data.Common.DbConnection" /> to use.</param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.GetProviderManifest(System.String)">
      <summary>Returns the provider manifest by using the specified version information.</summary>
      <returns>A <see cref="T:System.Data.Common.DbProviderManifest" /> object that represents the provider manifest.</returns>
      <param name="manifestToken">The token information associated with the provider manifest.</param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.GetProviderManifestToken(System.Data.Common.DbConnection)">
      <summary>Returns provider manifest token.</summary>
      <returns>The provider manifest token.</returns>
      <param name="connection">Connection to provider.</param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.GetProviderServices(System.Data.Common.DbConnection)">
      <summary>Returns providers given a connection.</summary>
      <returns>The T:System.Data.Common. DbProviderServices instanced based on the specified connection.</returns>
      <param name="connection">Connection to provider.</param>
    </member>
    <member name="T:System.Data.Common.DbXmlEnabledProviderManifest">
      <summary>Represents a base class that implements the <see cref="T:System.Data.Common.DbProviderManifest" /> based on an XML definition. You can use the <see cref="T:System.Data.Common.DbXmlEnabledProviderManifest" /> class to obtain provider-specific information at runtime. </summary>
    </member>
    <member name="M:System.Data.Common.DbXmlEnabledProviderManifest.#ctor(System.Xml.XmlReader)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Common.DbXmlEnabledProviderManifest" /> class.</summary>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> object that provides access to the XML data in the provider manifest file.</param>
    </member>
    <member name="M:System.Data.Common.DbXmlEnabledProviderManifest.GetFacetDescriptions(System.Data.Metadata.Edm.EdmType)">
      <summary>Returns the list of facet descriptions for the specified Entity Data Model (EDM) type.</summary>
      <returns>A collection of type <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> that contains the list of facet descriptions for the specified EDM type.</returns>
      <param name="type">An <see cref="T:System.Data.Metadata.Edm.EdmType" /> for which the facet descriptions are to be retrieved.</param>
    </member>
    <member name="M:System.Data.Common.DbXmlEnabledProviderManifest.GetStoreFunctions">
      <summary>Returns the list of provider-supported functions.</summary>
      <returns>A collection of type <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> that contains the list of provider-supported functions.</returns>
    </member>
    <member name="M:System.Data.Common.DbXmlEnabledProviderManifest.GetStoreTypes">
      <summary>Returns the list of primitive types supported by the storage provider.</summary>
      <returns>A collection of type <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> that contains the list of primitive types supported by the storage provider.</returns>
    </member>
    <member name="P:System.Data.Common.DbXmlEnabledProviderManifest.NamespaceName">
      <summary>Gets the namespace name supported by this provider manifest.</summary>
      <returns>The namespace name supported by this provider manifest.</returns>
    </member>
    <member name="P:System.Data.Common.DbXmlEnabledProviderManifest.StoreTypeNameToEdmPrimitiveType">
      <summary>Gets the best mapped equivalent Entity Data Model (EDM) type for a specified storage type name.</summary>
      <returns>The best mapped equivalent EDM type for a specified storage type name.</returns>
    </member>
    <member name="P:System.Data.Common.DbXmlEnabledProviderManifest.StoreTypeNameToStorePrimitiveType">
      <summary>Gets the best mapped equivalent storage primitive type for a specified storage type name.</summary>
      <returns>The best mapped equivalent storage primitive type for a specified storage type name.</returns>
    </member>
    <member name="T:System.Data.Common.EntityRecordInfo">
      <summary>Provides access to entity metadata. </summary>
    </member>
    <member name="M:System.Data.Common.EntityRecordInfo.#ctor(System.Data.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.Data.Metadata.Edm.EdmMember},System.Data.EntityKey,System.Data.Metadata.Edm.EntitySet)">
      <summary>Initializes a new <see cref="T:System.Data.Common.EntityRecordInfo" /> object of a specific entity type with an enumerable collection of data fields and with specific key and entity set information.</summary>
      <param name="metadata">The <see cref="T:System.Data.Metadata.Edm.EntityType" /> of the entity represented by the <see cref="T:System.Data.Common.DbDataRecord" /> described by this <see cref="T:System.Data.Common.EntityRecordInfo" /> object.</param>
      <param name="memberInfo">An enumerable collection of <see cref="T:System.Data.Metadata.Edm.EdmMember" /> objects that represent column information.</param>
      <param name="entityKey">The <see cref="T:System.Data.EntityKey" /> that is the key for the entity.</param>
      <param name="entitySet">An <see cref="T:System.Data.Metadata.Edm.EntitySet" /> object that is the entity set to which the entity belongs.</param>
    </member>
    <member name="P:System.Data.Common.EntityRecordInfo.EntityKey">
      <summary>Gets the <see cref="T:System.Data.EntityKey" /> for the entity.</summary>
      <returns>An <see cref="T:System.Data.EntityKey" />.</returns>
    </member>
    <member name="T:System.Data.Common.FieldMetadata">
      <summary>Provides access to field metadata for a <see cref="T:System.Data.Common.DataRecordInfo" /> object. </summary>
    </member>
    <member name="M:System.Data.Common.FieldMetadata.#ctor(System.Int32,System.Data.Metadata.Edm.EdmMember)">
      <summary>Initializes a new <see cref="T:System.Data.Common.FieldMetadata" /> object with the specified ordinal value and field type.</summary>
      <param name="ordinal">An integer specified the location of the metadata.</param>
      <param name="fieldType">The field type.</param>
    </member>
    <member name="P:System.Data.Common.FieldMetadata.FieldType">
      <summary>Gets the type of field for this <see cref="T:System.Data.Common.FieldMetadata" /> object.</summary>
      <returns>The type of field for this <see cref="T:System.Data.Common.FieldMetadata" /> object.</returns>
    </member>
    <member name="P:System.Data.Common.FieldMetadata.Ordinal">
      <summary>Gets the ordinal for this <see cref="T:System.Data.Common.FieldMetadata" /> object.</summary>
      <returns>An integer representing the ordinal value.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbAggregate">
      <summary>Implements the basic functionality required by aggregates in a GroupBy clause. </summary>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbAggregate.Arguments">
      <summary>Gets the list of expressions that define the arguments to this <see cref="T:System.Data.Common.CommandTrees.DbAggregate" />.</summary>
      <returns>The list of expressions that define the arguments to this <see cref="T:System.Data.Common.CommandTrees.DbAggregate" />.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbAggregate.ResultType">
      <summary>Gets the result type of this <see cref="T:System.Data.Common.CommandTrees.DbAggregate" />. </summary>
      <returns>The result type of this <see cref="T:System.Data.Common.CommandTrees.DbAggregate" />.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbAndExpression">
      <summary>Represents the logical AND of two Boolean arguments. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbAndExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbAndExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by the <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbApplyExpression">
      <summary>Represents an apply operation, which is the invocation of the specified function for each element in the specified input set. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbApplyExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbApplyExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by the <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbApplyExpression.Apply">
      <summary>Gets the <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" /> that specifies the function that is invoked for each element in the input set.</summary>
      <returns>The <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" /> that specifies the function that is invoked for each element in the input set.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbApplyExpression.Input">
      <summary>Gets the <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" /> that specifies the input set.</summary>
      <returns>The <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" /> that specifies the input set.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbArithmeticExpression">
      <summary>Represents an arithmetic operation applied to numeric arguments. Addition, subtraction, multiplication, division, modulo, and negation are arithmetic operations. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbArithmeticExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbArithmeticExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbArithmeticExpression.Arguments">
      <summary>Gets the list of <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> elements that define the current arguments.</summary>
      <returns>A fixed-size list of <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> elements.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbBinaryExpression">
      <summary>Implements the basic functionality required by expressions that accept two expression operands.</summary>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbBinaryExpression.Left">
      <summary>Gets or sets the <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that defines the left argument.</summary>
      <returns>The <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that defines the left argument.</returns>
      <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
      <exception cref="T:System.ArgumentException">The expression is not associated with the command tree of the <see cref="T:System.Data.Common.CommandTrees.DbBinaryExpression" />,or its result type is not equal or promotable to the required type for the left argument.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbBinaryExpression.Right">
      <summary>Gets or sets the <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that defines the right argument.</summary>
      <returns>The <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that defines the right argument.</returns>
      <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
      <exception cref="T:System.ArgumentException">The expression is not associated with the command tree of the <see cref="T:System.Data.Common.CommandTrees.DbBinaryExpression" />,or its result type is not equal or promotable to the required type for the right argument.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbCaseExpression">
      <summary>Represents the When, Then, and Else clauses of the <see cref="T:System.Data.Common.CommandTrees.DbCaseExpression" />. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbCaseExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbCaseExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor." /></typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbCaseExpression.Else">
      <summary>Gets or sets the Else clause of this <see cref="T:System.Data.Common.CommandTrees.DbCaseExpression" />.</summary>
      <returns>The Else clause of this <see cref="T:System.Data.Common.CommandTrees.DbCaseExpression" />.</returns>
      <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
      <exception cref="T:System.ArgumentException">The expression is not associated with the command tree of the <see cref="T:System.Data.Common.CommandTrees.DbCaseExpression" />,or its result type is not equal or promotable to the result type of the <see cref="T:System.Data.Common.CommandTrees.DbCaseExpression" />.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbCaseExpression.Then">
      <summary>Gets the Then clauses of this <see cref="T:System.Data.Common.CommandTrees.DbCaseExpression" />.</summary>
      <returns>The Then clauses of this <see cref="T:System.Data.Common.CommandTrees.DbCaseExpression" />.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbCaseExpression.When">
      <summary>Gets the When clauses of this <see cref="T:System.Data.Common.CommandTrees.DbCaseExpression" />.</summary>
      <returns>The When clauses of this <see cref="T:System.Data.Common.CommandTrees.DbCaseExpression" />.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbCastExpression">
      <summary>Represents the type conversion of a single argument to the specified type. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbCastExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbCastExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor." /></typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbCommandTree">
      <summary>An immutable class that implements the basic functionality for the Query, Insert, Update, Delete, and function invocation command tree types. </summary>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbCommandTree.Parameters">
      <summary>Gets the name and corresponding type of each parameter that can be referenced within this <see cref="T:System.Data.Common.CommandTrees.DbCommandTree" />.</summary>
      <returns>The name and corresponding type of each parameter that can be referenced within this <see cref="T:System.Data.Common.CommandTrees.DbCommandTree" />.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbComparisonExpression">
      <summary>Represents a comparison operation applied to two arguments. Equality, greater than, greater than or equal, less than, less than or equal, and inequality are comparison operations. This class cannot be inherited.  </summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbComparisonExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbComparisonExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor." /></typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbConstantExpression">
      <summary>Represents different kinds of constants (literals). This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbConstantExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbConstantExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor." /></typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbConstantExpression.Value">
      <summary>Gets the constant value.</summary>
      <returns>The constant value.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbCrossJoinExpression">
      <summary>Represents an unconditional join operation between the given collection arguments. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbCrossJoinExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbCrossJoinExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor." /></typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbCrossJoinExpression.Inputs">
      <summary>Gets a <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" /> list that provides the input sets to the join.</summary>
      <returns>A <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" /> list that provides the input sets to the join.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbDeleteCommandTree">
      <summary>Represents a single row delete operation expressed as a command tree. This class cannot be inherited.  </summary>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbDeleteCommandTree.Predicate">
      <summary>Gets an <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that specifies the predicate used to determine which members of the target collection should be deleted.</summary>
      <returns>An <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that specifies the predicate used to determine which members of the target collection should be deleted.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbDerefExpression">
      <summary>Represents the an expression that retrieves an entity based on the specified reference. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbDerefExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbDerefExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor." /></typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbDistinctExpression">
      <summary>Removes duplicate elements from the specified set argument. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbDistinctExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbDistinctExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />. </returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor." /></typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbElementExpression">
      <summary>Represents the conversion of the specified set argument to a singleton. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbElementExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbElementExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor." /></typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbEntityRefExpression">
      <summary>Represents an expression that extracts a reference from the underlying entity instance. This class cannot be inherited.  </summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbEntityRefExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbEntityRefExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor." /></typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbExceptExpression">
      <summary>Represents the set subtraction operation between the left and right operands. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExceptExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExceptExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor." /></typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbExpression">
      <summary>Implements the basic functionality required by expression types.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>The type of the result produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null).</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> instance.</summary>
      <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Data.Common.CommandTrees.DbExpression" />; otherwise, false.</returns>
      <param name="obj">The object to compare to the current <see cref="T:System.Data.Common.CommandTrees.DbExpression" />.</param>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbExpression.ExpressionKind">
      <summary>Gets the kind of the expression, which indicates the operation of this expression.</summary>
      <returns>The kind of the expression, which indicates the operation of this expression.</returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.GetHashCode">
      <summary>Serves as a hash function for the type.</summary>
      <returns>A hash code for the current <see cref="T:System.Data.Common.CommandTrees.DbExpression" />. </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbExpression.ResultType">
      <summary>Gets the type metadata for the result type of the expression.</summary>
      <returns>The type metadata for the result type of the expression.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbExpressionBinding">
      <summary>Represents an input set to relational expressions such as <see cref="T:System.Data.Common.CommandTrees.DbFilterExpression" />, <see cref="T:System.Data.Common.CommandTrees.DbProjectExpression" />, and <see cref="T:System.Data.Common.CommandTrees.DbJoinExpression" />. This class cannot be inherited. </summary>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbExpressionBinding.Expression">
      <summary>Gets or sets the <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that defines the input set.</summary>
      <returns>The <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that defines the input set.</returns>
      <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
      <exception cref="T:System.ArgumentException">The expression is not associated with the command tree of the binding, or its result type is not equal or promotable to the result type of the current value of the property.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbExpressionBinding.Variable">
      <summary>Gets the <see cref="T:System.Data.Common.CommandTrees.DbVariableReferenceExpression" /> that references the element variable.</summary>
      <returns>The variable reference.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbExpressionBinding.VariableName">
      <summary>Gets the name assigned to the element variable.</summary>
      <returns>The name assigned to the element variable.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbExpressionBinding.VariableType">
      <summary>Gets the type metadata of the element variable.</summary>
      <returns>The type metadata of the element variable. </returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbExpressionKind">
      <summary>Contains values that each expression class uses to denote the operation it represents. The <see cref="P:System.Data.Common.CommandTrees.DbExpression.ExpressionKind" /> property of an <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> can be retrieved to determine which operation that expression represents. </summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.All">
      <summary>true-for-all expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.And">
      <summary>Logical AND expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Any">
      <summary>true-for-any expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Case">
      <summary>Conditional case statement expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Cast">
      <summary>Polymorphic type cast expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Constant">
      <summary>Constant value expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.CrossApply">
      <summary>Cross apply expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.CrossJoin">
      <summary>Cross join expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Deref">
      <summary>Dereference expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Distinct">
      <summary>Duplicate removal expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Divide">
      <summary>Division expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Element">
      <summary>Set-to-singleton conversion expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.EntityRef">
      <summary>Entity reference value retrieval expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Equals">
      <summary>Equality expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Except">
      <summary>Set subtraction expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Filter">
      <summary>Restriction expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.FullOuterJoin">
      <summary>Full outer join expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Function">
      <summary>Standalone function expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.GreaterThan">
      <summary>Greater than expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.GreaterThanOrEquals">
      <summary>Greater than or equal expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.GroupBy">
      <summary>Grouping expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.InnerJoin">
      <summary>Inner join expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Intersect">
      <summary>Set intersection expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.IsEmpty">
      <summary>Empty set determination expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.IsNull">
      <summary>Null determination expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.IsOf">
      <summary>Type comparison (specified Type or Subtype) expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.IsOfOnly">
      <summary>Type comparison (specified Type only) expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Lambda">
      <summary>Lambda function expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.LeftOuterJoin">
      <summary>Left outer join expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.LessThan">
      <summary>Less than expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.LessThanOrEquals">
      <summary>Less than or equal expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Like">
      <summary>String comparison expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Limit">
      <summary>Result count restriction (TOP n).</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Minus">
      <summary>Subtraction expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Modulo">
      <summary>Modulo expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Multiply">
      <summary>Multiplication expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.NewInstance">
      <summary>Instance, row, and set construction expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Not">
      <summary>Logical NOT expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.NotEquals">
      <summary>Inequality expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Null">
      <summary>Null expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.OfType">
      <summary>Set members by type (or subtype) expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.OfTypeOnly">
      <summary>Set members by exact type expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Or">
      <summary>Logical OR expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.OuterApply">
      <summary>Outer apply expressions</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.ParameterReference">
      <summary>Reference to a parameter expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Plus">
      <summary>Addition expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Project">
      <summary>Projection expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Property">
      <summary>Static or instance property retrieval expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Ref">
      <summary>Reference expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.RefKey">
      <summary>Ref key value retrieval expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.RelationshipNavigation">
      <summary>Relationship (composition or association) navigation expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Scan">
      <summary>Entity or relationship set scan expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Skip">
      <summary>Skip elements of an ordered collection.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Sort">
      <summary>Sorting expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Treat">
      <summary>Type conversion expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.UnaryMinus">
      <summary>Negation expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.UnionAll">
      <summary>Set union (with duplicates) expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.VariableReference">
      <summary>Reference to a variable expressions.</summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbExpressionVisitor">
      <summary>Defines the basic functionality that should be implemented by visitors that do not return a result value.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> class.  </summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbAndExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbAndExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbAndExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbApplyExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbApplyExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbApplyExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbArithmeticExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbArithmeticExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbArithmeticExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbCaseExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbCaseExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbCaseExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbCastExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbCastExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbCastExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbComparisonExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbComparisonExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbComparisonExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbConstantExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbConstantExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbConstantExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbCrossJoinExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbCrossJoinExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbCrossJoinExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbDerefExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbDerefExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbDerefExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbDistinctExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbDistinctExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbDistinctExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbElementExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbElementExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbElementExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbEntityRefExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbEntityRefExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbEntityRefExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbExceptExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbExceptExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbExceptExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbExpression)">
      <summary>When overridden in a derived class, handles any expression of an unrecognized type.</summary>
      <param name="expression">The expression to be handled.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbFilterExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbFilterExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbFilterExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbFunctionExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbGroupByExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbGroupByExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbGroupByExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbIntersectExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbIntersectExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbIntersectExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbIsEmptyExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbIsEmptyExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbIsEmptyExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbIsNullExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbIsNullExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbIsNullExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbIsOfExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbIsOfExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbIsOfExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbJoinExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbJoinExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbJoinExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbLambdaExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbLambdaExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbLambdaExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbLikeExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbLikeExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbLikeExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbLimitExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbLimitExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbLimitExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbNewInstanceExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbNewInstanceExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbNewInstanceExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbNotExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbNotExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbNotExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbNullExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbNullExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbNullExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbOfTypeExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbOfTypeExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbOfTypeExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbOrExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbOrExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbOrExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbParameterReferenceExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbParameterReferenceExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbParameterReferenceExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbProjectExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbProjectExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbProjectExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbPropertyExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbPropertyExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbPropertyExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbQuantifierExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbQuantifierExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbQuantifierExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbRefExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbRefExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbRefExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbRefKeyExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbRefKeyExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbRefKeyExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbRelationshipNavigationExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbScanExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbScanExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbScanExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbSkipExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbSkipExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbSkipExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbSortExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbSortExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbSortExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbTreatExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbTreatExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbTreatExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbUnionAllExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbUnionAllExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbUnionAllExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbVariableReferenceExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbVariableReferenceExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbVariableReferenceExpression" /> that is visited.</param>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbExpressionVisitor`1">
      <summary>Defines the basic functionality that should be implemented by visitors that return a result value of a specific type. </summary>
      <typeparam name="TResultType">The type of the result produced by the visitor.</typeparam>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor`1" /> class. </summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbAndExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbAndExpression" />. </summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbAndExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbApplyExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbApplyExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbApplyExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbArithmeticExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbArithmeticExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbArithmeticExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbCaseExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbCaseExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbCaseExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbCastExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbCastExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbCastExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbComparisonExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbComparisonExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbComparisonExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbConstantExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbConstantExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbConstantExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbCrossJoinExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbCrossJoinExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbCrossJoinExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbDerefExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbDerefExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbDerefExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbDistinctExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbDistinctExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbDistinctExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbElementExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbElementExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbElementExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbEntityRefExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbEntityRefExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbEntityRefExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbExceptExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbExceptExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbExceptExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbExpression)">
      <summary>When overridden in a derived class, handles any expression of an unrecognized type.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbFilterExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbFilterExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbFilterExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbFunctionExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbGroupByExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbGroupByExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbGroupByExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbIntersectExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbIntersectExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbIntersectExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbIsEmptyExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbIsEmptyExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbIsEmptyExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbIsNullExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbIsNullExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbIsNullExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbIsOfExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbIsOfExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbIsOfExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbJoinExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbJoinExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbJoinExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbLambdaExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern method for <see cref="T:System.Data.Common.CommandTrees.DbLambdaExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbLambdaExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbLikeExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbLikeExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbLikeExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbLimitExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbLimitExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbLimitExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbNewInstanceExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbNewInstanceExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbNewInstanceExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbNotExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbNotExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbNotExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbNullExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbNullExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbNullExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbOfTypeExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbOfTypeExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbOfTypeExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbOrExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbOrExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbOrExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbParameterReferenceExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbParameterReferenceExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbParameterReferenceExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbProjectExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbProjectExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbProjectExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbPropertyExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbPropertyExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbPropertyExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbQuantifierExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbQuantifierExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbQuantifierExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbRefExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbRefExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbRefExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbRefKeyExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbRefKeyExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbRefKeyExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbRelationshipNavigationExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbScanExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbScanExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbScanExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbSkipExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbSkipExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbSkipExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbSortExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbSortExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbSortExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbTreatExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbTreatExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbTreatExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbUnionAllExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbUnionAllExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbUnionAllExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbVariableReferenceExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbVariableReferenceExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbVariableReferenceExpression" /> that is being visited.</param>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbFilterExpression">
      <summary>Represents a predicate applied to filter an input set. This produces the set of elements that satisfy the predicate. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbFilterExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbFilterExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbFilterExpression.Input">
      <summary>Gets the <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" /> that specifies the input set.</summary>
      <returns>The <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" /> that specifies the input set.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbFilterExpression.Predicate">
      <summary>Gets or sets the <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that specifies the predicate used to filter the input set.</summary>
      <returns>The <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that specifies the predicate used to filter the input set.</returns>
      <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
      <exception cref="T:System.ArgumentException">The expression is not associated with the command tree of the <see cref="T:System.Data.Common.CommandTrees.DbFilterExpression" />, or its result type is not a Boolean type.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbFunctionAggregate">
      <summary>Supports standard aggregate functions, such as MIN, MAX, AVG, SUM, and so on. This class cannot be inherited.</summary>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbFunctionAggregate.Distinct">
      <summary>Gets a value indicating whether this aggregate is a distinct aggregate.</summary>
      <returns>true if the aggregate is a distinct aggregate; otherwise, false. </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbFunctionAggregate.Function">
      <summary>Gets the method metadata that specifies the aggregate function to invoke.</summary>
      <returns>The method metadata that specifies the aggregate function to invoke.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbFunctionCommandTree">
      <summary>Represents the invocation of a database function. </summary>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbFunctionCommandTree.EdmFunction">
      <summary>Gets the <see cref="T:System.Data.Metadata.Edm.EdmFunction" /> that represents the function that is being invoked.</summary>
      <returns>The <see cref="T:System.Data.Metadata.Edm.EdmFunction" /> that represents the function that is being invoked.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbFunctionCommandTree.ResultType">
      <summary>Gets the expected result type for the function’s first result set.</summary>
      <returns>The expected result type for the function’s first result set.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbFunctionExpression">
      <summary>Represents an invocation of a function. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbFunctionExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbFunctionExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbFunctionExpression.Arguments">
      <summary>Gets an <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> list that provides the arguments to the function.</summary>
      <returns>An <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> list that provides the arguments to the function.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbFunctionExpression.Function">
      <summary>Gets the metadata for the function to invoke.</summary>
      <returns>The metadata for the function to invoke.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbGroupAggregate">
      <summary>Represents a collection of elements that compose a group.  </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbGroupByExpression">
      <summary>Represents a group by operation. A group by operation is a grouping of the elements in the input set based on the specified key expressions followed by the application of the specified aggregates. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbGroupByExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbGroupByExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbGroupByExpression.Aggregates">
      <summary>Gets a <see cref="T:System.Data.Common.CommandTrees.DbAggregate" /> list that provides the aggregates to apply.</summary>
      <returns>A <see cref="T:System.Data.Common.CommandTrees.DbAggregate" /> list that provides the aggregates to apply.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbGroupByExpression.Input">
      <summary>Gets the <see cref="T:System.Data.Common.CommandTrees.DbGroupExpressionBinding" /> that specifies the input set and provides access to the set element and group element variables.</summary>
      <returns>The <see cref="T:System.Data.Common.CommandTrees.DbGroupExpressionBinding" /> that specifies the input set and provides access to the set element and group element variables.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbGroupByExpression.Keys">
      <summary>Gets a <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> list that provides grouping keys.</summary>
      <returns>A <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> list that provides grouping keys.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbGroupExpressionBinding">
      <summary>Defines the binding for the input set to a <see cref="T:System.Data.Common.CommandTrees.DbGroupByExpression" />. This class cannot be inherited.</summary>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbGroupExpressionBinding.Expression">
      <summary>Gets or sets the <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that defines the input set.</summary>
      <returns>The <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that defines the input set.</returns>
      <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
      <exception cref="T:System.ArgumentException">The expression is not associated with the command tree of the <see cref="T:System.Data.Common.CommandTrees.DbGroupExpressionBinding" />, or its result type is not equal or promotable to the result type of the current value of the property.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbGroupExpressionBinding.GroupAggregate">
      <summary>Gets the <see cref="T:System.Data.Common.CommandTrees.DbGroupAggregate" /> that represents the collection of elements in the group.</summary>
      <returns>The elements in the group.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbGroupExpressionBinding.GroupVariable">
      <summary>Gets the <see cref="T:System.Data.Common.CommandTrees.DbVariableReferenceExpression" /> that references the group element variable.</summary>
      <returns>A reference to the group element variable.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbGroupExpressionBinding.GroupVariableName">
      <summary>Gets the name assigned to the group element variable.</summary>
      <returns>The name assigned to the group element variable.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbGroupExpressionBinding.GroupVariableType">
      <summary>Gets the type metadata of the group element variable.</summary>
      <returns>The type metadata of the group element variable.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbGroupExpressionBinding.Variable">
      <summary>Gets the <see cref="T:System.Data.Common.CommandTrees.DbVariableReferenceExpression" /> that references the element variable.</summary>
      <returns>A reference to the element variable.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbGroupExpressionBinding.VariableName">
      <summary>Gets the name assigned to the element variable.</summary>
      <returns>The name assigned to the element variable.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbGroupExpressionBinding.VariableType">
      <summary>Gets the type metadata of the element variable.</summary>
      <returns>The type metadata of the element variable.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbInsertCommandTree">
      <summary>Represents a single row insert operation expressed as a command tree. This class cannot be inherited.</summary>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbInsertCommandTree.Returning">
      <summary>Gets an <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that specifies a projection of results to be returned based on the modified rows. </summary>
      <returns>An <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that specifies a projection of results to be returned based on the modified rows. null indicates that no results should be returned from this command.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbInsertCommandTree.SetClauses">
      <summary>Gets the list of insert set clauses that define the insert operation. </summary>
      <returns>The list of insert set clauses that define the insert operation. </returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbIntersectExpression">
      <summary>Represents the set intersection operation between the left and right operands. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbIntersectExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbIntersectExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbIsEmptyExpression">
      <summary>Represents an empty set determination applied to a single set argument. This class cannot be inherited.  </summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbIsEmptyExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbIsEmptyExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbIsNullExpression">
      <summary>Represents null determination applied to a single argument. This class cannot be inherited.  </summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbIsNullExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbIsNullExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbIsOfExpression">
      <summary>Represents the type comparison of a single argument against the specified type. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbIsOfExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbIsOfExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbIsOfExpression.OfType">
      <summary>Gets the type metadata that the type metadata of the argument should be compared to.</summary>
      <returns>The type metadata that the type metadata of the argument should be compared to.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbJoinExpression">
      <summary>Represents an inner, left outer, or full outer join operation between the given collection arguments on the specified join condition.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbJoinExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbJoinExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type. </param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbJoinExpression.JoinCondition">
      <summary>Gets or sets the join condition to apply.</summary>
      <returns>The join condition to apply.</returns>
      <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
      <exception cref="T:System.ArgumentException">The expression is not associated with the command tree of the <see cref="T:System.Data.Common.CommandTrees.DbJoinExpression" />, or its result type is not a Boolean type.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbJoinExpression.Left">
      <summary>Gets the <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" /> that provides the left input.</summary>
      <returns>The <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" /> that provides the left input.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbJoinExpression.Right">
      <summary>Gets the <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" /> that provides the right input.</summary>
      <returns>The <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" /> that provides the right input.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbLambda">
      <summary>Represents a lambda function that can be invoked to produce a <see cref="T:System.Data.Common.CommandTrees.DbLambdaExpression" />. This class cannot be inherited.  </summary>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbLambda.Body">
      <summary>Gets the body of the lambda expression.</summary>
      <returns>A <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that represents the body of the lambda function.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbLambda.Variables">
      <summary>Gets the parameters of the lambda expression.</summary>
      <returns>The list of lambda function parameters represented as <see cref="T:System.Data.Common.CommandTrees.DbVariableReferenceExpression" /> objects.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbLambdaExpression">
      <summary>Allows the application of a lambda function to arguments represented by <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> objects.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbLambdaExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>The visitor pattern method for expression visitors that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbLambdaExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>The visitor pattern method for expression visitors that produce a result value of a specific type.</summary>
      <returns>The type of the result produced by the expression visitor.</returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of type TResultType.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor" /></typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbLambdaExpression.Arguments">
      <summary>Gets a <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> list that provides the arguments to which the Lambda function should be applied.</summary>
      <returns>The <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> list.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbLambdaExpression.Lambda">
      <summary>Gets the <see cref="T:System.Data.Common.CommandTrees.DbLambda" /> representing the Lambda function applied by this expression.</summary>
      <returns>The <see cref="T:System.Data.Common.CommandTrees.DbLambda" /> representing the Lambda function applied by this expression.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbLikeExpression">
      <summary>Represents a string comparison against the specified pattern with an optional escape string. This class cannot be inherited.  </summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbLikeExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbLikeExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbLikeExpression.Argument">
      <summary>Gets or sets an expression that specifies the string to compare against the given pattern.</summary>
      <returns>An expression that specifies the string to compare against the given pattern.</returns>
      <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
      <exception cref="T:System.ArgumentException">The expression is not associated with the command tree of <see cref="T:System.Data.Common.CommandTrees.DbLikeExpression" />, or its result type is not a string type.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbLikeExpression.Escape">
      <summary>Gets or sets an expression that provides an optional escape string to use for the comparison.</summary>
      <returns>An expression that provides an optional escape string to use for the comparison.</returns>
      <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
      <exception cref="T:System.ArgumentException">The expression is not associated with the command tree of <see cref="T:System.Data.Common.CommandTrees.DbLikeExpression" />, or its result type is not a string type.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbLikeExpression.Pattern">
      <summary>Gets or sets an expression that specifies the pattern against which the given string should be compared.</summary>
      <returns>An expression that specifies the pattern against which the given string should be compared.</returns>
      <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
      <exception cref="T:System.ArgumentException">The expression is not associated with the command tree of <see cref="T:System.Data.Common.CommandTrees.DbLikeExpression" />, or its result type is not a string type.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbLimitExpression">
      <summary>Represents the restriction of the number of elements in the argument collection to the specified limit value.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbLimitExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbLimitExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbLimitExpression.Argument">
      <summary>Gets or sets an expression that specifies the input collection.</summary>
      <returns>An expression that specifies the input collection.</returns>
      <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
      <exception cref="T:System.ArgumentException">The expression is not associated with the command tree of the <see cref="T:System.Data.Common.CommandTrees.DbLimitExpression" />, or its result type is not a collection type.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbLimitExpression.Limit">
      <summary>Gets or sets an expression that specifies the limit on the number of elements returned from the input collection.</summary>
      <returns>An expression that specifies the limit on the number of elements returned from the input collection.</returns>
      <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
      <exception cref="T:System.ArgumentException">The expression is not associated with the command tree of the <see cref="T:System.Data.Common.CommandTrees.DbLimitExpression" />, or is not one of <see cref="T:System.Data.Common.CommandTrees.DbConstantExpression" /> or <see cref="T:System.Data.Common.CommandTrees.DbParameterReferenceExpression" />, or its result type is not equal or promotable to a 64-bit integer type.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbLimitExpression.WithTies">
      <summary>Gets whether the limit operation will include tied results. Including tied results might produce more results than specified by the <see cref="P:System.Data.Common.CommandTrees.DbLimitExpression.Limit" /> value.</summary>
      <returns>true if the limit operation will include tied results; otherwise, false. The default is false.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbModificationClause">
      <summary>Specifies a single clause in an insert or update modification operation.</summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbModificationCommandTree">
      <summary>Represents a data manipulation language (DML) operation expressed as a command tree.</summary>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbModificationCommandTree.Target">
      <summary>Gets the <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" /> that specifies the target table for the data manipulation language (DML) operation.</summary>
      <returns>The <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" /> that specifies the target table for the DML operation.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbNewInstanceExpression">
      <summary>Represents the construction of a new instance of a given type, including set and record types. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbNewInstanceExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbNewInstanceExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbNewInstanceExpression.Arguments">
      <summary>Gets an <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> list that provides the property/column values or set elements for the new instance.</summary>
      <returns>An <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> list that provides the property/column values or set elements for the new instance.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbNotExpression">
      <summary>Represents the logical NOT of a single Boolean argument. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbNotExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbNotExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />. </returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbNullExpression">
      <summary>Represents a reference to a typed null literal. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbNullExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbNullExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbOfTypeExpression">
      <summary>Represents the retrieval of elements of the specified type from the given set argument. This class cannot be inherited.  </summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbOfTypeExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbOfTypeExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbOfTypeExpression.OfType">
      <summary>Gets the metadata of the type of elements that should be retrieved from the set argument.</summary>
      <returns>The metadata of the type of elements that should be retrieved from the set argument. </returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbOrExpression">
      <summary>Represents the logical OR of two Boolean arguments. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbOrExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbOrExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbParameterReferenceExpression">
      <summary>Represents a reference to a parameter declared on the command tree that contains this expression. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbParameterReferenceExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbParameterReferenceExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />. </returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbParameterReferenceExpression.ParameterName">
      <summary>Gets the name of the referenced parameter.</summary>
      <returns>The name of the referenced parameter.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbProjectExpression">
      <summary>Represents the projection of a given input set over the specified expression. This class cannot be inherited.  </summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbProjectExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbProjectExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbProjectExpression.Input">
      <summary>Gets the <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" /> that specifies the input set.</summary>
      <returns>The <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" /> that specifies the input set.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbProjectExpression.Projection">
      <summary>Gets or sets the <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that defines the projection.</summary>
      <returns>The <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that defines the projection.</returns>
      <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
      <exception cref="T:System.ArgumentException">The expression is not associated with the command tree of the <see cref="T:System.Data.Common.CommandTrees.DbProjectExpression" />, or its result type is not equal or promotable to the reference type of the current projection.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbPropertyExpression">
      <summary>Provides methods and properties for retrieving an instance property. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbPropertyExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbPropertyExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbPropertyExpression.Instance">
      <summary>Gets or sets a <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that defines the instance from which the property should be retrieved.</summary>
      <returns>A <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that defines the instance from which the property should be retrieved.</returns>
      <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
      <exception cref="T:System.ArgumentException">The expression is not associated with the command tree of the <see cref="T:System.Data.Common.CommandTrees.DbPropertyExpression" />, or its result type is not equal or promotable to the type that defines the property.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbPropertyExpression.op_Implicit(System.Data.Common.CommandTrees.DbPropertyExpression)~System.Collections.Generic.KeyValuePair{System.String,System.Data.Common.CommandTrees.DbExpression}">
      <summary>Creates a new key/value pair based on this property expression.</summary>
      <returns>A new key/value pair with the key and value derived from the <see cref="T:System.Data.Common.CommandTrees.DbPropertyExpression" />.</returns>
      <param name="value">This property expression.</param>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbPropertyExpression.Property">
      <summary>Gets the property metadata for the property to retrieve.</summary>
      <returns>The property metadata for the property to retrieve.</returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbPropertyExpression.ToKeyValuePair">
      <summary>Creates a new key/value pair based on this property expression.</summary>
      <returns>A new key/value pair with the key and value derived from the <see cref="T:System.Data.Common.CommandTrees.DbPropertyExpression" />.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbQuantifierExpression">
      <summary>Represents a quantifier operation of the specified kind over the elements of the specified input set. This class cannot be inherited.  </summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbQuantifierExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbQuantifierExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />. </returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbQuantifierExpression.Input">
      <summary>Gets the <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" /> that specifies the input set.</summary>
      <returns>The <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" /> that specifies the input set.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbQuantifierExpression.Predicate">
      <summary>Gets or sets the Boolean predicate that should be evaluated for each element in the input set.</summary>
      <returns>The Boolean predicate that should be evaluated for each element in the input set.</returns>
      <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
      <exception cref="T:System.ArgumentException">The expression is not associated with the command tree for the <see cref="T:System.Data.Common.CommandTrees.DbQuantifierExpression" />,or its result type is not a Boolean type.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbQueryCommandTree">
      <summary>Represents a query operation expressed as a command tree. This class cannot be inherited.  </summary>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbQueryCommandTree.Query">
      <summary>Gets an <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that defines the logic of the query operation.</summary>
      <returns>An <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that defines the logic of the query operation.</returns>
      <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
      <exception cref="T:System.ArgumentException">The expression is associated with a different command tree.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbRefExpression">
      <summary>Represents a strongly typed reference to a specific instance within an entity set. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbRefExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbRefExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />. </returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbRefExpression.EntitySet">
      <summary>Gets the metadata for the entity set that contains the instance.</summary>
      <returns>The metadata for the entity set that contains the instance.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbRefKeyExpression">
      <summary>Represents the retrieval of the key value (in its structural form) from the underlying reference value. This class cannot be inherited.  </summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbRefKeyExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbRefKeyExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression">
      <summary>Represents the navigation of a relationship. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value. </summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression.NavigateFrom">
      <summary>Gets the metadata for the relationship end to navigate from.</summary>
      <returns>The metadata for the relationship end to navigate from.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression.NavigateTo">
      <summary>Gets the metadata for the relationship end to navigate to.</summary>
      <returns>The metadata for the relationship end to navigate to.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression.NavigationSource">
      <summary>Gets or sets an <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that specifies the starting point of the navigation and must be a reference to an entity instance.</summary>
      <returns>An <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that specifies the instance of the source relationship end from which navigation should occur.</returns>
      <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
      <exception cref="T:System.ArgumentException">The expression is not associated with the command tree of the <see cref="T:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression" />, or its result type is not equal or promotable to the reference type of the <see cref="P:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression.NavigateFrom" /> property.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression.Relationship">
      <summary>Gets the metadata for the relationship over which navigation occurs.</summary>
      <returns>The metadata for the relationship over which navigation occurs.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbScanExpression">
      <summary>Represents a scan over an entity set or relationship set, as indicated by the <see cref="P:System.Data.Common.CommandTrees.DbScanExpression.Target" /> property. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbScanExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbScanExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />. </returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbScanExpression.Target">
      <summary>Gets the metadata for the referenced entity or relationship set.</summary>
      <returns>The metadata for the referenced entity or relationship set.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbSetClause">
      <summary>Specifies the clause in a modification operation that sets the value of a property. This class cannot be inherited. </summary>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbSetClause.Property">
      <summary>Gets an <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that specifies the property that should be updated.</summary>
      <returns>An <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that specifies the property that should be updated.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbSetClause.Value">
      <summary>Gets an <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that specifies the new value with which to update the property.</summary>
      <returns>An <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that specifies the new value with which to update the property. </returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbSkipExpression">
      <summary>Skips a specified number of elements in the input set. <see cref="T:System.Data.Common.CommandTrees.DbSkipExpression" /> can only be used after the input collection has been sorted as specified by the sort keys.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbSkipExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbSkipExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />. </returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbSkipExpression.Count">
      <summary>Gets or sets an expression that specifies the number of elements to skip from the input collection.</summary>
      <returns>An expression that specifies the number of elements to skip from the input collection.</returns>
      <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
      <exception cref="T:System.ArgumentException">The expression is not associated with the command tree of the <see cref="T:System.Data.Common.CommandTrees.DbSkipExpression" />; the expression is not either a <see cref="T:System.Data.Common.CommandTrees.DbConstantExpression" /> or a <see cref="T:System.Data.Common.CommandTrees.DbParameterReferenceExpression" />; or the result type of the expression is not equal or promotable to a 64-bit integer type.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbSkipExpression.Input">
      <summary>Gets the <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" /> that specifies the input set.</summary>
      <returns>The <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" /> that specifies the input set.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbSkipExpression.SortOrder">
      <summary>Gets a <see cref="T:System.Data.Common.CommandTrees.DbSortClause" /> list that defines the sort order.</summary>
      <returns>A <see cref="T:System.Data.Common.CommandTrees.DbSortClause" /> list that defines the sort order.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbSortClause">
      <summary>Specifies a sort key that can be used as part of the sort order in a <see cref="T:System.Data.Common.CommandTrees.DbSortExpression" />. This class cannot be inherited.</summary>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbSortClause.Ascending">
      <summary>Gets a Boolean value indicating whether or not this sort key uses an ascending sort order.</summary>
      <returns>true if this sort key uses an ascending sort order; otherwise, false.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbSortClause.Collation">
      <summary>Gets a string value that specifies the collation for this sort key.</summary>
      <returns>A string value that specifies the collation for this sort key.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbSortClause.Expression">
      <summary>Gets or sets the <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that provides the value for this sort key.</summary>
      <returns>The <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that provides the value for this sort key.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbSortExpression">
      <summary>Represents a sort operation applied to the elements of the specified input set based on the given sort keys. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbSortExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbSortExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />. </returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbSortExpression.Input">
      <summary>Gets the <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" /> that specifies the input set.</summary>
      <returns>The <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" /> that specifies the input set.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbSortExpression.SortOrder">
      <summary>Gets a <see cref="T:System.Data.Common.CommandTrees.DbSortClause" /> list that defines the sort order.</summary>
      <returns>A <see cref="T:System.Data.Common.CommandTrees.DbSortClause" /> list that defines the sort order.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbTreatExpression">
      <summary>Represents a type conversion operation applied to a polymorphic argument. This class cannot be inherited.  </summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbTreatExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbTreatExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />. </returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbUnaryExpression">
      <summary>Implements the basic functionality required by expressions that accept a single expression argument. </summary>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbUnaryExpression.Argument">
      <summary>Gets or sets the <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that defines the argument.</summary>
      <returns>The <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that defines the argument.</returns>
      <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
      <exception cref="T:System.ArgumentException">The expression is not associated with the command tree of a <see cref="T:System.Data.Common.CommandTrees.DbUnaryExpression" />, or its result type is not equal or promotable to the required type for the argument.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbUnionAllExpression">
      <summary>Represents the set union (without duplicate removal) operation between the left and right operands. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbUnionAllExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbUnionAllExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbUpdateCommandTree">
      <summary>Represents a single-row update operation expressed as a command tree. This class cannot be inherited.  </summary>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbUpdateCommandTree.Predicate">
      <summary>Gets an <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that specifies the predicate used to determine which members of the target collection should be updated.</summary>
      <returns>An <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that specifies the predicate used to determine which members of the target collection should be updated.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbUpdateCommandTree.Returning">
      <summary>Gets an <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that specifies a projection of results to be returned, based on the modified rows.</summary>
      <returns>An <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that specifies a projection of results to be returned based, on the modified rows. null indicates that no results should be returned from this command.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbUpdateCommandTree.SetClauses">
      <summary>Gets the list of update set clauses that define the update operation.</summary>
      <returns>The list of update set clauses that define the update operation.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbVariableReferenceExpression">
      <summary>Represents a reference to a variable that is currently in scope. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbVariableReferenceExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbVariableReferenceExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbVariableReferenceExpression.VariableName">
      <summary>Gets the name of the referenced variable.</summary>
      <returns>The name of the referenced variable.</returns>
    </member>
    <member name="T:System.Data.EntityClient.EntityCommand">
      <summary>Represents a command to be executed against an Entity Data Model (EDM). </summary>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Data.EntityClient.EntityCommand" /> is not associated with an <see cref="T:System.Data.EntityClient.EntityConnection" /> property that was changed while a transaction was in progress. -or-The associated <see cref="T:System.Data.EntityClient.EntityConnection" /> does not have store metadata.-or-The associated <see cref="T:System.Data.EntityClient.EntityConnection" /> is in the <see cref="F:System.Data.ConnectionState.Broken" /> state.The <see cref="T:System.Data.Common.DbDataReader" /> associated with this <see cref="T:System.Data.EntityClient.EntityCommand" /> is open.</exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityCommand.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.EntityClient.EntityCommand" /> class.</summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityCommand.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.EntityClient.EntityCommand" /> class with the text of the command.</summary>
      <param name="statement"> The text of the command.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityCommand.#ctor(System.String,System.Data.EntityClient.EntityConnection)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.EntityClient.EntityCommand" /> class with the text of the command and an <see cref="T:System.Data.EntityClient.EntityConnection" />.</summary>
      <param name="statement">The text of the command.</param>
      <param name="connection">An <see cref="T:System.Data.EntityClient.EntityConnection" /> that represents a connection to the data source.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityCommand.#ctor(System.String,System.Data.EntityClient.EntityConnection,System.Data.EntityClient.EntityTransaction)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.EntityClient.EntityCommand" /> class with the text of the command, an <see cref="T:System.Data.EntityClient.EntityConnection" /> and an <see cref="T:System.Data.EntityClient.EntityTransaction" />.</summary>
      <param name="statement">The text of the command.</param>
      <param name="connection">An <see cref="T:System.Data.EntityClient.EntityConnection" /> that represents a connection to the data source.</param>
      <param name="transaction">A <see cref="T:System.Data.EntityClient.EntityTransaction" /> in which the <see cref="P:System.Data.EntityClient.EntityCommand.CommandText" /> executes.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityCommand.Cancel">
      <summary>Tries to cancel the execution of a <see cref="T:System.Data.EntityClient.EntityCommand" /> by calling the Cancel method of the underlying data provider.</summary>
    </member>
    <member name="P:System.Data.EntityClient.EntityCommand.CommandText">
      <summary>Gets or sets an Entity SQL statement that specifies a command or stored procedure to execute.</summary>
      <returns>The Entity SQL statement or stored procedure to execute. The default is an empty string.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityCommand.CommandTimeout">
      <summary>Gets or sets the amount of time to wait before timing out. </summary>
      <returns>The time in seconds to wait for the command to execute. The default is the underlying data provider's default command time out.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityCommand.CommandType">
      <summary>Gets or sets a value that indicates how the <see cref="P:System.Data.EntityClient.EntityCommand.CommandText" /> property is to be interpreted.</summary>
      <returns>One of the <see cref="T:System.Data.CommandType" /> enumeration values. The default is Text.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityCommand.Connection">
      <summary>Gets or sets the <see cref="T:System.Data.EntityClient.EntityConnection" /> used by this <see cref="T:System.Data.EntityClient.EntityCommand" />.</summary>
      <returns>The <see cref="T:System.Data.EntityClient.EntityConnection" />. </returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Data.EntityClient.EntityConnection" /> property was changed while a transaction was in progress. </exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityCommand.CreateParameter">
      <summary>Creates a new instance of a <see cref="T:System.Data.EntityClient.EntityParameter" /> object.</summary>
      <returns>A <see cref="T:System.Data.EntityClient.EntityParameter" /> object.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityCommand.DesignTimeVisible">
      <summary>Gets or sets a value that indicates whether the command object should be visible in a Windows Form Designer control.</summary>
      <returns>A value that indicates whether the command object should be visible in a control. The default is true. </returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityCommand.EnablePlanCaching">
      <summary>Gets or sets Boolean value that enables or disables query plan caching for this <see cref="T:System.Data.EntityClient.EntityCommand" />.</summary>
      <returns>A Boolean value that indicates whether query plan caching is enabled or disabled for this <see cref="T:System.Data.EntityClient.EntityCommand" />.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityCommand.ExecuteNonQuery">
      <summary>Executes the current command.</summary>
      <returns>The number of rows affected.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityCommand.ExecuteReader">
      <summary>Executes the command and returns a <see cref="T:System.Data.EntityClient.EntityDataReader" />.</summary>
      <returns>The <see cref="T:System.Data.EntityClient.EntityDataReader" /> that contains the results.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityCommand.ExecuteReader(System.Data.CommandBehavior)">
      <summary>Compiles the <see cref="P:System.Data.EntityClient.EntityCommand.CommandText" /> into a command tree and passes it to the underlying store provider for execution. Then builds an <see cref="T:System.Data.EntityClient.EntityDataReader" /> out of the produced result set using the specified <see cref="T:System.Data.CommandBehavior" />.</summary>
      <returns>The <see cref="T:System.Data.EntityClient.EntityDataReader" /> that contains the results.</returns>
      <param name="behavior">One of the <see cref="T:System.Data.CommandBehavior" /> values.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityCommand.ExecuteScalar">
      <summary>Executes the command, and returns the first column of the first row in the result set. Additional columns or rows are ignored.</summary>
      <returns>The first column of the first row in the result set, or a null reference (Nothing in Visual Basic) if the result set is empty.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityCommand.Parameters">
      <summary>Gets the <see cref="T:System.Data.EntityClient.EntityParameterCollection" />.</summary>
      <returns>The parameters of the Entity SQL statement or stored procedure. The default is an empty collection.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityCommand.Prepare">
      <summary>Compiles the entity-level command and creates a prepared version of the command by calling the Prepare method of the underlying data provider's Command object.</summary>
      <exception cref="T:System.InvalidOperationException">The associated <see cref="T:System.Data.EntityClient.EntityConnection" /> is closed. </exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityCommand.ToTraceString">
      <summary>Compiles the entity-level command and returns the store command text.</summary>
      <returns>A string that represents the store command text.NoteThis method is intended for diagnostic use only. Do not make your code dependent on the trace string that this method returns, because the format of the string might change in future releases. </returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityCommand.Transaction">
      <summary>Gets or sets the <see cref="T:System.Data.EntityClient.EntityTransaction" /> within which the <see cref="T:System.Data.SqlClient.SqlCommand" /> executes.</summary>
      <returns>The <see cref="T:System.Data.EntityClient.EntityTransaction" />. The default value is null.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityCommand.UpdatedRowSource">
      <summary>Gets or sets how command results are applied to rows.</summary>
      <returns>One of the <see cref="T:System.Data.UpdateRowSource" /> values.</returns>
    </member>
    <member name="T:System.Data.EntityClient.EntityConnection">
      <summary>Contains a reference to a conceptual model and a data source connection. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.EntityClient.EntityConnection" /> class.</summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnection.#ctor(System.Data.Metadata.Edm.MetadataWorkspace,System.Data.Common.DbConnection)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.EntityClient.EntityConnection" /> class with a specified <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> and <see cref="T:System.Data.Common.DbConnection" />.</summary>
      <param name="workspace">A <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> to be associated with this <see cref="T:System.Data.EntityClient.EntityConnection" />.</param>
      <param name="connection">The underlying data source connection for this <see cref="T:System.Data.EntityClient.EntityConnection" /> object.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="workspace" /> or <paramref name="connection" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The conceptual model is missing from the workspace.-or-The mapping file is missing from the workspace.-or-The storage model is missing from the workspace.-or-The <paramref name="connection" /> is not in a closed state.</exception>
      <exception cref="T:System.Data.ProviderIncompatibleException">The <paramref name="connection" /> is not from an ADO.NET Entity Framework-compatible provider.</exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnection.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.EntityClient.EntityConnection" /> class, based on the connection string.</summary>
      <param name="connectionString">The provider-specific connection string.</param>
      <exception cref="T:System.ArgumentException">An invalid connection string keyword has been provided, or a required connection string keyword has not been provided.</exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnection.BeginTransaction">
      <summary>Begins a transaction by using the underlying provider. </summary>
      <returns>A new <see cref="T:System.Data.EntityClient.EntityTransaction" />. The returned <see cref="T:System.Data.EntityClient.EntityTransaction" /> instance can later be associated with the <see cref="T:System.Data.EntityClient.EntityCommand" /> to execute the command under that transaction.</returns>
      <exception cref="T:System.InvalidOperationException">The underlying provider is not known.-or-The call to <see cref="M:System.Data.EntityClient.EntityConnection.BeginTransaction" /> was made on an <see cref="T:System.Data.EntityClient.EntityConnection" /> that already has a current transaction.-or-The state of the <see cref="T:System.Data.EntityClient.EntityConnection" /> is not <see cref="F:System.Data.ConnectionState.Open" />.</exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnection.BeginTransaction(System.Data.IsolationLevel)">
      <summary>Begins a transaction with the specified isolation level by using the underlying provider. </summary>
      <returns>A new <see cref="T:System.Data.EntityClient.EntityTransaction" />. The returned <see cref="T:System.Data.EntityClient.EntityTransaction" /> instance can later be associated with the <see cref="T:System.Data.EntityClient.EntityCommand" /> to execute the command under that transaction.</returns>
      <param name="isolationLevel">The isolation level of the transaction.</param>
      <exception cref="T:System.InvalidOperationException">The underlying provider is not known.-or-The call to <see cref="M:System.Data.EntityClient.EntityConnection.BeginTransaction" /> was made on an <see cref="T:System.Data.EntityClient.EntityConnection" /> that already has a current transaction.-or-The state of the <see cref="T:System.Data.EntityClient.EntityConnection" /> is not <see cref="F:System.Data.ConnectionState.Open" />.</exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnection.ChangeDatabase(System.String)">
      <summary>Not supported.</summary>
      <param name="databaseName">Not supported. </param>
      <exception cref="T:System.NotSupportedException">When the method is called. </exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnection.Close">
      <summary>Closes the connection to the database.</summary>
      <exception cref="T:System.InvalidOperationException">An error occurred when closing the connection.</exception>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnection.ConnectionString">
      <summary>Gets or sets the <see cref="T:System.Data.EntityClient.EntityConnection" /> connection string.</summary>
      <returns>The connection string required to establish the initial connection to a data source. The default value is an empty string. On a closed connection, the currently set value is returned. If no value has been set, an empty string is returned.</returns>
      <exception cref="T:System.InvalidOperationException">An attempt was made to set the <see cref="P:System.Data.EntityClient.EntityConnection.ConnectionString" /> property after the <see cref="EntityConnection" />’s <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> was initialized. The <see cref="MetadataWorkspace" /> is initialized either when the <see cref="EntityConnection" /> instance is constructed through the overload that takes a <see cref="MetadataWorkspace" /> as a parameter, or when the <see cref="T:System.Data.EntityClient.EntityConnection" /> instance has been opened.</exception>
      <exception cref="T:System.ArgumentException">An invalid connection string keyword has been provided or a required connection string keyword has not been provided.</exception>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnection.ConnectionTimeout">
      <summary>Gets the number of seconds to wait when attempting to establish a connection before ending the attempt and generating an error.</summary>
      <returns>The time (in seconds) to wait for a connection to open. The default value is the underlying data provider's default time-out. </returns>
      <exception cref="T:System.ArgumentException">The value set is less than 0. </exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnection.CreateCommand">
      <summary>Creates a new instance of an <see cref="T:System.Data.EntityClient.EntityCommand" />, with the <see cref="P:System.Data.EntityClient.EntityCommand.Connection" /> set to this <see cref="T:System.Data.EntityClient.EntityConnection" />.</summary>
      <returns>An <see cref="T:System.Data.EntityClient.EntityCommand" /> object.</returns>
      <exception cref="T:System.InvalidOperationException">The name of the underlying data provider is not known.</exception>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnection.Database">
      <summary>Gets the name of the current database, or the database that will be used after a connection is opened.</summary>
      <returns>The value of the Database property of the underlying data provider.</returns>
      <exception cref="T:System.InvalidOperationException">The underlying data provider is not known. </exception>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnection.DataSource">
      <summary>Gets the name or network address of the data source to connect to.</summary>
      <returns>The name of the data source. The default value is an empty string.</returns>
      <exception cref="T:System.InvalidOperationException">The underlying data provider is not known. </exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnection.EnlistTransaction(System.Transactions.Transaction)">
      <summary>Enlists this <see cref="T:System.Data.EntityClient.EntityConnection" /> in the specified transaction.</summary>
      <param name="transaction">The transaction object to enlist into.</param>
      <exception cref="T:System.InvalidOperationException">The state of the <see cref="T:System.Data.EntityClient.EntityConnection" /> is not <see cref="F:System.Data.ConnectionState.Open" />.</exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace">
      <summary>Returns the <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> associated with this <see cref="T:System.Data.EntityClient.EntityConnection" />.</summary>
      <returns>The <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> associated with this <see cref="T:System.Data.EntityClient.EntityConnection" />.</returns>
      <exception cref="T:System.Data.MetadataException">The inline connection string contains an invalid Metadata keyword value.</exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnection.Open">
      <summary>Establishes a connection to the data source by calling the underlying data provider's Open method.</summary>
      <exception cref="T:System.InvalidOperationException">An error occurs when you open the connection, or the name of the underlying data provider is not known.</exception>
      <exception cref="T:System.Data.MetadataException">The inline connection string contains an invalid Metadata keyword value.</exception>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnection.ServerVersion">
      <summary>Gets a string that contains the version of the data source to which the client is connected.</summary>
      <returns>The version of the data source that is contained in the provider connection string.</returns>
      <exception cref="T:System.InvalidOperationException">The connection is closed. </exception>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnection.State">
      <summary>Gets the <see cref="T:System.Data.ConnectionState" /> property of the underlying provider if the <see cref="T:System.Data.EntityClient.EntityConnection" /> is open. Otherwise, returns <see cref="F:System.Data.ConnectionState.Closed" />.</summary>
      <returns>
        <see cref="F:System.Data.ConnectionState.Open" />, if and only if both the <see cref="T:System.Data.EntityClient.EntityConnection" />’s internal state and the underlying provider's <see cref="T:System.Data.ConnectionState" /> are open. If the <see cref="T:System.Data.EntityClient.EntityConnection" />’s state is open but the provider's <see cref="T:System.Data.ConnectionState" /> is closed, this property returns <see cref="F:System.Data.ConnectionState.Broken" />. Otherwise, it returns <see cref="F:System.Data.ConnectionState.Closed" />.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnection.StoreConnection">
      <summary>Provides access to the underlying data source connection that is used by the <see cref="T:System.Data.EntityClient.EntityConnection" /> object.</summary>
      <returns>The <see cref="T:System.Data.Common.DbConnection" /> for the data source connection.</returns>
    </member>
    <member name="T:System.Data.EntityClient.EntityConnectionStringBuilder">
      <summary>Provides a simple way to create and manage the contents of connection strings used by the EntityClient. </summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnectionStringBuilder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" /> class.</summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnectionStringBuilder.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" /> class using the supplied connection string. </summary>
      <param name="connectionString">A provider-specific connection string to the underlying data source.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnectionStringBuilder.Clear">
      <summary>Clears the contents of the <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" /> instance.</summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnectionStringBuilder.ContainsKey(System.String)">
      <summary>Determines whether the <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" /> contains a specific key.</summary>
      <returns>Returns true if the <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" /> contains an element that has the specified key; otherwise, false.</returns>
      <param name="keyword">The key to locate in the <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" />.</param>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnectionStringBuilder.IsFixedSize">
      <summary>Gets a value that indicates whether the <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" /> has a fixed size.</summary>
      <returns>Returns true in every case, because the <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" /> supplies a fixed-size collection of keyword/value pairs.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnectionStringBuilder.Item(System.String)">
      <summary>Gets or sets the value associated with the specified key. In C#, this property is the indexer.</summary>
      <returns>The value associated with the specified key. </returns>
      <param name="keyword">The key of the item to get or set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">Tried to add a key that does not exist in the available keys.</exception>
      <exception cref="T:System.FormatException">Invalid value in the connection string (specifically, a Boolean or numeric value was expected but not supplied).</exception>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnectionStringBuilder.Keys">
      <summary>Gets an <see cref="T:System.Collections.ICollection" /> that contains the keys in the <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" />.</summary>
      <returns>An <see cref="T:System.Collections.ICollection" /> that contains the keys in the <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" />.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnectionStringBuilder.Metadata">
      <summary>Gets or sets the metadata locations in the connection string.</summary>
      <returns>Gets or sets the metadata locations in the connection string.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnectionStringBuilder.Name">
      <summary>Gets or sets the name of a section as defined in a configuration file.</summary>
      <returns>The name of a section in a configuration file.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnectionStringBuilder.Provider">
      <summary>Gets or sets the name of the underlying .NET Framework data provider in the connection string.</summary>
      <returns>The invariant name of the underlying .NET Framework data provider.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnectionStringBuilder.ProviderConnectionString">
      <summary>Gets or sets the inner, provider-specific connection string.</summary>
      <returns>The inner, provider-specific connection string.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnectionStringBuilder.Remove(System.String)">
      <summary>Removes the entry with the specified key from the <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" /> instance. </summary>
      <returns>Returns true if the key existed in the connection string and was removed; false if the key did not exist.</returns>
      <param name="keyword">The key of the keyword/value pair to be removed from the connection string in this <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> is null (Nothing in Visual Basic)</exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnectionStringBuilder.TryGetValue(System.String,System.Object@)">
      <summary>Retrieves a value corresponding to the supplied key from this <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" />.</summary>
      <returns>Returns true if <paramref name="keyword" /> was found in the connection string; otherwise, false.</returns>
      <param name="keyword">The key of the item to retrieve.</param>
      <param name="value">The value corresponding to <paramref name="keyword." /></param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> contains a null value (Nothing in Visual Basic).</exception>
    </member>
    <member name="T:System.Data.EntityClient.EntityDataReader">
      <summary>Reads a forward-only stream of rows from a data source. </summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.Close">
      <summary>Closes the <see cref="T:System.Data.EntityClient.EntityDataReader" /> object.</summary>
    </member>
    <member name="P:System.Data.EntityClient.EntityDataReader.DataRecordInfo">
      <summary>Gets <see cref="T:System.Data.Common.DataRecordInfo" /> for this <see cref="T:System.Data.IExtendedDataRecord" />.</summary>
      <returns>A <see cref="T:System.Data.Common.DataRecordInfo" /> object.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityDataReader.Depth">
      <summary>Gets a value indicating the depth of nesting for the current row. </summary>
      <returns>The depth of nesting for the current row. </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.Dispose(System.Boolean)">
      <summary>Releases the resources consumed by this <see cref="T:System.Data.EntityClient.EntityDataReader" /> and calls <see cref="M:System.Data.EntityClient.EntityDataReader.Close" />.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:System.Data.EntityClient.EntityDataReader.FieldCount">
      <summary>Gets the number of columns in the current row. </summary>
      <returns>The number of columns in the current row.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetBoolean(System.Int32)">
      <summary>Gets the value of the specified column as a Boolean.</summary>
      <returns>The value of the specified column.</returns>
      <param name="ordinal">The zero-based column ordinal.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetByte(System.Int32)">
      <summary>Gets the value of the specified column as a byte.</summary>
      <returns>The value of the specified column.</returns>
      <param name="ordinal">The zero-based column ordinal.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>Reads a stream of bytes from the specified column, starting at location indicated by <paramref name="dataIndex" />, into the buffer, starting at the location indicated by <paramref name="bufferIndex" />.</summary>
      <returns>The actual number of bytes read.</returns>
      <param name="ordinal">The zero-based column ordinal.</param>
      <param name="dataOffset">The index within the row from which to begin the read operation.</param>
      <param name="buffer">The buffer into which to copy the data.</param>
      <param name="bufferOffset">The index with the buffer to which the data will be copied.</param>
      <param name="length">The maximum number of characters to read.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetChar(System.Int32)">
      <summary>Gets the value of the specified column as a single character.</summary>
      <returns>The value of the specified column.</returns>
      <param name="ordinal">The zero-based column ordinal.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>Reads a stream of characters from the specified column, starting at location indicated by <paramref name="dataIndex" />, into the buffer, starting at the location indicated by <paramref name="bufferIndex" />.</summary>
      <returns>The actual number of characters read.</returns>
      <param name="ordinal">The zero-based column ordinal.</param>
      <param name="dataOffset">The index within the row from which to begin the read operation.</param>
      <param name="buffer">The buffer into which to copy the data.</param>
      <param name="bufferOffset">The index with the buffer to which the data will be copied.</param>
      <param name="length">The maximum number of characters to read.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetDataReader(System.Int32)">
      <summary>Returns nested readers as <see cref="T:System.Data.Common.DbDataReader" /> objects.</summary>
      <returns>Nested readers as <see cref="T:System.Data.Common.DbDataReader" /> objects.</returns>
      <param name="i">The ordinal of the column.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetDataRecord(System.Int32)">
      <summary>Returns a nested <see cref="T:System.Data.Common.DbDataRecord" />.</summary>
      <returns>A <see cref="T:System.Data.Common.DbDataRecord" />.</returns>
      <param name="i">The number of the DbDataRecord to return.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetDataTypeName(System.Int32)">
      <summary>Gets name of the data type of the specified column.</summary>
      <returns>A string representing the name of the data type.</returns>
      <param name="ordinal">The zero-based column ordinal.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetDateTime(System.Int32)">
      <summary>Gets the value of the specified column as a <see cref="T:System.DateTime" /> object.</summary>
      <returns>The zero-based column ordinal.</returns>
      <param name="ordinal">The zero-based column ordinal.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetDbDataReader(System.Int32)">
      <summary>Returns a <see cref="T:System.Data.Common.DbDataReader" /> object for the requested column ordinal that can be overridden with a provider-specific implementation.</summary>
      <returns>A <see cref="T:System.Data.Common.DbDataReader" /> object.</returns>
      <param name="ordinal">The zero-based column ordinal.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetDecimal(System.Int32)">
      <summary>Gets the value of the specified column as a <see cref="T:System.Decimal" /> object.</summary>
      <returns>The value of the specified column.</returns>
      <param name="ordinal">The zero-based column ordinal.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetDouble(System.Int32)">
      <summary>Gets the value of the specified column as a double-precision floating point number.</summary>
      <returns>The value of the specified column.</returns>
      <param name="ordinal">The zero-based column ordinal.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetEnumerator">
      <summary>Returns an <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the rows in the data reader.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the rows in the data reader.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetFieldType(System.Int32)">
      <summary>Gets the data type of the specified column.</summary>
      <returns>The data type of the specified column.</returns>
      <param name="ordinal">The zero-based column ordinal.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetFloat(System.Int32)">
      <summary>Gets the value of the specified column as a single-precision floating point number.</summary>
      <returns>The value of the specified column.</returns>
      <param name="ordinal">The zero-based column ordinal.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetGuid(System.Int32)">
      <summary>Gets the value of the specified column as a globally-unique identifier (GUID).</summary>
      <returns>The value of the specified column.</returns>
      <param name="ordinal">The zero-based column ordinal.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetInt16(System.Int32)">
      <summary>Gets the value of the specified column as a 16-bit signed integer.</summary>
      <returns>The value of the specified column.</returns>
      <param name="ordinal">The zero-based column ordinal.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetInt32(System.Int32)">
      <summary>Gets the value of the specified column as a 32-bit signed integer.</summary>
      <returns>The value of the specified column.</returns>
      <param name="ordinal">The zero-based column ordinal.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetInt64(System.Int32)">
      <summary>Gets the value of the specified column as a 64-bit signed integer.</summary>
      <returns>The value of the specified column.</returns>
      <param name="ordinal">The zero-based column ordinal.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetName(System.Int32)">
      <summary>Gets the name of the column, given the zero-based column ordinal.</summary>
      <returns>The name of the specified column.</returns>
      <param name="ordinal">The zero-based column ordinal.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetOrdinal(System.String)">
      <summary>Gets the column ordinal given the name of the column.</summary>
      <returns>The zero-based column ordinal.</returns>
      <param name="name">The name of the column.</param>
      <exception cref="T:System.IndexOutOfRangeException">The name specified is not a valid column name.</exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetProviderSpecificFieldType(System.Int32)">
      <summary>Returns the provider-specific field type of the specified column.</summary>
      <returns>The <see cref="T:System.Type" /> object that describes the data type of the specified column.</returns>
      <param name="ordinal">The zero-based column ordinal.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetProviderSpecificValue(System.Int32)">
      <summary>Gets the value of the specified column as an instance of <see cref="T:System.Object" />.</summary>
      <returns>The value of the specified column.</returns>
      <param name="ordinal">The zero-based column ordinal.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetProviderSpecificValues(System.Object[])">
      <summary>Gets all provider-specific attribute columns in the collection for the current row.</summary>
      <returns>The number of instances of <see cref="T:System.Object" /> in the array.</returns>
      <param name="values">An array of <see cref="T:System.Object" /> into which to copy the attribute columns.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetSchemaTable">
      <summary>Returns a <see cref="T:System.Data.DataTable" /> that describes the column metadata of the <see cref="T:System.Data.Common.DbDataReader" />.</summary>
      <returns>A <see cref="T:System.Data.DataTable" /> that describes the column metadata.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetString(System.Int32)">
      <summary>Gets the value of the specified column as an instance of <see cref="T:System.String" />.</summary>
      <returns>The value of the specified column.</returns>
      <param name="ordinal">The zero-based column ordinal.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetValue(System.Int32)">
      <summary>Gets the value of the specified column as an instance of <see cref="T:System.Object" />.</summary>
      <returns>The value of the specified column.</returns>
      <param name="ordinal">The zero-based column ordinal.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetValues(System.Object[])">
      <summary>Populates an array of objects with the column values of the current row.</summary>
      <returns>The number of instances of <see cref="T:System.Object" /> in the array.</returns>
      <param name="values">An array of <see cref="T:System.Object" /> into which to copy the attribute columns.</param>
    </member>
    <member name="P:System.Data.EntityClient.EntityDataReader.HasRows">
      <summary>Gets a value that indicates whether this <see cref="T:System.Data.EntityClient.EntityDataReader" /> contains one or more rows. </summary>
      <returns>true if the <see cref="T:System.Data.EntityClient.EntityDataReader" /> contains one or more rows; otherwise false. </returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityDataReader.IsClosed">
      <summary>Gets a value indicating whether the <see cref="T:System.Data.EntityClient.EntityDataReader" /> is closed.</summary>
      <returns>true if the <see cref="T:System.Data.EntityClient.EntityDataReader" /> is closed; otherwise false. </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.IsDBNull(System.Int32)">
      <summary>Gets a value that indicates whether the column contains nonexistent or missing values.</summary>
      <returns>true if the specified column is equivalent to <see cref="T:System.DBNull" />; otherwise false.</returns>
      <param name="ordinal">The zero-based column ordinal.</param>
    </member>
    <member name="P:System.Data.EntityClient.EntityDataReader.Item(System.Int32)">
      <summary>Gets the value of the specified column as an instance of <see cref="T:System.Object" />.</summary>
      <returns>The value of the specified column.</returns>
      <param name="ordinal">The zero-based column ordinal</param>
    </member>
    <member name="P:System.Data.EntityClient.EntityDataReader.Item(System.String)">
      <summary>Gets the value of the specified column as an instance of <see cref="T:System.Object" />.</summary>
      <returns>The value of the specified column.</returns>
      <param name="name">The name of the column.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.NextResult">
      <summary>Advances the reader to the next result when reading the results of a batch of statements.</summary>
      <returns>true if there are more result sets; otherwise false.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.Read">
      <summary>Advances the reader to the next record in a result set.</summary>
      <returns>true if there are more rows; otherwise false.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityDataReader.RecordsAffected">
      <summary>Gets the number of rows changed, inserted, or deleted by execution of the SQL statement. </summary>
      <returns>The number of rows changed, inserted, or deleted. Returns -1 for SELECT statements; 0 if no rows were affected or the statement failed.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityDataReader.VisibleFieldCount">
      <summary>Gets the number of fields in the <see cref="T:System.Data.EntityClient.EntityDataReader" /> that are not hidden.</summary>
      <returns>The number of fields that are not hidden.</returns>
    </member>
    <member name="T:System.Data.EntityClient.EntityParameter">
      <summary>Represents a parameter to an <see cref="T:System.Data.EntityClient.EntityCommand" />. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.EntityClient.EntityParameter" /> class.</summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameter.#ctor(System.String,System.Data.DbType)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.EntityClient.EntityParameter" /> class that uses the parameter name and the data type.</summary>
      <param name="parameterName">The name of the parameter to map. </param>
      <param name="dbType">One of the <see cref="T:System.Data.DbType" /> values. </param>
      <exception cref="T:System.ArgumentException">The value supplied in the <paramref name="dbType" /> parameter is an invalid back-end data type. </exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameter.#ctor(System.String,System.Data.DbType,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.EntityClient.EntityParameter" /> class that uses the parameter name, the data type, and the size.</summary>
      <param name="parameterName">The name of the parameter to map. </param>
      <param name="dbType">One of the <see cref="T:System.Data.DbType" /> values. </param>
      <param name="size">The length of the parameter. </param>
      <exception cref="T:System.ArgumentException">The value supplied in the <paramref name="dbType" /> parameter is an invalid back-end data type. </exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameter.#ctor(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.EntityClient.EntityParameter" /> class that uses the parameter name, the type, the size, the direction, the precision, the scale, the source column, a <see cref="T:System.Data.DataRowVersion" /> to use, and the value of the parameter.</summary>
      <param name="parameterName">The name of the parameter to map. </param>
      <param name="dbType">One of the <see cref="T:System.Data.DbType" /> values. </param>
      <param name="size">The length of the parameter. </param>
      <param name="direction">One of the <see cref="T:System.Data.ParameterDirection" /> values. </param>
      <param name="isNullable">true if the value of the field can be null; otherwise false. </param>
      <param name="precision">The total number of digits to the left and right of the decimal point to which <see cref="P:System.Data.EntityClient.EntityParameter.Value" /> is resolved. </param>
      <param name="scale">The total number of decimal places to which <see cref="P:System.Data.EntityClient.EntityParameter.Value" /> is resolved. </param>
      <param name="sourceColumn">The name of the source column. </param>
      <param name="sourceVersion">One of the <see cref="T:System.Data.DataRowVersion" /> values. </param>
      <param name="value">An <see cref="T:System.Object" /> that is the value of the <see cref="T:System.Data.EntityClient.EntityParameter" />. </param>
      <exception cref="T:System.ArgumentException">The value supplied in the <paramref name="dbType" /> parameter is an invalid back-end data type. </exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameter.#ctor(System.String,System.Data.DbType,System.Int32,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.EntityClient.EntityParameter" /> class that uses the parameter name, the data type, the size, and the source column name.</summary>
      <param name="parameterName">The name of the parameter to map. </param>
      <param name="dbType">One of the <see cref="T:System.Data.DbType" /> values. </param>
      <param name="size">The length of the parameter. </param>
      <param name="sourceColumn">The name of the source column. </param>
      <exception cref="T:System.ArgumentException">The value supplied in the <paramref name="dbType" /> parameter is an invalid back-end data type. </exception>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameter.DbType">
      <summary>Gets or sets the <see cref="T:System.Data.DbType" /> of the parameter.</summary>
      <returns>One of the <see cref="T:System.Data.DbType" /> values. The default is String.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameter.Direction">
      <summary>Gets or sets a value that indicates whether the parameter is input-only, output-only, bidirectional, or a stored procedure return value parameter.</summary>
      <returns>One of the <see cref="T:System.Data.ParameterDirection" /> enumeration values. The default is Input.</returns>
      <exception cref="T:System.ArgumentException">The property was not set to one of the valid <see cref="T:System.Data.ParameterDirection" /> values.</exception>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameter.IsNullable">
      <summary>Gets or sets a value that indicates whether the parameter accepts null values.</summary>
      <returns>true if null values are accepted; otherwise false. The default is false.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameter.ParameterName">
      <summary>Gets or sets the name of the <see cref="T:System.Data.EntityClient.EntityParameter" />.</summary>
      <returns>The name of the <see cref="T:System.Data.EntityClient.EntityParameter" />. The default is an empty string.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameter.Precision">
      <summary>Gets or sets the maximum number of digits used to represent the <see cref="P:System.Data.EntityClient.EntityParameter.Value" /> property.</summary>
      <returns>The maximum number of digits used to represent the <see cref="P:System.Data.EntityClient.EntityParameter.Value" /> property. The default value is 0. This indicates that the data provider sets the precision for <see cref="P:System.Data.EntityClient.EntityParameter.Value" />.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameter.ResetDbType">
      <summary>Resets the type associated with this <see cref="T:System.Data.EntityClient.EntityParameter" />.</summary>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameter.Scale">
      <summary>Gets or sets the number of decimal places to which <see cref="P:System.Data.EntityClient.EntityParameter.Value" /> is resolved.</summary>
      <returns>The number of decimal places to which <see cref="P:System.Data.EntityClient.EntityParameter.Value" /> is resolved. The default is 0.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameter.Size">
      <summary>Gets or sets the maximum size, in bytes, of the data in the column.</summary>
      <returns>The maximum size, in bytes, of the data in the column. The default value is inferred from the parameter value.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameter.SourceColumn">
      <summary>Gets or sets the name of the source column in a cached row that the <see cref="T:System.Data.EntityClient.EntityParameter" /> is mapped to.</summary>
      <returns>The name of the source column in the cached row. The default is an empty string.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameter.SourceColumnNullMapping">
      <summary>Gets or sets a value which indicates whether the source column is nullable. </summary>
      <returns>true if the source column is nullable; false if it is not. The default is false.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameter.SourceVersion">
      <summary>Gets or sets the <see cref="T:System.Data.DataRowVersion" /> to use when you load <see cref="P:System.Data.EntityClient.EntityParameter.Value" /></summary>
      <returns>One of the <see cref="T:System.Data.DataRowVersion" /> values. The default is Current.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameter.ToString">
      <summary>Gets a string that contains the <see cref="P:System.Data.EntityClient.EntityParameter.ParameterName" />.</summary>
      <returns>A string that contains the <see cref="P:System.Data.EntityClient.EntityParameter.ParameterName" />.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameter.Value">
      <summary>Gets or sets the value of the parameter.</summary>
      <returns>An <see cref="T:System.Object" /> that is the value of the parameter. The default value is null.</returns>
    </member>
    <member name="T:System.Data.EntityClient.EntityParameterCollection">
      <summary>Represents a collection of parameters associated with a <see cref="T:System.Data.EntityClient.EntityCommand" />.</summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.Add(System.Data.EntityClient.EntityParameter)">
      <summary>Adds the specified <see cref="T:System.Data.EntityClient.EntityParameter" /> object to the <see cref="T:System.Data.EntityClient.EntityParameterCollection" />.</summary>
      <returns>A new <see cref="T:System.Data.EntityClient.EntityParameter" /> object.</returns>
      <param name="value">The <see cref="T:System.Data.EntityClient.EntityParameter" /> to add to the collection.</param>
      <exception cref="T:System.ArgumentException">The <see cref="T:System.Data.EntityClient.EntityParameter" /> specified in the <paramref name="value" /> parameter is already added to this or another <see cref="T:System.Data.EntityClient.EntityParameterCollection" />. </exception>
      <exception cref="T:System.InvalidCastException">The parameter passed was not a <see cref="T:System.Data.EntityClient.EntityParameter" />. </exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> parameter is null. </exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.Add(System.Object)">
      <summary>Adds the specified object to the <see cref="T:System.Data.EntityClient.EntityParameterCollection" />.</summary>
      <returns>The index of the new <see cref="T:System.Data.EntityClient.EntityParameter" /> object.</returns>
      <param name="value">An <see cref="T:System.Object" />.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.Add(System.String,System.Data.DbType)">
      <summary>Adds a <see cref="T:System.Data.EntityClient.EntityParameter" /> to the <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> given the parameter name and the data type.</summary>
      <returns>A new <see cref="T:System.Data.EntityClient.EntityParameter" /> object.</returns>
      <param name="parameterName">The name of the parameter. </param>
      <param name="dbType">One of the <see cref="T:System.Data.DbType" /> values. </param>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.Add(System.String,System.Data.DbType,System.Int32)">
      <summary>Adds a <see cref="T:System.Data.EntityClient.EntityParameter" /> to the <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> with the parameter name, the data type, and the column length.</summary>
      <returns>A new <see cref="T:System.Data.EntityClient.EntityParameter" /> object.</returns>
      <param name="parameterName">The name of the parameter.</param>
      <param name="dbType">One of the <see cref="T:System.Data.DbType" /> values.</param>
      <param name="size">The column length.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.AddRange(System.Array)">
      <summary>Adds an array of values to the end of the <see cref="T:System.Data.EntityClient.EntityParameterCollection" />.</summary>
      <param name="values">The <see cref="T:System.Array" /> values to add.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.AddRange(System.Data.EntityClient.EntityParameter[])">
      <summary>Adds an array of <see cref="T:System.Data.EntityClient.EntityParameter" /> values to the end of the <see cref="T:System.Data.EntityClient.EntityParameterCollection" />.</summary>
      <param name="values">The <see cref="T:System.Data.EntityClient.EntityParameter" /> values to add.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.AddWithValue(System.String,System.Object)">
      <summary>Adds a value to the end of the <see cref="T:System.Data.EntityClient.EntityParameterCollection" />.</summary>
      <returns>A <see cref="T:System.Data.EntityClient.EntityParameter" /> object.</returns>
      <param name="parameterName">The name of the parameter.</param>
      <param name="value">The value to be added.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.Clear">
      <summary>Removes all the <see cref="T:System.Data.EntityClient.EntityParameter" /> objects from the <see cref="T:System.Data.EntityClient.EntityParameterCollection" />.</summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.Contains(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is in this <see cref="T:System.Data.EntityClient.EntityParameterCollection" />.</summary>
      <returns>true if the <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> contains the value; otherwise false.</returns>
      <param name="value">The <see cref="T:System.Object" /> value.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.Contains(System.String)">
      <summary>Determines whether the specified <see cref="T:System.Data.EntityClient.EntityParameter" /> is in this <see cref="T:System.Data.EntityClient.EntityParameterCollection" />.</summary>
      <returns>true if the <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> contains the value; otherwise false.</returns>
      <param name="parameterName">The <see cref="T:System.Data.EntityClient.EntityParameter" /> value.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.CopyTo(System.Array,System.Int32)">
      <summary>Copies all the elements of the current <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> to the specified one-dimensional <see cref="T:System.Array" /> starting at the specified destination <see cref="T:System.Array" /> index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from the current <see cref="T:System.Data.EntityClient.EntityParameterCollection" />.</param>
      <param name="index">A 32-bit integer that represents the index in the <see cref="T:System.Array" /> at which copying starts.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.CopyTo(System.Data.EntityClient.EntityParameter[],System.Int32)">
      <summary>Copies all the elements of the current <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> to the specified <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> starting at the specified destination index.</summary>
      <param name="array">The <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> that is the destination of the elements copied from the current <see cref="T:System.Data.EntityClient.EntityParameterCollection" />.</param>
      <param name="index">A 32-bit integer that represents the index in the <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> at which copying starts.</param>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameterCollection.Count">
      <summary>Gets an Integer that contains the number of elements in the <see cref="T:System.Data.EntityClient.EntityParameterCollection" />. </summary>
      <returns>The number of elements in the <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> as an Integer.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.GetEnumerator">
      <summary>Returns an enumerator that iterates through the <see cref="T:System.Data.EntityClient.EntityParameterCollection" />. </summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:System.Data.EntityClient.EntityParameterCollection" />. </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.IndexOf(System.Data.EntityClient.EntityParameter)">
      <summary>Gets the location of the specified <see cref="T:System.Data.EntityClient.EntityParameter" /> in the collection.</summary>
      <returns>The zero-based location of the specified <see cref="T:System.Data.EntityClient.EntityParameter" /> that is a <see cref="T:System.Data.EntityClient.EntityParameter" /> in the collection. Returns -1 when the object does not exist in the <see cref="T:System.Data.EntityClient.EntityParameterCollection" />.</returns>
      <param name="value">The <see cref="T:System.Data.EntityClient.EntityParameter" /> to find. </param>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.IndexOf(System.Object)">
      <summary>Gets the location of the specified <see cref="T:System.Object" /> in the collection.</summary>
      <returns>The zero-based location of the specified <see cref="T:System.Object" /> that is a <see cref="T:System.Data.EntityClient.EntityParameter" /> in the collection. Returns -1 when the object does not exist in the <see cref="T:System.Data.EntityClient.EntityParameterCollection" />.</returns>
      <param name="value">The <see cref="T:System.Object" /> to find. </param>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.IndexOf(System.String)">
      <summary>Gets the location of the specified <see cref="T:System.Data.EntityClient.EntityParameter" /> with the specified name.</summary>
      <returns>The zero-based location of the specified <see cref="T:System.Data.EntityClient.EntityParameter" /> with the specified case-sensitive name. Returns -1 when the object does not exist in the <see cref="T:System.Data.EntityClient.EntityParameterCollection" />.</returns>
      <param name="parameterName">The case-sensitive name of the <see cref="T:System.Data.EntityClient.EntityParameter" /> to find.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.Insert(System.Int32,System.Data.EntityClient.EntityParameter)">
      <summary>Inserts a <see cref="T:System.Data.EntityClient.EntityParameter" /> object into the <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> at the specified index.</summary>
      <param name="index">The zero-based index at which value should be inserted.</param>
      <param name="value">A <see cref="T:System.Data.EntityClient.EntityParameter" /> object to be inserted in the <see cref="T:System.Data.EntityClient.EntityParameterCollection" />.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.Insert(System.Int32,System.Object)">
      <summary>Inserts an <see cref="T:System.Object" /> into the <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> at the specified index.</summary>
      <param name="index">The zero-based index at which value should be inserted.</param>
      <param name="value">An <see cref="T:System.Object" /> to be inserted in the <see cref="T:System.Data.EntityClient.EntityParameterCollection" />.</param>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameterCollection.IsFixedSize">
      <summary>Gets a value that indicates whether the <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> has a fixed size. </summary>
      <returns>Returns true if the <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> has a fixed size; otherwise false. </returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameterCollection.IsReadOnly">
      <summary>Gets a value that indicates whether the <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> is read-only. </summary>
      <returns>Returns true if the <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> is read only; otherwise false.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameterCollection.IsSynchronized">
      <summary>Gets a value that indicates whether the <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> is synchronized.</summary>
      <returns>Returns true if the <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> is synchronized; otherwise false.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameterCollection.Item(System.Int32)">
      <summary>Gets the <see cref="T:System.Data.EntityClient.EntityParameter" /> at the specified index.</summary>
      <returns>The <see cref="T:System.Data.EntityClient.EntityParameter" /> at the specified index.</returns>
      <param name="index">The zero-based index of the parameter to retrieve. </param>
      <exception cref="T:System.IndexOutOfRangeException">The specified index does not exist. </exception>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameterCollection.Item(System.String)">
      <summary>Gets the <see cref="T:System.Data.EntityClient.EntityParameter" /> with the specified name.</summary>
      <returns>The <see cref="T:System.Data.EntityClient.EntityParameter" /> with the specified name.</returns>
      <param name="parameterName">The name of the parameter to retrieve. </param>
      <exception cref="T:System.IndexOutOfRangeException">The specified name does not exist. </exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.Remove(System.Data.EntityClient.EntityParameter)">
      <summary>Removes the specified <see cref="T:System.Data.EntityClient.EntityParameter" /> from the collection.</summary>
      <param name="value">A <see cref="T:System.Data.EntityClient.EntityParameter" /> object to remove from the collection. </param>
      <exception cref="T:System.InvalidCastException">The parameter is not a <see cref="T:System.Data.EntityClient.EntityParameter" />. </exception>
      <exception cref="T:System.SystemException">The parameter does not exist in the collection. </exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.Remove(System.Object)">
      <summary>Removes the specified parameter from the collection.</summary>
      <param name="value">A <see cref="T:System.Object" /> object to remove from the collection. </param>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.RemoveAt(System.Int32)">
      <summary>Removes the <see cref="T:System.Data.EntityClient.EntityParameter" /> from the <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> at the specified index.</summary>
      <param name="index">The zero-based index of the <see cref="T:System.Data.EntityClient.EntityParameter" /> object to remove.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.RemoveAt(System.String)">
      <summary>Removes the <see cref="T:System.Data.EntityClient.EntityParameter" /> from the <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> at the specified parameter name.</summary>
      <param name="parameterName">The name of the <see cref="T:System.Data.EntityClient.EntityParameter" /> to remove. </param>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameterCollection.SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Data.EntityClient.EntityParameterCollection" />. </summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Data.EntityClient.EntityParameterCollection" />.</returns>
    </member>
    <member name="T:System.Data.EntityClient.EntityProviderFactory">
      <summary>Represents a set of methods for creating instances of a provider's implementation of the data source classes. </summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityProviderFactory.CreateCommand">
      <summary>Returns a new instance of the provider's class that implements the <see cref="T:System.Data.EntityClient.EntityCommand" /> class. </summary>
      <returns>A new instance of <see cref="T:System.Data.EntityClient.EntityCommand" />. </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityProviderFactory.CreateCommandBuilder">
      <summary>Throws a <see cref="T:System.NotSupportedException" />. This method is currently not supported.</summary>
      <returns>This method is currently not supported.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityProviderFactory.CreateConnection">
      <summary>Returns a new instance of the provider's class that implements the <see cref="T:System.Data.EntityClient.EntityConnection" /> class.</summary>
      <returns>A new instance of <see cref="T:System.Data.EntityClient.EntityConnection" />. </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityProviderFactory.CreateConnectionStringBuilder">
      <summary>Returns a new instance of the provider's class that implements the <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" /> class.</summary>
      <returns>A new instance of <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" />. </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityProviderFactory.CreateDataAdapter">
      <summary>
        <see cref="M:System.Data.EntityClient.EntityProviderFactory.CreateDataAdapter" /> is not supported in this version of the .NET Framework.</summary>
      <returns>A <see cref="T:System.NotSupportedException" /> object.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityProviderFactory.CreateParameter">
      <summary>Returns a new instance of the provider's class that implements the <see cref="T:System.Data.EntityClient.EntityParameter" /> class.</summary>
      <returns>A new instance of <see cref="T:System.Data.EntityClient.EntityParameter" />. </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityProviderFactory.CreatePermission(System.Security.Permissions.PermissionState)">
      <summary>Returns a new instance of the provider's class that implements the provider's version of the <see cref="T:System.Security.CodeAccessPermission" /> class. </summary>
      <returns>A <see cref="T:System.Security.CodeAccessPermission" /> object for the specified <see cref="T:System.Security.Permissions.PermissionState" />. </returns>
      <param name="state">One of the <see cref="T:System.Security.Permissions.PermissionState" />  values.</param>
    </member>
    <member name="F:System.Data.EntityClient.EntityProviderFactory.Instance">
      <summary>This <see cref="T:System.Data.EntityClient.EntityProviderFactory" /> instance. </summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityProviderFactory.System#IServiceProvider#GetService(System.Type)">
      <summary>Returns the requested <see cref="T:System.IServiceProvider" /> class.</summary>
      <returns>A new instance of <see cref="T:System.IServiceProvider" />. The supported types are <see cref="T:System.Data.Common.DbProviderServices" />, <see cref="T:System.Data.Common.DbCommandDefinitionBuilder" />, and <see cref="T:System.Data.IEntityAdapter" />. Returns null (or Nothing in Visual Basic) for every other type. </returns>
      <param name="serviceType"> The <see cref="T:System.Type" /> to return.</param>
    </member>
    <member name="T:System.Data.EntityClient.EntityTransaction">
      <summary>Specifies the transaction for an <see cref="P:System.Data.EntityClient.EntityCommand" />.</summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityTransaction.Commit">
      <summary>Commits the underlying transaction.</summary>
    </member>
    <member name="P:System.Data.EntityClient.EntityTransaction.Connection">
      <summary>Gets <see cref="T:System.Data.EntityClient.EntityConnection" /> for this <see cref="T:System.Data.EntityClient.EntityTransaction" />.</summary>
      <returns>An <see cref="T:System.Data.EntityClient.EntityConnection" /> to the underlying data source. </returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityTransaction.IsolationLevel">
      <summary>Gets the isolation level of this <see cref="T:System.Data.EntityClient.EntityTransaction" />.</summary>
      <returns>An <see cref="T:System.Data.IsolationLevel" /> enumeration value that represents the isolation level of the underlying transaction.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityTransaction.Rollback">
      <summary>Rolls back the underlying transaction.</summary>
    </member>
    <member name="T:System.Data.Mapping.EntityViewContainer">
      <summary>Base class for the type created at design time to store generated views. </summary>
    </member>
    <member name="M:System.Data.Mapping.EntityViewContainer.#ctor">
      <summary>Initializes a new instance of the EntityViewContainer class.</summary>
    </member>
    <member name="P:System.Data.Mapping.EntityViewContainer.EdmEntityContainerName">
      <summary>Gets or sets the name of <see cref="T:System.Data.Metadata.Edm.EntityContainer" />.</summary>
      <returns>The container name.</returns>
    </member>
    <member name="M:System.Data.Mapping.EntityViewContainer.GetViewAt(System.Int32)">
      <summary>Returns the key/value pair at the specified index, which contains the view and its key.</summary>
      <returns>The key/value pair at <paramref name="index" />, which contains the view and its key.</returns>
      <param name="index">The index of the view.</param>
    </member>
    <member name="P:System.Data.Mapping.EntityViewContainer.HashOverAllExtentViews">
      <summary>Hash value of views.</summary>
      <returns>Hash value.</returns>
    </member>
    <member name="P:System.Data.Mapping.EntityViewContainer.HashOverMappingClosure">
      <summary>Hash value.</summary>
      <returns>Hash value.</returns>
    </member>
    <member name="P:System.Data.Mapping.EntityViewContainer.StoreEntityContainerName">
      <summary>Gets or sets <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> in storage schema.</summary>
      <returns>Container name.</returns>
    </member>
    <member name="P:System.Data.Mapping.EntityViewContainer.ViewCount">
      <summary>Gets or sets view count.</summary>
      <returns>View count.</returns>
    </member>
    <member name="T:System.Data.Mapping.EntityViewGenerationAttribute">
      <summary>Attribute to mark the assemblies containing the generated views type.</summary>
    </member>
    <member name="M:System.Data.Mapping.EntityViewGenerationAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Mapping.EntityViewGenerationAttribute" /> class. </summary>
      <param name="viewGenerationType">The view type.</param>
    </member>
    <member name="P:System.Data.Mapping.EntityViewGenerationAttribute.ViewGenerationType">
      <summary>Gets the T:System.Type of the view.</summary>
      <returns>The T:System.Type of the view.</returns>
    </member>
    <member name="T:System.Data.Mapping.MappingItemCollection">
      <summary>Collection of <see cref="T:System.Data.Metadata.Edm.ItemCollection" /> objects designed for storing mapping information. </summary>
    </member>
    <member name="T:System.Data.Mapping.StorageMappingItemCollection">
      <summary>The <see cref="T:System.Data.Mapping.StorageMappingItemCollection" /> contains a collection of storage mappings for <see cref="T:System.Data.Metadata.Edm.EntitySet" /> and <see cref="T:System.Data.Metadata.Edm.AssociationSet" /> objects. </summary>
    </member>
    <member name="M:System.Data.Mapping.StorageMappingItemCollection.#ctor(System.Data.Metadata.Edm.EdmItemCollection,System.Data.Metadata.Edm.StoreItemCollection,System.Collections.Generic.IEnumerable{System.Xml.XmlReader})">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Mapping.StorageMappingItemCollection" /> class based on the supplied <see cref="T:System.Data.Metadata.Edm.ItemCollection" />, the <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" />, and a collection of <see cref="T:System.String" /> indicating the metadata file paths.</summary>
      <param name="edmCollection">The <see cref="T:System.Data.Metadata.Edm.ItemCollection" /> that this mapping is to use.</param>
      <param name="storeCollection">The <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" /> collection that this mapping is to use.</param>
      <param name="xmlReaders">The XML Readers that this mapping is to use.</param>
    </member>
    <member name="M:System.Data.Mapping.StorageMappingItemCollection.#ctor(System.Data.Metadata.Edm.EdmItemCollection,System.Data.Metadata.Edm.StoreItemCollection,System.String[])">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Mapping.StorageMappingItemCollection" /> class based on the supplied <see cref="T:System.Data.Metadata.Edm.ItemCollection" />, the <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" />, and a collection of <see cref="T:System.String" /> indicating the metadata file paths.</summary>
      <param name="edmCollection">The <see cref="T:System.Data.Metadata.Edm.ItemCollection" /> that this mapping is to use.</param>
      <param name="storeCollection">The <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" /> collection that this mapping is to use.</param>
      <param name="filePaths">A <see cref="T:System.String" /> indicating the file paths that this mapping is to use.</param>
    </member>
    <member name="T:System.Data.Metadata.Edm.AssociationEndMember">
      <summary>Represents the End of an association in the conceptual model. </summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationEndMember.BuiltInTypeKind">
      <summary>Gets the built-in type kind for this <see cref="T:System.Data.Metadata.Edm.AssociationEndMember" />. </summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> object that represents the built-in type kind for this <see cref="T:System.Data.Metadata.Edm.AssociationEndMember" />.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.AssociationSet">
      <summary>Represents an association set in the conceptual model. </summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationSet.AssociationSetEnds">
      <summary>Gets the ends of this <see cref="T:System.Data.Metadata.Edm.AssociationSet" />.</summary>
      <returns>A collection of type <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" /> that contains the ends of this <see cref="T:System.Data.Metadata.Edm.AssociationSet" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationSet.BuiltInTypeKind">
      <summary>Gets the built-in type kind for this <see cref="T:System.Data.Metadata.Edm.AssociationSet" />.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> object that represents built-in type kind for this <see cref="T:System.Data.Metadata.Edm.AssociationSet" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationSet.ElementType">
      <summary>Gets the association related to this <see cref="T:System.Data.Metadata.Edm.AssociationSet" />.</summary>
      <returns>An <see cref="T:System.Data.Metadata.Edm.AssociationType" /> object that represents the association related to this <see cref="T:System.Data.Metadata.Edm.AssociationSet" />.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.AssociationSetEnd">
      <summary>Represents the End of the association set in a conceptual model.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationSetEnd.BuiltInTypeKind">
      <summary>Gets the built-in type kind for this <see cref="T:System.Data.Metadata.Edm.AssociationSetEnd" />.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> object that represents the built-in type kind for this <see cref="T:System.Data.Metadata.Edm.AssociationSetEnd" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationSetEnd.CorrespondingAssociationEndMember">
      <summary>Gets the End member that this <see cref="T:System.Data.Metadata.Edm.AssociationSetEnd" /> object corresponds to.</summary>
      <returns>An <see cref="T:System.Data.Metadata.Edm.AssociationEndMember" /> object that represents the End member that this <see cref="T:System.Data.Metadata.Edm.AssociationSetEnd" /> object corresponds to.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationSetEnd.EntitySet">
      <summary>Gets the entity set referenced by this End role. </summary>
      <returns>An <see cref="T:System.Data.Metadata.Edm.EntitySet" /> object that represents the entity set referred by this End role.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationSetEnd.Name">
      <summary>Gets the name of the End for this <see cref="T:System.Data.Metadata.Edm.AssociationSetEnd" />.</summary>
      <returns>The name of the End for this <see cref="T:System.Data.Metadata.Edm.AssociationSetEnd" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationSetEnd.ParentAssociationSet">
      <summary>Gets the parent association set of this <see cref="T:System.Data.Metadata.Edm.AssociationSetEnd" />.</summary>
      <returns>An <see cref="T:System.Data.Metadata.Edm.AssociationSet" /> object that represents the parent association set of this <see cref="T:System.Data.Metadata.Edm.AssociationSetEnd" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationSetEnd.Role">
      <summary>Gets the name of the End role for this <see cref="T:System.Data.Metadata.Edm.AssociationSetEnd" />.</summary>
      <returns>The name of the End role for this <see cref="T:System.Data.Metadata.Edm.AssociationSetEnd" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.AssociationSetEnd.ToString">
      <summary>Returns the name of the End role for this <see cref="T:System.Data.Metadata.Edm.AssociationSetEnd" />.</summary>
      <returns>The name of the End role for this <see cref="T:System.Data.Metadata.Edm.AssociationSetEnd" />.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.AssociationType">
      <summary>Represents an association in a conceptual model.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationType.AssociationEndMembers">
      <summary>Gets the list of ends for this <see cref="T:System.Data.Metadata.Edm.AssociationType" />.</summary>
      <returns>A collection of type <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" /> that contains the list of ends for this <see cref="T:System.Data.Metadata.Edm.AssociationType" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationType.BuiltInTypeKind">
      <summary>Gets the built-in type kind for this <see cref="T:System.Data.Metadata.Edm.AssociationType" />.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> object that represents the built-in type kind for this <see cref="T:System.Data.Metadata.Edm.AssociationType" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationType.IsForeignKey">
      <summary>Gets the Boolean property value that specifies whether the column is a foreign key.</summary>
      <returns>A Boolean value that specifies whether the column is a foreign key. If true, the column is a foreign key. If false (default), the column is not a foreign key.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationType.ReferentialConstraints">
      <summary>Gets the list of constraints for this <see cref="T:System.Data.Metadata.Edm.AssociationType" />.</summary>
      <returns>A collection of type <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" /> that contains the list of constraints for this <see cref="T:System.Data.Metadata.Edm.AssociationType" />.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.BuiltInTypeKind">
      <summary>Represents an enumeration that specifies the list of all built-in types in a conceptual model. </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.AssociationEndMember">
      <summary>An enumeration member that indicates the <see cref="T:System.Data.Metadata.Edm.AssociationEndMember" /> type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.AssociationSetEnd">
      <summary>An enumeration member that indicates the <see cref="T:System.Data.Metadata.Edm.AssociationSetEnd" /> type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.AssociationSet">
      <summary>An enumeration member that indicates the <see cref="T:System.Data.Metadata.Edm.AssociationSet" /> type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.AssociationType">
      <summary>An enumeration member that indicates the <see cref="T:System.Data.Metadata.Edm.AssociationType" /> type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.EntitySetBase">
      <summary>An enumeration member that indicates the <see cref="T:System.Data.Metadata.Edm.EntitySetBase" /> type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.EntityTypeBase">
      <summary>An enumeration member that indicates the <see cref="T:System.Data.Metadata.Edm.EntityTypeBase" /> type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.CollectionType">
      <summary>An enumeration member that indicates the <see cref="T:System.Data.Metadata.Edm.CollectionType" /> type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.CollectionKind">
      <summary>An enumeration member that indicates the <see cref="T:System.Data.Metadata.Edm.CollectionKind" /> type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.ComplexType">
      <summary>An enumeration member that indicates the <see cref="T:System.Data.Metadata.Edm.ComplexType" /> type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.Documentation">
      <summary>An enumeration member that indicates the <see cref="T:System.Data.Metadata.Edm.Documentation" /> type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.OperationAction">
      <summary>An enumeration member that indicates the <see cref="T:System.Data.Metadata.Edm.OperationAction" /> type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.EdmType">
      <summary>An enumeration member that indicates the <see cref="T:System.Data.Metadata.Edm.EdmType" /> type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.EntityContainer">
      <summary>An enumeration member that indicates the <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.EntitySet">
      <summary>An enumeration member that indicates the <see cref="T:System.Data.Metadata.Edm.EntitySet" /> type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.EntityType">
      <summary>An enumeration member that indicates the <see cref="T:System.Data.Metadata.Edm.EntityType" /> type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.EnumType">
      <summary>An enumeration member that indicates the <see cref="T:System.Data.Metadata.Edm.EnumType" /> type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.EnumMember">
      <summary>An enumeration member that indicates the <see cref="T:System.Data.Metadata.EdmEnumMember" /> type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.Facet">
      <summary>An enumeration member that indicates the <see cref="T:System.Data.Metadata.Edm.Facet" /> type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.EdmFunction">
      <summary>An enumeration member that indicates the <see cref="T:System.Data.Metadata.Edm.EdmFunction" /> type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.FunctionParameter">
      <summary>An enumeration member that indicates the <see cref="T:System.Data.Metadata.Edm.FunctionParameter" /> type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.GlobalItem">
      <summary>An enumeration member that indicates the <see cref="T:System.Data.Metadata.Edm.GlobalItem" /> type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.MetadataProperty">
      <summary>An enumeration member that indicates the <see cref="T:System.Data.Metadata.Edm.MetadataProperty" /> type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.NavigationProperty">
      <summary>An enumeration member that indicates the <see cref="T:System.Data.Metadata.Edm.NavigationProperty" /> type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.MetadataItem">
      <summary>An enumeration member that indicates the <see cref="T:System.Data.Metadata.Edm.MetadataItem" /> type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.EdmMember">
      <summary>An enumeration member that indicates the <see cref="T:System.Data.Metadata.Edm.EdmMember" /> type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.ParameterMode">
      <summary>An enumeration member that indicates the <see cref="T:System.Data.Metadata.Edm.ParameterMode" /> type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.PrimitiveType">
      <summary>An enumeration member that indicates the <see cref="T:System.Data.Metadata.Edm.PrimitiveType" /> type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.PrimitiveTypeKind">
      <summary>An enumeration member that indicates the <see cref="T:System.Data.Metadata.Edm.PrimitiveTypeKind" /> type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.EdmProperty">
      <summary>An enumeration member that indicates the <see cref="T:System.Data.Metadata.Edm.EdmProperty" /> type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.ProviderManifest">
      <summary>An enumeration member that indicates the <see cref="T:System.Data.Metadata.Edm.ProviderManifest" /> type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.ReferentialConstraint">
      <summary>An enumeration member that indicates the <see cref="T:System.Data.Metadata.Edm.ReferentialConstraint" /> type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.RefType">
      <summary>An enumeration member that indicates the <see cref="T:System.Data.Metadata.Edm.RefType" /> type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.RelationshipEndMember">
      <summary>An enumeration member that indicates the <see cref="T:System.Data.Metadata.Edm.RelationshipEndMember" /> type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.RelationshipMultiplicity">
      <summary>An enumeration member that indicates the <see cref="T:System.Data.Metadata.Edm.RelationshipMultiplicity" /> type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.RelationshipSet">
      <summary>An enumeration member that indicates the <see cref="T:System.Data.Metadata.Edm.RelationshipSet" /> type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.RelationshipType">
      <summary>An enumeration member that indicates the <see cref="T:System.Data.Metadata.Edm.RelationshipType" /> type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.RowType">
      <summary>An enumeration member that indicates the <see cref="T:System.Data.Metadata.Edm.RowType" /> type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.SimpleType">
      <summary>An enumeration member that indicates the <see cref="T:System.Data.Metadata.Edm.SimpleType" /> type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.StructuralType">
      <summary>An enumeration member that indicates the <see cref="T:System.Data.Metadata.Edm.StructuralType" /> type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.TypeUsage">
      <summary>An enumeration member that indicates the <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> type.</summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.CollectionKind">
      <summary>Represents an enumeration that specifies the kind of the collection that is applied to the properties in the conceptual schema definition language (CSDL) files. You can apply this to the properties of any type. </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.CollectionKind.None">
      <summary>The property is not a collection.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.CollectionKind.Bag">
      <summary>The collection has bag semantics. The items are unordered and duplicates are acceptable.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.CollectionKind.List">
      <summary>The collection has list semantics. The order of the items is deterministic and duplicates are acceptable.</summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.CollectionType">
      <summary>Represents a collection of instances of a specific type. You cannot explicitly define a <see cref="T:System.Data.Metadata.Edm.CollectionType" /> in a conceptual model.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.CollectionType.BuiltInTypeKind">
      <summary>Gets the built-in type kind for this <see cref="T:System.Data.Metadata.Edm.CollectionType" />.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> object that represents the built-in type kind for this <see cref="T:System.Data.Metadata.Edm.CollectionType" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.CollectionType.TypeUsage">
      <summary>Gets the instance of the <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> class that contains the type of the element that this current <see cref="T:System.Data.Metadata.Edm.CollectionType" /> object includes and facets for that type. </summary>
      <returns>The instance of the <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> class that contains the type of the element that this current <see cref="T:System.Data.Metadata.Edm.CollectionType" /> object includes and facets for that type.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.ComplexType">
      <summary>Represents a complex type in a conceptual model.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.ComplexType.BuiltInTypeKind">
      <summary>Gets the built-in type kind for this <see cref="T:System.Data.Metadata.Edm.ComplexType" />.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> object that represents the built-in type kind for this <see cref="T:System.Data.Metadata.Edm.ComplexType" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.ComplexType.Properties">
      <summary>Gets the list of properties for this <see cref="T:System.Data.Metadata.Edm.ComplexType" />.</summary>
      <returns>A collection of type <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" /> that contains the list of properties for this <see cref="T:System.Data.Metadata.Edm.ComplexType" />.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.ConcurrencyMode">
      <summary>Specifies the concurrency options for the properties in a conceptual model. </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.ConcurrencyMode.None">
      <summary>The property is never validated at write time. This is the default concurrency mode.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.ConcurrencyMode.Fixed">
      <summary>The property is always validated at write time.</summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.DataSpace">
      <summary>Specifies the default names for the models in the Entity Framework.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.DataSpace.OSpace">
      <summary>Represents the default name for the object model.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.DataSpace.CSpace">
      <summary>Represents the default name for the conceptual model.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.DataSpace.SSpace">
      <summary>Represents the default name for the storage model.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.DataSpace.OCSpace">
      <summary>Represents the default name for the mapping between the object model and the conceptual model.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.DataSpace.CSSpace">
      <summary>Represents the default name for the mapping between the conceptual model and the storage model.</summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.Documentation">
      <summary>Represents the documentation associated with a conceptual model construct. </summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.Documentation.BuiltInTypeKind">
      <summary>Gets the built-in type kind for this <see cref="T:System.Data.Metadata.Edm.Documentation" />.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> object that represents the built-in type kind for this <see cref="T:System.Data.Metadata.Edm.Documentation" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.Documentation.IsEmpty">
      <summary>Gets a value indicating whether this <see cref="T:System.Data.Metadata.Edm.Documentation" /> object contains only a null or an empty <see cref="P:System.Data.Metadata.Edm.Documentation.Summary" /> and a <see cref="P:System.Data.Metadata.Edm.Documentation.Longdescription" />.</summary>
      <returns>true if this <see cref="T:System.Data.Metadata.Edm.Documentation" /> object contains only a null or an empty <see cref="P:System.Data.Metadata.Edm.Documentation.Summary" /> and a <see cref="P:System.Data.Metadata.Edm.Documentation.LongDescription" />; otherwise, false.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.Documentation.LongDescription">
      <summary>Gets the long description for this <see cref="T:System.Data.Metadata.Edm.Documentation" />.</summary>
      <returns>The long description for this <see cref="T:System.Data.Metadata.Edm.Documentation" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.Documentation.Summary">
      <summary>Gets the summary for this <see cref="T:System.Data.Metadata.Edm.Documentation" />.</summary>
      <returns>The summary for this <see cref="T:System.Data.Metadata.Edm.Documentation" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.Documentation.ToString">
      <summary>Returns the summary for this <see cref="T:System.Data.Metadata.Edm.Documentation" />.</summary>
      <returns>The summary for this <see cref="T:System.Data.Metadata.Edm.Documentation" />.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.EdmError">
      <summary>Encapsulates the error information for a generic conceptual model error. </summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmError.Message">
      <summary>Gets the error message.</summary>
      <returns>The error message.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.EdmFunction">
      <summary>Represents information about the functions that may be invoked from the queries written by the Entity SQL query language. These may be the built-in functions exposed by the storage provider or user-defined functions in a particular database.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmFunction.BuiltInTypeKind">
      <summary>Gets the built-in type kind for this <see cref="T:System.Data.Metadata.Edm.EdmFunction" />.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> object that represents the built-in type kind for this <see cref="T:System.Data.Metadata.Edm.EdmFunction" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmFunction.CommandTextAttribute">
      <summary>Represents a query in the language that is used by the database management system or storage model.</summary>
      <returns>A string value in the syntax used by the database management system or storage model that contains the query or update statement of the <see cref="T:System.Data.Metadata.Edm.EdmFunction" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmFunction.FullName">
      <summary>Returns the full name (namespace plus name) of this type. </summary>
      <returns>The full name of the type.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmFunction.Parameters">
      <summary>Gets the parameters of this <see cref="T:System.Data.Metadata.Edm.EdmFunction" />.</summary>
      <returns>A collection of type <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" /> that contains the parameters of this <see cref="T:System.Data.Metadata.Edm.EdmFunction" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmFunction.ReturnParameter">
      <summary>Gets the return parameter of this <see cref="T:System.Data.Metadata.Edm.EdmFunction" />.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.FunctionParameter" /> object that represents the return parameter of this <see cref="T:System.Data.Metadata.Edm.EdmFunction" />.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.EdmItemCollection">
      <summary>Loads metadata about the conceptual model. The <see cref="T:System.Data.Metadata.Edm.EdmItemCollection" /> loads metadata from conceptual schema definition language (CSDL) files. This class is derived from the <see cref="T:System.Data.Metadata.Edm.ItemCollection" /> class. </summary>
    </member>
    <member name="M:System.Data.Metadata.Edm.EdmItemCollection.#ctor(System.Collections.Generic.IEnumerable{System.Xml.XmlReader})">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Metadata.Edm.EdmItemCollection" /> class by using the collection of the <see cref="T:System.XML.XMLReader" /> objects where the conceptual schema definition language (CSDL) files  exist.</summary>
      <param name="xmlReaders">The collection of the <see cref="T:System.XML.XMLReader" /> objects where the conceptual schema definition language (CSDL) files exist.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.EdmItemCollection.#ctor(System.String[])">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Metadata.Edm.EdmItemCollection" /> class by using the paths where the conceptual schema definition language (CSDL) files exist.</summary>
      <param name="filePaths">The paths where the conceptual schema definition language (CSDL) files exist.</param>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmItemCollection.EdmVersion">
      <summary>Gets the version of the conceptual schema definition language (CSDL) that this item collection represents.</summary>
      <returns>The version of the CSDL that this item collection represents. CSDL with XML namespace http://schemas.microsoft.com/ado/2006/04/edm corresponds to version 1.0. CSDL with XML namespace http://schemas.microsoft.com/ado/2008/09/edm corresponds to version 2.0.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.EdmItemCollection.GetPrimitiveTypes">
      <summary>Returns a collection of the <see cref="T:System.Data.Metadata.Edm.PrimitiveType" /> objects.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection" /> object that represents a collection of the <see cref="T:System.Data.Metadata.Edm.PrimitiveType" /> objects.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.EdmMember">
      <summary>Represents a member that can be declared in any <see cref="T:System.Data.Metadata.Edm.StructuralType" />. </summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmMember.DeclaringType">
      <summary>Gets the type on which this member is declared.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.StructuralType" /> object that represents the type on which this member is declared.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmMember.Name">
      <summary>Gets the name of this member.</summary>
      <returns>The name of this member.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.EdmMember.ToString">
      <summary>Returns the name of this member.</summary>
      <returns>The name of this member.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmMember.TypeUsage">
      <summary>Gets the instance of the <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> class that contains both the type of the member and facets for the type.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> object that contains both the type of the member and facets for the type.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.EdmProperty">
      <summary>Represents a property for the <see cref="T:System.Data.Metadata.Edm.EntityType" /> in a conceptual model. An <see cref="T:System.Data.Metadata.Edm.EdmProperty" /> class derives from the <see cref="T:System.Data.Metadata.Edm.EdmMember" /> class and provides the <see cref="P:System.Data.Metadata.Edm.EdmProperty.Default" /> and the <see cref="P:System.Data.Metadata.Edm.EdmProperty.Nullable" /> facets for the type of this <see cref="T:System.Data.Metadata.Edm.EdmProperty" />.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmProperty.BuiltInTypeKind">
      <summary>Gets the built-in type kind for this <see cref="T:System.Data.Metadata.Edm.EdmProperty" />.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> object that represents the built-in type kind for this <see cref="T:System.Data.Metadata.Edm.EdmProperty" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmProperty.DefaultValue">
      <summary>Gets the default value for this <see cref="T:System.Data.Metadata.Edm.EdmProperty" />.</summary>
      <returns>The default value for this <see cref="T:System.Data.Metadata.Edm.EdmProperty" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmProperty.Nullable">
      <summary>Gets a value indicating whether this <see cref="T:System.Data.Metadata.Edm.EdmProperty" /> can have a null value.</summary>
      <returns>true if this <see cref="T:System.Data.Metadata.Edm.EdmProperty" /> can have a null value; otherwise, false. </returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.EdmSchemaError">
      <summary>Encapsulates the detailed information about a conceptual model schema error.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmSchemaError.Column">
      <summary>Gets the column where the error occurred.</summary>
      <returns>The column where the error occurred.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmSchemaError.ErrorCode">
      <summary>Gets the error code.</summary>
      <returns>The error code.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmSchemaError.Line">
      <summary>Gets the line number where the error occurred.</summary>
      <returns>The line number where the error occurred.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmSchemaError.SchemaLocation">
      <summary>Gets the location of the schema that contains the error. This string also includes the name of the schema at the end.</summary>
      <returns>The location of the schema that contains the error.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmSchemaError.SchemaName">
      <summary>Gets the name of the schema that contains the error.</summary>
      <returns>The name of the schema that contains the error.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmSchemaError.Severity">
      <summary>Gets the severity level of the error.</summary>
      <returns>One of the <see cref="T:System.Data.Metadata.Edm.EdmSchemaErrorSeverity" /> values. The default is <see cref="F:System.Data.Metadata.Edm.EdmSchemaErrorSeverity.Warning" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmSchemaError.StackTrace">
      <summary>Gets a string representation of the stack trace at the time the error occurred.</summary>
      <returns>A string representation of the stack trace at the time the error occurred.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.EdmSchemaError.ToString">
      <summary>Returns the error message.</summary>
      <returns>The error message.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.EdmSchemaErrorSeverity">
      <summary>Specifies the severity level of the error. </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.EdmSchemaErrorSeverity.Warning">
      <summary>A warning indicates that there are some problems in the schema but it is still usable. </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.EdmSchemaErrorSeverity.Error">
      <summary>An error indicates that a severe problem occurred and the schema cannot be used.</summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.EdmType">
      <summary>Represents a base class for all the types in a conceptual model. </summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmType.Abstract">
      <summary>Gets a value indicating whether this type is abstract or not. </summary>
      <returns>true if this type is abstract; otherwise, false. </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmType.BaseType">
      <summary>Gets the base type of this type.</summary>
      <returns>The base type of this type.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmType.FullName">
      <summary>Gets the full name of this type.</summary>
      <returns>The full name of this type. </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.EdmType.GetCollectionType">
      <summary>Returns an instance of the <see cref="T:System.Data.Metadata.Edm.CollectionType" /> whose element type is this type. </summary>
      <returns>The <see cref="T:System.Data.Metadata.Edm.CollectionType" /> object whose element type is this type.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmType.Name">
      <summary>Gets the name of this type.</summary>
      <returns>The name of this type.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmType.NamespaceName">
      <summary>Gets the namespace of this type.</summary>
      <returns>The namespace of this type.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.EdmType.ToString">
      <summary>Returns the full name of this type.</summary>
      <returns>The full name of this type. </returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.EntityContainer">
      <summary>Represents an entity container in a conceptual model. An <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> is a logical grouping of entity sets and association sets.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntityContainer.BaseEntitySets">
      <summary>Gets a list of entity sets and association sets that this <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> includes.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" /> object that contains a list of entity sets and association sets that this <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> includes.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntityContainer.BuiltInTypeKind">
      <summary>Gets the built-in type kind for this <see cref="T:System.Data.Metadata.Edm.EntityContainer" />.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> object that represents the built-in type kind for this <see cref="T:System.Data.Metadata.Edm.EntityContainer" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntityContainer.FunctionImports">
      <summary>Specifies a collection of <see cref="T:System.Data.Metadata.Edm.EdmFunction" /> elements. Each function contains the details of a stored procedure that exists in the database or equivalent CommandText that is mapped to an entity and its properties.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" /> that contains <see cref="T:System.Data.Metadata.Edm.EdmFunction" /> elements.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.EntityContainer.GetEntitySetByName(System.String,System.Boolean)">
      <summary>Returns an <see cref="T:System.Data.Metadata.Edm.EntitySet" /> object by using the specified name for the entity set.</summary>
      <returns>An <see cref="T:System.Data.Metadata.Edm.EntitySet" /> object that represents the entity set that has the specified name.</returns>
      <param name="name">The name of the entity set that is searched for.</param>
      <param name="ignoreCase">true to perform the case-insensitive search; otherwise, false.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.EntityContainer.GetRelationshipSetByName(System.String,System.Boolean)">
      <summary>Returns a <see cref="T:System.Data.Metadata.Edm.RelationshipSet" /> object by using the specified name for the relationship set.</summary>
      <returns>An <see cref="T:System.Data.Metadata.Edm.RelationshipSet" /> object that represents the relationship set that has the specified name.</returns>
      <param name="name">The name of the relationship set that is searched for.</param>
      <param name="ignoreCase">true to perform the case-insensitive search; otherwise, false.</param>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntityContainer.Name">
      <summary>Gets the name of this <see cref="T:System.Data.Metadata.Edm.EntityContainer" />.</summary>
      <returns>The name of this <see cref="T:System.Data.Metadata.Edm.EntityContainer" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.EntityContainer.ToString">
      <summary>Returns the name of this <see cref="T:System.Data.Metadata.Edm.EntityContainer" />.</summary>
      <returns>The name of this <see cref="T:System.Data.Metadata.Edm.EntityContainer" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.EntityContainer.TryGetEntitySetByName(System.String,System.Boolean,System.Data.Metadata.Edm.EntitySet@)">
      <summary>Returns an <see cref="T:System.Data.Metadata.Edm.EntitySet" /> object by using the specified name for the entity set.</summary>
      <returns>true if there is an entity set that matches the search criteria; otherwise, false.</returns>
      <param name="name">The name of the entity set that is searched for.</param>
      <param name="ignoreCase">true to perform the case-insensitive search; otherwise, false.</param>
      <param name="entitySet">When this method returns, contains an <see cref="T:System.Data.Metadata.Edm.EntitySet" /> object. If there is no entity set, this output parameter contains null.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.EntityContainer.TryGetRelationshipSetByName(System.String,System.Boolean,System.Data.Metadata.Edm.RelationshipSet@)">
      <summary>Returns a <see cref="T:System.Data.Metadata.Edm.RelationshipSet" /> object by using the specified name for the relationship set.</summary>
      <returns>true if there is a relationship set that matches the search criteria; otherwise, false. </returns>
      <param name="name">The name of the relationship set that is searched for.</param>
      <param name="ignoreCase">true to perform the case-insensitive search; otherwise, false.</param>
      <param name="relationshipSet">When this method returns, contains a <see cref="T:System.Data.Metadata.Edm.RelationshipSet" /> object. </param>
    </member>
    <member name="T:System.Data.Metadata.Edm.EntitySet">
      <summary>Represents an entity set in a conceptual model. An <see cref="T:System.Data.Metadata.Edm.EntitySet" /> for an <see cref="T:System.Data.Metadata.Edm.EntityType" /> contains instances of the <see cref="T:System.Data.Metadata.Edm.EntityType" /> or any of its subtypes. More than one <see cref="T:System.Data.Metadata.Edm.EntitySet" /> can be defined by using the same <see cref="T:System.Data.Metadata.Edm.EntityType" />. </summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntitySet.BuiltInTypeKind">
      <summary>Gets the built-in type kind for this <see cref="T:System.Data.Metadata.Edm.EntitySet" />.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> object that represents the built-in type kind for this <see cref="T:System.Data.Metadata.Edm.EntitySet" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntitySet.ElementType">
      <summary>Gets the entity type of this <see cref="T:System.Data.Metadata.Edm.EntitySet" />.</summary>
      <returns>An <see cref="T:System.Data.Metadata.Edm.EntityType" /> object that represents the entity type of this <see cref="T:System.Data.Metadata.Edm.EntitySet" />.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.EntitySetBase">
      <summary>A base class for an <see cref="T:System.Data.Metadata.Edm.EntitySet" /> and a <see cref="T:System.Data.Metadata.Edm.RelationshipSet" />.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntitySetBase.BuiltInTypeKind">
      <summary>Gets the built-in type kind for this <see cref="T:System.Data.Metadata.Edm.EntitySetBase" />.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> object that represents the built-in type kind for this <see cref="T:System.Data.Metadata.Edm.EntitySetBase" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntitySetBase.ElementType">
      <summary>Gets the entity type of this <see cref="T:System.Data.Metadata.Edm.EntityTypeBase" />.</summary>
      <returns>An <see cref="T:System.Data.Metadata.Edm.EntityTypeBase" /> object that represents the entity type of this <see cref="T:System.Data.Metadata.Edm.EntityTypeBase" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntitySetBase.EntityContainer">
      <summary>Gets the entity container of the current entity or relationship set.</summary>
      <returns>An <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> object that represents the entity container of the current entity or relationship set.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntitySetBase.Name">
      <summary>Gets the name of the current entity or relationship set.</summary>
      <returns>The name of the current entity or relationship set.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.EntitySetBase.ToString">
      <summary>Returns the name of the current entity or relationship set.</summary>
      <returns>The name of the current entity or relationship set.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.EntityType">
      <summary>Represents a particular type of data, such as a customer entity or an order entity in a conceptual model. </summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntityType.BuiltInTypeKind">
      <summary>Gets the built-in type kind for this <see cref="T:System.Data.Metadata.Edm.EntityType" />.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> object that represents the built-in type kind for this <see cref="T:System.Data.Metadata.Edm.EntityType" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.EntityType.GetReferenceType">
      <summary>Returns a <see cref="T:System.Data.Metadata.Edm.RefType" /> object that references this <see cref="T:System.Data.Metadata.Edm.EntityType" />.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.RefType" /> object that references this <see cref="T:System.Data.Metadata.Edm.EntityType" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntityType.NavigationProperties">
      <summary>Gets the navigation properties of this <see cref="T:System.Data.Metadata.Edm.EntityType" />.</summary>
      <returns>A collection of type <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" /> that contains the list of navigation properties on this <see cref="T:System.Data.Metadata.Edm.EntityType" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntityType.Properties">
      <summary>Gets the list of properties for this <see cref="T:System.Data.Metadata.Edm.EntityType" />.</summary>
      <returns>A collection of type <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" /> that contains the list of properties for this <see cref="T:System.Data.Metadata.Edm.EntityType" />.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.EntityTypeBase">
      <summary>A base type for <see cref="T:System.Data.Metadata.Edm.EntityType" /> and <see cref="T:System.Data.Metadata.Edm.RelationshipType" />.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntityTypeBase.KeyMembers">
      <summary>Gets the list of all the key members for the current entity or relationship type.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" /> object that represents the list of key members for the current entity or relationship type. </returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.Facet">
      <summary>Provides additional information about members. In the ADO.NET metadata type hierarchy, facets provide additional information about members through the declared type for the member. </summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.Facet.BuiltInTypeKind">
      <summary>Gets the built-in type kind for this <see cref="T:System.Data.Metadata.Edm.Facet" />.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> object that represents the built-in type kind for this <see cref="T:System.Data.Metadata.Edm.Facet" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.Facet.Description">
      <summary>Gets the description of this <see cref="T:System.Data.Metadata.Edm.Facet" />.</summary>
      <returns>The <see cref="T:System.Data.Metadata.Edm.FacetDescription" /> object that represents the description of this <see cref="T:System.Data.Metadata.Edm.Facet" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.Facet.FacetType">
      <summary>Gets the type of this <see cref="T:System.Data.Metadata.Edm.Facet" />.</summary>
      <returns>The <see cref="T:System.Data.Metadata.Edm.EdmType" /> object that represents the type of this <see cref="T:System.Data.Metadata.Edm.Facet" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.Facet.IsUnbounded">
      <summary>Gets a value indicating whether the value of the facet is unbounded.</summary>
      <returns>true if the value of the facet is unbounded; otherwise, false.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.Facet.Name">
      <summary>Gets the name of this <see cref="T:System.Data.Metadata.Edm.Facet" />.</summary>
      <returns>The name of this <see cref="T:System.Data.Metadata.Edm.Facet" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.Facet.ToString">
      <summary>Returns the name of this <see cref="T:System.Data.Metadata.Edm.Facet" />.</summary>
      <returns>The name of this <see cref="T:System.Data.Metadata.Edm.Facet" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.Facet.Value">
      <summary>Gets the value of this <see cref="T:System.Data.Metadata.Edm.Facet" />.</summary>
      <returns>The value of this <see cref="T:System.Data.Metadata.Edm.Facet" />.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.FacetDescription">
      <summary>Specifies a description of the facet. </summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.FacetDescription.DefaultValue">
      <summary>Gets the default value of a facet with this facet description.</summary>
      <returns>The default value of a facet with this facet description.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.FacetDescription.FacetName">
      <summary>Gets the name of this facet.</summary>
      <returns>The name of this facet.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.FacetDescription.FacetType">
      <summary>Gets the type of this facet.</summary>
      <returns>An <see cref="T:System.Data.Metadata.Edm.EdmType" /> object that represents the type of this facet.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.FacetDescription.IsConstant">
      <summary>Gets a value indicating whether the value of this facet is a constant.</summary>
      <returns>true if this facet is a constant; otherwise, false. </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.FacetDescription.IsRequired">
      <summary>Gets a value indicating whether this facet is a required facet.</summary>
      <returns>true if this facet is a required facet; otherwise, false.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.FacetDescription.MaxValue">
      <summary>Gets the maximum value for this facet.</summary>
      <returns>The maximum value for this facet.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.FacetDescription.MinValue">
      <summary>Gets the minimum value for this facet.</summary>
      <returns>The minimum value for this facet.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.FacetDescription.ToString">
      <summary>Returns the name of this facet. </summary>
      <returns>The name of this facet.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.FunctionParameter">
      <summary>Describes the parameters of an <see cref="T:System.Data.Metadata.Edm.EdmFunction" />. </summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.FunctionParameter.BuiltInTypeKind">
      <summary>Gets the built-in type kind for this <see cref="T:System.Data.Metadata.Edm.FunctionParameter" />.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> object that represents the built-in type kind for this <see cref="T:System.Data.Metadata.Edm.FunctionParameter" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.FunctionParameter.DeclaringFunction">
      <summary>Gets or sets the <see cref="T:System.Data.Metadata.Edm.EdmFunction" /> on which this parameter is declared. </summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.EdmFunction" /> object that represents the function on which this parameter is declared.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.FunctionParameter.Mode">
      <summary>Gets the mode of this <see cref="T:System.Data.Metadata.Edm.FunctionParameter" />.</summary>
      <returns>One of the <see cref="T:System.Data.Metadata.Edm.ParameterMode" /> values. </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.FunctionParameter.Name">
      <summary>Gets the name of this <see cref="T:System.Data.Metadata.Edm.FunctionParameter" />.</summary>
      <returns>The name of this <see cref="T:System.Data.Metadata.Edm.FunctionParameter" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.FunctionParameter.ToString">
      <summary>Returns the name of this <see cref="T:System.Data.Metadata.Edm.FunctionParameter" />.</summary>
      <returns>The name of this <see cref="T:System.Data.Metadata.Edm.FunctionParameter" />. </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.FunctionParameter.TypeUsage">
      <summary>Gets the instance of the <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> class that contains both the type of the parameter and facets for the type.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> object that contains both the type of the parameter and facets for the type.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.GlobalItem">
      <summary>Represents the base item class for all the  conceptual model types and entity containers. </summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.ItemCollection">
      <summary>A base class for <see cref="T:System.Data.Metadata.Edm.ObjectItemCollection" />, <see cref="T:System.Data.Metadata.Edm.EdmItemCollection" />, and <see cref="T:System.Data.Mapping.StorageMappingItemCollection" /> classes. An <see cref="T:System.Data.Metadata.Edm.ItemCollection" /> class is an abstract class and provides the core API for loading and holding the in-memory metadata. This class is derived from the <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" /> class.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.ItemCollection.DataSpace">
      <summary>Gets the data model associated with this item collection. </summary>
      <returns>The data model associated with this item collection. </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.GetEntityContainer(System.String)">
      <summary>Returns an <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> object by using the specified entity container name.</summary>
      <returns>If there is no entity container, this method returns null; otherwise, it returns the first one.</returns>
      <param name="name">The name of the entity container.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.GetEntityContainer(System.String,System.Boolean)">
      <summary>Returns an <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> object by using the specified entity container name.</summary>
      <returns>If there is no entity container, this method returns null; otherwise, it returns the first entity container.</returns>
      <param name="name">The name of the entity container.</param>
      <param name="ignoreCase">true to perform the case-insensitive search; otherwise, false.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.GetFunctions(System.Collections.Generic.Dictionary{System.String,System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Metadata.Edm.EdmFunction}},System.String,System.Boolean)">
      <summary>Returns all the overloads of the functions by using the specified name from this item collection.</summary>
      <returns>A collection of type ReadOnlyCollection that contains all the functions that have the specified name.</returns>
      <param name="functionCollection">A dictionary of functions.</param>
      <param name="functionName">The full name of the function.</param>
      <param name="ignoreCase">true to perform the case-insensitive search; otherwise, false.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.GetFunctions(System.String)">
      <summary>Returns all the overloads of the functions by using the specified name from this item collection.</summary>
      <returns>A collection of type <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> that contains all the functions that have the specified name.</returns>
      <param name="functionName">The full name of the function.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.GetFunctions(System.String,System.Boolean)">
      <summary>Returns all the overloads of the functions by using the specified name from this item collection.</summary>
      <returns>A collection of type <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> that contains all the functions that have the specified name.</returns>
      <param name="functionName">The full name of the function.</param>
      <param name="ignoreCase">true to perform the case-insensitive search; otherwise, false.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.GetItem``1(System.String)">
      <summary>Returns a strongly typed <see cref="T:System.Data.Metadata.Edm.GlobalItem" /> object by using the specified identity.</summary>
      <returns>The item that is specified by the identity.</returns>
      <param name="identity">The identity of the item.</param>
      <typeparam name="T">The type returned by the method.</typeparam>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.GetItem``1(System.String,System.Boolean)">
      <summary>Returns a strongly typed <see cref="T:System.Data.Metadata.Edm.GlobalItem" /> object by using the specified identity with either case-sensitive or case-insensitive search.</summary>
      <returns>The item that is specified by the identity.</returns>
      <param name="identity">The identity of the item.</param>
      <param name="ignoreCase">true to perform the case-insensitive search; otherwise, false.</param>
      <typeparam name="T">The type returned by the method.</typeparam>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.GetItems``1">
      <summary>Returns all the items of the specified type from this item collection.</summary>
      <returns>A collection of type <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> that contains all the items of the specified type.</returns>
      <typeparam name="T">The type returned by the method.</typeparam>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.GetType(System.String,System.String)">
      <summary>Returns an <see cref="T:System.Data.Metadata.Edm.EdmType" /> object by using the specified type name and the namespace name in this item collection.</summary>
      <returns>An <see cref="T:System.Data.Metadata.Edm.EdmType" /> object that represents the type that matches the specified type name and the namespace name in this item collection. If there is no matched type, this method returns null.</returns>
      <param name="name">The name of the type.</param>
      <param name="namespaceName">The namespace of the type.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.GetType(System.String,System.String,System.Boolean)">
      <summary>Returns an <see cref="T:System.Data.Metadata.Edm.EdmType" /> object by using the specified type name and the namespace name from this item collection.</summary>
      <returns>An <see cref="T:System.Data.Metadata.Edm.EdmType" /> object that represents the type that matches the specified type name and the namespace name in this item collection. If there is no matched type, this method returns null.</returns>
      <param name="name">The name of the type.</param>
      <param name="namespaceName">The namespace of the type.</param>
      <param name="ignoreCase">true to perform the case-insensitive search; otherwise, false.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.TryGetEntityContainer(System.String,System.Boolean,System.Data.Metadata.Edm.EntityContainer@)">
      <summary>Returns an <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> object by using the specified entity container name. If there is no entity container, this output parameter contains null; otherwise, it contains the first entity container.</summary>
      <returns>true if there is an entity container that matches the search criteria; otherwise, false.</returns>
      <param name="name">The name of the entity container.</param>
      <param name="ignoreCase">true to perform the case-insensitive search; otherwise, false.</param>
      <param name="entityContainer">When this method returns, it contains an <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> object. If there is no entity container, this output parameter contains null; otherwise, it contains the first entity container.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.TryGetEntityContainer(System.String,System.Data.Metadata.Edm.EntityContainer@)">
      <summary>Returns an <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> object by using the specified entity container name. If there is no entity container, the output parameter contains null; otherwise, it contains the first entity container.</summary>
      <returns>true if there is an entity container that matches the search criteria; otherwise, false.</returns>
      <param name="name">The name of the entity container.</param>
      <param name="entityContainer">When this method returns, it contains an <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> object. If there is no entity container, this output parameter contains null; otherwise, it contains the first entity container.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.TryGetItem``1(System.String,System.Boolean,``0@)">
      <summary>Returns a strongly typed <see cref="T:System.Data.Metadata.Edm.GlobalItem" /> object by using the specified identity from this item collection.</summary>
      <returns>true if there is an item that matches the search criteria; otherwise, false.</returns>
      <param name="identity">The identity of the item.</param>
      <param name="ignoreCase">true to perform the case-insensitive search; otherwise, false.</param>
      <param name="item">When this method returns, the output parameter contains a <see cref="T:System.Data.Metadata.Edm.GlobalItem" /> object. If there is no global item with the specified identity in the item collection, this output parameter contains null.</param>
      <typeparam name="T">The type returned by the method.</typeparam>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.TryGetItem``1(System.String,``0@)">
      <summary>Returns a strongly typed <see cref="T:System.Data.Metadata.Edm.GlobalItem" /> object by using the specified identity from this item collection.</summary>
      <returns>true if there is an item that matches the search criteria; otherwise, false.</returns>
      <param name="identity">The identity of the item.</param>
      <param name="item">When this method returns, the output parameter contains a <see cref="T:System.Data.Metadata.Edm.GlobalItem" /> object. If there is no global item with the specified identity in the item collection, this output parameter contains null.</param>
      <typeparam name="T">The type returned by the method.</typeparam>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.TryGetType(System.String,System.String,System.Boolean,System.Data.Metadata.Edm.EdmType@)">
      <summary>Returns an <see cref="T:System.Data.Metadata.Edm.EdmType" /> object by using the specified type name and the namespace name from this item collection.</summary>
      <returns>true if there is a type that matches the search criteria; otherwise, false. </returns>
      <param name="name">The name of the type.</param>
      <param name="namespaceName">The namespace of the type.</param>
      <param name="ignoreCase">true to perform the case-insensitive search; otherwise, false.</param>
      <param name="type">When this method returns, this output parameter contains an <see cref="T:System.Data.Metadata.Edm.EdmType" /> object. If there is no type with the specified name and namespace name in this item collection, this output parameter contains null.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.TryGetType(System.String,System.String,System.Data.Metadata.Edm.EdmType@)">
      <summary>Returns an <see cref="T:System.Data.Metadata.Edm.EdmType" /> object by using the specified type name and the namespace name from this item collection.</summary>
      <returns>true if there is a type that matches the search criteria; otherwise, false.</returns>
      <param name="name">The name of the type.</param>
      <param name="namespaceName">The namespace of the type.</param>
      <param name="type">When this method returns, this output parameter contains an <see cref="T:System.Data.Metadata.Edm.EdmType" /> object. If there is no type with the specified name and namespace name in this item collection, this output parameter contains null.</param>
    </member>
    <member name="T:System.Data.Metadata.Edm.MetadataItem">
      <summary>Represents the base item class for all the metadata in the ADO.NET metadata type hierarchy. </summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.MetadataItem.BuiltInTypeKind">
      <summary>Gets the built-in type kind for this type.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> object that represents the built-in type kind for this type.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.MetadataItem.Documentation">
      <summary>Gets or sets the documentation associated with this type.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.Documentation" /> object that represents the documentation on this type.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataItem.GetBuiltInType(System.Data.Metadata.Edm.BuiltInTypeKind)">
      <summary>Returns a conceptual model built-in type that matches one of the <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> values.</summary>
      <returns>An <see cref="T:System.Data.Metadata.Edm.EdmType" /> object that represents the built-in type in the EDM.</returns>
      <param name="builtInTypeKind">One of the <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> values.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataItem.GetGeneralFacetDescriptions">
      <summary>Returns the list of the general facet descriptions for a specified type.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> object that represents the list of the general facet descriptions for a specified type.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.MetadataItem.MetadataProperties">
      <summary>Gets the list of properties of the current type.</summary>
      <returns>A collection of type <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" /> that contains the list of properties of the current type.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.MetadataProperty">
      <summary>Represents a metadata attribute for an item in the ADO.NET metadata hierarchy. </summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.MetadataProperty.BuiltInTypeKind">
      <summary>Gets the built-in type kind for this <see cref="T:System.Data.Metadata.Edm.MetadataProperty" />.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> object that represents the built-in type kind for this <see cref="T:System.Data.Metadata.Edm.MetadataProperty" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.MetadataProperty.Name">
      <summary>Gets the name of this <see cref="T:System.Data.Metadata.Edm.MetadataProperty" />.</summary>
      <returns>The name of this <see cref="T:System.Data.Metadata.Edm.MetadataProperty" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.MetadataProperty.PropertyKind">
      <summary>Gets the value of this <see cref="T:System.Data.Metadata.Edm.PropertyKind" />.</summary>
      <returns>The value of this <see cref="T:System.Data.Metadata.Edm.PropertyKind" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.MetadataProperty.TypeUsage">
      <summary>Gets the instance of the <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> class that contains both the type of this <see cref="T:System.Data.Metadata.Edm.MetadataProperty" /> and facets for the type. </summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> object that contains both the type of this <see cref="T:System.Data.Metadata.Edm.MetadataProperty" /> and facets for the type.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.MetadataProperty.Value">
      <summary>Gets the value of this <see cref="T:System.Data.Metadata.Edm.MetadataProperty" />.</summary>
      <returns>The value of this <see cref="T:System.Data.Metadata.Edm.MetadataProperty" />.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.MetadataWorkspace">
      <summary>Represents the ADO.NET metadata runtime service component that provides support for retrieving metadata from various sources.</summary>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> class.</summary>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> class. </summary>
      <param name="paths">Paths to workspace metadata.</param>
      <param name="assembliesToConsider">Names of assemblies used to construct workspace.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.ClearCache">
      <summary>Clears all the metadata cache entries.</summary>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetEdmSpaceType(System.Data.Metadata.Edm.StructuralType)">
      <summary>Returns a <see cref="T:System.Data.Metadata.Edm.StructuralType" /> object that represents the <see cref="T:System.Data.Metadata.Edm.EdmType" /> that matches the type supplied by the parameter <paramref name="objectSpaceType" />. </summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.StructuralType" /> object that represents the <see cref="T:System.Data.Metadata.Edm.EdmType" />. If there is no matched type, this method returns null.</returns>
      <param name="objectSpaceType">A <see cref="T:System.Data.Metadata.Edm.StructuralType" /> that supplies the type in the object space.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetEntityContainer(System.String,System.Boolean,System.Data.Metadata.Edm.DataSpace)">
      <summary>Returns an <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> object by using the specified entity container name and the data model.</summary>
      <returns>If there is no entity container, this method returns null; otherwise, it returns the first entity container.</returns>
      <param name="name">The name of the entity container.</param>
      <param name="ignoreCase">true to perform the case-insensitive search; otherwise, false.</param>
      <param name="dataSpace">The conceptual model on which the entity container is searched.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetEntityContainer(System.String,System.Data.Metadata.Edm.DataSpace)">
      <summary>Returns an <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> object by using the specified entity container name and the data model.</summary>
      <returns>If there is no entity container, this method returns null; otherwise, it returns the first entity container.</returns>
      <param name="name">The name of the entity container.</param>
      <param name="dataSpace">The conceptual model on which the entity container is searched.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetFunctions(System.String,System.String,System.Data.Metadata.Edm.DataSpace)">
      <summary>Returns all the overloads of the functions by using the specified name, namespace name, and data model.</summary>
      <returns>A collection of type <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> that contains all the functions that match the specified name in a given namespace and a data model.</returns>
      <param name="name">The name of the function.</param>
      <param name="namespaceName">The namespace of the function.</param>
      <param name="dataSpace">The conceptual model in which the functions are searched.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetFunctions(System.String,System.String,System.Data.Metadata.Edm.DataSpace,System.Boolean)">
      <summary>Returns all the overloads of the functions by using the specified function name, namespace name, and data model.</summary>
      <returns>A collection of type <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> that contains all the functions that match the specified name in the given namespace and the data model.</returns>
      <param name="name">The name of the function.</param>
      <param name="namespaceName">The namespace of the function.</param>
      <param name="dataSpace">The conceptual model in which the functions are searched.</param>
      <param name="ignoreCase">true to perform the case-insensitive search; otherwise, false.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetItem``1(System.String,System.Boolean,System.Data.Metadata.Edm.DataSpace)">
      <summary>Returns an item by using the specified identity and the data model.</summary>
      <returns>The item that matches the given identity in the specified data model.</returns>
      <param name="identity">The identity of the item.</param>
      <param name="ignoreCase">true to perform the case-insensitive search; otherwise, false.</param>
      <param name="dataSpace">The conceptual model on which the item is searched.</param>
      <typeparam name="T">The type returned by the method.</typeparam>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetItem``1(System.String,System.Data.Metadata.Edm.DataSpace)">
      <summary>Returns an item by using the specified identity and the data model.</summary>
      <returns>The item that matches the given identity in the specified data model.</returns>
      <param name="identity">The identity of the item.</param>
      <param name="dataSpace">The conceptual model in which the item is searched.</param>
      <typeparam name="T">The type returned by the method.</typeparam>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetItemCollection(System.Data.Metadata.Edm.DataSpace)">
      <summary>Gets <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> items.</summary>
      <returns>
        <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> items.</returns>
      <param name="dataSpace">T:System.Data.Metadata.Edm.DataSpace from which to retrieve items.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetItems``1(System.Data.Metadata.Edm.DataSpace)">
      <summary>Gets all the items in the specified data model.</summary>
      <returns>A collection of type <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> that contains all the items in the specified data model.</returns>
      <param name="dataSpace">The conceptual model for which the list of items is needed.</param>
      <typeparam name="T">The type returned by the method.</typeparam>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetItems(System.Data.Metadata.Edm.DataSpace)">
      <summary>Gets all the items in the specified data model.</summary>
      <returns>A collection of type <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> that contains all the items in the specified data model.</returns>
      <param name="dataSpace">The conceptual model for which the list of items is needed.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetObjectSpaceType(System.Data.Metadata.Edm.StructuralType)">
      <summary>Returns a <see cref="T:System.Data.Metadata.Edm.StructuralType" /> object that represents the object space type that matches the type supplied by the parameter <paramref name="edmSpaceType" />.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.StructuralType" /> object that represents the Object space type. If there is no matched type, this method returns null.</returns>
      <param name="edmSpaceType">A <see cref="T:System.Data.Metadata.Edm.StructuralType" /> object that represents the <see cref="T:System.Data.Metadata.Edm.EdmType" />.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetPrimitiveTypes(System.Data.Metadata.Edm.DataSpace)">
      <summary>Returns the list of primitive types in the specified data model.</summary>
      <returns>A collection of type <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> that contains all the primitive types in the specified data model.</returns>
      <param name="dataSpace">The data model for which you need the list of primitive types.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetRequiredOriginalValueMembers(System.Data.Metadata.Edm.EntitySetBase,System.Data.Metadata.Edm.EntityTypeBase)">
      <summary>Gets original value members from an entity set and entity type.</summary>
      <returns>The original value members from an entity set and entity type.</returns>
      <param name="entitySet">Entity set from which to retrieve original values.</param>
      <param name="entityType">Entity type of which to retrieve original values.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetType(System.String,System.String,System.Boolean,System.Data.Metadata.Edm.DataSpace)">
      <summary>Returns an <see cref="T:System.Data.Metadata.Edm.EdmType" /> object by using the specified type name, namespace name, and data model.</summary>
      <returns>An <see cref="T:System.Data.Metadata.Edm.EdmType" /> object.</returns>
      <param name="name">The name of the type.</param>
      <param name="namespaceName">The namespace of the type.</param>
      <param name="ignoreCase">true to perform the case-insensitive search; otherwise, false.</param>
      <param name="dataSpace">The conceptual model on which the type is searched.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetType(System.String,System.String,System.Data.Metadata.Edm.DataSpace)">
      <summary>Returns an <see cref="T:System.Data.Metadata.Edm.EdmType" /> object by using the specified type name, namespace name, and data model.</summary>
      <returns>An <see cref="T:System.Data.Metadata.Edm.EdmType" /> object that represents the type that matches the given type name and the namespace name in the specified data model. If there is no matched type, this method returns null.</returns>
      <param name="name">The name of the type.</param>
      <param name="namespaceName">The namespace of the type.</param>
      <param name="dataSpace">The conceptual model on which the type is searched.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.LoadFromAssembly(System.Reflection.Assembly)">
      <summary>Loads metadata from the given assembly.</summary>
      <param name="assembly">The assembly from which the metadata will be loaded.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.LoadFromAssembly(System.Reflection.Assembly,System.Action{System.String})">
      <summary>Loads metadata from the given assembly.</summary>
      <param name="assembly">The assembly from which the metadata will be loaded.</param>
      <param name="logLoadMessage">The delegate for logging the load messages.</param>
    </member>
    <member name="F:System.Data.Metadata.Edm.MetadataWorkspace.MaximumEdmVersionSupported">
      <summary>Represents the maximum Entity Data Model (EDM) version supported by the Entity Framework runtime.</summary>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.RegisterItemCollection(System.Data.Metadata.Edm.ItemCollection)">
      <summary>Registers the item collection with each associated data model. </summary>
      <param name="collection">The output parameter collection that needs to be filled up.</param>
      <exception cref="T:System.ArgumentNullException">The collection argument is null.</exception>
      <exception cref="T:System.InvalidOperationException">The specified data model has already a registered an item collection.</exception>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.TryGetEdmSpaceType(System.Data.Metadata.Edm.StructuralType,System.Data.Metadata.Edm.StructuralType@)">
      <summary>Returns a <see cref="T:System.Data.Metadata.Edm.StructuralType" /> object via the out parameter <paramref name="edmSpaceType" /> that represents the <see cref="T:System.Data.Metadata.Edm.EdmType" /> that matches the type supplied by the parameter <paramref name="objectSpaceType" />.</summary>
      <returns>true if there is a type that matches the search criteria; otherwise, false.</returns>
      <param name="objectSpaceType">A <see cref="T:System.Data.Metadata.Edm.StructuralType" /> object that represents the object space type.</param>
      <param name="edmSpaceType">A <see cref="T:System.Data.Metadata.Edm.StructuralType" /> object that represents the <see cref="T:System.Data.Metadata.Edm.EdmType" />.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.TryGetEntityContainer(System.String,System.Boolean,System.Data.Metadata.Edm.DataSpace,System.Data.Metadata.Edm.EntityContainer@)">
      <summary>Returns an <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> object by using the specified entity container name and the data model.</summary>
      <returns>An <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> object.</returns>
      <param name="name">The name of the entity container.</param>
      <param name="ignoreCase">true to perform the case-insensitive search; otherwise, false.</param>
      <param name="dataSpace">The conceptual model on which the entity container is searched.</param>
      <param name="entityContainer">When this method returns, contains an <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> object. If there is no entity container, this output parameter contains null; otherwise, it returns the first entity container.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.TryGetEntityContainer(System.String,System.Data.Metadata.Edm.DataSpace,System.Data.Metadata.Edm.EntityContainer@)">
      <summary>Returns an <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> object by using the specified entity container name and the data model.</summary>
      <returns>true if there is an entity container that matches the search criteria; otherwise, false.</returns>
      <param name="name">The name of the entity container.</param>
      <param name="dataSpace">The conceptual model on which the entity container is searched.</param>
      <param name="entityContainer">When this method returns, contains an <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> object. If there is no entity container, this output parameter contains null; otherwise, it returns the first entity container.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.TryGetItem``1(System.String,System.Boolean,System.Data.Metadata.Edm.DataSpace,``0@)">
      <summary>Returns an item by using the specified identity and the data model.</summary>
      <returns>true if there is an item that matches the search criteria; otherwise, false.</returns>
      <param name="identity">The identity of the item.</param>
      <param name="ignoreCase">true to perform the case-insensitive search; otherwise, false.</param>
      <param name="dataSpace">The conceptual model on which the item is searched.</param>
      <param name="item">When this method returns, contains a <see cref="T:System.Data.Metadata.Edm.GlobalIem" /> object.</param>
      <typeparam name="T">The type returned by the method.</typeparam>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.TryGetItem``1(System.String,System.Data.Metadata.Edm.DataSpace,``0@)">
      <summary>Returns an item by using the specified identity and the data model.</summary>
      <returns>true if there is an item that matches the search criteria; otherwise, false.</returns>
      <param name="identity">The identity of the item.</param>
      <param name="space">The conceptual model on which the item is searched.</param>
      <param name="item">When this method returns, contains a <see cref="T:System.Data.Metadata.Edm.GlobalItem" /> object.</param>
      <typeparam name="T">The type returned by the method.</typeparam>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.TryGetItemCollection(System.Data.Metadata.Edm.DataSpace,System.Data.Metadata.Edm.ItemCollection@)">
      <summary>Tests the retrieval of <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" />.</summary>
      <returns>true if the retrieval was successful; othewise, false.</returns>
      <param name="dataSpace">
        <see cref="T:System.Data.Metadata.Edm.DataSpace" /> from which to attempt retrieval of <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" />.</param>
      <param name="collection">Item collection.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.TryGetObjectSpaceType(System.Data.Metadata.Edm.StructuralType,System.Data.Metadata.Edm.StructuralType@)">
      <summary>Returns a <see cref="T:System.Data.Metadata.Edm.StructuralType" /> object via the out parameter <paramref name="objectSpaceType" /> that represents the type that matches the <see cref="T:System.Data.Metadata.Edm.EdmType" /> supplied by the parameter <paramref name="edmSpaceType" />.</summary>
      <returns>true if there is a type that matches the search criteria; otherwise, false.</returns>
      <param name="edmSpaceType">A <see cref="T:System.Data.Metadata.Edm.StructuralType" /> object that represents the <see cref="T:System.Data.Metadata.Edm.EdmType" />.</param>
      <param name="objectSpaceType">A <see cref="T:System.Data.Metadata.Edm.StructuralType" /> object that represents the object space type.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.TryGetType(System.String,System.String,System.Boolean,System.Data.Metadata.Edm.DataSpace,System.Data.Metadata.Edm.EdmType@)">
      <summary>Returns an <see cref="T:System.Data.Metadata.Edm.EdmType" /> object by using the specified type name, namespace name, and data model.</summary>
      <returns>true if there is a type that matches the search criteria; otherwise, false.</returns>
      <param name="name">The name of the type.</param>
      <param name="namespaceName">The namespace of the type.</param>
      <param name="ignoreCase">true to perform the case-insensitive search; otherwise, false.</param>
      <param name="dataSpace">The conceptual model on which the type is searched.</param>
      <param name="type">When this method returns, contains an <see cref="T:System.Data.Metadata.Edm.EdmType" /> object.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.TryGetType(System.String,System.String,System.Data.Metadata.Edm.DataSpace,System.Data.Metadata.Edm.EdmType@)">
      <summary>Returns an <see cref="T:System.Data.Metadata.Edm.EdmType" /> object by using the specified type name, namespace name, and data model.</summary>
      <returns>true if there is a type that matches the search criteria; otherwise, false.</returns>
      <param name="name">The name of the type.</param>
      <param name="namespaceName">The namespace of the type.</param>
      <param name="dataSpace">The conceptual model on which the type is searched.</param>
      <param name="type">When this method returns, contains an <see cref="T:System.Data.Metadata.Edm.EdmType" /> object.</param>
    </member>
    <member name="T:System.Data.Metadata.Edm.NavigationProperty">
      <summary>Represents the navigation from one entity type to another entity type in the conceptual model . </summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.NavigationProperty.BuiltInTypeKind">
      <summary>Gets the built-in type kind for this <see cref="T:System.Data.Metadata.Edm.NavigationProperty" />.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> object that represents the built-in type kind for this <see cref="T:System.Data.Metadata.Edm.NavigationProperty" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.NavigationProperty.FromEndMember">
      <summary>Gets the "from" relationship end member in this navigation.</summary>
      <returns>The "from" relationship end member in this navigation.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.NavigationProperty.GetDependentProperties">
      <summary>Gets the foreign key properties for a navigation property that is on the dependent end of a referential constraint.</summary>
      <returns>A collection of the foreign key properties.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.NavigationProperty.RelationshipType">
      <summary>Gets the relationship type that this navigation property operates on.</summary>
      <returns>The relationship type that this navigation property operates on.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.NavigationProperty.ToEndMember">
      <summary>Gets the "to" relationship end member of this navigation.</summary>
      <returns>The "to" relationship end member of this navigation.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.ObjectItemCollection">
      <summary>Loads metadata about the object data model. This class is derived from the <see cref="T:System.Data.Metadata.Edm.ItemCollection" /> class.</summary>
    </member>
    <member name="M:System.Data.Metadata.Edm.ObjectItemCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Metadata.Edm.ObjectItemCollection" /> class.</summary>
    </member>
    <member name="M:System.Data.Metadata.Edm.ObjectItemCollection.GetClrType(System.Data.Metadata.Edm.StructuralType)">
      <summary>Returns the CLR type that corresponds to the <see cref="T:System.Data.Metadata.Edm.StructuralType" /> supplied by the <paramref name="objectSpaceType" /> parameter.</summary>
      <returns>CLR type.</returns>
      <param name="objectSpaceType">A <see cref="T:System.Data.Metadata.Edm.StructuralType" /> that represents the object space type.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.ObjectItemCollection.GetItems``1">
      <summary>Returns the collection of items that are of type <paramref name="T" />.</summary>
      <returns>The collection of items that are of type <paramref name="T" />.</returns>
      <typeparam name="T">The type of the items to retrieve.</typeparam>
    </member>
    <member name="M:System.Data.Metadata.Edm.ObjectItemCollection.GetPrimitiveTypes">
      <summary>Returns a collection of the <see cref="T:System.Data.Metadata.Edm.PrimitiveType" /> objects.</summary>
      <returns>A collection of the <see cref="T:System.Data.Metadata.Edm.PrimitiveType" /> objects.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ObjectItemCollection.LoadFromAssembly(System.Reflection.Assembly)">
      <summary>Loads metadata from the given assembly.</summary>
      <param name="assembly">The assembly from which the metadata will be loaded.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.ObjectItemCollection.LoadFromAssembly(System.Reflection.Assembly,System.Data.Metadata.Edm.EdmItemCollection)">
      <summary>Loads metadata from the specified assembly.</summary>
      <param name="assembly">The assembly from which the metadata will be loaded.</param>
      <param name="edmItemCollection">The EDM metadata source for the O space metadata.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.ObjectItemCollection.LoadFromAssembly(System.Reflection.Assembly,System.Data.Metadata.Edm.EdmItemCollection,System.Action{System.String})">
      <summary>Loads metadata from the given assembly.</summary>
      <param name="assembly">The assembly from which the metadata will be loaded.</param>
      <param name="edmItemCollection">The EDM metadata source for the O space metadata.</param>
      <param name="logLoadMessage">The delegate to which log messages are sent.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.ObjectItemCollection.TryGetClrType(System.Data.Metadata.Edm.StructuralType,System.Type@)">
      <summary>Returns a CLR type corresponding to the <see cref="T:System.Data.Metadata.Edm.StructuralType" /> supplied by the <paramref name="objectSpaceType" /> parameter.</summary>
      <returns>true if there is a type that matches the search criteria; otherwise, false.</returns>
      <param name="objectSpaceType">A <see cref="T:System.Data.Metadata.Edm.StructuralType" /> that represents the object space type.</param>
      <param name="clrType">CLR type.</param>
    </member>
    <member name="T:System.Data.Metadata.Edm.OperationAction">
      <summary>Specifies the list of possible actions when the parent End of the <see cref="T:System.Data.Metadata.Edm.RelationshipType" /> is deleted. </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.OperationAction.None">
      <summary>Only a parent End can be deleted.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.OperationAction.Cascade">
      <summary>When a parent End is deleted, its associated child ends are deleted as well. </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.OperationAction.Restrict">
      <summary>A parent End cannot be deleted if it has one or more associated child ends.</summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.ParameterMode">
      <summary>Specifies the direction of a parameter.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.ParameterMode.In">
      <summary>An input parameter.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.ParameterMode.Out">
      <summary>An output parameter.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.ParameterMode.InOut">
      <summary>Both an input and an output parameter.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.ParameterMode.ReturnValue">
      <summary>A return value of the method.</summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.ParameterTypeSemantics">
      <summary>Specifies the type semantics that are used to resolve the function overloads. Each store provider must use these enumeration flags in the provider manifest file for every function definition. </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.ParameterTypeSemantics.AllowImplicitConversion">
      <summary>A flag indicating the implicit conversion between the given and the formal argument types. This is the default conversion type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.ParameterTypeSemantics.AllowImplicitPromotion">
      <summary>A flag indicating the type promotion between the given and the formal argument types.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.ParameterTypeSemantics.ExactMatchOnly">
      <summary>A flag indicating the usage of strict equivalence only.</summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.PrimitiveType">
      <summary>Describes the .NET Framework primitive types, conceptual model primitive types, and storage provider-specific primitive types.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.PrimitiveType.BuiltInTypeKind">
      <summary>Gets the built-in type kind for this <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> object that represents the built-in type kind for this <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.PrimitiveType.ClrEquivalentType">
      <summary>Returns an equivalent common language runtime (CLR) type of this <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />. Note that the <see cref="P:System.Data.Metadata.Edm.PrimitiveType.ClrEquivalentType" /> property always returns a non-nullable type value.</summary>
      <returns>A <see cref="T:System.Type" /> object that represents an equivalent common language runtime (CLR) type of this <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.PrimitiveType.FacetDescriptions">
      <summary>Gets the list of facet descriptions for this <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />.</summary>
      <returns>A collection of type <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> that contains the list of facet descriptions for this <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.PrimitiveType.GetEdmPrimitiveType">
      <summary>Returns the equivalent <see cref="T:System.Data.Metadata.Edm.EdmType" /> of this <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />. </summary>
      <returns>An <see cref="T:System.Data.Metadata.Edm.EdmType" /> object that is an equivalent of this <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.PrimitiveType.GetEdmPrimitiveType(System.Data.Metadata.Edm.PrimitiveTypeKind)">
      <summary>Returns the equivalent <see cref="T:System.Data.Metadata.Edm.EdmType" /> of a <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />.</summary>
      <returns>An <see cref="T:System.Data.Metadata.Edm.EdmType" /> object that is an equivalent of a specified <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />.</returns>
      <param name="primitiveTypeKind">A value of type <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.PrimitiveType.GetEdmPrimitiveTypes">
      <summary>Returns the list of primitive types.</summary>
      <returns>A collection of type <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> that contains the list of primitive types.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.PrimitiveType.PrimitiveTypeKind">
      <summary>Gets a <see cref="T:System.Data.Metadata.Edm.PrimitiveTypeKind" /> enumeration value that indicates a primitive type of this <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.PrimitiveTypeKind" /> enumeration value that indicates a primitive type of this <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.PrimitiveTypeKind">
      <summary>Specifies the kinds of all primitive types defined by the conceptual model. </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Binary">
      <summary>An enumeration member that indicates the Binary (EDM) type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Boolean">
      <summary>An enumeration member that indicates the Boolean (EDM) type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Byte">
      <summary>An enumeration member that indicates the Byte (EDM) type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.DateTime">
      <summary>An enumeration member that indicates the DateTime (EDM) type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Decimal">
      <summary>An enumeration member that indicates the Decimal (EDM)type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Double">
      <summary>An enumeration member that indicates the Double (EDM) type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Guid">
      <summary>An enumeration member that indicates the Guid (EDM) type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Single">
      <summary>An enumeration member that indicates the Single (EDM) type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.SByte">
      <summary>An enumeration member that indicates the SByte type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Int16">
      <summary>An enumeration member that indicates the Int16 (EDM) type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Int32">
      <summary>An enumeration member that indicates the Int32 (EDM) type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Int64">
      <summary>An enumeration member that indicates the Int64 (EDM) type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.String">
      <summary>An enumeration member that indicates the String (EDM) type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Time">
      <summary>An enumeration member that indicates the Time (EDM) type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.DateTimeOffset">
      <summary>An enumeration member that indicates the DateTimeOffset type.</summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.PropertyKind">
      <summary>Specifies the kinds of item attributes in the conceptual model. </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PropertyKind.System">
      <summary>An enumeration member indicating that an item attribute is System.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PropertyKind.Extended">
      <summary>An enumeration member indicating that an item attribute is Extended.</summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1">
      <summary>Represents a collection of members in the ADO.NET metadata hierarchy by providing a read-only collection with advanced lookup capabilities. This class is derived from the <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection" /> class. </summary>
      <typeparam name="T">The type of elements in the collection.</typeparam>
    </member>
    <member name="M:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Contains(System.String)">
      <summary>Determines whether the collection contains an item with the specified identity.</summary>
      <returns>true if the collection contains the item to be searched for; otherwise, false. The default is false.</returns>
      <param name="identity">The identity of the item.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.GetEnumerator">
      <summary>Returns an enumerator that can iterate through this collection.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator" /> that can be used to iterate through this <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.GetValue(System.String,System.Boolean)">
      <summary>Retrieves an item from this collection by using the specified identity.</summary>
      <returns>An item from this collection.</returns>
      <param name="identity">The identity of the item to be searched for.</param>
      <param name="ignoreCase">true to perform the case-insensitive search; otherwise, false. </param>
    </member>
    <member name="M:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.IndexOf(`0)">
      <summary>Returns the index of the specified value in this collection.</summary>
      <returns>The index of the specified value in this collection.</returns>
      <param name="value">A value to seek.</param>
    </member>
    <member name="P:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.IsReadOnly">
      <summary>Gets a value indicating whether this collection is read-only.</summary>
      <returns>true if this collection is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Item(System.String)">
      <summary>Gets an item from this collection by using the specified identity.</summary>
      <returns>An item from this collection.</returns>
      <param name="identity">The identity of the item to be searched for.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.TryGetValue(System.String,System.Boolean,`0@)">
      <summary>Retrieves an item from this collection by using the specified identity.</summary>
      <returns>true if there is an item that matches the search criteria; otherwise, false. </returns>
      <param name="identity">The identity of the item to be searched for.</param>
      <param name="ignoreCase">true to perform the case-insensitive search; otherwise, false. </param>
      <param name="item">When this method returns, this output parameter contains an item from the collection. If there is no matched item, this output parameter contains null.</param>
    </member>
    <member name="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator">
      <summary>Supports a simple iteration over the <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" /> collection. </summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.Current">
      <summary>Gets the member at the current position. </summary>
      <returns>The member at the current position.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.Dispose">
      <summary>Disposes of this enumerator.</summary>
    </member>
    <member name="M:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.MoveNext">
      <summary>Moves to the next member in the collection of type <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator" />.</summary>
      <returns>true if the enumerator is moved in the collection of type <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.EnumeratortaCollection" />; otherwise, false.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.Reset">
      <summary>Positions the enumerator before the first position in the collection of type <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" />.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Gets the member at the current position.</summary>
      <returns>The member at the current position.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.ReferentialConstraint">
      <summary>Describes the referential constraints on the relationships in a conceptual model.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.ReferentialConstraint.BuiltInTypeKind">
      <summary>Gets the built-in type kind for this <see cref="T:System.Data.Metadata.Edm.ReferentialConstraint" />.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> object that represents the built-in type kind for this <see cref="T:System.Data.Metadata.Edm.ReferentialConstraint" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.ReferentialConstraint.FromProperties">
      <summary>Gets the list of properties for the "from role" on which this <see cref="T:System.Data.Metadata.Edm.ReferentialConstraint" /> is defined.</summary>
      <returns>A collection of type <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" /> that contains the list of properties for "from role" on which this <see cref="T:System.Data.Metadata.Edm.ReferentialConstraint" /> is defined.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.ReferentialConstraint.FromRole">
      <summary>Gets the "from role" that takes part in this <see cref="T:System.Data.Metadata.Edm.ReferentialConstraint" />.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.RelationshipEndMember" /> object that represents the "from role" that takes part in this <see cref="T:System.Data.Metadata.Edm.ReferentialConstraint" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.ReferentialConstraint.ToProperties">
      <summary>Gets the list of properties for the "to role" on which this <see cref="T:System.Data.Metadata.Edm.ReferentialConstraint" /> is defined.</summary>
      <returns>A collection of type <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" /> that contains the list of properties for the "to role" on which this <see cref="T:System.Data.Metadata.Edm.ReferentialConstraint" /> is defined.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.ReferentialConstraint.ToRole">
      <summary>Gets the "to role" that takes part in this <see cref="T:System.Data.Metadata.Edm.ReferentialConstraint" />.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.RelationshipEndMember" /> object that represents the "to role" that takes part in this <see cref="T:System.Data.Metadata.Edm.ReferentialConstraint" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ReferentialConstraint.ToString">
      <summary>Returns the combination of the names of the <see cref="P:System.Data.Metadata.Edm.ReferentialConstraint.FromRole" /> and the <see cref="P:System.Data.Metadata.Edm.ReferentialConstraint.ToRole" />.</summary>
      <returns>The combination of the names of the <see cref="P:System.Data.Metadata.Edm.ReferentialConstraint.FromRole" /> and the <see cref="P:System.Data.Metadata.Edm.ReferentialConstraint.ToRole" />. </returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.RefType">
      <summary>Provides the address of an entity for operations that use the entity. You cannot define a <see cref="T:System.Data.Metadata.Edm.RefType" /> in a conceptual model schema explicitly.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.RefType.BuiltInTypeKind">
      <summary>Gets the built-in type kind for this <see cref="T:System.Data.Metadata.Edm.RefType" />.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> object that represents the built-in type kind for this <see cref="T:System.Data.Metadata.Edm.RefType" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.RefType.ElementType">
      <summary>Gets the entity type referenced by this <see cref="T:System.Data.Metadata.Edm.RefType" />.</summary>
      <returns>An <see cref="T:System.Data.Metadata.Edm.EntityTypeBase" /> object that represents the entity type referenced by this <see cref="T:System.Data.Metadata.Edm.RefType" />.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.RelationshipEndMember">
      <summary>Defines the End member for the <see cref="T:System.Data.Metadata.Edm.RelationshipType" />.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.RelationshipEndMember.DeleteBehavior">
      <summary>Gets the operational behavior of this relationship end member.</summary>
      <returns>One of the <see cref="T:System.Data.Metadata.Edm.OperationAction" /> values. The default is <see cref="P:System.Data.Metadata.Edm.OperationAction.None" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.RelationshipEndMember.GetEntityType">
      <summary>Access the EntityType of the EndMember in an association.</summary>
      <returns>The EntityType of the EndMember in an association.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.RelationshipEndMember.RelationshipMultiplicity">
      <summary>Gets the multiplicity of this relationship end member.</summary>
      <returns>One of the <see cref="T:System.Data.Metadata.Edm.RelationshipMultiplicity" /> values.  </returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.RelationshipMultiplicity">
      <summary>Represents the multiplicity information about the End of a relationship type. </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne">
      <summary>A lower bound is zero and an upper bound is one.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.RelationshipMultiplicity.One">
      <summary>A lower bound is one and an upper bound is one.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.RelationshipMultiplicity.Many">
      <summary>A lower bound is zero and an upper bound is null.</summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.RelationshipSet">
      <summary>Represents a relationship set in a conceptual model. </summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.RelationshipSet.BuiltInTypeKind">
      <summary>Gets the built-in type kind for this <see cref="T:System.Data.Metadata.Edm.RelationshipSet" />.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> object that represents the built-in type kind for this <see cref="T:System.Data.Metadata.Edm.RelationshipSet" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.RelationshipSet.ElementType">
      <summary>Gets the relationship type of this <see cref="T:System.Data.Metadata.Edm.RelationshipSet" />.</summary>
      <returns>An <see cref="T:System.Data.Metadata.Edm.RelationshipType" /> object that represents the relationship type of this <see cref="T:System.Data.Metadata.Edm.RelationshipSet" />.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.RelationshipType">
      <summary>Represents the base class for relationships in a conceptual model. </summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.RelationshipType.RelationshipEndMembers">
      <summary>Gets the list of ends for this relationship type. </summary>
      <returns>A collection of type <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" /> that contains the list of Ends for this relationship type.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.RowType">
      <summary>Describes a row, such as the result of a query. This class is derived from the <see cref="T:System.Data.Metadata.Edm.StructuralType" /> class. The structure of the row type depends on what database columns are projected in the query. The <see cref="T:System.Data.Metadata.Edm.RowType" /> can be useful in conceptual model functions.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.RowType.BuiltInTypeKind">
      <summary>Gets the built-in type kind for this <see cref="T:System.Data.Metadata.Edm.RowType" />.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> object that represents the built-in type kind for this <see cref="T:System.Data.Metadata.Edm.RowType" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.RowType.Properties">
      <summary>Gets the list of properties on this <see cref="T:System.Data.Metadata.Edm.RowType" />.</summary>
      <returns>A collection of type <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" /> that contains the list of properties on this <see cref="T:System.Data.Metadata.Edm.RowType" />.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.SimpleType">
      <summary>A base class that describes primitive types in a conceptual model.</summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.StoreGeneratedPattern">
      <summary>Represents an enumeration that specifies three options indicating whether the column in the  store schema definition language (SSDL) (.ssdl) needs a value during insert and update operations. ADO.NET reads the value of the column and then stores it in-memory cache.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.StoreGeneratedPattern.None">
      <summary>A value indicating that it is not a server generated property. This is the default value.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.StoreGeneratedPattern.Identity">
      <summary>A value is generated on insert and remains unchanged on update.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.StoreGeneratedPattern.Computed">
      <summary>A value is generated on both insert and update.</summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.StoreItemCollection">
      <summary>Loads metadata about the storage (database) model. The <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" /> loads metadata from store schema definition language (SSDL) files. This class is derived from the <see cref="T:System.Data.Metadata.Edm.ItemCollection" /> class. </summary>
    </member>
    <member name="M:System.Data.Metadata.Edm.StoreItemCollection.#ctor(System.Collections.Generic.IEnumerable{System.Xml.XmlReader})">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" /> class. </summary>
      <param name="xmlReaders">XML Reader used to create metadata.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.StoreItemCollection.#ctor(System.String[])">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" /> class.</summary>
      <param name="filePaths">Path to file used to create metadata.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.StoreItemCollection.GetPrimitiveTypes">
      <summary>Returns a collection of the <see cref="T:System.Data.Metadata.Edm.PrimitiveType" /> objects.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection" /> object that represents a collection of the <see cref="T:System.Data.Metadata.Edm.PrimitiveType" /> objects.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.StructuralType">
      <summary>A base type for all the types in a conceptual model that have members.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.StructuralType.Members">
      <summary>Gets the list of members on this type.</summary>
      <returns>A collection of type <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" /> that contains a set of members on this type. </returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.TypeUsage">
      <summary>Describes a type and a set of facets for that type. </summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.TypeUsage.BuiltInTypeKind">
      <summary>Gets the built-in type kind for this <see cref="T:System.Data.Metadata.Edm.TypeUsage" />.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> object that represents the built-in type kind for this <see cref="T:System.Data.Metadata.Edm.TypeUsage" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.CreateBinaryTypeUsage(System.Data.Metadata.Edm.PrimitiveType,System.Boolean)">
      <summary>Creates a <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> object to describe a binary type by using the specified facet values.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> object describing a binary type by using the specified facet values.</returns>
      <param name="primitiveType">A <see cref="T:System.Data.Metadata.Edm.PrimitiveType" /> for which the <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> object is created.</param>
      <param name="isFixedLength">true to set the length of the binary type to fixed; otherwise, false. </param>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.CreateBinaryTypeUsage(System.Data.Metadata.Edm.PrimitiveType,System.Boolean,System.Int32)">
      <summary>Creates a <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> object to describe a binary type by using the specified facet values.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> object describing a binary type by using the specified facet values.</returns>
      <param name="primitiveType">A <see cref="T:System.Data.Metadata.Edm.PrimitiveType" /> for which the <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> object is created.</param>
      <param name="isFixedLength">true to set the length of the binary type to fixed; otherwise, false.</param>
      <param name="maxLength">The maximum length of the binary type.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.CreateDateTimeOffsetTypeUsage(System.Data.Metadata.Edm.PrimitiveType,System.Nullable{System.Byte})">
      <summary>Creates a <see cref="T:System.Data.Metadata.Edm.DateTimeOffsetTypeUsage" /> object of the type that the parameters describe.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.DateTimeOffsetTypeUsage" /> object.</returns>
      <param name="primitiveType">The simple type that defines the units of measurement of the offset.</param>
      <param name="precision">The degree of granularity of the <see cref="T:System." />DateTimeOffset in fractions of a second, based on the number of decimal places supported. For example a precision of 3 means the granularity supported is milliseconds.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.CreateDateTimeTypeUsage(System.Data.Metadata.Edm.PrimitiveType,System.Nullable{System.Byte})">
      <summary>Creates a <see cref="T:System.Data.Metadata.Edm.DateTimeTypeUsage" /> object of the type that the parameters describe.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.DateTimeTypeUsage" /> object.</returns>
      <param name="primitiveType">The simple type that defines the units of measurement of the <see cref="T:System." />DateTime object.</param>
      <param name="precision">The degree of granularity of the <see cref="T:System." />DateTimeOffset in fractions of a second, based on the number of decimal places supported. For example a precision of 3 means the granularity supported is milliseconds.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.CreateDecimalTypeUsage(System.Data.Metadata.Edm.PrimitiveType)">
      <summary>Creates a <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> object to describe a decimal type with unbounded precision and scale facet values.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> object describing a decimal type with unbounded precision and scale facet values.</returns>
      <param name="primitiveType">A <see cref="T:System.Data.Metadata.Edm.PrimitiveType" /> for which the <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> object is created.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.CreateDecimalTypeUsage(System.Data.Metadata.Edm.PrimitiveType,System.Byte,System.Byte)">
      <summary>Creates a <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> object to describe a decimal type by using the specified facet values.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> object describing a decimal type by using the specified facet values.</returns>
      <param name="primitiveType">A <see cref="T:System.Data.Metadata.Edm.PrimitiveType" /> for which the <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> object is created.</param>
      <param name="precision">The precision of the decimal type as type <see cref="T:System.Byte" />.</param>
      <param name="scale">The scale of the decimal type as type <see cref="T:System.Byte" />.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.CreateDefaultTypeUsage(System.Data.Metadata.Edm.EdmType)">
      <summary>Creates a <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> object with the specified conceptual model type.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> object with the default facet values for the specified <see cref="T:System.Data.Metadata.Edm.EdmType" />.</returns>
      <param name="edmType">A <see cref="T:System.Data.Metadata.Edm.EdmType" /> for which the <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> object is created.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.CreateStringTypeUsage(System.Data.Metadata.Edm.PrimitiveType,System.Boolean,System.Boolean)">
      <summary>Creates a <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> object to describe a string type by using the specified facet values and unbounded MaxLength.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> object describing a string type by using the specified facet values and unbounded MaxLength.</returns>
      <param name="primitiveType">A <see cref="T:System.Data.Metadata.Edm.PrimitiveType" /> for which the <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> object is created.</param>
      <param name="isUnicode">true to set the character-encoding standard of the string type to Unicode; otherwise, false.</param>
      <param name="isFixedLength">true to set the length of the string type to fixed; otherwise, false</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.CreateStringTypeUsage(System.Data.Metadata.Edm.PrimitiveType,System.Boolean,System.Boolean,System.Int32)">
      <summary>Creates a <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> object to describe a string type by using the specified facet values.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> object describing a string type by using the specified facet values.</returns>
      <param name="primitiveType">A <see cref="T:System.Data.Metadata.Edm.PrimitiveType" /> for which the <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> object is created.</param>
      <param name="isUnicode">true to set the character-encoding standard of the string type to Unicode; otherwise, false.</param>
      <param name="isFixedLength">true to set the character-encoding standard of the string type to Unicode; otherwise, false.</param>
      <param name="maxLength">true to set the length of the string type to fixed; otherwise, false.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.CreateTimeTypeUsage(System.Data.Metadata.Edm.PrimitiveType,System.Nullable{System.Byte})">
      <summary>Creates a <see cref="T:System.Data.Metadata.Edm.TimeTypeUsage" /> object of the type that the parameters describe.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.TimeTypeUsage" /> object.</returns>
      <param name="primitiveType">The simple type that defines the units of measurement of the <see cref="T:System." />DateTime object.</param>
      <param name="precision">The degree of granularity of the <see cref="T:System." />DateTimeOffset in fractions of a second, based on the number of decimal places supported. For example a precision of 3 means the granularity supported is milliseconds.</param>
    </member>
    <member name="P:System.Data.Metadata.Edm.TypeUsage.EdmType">
      <summary>Gets the type information described by this <see cref="T:System.Data.Metadata.Edm.TypeUsage" />.</summary>
      <returns>An <see cref="T:System.Data.Metadata.Edm.EdmType" /> object that represents the type information described by this <see cref="T:System.Data.Metadata.Edm.TypeUsage" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.TypeUsage.Facets">
      <summary>Gets the list of facets for the type that is described by this <see cref="T:System.Data.Metadata.Edm.TypeUsage" />.</summary>
      <returns>A collection of type <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" /> that contains the list of facets for the type that is described by this <see cref="T:System.Data.Metadata.Edm.TypeUsage" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.IsSubtypeOf(System.Data.Metadata.Edm.TypeUsage)">
      <summary>Checks whether this <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> is a subtype of the specified <see cref="T:System.Data.Metadata.Edm.TypeUsage" />. </summary>
      <returns>true if this <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> is a subtype of the specified <see cref="T:System.Data.Metadata.Edm.TypeUsage" />; otherwise, false. </returns>
      <param name="typeUsage">The <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> object to be checked.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.ToString">
      <summary>Returns the full name of the type described by this <see cref="T:System.Data.Metadata.Edm.TypeUsage" />.</summary>
      <returns>The full name of the type described by this <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> as string.</returns>
    </member>
    <member name="T:System.Data.Objects.CompiledQuery">
      <summary>Represents a cached LINQ to Entities query.</summary>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``10(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}})">
      <summary>Creates a new delegate that represents the compiled LINQ to Entities query.</summary>
      <returns>
        <see cref="T:System.Func`10" />, a generic delegate that represents the compiled LINQ to Entities query.</returns>
      <param name="query">The lambda expression to compile.</param>
      <typeparam name="TArg0">A type derived from <see cref="T:System.Data.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg1 " />must be a primitive type.</typeparam>
      <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg2 " />must be a primitive type.</typeparam>
      <typeparam name="TArg3">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg3 " />must be a primitive type.</typeparam>
      <typeparam name="TArg4">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg4 " />must be a primitive type.</typeparam>
      <typeparam name="TArg5">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg5 " />must be a primitive type.</typeparam>
      <typeparam name="TArg6">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg6 " />must be a primitive type.</typeparam>
      <typeparam name="TArg7">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg7 " />must be a primitive type.</typeparam>
      <typeparam name="TArg8">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg8 " />must be a primitive type.</typeparam>
      <typeparam name="TResult">The type <paramref name="T" /> of the query results returned by executing the delegate returned by the <see cref="M:System.Data.Objects.CompiledQuery.Compile``10(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}})" /> method.</typeparam>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``11(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10}})">
      <summary>Creates a new delegate that represents the compiled LINQ to Entities query.</summary>
      <returns>
        <see cref="T:System.Func`11" />, a generic delegate that represents the compiled LINQ to Entities query.</returns>
      <param name="query">The lambda expression to compile.</param>
      <typeparam name="TArg0">A type derived from <see cref="T:System.Data.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg1 " />must be a primitive type.</typeparam>
      <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg2 " />must be a primitive type.</typeparam>
      <typeparam name="TArg3">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg3 " />must be a primitive type.</typeparam>
      <typeparam name="TArg4">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg4 " />must be a primitive type.</typeparam>
      <typeparam name="TArg5">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg5 " />must be a primitive type.</typeparam>
      <typeparam name="TArg6">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg6 " />must be a primitive type.</typeparam>
      <typeparam name="TArg7">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg7 " />must be a primitive type.</typeparam>
      <typeparam name="TArg8">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg8 " />must be a primitive type.</typeparam>
      <typeparam name="TArg9">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg9 " />must be a primitive type.</typeparam>
      <typeparam name="TResult">The type <paramref name="T" /> of the query results returned by executing the delegate returned by the <see cref="M:System.Data.Objects.CompiledQuery.Compile``11(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10}})" /> method.</typeparam>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``12(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11}})">
      <summary>Creates a new delegate that represents the compiled LINQ to Entities query.</summary>
      <returns>
        <see cref="T:System.Func`12" />, a generic delegate that represents the compiled LINQ to Entities query.</returns>
      <param name="query">The lambda expression to compile.</param>
      <typeparam name="TArg0">A type derived from <see cref="T:System.Data.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg1 " />must be a primitive type.</typeparam>
      <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg2 " />must be a primitive type.</typeparam>
      <typeparam name="TArg3">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg3 " />must be a primitive type.</typeparam>
      <typeparam name="TArg4">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg4 " />must be a primitive type.</typeparam>
      <typeparam name="TArg5">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg5 " />must be a primitive type.</typeparam>
      <typeparam name="TArg6">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg6 " />must be a primitive type.</typeparam>
      <typeparam name="TArg7">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg7 " />must be a primitive type.</typeparam>
      <typeparam name="TArg8">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg8 " />must be a primitive type.</typeparam>
      <typeparam name="TArg9">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg9 " />must be a primitive type.</typeparam>
      <typeparam name="TArg10">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg10 " />must be a primitive type.</typeparam>
      <typeparam name="TResult">The type <paramref name="T" /> of the query results returned by executing the delegate returned by the <see cref="M:System.Data.Objects.CompiledQuery.Compile``12(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11}})" /> method.</typeparam>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``13(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12}})">
      <summary>Creates a new delegate that represents the compiled LINQ to Entities query.</summary>
      <returns>
        <see cref="T:System.Func`13" />, a generic delegate that represents the compiled LINQ to Entities query.</returns>
      <param name="query">The lambda expression to compile.</param>
      <typeparam name="TArg0">A type derived from <see cref="T:System.Data.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg1 " />must be a primitive type.</typeparam>
      <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg2 " />must be a primitive type.</typeparam>
      <typeparam name="TArg3">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg3 " />must be a primitive type.</typeparam>
      <typeparam name="TArg4">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg4 " />must be a primitive type.</typeparam>
      <typeparam name="TArg5">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg5 " />must be a primitive type.</typeparam>
      <typeparam name="TArg6">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg6 " />must be a primitive type.</typeparam>
      <typeparam name="TArg7">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg7 " />must be a primitive type.</typeparam>
      <typeparam name="TArg8">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg8 " />must be a primitive type.</typeparam>
      <typeparam name="TArg9">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg9 " />must be a primitive type.</typeparam>
      <typeparam name="TArg10">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg10 " />must be a primitive type.</typeparam>
      <typeparam name="TArg11">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg11 " />must be a primitive type.</typeparam>
      <typeparam name="TResult">The type <paramref name="T" /> of the query results returned by executing the delegate returned by the <see cref="M:System.Data.Objects.CompiledQuery.Compile``13(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12}})" /> method.</typeparam>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``14(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13}})">
      <summary>Creates a new delegate that represents the compiled LINQ to Entities query.</summary>
      <returns>
        <see cref="T:System.Func`14" />, a generic delegate that represents the compiled LINQ to Entities query.</returns>
      <param name="query">The lambda expression to compile.</param>
      <typeparam name="TArg0">A type derived from <see cref="T:System.Data.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg1 " />must be a primitive type.</typeparam>
      <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg2 " />must be a primitive type.</typeparam>
      <typeparam name="TArg3">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg3 " />must be a primitive type.</typeparam>
      <typeparam name="TArg4">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg4 " />must be a primitive type.</typeparam>
      <typeparam name="TArg5">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg5 " />must be a primitive type.</typeparam>
      <typeparam name="TArg6">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg6 " />must be a primitive type.</typeparam>
      <typeparam name="TArg7">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg7 " />must be a primitive type.</typeparam>
      <typeparam name="TArg8">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg8 " />must be a primitive type.</typeparam>
      <typeparam name="TArg9">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg9 " />must be a primitive type.</typeparam>
      <typeparam name="TArg10">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg10 " />must be a primitive type.</typeparam>
      <typeparam name="TArg11">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg11 " />must be a primitive type.</typeparam>
      <typeparam name="TArg12">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg12 " />must be a primitive type.</typeparam>
      <typeparam name="TResult">The type <paramref name="T" /> of the query results returned by executing the delegate returned by the <see cref="M:System.Data.Objects.CompiledQuery.Compile``14(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13}})" /> method.</typeparam>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``15(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14}})">
      <summary>Creates a new delegate that represents the compiled LINQ to Entities query.</summary>
      <returns>
        <see cref="T:System.Func`15" />, a generic delegate that represents the compiled LINQ to Entities query.</returns>
      <param name="query">The lambda expression to compile.</param>
      <typeparam name="TArg0">A type derived from <see cref="T:System.Data.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg1 " />must be a primitive type.</typeparam>
      <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg2 " />must be a primitive type.</typeparam>
      <typeparam name="TArg3">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg3 " />must be a primitive type.</typeparam>
      <typeparam name="TArg4">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg4 " />must be a primitive type.</typeparam>
      <typeparam name="TArg5">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg5 " />must be a primitive type.</typeparam>
      <typeparam name="TArg6">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg6 " />must be a primitive type.</typeparam>
      <typeparam name="TArg7">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg7 " />must be a primitive type.</typeparam>
      <typeparam name="TArg8">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg8 " />must be a primitive type.</typeparam>
      <typeparam name="TArg9">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg9 " />must be a primitive type.</typeparam>
      <typeparam name="TArg10">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg10 " />must be a primitive type.</typeparam>
      <typeparam name="TArg11">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg11 " />must be a primitive type.</typeparam>
      <typeparam name="TArg12">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg12 " />must be a primitive type.</typeparam>
      <typeparam name="TArg13">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg13 " />must be a primitive type.</typeparam>
      <typeparam name="TResult">The type <paramref name="T" /> of the query results returned by executing the delegate returned by the <see cref="M:System.Data.Objects.CompiledQuery.Compile``15(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14}})" /> method.</typeparam>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``16(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15}})">
      <summary>Creates a new delegate that represents the compiled LINQ to Entities query.</summary>
      <returns>
        <see cref="T:System.Func`16" />, a generic delegate that represents the compiled LINQ to Entities query.</returns>
      <param name="query">The lambda expression to compile.</param>
      <typeparam name="TArg0">A type derived from <see cref="T:System.Data.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg1 " />must be a primitive type.</typeparam>
      <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg2 " />must be a primitive type.</typeparam>
      <typeparam name="TArg3">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg3 " />must be a primitive type.</typeparam>
      <typeparam name="TArg4">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg4 " />must be a primitive type.</typeparam>
      <typeparam name="TArg5">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg5 " />must be a primitive type.</typeparam>
      <typeparam name="TArg6">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg6 " />must be a primitive type.</typeparam>
      <typeparam name="TArg7">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg7 " />must be a primitive type.</typeparam>
      <typeparam name="TArg8">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg8 " />must be a primitive type.</typeparam>
      <typeparam name="TArg9">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg9 " />must be a primitive type.</typeparam>
      <typeparam name="TArg10">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg10 " />must be a primitive type.</typeparam>
      <typeparam name="TArg11">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg11 " />must be a primitive type.</typeparam>
      <typeparam name="TArg12">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg12 " />must be a primitive type.</typeparam>
      <typeparam name="TArg13">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg13 " />must be a primitive type.</typeparam>
      <typeparam name="TArg14">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg14 " />must be a primitive type.</typeparam>
      <typeparam name="TResult">The type <paramref name="T" /> of the query results returned by executing the delegate returned by the <see cref="M:System.Data.Objects.CompiledQuery.Compile``16(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15}})" /> method.</typeparam>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``17(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16}})">
      <summary>Creates a new delegate that represents the compiled LINQ to Entities query.</summary>
      <returns>
        <see cref="T:System.Func`17" />, a generic delegate that represents the compiled LINQ to Entities query.</returns>
      <param name="query">The lambda expression to compile.</param>
      <typeparam name="TArg0">A type derived from <see cref="T:System.Data.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg1 " />must be a primitive type.</typeparam>
      <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg2 " />must be a primitive type.</typeparam>
      <typeparam name="TArg3">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg3 " />must be a primitive type.</typeparam>
      <typeparam name="TArg4">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg4 " />must be a primitive type.</typeparam>
      <typeparam name="TArg5">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg5 " />must be a primitive type.</typeparam>
      <typeparam name="TArg6">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg6 " />must be a primitive type.</typeparam>
      <typeparam name="TArg7">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg7 " />must be a primitive type.</typeparam>
      <typeparam name="TArg8">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg8 " />must be a primitive type.</typeparam>
      <typeparam name="TArg9">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg9 " />must be a primitive type.</typeparam>
      <typeparam name="TArg10">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg10 " />must be a primitive type.</typeparam>
      <typeparam name="TArg11">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg11 " />must be a primitive type.</typeparam>
      <typeparam name="TArg12">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg12 " />must be a primitive type.</typeparam>
      <typeparam name="TArg13">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg13 " />must be a primitive type.</typeparam>
      <typeparam name="TArg14">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg14 " />must be a primitive type.</typeparam>
      <typeparam name="TArg15">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg15 " />must be a primitive type.</typeparam>
      <typeparam name="TResult">The type <paramref name="T" /> of the query results returned by executing the delegate returned by the <see cref="M:System.Data.Objects.CompiledQuery.Compile``17(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16}})" /> method.</typeparam>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Creates a new delegate that represents the compiled LINQ to Entities query.</summary>
      <returns>
        <see cref="T:System.Func`2" />, a generic delegate that represents the compiled LINQ to Entities query.</returns>
      <param name="query">The lambda expression to compile.</param>
      <typeparam name="TArg0">A type derived from <see cref="T:System.Data.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TResult">The type <paramref name="T" /> of the query results returned by executing the delegate returned by the <see cref="M:System.Data.Objects.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>Creates a new delegate that represents the compiled LINQ to Entities query.</summary>
      <returns>
        <see cref="T:System.Func`3" />, a generic delegate that represents the compiled LINQ to Entities query.</returns>
      <param name="query">The lambda expression to compile.</param>
      <typeparam name="TArg0">A type derived from <see cref="T:System.Data.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg1" />must be a primitive type.</typeparam>
      <typeparam name="TResult">The type <paramref name="T" /> of the query results returned by executing the delegate returned by the <see cref="M:System.Data.Objects.CompiledQuery.Compile``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})" /> method.</typeparam>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})">
      <summary>Creates a new delegate that represents the compiled LINQ to Entities query.</summary>
      <returns>
        <see cref="T:System.Func`4" />, a generic delegate that represents the compiled LINQ to Entities query.</returns>
      <param name="query">The lambda expression to compile.</param>
      <typeparam name="TArg0">A type derived from <see cref="T:System.Data.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg1 " />must be a primitive type.</typeparam>
      <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg2 " />must be a primitive type.</typeparam>
      <typeparam name="TResult">The type <paramref name="T" /> of the query results returned by executing the delegate returned by the <see cref="M:System.Data.Objects.CompiledQuery.Compile``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})" /> method.</typeparam>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})">
      <summary>Creates a new delegate that represents the compiled LINQ to Entities query.</summary>
      <returns>
        <see cref="T:System.Func`5" />, a generic delegate that represents the compiled LINQ to Entities query.</returns>
      <param name="query">The lambda expression to compile.</param>
      <typeparam name="TArg0">A type derived from <see cref="T:System.Data.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg1 " />must be a primitive type.</typeparam>
      <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg2 " />must be a primitive type.</typeparam>
      <typeparam name="TArg3">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg3 " />must be a primitive type.</typeparam>
      <typeparam name="TResult">The type <paramref name="T" /> of the query results returned by executing the delegate returned by the <see cref="M:System.Data.Objects.CompiledQuery.Compile``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})" />  method.</typeparam>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}})">
      <summary>Creates a new delegate that represents the compiled LINQ to Entities query.</summary>
      <returns>
        <see cref="T:System.Func`6" />, a generic delegate that represents the compiled LINQ to Entities query.</returns>
      <param name="query">The lambda expression to compile.</param>
      <typeparam name="TArg0">A type derived from <see cref="T:System.Data.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg1 " />must be a primitive type.</typeparam>
      <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg2 " />must be a primitive type.</typeparam>
      <typeparam name="TArg3">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg3 " />must be a primitive type.</typeparam>
      <typeparam name="TArg4">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg4 " />must be a primitive type.</typeparam>
      <typeparam name="TResult">The type <paramref name="T" /> of the query results returned by executing the delegate returned by the <see cref="M:System.Data.Objects.CompiledQuery.Compile``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}})" /> method.</typeparam>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}})">
      <summary>Creates a new delegate that represents the compiled LINQ to Entities query.</summary>
      <returns>
        <see cref="T:System.Func`7" />, a generic delegate that represents the compiled LINQ to Entities query.</returns>
      <param name="query">The lambda expression to compile.</param>
      <typeparam name="TArg0">A type derived from <see cref="T:System.Data.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg1 " />must be a primitive type.</typeparam>
      <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg2 " />must be a primitive type.</typeparam>
      <typeparam name="TArg3">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg3 " />must be a primitive type.</typeparam>
      <typeparam name="TArg4">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg4 " />must be a primitive type.</typeparam>
      <typeparam name="TArg5">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg5 " />must be a primitive type.</typeparam>
      <typeparam name="TResult">The type <paramref name="T" /> of the query results returned by executing the delegate returned by the <see cref="M:System.Data.Objects.CompiledQuery.Compile``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}})" /> method.</typeparam>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``8(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7}})">
      <summary>Creates a new delegate that represents the compiled LINQ to Entities query.</summary>
      <returns>
        <see cref="T:System.Func`8" />, a generic delegate that represents the compiled LINQ to Entities query.</returns>
      <param name="query">The lambda expression to compile.</param>
      <typeparam name="TArg0">A type derived from <see cref="T:System.Data.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg1 " />must be a primitive type.</typeparam>
      <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg2 " />must be a primitive type.</typeparam>
      <typeparam name="TArg3">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg3 " />must be a primitive type.</typeparam>
      <typeparam name="TArg4">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg4 " />must be a primitive type.</typeparam>
      <typeparam name="TArg5">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg5 " />must be a primitive type.</typeparam>
      <typeparam name="TArg6">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg6 " />must be a primitive type.</typeparam>
      <typeparam name="TResult">The type <paramref name="T" /> of the query results returned by executing the delegate returned by the <see cref="M:System.Data.Objects.CompiledQuery.Compile``8(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7}})" /> method.</typeparam>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``9(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8}})">
      <summary>Creates a new delegate that represents the compiled LINQ to Entities query.</summary>
      <returns>
        <see cref="T:System.Func`9" />, a generic delegate that represents the compiled LINQ to Entities query.</returns>
      <param name="query">The lambda expression to compile.</param>
      <typeparam name="TArg0">A type derived from <see cref="T:System.Data.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg1 " />must be a primitive type.</typeparam>
      <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg2 " />must be a primitive type.</typeparam>
      <typeparam name="TArg3">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg3 " />must be a primitive type.</typeparam>
      <typeparam name="TArg4">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg4 " />must be a primitive type.</typeparam>
      <typeparam name="TArg5">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg5 " />must be a primitive type.</typeparam>
      <typeparam name="TArg6">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg6 " />must be a primitive type.</typeparam>
      <typeparam name="TArg7">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg7 " />must be a primitive type.</typeparam>
      <typeparam name="TResult">The type <paramref name="T" /> of the query results returned by executing the delegate returned by the <see cref="M:System.Data.Objects.CompiledQuery.Compile``9(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8}})" /> method.</typeparam>
    </member>
    <member name="T:System.Data.Objects.CurrentValueRecord">
      <summary>Provides access to the current values of object data. </summary>
    </member>
    <member name="T:System.Data.Objects.DbUpdatableDataRecord">
      <summary>Provides access to the original values of object data. The <see cref="T:System.Data.Objects.DbUpdatableDataRecord" /> implements methods that allow updates to the original values of an object.</summary>
    </member>
    <member name="P:System.Data.Objects.DbUpdatableDataRecord.DataRecordInfo">
      <summary>Gets data record information.</summary>
      <returns>A <see cref="T:System.Data.Common.DataRecordInfo" /> object.</returns>
    </member>
    <member name="P:System.Data.Objects.DbUpdatableDataRecord.FieldCount">
      <summary>Gets the number of fields in the record.</summary>
      <returns>An integer value that is the field count.</returns>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetBoolean(System.Int32)">
      <summary>Retrieves the field value as a Boolean.</summary>
      <returns>The field value as a Boolean.</returns>
      <param name="ordinal">The ordinal of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetByte(System.Int32)">
      <summary>Retrieves the field value as a byte.</summary>
      <returns>The field value as a byte.</returns>
      <param name="ordinal">The ordinal of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>Retrieves the field value as a byte array.</summary>
      <returns>The number of bytes copied.</returns>
      <param name="ordinal">The ordinal of the field.</param>
      <param name="dataIndex">The index at which to start copying data.</param>
      <param name="buffer">The destination buffer where data is copied.</param>
      <param name="bufferIndex">The index in the destination buffer where copying will begin.</param>
      <param name="length">The number of bytes to copy.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetChar(System.Int32)">
      <summary>Retrieves the field value as a char.</summary>
      <returns>The field value as a char.</returns>
      <param name="ordinal">The ordinal of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>Retrieves the field value as a char array.</summary>
      <returns>The number of characters copied.</returns>
      <param name="ordinal">The ordinal of the field.</param>
      <param name="dataIndex">The index at which to start copying data.</param>
      <param name="buffer">The destination buffer where data is copied.</param>
      <param name="bufferIndex">The index in the destination buffer where copying will begin.</param>
      <param name="length">The number of characters to copy.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetDataReader(System.Int32)">
      <summary>Retrieves the field value as a <see cref="T:System.Common.DbDataReader" />.</summary>
      <returns>The field value as a <see cref="T:System.Data.Common.DbDataReader" />.</returns>
      <param name="i">The ordinal of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetDataRecord(System.Int32)">
      <summary>Retrieves a field value as a <see cref="T:System.Data.Common.DbDataRecord" />.</summary>
      <returns>A field value as a <see cref="T:System.Data.Common.DbDataRecord" />.</returns>
      <param name="ordinal">The ordinal of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetDataTypeName(System.Int32)">
      <summary>Retrieves the name of the field data type.</summary>
      <returns>The name of the field data type.</returns>
      <param name="ordinal">The ordinal of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetDateTime(System.Int32)">
      <summary>Retrieves the field value as a <see cref="T:System.DateTime" />.</summary>
      <returns>The field value as a <see cref="T:System.DateTime" />.</returns>
      <param name="ordinal">The ordinal of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetDbDataReader(System.Int32)">
      <summary>Retrieves the field value as a <see cref="T:System.Common.DbDataReader" /></summary>
      <returns>The field value as a <see cref="T:System.Data.Common.DbDataReader" />.</returns>
      <param name="ordinal">The ordinal of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetDecimal(System.Int32)">
      <summary>Retrieves the field value as a decimal.</summary>
      <returns>The field value as a decimal.</returns>
      <param name="ordinal">The ordinal of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetDouble(System.Int32)">
      <summary>Retrieves the field value as a double.</summary>
      <returns>The field value as a double.</returns>
      <param name="ordinal">The ordinal of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetFieldType(System.Int32)">
      <summary>Retrieves the type of a field.</summary>
      <returns>The field type.</returns>
      <param name="ordinal">The ordinal of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetFloat(System.Int32)">
      <summary>Retrieves the field value as a float.</summary>
      <returns>The field value as a float.</returns>
      <param name="ordinal">The ordinal of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetGuid(System.Int32)">
      <summary>Retrieves the field value as a <see cref="T:System.Guid" />.</summary>
      <returns>The field value as a <see cref="T:System.Guid" />.</returns>
      <param name="ordinal">The ordinal of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetInt16(System.Int32)">
      <summary>Retrieves the field value as an <see cref="T:System.Int16" />.</summary>
      <returns>The field value as an <see cref="T:System.Int16" />.</returns>
      <param name="ordinal">The ordinal of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetInt32(System.Int32)">
      <summary>Retrieves the field value as an <see cref="T:System.Int32" />.</summary>
      <returns>The field value as an <see cref="T:System.Int32" />.</returns>
      <param name="ordinal">The ordinal of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetInt64(System.Int32)">
      <summary>Retrieves the field value as an <see cref="T:System.Int64" />.</summary>
      <returns>The field value as an <see cref="T:System.Int64" />.</returns>
      <param name="ordinal">The ordinal of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetName(System.Int32)">
      <summary>Retrieves the name of a field.</summary>
      <returns>The name of the field.</returns>
      <param name="ordinal">The ordinal of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetOrdinal(System.String)">
      <summary>Retrieves the ordinal of a field by using the name of the field.</summary>
      <returns>The ordinal of the field.</returns>
      <param name="name">The name of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetRecordValue(System.Int32)">
      <summary>Retrieves the value of a field.</summary>
      <returns>The field value.</returns>
      <param name="ordinal">The ordinal of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetString(System.Int32)">
      <summary>Retrieves the field value as a string.</summary>
      <returns>The field value.</returns>
      <param name="ordinal">The ordinal of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetValue(System.Int32)">
      <summary>Retrieves the value of a field.</summary>
      <returns>The field value.</returns>
      <param name="ordinal">The ordinal of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetValues(System.Object[])">
      <summary>Populates an array of objects with the field values of the current record.</summary>
      <returns>The number of field values returned.</returns>
      <param name="values">An array of objects to store the field values.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.IsDBNull(System.Int32)">
      <summary>Returns whether the specified field is set to <see cref="T:System.DBNull" />.</summary>
      <returns>true if the field is set to <see cref="T:System.DBNull" />; otherwise false.</returns>
      <param name="ordinal">The ordinal of the field.</param>
    </member>
    <member name="P:System.Data.Objects.DbUpdatableDataRecord.Item(System.Int32)">
      <summary>Returns a value that has the given field ordinal.</summary>
      <returns>The value that has the given field ordinal.</returns>
      <param name="ordinal">The ordinal of the field.</param>
    </member>
    <member name="P:System.Data.Objects.DbUpdatableDataRecord.Item(System.String)">
      <summary>Gets a value that has the given field name.</summary>
      <returns>The field value.</returns>
      <param name="name">The name of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetBoolean(System.Int32,System.Boolean)">
      <summary>Sets the value of a field in a record.</summary>
      <param name="ordinal">The ordinal of the field.</param>
      <param name="value">The value of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetByte(System.Int32,System.Byte)">
      <summary>Sets the value of a field in a record.</summary>
      <param name="ordinal">The ordinal of the field.</param>
      <param name="value">The value of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetChar(System.Int32,System.Char)">
      <summary>Sets the value of a field in a record.</summary>
      <param name="ordinal">The ordinal of the field.</param>
      <param name="value">The value of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetDataRecord(System.Int32,System.Data.IDataRecord)">
      <summary>Sets the value of a field in a record.</summary>
      <param name="ordinal">The ordinal of the field.</param>
      <param name="value">The value of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetDateTime(System.Int32,System.DateTime)">
      <summary>Sets the value of a field in a record.</summary>
      <param name="ordinal">The ordinal of the field.</param>
      <param name="value">The value of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetDBNull(System.Int32)">
      <summary>Sets a field to the <see cref="T:System.DBNull" /> value.</summary>
      <param name="ordinal">The ordinal of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetDecimal(System.Int32,System.Decimal)">
      <summary>Sets the value of a field in a record.</summary>
      <param name="ordinal">The ordinal of the field.</param>
      <param name="value">The value of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetDouble(System.Int32,System.Double)">
      <summary>Sets the value of a field in a record.</summary>
      <param name="ordinal">The ordinal of the field.</param>
      <param name="value">The value of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetFloat(System.Int32,System.Single)">
      <summary>Sets the value of a field in a record.</summary>
      <param name="ordinal">The ordinal of the field.</param>
      <param name="value">The value of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetGuid(System.Int32,System.Guid)">
      <summary>Sets the value of a field in a record.</summary>
      <param name="ordinal">The ordinal of the field.</param>
      <param name="value">The value of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetInt16(System.Int32,System.Int16)">
      <summary>Sets the value of a field in a record.</summary>
      <param name="ordinal">The ordinal of the field.</param>
      <param name="value">The value of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetInt32(System.Int32,System.Int32)">
      <summary>Sets the value of a field in a record.</summary>
      <param name="ordinal">The ordinal of the field.</param>
      <param name="value">The value of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetInt64(System.Int32,System.Int64)">
      <summary>Sets the value of a field in a record.</summary>
      <param name="ordinal">The ordinal of the field.</param>
      <param name="value">The value of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetRecordValue(System.Int32,System.Object)">
      <summary>Sets the value of a field in a record.</summary>
      <param name="ordinal">The ordinal of the field.</param>
      <param name="value">The value of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetString(System.Int32,System.String)">
      <summary>Sets the value of a field in a record.</summary>
      <param name="ordinal">The ordinal of the field.</param>
      <param name="value">The value of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetValue(System.Int32,System.Object)">
      <summary>Sets the value of a field in a record.</summary>
      <param name="ordinal">The ordinal of the field.</param>
      <param name="value">The value of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetValues(System.Object[])">
      <summary>Sets field values in a record.</summary>
      <returns>The number of the fields that were set.</returns>
      <param name="values">The values of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.System#Data#IDataRecord#GetData(System.Int32)">
      <summary>Retrieves the field value as an <see cref="T:System.Data.IDataReader" />.</summary>
      <returns>The field value as an <see cref="T:System.Data.IDataReader" />.</returns>
      <param name="ordinal">The ordinal of the field.</param>
    </member>
    <member name="T:System.Data.Objects.EntityFunctions">
      <summary>Provides common language runtime (CLR) methods that expose conceptual model canonical functions in LINQ to Entities queries. For information about canonical functions, see Canonical Functions (Entity SQL). </summary>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddDays(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Invokes the canonical AddDays function. For information about the canonical AddDays function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The <paramref name="dateValue" /> incremented by <paramref name="addValue" />.</returns>
      <param name="dateValue">A valid date.</param>
      <param name="addValue">The number of days to add to <paramref name="dateValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddDays(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Invokes the canonical AddDays function. For information about the canonical AddDays function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The <paramref name="dateValue" /> incremented by <paramref name="addValue" />.</returns>
      <param name="dateValue">A valid date time offset.</param>
      <param name="addValue">The number of days to add to <paramref name="dateValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddHours(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Invokes the canonical AddHours function. For information about the canonical AddHours function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The <paramref name="timeValue" /> incremented by <paramref name="addValue" />.</returns>
      <param name="timeValue">A valid date.</param>
      <param name="addValue">The number of hours to add to <paramref name="timeValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddHours(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Invokes the canonical AddHours function. For information about the canonical AddHours function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The <paramref name="timeValue" /> incremented by <paramref name="addValue" />.</returns>
      <param name="timeValue">A valid date time offset.</param>
      <param name="addValue">The number of hours to add to <paramref name="timeValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddHours(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>Invokes the canonical AddHours function. For information about the canonical AddHours function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The <paramref name="timeValue" /> incremented by <paramref name="addValue" />.</returns>
      <param name="timeValue">A valid time span.</param>
      <param name="addValue">The number of hours to add to <paramref name="timeValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddMicroseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Invokes the canonical AddMicroseconds function. For information about the canonical AddMicroseconds function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The <paramref name="timeValue" /> incremented by <paramref name="addValue" />.</returns>
      <param name="timeValue">A valid date.</param>
      <param name="addValue">The number of microseconds to add to <paramref name="timeValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddMicroseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Invokes the canonical AddMicroseconds function. For information about the canonical AddMicroseconds function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The <paramref name="timeValue" /> incremented by <paramref name="addValue" />.</returns>
      <param name="timeValue">A valid date time offset.</param>
      <param name="addValue">The number of microseconds to add to <paramref name="timeValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddMicroseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>Invokes the canonical AddMicroseconds function. For information about the canonical AddMicroseconds function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The <paramref name="timeValue" /> incremented by <paramref name="addValue" />.</returns>
      <param name="timeValue">A valid time span.</param>
      <param name="addValue">The number of microseconds to add to <paramref name="timeValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddMilliseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Invokes the canonical AddMilliseconds function. For information about the canonical AddMilliseconds function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The <paramref name="timeValue" /> incremented by <paramref name="addValue" />.</returns>
      <param name="timeValue">A valid date.</param>
      <param name="addValue">The number of milliseconds to add to <paramref name="timeValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddMilliseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Invokes the canonical AddMilliseconds function. For information about the canonical AddMilliseconds function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The <paramref name="timeValue" /> incremented by <paramref name="addValue" />.</returns>
      <param name="timeValue">A valid date time offset.</param>
      <param name="addValue">The number of milliseconds to add to <paramref name="timeValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddMilliseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>Invokes the canonical AddMilliseconds function. For information about the canonical AddMilliseconds function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The <paramref name="timeValue" /> incremented by <paramref name="addValue" />.</returns>
      <param name="timeValue">A valid time span.</param>
      <param name="addValue">The number of milliseconds to add to <paramref name="timeValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddMinutes(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Invokes the canonical AddMinutes function. For information about the canonical AddMinutes function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The <paramref name="timeValue" /> incremented by <paramref name="addValue" />.</returns>
      <param name="timeValue">A valid date.</param>
      <param name="addValue">The number of minutes to add to <paramref name="timeValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddMinutes(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Invokes the canonical AddMinutes function. For information about the canonical AddMinutes function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The <paramref name="timeValue" /> incremented by <paramref name="addValue" />.</returns>
      <param name="timeValue">A valid date time offset.</param>
      <param name="addValue">The number of minutes to add to <paramref name="timeValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddMinutes(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>Invokes the canonical AddMinutes function. For information about the canonical AddMinutes function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The <paramref name="timeValue" /> incremented by <paramref name="addValue" />.</returns>
      <param name="timeValue">A valid time span.</param>
      <param name="addValue">The number of minutes to add to <paramref name="timeValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddMonths(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Invokes the canonical AddMonths function. For information about the canonical AddMonths function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The <paramref name="dateValue" /> incremented by <paramref name="addValue" />.</returns>
      <param name="dateValue">A valid date.</param>
      <param name="addValue">The number of months to add to <paramref name="dateValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddMonths(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Invokes the canonical AddMonths function. For information about the canonical AddMonths function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The <paramref name="dateValue" /> incremented by <paramref name="addValue" />.</returns>
      <param name="dateValue">A valid date time offset.</param>
      <param name="addValue">The number of months to add to <paramref name="dateValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddNanoseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Invokes the canonical AddNanoseconds function. For information about the canonical AddNanoseconds function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The <paramref name="timeValue" /> incremented by <paramref name="addValue" />.</returns>
      <param name="timeValue">A valid date.</param>
      <param name="addValue">The number of nanoseconds to add to <paramref name="timeValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddNanoseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Invokes the canonical AddNanoseconds function. For information about the canonical AddNanoseconds function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The <paramref name="timeValue" /> incremented by <paramref name="addValue" />.</returns>
      <param name="timeValue">A valid date time offset.</param>
      <param name="addValue">The number of nanoseconds to add to <paramref name="timeValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddNanoseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>Invokes the canonical AddNanoseconds function. For information about the canonical AddNanoseconds function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The <paramref name="timeValue" /> incremented by <paramref name="addValue" />.</returns>
      <param name="timeValue">A valid time span.</param>
      <param name="addValue">The number of nanoseconds to add to <paramref name="timeValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddSeconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Invokes the canonical AddSeconds function. For information about the canonical AddSeconds function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The <paramref name="timeValue" /> incremented by <paramref name="addValue" />.</returns>
      <param name="timeValue">A valid date.</param>
      <param name="addValue">The number of seconds to add to <paramref name="timeValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddSeconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Invokes the canonical AddSeconds function. For information about the canonical AddSeconds function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The <paramref name="timeValue" /> incremented by <paramref name="addValue" />.</returns>
      <param name="timeValue">A valid date time offset.</param>
      <param name="addValue">The number of seconds to add to <paramref name="timeValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddSeconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>Invokes the canonical AddSeconds function. For information about the canonical AddSeconds function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The <paramref name="timeValue" /> incremented by <paramref name="addValue" />.</returns>
      <param name="timeValue">A valid time span.</param>
      <param name="addValue">The number of seconds to add to <paramref name="timeValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddYears(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Invokes the canonical AddYears function. For information about the canonical AddYears function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The <paramref name="dateValue" /> incremented by <paramref name="addValue" />.</returns>
      <param name="dateValue">A valid date.</param>
      <param name="addValue">The number of years to add to <paramref name="dateValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddYears(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Invokes the canonical AddYears function. For information about the canonical AddYears function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The <paramref name="dateValue" /> incremented by <paramref name="addValue" />.</returns>
      <param name="dateValue">A valid date time offset.</param>
      <param name="addValue">The number of years to add to <paramref name="dateValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AsNonUnicode(System.String)">
      <summary>A LINQ to Entities operator that treats the input string as a non-unicode string. This method only applies to LINQ to Entities queries.</summary>
      <returns>A non-unicode string.</returns>
      <param name="value">The input string.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AsUnicode(System.String)">
      <summary>A LINQ to Entities operator that ensures the input string is treated as a unicode string. This method only applies to LINQ to Entities queries.</summary>
      <returns>A unicode string.</returns>
      <param name="value">The input string.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.CreateDateTime(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double})">
      <summary>Invokes the canonical CreateDateTime function. For information about the canonical CreateDateTime function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The new date.</returns>
      <param name="year">The year part of the new date.</param>
      <param name="month">The month part of the new date.</param>
      <param name="day">The day part of the new date.</param>
      <param name="hour">The hour part of the new date.</param>
      <param name="minute">The minutes part of the new date.</param>
      <param name="second">The seconds part of the new date. Note that you can specify fractions of a second with this parameter.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.CreateDateTimeOffset(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double},System.Nullable{System.Int32})">
      <summary>Invokes the canonical CreateDateTimeOffset function. For information about the canonical CreateDateTimeOffset function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The new date.</returns>
      <param name="year">The year part of the new date.</param>
      <param name="month">The month part of the new date.</param>
      <param name="day">The day part of the new date.</param>
      <param name="hour">The hour part of the new date.</param>
      <param name="minute">The minute part of the new date.</param>
      <param name="second">The seconds part of the new date. Note that you can specify fractions of a second with this parameter.</param>
      <param name="timeZoneOffset">The time zone offset part of the new date.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.CreateTime(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double})">
      <summary>Invokes the canonical CreateTime function. For information about the canonical CreateTime function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The new time span.</returns>
      <param name="hour">The hours part of the new time span.</param>
      <param name="minute">The minutes part of the new time span.</param>
      <param name="second">The seconds part of the new time span. Note that you can specify fractions of a second with this parameter.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffDays(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Invokes the canonical DiffDays function. For information about the canonical DiffDays function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of days between <paramref name="dateValue1" /> and <paramref name="dateValue2" />.</returns>
      <param name="dateValue1">A valid date.</param>
      <param name="dateValue2">A valid date.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffDays(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Invokes the canonical DiffDays function. For information about the canonical DiffDays function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of days between <paramref name="dateValue1" /> and <paramref name="dateValue2" />.</returns>
      <param name="dateValue1">A valid date time offset.</param>
      <param name="dateValue2">A valid date time offset.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffHours(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Invokes the canonical DiffHours function. For information about the canonical DiffHours function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of hours between <paramref name="timeValue1" /> and <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">A valid date.</param>
      <param name="timeValue2">A valid date.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffHours(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Invokes the canonical DiffHours function. For information about the canonical DiffHours function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of hours between <paramref name="timeValue1" /> and <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">A valid date time offset.</param>
      <param name="timeValue2">A valid date time offset.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffHours(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Invokes the canonical DiffHours function. For information about the canonical DiffHours function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of hours between <paramref name="timeValue1" /> and <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">A valid time span.</param>
      <param name="timeValue2">A valid time span.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMicroseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Invokes the canonical DiffMicroseconds function. For information about the canonical DiffMicroseconds function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of microseconds between <paramref name="timeValue1" /> and <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">A valid date.</param>
      <param name="timeValue2">A valid date.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMicroseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Invokes the canonical DiffMicroseconds function. For information about the canonical DiffMicroseconds function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of microseconds between <paramref name="timeValue1" /> and <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">A valid date time offset.</param>
      <param name="timeValue2">A valid date time offset.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMicroseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Invokes the canonical DiffMicroseconds function. For information about the canonical DiffMicroseconds function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of microseconds between <paramref name="timeValue1" /> and <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">A valid time span.</param>
      <param name="timeValue2">A valid time span.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMilliseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Invokes the canonical DiffMilliseconds function. For information about the canonical DiffMilliseconds function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of milliseconds between <paramref name="timeValue1" /> and <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">A valid date.</param>
      <param name="timeValue2">A valid date.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMilliseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Invokes the canonical DiffMilliseconds function. For information about the canonical DiffMilliseconds function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of milliseconds between <paramref name="timeValue1" /> and <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">A valid date time offset.</param>
      <param name="timeValue2">A valid date time offset.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMilliseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Invokes the canonical DiffMilliseconds function. For information about the canonical DiffMilliseconds function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of milliseconds between <paramref name="timeValue1" /> and <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">A valid time span.</param>
      <param name="timeValue2">A valid time span.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMinutes(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Invokes the canonical DiffMinutes function. For information about the canonical DiffMinutes function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of minutes between <paramref name="timeValue1" /> and <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">A valid date.</param>
      <param name="timeValue2">A valid date.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMinutes(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Invokes the canonical DiffMinutes function. For information about the canonical DiffMinutes function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of minutes between <paramref name="timeValue1" /> and <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">A valid date time offset.</param>
      <param name="timeValue2">A valid date time offset.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMinutes(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Invokes the canonical DiffMinutes function. For information about the canonical DiffMinutes function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of minutes between <paramref name="timeValue1" /> and <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">A valid time span.</param>
      <param name="timeValue2">A valid time span.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMonths(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Invokes the canonical DiffMonths function. For information about the canonical DiffMonths function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of months between <paramref name="dateValue1" /> and <paramref name="dateValue2" />.</returns>
      <param name="dateValue1">A valid date.</param>
      <param name="dateValue2">A valid date.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMonths(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Invokes the canonical DiffMonths function. For information about the canonical DiffMonths function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of months between <paramref name="dateValue1" /> and <paramref name="dateValue2" />.</returns>
      <param name="dateValue1">A valid date time offset.</param>
      <param name="dateValue2">A valid date time offset.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffNanoseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Invokes the canonical DiffNanoseconds function. For information about the canonical DiffNanoseconds function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of nanoseconds between <paramref name="timeValue1" /> and <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">A valid date.</param>
      <param name="timeValue2">A valid date.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffNanoseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Invokes the canonical DiffNanoseconds function. For information about the canonical DiffNanoseconds function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of nanoseconds between <paramref name="timeValue1" /> and <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">A valid date time offset.</param>
      <param name="timeValue2">A valid date time offset.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffNanoseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Invokes the canonical DiffNanoseconds function. For information about the canonical DiffNanoseconds function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of nanoseconds between <paramref name="timeValue1" /> and <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">A valid date.</param>
      <param name="timeValue2">A valid date.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffSeconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Invokes the canonical DiffSeconds function. For information about the canonical DiffSeconds function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of seconds between <paramref name="timeValue1" /> and <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">A valid date.</param>
      <param name="timeValue2">A valid date.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffSeconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Invokes the canonical DiffSeconds function. For information about the canonical DiffSeconds function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of seconds between <paramref name="timeValue1" /> and <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">A valid date time offset.</param>
      <param name="timeValue2">A valid date time offset.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffSeconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Invokes the canonical DiffSeconds function. For information about the canonical DiffSeconds function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of seconds between <paramref name="timeValue1" /> and <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">A valid time span.</param>
      <param name="timeValue2">A valid time span.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffYears(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Invokes the canonical DiffYears function. For information about the canonical DiffYears function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of years between <paramref name="dateValue1" /> and <paramref name="dateValue2" />.</returns>
      <param name="dateValue1">A valid date.</param>
      <param name="dateValue2">A valid date.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffYears(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Invokes the canonical DiffYears function. For information about the canonical DiffYears function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of years between <paramref name="dateValue1" /> and <paramref name="dateValue2" />.</returns>
      <param name="dateValue1">A valid date time offset.</param>
      <param name="dateValue2">A valid date time offset.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.GetTotalOffsetMinutes(System.Nullable{System.DateTimeOffset})">
      <summary>Invokes the canonical GetTotalOffsetMinutes function. For information about the canonical GetTotalOffsetMinutes function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of minutes that the <paramref name="dateTimeOffsetArgument" /> is offset from GMT. This is generally between +780 and -780 (+ or - 13 hrs). </returns>
      <param name="dateTimeOffsetArgument">A valid date time offset.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Left(System.String,System.Nullable{System.Int64})">
      <summary>Invokes the canonical Left function. For information about the canonical Left function, see String Canonical Functions (Entity SQL).</summary>
      <returns>The leftmost <paramref name="length" /> number of characters of <paramref name="stringArgument" />.</returns>
      <param name="stringArgument">A valid string expression.</param>
      <param name="length">The number of characters to return.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Reverse(System.String)">
      <summary>Invokes the canonical Reverse function. For information about the canonical Reverse function, see String Canonical Functions (Entity SQL).</summary>
      <returns>The input string with the order of the characters reversed.</returns>
      <param name="stringArgument">A valid string.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Right(System.String,System.Nullable{System.Int64})">
      <summary>Invokes the canonical Right function. For information about the canonical Right function, see String Canonical Functions (Entity SQL).</summary>
      <returns>The rightmost <paramref name="length" /> number of characters of <paramref name="stringArgument" />.</returns>
      <param name="stringArgument">A valid string expression.</param>
      <param name="length">The number of characters to return.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Invokes the canonical StDev function. For information about the canonical StDev function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical standard deviation of the input collection.</returns>
      <param name="collection">A set of numeric values.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Invokes the canonical StDev function. For information about the canonical StDev function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical standard deviation of the input collection.</returns>
      <param name="collection">A set of numeric values.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Invokes the canonical StDev function. For information about the canonical StDev function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical standard deviation of the input collection.</returns>
      <param name="collection">A set of numeric values.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Invokes the canonical StDev function. For information about the canonical StDev function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical standard deviation of the input collection.</returns>
      <param name="collection">A set of numeric values.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Invokes the canonical StDev function. For information about the canonical StDev function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical standard deviation of the input collection.</returns>
      <param name="collection">A set of numeric values.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Invokes the canonical StDev function. For information about the canonical StDev function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical standard deviation of the input collection.</returns>
      <param name="collection">A set of numeric values.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Invokes the canonical StDev function. For information about the canonical StDev function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical standard deviation of the input collection.</returns>
      <param name="collection">A set of numeric values.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Invokes the canonical StDev function. For information about the canonical StDev function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical standard deviation of the input collection.</returns>
      <param name="collection">A set of numeric values.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Invokes the canonical StDevP function. For information about the canonical StDevP function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical standard deviation of the population in the input collection.</returns>
      <param name="collection">A set of numeric values.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Invokes the canonical StDevP function. For information about the canonical StDevP function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical standard deviation of the population in the input collection.</returns>
      <param name="collection">A set of numeric values.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Invokes the canonical StDevP function. For information about the canonical StDevP function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical standard deviation of the population in the input collection.</returns>
      <param name="collection">A set of numeric values.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Invokes the canonical StDevP function. For information about the canonical StDevP function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical standard deviation of the population in the input collection.</returns>
      <param name="collection">A set of numeric values.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Invokes the canonical StDevP function. For information about the canonical StDevP function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical standard deviation of the population in the input collection.</returns>
      <param name="collection">A set of numeric values.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Invokes the canonical StDevP function. For information about the canonical StDevP function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical standard deviation of the population in the input collection.</returns>
      <param name="collection">A set of numeric values.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Invokes the canonical StDevP function. For information about the canonical StDevP function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical standard deviation of the population in the input collection.</returns>
      <param name="collection">A set of numeric values.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Invokes the canonical StDevP function. For information about the canonical StDevP function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical standard deviation of the population in the input collection.</returns>
      <param name="collection">A set of numeric values.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Truncate(System.Nullable{System.Decimal},System.Nullable{System.Int32})">
      <summary>Invokes the canonical Truncate function. For information about the canonical Truncate function, see Math Canonical Functions (Entity SQL).</summary>
      <returns>
        <paramref name="value" /> truncated to the length or precision specified by <paramref name="digits" />.</returns>
      <param name="value">The number to truncate.</param>
      <param name="digits">The length or precision to truncate to.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Truncate(System.Nullable{System.Double},System.Nullable{System.Int32})">
      <summary>Invokes the canonical Truncate function. For information about the canonical Truncate function, see Math Canonical Functions (Entity SQL).</summary>
      <returns>
        <paramref name="value" /> truncated to the length or precision specified by <paramref name="digits" />.</returns>
      <param name="value">The number to truncate.</param>
      <param name="digits">The length or precision to truncate to.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.TruncateTime(System.Nullable{System.DateTime})">
      <summary>Invokes the canonical TruncateTime function. For information about the canonical TruncateTime function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The input date with the time portion cleared.</returns>
      <param name="dateValue">The date to truncate.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.TruncateTime(System.Nullable{System.DateTimeOffset})">
      <summary>Invokes the canonical TruncateTime function. For information about the canonical TruncateTime function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The input date with the time portion cleared.</returns>
      <param name="dateValue">The date time offset to truncate.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Invokes the canonical Var function. For information about the canonical Var function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical variance of all values in the specified collection.</returns>
      <param name="collection">The set of values for which the variance will be calculated.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Invokes the canonical Var function. For information about the canonical Var function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical variance of all values in the specified collection.</returns>
      <param name="collection">The set of values for which the variance will be calculated.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Invokes the canonical Var function. For information about the canonical Var function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical variance of all values in the specified collection.</returns>
      <param name="collection">The set of values for which the variance will be calculated.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Invokes the canonical Var function. For information about the canonical Var function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical variance of all values in the specified collection.</returns>
      <param name="collection">The set of values for which the variance will be calculated.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Invokes the canonical Var function. For information about the canonical Var function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical variance of all values in the specified collection.</returns>
      <param name="collection">The set of values for which the variance will be calculated.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Invokes the canonical Var function. For information about the canonical Var function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical variance of all values in the specified collection.</returns>
      <param name="collection">The set of values for which the variance will be calculated.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Invokes the canonical Var function. For information about the canonical Var function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical variance of all values in the specified collection.</returns>
      <param name="collection">The set of values for which the variance will be calculated.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Invokes the canonical Var function. For information about the canonical Var function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical variance of all values in the specified collection.</returns>
      <param name="collection">The set of values for which the variance will be calculated.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Invokes the canonical VarP function. For information about the canonical VarP function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical variance of the population in the specified collection.</returns>
      <param name="collection">The set of values for which the variance will be calculated.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Invokes the canonical VarP function. For information about the canonical VarP function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical variance of the population in the specified collection.</returns>
      <param name="collection">The set of values for which the variance will be calculated.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Invokes the canonical VarP function. For information about the canonical VarP function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical variance of the population in the specified collection.</returns>
      <param name="collection">The set of values for which the variance will be calculated.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Invokes the canonical VarP function. For information about the canonical VarP function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical variance of the population in the specifed collection.</returns>
      <param name="collection">The set of values for which the variance will be calculated.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Invokes the canonical VarP function. For information about the canonical VarP function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical variance of the population in the specified collection.</returns>
      <param name="collection">The set of values for which the variance will be calculated.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Invokes the canonical VarP function. For information about the canonical VarP function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical variance of the population in the specified collection.</returns>
      <param name="collection">The set of values for which the variance will be calculated.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Invokes the canonical VarP function. For information about the canonical VarP function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical variance of the population in the specified collection.</returns>
      <param name="collection">The set of values for which the variance will be calculated.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Invokes the canonical VarP function. For information about the canonical VarP function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical variance of the population in the specified collection.</returns>
      <param name="collection">The set of values for which the variance will be calculated.</param>
    </member>
    <member name="T:System.Data.Objects.IObjectSet`1">
      <summary>Provides functionality to allow making modifications to a set of data objects.</summary>
      <typeparam name="TEntity">The type of an entity object returned from the query.</typeparam>
    </member>
    <member name="M:System.Data.Objects.IObjectSet`1.AddObject(`0)">
      <summary>Notifies the set that an object that represents a new entity must be added to the set.</summary>
      <param name="entity">The new object to add to the set.</param>
    </member>
    <member name="M:System.Data.Objects.IObjectSet`1.Attach(`0)">
      <summary>Notifies the set that an object that represents an existing entity must be added to the set.</summary>
      <param name="entity">The existing object to add to the set.</param>
    </member>
    <member name="M:System.Data.Objects.IObjectSet`1.DeleteObject(`0)">
      <summary>Notifies the set that an object that represents an existing entity must be deleted from the set. </summary>
      <param name="entity">The existing object to delete from the set.</param>
    </member>
    <member name="M:System.Data.Objects.IObjectSet`1.Detach(`0)">
      <summary>Notifies the set that an object that represents an existing entity must be detached from the set.</summary>
      <param name="entity">The object to detach from the set.</param>
    </member>
    <member name="T:System.Data.Objects.MergeOption">
      <summary>Specifies how objects being loaded into the object context are merged with objects already in the object context. </summary>
    </member>
    <member name="F:System.Data.Objects.MergeOption.AppendOnly">
      <summary>Objects that do not exist in the object context are attached to the context. If an object is already in the context, the current and original values of object's properties in the entry are not overwritten with data source values. The state of the object's entry and state of properties of the object in the entry do not change. <see cref="F:System.Data.Objects.MergeOption.AppendOnly" /> is the default merge option.</summary>
    </member>
    <member name="F:System.Data.Objects.MergeOption.OverwriteChanges">
      <summary>Objects that do not exist in the object context are attached to the context. If an object is already in the context, the current and original values of object's properties in the entry are overwritten with data source values. The state of the object's entry is set to <see cref="F:System.Data.EntityState.Unchanged" />, no properties are marked as modified.</summary>
    </member>
    <member name="F:System.Data.Objects.MergeOption.PreserveChanges">
      <summary>Objects that do not exist in the object context are attached to the context. </summary>
    </member>
    <member name="F:System.Data.Objects.MergeOption.NoTracking">
      <summary>Objects are maintained in a <see cref="F:System.Data.EntityState.Detached" /> state and are not tracked in the <see cref="T:System.Data.Objects.ObjectStateManager" />. However, Entity Framework-generated entities and POCO entities with proxies maintain a reference to the object context to facilitate loading of related objects.</summary>
    </member>
    <member name="T:System.Data.Objects.ObjectContext">
      <summary>Provides facilities for querying and working with entity data as objects. </summary>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.#ctor(System.Data.EntityClient.EntityConnection)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Objects.ObjectContext" /> class with the given connection. During construction, the metadata workspace is extracted from the <see cref="T:System.Data.EntityClient.EntityConnection" /> object.</summary>
      <param name="connection">An <see cref="T:System.Data.EntityClient.EntityConnection" /> that contains references to the model and to the data source connection.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="connection" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="connection" /> is invalid.-or-The metadata workspace is invalid. </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.#ctor(System.Data.EntityClient.EntityConnection,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Objects.ObjectContext" /> class with a given connection and entity container name.</summary>
      <param name="connection">An <see cref="T:System.Data.EntityClient.EntityConnection" /> that contains references to the model and to the data source connection.</param>
      <param name="defaultContainerName">The name of the default entity container. When the <paramref name="defaultContainerName" /> is set through this method, the property becomes read-only.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="connection" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="connection" />, <paramref name="defaultContainerName" />, or metadata workspace is not valid.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Objects.ObjectContext" /> class with the given connection string and default entity container name.</summary>
      <param name="connectionString">The connection string, which also provides access to the metadata information.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="connectionString" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="connectionString" /> is invalid.-or-The metadata workspace is not valid. </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Objects.ObjectContext" /> class with a given connection string and entity container name.  </summary>
      <param name="connectionString">The connection string, which also provides access to the metadata information.</param>
      <param name="defaultContainerName">The name of the default entity container. When the <paramref name="defaultContainerName" /> is set through this method, the property becomes read-only.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="connectionString" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="connectionString" />, <paramref name="defaultContainerName" />, or metadata workspace is not valid.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.AcceptAllChanges">
      <summary>Accepts all changes made to objects in the object context.</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.AddObject(System.String,System.Object)">
      <summary>Adds an object to the object context. </summary>
      <param name="entitySetName">Represents the entity set name, which may optionally be qualified by the entity container name. </param>
      <param name="entity">The <see cref="T:System.Object" /> to add.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="entity" /> parameter is null. -or-The <paramref name="entitySetName" /> does not qualify.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.ApplyCurrentValues``1(System.String,``0)">
      <summary>Copies the scalar values from the supplied object into the object in the <see cref="T:System.Data.Objects.ObjectContext" /> that has the same key.</summary>
      <returns>The updated object.</returns>
      <param name="entitySetName">The name of the entity set to which the object belongs.</param>
      <param name="currentEntity">The detached object that has property updates to apply to the original object. The entity key of <paramref name="currentEntity" /> must match the <see cref="P:System.Data.Objects.ObjectStateEntry.EntityKey" /> property of an entry in the <see cref="T:System.Data.Objects.ObjectContext" />. </param>
      <typeparam name="TEntity">The entity type of the object.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entitySetName" /> or <paramref name="current" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Data.Metadata.Edm.EntitySet" /> from <paramref name="entitySetName" /> does not match the <see cref="T:System.Data.Metadata.Edm.EntitySet" /> of the object’s <see cref="T:System.Data.EntityKey" />.-or-The object is not in the <see cref="T:System.Data.Objects.ObjectStateManager" /> or it is in a <see cref="F:System.Data.EntityState.Detached" /> state.-or- The entity key of the supplied object is invalid.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="entitySetName" /> is an empty string.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.ApplyOriginalValues``1(System.String,``0)">
      <summary>Copies the scalar values from the supplied object into set of original values for the object in the <see cref="T:System.Data.Objects.ObjectContext" /> that has the same key.</summary>
      <returns>The updated object.</returns>
      <param name="entitySetName">The name of the entity set to which the object belongs.</param>
      <param name="originalEntity">The detached object that has original values to apply to the object. The entity key of <paramref name="originalEntity" /> must match the <see cref="P:System.Data.Objects.ObjectStateEntry.EntityKey" /> property of an entry in the <see cref="T:System.Data.Objects.ObjectContext" />.</param>
      <typeparam name="TEntity">The type of the entity object.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entitySetName" /> or <paramref name="original" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Data.Metadata.Edm.EntitySet" /> from <paramref name="entitySetName" /> does not match the <see cref="T:System.Data.Metadata.Edm.EntitySet" /> of the object’s <see cref="T:System.Data.EntityKey" />.-or-An <see cref="T:System.Data.Objects.ObjectStateEntry" /> for the object cannot be found in the <see cref="T:System.Data.Objects.ObjectStateManager" />. -or-The object is in an <see cref="F:System.Data.EntityState.Added" /> or a <see cref="F:System.Data.EntityState.Detached" /> state.-or- The entity key of the supplied object is invalid or has property changes.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="entitySetName" /> is an empty string.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.ApplyPropertyChanges(System.String,System.Object)">
      <summary>Applies property changes from a detached object to an object already attached to the object context.</summary>
      <param name="entitySetName">The name of the entity set to which the object belongs.</param>
      <param name="changed">The detached object that has property updates to apply to the original object.</param>
      <exception cref="T:System.ArgumentNullException">When <paramref name="entitySetName" /> is null or an empty string.-or-When <paramref name="changed" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">When the <see cref="T:System.Data.Metadata.Edm.EntitySet" /> from <paramref name="entitySetName" /> does not match the <see cref="T:System.Data.Metadata.Edm.EntitySet" /> of the object’s <see cref="T:System.Data.EntityKey" />.-or-When the entity is in a state other than <see cref="F:System.Data.EntityState.Modified" /> or <see cref="F:System.Data.EntityState.Unchanged" />.-or- The original object is not attached to the context.</exception>
      <exception cref="T:System.ArgumentException">When the type of the <paramref name="changed" /> object is not the same type as the original object.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.Attach(System.Data.Objects.DataClasses.IEntityWithKey)">
      <summary>Attaches an object or object graph to the object context when the object has an entity key. </summary>
      <param name="entity">The object to attach.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="entity" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">Invalid entity key. </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.AttachTo(System.String,System.Object)">
      <summary>Attaches an object or object graph to the object context in a specific entity set. </summary>
      <param name="entitySetName">Represents the entity set name, which may optionally be qualified by the entity container name. </param>
      <param name="entity">The <see cref="T:System.Object" /> to attach. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="entity" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">Invalid entity set.-or-The object has a temporary key. -or-The object has an <see cref="T:System.Data.EntityKey" /> and the <see cref="T:System.Data.Metadata.Edm.EntitySet" /> does not match with the entity set passed in as an argument of the method.-or-The object does not have an <see cref="T:System.Data.EntityKey" /> and no entity set is provided.-or-Any object from the object graph has a temporary <see cref="T:System.Data.EntityKey" />.-or-Any object from the object graph has an invalid <see cref="T:System.Data.EntityKey" /> (for example, values in the key do not match values in the object).-or-The entity set could not be found from a given <paramref name="entitySetName" /> name and entity container name.-or-Any object from the object graph already exists in another state manager.</exception>
    </member>
    <member name="P:System.Data.Objects.ObjectContext.CommandTimeout">
      <summary>Gets or sets the timeout value, in seconds, for all object context operations. A null value indicates that the default value of the underlying provider will be used.</summary>
      <returns>An <see cref="T:System.Int32" /> value that is the timeout value, in seconds.</returns>
      <exception cref="T:System.ArgumentException">The timeout value is less than 0. </exception>
    </member>
    <member name="P:System.Data.Objects.ObjectContext.Connection">
      <summary>Gets the connection used by the object context.</summary>
      <returns>A <see cref="T:System.Data.Common.DbConnection" /> object that is the connection.</returns>
      <exception cref="T:System.ObjectDisposedException">When the <see cref="T:System.Data.Objects.ObjectContext" /> instance has been disposed.</exception>
    </member>
    <member name="P:System.Data.Objects.ObjectContext.ContextOptions">
      <summary>Gets the <see cref="T:System.Data.Objects.ObjectContextOptions" /> instance that contains options that affect the behavior of the <see cref="T:System.Data.Objects.ObjectContext" />.</summary>
      <returns>The <see cref="T:System.Data.Objects.ObjectContextOptions" /> instance that contains options that affect the behavior of the <see cref="T:System.Data.Objects.ObjectContext" />.  </returns>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.CreateDatabase">
      <summary>Creates the database by using the current data source connection and the metadata in the <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" />.</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.CreateDatabaseScript">
      <summary>Generates a data definition language (DDL) script that creates schema objects (tables, primary keys, foreign keys) for the metadata in the <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" />. The <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" /> loads metadata from store schema definition language (SSDL) files.</summary>
      <returns>A DDL script that creates schema objects for the metadata in the <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" />.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.CreateEntityKey(System.String,System.Object)">
      <summary>Creates the entity key for a specific object, or returns the entity key if it already exists. </summary>
      <returns>The <see cref="T:System.Data.EntityKey" /> of the object.</returns>
      <param name="entitySetName">The fully qualified name of the entity set to which the entity object belongs.</param>
      <param name="entity">The object for which the entity key is being retrieved. </param>
      <exception cref="T:System.ArgumentNullException">When either parameter is null. </exception>
      <exception cref="T:System.ArgumentException">When <paramref name="entitySetName" /> is empty.-or- When the type of the <paramref name="entity" /> object does not exist in the entity set.-or-When the <paramref name="entitySetName" /> is not fully qualified.</exception>
      <exception cref="T:System.InvalidOperationException">When the entity key cannot be constructed successfully based on the supplied parameters.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.CreateObject``1">
      <summary>Creates and returns an instance of the requested type .</summary>
      <returns>An instance of the requested type <paramref name="T" />, or an instance of a derived type that enables <paramref name="T" /> to be used with the Entity Framework. The returned object is either an instance of the requested type or an instance of a derived type that enables the requested type to be used with the Entity Framework.</returns>
      <typeparam name="T">Type of object to be returned.</typeparam>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.CreateObjectSet``1">
      <summary>Creates a new <see cref="T:System.Data.Objects.ObjectSet`1" /> instance that is used to query, add, modify, and delete objects of the specified entity type.</summary>
      <returns>The new <see cref="T:System.Data.Objects.ObjectSet`1" /> instance.</returns>
      <typeparam name="TEntity">Entity type of the requested <see cref="T:System.Data.Objects.ObjectSet`1" />.</typeparam>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Data.Objects.ObjectContext.DefaultContainerName" /> property is not set on the <see cref="T:System.Data.Objects.ObjectContext" />.-or-The specified type belongs to more than one entity set.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.CreateObjectSet``1(System.String)">
      <summary>Creates a new <see cref="T:System.Data.Objects.ObjectSet`1" /> instance that is used to query, add, modify, and delete objects of the specified type and with the specified entity set name.</summary>
      <returns>The new <see cref="T:System.Data.Objects.ObjectSet`1" /> instance.</returns>
      <param name="entitySetName">Name of the entity set for the returned <see cref="T:System.Data.Objects.ObjectSet`1" />. The string must be qualified by the default container name if the <see cref="P:System.Data.Objects.ObjectContext.DefaultContainerName" /> property is not set on the <see cref="T:System.Data.Objects.ObjectContext" />. </param>
      <typeparam name="TEntity">Entity type of the requested <see cref="T:System.Data.Objects.ObjectSet`1" />.</typeparam>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Data.Metadata.Edm.EntitySet" /> from <paramref name="entitySetName" /> does not match the <see cref="T:System.Data.Metadata.Edm.EntitySet" /> of the object’s <see cref="T:System.Data.EntityKey" />.-or-The <see cref="P:System.Data.Objects.ObjectContext.DefaultContainerName" /> property is not set on the <see cref="T:System.Data.Objects.ObjectContext" /> and the name is not qualified as part of the <paramref name="entitySetName" /> parameter.-or-The specified type belongs to more than one entity set.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.CreateProxyTypes(System.Collections.Generic.IEnumerable{System.Type})">
      <summary>Generates an equivalent type that can be used with the Entity Framework for each type in the supplied enumeration.</summary>
      <param name="types">An enumeration of <see cref="T:System.Type" /> objects that represent custom data classes that map to the conceptual model.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.CreateQuery``1(System.String,System.Data.Objects.ObjectParameter[])">
      <summary>Creates an <see cref="T:System.Data.Objects.ObjectQuery`1" /> in the current object context by using the specified query string.</summary>
      <returns>An <see cref="T:System.Data.Objects.ObjectQuery`1" /> of the specified type.</returns>
      <param name="queryString">The query string to be executed.</param>
      <param name="parameters">Parameters to pass to the query.</param>
      <typeparam name="T">The entity type of the returned <see cref="T:System.Data.Objects.ObjectQuery`1" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="queryString" /> or <paramref name="parameters" /> parameter is null.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.DatabaseExists">
      <summary>Checks if the database that is specified as the database in the current data source connection exists on the data source. </summary>
      <returns>true if the database exists.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectContext.DefaultContainerName">
      <summary>Gets or sets the default container name.</summary>
      <returns>A <see cref="T:System.String" /> that is the default container name. </returns>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.DeleteDatabase">
      <summary>Deletes the database that is specified as the database in the current data source connection.</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.DeleteObject(System.Object)">
      <summary>Marks an object for deletion. </summary>
      <param name="entity">An object that specifies the entity to delete. The object can be in any state except <see cref="F:System.Data.EntityState.Detached" />. </param>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.Detach(System.Object)">
      <summary>Removes the object from the object context.</summary>
      <param name="entity">Object to be detached. Only the <paramref name="entity" /> is removed; if there are any related objects that are being tracked by the same <see cref="T:System.Data.Objects.ObjectStateManager" />, those will not be detached automatically.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="entity" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="entity" /> is not associated with this <see cref="T:System.Data.Objects.ObjectContext" /> (for example, was newly created and not associated with any context yet, or was obtained through some other context, or was already detached).</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.DetectChanges">
      <summary>Ensures that <see cref="T:System.Data.Objects.ObjectStateEntry" /> changes are synchronized with changes in all objects that are tracked by the <see cref="T:System.Data.Objects.ObjectStateManager" />.</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.Dispose">
      <summary>Releases the resources used by the object context.</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.Dispose(System.Boolean)">
      <summary>Releases the resources used by the object context.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.ExecuteFunction``1(System.String,System.Data.Objects.MergeOption,System.Data.Objects.ObjectParameter[])">
      <summary>Executes the given stored procedure or function that is defined in the data source and expressed in the conceptual model, with the specified parameters, and merge option. Returns a typed <see cref="T:System.Data.Objects.ObjectResult`1" />.</summary>
      <returns>An <see cref="T:System.Data.Objects.ObjectResult`1" /> for the data that is returned by the stored procedure.</returns>
      <param name="functionName">The name of the stored procedure or function. The name can include the container name, such as &lt;Container Name&gt;.&lt;Function Name&gt;. When the default container name is known, only the function name is required.</param>
      <param name="mergeOption">The <see cref="T:System.Data.Objects.MergeOption" /> to use when executing the query. </param>
      <param name="parameters">An array of <see cref="T:System.Data.Objects.ObjectParameter" /> objects.</param>
      <typeparam name="TElement">The entity type of the <see cref="T:System.Data.Objects.ObjectResult`1" /> returned when the function is executed against the data source. This type must implement <see cref="T:System.Data.Objects.DataClasses.IEntityWithChangeTracker" />.</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="function" /> is null or empty -or-<paramref name="function" /> is not found.</exception>
      <exception cref="T:System.InvalidOperationException">The entity reader does not support this <paramref name="function" />.-or-There is a type mismatch on the reader and the <paramref name="function" />.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.ExecuteFunction``1(System.String,System.Data.Objects.ObjectParameter[])">
      <summary>Executes a stored procedure or function that is defined in the data source and mapped in the conceptual model, with the specified parameters. Returns a typed <see cref="T:System.Data.Objects.ObjectResult`1" />.</summary>
      <returns>An <see cref="T:System.Data.Objects.ObjectResult`1" /> for the data that is returned by the stored procedure.</returns>
      <param name="functionName">The name of the stored procedure or function. The name can include the container name, such as &lt;Container Name&gt;.&lt;Function Name&gt;. When the default container name is known, only the function name is required.</param>
      <param name="parameters">An array of <see cref="T:System.Data.Objects.ObjectParameter" /> objects.</param>
      <typeparam name="TElement">The entity type of the <see cref="T:System.Data.Objects.ObjectResult`1" /> returned when the function is executed against the data source. This type must implement <see cref="T:System.Data.Objects.DataClasses.IEntityWithChangeTracker" />.</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="function" /> is null or empty -or-<paramref name="function" /> is not found.</exception>
      <exception cref="T:System.InvalidOperationException">The entity reader does not support this <paramref name="function" />.-or-There is a type mismatch on the reader and the <paramref name="function" />.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.ExecuteFunction(System.String,System.Data.Objects.ObjectParameter[])">
      <summary>Executes a stored procedure or function that is defined in the data source and expressed in the conceptual model; discards any results returned from the function; and returns the number of rows affected by the execution.</summary>
      <returns>The number of rows affected.</returns>
      <param name="functionName">The name of the stored procedure or function. The name can include the container name, such as &lt;Container Name&gt;.&lt;Function Name&gt;. When the default container name is known, only the function name is required.</param>
      <param name="parameters">An array of <see cref="T:System.Data.Objects.ObjectParameter" /> objects.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="function" /> is null or empty -or-<paramref name="function" /> is not found.</exception>
      <exception cref="T:System.InvalidOperationException">The entity reader does not support this <paramref name="function" />.-or-There is a type mismatch on the reader and the <paramref name="function" />.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.ExecuteStoreCommand(System.String,System.Object[])">
      <summary>Executes an arbitrary command directly against the data source using the existing connection.</summary>
      <returns>The number of rows affected.</returns>
      <param name="commandText">The command to execute, in the native language of the data source.</param>
      <param name="parameters">An array of parameters to pass to the command.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.ExecuteStoreQuery``1(System.String,System.Object[])">
      <summary>Executes a query directly against the data source that returns a sequence of typed results. </summary>
      <returns>An enumeration of objects of type <paramref name="TResult" />.</returns>
      <param name="commandText">The command to execute, in the native language of the data source.</param>
      <param name="parameters">An array of parameters to pass to the command.</param>
      <typeparam name="TElement"></typeparam>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.ExecuteStoreQuery``1(System.String,System.String,System.Data.Objects.MergeOption,System.Object[])">
      <summary>Executes a query directly against the data source and returns a sequence of typed results. Specify the entity set and the merge option so that query results can be tracked as entities. </summary>
      <returns>An enumeration of objects of type <paramref name="TResult" />.</returns>
      <param name="commandText">The command to execute, in the native language of the data source.</param>
      <param name="entitySetName">The entity set of the <paramref name="TResult" /> type. If an entity set name is not provided, the results are not going to be tracked.</param>
      <param name="mergeOption">The <see cref="T:System.Data.Objects.MergeOption" /> to use when executing the query. The default is <see cref="F:System.Data.Objects.MergeOption.AppendOnly" />.</param>
      <param name="parameters">An array of parameters to pass to the command.</param>
      <typeparam name="TEntity"></typeparam>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.GetKnownProxyTypes">
      <summary>Returns all the existing proxy types.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of all the existing proxy types.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.GetObjectByKey(System.Data.EntityKey)">
      <summary>Returns an object that has the specified entity key.</summary>
      <returns>An <see cref="T:System.Object" /> that is an instance of an entity type.</returns>
      <param name="key">The key of the object to be found.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="key" /> parameter is null.</exception>
      <exception cref="T:System.Data.ObjectNotFoundException">The object is not found in either the <see cref="T:System.Data.Objects.ObjectStateManager" /> or the data source.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.GetObjectType(System.Type)">
      <summary>Returns the entity type of the POCO entity associated with a proxy object of a specified type.</summary>
      <returns>The <see cref="T:System.Type" /> of the associated POCO entity.</returns>
      <param name="type">The <see cref="T:System.Type" /> of the proxy object.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.LoadProperty(System.Object,System.String)">
      <summary>Explicitly loads an object related to the supplied object by the specified navigation property and using the default merge option. </summary>
      <param name="entity">The entity for which related objects are to be loaded.</param>
      <param name="navigationProperty">The name of the navigation property that returns the related objects to be loaded.</param>
      <exception cref="T:System.InvalidOperationException">The <paramref name="entity" /> is in a <see cref="F:System.Data.EntityState.Detached" />, <see cref="F:System.Data.EntityState.Added," /> or <see cref="F:System.Data.EntityState.Deleted" /> state,-or-The <paramref name="entity" /> is attached to another instance of <see cref="T:System.Data.Objects.ObjectContext" />. </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.LoadProperty(System.Object,System.String,System.Data.Objects.MergeOption)">
      <summary>Explicitly loads an object that is related to the supplied object by the specified navigation property and using the specified merge option. </summary>
      <param name="entity">The entity for which related objects are to be loaded.</param>
      <param name="navigationProperty">The name of the navigation property that returns the related objects to be loaded.</param>
      <param name="mergeOption">The <see cref="T:System.Data.Objects.MergeOption" /> value to use when you load the related objects.</param>
      <exception cref="T:System.InvalidOperationException">The <paramref name="entity" /> is in a <see cref="F:System.Data.EntityState.Detached" />, <see cref="F:System.Data.EntityState.Added," /> or <see cref="F:System.Data.EntityState.Deleted" /> state,-or-The <paramref name="entity" /> is attached to another instance of <see cref="T:System.Data.Objects.ObjectContext" />. </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.LoadProperty``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
      <summary>Explicitly loads an object that is related to the supplied object by the specified LINQ query and by using the default merge option. </summary>
      <param name="entity">The source object for which related objects are to be loaded.</param>
      <param name="selector">A LINQ expression that defines the related objects to be loaded.</param>
      <typeparam name="TEntity"></typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="selector" /> does not supply a valid input parameter.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="entity" /> is in a <see cref="F:System.Data.EntityState.Detached" />, <see cref="F:System.Data.EntityState.Added," /> or <see cref="F:System.Data.EntityState.Deleted" /> state,-or-The <paramref name="entity" /> is attached to another instance of <see cref="T:System.Data.Objects.ObjectContext" />. </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.LoadProperty``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Data.Objects.MergeOption)">
      <summary>Explicitly loads an object that is related to the supplied object by the specified LINQ query and by using the specified merge option. </summary>
      <param name="entity">The source object for which related objects are to be loaded.</param>
      <param name="selector">A LINQ expression that defines the related objects to be loaded.</param>
      <param name="mergeOption">The <see cref="T:System.Data.Objects.MergeOption" /> value to use when you load the related objects.</param>
      <typeparam name="TEntity"></typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="selector" /> does not supply a valid input parameter.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="entity" /> is in a <see cref="F:System.Data.EntityState.Detached" />, <see cref="F:System.Data.EntityState.Added," /> or <see cref="F:System.Data.EntityState.Deleted" /> state,-or-The <paramref name="entity" /> is attached to another instance of <see cref="T:System.Data.Objects.ObjectContext" />. </exception>
    </member>
    <member name="P:System.Data.Objects.ObjectContext.MetadataWorkspace">
      <summary>Gets the metadata workspace used by the object context. </summary>
      <returns>The <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> object associated with this <see cref="T:System.Data.Objects.ObjectContext" />.</returns>
    </member>
    <member name="E:System.Data.Objects.ObjectContext.ObjectMaterialized">
      <summary>Occurs when a new entity object is created from data in the data source as part of a query or load operation. </summary>
    </member>
    <member name="P:System.Data.Objects.ObjectContext.ObjectStateManager">
      <summary>Gets the object state manager used by the object context to track object changes.</summary>
      <returns>The <see cref="T:System.Data.Objects.ObjectStateManager" /> used by this <see cref="T:System.Data.Objects.ObjectContext" />.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectContext.QueryProvider">
      <summary>Gets the LINQ query provider associated with this object context.</summary>
      <returns>The <see cref="T:System.Linq.IQueryProvider" /> instance used by this object context.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.Refresh(System.Data.Objects.RefreshMode,System.Collections.IEnumerable)">
      <summary>Updates a collection of objects in the object context with data from the data source. </summary>
      <param name="refreshMode">A <see cref="T:System.Data.Objects.RefreshMode" /> value that indicates whether property changes in the object context are overwritten with property values from the data source.</param>
      <param name="collection">An <see cref="T:System.Collections.IEnumerable" /> collection of objects to refresh.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="refreshMode" /> is not valid.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collection" /> is empty. -or- An object is not attached to the context. </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.Refresh(System.Data.Objects.RefreshMode,System.Object)">
      <summary>Updates an object in the object context with data from the data source. </summary>
      <param name="refreshMode">One of the <see cref="T:System.Data.Objects.RefreshMode" /> values that specifies which mode to use for refreshing the <see cref="T:System.Data.Objects.ObjectStateManager" />.</param>
      <param name="entity">The object to be refreshed. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="refreshMode" /> is not valid.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collection" /> is empty. -or- An object is not attached to the context. </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.SaveChanges">
      <summary>Persists all updates to the data source and resets change tracking in the object context.</summary>
      <returns>The number of objects in an <see cref="F:System.Data.EntityState.Added" />, <see cref="F:System.Data.EntityState.Modified" />, or <see cref="F:System.Data.EntityState.Deleted" /> state when <see cref="M:System.Data.Objects.ObjectContext.SaveChanges" /> was called.</returns>
      <exception cref="T:System.Data.OptimisticConcurrencyException">An optimistic concurrency violation has occurred in the data source.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.SaveChanges(System.Boolean)">
      <summary>Persists all updates to the data source and optionally resets change tracking in the object context.</summary>
      <returns>The number of objects in an <see cref="F:System.Data.EntityState.Added" />, <see cref="F:System.Data.EntityState.Modified" />, or <see cref="F:System.Data.EntityState.Deleted" /> state when <see cref="M:System.Data.Objects.ObjectContext.SaveChanges" /> was called.</returns>
      <param name="acceptChangesDuringSave">This parameter is needed for client-side transaction support. If true, the change tracking on all objects is reset after <see cref="M:System.Data.Objects.ObjectContext.SaveChanges(System.Boolean)" /> finishes. If false, you must call the <see cref="M:System.Data.Objects.ObjectContext.AcceptAllChanges" /> method after <see cref="M:System.Data.Objects.ObjectContext.SaveChanges(System.Boolean)" />. </param>
      <exception cref="T:System.Data.OptimisticConcurrencyException">An optimistic concurrency violation has occurred.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.SaveChanges(System.Data.Objects.SaveOptions)">
      <summary>Persists all updates to the data source with the specified <see cref="T:System.Data.Objects.SaveOptions" />.</summary>
      <returns>The number of objects in an <see cref="F:System.Data.EntityState.Added" />, <see cref="F:System.Data.EntityState.Modified" />, or <see cref="F:System.Data.EntityState.Deleted" /> state when <see cref="M:System.Data.Objects.ObjectContext.SaveChanges" /> was called.</returns>
      <param name="options">A <see cref="T:System.Data.Objects.SaveOptions" /> value that determines the behavior of the operation.</param>
      <exception cref="T:System.Data.OptimisticConcurrencyException">An optimistic concurrency violation has occurred.</exception>
    </member>
    <member name="E:System.Data.Objects.ObjectContext.SavingChanges">
      <summary>Occurs when changes are saved to the data source. </summary>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.Translate``1(System.Data.Common.DbDataReader)">
      <summary>Translates a <see cref="T:System.Data.Common.DbDataReader" /> that contains rows of entity data to objects of the requested entity type.</summary>
      <returns>An enumeration of objects of type <paramref name="TResult" />.</returns>
      <param name="reader">The <see cref="T:System.Data.Common.DbDataReader" /> that contains entity data to translate into entity objects.</param>
      <typeparam name="TElement"></typeparam>
      <exception cref="T:System.ArgumentNullException">When <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.Translate``1(System.Data.Common.DbDataReader,System.String,System.Data.Objects.MergeOption)">
      <summary>Translates a <see cref="T:System.Data.Common.DbDataReader" /> that contains rows of entity data to objects of the requested entity type, in a specific entity set, and with the specified merge option.</summary>
      <returns>An enumeration of objects of type <paramref name="TResult" />.</returns>
      <param name="reader">The <see cref="T:System.Data.Common.DbDataReader" /> that contains entity data to translate into entity objects.</param>
      <param name="entitySetName">The entity set of the <paramref name="TResult" /> type.</param>
      <param name="mergeOption">The <see cref="T:System.Data.Objects.MergeOption" /> to use when translated objects are added to the object context. The default is <see cref="F:System.Data.Objects.MergeOption.AppendOnly" />.</param>
      <typeparam name="TEntity"></typeparam>
      <exception cref="T:System.ArgumentNullException">When <paramref name="reader" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">When the supplied <paramref name="mergeOption" /> is not a valid <see cref="T:System.Data.Objects.MergeOption" /> value.</exception>
      <exception cref="T:System.InvalidOperationException">When the supplied <paramref name="entitySetName" /> is not a valid entity set for the <paramref name="TResult" /> type. </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.TryGetObjectByKey(System.Data.EntityKey,System.Object@)">
      <summary>Returns an object that has the specified entity key.</summary>
      <returns>true if the object was retrieved successfully. false if the <paramref name="key" /> is temporary, the connection is null, or the <paramref name="value" /> is null.</returns>
      <param name="key">The key of the object to be found.</param>
      <param name="value">When this method returns, contains the object.</param>
      <exception cref="T:System.ArgumentException">Incompatible metadata for <paramref name="key" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="T:System.Data.Objects.ObjectContextOptions">
      <summary>Defines options that affect the behavior of the <see cref="T:System.Data.Objects.ObjectContext" />. </summary>
    </member>
    <member name="P:System.Data.Objects.ObjectContextOptions.LazyLoadingEnabled">
      <summary>Gets or sets a Boolean value that determines whether related objects are loaded automatically when a navigation property is accessed.</summary>
      <returns>A <see cref="T:System.Boolean" /> value that is true when lazy loading is enabled; otherwise false.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectContextOptions.ProxyCreationEnabled">
      <summary>Gets or sets a Boolean value that determines whether proxy instances are created for custom data classes that are persistence ignorant. </summary>
      <returns>A <see cref="T:System.Boolean" /> value that is true when proxies are created; otherwise false. The default value is true.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectContextOptions.UseLegacyPreserveChangesBehavior">
      <summary>Gets or sets a <see cref="T:System.Boolean" /> value that determines whether to use the legacy <see cref="F:System.Data.Objects.MergeOption.PreserveChanges" /> behavior. </summary>
      <returns>true if the legacy <see cref="F:System.Data.Objects.MergeOption.PreserveChanges" /> behavior should be used; otherwise, false.</returns>
    </member>
    <member name="T:System.Data.Objects.ObjectMaterializedEventArgs">
      <summary>Contains the data for the <see cref="E:System.Data.Objects.ObjectContext.ObjectMaterialized" /> event.</summary>
    </member>
    <member name="P:System.Data.Objects.ObjectMaterializedEventArgs.Entity">
      <summary>Gets the entity object that was created.</summary>
      <returns>The entity object that was created.</returns>
    </member>
    <member name="T:System.Data.Objects.ObjectMaterializedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Data.Objects.ObjectContext.ObjectMaterialized" /> event of the <see cref="T:System.Data.Objects.ObjectContext" />.</summary>
      <param name="sender">The <see cref="T:System.Data.Objects.ObjectContext" /> instance that triggered the event. </param>
      <param name="e">An <see cref="T:System.Data.Objects.ObjectMaterializedEventArgs" /> object that contains the event data. </param>
    </member>
    <member name="T:System.Data.Objects.ObjectParameter">
      <summary>Represents a query parameter that is passed to an object query. </summary>
    </member>
    <member name="M:System.Data.Objects.ObjectParameter.#ctor(System.String,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Objects.ObjectParameter" /> class with the specified name and value. </summary>
      <param name="name">The parameter name. This name should not include the "@" parameter marker that is used in Entity SQL statements, only the actual name. The first character of the expression must be a letter. Any successive characters in the expression must be either letters, numbers, or an underscore (_) character.</param>
      <param name="value">The initial value (and inherently, the type) of the parameter.</param>
      <exception cref="T:System.ArgumentNullException">If the value of either argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">If the value of the name argument is not valid. Parameter names must start with a letter and can only contain letters, numbers, and underscores.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectParameter.#ctor(System.String,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Objects.ObjectParameter" /> class with the specified name and type. </summary>
      <param name="name">The parameter name. This name should not include the "@" parameter marker that is used in the Entity SQL statements, only the actual name. The first character of the expression must be a letter. Any successive characters in the expression must be either letters, numbers, or an underscore (_) character.</param>
      <param name="type">The common language runtime (CLR) type of the parameter.</param>
      <exception cref="T:System.ArgumentNullException">If the value of either argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">If the value of the name argument is invalid. Parameter names must start with a letter and can only contain letters, numbers, and underscores.</exception>
    </member>
    <member name="P:System.Data.Objects.ObjectParameter.Name">
      <summary>Gets the parameter name, which can only be set through a constructor.</summary>
      <returns>The parameter name, which can only be set through a constructor.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectParameter.ParameterType">
      <summary>Gets the parameter type.</summary>
      <returns>The <see cref="T:System.Type" /> of the parameter.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectParameter.Value">
      <summary>Gets or sets the parameter value.</summary>
      <returns>The parameter value.</returns>
    </member>
    <member name="T:System.Data.Objects.ObjectParameterCollection">
      <summary>Represents the query parameters as <see cref="T:System.Data.Objects.ObjectParameter" /> objects that are defined in an <see cref="T:System.Data.Objects.ObjectQuery`1" />. </summary>
    </member>
    <member name="M:System.Data.Objects.ObjectParameterCollection.Add(System.Data.Objects.ObjectParameter)">
      <summary>Adds the specified <see cref="T:System.Data.Objects.ObjectParameter" /> to the collection.</summary>
      <param name="parameter">The parameter to add to the collection.</param>
      <exception cref="T:System.ArgumentNullException">The<paramref name=" parameter" /> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="parameter" /> argument already exists in the collection. This behavior differs from that of most collections that allow duplicate entries. -or-Another parameter with the same name as the <paramref name="parameter" /> argument already exists in the collection. Note that the lookup is case-insensitive. This behavior differs from that of most collections, and is more like that of a <see cref="T:System.Collections.Generic.Dictionary" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The type of the <paramref name="parameter" /> is not valid.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectParameterCollection.Clear">
      <summary>Deletes all <see cref="T:System.Data.Objects.ObjectParameter" /> instances from the collection.</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectParameterCollection.Contains(System.Data.Objects.ObjectParameter)">
      <summary>Checks for the existence of a specified <see cref="T:System.Data.Objects.ObjectParameter" /> in the collection by reference.</summary>
      <returns>Returns true if the parameter object was found in the collection; otherwise, false.  </returns>
      <param name="parameter">The <see cref="T:System.Data.Objects.ObjectParameter" /> to find in the collection.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="parameter" /> argument is null.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectParameterCollection.Contains(System.String)">
      <summary>Determines whether an <see cref="T:System.Data.Objects.ObjectParameter" /> with the specified name is in the collection.</summary>
      <returns>Returns true if a parameter with the specified name was found in the collection; otherwise, false.</returns>
      <param name="name">The name of the parameter to look for in the collection. This name should not include the "@" parameter marker that is used in the Entity SQL statements, only the actual name.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectParameterCollection.CopyTo(System.Data.Objects.ObjectParameter[],System.Int32)">
      <summary>Allows the parameters in the collection to be copied into a supplied array, starting with the object at the specified index.</summary>
      <param name="array">The array into which to copy the parameters.</param>
      <param name="index">The index in the array at which to start copying the parameters.</param>
    </member>
    <member name="P:System.Data.Objects.ObjectParameterCollection.Count">
      <summary>Gets the number of parameters currently in the collection.</summary>
      <returns>The number of <see cref="T:System.Data.Objects.ObjectParameter" /> objects that are currently in the collection.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectParameterCollection.Item(System.String)">
      <summary>Provides an indexer that allows callers to retrieve parameters by name.</summary>
      <returns>The <see cref="T:System.Data.Objects.ObjectParameter" /> instance.</returns>
      <param name="name">The name of the parameter to find. This name should not include the "@" parameter marker that is used in the Entity SQL statements, only the actual name.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">No parameter with the specified name is found in the collection.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectParameterCollection.Remove(System.Data.Objects.ObjectParameter)">
      <summary>Removes an instance of an <see cref="T:System.Data.Objects.ObjectParameter" /> from the collection by reference if it exists in the collection.  </summary>
      <returns>Returns true if the parameter object was found and removed from the collection; otherwise, false. </returns>
      <param name="parameter">An object to remove from the collection.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="parameter" /> argument is null.</exception>
    </member>
    <member name="P:System.Data.Objects.ObjectParameterCollection.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Gets a value that indicates whether the collection is read-only or can be modified.</summary>
      <returns>A Boolean value that is true if the collection is read-only and false of the collection can be modified.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectParameterCollection.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Returns a typed enumerator over the collection. </summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> of type <see cref="T:System.Data.Objects.ObjectParameter" />.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectParameterCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an untyped enumerator over the collection. </summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> instance.</returns>
    </member>
    <member name="T:System.Data.Objects.ObjectQuery">
      <summary>Implements common functionality for queries against a conceptual model using both LINQ to Entities and <see cref="T:System.Data.Objects.ObjectQuery`1" />.</summary>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery.CommandText">
      <summary>Returns the command text for the query.</summary>
      <returns>A string value.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery.Context">
      <summary>Gets the object context associated with this object query.</summary>
      <returns>The <see cref="T:System.Data.Objects.ObjectContext" /> associated with this <see cref="T:System.Data.Objects.ObjectQuery`1" /> instance.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery.EnablePlanCaching">
      <summary>Gets or sets a value that indicates whether the query plan should be cached.</summary>
      <returns>A value that indicates whether the query plan should be cached.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery.Execute(System.Data.Objects.MergeOption)">
      <summary>Executes the untyped object query with the specified merge option.</summary>
      <returns>An <see cref="T:System.Data.Objects.ObjectResult`1" /> that contains a collection of entity objects returned by the query.</returns>
      <param name="mergeOption">The <see cref="T:System.Data.Objects.MergeOption" /> to use when executing the query. The default is <see cref="F:System.Data.Objects.MergeOption.AppendOnly" />.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery.GetResultType">
      <summary>Returns information about the result type of the query.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> value that contains information about the result type of the query.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery.MergeOption">
      <summary>Gets or sets how objects returned from a query are added to the object context. </summary>
      <returns>The query <see cref="T:System.Data.Objects.MergeOption" />.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery.Parameters">
      <summary>Gets the parameter collection for this object query.</summary>
      <returns>The parameter collection for this <see cref="T:System.Data.Objects.ObjectQuery`1" />.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>Gets a value that indicates whether the collection returned by the query contains collection objects.</summary>
      <returns>A Boolean value.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery.System#ComponentModel#IListSource#GetList">
      <summary>Returns the collection as an <see cref="T:System.Collections.IList" /> used for data binding.</summary>
      <returns>An <see cref="T:System.Collections.IList" /> of entity objects.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery.System#Linq#IQueryable#ElementType">
      <summary>Gets the result element type for this query instance.</summary>
      <returns>A <see cref="T:System.Type" /> that is the result element type for this query instance.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery.System#Linq#IQueryable#Expression">
      <summary>Gets the expression describing this query. </summary>
      <returns>The LINQ <see cref="T:System.Linq.Expressions.Expression" /> that describes this query.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery.System#Linq#IQueryable#Provider">
      <summary>Gets the LINQ <see cref="T:System.Linq.IQueryProvider" /> associated with this query instance.</summary>
      <returns>The <see cref="T:System.Linq.IQueryProvider" /> associated with this query instance.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery.ToTraceString">
      <summary>Returns the commands to execute against the data source.</summary>
      <returns>A string that represents the commands that the query executes against the data source.</returns>
    </member>
    <member name="T:System.Data.Objects.ObjectQuery`1">
      <summary>Represents a typed query against a conceptual model in a given object context. </summary>
      <typeparam name="T">The entity type of the query.</typeparam>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.#ctor(System.String,System.Data.Objects.ObjectContext)">
      <summary>Creates a new <see cref="T:System.Data.Objects.ObjectQuery`1" /> instance using the specified Entity SQL command as the initial query.</summary>
      <param name="commandText">The Entity SQL query.</param>
      <param name="context">The <see cref="T:System.Data.Objects.ObjectContext" /> on which to execute the query.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.#ctor(System.String,System.Data.Objects.ObjectContext,System.Data.Objects.MergeOption)">
      <summary>Creates a new <see cref="T:System.Data.Objects.ObjectQuery`1" /> instance using the specified Entity SQL command as the initial query and the specified merge option.</summary>
      <param name="commandText">The Entity SQL query.</param>
      <param name="context">The <see cref="T:System.Data.Objects.ObjectContext" /> on which to execute the query.</param>
      <param name="mergeOption">Specifies how the entities that are retrieved through this query should be merged with the entities that have been returned from previous queries against the same <see cref="T:System.Data.Objects.ObjectContext" />.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Distinct">
      <summary>Limits the query to unique results.</summary>
      <returns>A new <see cref="T:System.Data.Objects.ObjectQuery`1" /> instance that is equivalent to the original instance with SELECT DISTINCT applied.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Except(System.Data.Objects.ObjectQuery{`0})">
      <summary>Limits the query results by excluding results based on the results of another object query.</summary>
      <returns>A new <see cref="T:System.Data.Objects.ObjectQuery`1" /> instance that is equivalent to the original instance with EXCEPT applied based on the specified <paramref name="query" />.</returns>
      <param name="query">An <see cref="T:System.Data.Objects.ObjectQuery`1" /> that represents the results to exclude from the query.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="query" /> parameter is null or an empty string.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Execute(System.Data.Objects.MergeOption)">
      <summary>Executes the object query with the specified merge option.</summary>
      <returns>An <see cref="T:System.Data.Objects.ObjectResult`1" /> that contains a collection of entity objects returned by the query.</returns>
      <param name="mergeOption">The <see cref="T:System.Data.Objects.MergeOption" /> to use when executing the query. The default is <see cref="F:System.Data.Objects.MergeOption.AppendOnly" />.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.GroupBy(System.String,System.String,System.Data.Objects.ObjectParameter[])">
      <summary>Groups the query results by the specified criteria.</summary>
      <returns>A new <see cref="T:System.Data.Objects.ObjectQuery`1" /> instance of type <see cref="T:System.Data.Common.DbDataRecord" /> that is equivalent to the original instance with GROUP BY applied. </returns>
      <param name="keys">The key columns by which to group the results.</param>
      <param name="projection">The list of selected properties that defines the projection. </param>
      <param name="parameters">Zero or more parameters that are used in this method.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="query" /> parameter is null or an empty string.-or-The <paramref name="projection" /> parameter is null or an empty string.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Include(System.String)">
      <summary>Specifies the related objects to include in the query results.</summary>
      <returns>A new <see cref="T:System.Data.Objects.ObjectQuery`1" /> with the defined query path.</returns>
      <param name="path">Dot-separated list of related objects to return in the query results.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is empty.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Intersect(System.Data.Objects.ObjectQuery{`0})">
      <summary>Limits the query results by including only the results that exist in another object query. </summary>
      <returns>A new <see cref="T:System.Data.Objects.ObjectQuery`1" /> instance that is equivalent to the original instance with INTERSECT applied based on the specified <paramref name="query" />.</returns>
      <param name="query">An <see cref="T:System.Data.Objects.ObjectQuery`1" /> that represents the results to include in the query.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="query" /> parameter is null or is an empty string.</exception>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery`1.Name">
      <summary>Gets or sets the name of this object query.</summary>
      <returns>A string value that is the name of this <see cref="T:System.Data.Objects.ObjectQuery`1" />.</returns>
      <exception cref="T:System.ArgumentException">The value specified on set is not valid.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.OfType``1">
      <summary>Limits the query to only results of a specific type.</summary>
      <returns>A new <see cref="T:System.Data.Objects.ObjectQuery`1" /> instance that is equivalent to the original instance with OFTYPE applied.</returns>
      <typeparam name="TResultType">The type of the <see cref="T:System.Data.Objects.ObjectResult`1" /> returned when the query is executed with the applied filter.</typeparam>
      <exception cref="T:System.Data.EntitySqlException">The type specified is not valid.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.OrderBy(System.String,System.Data.Objects.ObjectParameter[])">
      <summary>Orders the query results by the specified criteria.</summary>
      <returns>A new <see cref="T:System.Data.Objects.ObjectQuery`1" /> instance that is equivalent to the original instance with ORDER BY applied. </returns>
      <param name="keys">The key columns by which to order the results.</param>
      <param name="parameters">Zero or more parameters that are used in this method.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="keys" /> or <paramref name="parameters" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="key" /> is an empty string.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Select(System.String,System.Data.Objects.ObjectParameter[])">
      <summary>Limits the query results to only the properties that are defined in the specified projection.</summary>
      <returns>A new <see cref="T:System.Data.Objects.ObjectQuery`1" /> instance of type <see cref="T:System.Data.Common.DbDataRecord" /> that is equivalent to the original instance with SELECT applied. </returns>
      <param name="projection">The list of selected properties that defines the projection.</param>
      <param name="parameters">Zero or more parameters that are used in this method.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="projection" /> is null.-or-<paramref name="parameters" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="projection" /> is an empty string.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.SelectValue``1(System.String,System.Data.Objects.ObjectParameter[])">
      <summary>Limits the query results to only the property specified in the projection.</summary>
      <returns>A new <see cref="T:System.Data.Objects.ObjectQuery`1" /> instance of a type compatible with the specific projection. The returned <see cref="T:System.Data.Objects.ObjectQuery`1" /> is equivalent to the original instance with SELECT VALUE applied. </returns>
      <param name="projection">The projection list.</param>
      <param name="parameters">An optional set of query parameters that should be in scope when parsing.</param>
      <typeparam name="TResultType">The type of the <see cref="T:System.Data.Objects.ObjectQuery`1" /> returned by the <see cref="M:System.Data.Objects.ObjectQuery`1.SelectValue``1(System.String,System.Data.Objects.ObjectParameter[])" /> method.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="projection" /> is null.-or-<paramref name="parameters" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="projection" /> is an empty string.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Skip(System.String,System.String,System.Data.Objects.ObjectParameter[])">
      <summary>Orders the query results by the specified criteria and skips a specified number of results.</summary>
      <returns>A new <see cref="T:System.Data.Objects.ObjectQuery`1" /> instance that is equivalent to the original instance with both ORDER BY and SKIP applied. </returns>
      <param name="keys">The key columns by which to order the results.</param>
      <param name="count">The number of results to skip. This must be either a constant or a parameter reference.</param>
      <param name="parameters">An optional set of query parameters that should be in scope when parsing.</param>
      <exception cref="T:System.ArgumentNullException">Any argument is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keys" /> is an empty string.-or-<paramref name="count" /> is an empty string.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Returns an enumerator that iterates through the results of the query.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> object that can be used to iterate through the results.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Top(System.String,System.Data.Objects.ObjectParameter[])">
      <summary>Limits the query results to a specified number of items.</summary>
      <returns>A new <see cref="T:System.Data.Objects.ObjectQuery`1" /> instance that is equivalent to the original instance with TOP applied. </returns>
      <param name="count">The number of items in the results as a string. </param>
      <param name="parameters">An optional set of query parameters that should be in scope when parsing.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="count" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="count" /> is an empty string.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Union(System.Data.Objects.ObjectQuery{`0})">
      <summary>Combines the results of the query with the results of another object query, without any duplicates. </summary>
      <returns>A new <see cref="T:System.Data.Objects.ObjectQuery`1" /> instance that is equivalent to the original instance with UNION applied to add the results of the specified <paramref name="query" />.</returns>
      <param name="query">An <see cref="T:System.Data.Objects.ObjectQuery`1" /> that represents the results to add.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="query" /> parameter is null.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.UnionAll(System.Data.Objects.ObjectQuery{`0})">
      <summary>Combines the results of the query with the results of another object query, including all duplicates. </summary>
      <returns>A new <see cref="T:System.Data.Objects.ObjectQuery`1" /> instance that is equivalent to the original instance with UNION ALL applied to add the results of the specified <paramref name="query" />.</returns>
      <param name="query">An <see cref="T:System.Data.Objects.ObjectQuery`1" /> that represents the results to add.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="query" /> parameter is null.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Where(System.String,System.Data.Objects.ObjectParameter[])">
      <summary>Limits the query to results that match specified filtering criteria.</summary>
      <returns>A new <see cref="T:System.Data.Objects.ObjectQuery`1" /> instance that is equivalent to the original instance with WHERE applied.</returns>
      <param name="predicate">The filter predicate.</param>
      <param name="parameters">Zero or more parameters that are used in this method.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> is null.-or-<paramref name="parameters" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="predicate" /> is an empty string.</exception>
    </member>
    <member name="T:System.Data.Objects.ObjectResult">
      <summary>The base class for the results of an object query against a conceptual model.</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectResult.Dispose">
      <summary>Performs tasks associated with freeing, releasing, or resetting resources.</summary>
    </member>
    <member name="P:System.Data.Objects.ObjectResult.ElementType">
      <summary>When overridden in a derived type, gets the type of the generic <see cref="T:System.Data.Objects.ObjectResult`1" />.</summary>
      <returns>A <see cref="T:System.Type" /> that is the type of the generic <see cref="T:System.Data.Objects.ObjectResult`1" />.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectResult.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the query results.</summary>
      <returns>An enumerator that iterates through the query results.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectResult.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>Gets a value that indicates whether the collection returned by the query contains collection objects.</summary>
      <returns>A Boolean value.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectResult.System#ComponentModel#IListSource#GetList">
      <summary>Returns the results in a format useful for data binding.</summary>
      <returns>An <see cref="T:System.Collections.IList" /> of entity objects.</returns>
    </member>
    <member name="T:System.Data.Objects.ObjectResult`1">
      <summary>Represents the result of an <see cref="T:System.Data.Objects.ObjectQuery`1" /> as an enumerable collection of objects.</summary>
      <typeparam name="T">The entity type of the result.</typeparam>
    </member>
    <member name="M:System.Data.Objects.ObjectResult`1.Dispose">
      <summary>Performs tasks associated with freeing, releasing, or resetting resources.</summary>
    </member>
    <member name="P:System.Data.Objects.ObjectResult`1.ElementType">
      <summary>Gets the type of the <see cref="T:System.Data.Objects.ObjectResult`1" />.</summary>
      <returns>A <see cref="T:System.Type" /> that is the type of the <see cref="T:System.Data.Objects.ObjectResult`1" />.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectResult`1.GetEnumerator">
      <summary>Returns an enumerator that iterates through the query results.</summary>
      <returns>An enumerator that iterates through the query results.</returns>
    </member>
    <member name="T:System.Data.Objects.ObjectSet`1">
      <summary>Represents a typed entity set that is used to perform create, read, update, and delete operations. </summary>
      <typeparam name="TEntity">The entity type.</typeparam>
    </member>
    <member name="M:System.Data.Objects.ObjectSet`1.AddObject(`0)">
      <summary>Adds an object to the object context in the current entity set. </summary>
      <param name="entity">The object to add.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectSet`1.ApplyCurrentValues(`0)">
      <summary>Copies the scalar values from the supplied object into the object in the <see cref="T:System.Data.Objects.ObjectContext" /> that has the same key.</summary>
      <returns>The updated object.</returns>
      <param name="currentEntity">The detached object that has property updates to apply to the original object. The entity key of <paramref name="currentEntity" /> must match the <see cref="P:System.Data.Objects.ObjectStateEntry.EntityKey" /> property of an entry in the <see cref="T:System.Data.Objects.ObjectContext" />.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectSet`1.ApplyOriginalValues(`0)">
      <summary>Sets the <see cref="P:System.Data.Objects.ObjectStateEntry.OriginalValues" /> property of an <see cref="T:System.Data.Objects.ObjectStateEntry" /> to match the property values of a supplied object.</summary>
      <returns>The updated object.</returns>
      <param name="originalEntity">The detached object that has property updates to apply to the original object. The entity key of <paramref name="originalEntity" /> must match the <see cref="P:System.Data.Objects.ObjectStateEntry.EntityKey" /> property of an entry in the <see cref="T:System.Data.Objects.ObjectContext" />.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectSet`1.Attach(`0)">
      <summary>Attaches an object or object graph to the object context in the current entity set. </summary>
      <param name="entity">The object to attach.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectSet`1.CreateObject``1">
      <summary>Creates an instance of the specified type.</summary>
      <returns>An instance of the requested type <paramref name="T" />, or an instance of a proxy type that corresponds to the type <paramref name="T" />.</returns>
      <typeparam name="T">Type of object to be returned.</typeparam>
    </member>
    <member name="M:System.Data.Objects.ObjectSet`1.CreateObject">
      <summary>Creates a new entity type object.</summary>
      <returns>The new entity type object, or an instance of a proxy type that corresponds to the entity type.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectSet`1.DeleteObject(`0)">
      <summary>Marks an object for deletion. </summary>
      <param name="entity">An object that represents the entity to delete. The object can be in any state except <see cref="F:System.Data.EntityState.Detached" />. </param>
    </member>
    <member name="M:System.Data.Objects.ObjectSet`1.Detach(`0)">
      <summary>Removes the object from the object context.</summary>
      <param name="entity">Object to be detached. Only the <paramref name="entity" /> is removed; if there are any related objects that are being tracked by the same <see cref="T:System.Data.Objects.ObjectStateManager" />, those will not be detached automatically.</param>
    </member>
    <member name="P:System.Data.Objects.ObjectSet`1.EntitySet">
      <summary>Gets the metadata of the entity set represented by this <see cref="T:System.Data.Objects.ObjectSet`1" /> instance.</summary>
      <returns>An <see cref="T:System.Data.Metadata.Edm.EntitySet" /> object. </returns>
    </member>
    <member name="T:System.Data.Objects.ObjectStateEntry">
      <summary>Maintains state and key information for objects and relationships and change tracking for object properties. </summary>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.AcceptChanges">
      <summary>Accepts the current values as original values.</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.ApplyCurrentValues(System.Object)">
      <summary>Sets the current values of the entry to match the property values of a supplied object.</summary>
      <param name="currentEntity">The detached object that has updated values to apply to the object. <paramref name="currentEntity " />can also be the object's entity key.</param>
      <exception cref="T:System.ArgumentNullException">When <paramref name="currentEntity " />is null.</exception>
      <exception cref="T:System.InvalidOperationException">When the key of the supplied object does not match the <see cref="P:System.Data.Objects.ObjectStateEntry.EntityKey" /> property of the <see cref="T:System.Data.Objects.ObjectStateEntry" />.-or-When the <see cref="T:System.Data.Objects.ObjectStateEntry" /> is an <see cref="T:System.Data.EntityKey" /> entry.-or-When the object is not in the <see cref="T:System.Data.Objects.ObjectStateManager." />-or- The object is in either an <see cref="F:System.Data.EntityState.Added" />, <see cref="F:System.Data.EntityState.Deleted" />, or <see cref="F:System.Data.EntityState.Detached" /> state.-or-The entity key of the supplied object is invalid or has property changes.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.ApplyOriginalValues(System.Object)">
      <summary>Sets the original values of the entry to match the property values of a supplied object.</summary>
      <param name="originalEntity">The detached object that has original values to apply to the object. <paramref name="original" /> can also be the object's entity key.</param>
      <exception cref="T:System.ArgumentNullException">When <paramref name="original" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">When the key of the supplied object does not match the <see cref="P:System.Data.Objects.ObjectStateEntry.EntityKey" /> property of the <see cref="T:System.Data.Objects.ObjectStateEntry" />.-or-When the <see cref="T:System.Data.Objects.ObjectStateEntry" /> is an <see cref="T:System.Data.EntityKey" /> entry.-or-When the object is not in the <see cref="T:System.Data.Objects.ObjectStateManager." />-or- The object is in either an <see cref="F:System.Data.EntityState.Added" /> or <see cref="F:System.Data.EntityState.Detached" /> state.-or-The entity key of the supplied object is invalid or has property changes.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.ChangeState(System.Data.EntityState)">
      <summary>Changes state of the entry to the specified <see cref="T:System.Data.EntityState" /> value.</summary>
      <param name="state">The <see cref="T:System.Data.EntityState" /> value to set for the <see cref="P:System.Data.Objects.ObjectStateEntry.State" /> property of the entry.</param>
      <exception cref="T:System.ArgumentNullException">When <paramref name="original" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">When trying to change the state to <see cref="F:System.Data.EntityState.Detached" /> from any other <see cref="T:System.Data.EntityState." />-or- When trying to change the state of an entity key entry to any state besides <see cref="F:System.Data.EntityState.Unchanged" />.</exception>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.CurrentValues">
      <summary>Gets the current property values of the object or relationship associated with this <see cref="T:System.Data.Objects.ObjectStateEntry" />.</summary>
      <returns>A <see cref="T:System.Data.Objects.CurrentValueRecord" /> that contains the current values of the object or relationship associated with this <see cref="T:System.Data.Objects.ObjectStateEntry" />.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.Delete">
      <summary>Marks an entity as deleted.</summary>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.Entity">
      <summary>Gets the object associated with this <see cref="T:System.Data.Objects.ObjectStateEntry" />.</summary>
      <returns>The object associated with this <see cref="T:System.Data.Objects.ObjectStateEntry" />. </returns>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.EntityKey">
      <summary>Gets the <see cref="T:System.Data.EntityKey" /> associated with the <see cref="T:System.Data.Objects.ObjectStateEntry" />.</summary>
      <returns>The <see cref="T:System.Data.EntityKey" /> associated with the <see cref="T:System.Data.Objects.ObjectStateEntry" />.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.EntitySet">
      <summary>Gets the <see cref="T:System.Data.Metadata.Edm.EntitySetBase" /> for the object or relationship associated with this <see cref="T:System.Data.Objects.ObjectStateEntry" />.</summary>
      <returns>The <see cref="T:System.Data.Metadata.Edm.EntitySetBase" /> of this <see cref="T:System.Data.Objects.ObjectStateEntry" />.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.GetModifiedProperties">
      <summary>Returns the names of an object's properties that have changed since the last time <see cref="M:System.Data.Objects.ObjectContext.SaveChanges" /> was called.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of names as <see cref="T:System.String" />. </returns>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.GetUpdatableOriginalValues">
      <summary>Gets the updatable version of original values of the object associated with this <see cref="T:System.Data.Objects.ObjectStateEntry" />.  </summary>
      <returns>The updatable original values of object data.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.IsRelationship">
      <summary>Gets a Boolean value that indicates whether this <see cref="T:System.Data.Objects.ObjectStateEntry" /> represents a relationship.</summary>
      <returns>A Boolean value that is true if this <see cref="T:System.Data.Objects.ObjectStateEntry" /> represents a relationship; otherwise, false.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.ObjectStateManager">
      <summary>Gets the <see cref="T:System.Data.Objects.ObjectStateManager" /> for this <see cref="T:System.Data.Objects.ObjectStateEntry" />.</summary>
      <returns>The <see cref="T:System.Data.Objects.ObjectStateManager" /> for this <see cref="T:System.Data.Objects.ObjectStateEntry" />.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.OriginalValues">
      <summary>Gets the read-only version of original values of the object or relationship associated with this <see cref="T:System.Data.Objects.ObjectStateEntry" />. To get updatable original values, use <see cref="M:System.Data.Objects.ObjectStateEntry.GetUpdatableOriginalValues" />.</summary>
      <returns>The read-only version of original values of the relationship set entry or entity associated with this <see cref="T:System.Data.Objects.ObjectStateEntry" />.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.RelationshipManager">
      <summary>Returns a <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> instance for the object represented by entry.</summary>
      <returns>A <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> object.</returns>
      <exception cref="T:System.InvalidOperationException">When the <see cref="T:System.Data.Objects.ObjectStateEntry" /> is an <see cref="T:System.Data.EntityKey" /> entry.-or-The object is in a <see cref="F:System.Data.EntityState.Detached" /> state.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.SetModified">
      <summary>Sets the state of the object or relationship to Modified.</summary>
      <exception cref="T:System.InvalidOperationException">The state is not <see cref="F:System.Data.EntityState.Modified" /> or <see cref="F:System.Data.EntityState.Unchanged" />.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.SetModifiedProperty(System.String)">
      <summary>Marks the specified property as modified.</summary>
      <param name="propertyName">An Entity Data Model name.</param>
      <exception cref="T:System.InvalidOperationException">The state is not <see cref="F:System.Data.EntityState.Modified" /> or <see cref="F:System.Data.EntityState.Unchanged" />.</exception>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.State">
      <summary>Gets the state of this <see cref="T:System.Data.Objects.ObjectStateEntry" />.</summary>
      <returns>An <see cref="T:System.Data.EntityState" /> that represents the current state of the object or relationship. </returns>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.System#Data#Objects#DataClasses#IEntityChangeTracker#EntityComplexMemberChanged(System.String,System.Object,System.String)">
      <summary>Notifies the state manager that a complex property has changed.</summary>
      <param name="entityMemberName">The name of the top-level object property that is changing. This property returns the complex object.</param>
      <param name="complexObject">The complex object that contains the property that is changing.</param>
      <param name="complexObjectMemberName">The name of the property on the complex object that is changing.</param>
      <exception cref="T:System.ArgumentNullException">The value of <paramref name="entityMemberName" /> is null (Nothing in Visual Basic).-or- The value of <paramref name="complexObjectMemberName" /> is null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="complexObject" /> is null (Nothing in Visual Basic). Objects cannot have complex properties that are null.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.System#Data#Objects#DataClasses#IEntityChangeTracker#EntityComplexMemberChanging(System.String,System.Object,System.String)">
      <summary>Notifies the state manager that a complex property has a pending change.</summary>
      <param name="entityMemberName">The name of the complex property. This property returns the complex object.</param>
      <param name="complexObject">The complex object that contains the property that is changing.</param>
      <param name="complexObjectMemberName">The name of the property on the complex object that is changing.</param>
      <exception cref="T:System.ArgumentNullException">The value of <paramref name="entityMemberName" /> is null (Nothing in Visual Basic).-or- The value of <paramref name="complexObjectMemberName" /> is null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="complexObject" /> is null (Nothing in Visual Basic). Objects cannot have complex properties that are null.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.System#Data#Objects#DataClasses#IEntityChangeTracker#EntityMemberChanged(System.String)">
      <summary>Notifies the state manager that a property has changed.</summary>
      <param name="entityMemberName">The name of the entity property that has changed.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.System#Data#Objects#DataClasses#IEntityChangeTracker#EntityMemberChanging(System.String)">
      <summary>Notifies the state manager that a property has a pending change.</summary>
      <param name="entityMemberName">The name of the entity property that is changing.</param>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.System#Data#Objects#DataClasses#IEntityChangeTracker#EntityState">
      <summary>Gets the <see cref="T:System.Data.EntityState" /> for the <see cref="T:System.Data.Objects.ObjectStateEntry" />.</summary>
      <returns>The <see cref="T:System.Data.EntityState" /> for the <see cref="T:System.Data.Objects.ObjectStateEntry" />.</returns>
    </member>
    <member name="T:System.Data.Objects.ObjectStateManager">
      <summary>Maintains object state and identity management for entity type instances and relationship instances.</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.#ctor(System.Data.Metadata.Edm.MetadataWorkspace)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Objects.ObjectStateManager" /> class. </summary>
      <param name="metadataWorkspace">The <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" />, which supplies mapping and metadata information.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.ChangeObjectState(System.Object,System.Data.EntityState)">
      <summary>Changes state of the <see cref="T:System.Data.Objects.ObjectStateEntry" /> for a specific object to the specified <paramref name="entityState" />.</summary>
      <returns>The <see cref="T:System.Data.Objects.ObjectStateEntry" /> for the supplied <paramref name="entity" />.</returns>
      <param name="entity">The object for which the state must be changed.</param>
      <param name="entityState">The new state of the object.</param>
      <exception cref="T:System.ArgumentNullException">When <paramref name="entity" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">When the object is not detached and does not have an entry in the state manager.-or-When you try to change the state to <see cref="F:System.Data.EntityState.Detached" /> from any other <see cref="T:System.Data.EntityState." />-or- When <paramref name="state" /> is not a valid <see cref="T:System.Data.EntityState" /> value.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.ChangeRelationshipState(System.Object,System.Object,System.String,System.Data.EntityState)">
      <summary>Changes the state of the relationship between two entity objects that is specified based on the two related objects and the name of the navigation property.</summary>
      <returns>The <see cref="T:System.Data.Objects.ObjectStateEntry" /> for the relationship that was changed.</returns>
      <param name="sourceEntity">The object instance or <see cref="T:System.Data.EntityKey" /> of the source entity at one end of the relationship.</param>
      <param name="targetEntity">The object instance or <see cref="T:System.Data.EntityKey" /> of the target entity at the other end of the relationship.</param>
      <param name="navigationProperty">The name of the navigation property on <paramref name="source" /> that returns the specified <paramref name="target" />.</param>
      <param name="relationshipState">The requested <see cref="T:System.Data.EntityState" /> of the specified relationship.</param>
      <exception cref="T:System.ArgumentNullException">When <paramref name="source" /> or <paramref name="target" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">When trying to change the state of the relationship to a state other than <see cref="F:System.Data.EntityState.Deleted" /> or <see cref="F:System.Data.EntityState.Detached" /> when either <paramref name="source" /> or <paramref name="target" /> is in a <see cref="F:System.Data.EntityState.Deleted" /> state. -or- When you try to change the state of the relationship to a state other than <see cref="F:System.Data.EntityState.Added" /> or <see cref="F:System.Data.EntityState.Detached" /> when either <paramref name="source" /> or <paramref name="target" /> is in an <see cref="F:System.Data.EntityState.Added" /> state. -or-When <paramref name="state" /> is not a valid <see cref="T:System.Data.EntityState" /> value.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.ChangeRelationshipState(System.Object,System.Object,System.String,System.String,System.Data.EntityState)">
      <summary>Changes the state of the relationship between two entity objects that is specified based on the two related objects and the properties of the relationship.</summary>
      <returns>The <see cref="T:System.Data.Objects.ObjectStateEntry" /> for the relationship that was changed.</returns>
      <param name="sourceEntity">The object instance or <see cref="T:System.Data.EntityKey" /> of the source entity at one end of the relationship.</param>
      <param name="targetEntity">The object instance or <see cref="T:System.Data.EntityKey" /> of the target entity at the other end of the relationship.</param>
      <param name="relationshipName">The name of the relationship.</param>
      <param name="targetRoleName">The role name at the <paramref name="target" /> end of the relationship.</param>
      <param name="relationshipState">The requested <see cref="T:System.Data.EntityState" /> of the specified relationship.</param>
      <exception cref="T:System.ArgumentNullException">When <paramref name="source" /> or <paramref name="target" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">When you try to change the state of the relationship to a state other than <see cref="F:System.Data.EntityState.Deleted" /> or <see cref="F:System.Data.EntityState.Detached" /> when either <paramref name="source" /> or <paramref name="target" /> is in a <see cref="F:System.Data.EntityState.Deleted" /> state. -or- When you try to change the state of the relationship to a state other than <see cref="F:System.Data.EntityState.Added" /> or <see cref="F:System.Data.EntityState.Detached" /> when either <paramref name="source" /> or <paramref name="target" /> is in an <see cref="F:System.Data.EntityState.Added" /> state. -or-When <paramref name="state" /> is not a valid <see cref="T:System.Data.EntityState" /> value.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.ChangeRelationshipState``1(``0,System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Data.EntityState)">
      <summary>Changes the state of the relationship between two entity objects that is specified based on the two related objects and a LINQ expression that defines the navigation property.</summary>
      <returns>The <see cref="T:System.Data.Objects.ObjectStateEntry" /> for the relationship that was changed.</returns>
      <param name="sourceEntity">The object instance or <see cref="T:System.Data.EntityKey" /> of the source entity at one end of the relationship.</param>
      <param name="targetEntity">The object instance or <see cref="T:System.Data.EntityKey" /> of the target entity at the other end of the relationship.</param>
      <param name="navigationPropertySelector">A LINQ expression that selects the navigation property on <paramref name="source" /> that returns the specified <paramref name="target" />.</param>
      <param name="relationshipState">The requested <see cref="T:System.Data.EntityState" /> of the specified relationship.</param>
      <typeparam name="TEntity">The entity type of the <paramref name="source" /> object.</typeparam>
      <exception cref="T:System.ArgumentNullException">When <paramref name="source" />, <paramref name="target" />, or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="selector" /> is malformed or cannot return a navigation property.</exception>
      <exception cref="T:System.InvalidOperationException">When you try to change the state of the relationship to a state other than <see cref="F:System.Data.EntityState.Deleted" /> or <see cref="F:System.Data.EntityState.Detached" /> when either <paramref name="source" /> or <paramref name="target" /> is in a <see cref="F:System.Data.EntityState.Deleted" /> state. -or- When you try to change the state of the relationship to a state other than <see cref="F:System.Data.EntityState.Added" /> or <see cref="F:System.Data.EntityState.Detached" /> when either <paramref name="source" /> or <paramref name="target" /> is in an <see cref="F:System.Data.EntityState.Added" /> state. -or-When <paramref name="state" /> is not a valid <see cref="T:System.Data.EntityState" /> value.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.GetObjectStateEntries(System.Data.EntityState)">
      <summary>Returns a collection of <see cref="T:System.Data.Objects.ObjectStateEntry" /> objects for objects or relationships with the given state.</summary>
      <returns>A collection of <see cref="T:System.Data.Objects.ObjectStateEntry" /> objects in the given <see cref="T:System.Data.EntityState" />.</returns>
      <param name="state">An <see cref="T:System.Data.EntityState" /> used to filter the returned <see cref="T:System.Data.Objects.ObjectStateEntry" /> objects. </param>
      <exception cref="T:System.ArgumentException">When <paramref name="state" /> is <see cref="F:System.Data.EntityState.Detached" />.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.GetObjectStateEntry(System.Data.EntityKey)">
      <summary>Returns an <see cref="T:System.Data.Objects.ObjectStateEntry" /> for the object or relationship entry with the specified key.</summary>
      <returns>The corresponding <see cref="T:System.Data.Objects.ObjectStateEntry" /> for the given <see cref="T:System.Data.EntityKey" />.</returns>
      <param name="key">The <see cref="T:System.Data.EntityKey" />.  </param>
      <exception cref="T:System.ArgumentNullException">When <paramref name="key" /> is null.</exception>
      <exception cref="T:System.ArgumentException">When the specified <paramref name="key" /> cannot be found in the state manager.</exception>
      <exception cref="T:System.InvalidOperationException">No entity with the specified <see cref="T:System.Data.EntityKey" /> exists in the <see cref="T:System.Data.Objects.ObjectStateManager" />.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.GetObjectStateEntry(System.Object)">
      <summary>Returns an <see cref="T:System.Data.Objects.ObjectStateEntry" /> for the specified object.</summary>
      <returns>The corresponding <see cref="T:System.Data.Objects.ObjectStateEntry" /> for the given <see cref="T:System.Object" />.</returns>
      <param name="entity">The <see cref="T:System.Object" /> to which the retrieved <see cref="T:System.Data.Objects.ObjectStateEntry" /> belongs.</param>
      <exception cref="T:System.InvalidOperationException">No entity for the specified <see cref="T:System.Object" /> exists in the <see cref="T:System.Data.Objects.ObjectStateManager" />.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.GetRelationshipManager(System.Object)">
      <summary>Returns the <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> that is used by the specified object. </summary>
      <returns>The <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> for the specified object.</returns>
      <param name="entity">The object for which to return the <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" />.</param>
      <exception cref="T:System.InvalidOperationException">When a <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> cannot be returned for the specified <paramref name="entity" />.</exception>
    </member>
    <member name="P:System.Data.Objects.ObjectStateManager.MetadataWorkspace">
      <summary>Gets the <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> associated with this state manager.</summary>
      <returns>The <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> associated with this <see cref="T:System.Data.Objects.ObjectStateManager" />.</returns>
    </member>
    <member name="E:System.Data.Objects.ObjectStateManager.ObjectStateManagerChanged">
      <summary>Occurs when entities are added to or removed from the state manager.</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.TryGetObjectStateEntry(System.Data.EntityKey,System.Data.Objects.ObjectStateEntry@)">
      <summary>Tries to retrieve the corresponding <see cref="T:System.Data.Objects.ObjectStateEntry" /> for the object or relationship with the specified <see cref="T:System.Data.EntityKey" />.</summary>
      <returns>A Boolean value that is true if there is a corresponding <see cref="T:System.Data.Objects.ObjectStateEntry" /> for the given <see cref="T:System.Data.EntityKey" />; otherwise, false.</returns>
      <param name="key">The given <see cref="T:System.Data.EntityKey" />.</param>
      <param name="entry">When this method returns, contains an <see cref="T:System.Data.Objects.ObjectStateEntry" /> for the given <see cref="T:System.Data.EntityKey" /> This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentNullException">A null (Nothing in Visual Basic) value is provided for <paramref name="key" />.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.TryGetObjectStateEntry(System.Object,System.Data.Objects.ObjectStateEntry@)">
      <summary>Tries to retrieve the corresponding <see cref="T:System.Data.Objects.ObjectStateEntry" /> for the specified <see cref="T:System.Object" />.</summary>
      <returns>A Boolean value that is true if there is a corresponding <see cref="T:System.Data.Objects.ObjectStateEntry" /> for the given object; otherwise, false.</returns>
      <param name="entity">The <see cref="T:System.Object" /> to which the retrieved <see cref="T:System.Data.Objects.ObjectStateEntry" /> belongs.</param>
      <param name="entry">When this method returns, contains the <see cref="T:System.Data.Objects.ObjectStateEntry" /> for the given <see cref="T:System.Data.EntityKey" /> This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.TryGetRelationshipManager(System.Object,System.Data.Objects.DataClasses.RelationshipManager@)">
      <summary>Returns the <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> that is used by the specified object. </summary>
      <returns>true if a <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> instance was returned for the supplied <paramref name="entity" />; otherwise false. </returns>
      <param name="entity">The object for which to return the <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" />.</param>
      <param name="relationshipManager">When this method returns, contains the <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> for the <paramref name="entity" />.</param>
    </member>
    <member name="T:System.Data.Objects.OriginalValueRecord">
      <summary>Provides access to the original values of object data.</summary>
    </member>
    <member name="T:System.Data.Objects.ProxyDataContractResolver">
      <summary>This class helps resolve proxy types that were created for persistence-ignorant data classes to the actual types of persistence-ignorant objects. </summary>
    </member>
    <member name="M:System.Data.Objects.ProxyDataContractResolver.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Objects.ProxyDataContractResolver" /> class. </summary>
    </member>
    <member name="M:System.Data.Objects.ProxyDataContractResolver.ResolveName(System.String,System.String,System.Type,System.Runtime.Serialization.DataContractResolver)">
      <summary>During deserialization, maps any xsi:type information to the actual type of the persistence-ignorant object. </summary>
      <returns>Returns the type that the xsi:type is mapped to. Returns null if no known type was found that matches the xsi:type.</returns>
      <param name="typeName">The xsi:type information to map.</param>
      <param name="typeNamespace">The namespace of the xsi:type.</param>
      <param name="declaredType">The declared type.</param>
      <param name="knownTypeResolver">An instance of <see cref="T:System.Data.Objects.ProxyDataContractResolver" />.</param>
    </member>
    <member name="M:System.Data.Objects.ProxyDataContractResolver.TryResolveType(System.Type,System.Type,System.Runtime.Serialization.DataContractResolver,System.Xml.XmlDictionaryString@,System.Xml.XmlDictionaryString@)">
      <summary>During serialization, maps actual types to xsi:type information.</summary>
      <returns>true if the type was resolved; otherwise, false.  </returns>
      <param name="dataContractType">The actual type of the persistence-ignorant object.</param>
      <param name="declaredType">The declared type.</param>
      <param name="knownTypeResolver">An instance of <see cref="T:System.Data.Objects.ProxyDataContractResolver" />.</param>
      <param name="typeName">When this method returns, contains a list of xsi:type declarations.</param>
      <param name="typeNamespace">When this method returns, contains a list of namespaces used.</param>
    </member>
    <member name="T:System.Data.Objects.RefreshMode">
      <summary>Specifies whether property changes made to objects tracked by Object Services are kept or replaced with property values from the data source. </summary>
    </member>
    <member name="F:System.Data.Objects.RefreshMode.ClientWins">
      <summary>Property changes made to objects in the object context are not replaced with values from the data source. On the next call to <see cref="M:System.Data.Objects.ObjectContext.SaveChanges" />, these changes are sent to the data source.</summary>
    </member>
    <member name="F:System.Data.Objects.RefreshMode.StoreWins">
      <summary>Property changes made to objects in the object context are replaced with values from the data source. </summary>
    </member>
    <member name="T:System.Data.Objects.SaveOptions">
      <summary>Specifies the behavior of the object context when the <see cref="M:System.Data.Objects.ObjectContext.SaveChanges(System.Data.Objects.SaveOptions)" /> method is called.</summary>
    </member>
    <member name="F:System.Data.Objects.SaveOptions.None">
      <summary>Changes are saved without the <see cref="M:System.Data.Objects.ObjectContext.DetectChanges" /> or the <see cref="M:System.Data.Objects.ObjectContext.AcceptAllChangesAfterSave" /> methods being called.</summary>
    </member>
    <member name="F:System.Data.Objects.SaveOptions.AcceptAllChangesAfterSave">
      <summary>After changes are saved, the <see cref="M:System.Data.Objects.ObjectContext.AcceptAllChangesAfterSave" /> method is called, which resets change tracking in the <see cref="T:System.Data.Objects.ObjectStateManager" />.</summary>
    </member>
    <member name="F:System.Data.Objects.SaveOptions.DetectChangesBeforeSave">
      <summary>Before changes are saved, the <see cref="M:System.Data.Objects.ObjectContext.DetectChanges" /> method is called to synchronize the property values of objects that are attached to the object context with data in the <see cref="T:System.Data.Objects.ObjectStateManager" />.</summary>
    </member>
    <member name="T:System.Data.Objects.DataClasses.ComplexObject">
      <summary>Base class for complex types.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.ComplexObject.#ctor">
      <summary>Creates an instance of <see cref="T:System.Data.Objects.DataClasses.ComplexObject" />.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.ComplexObject.ReportPropertyChanged(System.String)">
      <summary>Notifies the change tracker that a property of a complex object has changed.</summary>
      <param name="property">The name of the changed property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="property" /> is null.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.ComplexObject.ReportPropertyChanging(System.String)">
      <summary>Notifies the change tracker that a property change is pending on a complex object.</summary>
      <param name="property">The name of the changing property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="property" /> is null.</exception>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmComplexPropertyAttribute">
      <summary>Attribute that indicates that the property represents a complex property.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmComplexPropertyAttribute.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Data.Objects.DataClasses.EdmComplexPropertyAttribute" /> class. </summary>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmComplexTypeAttribute">
      <summary>Attribute that indicates that the class represents a complex type.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmComplexTypeAttribute.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Data.Objects.DataClasses.EdmComplexTypeAttribute" /> class.</summary>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmEntityTypeAttribute">
      <summary>Attribute that indicates that the class represents an entity type. </summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmEntityTypeAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Objects.DataClasses.EdmEntityTypeAttribute" /> class. </summary>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmFunctionAttribute">
      <summary>An attribute that, when applied to a method, indicates that the method is a proxy for a function in the conceptual model or storage model. </summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmFunctionAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Objects.DataClasses.EdmFunctionAttribute" /> class.</summary>
      <param name="namespaceName">The namespace of the mapped-to function.</param>
      <param name="functionName">The name of the mapped-to function.</param>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmFunctionAttribute.FunctionName">
      <summary>The name of the mapped-to function.</summary>
      <returns>The name of the mapped-to function.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmFunctionAttribute.NamespaceName">
      <summary>The namespace of the mapped-to function.</summary>
      <returns>The namespace of the mapped-to function.</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmPropertyAttribute">
      <summary>Base class for attributes that define how properties of types in the object layer are mapped to the properties of entity types or complex types in the conceptual model.</summary>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmRelationshipAttribute">
      <summary>Defines a relationship between two entity types based on an association in the conceptual model.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmRelationshipAttribute.#ctor(System.String,System.String,System.String,System.Data.Metadata.Edm.RelationshipMultiplicity,System.Type,System.String,System.Data.Metadata.Edm.RelationshipMultiplicity,System.Type)">
      <summary>Creates an instance of the <see cref="T:System.Data.Objects.DataClasses.EdmRelationshipAttribute" /> class.</summary>
      <param name="relationshipNamespaceName">The name of the namespace for the association in which this entity participates.</param>
      <param name="relationshipName">The name of a relationship in which this entity participates. </param>
      <param name="role1Name">Name of the role for the type at one end of the association.</param>
      <param name="role1Multiplicity">A value of <see cref="T:System.Data.Metadata.Edm.RelationshipMultiplicity" /> that indicates the multiplicity at one end of the association, such as one or many.</param>
      <param name="role1Type">The type of the entity at one end of the association.</param>
      <param name="role2Name">Name of the role for the type at the other end of the association.</param>
      <param name="role2Multiplicity">A value of <see cref="T:System.Data.Metadata.Edm.RelationshipMultiplicity" /> that indicates the multiplicity at the other end of the association, such as one or many.</param>
      <param name="role2Type">The type of the entity at the other end of the association.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmRelationshipAttribute.#ctor(System.String,System.String,System.String,System.Data.Metadata.Edm.RelationshipMultiplicity,System.Type,System.String,System.Data.Metadata.Edm.RelationshipMultiplicity,System.Type,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Objects.DataClasses.EdmRelationshipAttribute" /> class. </summary>
      <param name="relationshipNamespaceName">The name of the namespace for the association in which this entity participates.</param>
      <param name="relationshipName">The name of a relationship in which this entity participates.</param>
      <param name="role1Name">Name of the role for the type at one end of the association.</param>
      <param name="role1Multiplicity">A value of <see cref="T:System.Data.Metadata.Edm.RelationshipMultiplicity" /> that indicates the multiplicity at one end of the association, such as one or many.</param>
      <param name="role1Type">The type of the entity at one end of the association.</param>
      <param name="role2Name">Name of the role for the type at the other end of the association.</param>
      <param name="role2Multiplicity">A value of <see cref="T:System.Data.Metadata.Edm.RelationshipMultiplicity" /> that indicates the multiplicity at the other end of the association, such as one or many.</param>
      <param name="role2Type">The type of the entity at the other end of the association.</param>
      <param name="isForeignKey">A value that indicates whether the relationship is based on the foreign key value.</param>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipAttribute.IsForeignKey">
      <summary>Gets a Boolean value that indicates whether the relationship is based on the foreign key value.</summary>
      <returns>true if the relationship is based on the foreign key value; otherwise false.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipAttribute.RelationshipName">
      <summary>Name of the relationship. </summary>
      <returns>A <see cref="T:System.String" /> that is the name of a relationship that is defined by this <see cref="T:System.Data.Objects.DataClasses.EdmRelationshipAttribute" />. </returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipAttribute.RelationshipNamespaceName">
      <summary>The namespace for the relationship.</summary>
      <returns>A <see cref="T:System.String" /> that is the namespace for the relationship.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipAttribute.Role1Multiplicity">
      <summary>Multiplicity at one end of the relationship.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.RelationshipMultiplicity" /> value that indicates the multiplicity.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipAttribute.Role1Name">
      <summary>Name of the role at one end of the relationship.</summary>
      <returns>A <see cref="T:System.String" /> that is the name of the role.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipAttribute.Role1Type">
      <summary>Type of the entity at one end of the relationship.</summary>
      <returns>A <see cref="T:System.Type" /> that is the type of the object at this end of the association.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipAttribute.Role2Multiplicity">
      <summary>Multiplicity at the other end of the relationship.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.RelationshipMultiplicity" /> value that indicates the multiplicity.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipAttribute.Role2Name">
      <summary>Name of the role at the other end of the relationship.</summary>
      <returns>A <see cref="T:System.String" /> that is the name of the role.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipAttribute.Role2Type">
      <summary>Type of the entity at the other end of the relationship.</summary>
      <returns>A <see cref="T:System.Type" /> that is the type of the object t the other end of the association. </returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute">
      <summary>Attribute that indicates that the property represents a navigation property.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute.#ctor(System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute" /> class. </summary>
      <param name="relationshipNamespaceName">The namespace name of the relationship property.</param>
      <param name="relationshipName">The name of the relationship. The relationship name is not namespace qualified.</param>
      <param name="targetRoleName">The role name at the other end of the relationship.</param>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute.RelationshipName">
      <summary>Gets the unqualified relationship name. </summary>
      <returns>The relationship name.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute.RelationshipNamespaceName">
      <summary>The namespace name of the navigation property.</summary>
      <returns>A <see cref="T:System.String" /> that is the namespace name.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute.TargetRoleName">
      <summary>Gets the role name at the other end of the relationship.</summary>
      <returns>The target role name is specified by the Role attribute of the other End element in the association that defines this relationship in the conceptual model. For more information, see Association (EDM).</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmScalarPropertyAttribute">
      <summary>Attribute that indicates that the property represents a scalar property.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmScalarPropertyAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Objects.DataClasses.EdmScalarPropertyAttribute" /> class.  </summary>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmScalarPropertyAttribute.EntityKeyProperty">
      <summary>Gets or sets the value that indicates whether the property is part of the entity key.</summary>
      <returns>The value that indicates whether the property is part of the entity key.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmScalarPropertyAttribute.IsNullable">
      <summary>Gets or sets the value that indicates whether the property can have a null value.</summary>
      <returns>The value that indicates whether the property can have a null value.</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmSchemaAttribute">
      <summary>Attribute that indicates that the assembly contains classes that are mapped to entity types in a conceptual model.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmSchemaAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Objects.DataClasses.EdmSchemaAttribute" /> class. </summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmSchemaAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Objects.DataClasses.EdmSchemaAttribute" /> class with a unique value for each model referenced by the assembly. </summary>
      <param name="assemblyGuid">A string that is a unique GUID value for the model in the assembly.</param>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmTypeAttribute">
      <summary>Base class for attributes that define how types in the object layer are mapped to entity types and complex types in the conceptual model.</summary>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmTypeAttribute.Name">
      <summary>The name of the type in the conceptual schema that maps to the class to which this attribute is applied.</summary>
      <returns>A <see cref="T:System.String" /> that is the name.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmTypeAttribute.NamespaceName">
      <summary>The namespace name of the entity object type or complex type in the conceptual schema that maps to this type.</summary>
      <returns>A <see cref="T:System.String" /> that is the namespace name.</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EntityCollection`1">
      <summary>Represents a collection of objects on the "many" end of a relationship. </summary>
      <typeparam name="TEntity">The entity type of the collection.</typeparam>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> class.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.Add(`0)">
      <summary>Adds an object to the collection.</summary>
      <param name="entity">An object to add to the collection. <paramref name="entity" /> must implement <see cref="T:System.Data.Objects.DataClasses.IEntityWithRelationships" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entity " />is null.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.Attach(System.Collections.Generic.IEnumerable{`0})">
      <summary>Defines relationships between an object and a collection of related objects in an object context.</summary>
      <param name="entities">Collection of objects in the object context that are related to the source object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entities" /> collection is null.</exception>
      <exception cref="T:System.InvalidOperationException">The source object or an object in the <paramref name="entities" /> collection is null or is not in an <see cref="F:System.Data.EntityState.Unchanged" /> or <see cref="F:System.Data.EntityState.Modified" /> state.-or-The relationship cannot be defined based on the EDM metadata. This can occur when the association in the conceptual schema does not support a relationship between the two types.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.Attach(`0)">
      <summary>Defines a relationship between two attached objects in an object context.</summary>
      <param name="entity">The object being attached.</param>
      <exception cref="T:System.ArgumentNullException">When the <paramref name="entity" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">When the <paramref name="entity" /> cannot be related to the source object. This can occur when the association in the conceptual schema does not support a relationship between the two types.-or-When either object is null or is not in an <see cref="F:System.Data.EntityState.Unchanged" /> or <see cref="F:System.Data.EntityState.Modified" /> state.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.Clear">
      <summary>Removes all entities from the collection. </summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.Contains(`0)">
      <summary>Determines whether a specific object exists in the collection.</summary>
      <returns>true if the object is found in the <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />; otherwise, false.</returns>
      <param name="entity">The object to locate in the <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.CopyTo(`0[],System.Int32)">
      <summary>Copies all the contents of the collection to an array, starting at the specified index of the target array.</summary>
      <param name="array">The array to copy to.</param>
      <param name="arrayIndex">The zero-based index in the array at which copying begins.</param>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EntityCollection`1.Count">
      <summary>Gets the number of objects that are contained in the collection.</summary>
      <returns>The number of elements that are contained in the <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.CreateSourceQuery">
      <summary>Returns an object query that, when it is executed, returns the same set of objects that exists in the current collection. </summary>
      <returns>An <see cref="T:System.Data.Objects.ObjectQuery`1" /> that represents the entity collection.</returns>
      <exception cref="T:System.InvalidOperationException">When the object is in an <see cref="F:System.Data.EntityState.Added" /> state.-or-When the object is in a <see cref="F:System.Data.EntityState.Detached" /> state with a <see cref="T:System.Data.Objects.MergeOption" /> other than <see cref="F:System.Data.Objects.MergeOption.NoTracking" />.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.GetEnumerator">
      <summary>Returns an enumerator that is used to iterate through the objects in the collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> that iterates through the set of values cached by <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EntityCollection`1.IsReadOnly">
      <summary>Gets a value that indicates whether the <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> is read-only.</summary>
      <returns>Always returns false.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.Load(System.Data.Objects.MergeOption)">
      <summary>Loads related objects into the collection, using the specified merge option.</summary>
      <param name="mergeOption">Specifies how the objects in this collection should be merged with the objects that might have been returned from previous queries against the same <see cref="T:System.Data.Objects.ObjectContext" />.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.OnCollectionDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>Used internally to deserialize entity objects.</summary>
      <param name="context">The streaming context.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.OnSerializing(System.Runtime.Serialization.StreamingContext)">
      <summary>Used internally to serialize entity objects.</summary>
      <param name="context">The streaming context.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.Remove(`0)">
      <summary>Removes an object from the collection and marks the relationship for deletion.</summary>
      <returns>true if item was successfully removed; otherwise, false. </returns>
      <param name="entity">The object to remove from the collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entity" /> object is null.</exception>
      <exception cref="T:System.InvalidOperationException">The<paramref name=" entity " />object is not attached to the same object context.-or-The <paramref name="entity " />object does not have a valid relationship manager.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that is used to iterate through the set of values cached by <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> that iterates through the set of values cached by <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EntityCollection`1.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>Gets a value that indicates whether the related entity collection consists of collection objects. </summary>
      <returns>This property always returns false because the <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> contains objects and not collections.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.System#ComponentModel#IListSource#GetList">
      <summary>Returns the collection as an <see cref="T:System.Collections.IList" /> used for data binding.</summary>
      <returns>An <see cref="T:System.Collections.IList" /> of entity objects.</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EntityObject">
      <summary>Base class for entity types that are generated by the Entity Data Model tools.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityObject.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Objects.DataClasses.EntityObject" /> class.</summary>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EntityObject.EntityKey">
      <summary>Gets or sets the key for this object.</summary>
      <returns>The <see cref="T:System.Data.EntityKey" /> for this object.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EntityObject.EntityState">
      <summary>Gets the entity state of the object.</summary>
      <returns>The <see cref="T:System.Data.EntityState" /> of this object. </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityObject.ReportPropertyChanged(System.String)">
      <summary>Notifies the change tracker that a property has changed.</summary>
      <param name="property">The name of the changed property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="property" /> is null.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityObject.ReportPropertyChanging(System.String)">
      <summary>Notifies the change tracker that a property change is pending.</summary>
      <param name="property">The name of the changing property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="property" /> is null.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityObject.System#Data#Objects#DataClasses#IEntityWithChangeTracker#SetChangeTracker(System.Data.Objects.DataClasses.IEntityChangeTracker)">
      <summary>Specifies the instance of <see cref="T:System.Data.Objects.DataClasses.IEntityChangeTracker" /> that is used to report property changes.</summary>
      <param name="changeTracker">Reference to the change tracker that is used to report property changes.</param>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EntityObject.System#Data#Objects#DataClasses#IEntityWithRelationships#RelationshipManager">
      <summary>Gets the relationship manager used by this object.</summary>
      <returns>The <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> used by this object.</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EntityReference">
      <summary>Base class that implements non-generic functionality for an <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" />.</summary>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EntityReference.EntityKey">
      <summary>Returns the key for the related object. </summary>
      <returns>An <see cref="T:System.Data.EntityKey" /> that is the key of the related object.</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EntityReference`1">
      <summary>Represents a related end of an association with a multiplicity of zero or one. </summary>
      <typeparam name="TEntity">The entity type of the reference.</typeparam>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityReference`1.#ctor">
      <summary>Creates a new instance of <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" />.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityReference`1.Attach(`0)">
      <summary>Creates a many-to-one or one-to-one relationship between two objects in the object context.</summary>
      <param name="entity">The object being attached.</param>
      <exception cref="T:System.ArgumentNullException">When the <paramref name="entity" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">When the <paramref name="entity" /> cannot be related to the current related end. This can occur when the association in the conceptual schema does not support a relationship between the two types.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityReference`1.CreateSourceQuery">
      <summary>Creates an equivalent object query that returns the related object.</summary>
      <returns>An <see cref="T:System.Data.Objects.ObjectQuery`1" /> that returns the related object.</returns>
      <exception cref="T:System.InvalidOperationException">When the object is in an <see cref="F:System.Data.EntityState.Added" /> state.-or-When the object is in a <see cref="F:System.Data.EntityState.Detached" /> state with a <see cref="P:System.Data.Objects.ObjectQuery.MergeOption" /> other than <see cref="F:System.Data.Objects.MergeOption.NoTracking" />.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityReference`1.Load(System.Data.Objects.MergeOption)">
      <summary>Loads the related object for this <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> with the specified merge option.</summary>
      <param name="mergeOption">Specifies how the object should be returned if it already exists in the <see cref="T:System.Data.Objects.ObjectContext" />.</param>
      <exception cref="T:System.InvalidOperationException">The source of the <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> is null.-or-A query returned more than one related end.-or-A query returned zero related ends, and one related end was expected.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityReference`1.OnRefDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>This method is used internally to serialize related entity objects.</summary>
      <param name="context">The serialized stream.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityReference`1.OnSerializing(System.Runtime.Serialization.StreamingContext)">
      <summary>This method is used internally to serialize related entity objects.</summary>
      <param name="context">The serialized stream.</param>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EntityReference`1.Value">
      <summary>Gets or sets the related object returned by this <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" />. </summary>
      <returns>The object returned by this <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" />.</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.IEntityChangeTracker">
      <summary>Defines the facilities that are used by Object Services to track changes that are made to the properties of an object.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IEntityChangeTracker.EntityComplexMemberChanged(System.String,System.Object,System.String)">
      <summary>Notifies the change tracker that a property of a complex type has changed.</summary>
      <param name="entityMemberName">The name of the complex property of the entity type that has changed.</param>
      <param name="complexObject">The complex type that contains the property that changed.</param>
      <param name="complexObjectMemberName">The name of the property that changed on complex type.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IEntityChangeTracker.EntityComplexMemberChanging(System.String,System.Object,System.String)">
      <summary>Notifies the change tracker of a pending change to a complex property.</summary>
      <param name="entityMemberName">The name of the top-level entity property that is changing.</param>
      <param name="complexObject">The complex type that contains the property that is changing.</param>
      <param name="complexObjectMemberName">The name of the property that is changing on complex type.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IEntityChangeTracker.EntityMemberChanged(System.String)">
      <summary>Notifies the change tracker that a property of an entity type has changed.</summary>
      <param name="entityMemberName">The name of the property that has changed.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IEntityChangeTracker.EntityMemberChanging(System.String)">
      <summary>Notifies the change tracker of a pending change to a property of an entity type.</summary>
      <param name="entityMemberName">The name of the property that is changing.</param>
    </member>
    <member name="P:System.Data.Objects.DataClasses.IEntityChangeTracker.EntityState">
      <summary>Gets current state of a tracked object.</summary>
      <returns>An <see cref="T:System.Data.EntityState" /> that is the state of the tracked object.For more information, see Identity Resolution, State Managment, and Change Tracking and Tracking Changes in POCO Entities.</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.IEntityWithChangeTracker">
      <summary>Defines an entity type that implements change tracking. </summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IEntityWithChangeTracker.SetChangeTracker(System.Data.Objects.DataClasses.IEntityChangeTracker)">
      <summary>Gets or sets the <see cref="T:System.Data.Objects.DataClasses.IEntityChangeTracker" /> used to report changes.</summary>
      <param name="changeTracker">The <see cref="T:System.Data.Objects.DataClasses.IEntityChangeTracker" /> used to report changes.</param>
    </member>
    <member name="T:System.Data.Objects.DataClasses.IEntityWithKey">
      <summary>Defines an entity type that exposes an entity key.  </summary>
    </member>
    <member name="P:System.Data.Objects.DataClasses.IEntityWithKey.EntityKey">
      <summary>Gets or sets the <see cref="T:System.Data.EntityKey" /> for instances of entity types that implement this interface.</summary>
      <returns>The <see cref="T:System.Data.EntityKey" />.</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.IEntityWithRelationships">
      <summary>Defines an entity type with a relationship to one or more other entity type.</summary>
    </member>
    <member name="P:System.Data.Objects.DataClasses.IEntityWithRelationships.RelationshipManager">
      <summary>Returns the relationship manager that manages relationships for an instance of an entity type.</summary>
      <returns>The <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> for this entity.</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.IRelatedEnd">
      <summary>Defines the end of a relationship. </summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.Add(System.Data.Objects.DataClasses.IEntityWithRelationships)">
      <summary>Adds an object to the related end.</summary>
      <param name="entity">An object to add to the collection. <paramref name="entity" /> must implement <see cref="T:System.Data.Objects.DataClasses.IEntityWithRelationships" />.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.Add(System.Object)">
      <summary>Adds an object to the related end.</summary>
      <param name="entity">An object to add to the collection.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.Attach(System.Data.Objects.DataClasses.IEntityWithRelationships)">
      <summary>Defines a relationship between two attached objects.</summary>
      <param name="entity">The object being attached. <paramref name="entity" /> must implement <see cref="T:System.Data.Objects.DataClasses.IEntityWithRelationships" />.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.Attach(System.Object)">
      <summary>Defines a relationship between two attached objects.</summary>
      <param name="entity">The object being attached.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.CreateSourceQuery">
      <summary>Returns an <see cref="T:System.Collections.IEnumerable" /> that represents the objects that belong to the related end. </summary>
      <returns>An <see cref="T:System.Collections.IEnumerable" /> that represents the objects that belong to the related end.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.GetEnumerator">
      <summary>Returns an <see cref="T:System.Collections.IEnumerator" /> that iterates through the collection of related objects.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.IRelatedEnd.IsLoaded">
      <summary>Gets a value that indicates whether all related objects have been loaded.</summary>
      <returns>true if the related end contains all the related entities from the database; otherwise, false.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.Load">
      <summary>Loads the related object or objects into this related end with the default merge option.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.Load(System.Data.Objects.MergeOption)">
      <summary>Loads the related object or objects into the related end with the specified merge option.</summary>
      <param name="mergeOption">The <see cref="T:System.Data.Objects.MergeOption" /> to use when merging objects into an existing <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />.</param>
    </member>
    <member name="P:System.Data.Objects.DataClasses.IRelatedEnd.RelationshipName">
      <summary>Gets the name of the relationship in which this related end participates.</summary>
      <returns>The name of the relationship in which this <see cref="T:System.Data.Objects.DataClasses.IRelatedEnd" /> is participating. The relationship name is not namespace qualified. </returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.IRelatedEnd.RelationshipSet">
      <summary>Returns a reference to the metadata for the related end.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.RelationshipSet" /> object that contains metadata for the end of a relationship.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.Remove(System.Data.Objects.DataClasses.IEntityWithRelationships)">
      <summary>Removes an object from the collection of objects at the related end.</summary>
      <returns>true if <paramref name="entity" /> was successfully removed, false if <paramref name="entity" /> was not part of the <see cref="T:System.Data.Objects.DataClasses.IRelatedEnd" />.</returns>
      <param name="entity">The object to remove from the collection. <paramref name="entity" /> must implement <see cref="T:System.Data.Objects.DataClasses.IEntityWithRelationships" />.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.Remove(System.Object)">
      <summary>Removes an object from the collection of objects at the related end.</summary>
      <returns>true if <paramref name="entity" /> was successfully removed; false if <paramref name="entity" /> was not part of the <see cref="T:System.Data.Objects.DataClasses.IRelatedEnd" />.</returns>
      <param name="entity">An object to remove from the collection.</param>
    </member>
    <member name="P:System.Data.Objects.DataClasses.IRelatedEnd.SourceRoleName">
      <summary>Gets the role name at the source end of the relationship.</summary>
      <returns>A <see cref="T:System.String" /> that is the role name.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.IRelatedEnd.TargetRoleName">
      <summary>Gets the role name at the target end of the relationship.</summary>
      <returns>A <see cref="T:System.String" /> that is the role name.</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.RelatedEnd">
      <summary>Base class that implements common functionality for a related end.</summary>
    </member>
    <member name="E:System.Data.Objects.DataClasses.RelatedEnd.AssociationChanged">
      <summary>Occurs when a change is made to a related end. </summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.GetEnumerator">
      <summary>Returns an <see cref="T:System.Collections.IEnumerator" /> that iterates through the collection of related objects.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.RelatedEnd.IsLoaded">
      <summary>Gets a value that indicates whether all related objects have been loaded.</summary>
      <returns>true if the related end contains all the related objects from the database; otherwise, false.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.Load">
      <summary>When overridden in a derived class, loads the related object or objects into the related end with the default merge option.</summary>
      <exception cref="T:System.InvalidOperationException">When the source object was retrieved by using a <see cref="F:System.Data.Objects.MergeOption.NoTracking" /> query and the <see cref="T:System.Data.Objects.MergeOption" /> is not <see cref="F:System.Data.Objects.MergeOption.NoTracking" /> or the related objects are already loaded.-or-When the source object is not attached to the <see cref="T:System.Data.Objects.ObjectContext" />.-or-When the source object is being tracked but is in the <see cref="F:System.Data.EntityState.Added" /> or <see cref="F:System.Data.EntityState.Deleted" /> state or the <see cref="T:System.Data.Objects.MergeOption" /> used for <see cref="M:System.Data.Objects.DataClasses.RelatedEnd.Load" /> is <see cref="F:System.Data.Objects.MergeOption.NoTracking" />. </exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.Load(System.Data.Objects.MergeOption)">
      <summary>When overridden in a derived class, loads an object or objects from the related end with the specified merge option.</summary>
      <param name="mergeOption">The <see cref="T:System.Data.Objects.MergeOption" /> to use when merging objects into an existing <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />.</param>
      <exception cref="T:System.InvalidOperationException">When the source object was retrieved by using a <see cref="F:System.Data.Objects.MergeOption.NoTracking" /> query and the <see cref="T:System.Data.Objects.MergeOption" /> is not <see cref="F:System.Data.Objects.MergeOption.NoTracking" /> or the related objects are already loaded.-or-When the source object is not attached to the <see cref="T:System.Data.Objects.ObjectContext" />.-or-When the source object is being tracked but is in the <see cref="F:System.Data.EntityState.Added" /> or <see cref="F:System.Data.EntityState.Deleted" /> state or the <see cref="T:System.Data.Objects.MergeOption" /> used for <see cref="M:System.Data.Objects.DataClasses.RelatedEnd.Load" /> is <see cref="F:System.Data.Objects.MergeOption.NoTracking" />. </exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>Used internally to deserialize entity objects along with the <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> instances.</summary>
      <param name="context">The serialized stream.</param>
    </member>
    <member name="P:System.Data.Objects.DataClasses.RelatedEnd.RelationshipName">
      <summary>Gets the name of the relationship in which this related end participates.</summary>
      <returns>The name of the relationship in which this <see cref="T:System.Data.Objects.DataClasses.RelatedEnd" /> participates. The relationship name is not namespace qualified.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.RelatedEnd.RelationshipSet">
      <summary>Returns a reference to the metadata for the related end.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.RelationshipSet" /> object that contains metadata for the end of a relationship.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.RelatedEnd.SourceRoleName">
      <summary>Gets the role name at the source end of the relationship.</summary>
      <returns>A <see cref="T:System.String" /> that is the role name.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.System#Data#Objects#DataClasses#IRelatedEnd#Add(System.Data.Objects.DataClasses.IEntityWithRelationships)">
      <summary>Adds an object to the related end.</summary>
      <param name="entity">An object to add to the collection. This object must implement the <see cref="T:System.Data.Objects.DataClasses.IEntityWithRelationships" /> interface.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.System#Data#Objects#DataClasses#IRelatedEnd#Add(System.Object)">
      <summary>Adds an object to the related end.  </summary>
      <param name="entity">An entity instance to add to the related end.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.System#Data#Objects#DataClasses#IRelatedEnd#Attach(System.Data.Objects.DataClasses.IEntityWithRelationships)">
      <summary>Attaches an object at the related end.</summary>
      <param name="entity">The object being attached.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.System#Data#Objects#DataClasses#IRelatedEnd#Attach(System.Object)">
      <summary>Attaches an object to the related end.</summary>
      <param name="entity">An entity instance to attach to the related end.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.System#Data#Objects#DataClasses#IRelatedEnd#CreateSourceQuery">
      <summary>Returns an <see cref="T:System.Collections.IEnumerable" /> that represents the objects that belong to the related end. </summary>
      <returns>An <see cref="T:System.Collections.IEnumerable" /> that represents the objects that belong to the related end.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.System#Data#Objects#DataClasses#IRelatedEnd#Remove(System.Data.Objects.DataClasses.IEntityWithRelationships)">
      <summary>Removes an object from the collection at the related end.</summary>
      <returns>A value that indicates whether the object was removed.</returns>
      <param name="entity">The entity instance to remove from the collection.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.System#Data#Objects#DataClasses#IRelatedEnd#Remove(System.Object)">
      <summary>Removes an object from the related end if the object is part of the related end.  </summary>
      <returns>true if the entity was successfully removed; otherwise, false.</returns>
      <param name="entity">An entity instance to remove from the related end.</param>
    </member>
    <member name="P:System.Data.Objects.DataClasses.RelatedEnd.TargetRoleName">
      <summary>Gets the role name at the target end of the relationship.</summary>
      <returns>A <see cref="T:System.String" /> that is the role name.</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.RelationshipKind">
      <summary>Enumerates the type of the relationship between two or more entities. </summary>
    </member>
    <member name="F:System.Data.Objects.DataClasses.RelationshipKind.Association">
      <summary>The relationship is defined by an association in a conceptual model. For more information, see Association (EDM).</summary>
    </member>
    <member name="T:System.Data.Objects.DataClasses.RelationshipManager">
      <summary>Used to track relationships between objects in the object context.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelationshipManager.Create(System.Data.Objects.DataClasses.IEntityWithRelationships)">
      <summary>Creates a new <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> object.</summary>
      <returns>The requested <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" />.</returns>
      <param name="owner">Reference to the entity that is calling this method.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelationshipManager.GetAllRelatedEnds">
      <summary>Returns an enumeration of all the related ends managed by the relationship manager.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of objects that implement <see cref="T:System.Data.Objects.DataClasses.IRelatedEnd" />. An empty enumeration is returned when the relationships have not yet been populated.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelationshipManager.GetRelatedCollection``1(System.String,System.String)">
      <summary>Gets an <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> of related objects with the specified relationship name and target role name. </summary>
      <returns>The <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> of related objects.</returns>
      <param name="relationshipName">Name of the relationship to navigate. The relationship name is not namespace qualified.</param>
      <param name="targetRoleName">Name of the target role for the navigation. Indicates the direction of navigation across the relationship.</param>
      <typeparam name="TTargetEntity">The type of the returned <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />.</typeparam>
      <exception cref="T:System.InvalidOperationException">The specified role returned an <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> instead of an <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />. </exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelationshipManager.GetRelatedEnd(System.String,System.String)">
      <summary>Returns either an <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> or <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> of the correct type for the specified target role in a relationship. </summary>
      <returns>
        <see cref="T:System.Data.Objects.DataClasses.IRelatedEnd" /> representing the <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> or <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> that was retrieved.</returns>
      <param name="relationshipName">Name of the relationship in which <paramref name="targetRoleName" /> is defined. The relationship name is not namespace qualified.</param>
      <param name="targetRoleName">Target role to use to retrieve the other end of <paramref name="relationshipName" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relationshipName" /> or <paramref name="targetRoleName" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The source type does not match the type of the owner.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="targetRoleName" /> is invalid.-or-Unable to find the relationship type in the metadata.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelationshipManager.GetRelatedReference``1(System.String,System.String)">
      <summary>Gets the <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> for a related object by using the specified combination of relationship name and target role name.</summary>
      <returns>The <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> of a related object.</returns>
      <param name="relationshipName">Name of the relationship to navigate. The relationship name is not namespace qualified.</param>
      <param name="targetRoleName">Name of the target role for the navigation. Indicates the direction of navigation across the relationship.</param>
      <typeparam name="TTargetEntity">The type of the returned <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" />.</typeparam>
      <exception cref="T:System.InvalidOperationException">The specified role returned an <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> instead of an <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" />. </exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelationshipManager.InitializeRelatedCollection``1(System.String,System.String,System.Data.Objects.DataClasses.EntityCollection{``0})">
      <summary>Initializes an existing <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> that was created by using the default constructor.</summary>
      <param name="relationshipName">The relationship name.</param>
      <param name="targetRoleName">The role name of the related end.</param>
      <param name="entityCollection">The <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> to initialize.</param>
      <typeparam name="TTargetEntity">The type of the <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> being initialized.</typeparam>
      <exception cref="T:System.InvalidOperationException">When the provided <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> is already initialized.-or-When the relationship manager is already attached to an <see cref="T:System.Data.Objects.ObjectContext" />. -or-When the relationship manager already contains a relationship with this name and target role.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelationshipManager.InitializeRelatedReference``1(System.String,System.String,System.Data.Objects.DataClasses.EntityReference{``0})">
      <summary>Initializes an existing <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> that was created by using the default constructor.</summary>
      <param name="relationshipName">The relationship name.</param>
      <param name="targetRoleName">The role name of the related end.</param>
      <param name="entityReference">The <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> to initialize.</param>
      <typeparam name="TTargetEntity">The type of the <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> being initialized.</typeparam>
      <exception cref="T:System.InvalidOperationException">When the provided <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> is already initialized.-or-When the relationship manager is already attached to an <see cref="T:System.Data.Objects.ObjectContext" />. -or-When the relationship manager already contains a relationship with this name and target role.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelationshipManager.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>Used internally to deserialize entity objects along with the <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> instances.</summary>
      <param name="context">The serialized stream.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelationshipManager.OnSerializing(System.Runtime.Serialization.StreamingContext)">
      <summary>Called by Object Services to prepare an <see cref="T:System.Data.EntityKey" /> for binary serialization with a serialized relationship. </summary>
      <param name="context">Describes the source and destination of a given serialized stream, and provides an additional caller-defined context.</param>
    </member>
    <member name="T:System.Data.Objects.DataClasses.StructuralObject">
      <summary>Provides support for code generation in the form of helper methods that are used to set field values for properties. </summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Objects.DataClasses.StructuralObject" /> class.  </summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.BinaryEquals(System.Byte[],System.Byte[])">
      <summary>Determines whether the specified byte arrays contain identical values.</summary>
      <returns>True, if both arrays are of the same length and contain the same byte values or if both arrays are null; otherwise, false.</returns>
      <param name="first">The first byte array value to compare.</param>
      <param name="second">The second byte array value to compare.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.DefaultDateTimeValue">
      <summary>Returns the minimum date time value supported by the data source.</summary>
      <returns>A <see cref="T:System.DateTime" /> value that is the minimum date time that is supported by the data source.</returns>
    </member>
    <member name="F:System.Data.Objects.DataClasses.StructuralObject.EntityKeyPropertyName">
      <summary>This constant name is used for change tracking. </summary>
      <returns>Returns a <see cref="T:System.String" /> that is the name of the property that is the key.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.GetValidValue(System.Byte[])">
      <summary>Returns a copy of the current byte value.</summary>
      <returns>A copy of the current byte value.</returns>
      <param name="currentValue">The current byte array value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.GetValidValue``1(``0,System.String,System.Boolean,System.Boolean)">
      <summary>Returns a complex type for the specified property.</summary>
      <returns>A complex type object for the property.</returns>
      <param name="currentValue">A complex object that inherits from <see cref="T:System.Data.Objects.DataClasses.ComplexObject" />.</param>
      <param name="property">The name of the complex property that is the complex object.</param>
      <param name="isNullable">Indicates whether the type supports null values.</param>
      <param name="isInitialized">Indicated whether the type is initialized.</param>
      <typeparam name="T">The type of the complex object being requested. This type must inherit from <see cref="T:System.Data.Objects.DataClasses.ComplexObject" />.</typeparam>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.OnPropertyChanged(System.String)">
      <summary>Raises the <see cref="E:System.Data.Objects.DataClasses.StructuralObject.PropertyChanged" /> event. </summary>
      <param name="property">The name of the changed property.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.OnPropertyChanging(System.String)">
      <summary>Raises the <see cref="E:System.Data.Objects.DataClasses.StructuralObject.PropertyChanging" /> event. </summary>
      <param name="property">The name of the property changing.</param>
    </member>
    <member name="E:System.Data.Objects.DataClasses.StructuralObject.PropertyChanged">
      <summary>Occurs when a property value has changed.</summary>
    </member>
    <member name="E:System.Data.Objects.DataClasses.StructuralObject.PropertyChanging">
      <summary>Occurs when a property value change is a pending.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.ReportPropertyChanged(System.String)">
      <summary>When overridden in a derived class, raises an event that is used to report that a property change has occurred.</summary>
      <param name="property">The name for the changed property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="property" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="property" /> is empty.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.ReportPropertyChanging(System.String)">
      <summary>When overridden in a derived class, raises an event that is used to report that a property change is pending.</summary>
      <param name="property">The name of the changing property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="property" /> is null.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Boolean)">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A <see cref="T:System.Boolean" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Byte)">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A <see cref="T:System.Byte" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Byte[],System.Boolean)">
      <summary>Returns a copy of the supplied byte array, or null if supported.</summary>
      <returns>Returns a copy of the <see cref="T:System.Byte" /> array, or null. </returns>
      <param name="value">The <see cref="T:System.Byte" /> array to validate.</param>
      <param name="isNullable">Boolean that indicates if null values are supported.</param>
      <exception cref="T:System.Data.ConstraintException">If value is null for a non-nullable value.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.DateTime)">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A <see cref="T:System.DateTime" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.DateTimeOffset)">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A <see cref="T:System.DateTimeOffset" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Decimal)">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A <see cref="T:System.Decimal" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Double)">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A <see cref="T:System.Double" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Guid)">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A <see cref="T:System.Guid" /> value</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Int16)">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">An <see cref="T:System.Int16" /> value</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Int32)">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">An <see cref="T:System.Int32" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Int64)">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">An <see cref="T:System.Int64" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Boolean})">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A nullable <see cref="T:System.Boolean" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Byte})">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A nullable <see cref="T:System.Byte" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.DateTime})">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A nullable <see cref="T:System.DateTime" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.DateTimeOffset})">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A nullable <see cref="T:System.DateTimeOffset" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Decimal})">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A nullable <see cref="T:System.Decimal" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Double})">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A <see cref="T:System.Double" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Guid})">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A nullable <see cref="T:System.Guid" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int16})">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A nullable <see cref="T:System.Int16" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int32})">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A nullable <see cref="T:System.Int32" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int64})">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A nullable <see cref="T:System.Int64" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.SByte})">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A nullable <see cref="T:System.SBtye" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Single})">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A nullable <see cref="T:System.Single" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.TimeSpan})">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A nullable <see cref="T:System.TimeSpan" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt16})">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A nullable <see cref="T:System.UInt16" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt32})">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A nullable unsigned integer value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt64})">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A nullable <see cref="T:System.UInt64" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.SByte)">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">An <see cref="T:System.SByte" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Single)">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A <see cref="T:System.Single" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.String,System.Boolean)">
      <summary>Returns a copy of the supplied string, or null if supported.</summary>
      <returns>The supplied <see cref="T:System.String" /> value, or null.</returns>
      <param name="value">A <see cref="T:System.String" /> value.</param>
      <param name="isNullable">
        <see cref="T:System.Boolean" /> that indicates if null values are supported.</param>
      <exception cref="T:System.Data.ConstraintException">If value is null for a non-nullable value.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.TimeSpan)">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A <see cref="T:System.TimeSpan" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt16)">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A <see cref="T:System.UInt16" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt32)">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A <see cref="T:System.UInt32" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt64)">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A <see cref="T:System.UInt64" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue``1(``0,``0,System.String)">
      <summary>Sets a complex object for the specified property. </summary>
      <returns>A complex type that derives from <see cref="T:System.Data.Objects.DataClasses.ComplexObject" />.</returns>
      <param name="oldValue">The original complex object for the property, if any.</param>
      <param name="newValue">The complex object that is being set.</param>
      <param name="property">The complex property that is being set to the complex object.</param>
      <typeparam name="T">The type of the complex object being replaced. This type must inherit from <see cref="T:System.Data.Objects.DataClasses.ComplexObject" />.</typeparam>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.VerifyComplexObjectIsNotNull``1(``0,System.String)">
      <summary>Verifies that a complex object is not null.</summary>
      <returns>The complex object being validated.</returns>
      <param name="complexObject">The complex object that is being validated.</param>
      <param name="propertyName">The complex property on the parent object that is associated with <paramref name="complexObject" />.</param>
      <typeparam name="TComplex">The type of the complex object being verified. This type must inherit from <see cref="T:System.Data.Objects.DataClasses.ComplexObject" />.</typeparam>
      <exception cref="T:System.Data.ConstraintException">When the complex type is null.</exception>
    </member>
    <member name="T:System.Data.Objects.SqlClient.SqlFunctions">
      <summary>Provides common language runtime (CLR) methods that call functions in the database in LINQ to Entities queries. </summary>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Acos(System.Nullable{System.Decimal})">
      <summary>A mathematical function that returns the angle, in radians, whose cosine is the specified numerical value. This angle is called the arccosine.</summary>
      <returns>An angle, measured in radians.</returns>
      <param name="arg1">The cosine of an angle.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Acos(System.Nullable{System.Double})">
      <summary>A mathematical function that returns the angle, in radians, whose cosine is the specified numerical value. This angle is called the arccosine.</summary>
      <returns>The angle, in radians, defined by the input cosine value.</returns>
      <param name="arg1">The cosine of an angle.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Ascii(System.String)">
      <summary>Returns the ASCII code value of the left-most character of a character expression.</summary>
      <returns>The ASCII code of the first character in the input string.</returns>
      <param name="arg">A valid string.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Asin(System.Nullable{System.Decimal})">
      <summary>A mathematical function that returns the angle, in radians, whose sine is the specified numerical value. This angle is called the arcsine.</summary>
      <returns>An angle, measured in radians.</returns>
      <param name="arg">The sine of an angle.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Asin(System.Nullable{System.Double})">
      <summary>A mathematical function that returns the angle, in radians, whose sine is the specified numerical value. This angle is called the arcsine.</summary>
      <returns>An angle, measured in radians.</returns>
      <param name="arg">The sine of an angle.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Atan(System.Nullable{System.Decimal})">
      <summary>A mathematical function that returns the angle, in radians, whose tangent is the specified numerical value. This angle is called the arctangent.</summary>
      <returns>An angle, measured in radians.</returns>
      <param name="arg">The tangent of an angle.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Atan(System.Nullable{System.Double})">
      <summary>A mathematical function that returns the angle, in radians, whose tangent is the specified numerical value. This angle is called the arctangent.</summary>
      <returns>An angle, measured in radians.</returns>
      <param name="arg">The tangent of an angle.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Atan2(System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
      <summary>Returns the positive angle, in radians, between the positive x-axis and the ray from the origin through the point (x, y), where x and y are the two specified numerical values. The first parameter passed to the function is the y-value and the second parameter is the x-value.</summary>
      <returns>An angle, measured in radians.</returns>
      <param name="arg1">The y-coordinate of a point.</param>
      <param name="arg2">The x-coordinate of a point.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Atan2(System.Nullable{System.Double},System.Nullable{System.Double})">
      <summary>Returns the positive angle, in radians, between the positive x-axis and the ray from the origin through the point (x, y), where x and y are the two specified numerical values. The first parameter passed to the function is the y-value and the second parameter is the x-value.</summary>
      <returns>An angle, measured in radians.</returns>
      <param name="arg1">The y-coordinate of a point.</param>
      <param name="arg2">The x-coordinate of a point.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Char(System.Nullable{System.Int32})">
      <summary>Returns the character that corresponds to the specified integer ASCII value.</summary>
      <returns>The character that corresponds to the specified ASCII value.</returns>
      <param name="arg">An ASCII code.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.CharIndex(System.Byte[],System.Byte[])">
      <summary>Returns the starting position of one expression found within another expression.</summary>
      <returns>The starting position of <paramref name="target" /> if it is found in <paramref name="toSearch" />.</returns>
      <param name="toSearch">The string expression to be searched.</param>
      <param name="target">The string expression to be found.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.CharIndex(System.Byte[],System.Byte[],System.Nullable{System.Int32})">
      <summary>Returns the starting position of one expression found within another expression.</summary>
      <returns>The starting position of <paramref name="target" /> if it is found in <paramref name="toSearch" />.</returns>
      <param name="toSearch">The string expression to be searched.</param>
      <param name="target">The string expression to be found.</param>
      <param name="startLocation">The character position in <paramref name="toSearch" /> where searching begins.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.CharIndex(System.Byte[],System.Byte[],System.Nullable{System.Int64})">
      <summary>Returns the starting position of one expression found within another expression.</summary>
      <returns>The starting position of <paramref name="target" /> if it is found in <paramref name="toSearch" />.</returns>
      <param name="toSearch">The string expression to be searched.</param>
      <param name="target">The string expression to be found.</param>
      <param name="startLocation">The character position in <paramref name="toSearch" /> at which searching begins.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.CharIndex(System.String,System.String)">
      <summary>Returns the starting position of one expression found within another expression.</summary>
      <returns>The starting position of <paramref name="target" /> if it is found in <paramref name="toSearch" />.</returns>
      <param name="toSearch">The string expression to be searched.</param>
      <param name="target">The string expression to be found.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.CharIndex(System.String,System.String,System.Nullable{System.Int32})">
      <summary>Returns the starting position of one expression found within another expression.</summary>
      <returns>The starting position of <paramref name="target" /> if it is found in <paramref name="toSearch" />.</returns>
      <param name="toSearch">The string expression to be searched.</param>
      <param name="target">The string expression to be found.</param>
      <param name="startLocation">The character position in <paramref name="toSearch" /> where searching begins.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.CharIndex(System.String,System.String,System.Nullable{System.Int64})">
      <summary>Returns the starting position of one expression found within another expression.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" /> value that is the starting position of <paramref name="target" /> if it is found in <paramref name="toSearch" />.</returns>
      <param name="toSearch">The string expression to be searched.</param>
      <param name="target">The string expression to be found.</param>
      <param name="startLocation">The character position in <paramref name="toSearch" /> where searching begins.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Byte[])">
      <summary>Returns the checksum value computed over the input argument.</summary>
      <returns>The checksum computed over the input value.</returns>
      <param name="arg1">The character array for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Byte[],System.Byte[])">
      <summary>Returns the checksum value computed over the input arguments.</summary>
      <returns>The checksum computed over the input values.</returns>
      <param name="arg1">The character array for which the checksum is calculated.</param>
      <param name="arg2">The character array for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Byte[],System.Byte[],System.Byte[])">
      <summary>Returns the checksum value computed over the input arguments.</summary>
      <returns>The checksum computed over the input values.</returns>
      <param name="arg1">The character array for which the checksum is calculated.</param>
      <param name="arg2">The character array for which the checksum is calculated.</param>
      <param name="arg3">The character array for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Boolean})">
      <summary>Returns the checksum value computed over the input argument.</summary>
      <returns>The checksum computed over the input value.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
      <summary>Returns the checksum value computed over the input arguments.</summary>
      <returns>The checksum computed over the input values.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
      <param name="arg2">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
      <summary>Returns the checksum value computed over the input arguments.</summary>
      <returns>The checksum computed over the input values.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
      <param name="arg2">The value for which the checksum is calculated.</param>
      <param name="arg3">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.DateTime})">
      <summary>Returns the checksum value computed over the input argument.</summary>
      <returns>The checksum computed over the input values.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Returns the checksum value computed over the input arguments.</summary>
      <returns>The checksum computed over the input values.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
      <param name="arg2">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Returns the checksum value computed over the input arguments.</summary>
      <returns>The checksum computed over the input values.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
      <param name="arg2">The value for which the checksum is calculated.</param>
      <param name="arg3">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.DateTimeOffset})">
      <summary>Returns the checksum value computed over the input argument.</summary>
      <returns>The checksum computed over the input value.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Returns the checksum value computed over the input arguments.</summary>
      <returns>The checksum computed over the input values.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
      <param name="arg2">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Returns the checksum value computed over the input arguments.</summary>
      <returns>The checksum computed over the input values.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
      <param name="arg2">The value for which the checksum is calculated.</param>
      <param name="arg3">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Decimal})">
      <summary>Returns the checksum value computed over the input argument.</summary>
      <returns>The checksum computed over the input value.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
      <summary>Returns the checksum value computed over the input arguments.</summary>
      <returns>The checksum computed over the input values.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
      <param name="arg2">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
      <summary>Returns the checksum value computed over the input arguments.</summary>
      <returns>The checksum computed over the input values.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
      <param name="arg2">The value for which the checksum is calculated.</param>
      <param name="arg3">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Double})">
      <summary>Returns the checksum value computed over the input argument.</summary>
      <returns>The checksum computed over the input value.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Double},System.Nullable{System.Double})">
      <summary>Returns the checksum value computed over the input arguments.</summary>
      <returns>The checksum computed over the input values.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
      <param name="arg2">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double})">
      <summary>Returns the checksum value computed over the input arguments.</summary>
      <returns>The checksum computed over the input values.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
      <param name="arg2">The value for which the checksum is calculated.</param>
      <param name="arg3">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Guid})">
      <summary>Returns the checksum value computed over the input argument.</summary>
      <returns>The checksum computed over the input value.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Guid},System.Nullable{System.Guid})">
      <summary>Returns the checksum value computed over the input arguments.</summary>
      <returns>The checksum computed over the input values.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
      <param name="arg2">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Guid})">
      <summary>Returns the checksum value computed over the input arguments.</summary>
      <returns>The checksum computed over the input values.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
      <param name="arg2">The value for which the checksum is calculated.</param>
      <param name="arg3">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.TimeSpan})">
      <summary>Returns the checksum value computed over the input argument.</summary>
      <returns>The checksum computed over the input value.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Returns the checksum value computed over the input arguments.</summary>
      <returns>The checksum computed over the input values.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
      <param name="arg2">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Returns the checksum value computed over the input arguments.</summary>
      <returns>The checksum computed over the input values.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
      <param name="arg2">The value for which the checksum is calculated.</param>
      <param name="arg3">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.String)">
      <summary>Returns the checksum value computed over the input argument.</summary>
      <returns>The checksum computed over the input value.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.String,System.String)">
      <summary>Returns the checksum value computed over the input arguments.</summary>
      <returns>The checksum computed over the input values.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
      <param name="arg2">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.String,System.String,System.String)">
      <summary>Returns the checksum value computed over the input arguments.</summary>
      <returns>The checksum computed over the input values.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
      <param name="arg2">The value for which the checksum is calculated.</param>
      <param name="arg3">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.ChecksumAggregate(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Returns the checksum of the values in a collection. Null values are ignored.</summary>
      <returns>The checksum computed from the input collection.</returns>
      <param name="arg">The collection of values over which the checksum is computed.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.ChecksumAggregate(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Returns the checksum of the values in a collection. Null values are ignored.</summary>
      <returns>The checksum computed from the input collection.</returns>
      <param name="arg">The collection of values over which the checksum is computed.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Cos(System.Nullable{System.Decimal})">
      <summary>Returns the trigonometric cosine of the specified angle, in radians, in the specified expression.</summary>
      <returns>The trigonometric cosine of the specified angle.</returns>
      <param name="arg">An angle, measured in radians.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Cos(System.Nullable{System.Double})">
      <summary>Returns the trigonometric cosine of the specified angle, in radians, in the specified expression.</summary>
      <returns>The trigonometric cosine of the specified angle.</returns>
      <param name="arg">An angle, measured in radians.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Cot(System.Nullable{System.Decimal})">
      <summary>A mathematical function that returns the trigonometric cotangent of the specified angle, in radians.</summary>
      <returns>The trigonometric cotangent of the specified angle.</returns>
      <param name="arg">An angle, measured in radians.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Cot(System.Nullable{System.Double})">
      <summary>A mathematical function that returns the trigonometric cotangent of the specified angle, in radians.</summary>
      <returns>The trigonometric cotangent of the specified angle.</returns>
      <param name="arg">An angle, measured in radians.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.CurrentTimestamp">
      <summary>Returns the current date and time. </summary>
      <returns>The current date and time.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.CurrentUser">
      <summary>Returns the name of the current user.</summary>
      <returns>The name of the current user.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DataLength(System.Byte[])">
      <summary>Returns the number of bytes used to represent any expression.</summary>
      <returns>The number of bytes in the input value.</returns>
      <param name="arg">The value to be examined for length.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DataLength(System.Nullable{System.Boolean})">
      <summary>Returns the number of bytes used to represent any expression.</summary>
      <returns>The number of bytes in the input value.</returns>
      <param name="arg">The value to be examined for data length.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DataLength(System.Nullable{System.DateTime})">
      <summary>Returns the number of bytes used to represent any expression.</summary>
      <returns>The number of bytes in the input value.</returns>
      <param name="arg">The value to be examined for data length.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DataLength(System.Nullable{System.DateTimeOffset})">
      <summary>Returns the number of bytes used to represent any expression.</summary>
      <returns>The number of bytes in the input value.</returns>
      <param name="arg">The value to be examined for data length.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DataLength(System.Nullable{System.Decimal})">
      <summary>Returns the number of bytes used to represent any expression.</summary>
      <returns>The number of bytes in the input value.</returns>
      <param name="arg">The value to be examined for data length.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DataLength(System.Nullable{System.Double})">
      <summary>Returns the number of bytes used to represent any expression.</summary>
      <returns>The number of bytes in the input value.</returns>
      <param name="arg">The value to be examined for data length.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DataLength(System.Nullable{System.Guid})">
      <summary>Returns the number of bytes used to represent any expression.</summary>
      <returns>The number of bytes in the input value.</returns>
      <param name="arg">The value to be examined for data length.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DataLength(System.Nullable{System.TimeSpan})">
      <summary>Returns the number of bytes used to represent any expression.</summary>
      <returns>The number of bytes in the input value.</returns>
      <param name="arg">The value to be examined for data length.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DataLength(System.String)">
      <summary>Returns the number of bytes used to represent any expression.</summary>
      <returns>The number of bytes in the input value.</returns>
      <param name="arg">The value to be examined for data length.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateAdd(System.String,System.Nullable{System.Double},System.Nullable{System.DateTime})">
      <summary>Returns a new datetime value based on adding an interval to the specified date.</summary>
      <returns>The new date.</returns>
      <param name="datePartArg">The part of the date to increment. </param>
      <param name="number">The value used to increment a date by a specified amount.</param>
      <param name="date">The date to increment.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateAdd(System.String,System.Nullable{System.Double},System.Nullable{System.DateTimeOffset})">
      <summary>Returns a new date value based on adding an interval to the specified date.</summary>
      <returns>The new point in time, expressed as a date and time of day, relative to Coordinated Universal Time (UTC).</returns>
      <param name="datePartArg">The part of the date to increment.</param>
      <param name="number">The value used to increment a date by a specified amount.</param>
      <param name="dateTimeOffsetArg">The date to increment.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateAdd(System.String,System.Nullable{System.Double},System.Nullable{System.TimeSpan})">
      <summary>Returns a new time span value based on adding an interval to the specified time span.</summary>
      <returns>The new time span.</returns>
      <param name="datePartArg">The part of the date to increment.</param>
      <param name="number">The value used to increment a date by a specified amount.</param>
      <param name="time">The time span to increment.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateAdd(System.String,System.Nullable{System.Double},System.String)">
      <summary>Returns a new datetime value based on adding an interval to the specified date.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" /> value that is the new date.</returns>
      <param name="datePartArg">The part of the date to increment.</param>
      <param name="number">The value used to increment a date by a specified amount.</param>
      <param name="date">The date to increment.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Returns the count of the specified datepart boundaries crossed between the specified start date and end date.</summary>
      <returns>The number of time intervals between the two dates.</returns>
      <param name="datePartArg">The part of the date to calculate the differing number of time intervals.</param>
      <param name="startDate">The first date.</param>
      <param name="endDate">The second date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTimeOffset})">
      <summary>Returns the count of the specified datepart boundaries crossed between the specified start date and end date.</summary>
      <returns>The number of time intervals between the two dates.</returns>
      <param name="datePartArg">The part of the date to calculate the differing number of time intervals.</param>
      <param name="startDate">The first date.</param>
      <param name="endDate">The second date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.DateTime},System.Nullable{System.TimeSpan})">
      <summary>Returns the count of the specified datepart boundaries crossed between the specified start date and end date.</summary>
      <returns>The number of time intervals between the two dates.</returns>
      <param name="datePartArg">The part of the date to calculate the differing number of time intervals.</param>
      <param name="startDate">The first date.</param>
      <param name="endDate">The second date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.DateTime},System.String)">
      <summary>Returns the count of the specified datepart boundaries crossed between the specified start date and end date.</summary>
      <returns>The number of time intervals between the two dates.</returns>
      <param name="datePartArg">The part of the date to calculate the differing number of time intervals.</param>
      <param name="startDate">The first date.</param>
      <param name="endDate">The second date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTime})">
      <summary>Returns the count of the specified datepart boundaries crossed between the specified start date and end date.</summary>
      <returns>The number of time intervals between the two dates.</returns>
      <param name="datePartArg">The part of the date to calculate the differing number of time intervals.</param>
      <param name="startDate">The first date.</param>
      <param name="endDate">The second date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Returns the count of the specified datepart boundaries crossed between the specified start date and end date.</summary>
      <returns>The number of time intervals between the two dates.</returns>
      <param name="datePartArg">The part of the date to calculate the differing number of time intervals.</param>
      <param name="startDate">The first date.</param>
      <param name="endDate">The second date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.TimeSpan})">
      <summary>Returns the count of the specified datepart boundaries crossed between the specified start date and end date.</summary>
      <returns>The number of time intervals between the two Dates.</returns>
      <param name="datePartArg">The part of the date to calculate the differing number of time intervals.</param>
      <param name="startDate">The first date.</param>
      <param name="endDate">The second date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.DateTimeOffset},System.String)">
      <summary>Returns the count of the specified datepart boundaries crossed between the specified start date and end date.</summary>
      <returns>The number of time intervals between the two dates.</returns>
      <param name="datePartArg">The part of the date to calculate the differing number of time intervals.</param>
      <param name="startDate">The first date.</param>
      <param name="endDate">The second date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.TimeSpan},System.Nullable{System.DateTime})">
      <summary>Returns the count of the specified datepart boundaries crossed between the specified start date and end date.</summary>
      <returns>The number of time intervals between the two dates.</returns>
      <param name="datePartArg">The part of the date to calculate the differing number of time intervals.</param>
      <param name="startDate">The first date.</param>
      <param name="endDate">The second date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.TimeSpan},System.Nullable{System.DateTimeOffset})">
      <summary>Returns the count of the specified datepart boundaries crossed between the specified start date and end date.</summary>
      <returns>The number of time intervals between the two dates.</returns>
      <param name="datePartArg">The part of the date to calculate the differing number of time intervals.</param>
      <param name="startDate">The first date.</param>
      <param name="endDate">The second date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Returns the count of the specified datepart boundaries crossed between the specified start date and end date.</summary>
      <returns>The number of time intervals between the two dates.</returns>
      <param name="datePartArg">The part of the date to calculate the differing number of time intervals.</param>
      <param name="startDate">The first date.</param>
      <param name="endDate">The second date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.TimeSpan},System.String)">
      <summary>Returns the count of the specified datepart boundaries crossed between the specified start date and end date.</summary>
      <returns>The number of time intervals between the two dates.</returns>
      <param name="datePartArg">The part of the date to calculate the differing number of time intervals.</param>
      <param name="startDate">The first date.</param>
      <param name="endDate">The second date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.String,System.Nullable{System.DateTime})">
      <summary>Returns the count of the specified datepart boundaries crossed between the specified start date and end date.</summary>
      <returns>The number of time intervals between the two dates.</returns>
      <param name="datePartArg">The part of the date to calculate the differing number of time intervals.</param>
      <param name="startDate">The first date.</param>
      <param name="endDate">The second date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.String,System.Nullable{System.DateTimeOffset})">
      <summary>Returns the count of the specified datepart boundaries crossed between the specified start date and end date.</summary>
      <returns>The number of time intervals between the two dates.</returns>
      <param name="datePartArg">The part of the date to calculate the differing number of time intervals.</param>
      <param name="startDate">The first date.</param>
      <param name="endDate">The second date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.String,System.Nullable{System.TimeSpan})">
      <summary>Returns the count of the specified datepart boundaries crossed between the specified start date and end date.</summary>
      <returns>The value specifying the number of time intervals between the two dates.</returns>
      <param name="datePartArg">The part of the date to calculate the differing number of time intervals.</param>
      <param name="startDate">The first date.</param>
      <param name="endDate">The second date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.String,System.String)">
      <summary>Returns the count of the specified datepart boundaries crossed between the specified start date and end date.</summary>
      <returns>The number of time intervals between the two dates.</returns>
      <param name="datePartArg">The part of the date to calculate the differing number of time intervals.</param>
      <param name="startDate">The first date.</param>
      <param name="endDate">The second date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateName(System.String,System.Nullable{System.DateTime})">
      <summary>Returns a character string that represents the specified datepart of the specified date.</summary>
      <returns>The specified part of the specified date.</returns>
      <param name="datePartArg">The part of the date to calculate the differing number of time intervals.</param>
      <param name="date">The date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateName(System.String,System.Nullable{System.DateTimeOffset})">
      <summary>Returns a character string that represents the specified datepart of the specified date.</summary>
      <returns>The specified part of the specified date.</returns>
      <param name="datePartArg">The part of the date to calculate the differing number of time intervals.</param>
      <param name="date">The date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateName(System.String,System.Nullable{System.TimeSpan})">
      <summary>Returns a character string that represents the specified datepart of the specified date.</summary>
      <returns>The specified part of the specified date.</returns>
      <param name="datePartArg">The part of the date to calculate the differing number of time intervals.</param>
      <param name="date">The date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateName(System.String,System.String)">
      <summary>Returns a character string that represents the specified datepart of the specified date.</summary>
      <returns>The specified part of the specified date.</returns>
      <param name="datePartArg">The part of the date to calculate the differing number of time intervals.</param>
      <param name="date">The date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DatePart(System.String,System.Nullable{System.DateTime})">
      <summary>Returns an integer that represents the specified datepart of the specified date.</summary>
      <returns>The the specified datepart of the specified date.</returns>
      <param name="datePartArg">The part of the date to return the value.</param>
      <param name="date">The date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DatePart(System.String,System.Nullable{System.DateTimeOffset})">
      <summary>Returns an integer that represents the specified datepart of the specified date.</summary>
      <returns>The specified datepart of the specified date.</returns>
      <param name="datePartArg">The part of the date to return the value.</param>
      <param name="date">The date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DatePart(System.String,System.Nullable{System.TimeSpan})">
      <summary>Returns an integer that represents the specified datepart of the specified date.</summary>
      <returns>The specified datepart of the specified date.</returns>
      <param name="datePartArg">The part of the date to return the value.</param>
      <param name="date">The date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DatePart(System.String,System.String)">
      <summary>Returns an integer that represents the specified datepart of the specified date.</summary>
      <returns>The specified datepart of the specified date.</returns>
      <param name="datePartArg">The part of the date to return the value.</param>
      <param name="date">The date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Degrees(System.Nullable{System.Decimal})">
      <summary>Returns the corresponding angle in degrees for an angle specified in radians.</summary>
      <returns>The specified angle converted to degrees.</returns>
      <param name="arg1">An angle, measured in radians.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Degrees(System.Nullable{System.Double})">
      <summary>Returns the corresponding angle in degrees for an angle specified in radians.</summary>
      <returns>The specified angle converted to degrees.</returns>
      <param name="arg1">An angle, measured in radians.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Degrees(System.Nullable{System.Int32})">
      <summary>Returns the corresponding angle in degrees for an angle specified in radians.</summary>
      <returns>The specified angle converted to degrees.</returns>
      <param name="arg1">An angle, measured in radians.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Degrees(System.Nullable{System.Int64})">
      <summary>Returns the corresponding angle in degrees for an angle specified in radians.</summary>
      <returns>The specified angle converted to degrees.</returns>
      <param name="arg1">An angle, measured in radians.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Difference(System.String,System.String)">
      <summary>Returns an integer value that indicates the difference between the SOUNDEX values of two character expressions.</summary>
      <returns>The SOUNDEX difference between the two strings.</returns>
      <param name="string1">The first string.</param>
      <param name="string2">The second string.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Exp(System.Nullable{System.Decimal})">
      <summary>Returns the exponential value of the specified float expression.</summary>
      <returns>The constant e raised to the power of the input value.</returns>
      <param name="arg">The input value.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Exp(System.Nullable{System.Double})">
      <summary>Returns the exponential value of the specified float expression.</summary>
      <returns>The constant e raised to the power of the input value.</returns>
      <param name="arg">The input value.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.GetDate">
      <summary>Returns the current database system timestamp as a datetime value without the database time zone offset. This value is derived from the operating system of the computer on which the instance of SQL Server is running.</summary>
      <returns>The current database timestamp.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.GetUtcDate">
      <summary>Returns the current database system timestamp as a datetime value. The database time zone offset is not included. This value represents the current UTC time (Coordinated Universal Time). This value is derived from the operating system of the computer on which the instance of SQL Server is running.</summary>
      <returns>The current database UTC timestamp.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.HostName">
      <summary>Returns the workstation name.</summary>
      <returns>The name of the workstation.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.IsDate(System.String)">
      <summary>Indicates whether the input value is a valid date or time.</summary>
      <returns>1 if the input expression is a valid date or time value of datetime or smalldatetime data types; otherwise, 0.</returns>
      <param name="arg">The tested value.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.IsNumeric(System.String)">
      <summary>Indicates whether the input value is a valid numeric type.</summary>
      <returns>1 if the input expression is a valid numeric data type; otherwise, 0.</returns>
      <param name="arg">A string expression.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Log(System.Nullable{System.Decimal})">
      <summary>Returns the natural logarithm of the specified input value.</summary>
      <returns>The natural logarithm of the input value.</returns>
      <param name="arg">A numeric expression.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Log(System.Nullable{System.Double})">
      <summary>Returns the natural logarithm of the specified input value.</summary>
      <returns>The natural logarithm of the input value.</returns>
      <param name="arg">A numeric expression.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Log10(System.Nullable{System.Decimal})">
      <summary>Returns the base-10 logarithm of the specified input value.</summary>
      <returns>The base-10 logarithm of the input value.</returns>
      <param name="arg">A numeric expression.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Log10(System.Nullable{System.Double})">
      <summary>Returns the base-10 logarithm of the specified input value.</summary>
      <returns>The base-10 logarithm of the input value.</returns>
      <param name="arg">A numeric expression.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.NChar(System.Nullable{System.Int32})">
      <summary>Returns the Unicode character with the specified integer code, as defined by the Unicode standard.</summary>
      <returns>The character that corresponds to the input character code.</returns>
      <param name="arg">A character code.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.PatIndex(System.String,System.String)">
      <summary>Returns the starting position of the first occurrence of a pattern in a specified expression, or zeros if the pattern is not found, on all valid text and character data types.</summary>
      <returns>The starting character position where the string pattern was found.</returns>
      <param name="stringPattern">A string pattern to search for.</param>
      <param name="target">The string to search.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Pi">
      <summary>Returns the constant value of pi.</summary>
      <returns>The numeric value of pi.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.QuoteName(System.String)">
      <summary>Returns a Unicode string with the delimiters added to make the input string a valid Microsoft SQL Server delimited identifier.</summary>
      <returns>The original string with brackets added.</returns>
      <param name="stringArg">The expression that quote characters will be added to.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.QuoteName(System.String,System.String)">
      <summary>Returns a Unicode string with the delimiters added to make the input string a valid Microsoft SQL Server delimited identifier.</summary>
      <returns>The original string with the specified quote characters added.</returns>
      <param name="stringArg">The expression that quote characters will be added to.</param>
      <param name="quoteCharacter">The one-character string to use as the delimiter. It can be a single quotation mark ( ' ), a left or right bracket ( [ ] ), or a double quotation mark ( " ). If quote_character is not specified, brackets are used.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Radians(System.Nullable{System.Decimal})">
      <summary>Returns the radian measure corresponding to the specified angle in degrees.</summary>
      <returns>The radian measure of the specified angle.</returns>
      <param name="arg">The angle, measured in degrees.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Radians(System.Nullable{System.Double})">
      <summary>Returns the radian measure corresponding to the specified angle in degrees.</summary>
      <returns>The radian measure of the specified angle.</returns>
      <param name="arg">The angle, measured in degrees.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Radians(System.Nullable{System.Int32})">
      <summary>Returns the radian measure corresponding to the specified angle in degrees.</summary>
      <returns>The radian measure of the specified angle.</returns>
      <param name="arg">The angle, measured in degrees</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Radians(System.Nullable{System.Int64})">
      <summary>Returns the radian measure corresponding to the specified angle in degrees.</summary>
      <returns>The radian measure of the specified angle.</returns>
      <param name="arg">The angle, measured in degrees</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Rand">
      <summary>Returns a pseudo-random float value from 0 through 1, exclusive.</summary>
      <returns>The pseudo-random value.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Rand(System.Nullable{System.Int32})">
      <summary>Returns a pseudo-random float value from 0 through 1, exclusive.</summary>
      <returns>The pseudo-random value.</returns>
      <param name="seed">The seed value. If <paramref name="seed" /> is not specified, the SQL Server Database Engine assigns a seed value at random. For a specified seed value, the result returned is always the same.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Replicate(System.String,System.Nullable{System.Int32})">
      <summary>Repeats a string value a specified number of times.</summary>
      <returns>The target string, repeated the number of times specified by <paramref name="count" />.</returns>
      <param name="target">A valid string.</param>
      <param name="count">The value that specifies how many time to repeat <paramref name="target" />.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Sign(System.Nullable{System.Decimal})">
      <summary>Returns the positive (+1), zero (0), or negative (-1) sign of the specified expression.</summary>
      <returns>The sign of the input expression.</returns>
      <param name="arg">A numeric expression.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Sign(System.Nullable{System.Double})">
      <summary>Returns the positive (+1), zero (0), or negative (-1) sign of the specified expression.</summary>
      <returns>The sign of the input expression.</returns>
      <param name="arg">A numeric expression.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Sign(System.Nullable{System.Int32})">
      <summary>Returns the positive (+1), zero (0), or negative (-1) sign of the specified expression.</summary>
      <returns>The sign of the input expression.</returns>
      <param name="arg">A numeric expression.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Sign(System.Nullable{System.Int64})">
      <summary>Returns the positive (+1), zero (0), or negative (-1) sign of the specified expression.</summary>
      <returns>The sign of the input expression.</returns>
      <param name="arg">A numeric expression.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Sin(System.Nullable{System.Decimal})">
      <summary>Returns the trigonometric sine of the specified angle.</summary>
      <returns>The trigonometric sine of the input expression.</returns>
      <param name="arg">An angle, measured in radians.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Sin(System.Nullable{System.Double})">
      <summary>Returns the trigonometric sine of the specified angle.</summary>
      <returns>The trigonometric sine of the input expression.</returns>
      <param name="arg">An angle, measured in radians.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.SoundCode(System.String)">
      <summary>Converts an alphanumeric string to a four-character (SOUNDEX) code to find similar-sounding words or names.</summary>
      <returns>The SOUNDEX code of the input string.</returns>
      <param name="arg">A valid string.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Space(System.Nullable{System.Int32})">
      <summary>Returns a string of repeated spaces.</summary>
      <returns>A string that consists of the specified number of spaces.</returns>
      <param name="arg1">The number of spaces. If negative, a null string is returned.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Square(System.Nullable{System.Decimal})">
      <summary>Returns the square of the specified number.</summary>
      <returns>The square of the input value.</returns>
      <param name="arg1">A numeric expression.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Square(System.Nullable{System.Double})">
      <summary>Returns the square of the specified number.</summary>
      <returns>The square of the input value.</returns>
      <param name="arg1">A numeric expression.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.SquareRoot(System.Nullable{System.Decimal})">
      <summary>Returns the square root of the specified number.</summary>
      <returns>The square root of the input value.</returns>
      <param name="arg">A numeric expression.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.SquareRoot(System.Nullable{System.Double})">
      <summary>Returns the square root of the specified number.</summary>
      <returns>The square root of the input value.</returns>
      <param name="arg">A numeric expression.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.StringConvert(System.Nullable{System.Decimal})">
      <summary>Returns character data converted from numeric data.</summary>
      <returns>The input expression converted to a string.</returns>
      <param name="number">A numeric expression.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.StringConvert(System.Nullable{System.Decimal},System.Nullable{System.Int32})">
      <summary>Returns character data converted from numeric data.</summary>
      <returns>The input expression converted to a string.</returns>
      <param name="number">A numeric expression.</param>
      <param name="length">The total length of the string. This includes decimal point, sign, digits, and spaces. The default is 10.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.StringConvert(System.Nullable{System.Decimal},System.Nullable{System.Int32},System.Nullable{System.Int32})">
      <summary>Returns character data converted from numeric data.</summary>
      <returns>The input expression converted to a string.</returns>
      <param name="number">A numeric expression.</param>
      <param name="length">The total length of the string. This includes decimal point, sign, digits, and spaces. The default is 10.</param>
      <param name="decimalArg">The number of places to the right of the decimal point. <paramref name="decimal" /> must be less than or equal to 16. If<paramref name=" decimal" /> is more than 16 then the result is truncated to sixteen places to the right of the decimal point.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.StringConvert(System.Nullable{System.Double})">
      <summary>Returns character data converted from numeric data.</summary>
      <returns>The numeric input expression converted to a string.</returns>
      <param name="number">A numeric expression.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.StringConvert(System.Nullable{System.Double},System.Nullable{System.Int32})">
      <summary>Returns character data converted from numeric data.</summary>
      <returns>The numeric input expression converted to a string.</returns>
      <param name="number">A numeric expression.</param>
      <param name="length">The total length of the string. This includes decimal point, sign, digits, and spaces. The default is 10.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.StringConvert(System.Nullable{System.Double},System.Nullable{System.Int32},System.Nullable{System.Int32})">
      <summary>Returns character data converted from numeric data.</summary>
      <returns>The numeric input expression converted to a string.</returns>
      <param name="number">A numeric expression.</param>
      <param name="length">The total length of the string. This includes decimal point, sign, digits, and spaces. The default is 10.</param>
      <param name="decimalArg">The number of places to the right of the decimal point. <paramref name="decimal" /> must be less than or equal to 16. If<paramref name=" decimal" /> is more than 16 then the result is truncated to sixteen places to the right of the decimal point.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Stuff(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
      <summary>Inserts a string into another string. It deletes a specified length of characters in the target string at the start position and then inserts the second string into the target string at the start position.</summary>
      <returns>A string consisting of the two strings.</returns>
      <param name="stringInput">The target string.</param>
      <param name="start">The character position in <paramref name="stringinput" /> where the replacement string is to be inserted.</param>
      <param name="length">The number of characters to delete from <paramref name="stringInput" />. If <paramref name="length" /> is longer than <paramref name="stringInput" />, deletion occurs up to the last character in <paramref name="stringReplacement" />.</param>
      <param name="stringReplacement">The substring to be inserted into <paramref name="stringInput" />.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Tan(System.Nullable{System.Decimal})">
      <summary>Returns the trigonometric tangent of the input expression.</summary>
      <returns>The tangent of the input angle.</returns>
      <param name="arg">An angle, measured in radians.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Tan(System.Nullable{System.Double})">
      <summary>Returns the trigonometric tangent of the input expression.</summary>
      <returns>The tangent of the input angle.</returns>
      <param name="arg">An angle, measured in radians.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Unicode(System.String)">
      <summary>Returns the integer value, as defined by the Unicode standard, for the first character of the input expression.</summary>
      <returns>The character code for the first character in the input string.</returns>
      <param name="arg">A valid string.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.UserName">
      <summary>Returns a database user name corresponding to a specified identification number.</summary>
      <returns>The user name.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.UserName(System.Nullable{System.Int32})">
      <summary>Returns a database user name corresponding to a specified identification number.</summary>
      <returns>The user name.</returns>
      <param name="arg">A user ID.</param>
    </member>
  </members>
</doc>