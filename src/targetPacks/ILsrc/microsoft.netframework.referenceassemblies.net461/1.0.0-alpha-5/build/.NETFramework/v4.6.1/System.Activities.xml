<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Activities</name>
  </assembly>
  <members>
    <member name="T:Microsoft.CSharp.Activities.CSharpReference`1">
      <summary>Specifies information about a C# reference.</summary>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.CSharp.Activities.CSharpReference`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.CSharp.Activities.CSharpReference`1" /> class.</summary>
    </member>
    <member name="M:Microsoft.CSharp.Activities.CSharpReference`1.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.CSharp.Activities.CSharpReference`1" /> class with specified expression text.</summary>
      <param name="expressionText">The expression text.</param>
    </member>
    <member name="M:Microsoft.CSharp.Activities.CSharpReference`1.CacheMetadata(System.Activities.CodeActivityMetadata)">
      <summary>Compiles a new metadata to the C# reference.</summary>
      <param name="metadata">The compiled metadata.</param>
    </member>
    <member name="M:Microsoft.CSharp.Activities.CSharpReference`1.Execute(System.Activities.CodeActivityContext)">
      <summary>Executes the C# reference.</summary>
      <returns>The executed reference.</returns>
      <param name="context">The context.</param>
    </member>
    <member name="P:Microsoft.CSharp.Activities.CSharpReference`1.ExpressionText">
      <summary>Gets or sets the expression text for the reference.</summary>
      <returns>The expression text for the reference.</returns>
    </member>
    <member name="M:Microsoft.CSharp.Activities.CSharpReference`1.GetExpressionTree">
      <summary>Gets the expression tree for the C# reference.</summary>
      <returns>The expression tree.</returns>
    </member>
    <member name="P:Microsoft.CSharp.Activities.CSharpReference`1.Language">
      <summary>Gets the language used for the reference.</summary>
      <returns>The language used for the reference.</returns>
    </member>
    <member name="P:Microsoft.CSharp.Activities.CSharpReference`1.RequiresCompilation">
      <summary>Gets whether the reference requires compilation.</summary>
      <returns>True if the reference requires compilation; otherwise, false.</returns>
    </member>
    <member name="T:Microsoft.CSharp.Activities.CSharpValue`1">
      <summary>Specifies information about a C# value.</summary>
      <typeparam name="TResult">The type of the value.</typeparam>
    </member>
    <member name="M:Microsoft.CSharp.Activities.CSharpValue`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.CSharp.Activities.CSharpValue`1" /> class.</summary>
    </member>
    <member name="M:Microsoft.CSharp.Activities.CSharpValue`1.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.CSharp.Activities.CSharpValue`1" /> class with specified expression text.</summary>
      <param name="expressionText">The expression text.</param>
    </member>
    <member name="M:Microsoft.CSharp.Activities.CSharpValue`1.CacheMetadata(System.Activities.CodeActivityMetadata)">
      <summary>Compiles a new metadata to the C# value.</summary>
      <param name="metadata">The compiled metadata.</param>
    </member>
    <member name="M:Microsoft.CSharp.Activities.CSharpValue`1.Execute(System.Activities.CodeActivityContext)">
      <summary>Executes the C# value.</summary>
      <returns>The executed reference.</returns>
      <param name="context">The context.</param>
    </member>
    <member name="P:Microsoft.CSharp.Activities.CSharpValue`1.ExpressionText">
      <summary>Gets or sets the expression text used.</summary>
      <returns>The expression text used.</returns>
    </member>
    <member name="M:Microsoft.CSharp.Activities.CSharpValue`1.GetExpressionTree">
      <summary>Gets the expression tree for the C# value.</summary>
      <returns>The expression tree.</returns>
    </member>
    <member name="P:Microsoft.CSharp.Activities.CSharpValue`1.Language">
      <summary>Gets the language used.</summary>
      <returns>The language used</returns>
    </member>
    <member name="P:Microsoft.CSharp.Activities.CSharpValue`1.RequiresCompilation">
      <summary>Gets whether the value requires compilation.</summary>
      <returns>True if the value requires compilation; otherwise, false.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.Activities.VisualBasic">
      <summary>Provides an attached property store for <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" />.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.VisualBasic.GetSettings(System.Object)">
      <summary>Retrieves the <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> instance attached to the specified object.</summary>
      <returns>The <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> instance attached to the specified object.</returns>
      <param name="target">The object to inspect.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.VisualBasic.SetSettings(System.Object,Microsoft.VisualBasic.Activities.VisualBasicSettings)">
      <summary>Attaches a <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> instance to the specified object.</summary>
      <param name="target">The object to which the <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> instance is attached.</param>
      <param name="value">The <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> instance to attach.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.VisualBasic.SetSettingsForImplementation(System.Object,Microsoft.VisualBasic.Activities.VisualBasicSettings)">
      <summary>Attaches a <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> instance to an object for use by its implementation.</summary>
      <param name="target">The object to which the <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> instance is attached.</param>
      <param name="value">The <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> instance to attach.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.VisualBasic.ShouldSerializeSettings(System.Object)">
      <summary>Returns a value that indicates whether the <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> instance associated with the specified object should be serialized.</summary>
      <returns>true if the <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> instance should be serialized; otherwise, false.</returns>
      <param name="target">The object to inspect.</param>
    </member>
    <member name="T:Microsoft.VisualBasic.Activities.VisualBasicDesignerHelper">
      <summary>Creates and compiles <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicReference`1" /> and <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicValue`1" /> expressions.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.VisualBasicDesignerHelper.CreatePrecompiledVisualBasicReference(System.Type,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Activities.LocationReferenceEnvironment,System.Type@,System.Activities.ExpressionParser.SourceExpressionException@,Microsoft.VisualBasic.Activities.VisualBasicSettings@)">
      <summary>Creates and returns a precompiled <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicReference`1" /> expression.</summary>
      <returns>The precompiled <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicReference`1" /> expression.</returns>
      <param name="targetType">The expected expression type.</param>
      <param name="expressionText">The expression in Visual Basic syntax.</param>
      <param name="namespaces">The imported namespaces.</param>
      <param name="referencedAssemblies">The referenced assemblies.</param>
      <param name="environment">The mechanism for resolving names to their associated <see cref="T:System.Activities.Argument" /> and <see cref="T:System.Activities.Variable" /> objects.</param>
      <param name="returnType">When this method returns, contains the result type of the expression. This parameter is passed uninitialized.</param>
      <param name="compileError">When this method returns, contains any compilation errors that occurred, or null if compilation was successful. This parameter is passed uninitialized.</param>
      <param name="vbSettings">When this method returns, contains the settings required to compile the expression. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.VisualBasicDesignerHelper.CreatePrecompiledVisualBasicValue(System.Type,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Activities.LocationReferenceEnvironment,System.Type@,System.Activities.ExpressionParser.SourceExpressionException@,Microsoft.VisualBasic.Activities.VisualBasicSettings@)">
      <summary>Creates and returns a precompiled <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicValue`1" /> expression.</summary>
      <returns>The precompiled <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicValue`1" /> expression.</returns>
      <param name="targetType">The expected expression type.</param>
      <param name="expressionText">The expression in Visual Basic syntax.</param>
      <param name="namespaces">The imported namespaces.</param>
      <param name="referencedAssemblies">The referenced assemblies.</param>
      <param name="environment">The mechanism for resolving names to their associated <see cref="T:System.Activities.Argument" /> and <see cref="T:System.Activities.Variable" /> objects.</param>
      <param name="returnType">When this method returns, contains the result type of the expression. This parameter is passed uninitialized.</param>
      <param name="compileError">When this method returns, contains any compilation errors that occurred, or null if compilation was successful. This parameter is passed uninitialized. This parameter is passed uninitialized.</param>
      <param name="vbSettings">When this method returns, contains the settings required to compile the expression.</param>
    </member>
    <member name="P:Microsoft.VisualBasic.Activities.VisualBasicDesignerHelper.NameShadowingConstraint">
      <summary>Gets the constraint used in name shadowing.</summary>
      <returns>The constraint used in name shadowing.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.VisualBasicDesignerHelper.RecompileVisualBasicReference(System.Activities.ActivityWithResult,System.Type@,System.Activities.ExpressionParser.SourceExpressionException@,Microsoft.VisualBasic.Activities.VisualBasicSettings@)">
      <summary>Recompiles a previously compiled <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicReference`1" /> expression.</summary>
      <returns>The recompiled <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicReference`1" /> expression.</returns>
      <param name="visualBasicReference">The expression to recompile.</param>
      <param name="returnType">When this method returns, contains the result type of the expression. This parameter is passed uninitialized.</param>
      <param name="compileError">When this method returns, contains any compilation errors that occurred, or null if compilation was successful. This parameter is passed uninitialized.</param>
      <param name="vbSettings">When this method returns, contains the settings required to compile the expression. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.VisualBasicDesignerHelper.RecompileVisualBasicValue(System.Activities.ActivityWithResult,System.Type@,System.Activities.ExpressionParser.SourceExpressionException@,Microsoft.VisualBasic.Activities.VisualBasicSettings@)">
      <summary>Recompiles a previously compiled <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicValue`1" /> expression.</summary>
      <returns>The recompiled <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicValue`1" /> expression.</returns>
      <param name="visualBasicValue">The expression to recompile.</param>
      <param name="returnType">When this method returns, contains the result type of the expression. This parameter is passed uninitialized.</param>
      <param name="compileError">When this method returns, contains any compilation errors that occurred, or null if compilation was successful. This parameter is passed uninitialized. This parameter is passed uninitialized.</param>
      <param name="vbSettings">When this method returns, contains the settings required to compile the expression.</param>
    </member>
    <member name="T:Microsoft.VisualBasic.Activities.VisualBasicImportReference">
      <summary>Represents an assembly reference and the namespace imported from that assembly.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.VisualBasicImportReference.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicImportReference" /> class.</summary>
    </member>
    <member name="P:Microsoft.VisualBasic.Activities.VisualBasicImportReference.Assembly">
      <summary>Gets or sets the full name of the assembly referenced by this <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicImportReference" />.</summary>
      <returns>The full name of the assembly referenced by this <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicImportReference" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.VisualBasicImportReference.Equals(Microsoft.VisualBasic.Activities.VisualBasicImportReference)">
      <summary>Determines whether the specified <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicImportReference" /> is equal to the current <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicImportReference" />.</summary>
      <returns>true if the specified <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicImportReference" /> is equal to the current <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicImportReference" />; otherwise, false.</returns>
      <param name="other">The <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicImportReference" /> to compare with the current <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicImportReference" />.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.VisualBasicImportReference.GetHashCode">
      <summary>Returns the hash code for the <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicImportReference" /> instance.</summary>
      <returns>The hash code for the <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicImportReference" /> instance.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.Activities.VisualBasicImportReference.Import">
      <summary>Gets or sets the imported namespace referenced by this <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicImportReference" />.</summary>
      <returns>The imported namespace referenced by this <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicImportReference" />.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.Activities.VisualBasicReference`1">
      <summary>Contains an expression in Visual Basic syntax that evaluates to an l-value, which supports binding of the <see cref="F:System.Activities.ArgumentDirection.Out" /> arguments.</summary>
      <typeparam name="TResult">The type of the expression.</typeparam>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.VisualBasicReference`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicReference`1" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.VisualBasicReference`1.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicReference`1" /> class using the specific expression.</summary>
      <param name="expressionText">The expression string in Visual Basic syntax.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.VisualBasicReference`1.CanConvertToString(System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines whether the <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicReference`1" /> can be converted into a <see cref="T:System.String" />.</summary>
      <returns>true if the <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicReference`1" /> can be converted into a string; otherwise false.</returns>
      <param name="context">The context information that is used for conversion.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.VisualBasicReference`1.ConvertToString(System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts the <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicReference`1" /> to a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicReference`1" />.</returns>
      <param name="context">The context information that is used for conversion.</param>
    </member>
    <member name="P:Microsoft.VisualBasic.Activities.VisualBasicReference`1.ExpressionText">
      <summary>Gets or set the Visual Basic expression represented by this <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicReference`1" />.</summary>
      <returns>The Visual Basic expression.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.VisualBasicReference`1.GetExpressionTree">
      <summary>Gets the expression tree used in the reference.</summary>
      <returns>The expression tree used in the reference.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.Activities.VisualBasicReference`1.Language">
      <summary>Gets the language used in the reference.</summary>
      <returns>The language used in the reference.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.Activities.VisualBasicReference`1.RequiresCompilation">
      <summary>Gets whether the reference requires compilation.</summary>
      <returns>True if the reference requires compilation; otherwise, false.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.Activities.VisualBasicSettings">
      <summary>Contains settings that <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicValue`1" /> and <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicReference`1" /> instances use to compile the source text of the expressions they contain.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.VisualBasicSettings.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> class.</summary>
    </member>
    <member name="P:Microsoft.VisualBasic.Activities.VisualBasicSettings.Default">
      <summary>Gets a <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> that contains the default set of assembly references and imported namespaces. This set is available to all <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicValue`1" /> and <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicReference`1" /> instances in a given <see cref="T:System.AppDomain" />.</summary>
      <returns>A <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> that contains the default set of assembly references and imported namespaces.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.Activities.VisualBasicSettings.ImportReferences">
      <summary>Gets a collection of <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicImportReference" /> objects, each of which represents an assembly reference and a namespace imported from that assembly.</summary>
      <returns>A collection of <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicImportReference" /> objects, each of which represents an assembly reference and a namespace imported from that assembly.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.Activities.VisualBasicValue`1">
      <summary>Contains an expression in Visual Basic syntax that evaluates to an r-value, which supports binding of <see cref="F:System.Activities.ArgumentDirection.In" /> arguments.</summary>
      <typeparam name="TResult">The type of the expression.</typeparam>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.VisualBasicValue`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicValue`1" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.VisualBasicValue`1.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicValue`1" /> class using the specified expression.</summary>
      <param name="expressionText">The expression string in Visual Basic syntax.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.VisualBasicValue`1.CanConvertToString(System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines whether the <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicValue`1" /> can be converted into a <see cref="T:System.String" />.</summary>
      <returns>true if the <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicValue`1" /> can be converted into a string; otherwise false.</returns>
      <param name="context">The context information that is used for conversion.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.VisualBasicValue`1.ConvertToString(System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts the <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicValue`1" /> to a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicValue`1" />.</returns>
      <param name="context">The context information that is used for conversion.</param>
    </member>
    <member name="P:Microsoft.VisualBasic.Activities.VisualBasicValue`1.ExpressionText">
      <summary>Gets or set the Visual Basic expression represented by this <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicValue`1" />.</summary>
      <returns>The Visual Basic expression.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.VisualBasicValue`1.GetExpressionTree">
      <summary>Returns the expression tree for the value.</summary>
      <returns>The expression tree for the value.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.Activities.VisualBasicValue`1.Language">
      <summary>Gets the language used for the value.</summary>
      <returns>The language used.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.Activities.VisualBasicValue`1.RequiresCompilation">
      <summary>Gets whether the value requires compilation.</summary>
      <returns>True if the value requires compilation; otherwise, false.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.Activities.XamlIntegration.VisualBasicSettingsConverter">
      <summary>Converts a <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> instance to the specified type.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.XamlIntegration.VisualBasicSettingsConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualBasic.Activities.XamlIntegration.VisualBasicSettingsConverter" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.XamlIntegration.VisualBasicSettingsConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether an object of the specified type can be converted to a <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> instance.</summary>
      <returns>true if the specified type can be converted from; otherwise, false.</returns>
      <param name="context">Context information that is used for conversion.</param>
      <param name="sourceType">The type to convert from.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.XamlIntegration.VisualBasicSettingsConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether a <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> instance can be converted into an instance of the specified type.</summary>
      <returns>true if a <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> instance can be converted to an instance of the specified type; otherwise, false.</returns>
      <param name="context">Context information that is used for conversion.</param>
      <param name="destinationType">The type to convert to.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.XamlIntegration.VisualBasicSettingsConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the specified object to a <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> instance.</summary>
      <returns>An object that represents the converted value.</returns>
      <param name="context">Context information that is used for conversion.</param>
      <param name="culture">An optional <see cref="T:System.Globalization.CultureInfo" />. If not supplied, the current culture is assumed.</param>
      <param name="value">The object to convert.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.XamlIntegration.VisualBasicSettingsConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts a <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> instance to the specified type.</summary>
      <returns>The converted value.</returns>
      <param name="context">Context information that is used for conversion.</param>
      <param name="culture">An optional <see cref="T:System.Globalization.CultureInfo" />. If not supplied, the current culture is assumed.</param>
      <param name="value">The <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> instance to convert.</param>
      <param name="destinationType">The type to convert to.</param>
    </member>
    <member name="T:Microsoft.VisualBasic.Activities.XamlIntegration.VisualBasicSettingsValueSerializer">
      <summary>Serializes <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> instances to XAML.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.XamlIntegration.VisualBasicSettingsValueSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualBasic.Activities.XamlIntegration.VisualBasicSettingsValueSerializer" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.XamlIntegration.VisualBasicSettingsValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines whether the specified <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> instance can be converted into a <see cref="T:System.String" />.</summary>
      <returns>true if the specified <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> instance can be converted into a <see cref="T:System.String" />; otherwise, false. </returns>
      <param name="value">The value to convert.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.XamlIntegration.VisualBasicSettingsValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts the specified <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> instance into a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> instance.</returns>
      <param name="value">The value to convert.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="T:System.Activities.Activity">
      <summary>An abstract base class used to create composite activities from pre-existing <see cref="T:System.Activities.Activity" /> objects.</summary>
    </member>
    <member name="M:System.Activities.Activity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Activity" /> class.</summary>
    </member>
    <member name="P:System.Activities.Activity.CacheId">
      <summary>Gets the identifier of the cache that is unique within the scope of the workflow definition.</summary>
      <returns>The identifier of the cache that is unique within the scope of the workflow definition.</returns>
    </member>
    <member name="M:System.Activities.Activity.CacheMetadata(System.Activities.ActivityMetadata)">
      <summary>Creates and validates a description of the activity’s arguments, variables, child activities, and activity delegates.</summary>
      <param name="metadata">The activity’s metadata that encapsulates the activity’s arguments, variables, child activities, and activity delegates.</param>
    </member>
    <member name="P:System.Activities.Activity.Constraints">
      <summary>Gets a collection of <see cref="T:System.Activities.Validation.Constraint" /> activities that can be configured to provide validation for the <see cref="T:System.Activities.Activity" />.</summary>
      <returns>The collection of constraints.</returns>
    </member>
    <member name="P:System.Activities.Activity.DisplayName">
      <summary>Gets or sets an optional friendly name that is used for debugging, validation, exception handling, and tracking.</summary>
      <returns>A friendly name that is used for debugging, validation, exception handling, and tracking.</returns>
    </member>
    <member name="P:System.Activities.Activity.Id">
      <summary>Gets an identifier that is unique in the scope of the workflow definition.</summary>
      <returns>An identifier that is unique in the scope of the workflow definition.</returns>
    </member>
    <member name="P:System.Activities.Activity.Implementation">
      <summary>Gets or sets the delegate that returns an <see cref="T:System.Activities.Activity" /> that contains the execution logic.</summary>
      <returns>The delegate that contains the execution logic.</returns>
    </member>
    <member name="P:System.Activities.Activity.ImplementationVersion">
      <summary>Gets or sets the version of the implementation used.</summary>
      <returns>The version of the implementation</returns>
    </member>
    <member name="M:System.Activities.Activity.OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.UpdateMapMetadata,System.Activities.Activity)">
      <summary>Raises an event when creating dynamic update map.</summary>
      <param name="metadata">The metadata used.</param>
      <param name="originalActivity">The original activity.</param>
    </member>
    <member name="M:System.Activities.Activity.ShouldSerializeDisplayName">
      <summary>Indicates whether the <see cref="P:System.Activities.Activity.DisplayName" /> property should be serialized.</summary>
      <returns>true if the <see cref="P:System.Activities.Activity.DisplayName" /> property value should be serialized; otherwise false.</returns>
    </member>
    <member name="M:System.Activities.Activity.ToString">
      <summary>Returns a <see cref="T:System.String" /> that contains the <see cref="P:System.Activities.Activity.Id" /> and <see cref="P:System.Activities.Activity.DisplayName" /> of the <see cref="T:System.Activities.Activity" />.</summary>
      <returns>The ID and the display name of the activity.</returns>
    </member>
    <member name="T:System.Activities.Activity`1">
      <summary>An abstract base class used to create composite activities from pre-existing <see cref="T:System.Activities.Activity" /> objects, which specifies a result type using the activity’s type specifier.</summary>
      <typeparam name="TResult">The type of the return value of the activity.</typeparam>
    </member>
    <member name="M:System.Activities.Activity`1.#ctor">
      <summary>When implemented in a derived class, creates a new instance of the derived class.</summary>
    </member>
    <member name="M:System.Activities.Activity`1.FromValue(`0)">
      <summary>Returns a <see cref="T:System.Activities.Activity`1" /> expression that evaluates to the given value.</summary>
      <returns>A workflow expression that evaluates to the given value.</returns>
      <param name="constValue">The value used to create the <see cref="T:System.Activities.Activity`1" /> expression.</param>
    </member>
    <member name="M:System.Activities.Activity`1.FromVariable(System.Activities.Variable)">
      <summary>Returns a <see cref="T:System.Activities.Activity`1" /> expression that evaluates to the given <see cref="T:System.Activities.Variable" />.</summary>
      <returns>A workflow expression that evaluates to the given variable.</returns>
      <param name="variable">The value for the expression.</param>
    </member>
    <member name="M:System.Activities.Activity`1.FromVariable(System.Activities.Variable{`0})">
      <summary>Returns a <see cref="T:System.Activities.Activity`1" /> expression that evaluates to the given <see cref="T:System.Activities.Variable`1" />.</summary>
      <returns>A workflow expression that evaluates to the given variable.</returns>
      <param name="variable">The value for the expression.</param>
    </member>
    <member name="M:System.Activities.Activity`1.op_Implicit(System.Activities.Variable)~System.Activities.Activity{`0}">
      <summary>Returns a <see cref="T:System.Activities.Activity`1" /> expression that evaluates to the given <see cref="T:System.Activities.Variable" />.</summary>
      <returns>A workflow expression that evaluates to the given variable.</returns>
      <param name="variable">The value for the expression.</param>
    </member>
    <member name="M:System.Activities.Activity`1.op_Implicit(System.Activities.Variable{`0})~System.Activities.Activity{`0}">
      <summary>Returns a <see cref="T:System.Activities.Activity`1" /> expression that evaluates to the given <see cref="T:System.Activities.Variable`1" />.</summary>
      <returns>A workflow expression that evaluates to the given variable.</returns>
      <param name="variable">The value for the expression.</param>
    </member>
    <member name="M:System.Activities.Activity`1.op_Implicit(`0)~System.Activities.Activity{`0}">
      <summary>Returns a <see cref="T:System.Activities.Activity`1" /> expression that evaluates to the given value.</summary>
      <returns>A workflow expression that evaluates to the given value.</returns>
      <param name="constValue">The value used to create the expression.</param>
    </member>
    <member name="P:System.Activities.Activity`1.Result">
      <summary>Gets or sets the result argument for the <see cref="T:System.Activities.Activity`1" />.</summary>
      <returns>The result argument for the <see cref="T:System.Activities.Activity`1" />.</returns>
    </member>
    <member name="T:System.Activities.ActivityAction">
      <summary>Defines an activity delegate that has no in arguments and does not return a value.</summary>
    </member>
    <member name="M:System.Activities.ActivityAction.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityAction" /> class.</summary>
    </member>
    <member name="T:System.Activities.ActivityAction`1">
      <summary>Defines an activity delegate that has one in argument and does not return a value.</summary>
      <typeparam name="T">The type of the in argument of the activity delegate.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityAction`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityAction`1" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityAction`1.Argument">
      <summary>Gets or sets the in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="T:System.Activities.ActivityAction`10">
      <summary>Defines an activity delegate that has ten in arguments and does not return a value.</summary>
      <typeparam name="T1">The type of the first in argument of the activity delegate.</typeparam>
      <typeparam name="T2">The type of the second in argument of the activity delegate.</typeparam>
      <typeparam name="T3">The type of the third in argument of the activity delegate.</typeparam>
      <typeparam name="T4">The type of the fourth in argument of the activity delegate.</typeparam>
      <typeparam name="T5">The type of the fifth in argument of the activity delegate.</typeparam>
      <typeparam name="T6">The type of the sixth in argument of the activity delegate.</typeparam>
      <typeparam name="T7">The type of the seventh in argument of the activity delegate.</typeparam>
      <typeparam name="T8">The type of the eighth in argument of the activity delegate.</typeparam>
      <typeparam name="T9">The type of the ninth in argument of the activity delegate.</typeparam>
      <typeparam name="T10">The type of the tenth in argument of the activity delegate.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityAction`10.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityAction`10" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityAction`10.Argument1">
      <summary>Gets or sets the first in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`10.Argument10">
      <summary>Gets or sets the tenth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`10.Argument2">
      <summary>Gets or sets the second in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`10.Argument3">
      <summary>Gets or sets the third in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`10.Argument4">
      <summary>Gets or sets the fourth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`10.Argument5">
      <summary>Gets or sets the fifth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`10.Argument6">
      <summary>Gets or sets the sixth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`10.Argument7">
      <summary>Gets or sets the seventh in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`10.Argument8">
      <summary>Gets or sets the eighth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`10.Argument9">
      <summary>Gets or sets the ninth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="T:System.Activities.ActivityAction`11">
      <summary>Defines an activity delegate that has eleven in arguments and does not return a value. </summary>
      <typeparam name="T1">The type of the first in argument of the activity delegate.</typeparam>
      <typeparam name="T2">The type of the second in argument of the activity delegate.</typeparam>
      <typeparam name="T3">The type of the third in argument of the activity delegate.</typeparam>
      <typeparam name="T4">The type of the fourth in argument of the activity delegate.</typeparam>
      <typeparam name="T5">The type of the fifth in argument of the activity delegate.</typeparam>
      <typeparam name="T6">The type of the sixth in argument of the activity delegate.</typeparam>
      <typeparam name="T7">The type of the seventh in argument of the activity delegate.</typeparam>
      <typeparam name="T8">The type of the eighth in argument of the activity delegate.</typeparam>
      <typeparam name="T9">The type of the ninth in argument of the activity delegate.</typeparam>
      <typeparam name="T10">The type of the tenth in argument of the activity delegate.</typeparam>
      <typeparam name="T11">The type of the eleventh in argument of the activity delegate.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityAction`11.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityAction`11" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityAction`11.Argument1">
      <summary>Gets or sets the first in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`11.Argument10">
      <summary>Gets or sets the tenth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`11.Argument11">
      <summary>Gets or sets the eleventh in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`11.Argument2">
      <summary>Gets or sets the second in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`11.Argument3">
      <summary>Gets or sets the third in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`11.Argument4">
      <summary>Gets or sets the fourth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`11.Argument5">
      <summary>Gets or sets the fifth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`11.Argument6">
      <summary>Gets or sets the sixth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`11.Argument7">
      <summary>Gets or sets the seventh in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`11.Argument8">
      <summary>Gets or sets the eighth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`11.Argument9">
      <summary>Gets or sets the ninth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="T:System.Activities.ActivityAction`12">
      <summary>Defines an activity delegate that has twelve in arguments and does not return a value.</summary>
      <typeparam name="T1">The type of the first in argument of the activity delegate.</typeparam>
      <typeparam name="T2">The type of the second in argument of the activity delegate.</typeparam>
      <typeparam name="T3">The type of the third in argument of the activity delegate.</typeparam>
      <typeparam name="T4">The type of the fourth in argument of the activity delegate.</typeparam>
      <typeparam name="T5">The type of the fifth in argument of the activity delegate.</typeparam>
      <typeparam name="T6">The type of the sixth in argument of the activity delegate.</typeparam>
      <typeparam name="T7">The type of the seventh in argument of the activity delegate.</typeparam>
      <typeparam name="T8">The type of the eighth in argument of the activity delegate.</typeparam>
      <typeparam name="T9">The type of the ninth in argument of the activity delegate.</typeparam>
      <typeparam name="T10">The type of the tenth in argument of the activity delegate.</typeparam>
      <typeparam name="T11">The type of the eleventh in argument of the activity delegate.</typeparam>
      <typeparam name="T12">The type of the twelfth in argument of the activity delegate.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityAction`12.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityAction`12" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityAction`12.Argument1">
      <summary>Gets or sets the first in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`12.Argument10">
      <summary>Gets or sets the tenth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`12.Argument11">
      <summary>Gets or sets the eleventh in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`12.Argument12">
      <summary>Gets or sets the twelfth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`12.Argument2">
      <summary>Gets or sets the second in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`12.Argument3">
      <summary>Gets or sets the third in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`12.Argument4">
      <summary>Gets or sets the fourth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`12.Argument5">
      <summary>Gets or sets the fifth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`12.Argument6">
      <summary>Gets or sets the sixth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`12.Argument7">
      <summary>Gets or sets the seventh in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`12.Argument8">
      <summary>Gets or sets the eighth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`12.Argument9">
      <summary>Gets or sets the ninth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="T:System.Activities.ActivityAction`13">
      <summary>Defines an activity delegate that has thirteen in arguments and does not return a value.</summary>
      <typeparam name="T1">The type of the first in argument of the activity delegate.</typeparam>
      <typeparam name="T2">The type of the second in argument of the activity delegate.</typeparam>
      <typeparam name="T3">The type of the third in argument of the activity delegate.</typeparam>
      <typeparam name="T4">The type of the fourth in argument of the activity delegate.</typeparam>
      <typeparam name="T5">The type of the fifth in argument of the activity delegate.</typeparam>
      <typeparam name="T6">The type of the sixth in argument of the activity delegate.</typeparam>
      <typeparam name="T7">The type of the seventh in argument of the activity delegate.</typeparam>
      <typeparam name="T8">The type of the eighth in argument of the activity delegate.</typeparam>
      <typeparam name="T9">The type of the ninth in argument of the activity delegate.</typeparam>
      <typeparam name="T10">The type of the tenth in argument of the activity delegate.</typeparam>
      <typeparam name="T11">The type of the eleventh in argument of the activity delegate.</typeparam>
      <typeparam name="T12">The type of the twelfth in argument of the activity delegate.</typeparam>
      <typeparam name="T13">The type of the thirteenth in argument of the activity delegate.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityAction`13.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityAction`13" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityAction`13.Argument1">
      <summary>Gets or sets the first in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`13.Argument10">
      <summary>Gets or sets the tenth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`13.Argument11">
      <summary>Gets or sets the eleventh in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`13.Argument12">
      <summary>Gets or sets the twelfth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`13.Argument13">
      <summary>Gets or sets the thirteenth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`13.Argument2">
      <summary>Gets or sets the second in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`13.Argument3">
      <summary>Gets or sets the third in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`13.Argument4">
      <summary>Gets or sets the fourth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`13.Argument5">
      <summary>Gets or sets the fifth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`13.Argument6">
      <summary>Gets or sets the sixth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`13.Argument7">
      <summary>Gets or sets the seventh in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`13.Argument8">
      <summary>Gets or sets the eighth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`13.Argument9">
      <summary>Gets or sets the ninth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="T:System.Activities.ActivityAction`14">
      <summary>Defines an activity delegate that has fourteen in arguments and does not return a value.</summary>
      <typeparam name="T1">The type of the first in argument of the activity delegate.</typeparam>
      <typeparam name="T2">The type of the second in argument of the activity delegate.</typeparam>
      <typeparam name="T3">The type of the third in argument of the activity delegate.</typeparam>
      <typeparam name="T4">The type of the fourth in argument of the activity delegate.</typeparam>
      <typeparam name="T5">The type of the fifth in argument of the activity delegate.</typeparam>
      <typeparam name="T6">The type of the sixth in argument of the activity delegate.</typeparam>
      <typeparam name="T7">The type of the seventh in argument of the activity delegate.</typeparam>
      <typeparam name="T8">The type of the eighth in argument of the activity delegate.</typeparam>
      <typeparam name="T9">The type of the ninth in argument of the activity delegate.</typeparam>
      <typeparam name="T10">The type of the tenth in argument of the activity delegate.</typeparam>
      <typeparam name="T11">The type of the eleventh in argument of the activity delegate.</typeparam>
      <typeparam name="T12">The type of the twelfth in argument of the activity delegate.</typeparam>
      <typeparam name="T13">The type of the thirteenth in argument of the activity delegate.</typeparam>
      <typeparam name="T14">The type of the fourteenth in argument of the activity delegate.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityAction`14.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityAction`14" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityAction`14.Argument1">
      <summary>Gets or sets the first in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`14.Argument10">
      <summary>Gets or sets the tenth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`14.Argument11">
      <summary>Gets or sets the eleventh in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`14.Argument12">
      <summary>Gets or sets the twelfth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`14.Argument13">
      <summary>Gets or sets the thirteenth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`14.Argument14">
      <summary>Gets or sets the fourteenth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`14.Argument2">
      <summary>Gets or sets the second in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`14.Argument3">
      <summary>Gets or sets the third in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`14.Argument4">
      <summary>Gets or sets the fourth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`14.Argument5">
      <summary>Gets or sets the fifth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`14.Argument6">
      <summary>Gets or sets the sixth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`14.Argument7">
      <summary>Gets or sets the seventh in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`14.Argument8">
      <summary>Gets or sets the eighth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`14.Argument9">
      <summary>Gets or sets the ninth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="T:System.Activities.ActivityAction`15">
      <summary>Defines an activity delegate that has fifteen in arguments and does not return a value.</summary>
      <typeparam name="T1">The type of the first in argument of the activity delegate.</typeparam>
      <typeparam name="T2">The type of the second in argument of the activity delegate.</typeparam>
      <typeparam name="T3">The type of the third in argument of the activity delegate.</typeparam>
      <typeparam name="T4">The type of the fourth in argument of the activity delegate.</typeparam>
      <typeparam name="T5">The type of the fifth in argument of the activity delegate.</typeparam>
      <typeparam name="T6">The type of the sixth in argument of the activity delegate.</typeparam>
      <typeparam name="T7">The type of the seventh in argument of the activity delegate.</typeparam>
      <typeparam name="T8">The type of the eighth in argument of the activity delegate.</typeparam>
      <typeparam name="T9">The type of the ninth in argument of the activity delegate.</typeparam>
      <typeparam name="T10">The type of the tenth in argument of the activity delegate.</typeparam>
      <typeparam name="T11">The type of the eleventh in argument of the activity delegate.</typeparam>
      <typeparam name="T12">The type of the twelfth in argument of the activity delegate.</typeparam>
      <typeparam name="T13">The type of the thirteenth in argument of the activity delegate.</typeparam>
      <typeparam name="T14">The The type of the fourteenth in argument of the activity delegate.</typeparam>
      <typeparam name="T15">The type of the fifteenth in argument of the activity delegate.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityAction`15.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityAction`15" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityAction`15.Argument1">
      <summary>Gets or sets the first in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`15.Argument10">
      <summary>Gets or sets the tenth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`15.Argument11">
      <summary>Gets or sets the eleventh in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`15.Argument12">
      <summary>Gets or sets the twelfth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`15.Argument13">
      <summary>Gets or sets the thirteenth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`15.Argument14">
      <summary>Gets or sets the fourteenth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`15.Argument15">
      <summary>Gets or sets the fifteenth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`15.Argument2">
      <summary>Gets or sets the second in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`15.Argument3">
      <summary>Gets or sets the third in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`15.Argument4">
      <summary>Gets or sets the fourth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`15.Argument5">
      <summary>Gets or sets the fifth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`15.Argument6">
      <summary>Gets or sets the sixth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`15.Argument7">
      <summary>Gets or sets the seventh in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`15.Argument8">
      <summary>Gets or sets the eighth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`15.Argument9">
      <summary>Gets or sets the ninth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="T:System.Activities.ActivityAction`16">
      <summary>Defines an activity delegate that has sixteen in arguments and does not return a value.</summary>
      <typeparam name="T1">The type of the first delegate parameter.</typeparam>
      <typeparam name="T2">The type of the second delegate parameter.</typeparam>
      <typeparam name="T3">The type of the third delegate parameter.</typeparam>
      <typeparam name="T4">The type of the fourth delegate parameter.</typeparam>
      <typeparam name="T5">The type of the fifth delegate parameter.</typeparam>
      <typeparam name="T6">The type of the sixth delegate parameter.</typeparam>
      <typeparam name="T7">The type of the seventh delegate parameter.</typeparam>
      <typeparam name="T8">The type of the eighth delegate parameter.</typeparam>
      <typeparam name="T9">The type of the ninth delegate parameter.</typeparam>
      <typeparam name="T10">The type of the tenth delegate parameter.</typeparam>
      <typeparam name="T11">The type of the eleventh delegate parameter.</typeparam>
      <typeparam name="T12">The type of the twelfth delegate parameter.</typeparam>
      <typeparam name="T13">The type of the thirteenth delegate parameter.</typeparam>
      <typeparam name="T14">The type of the fourteenth delegate parameter.</typeparam>
      <typeparam name="T15">The type of the fifteenth delegate parameter.</typeparam>
      <typeparam name="T16">The type of the sixteenth delegate parameter.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityAction`16.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityAction`16" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityAction`16.Argument1">
      <summary>Gets or sets the first in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`16.Argument10">
      <summary>Gets or sets the tenth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`16.Argument11">
      <summary>Gets or sets the eleventh in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`16.Argument12">
      <summary>Gets or sets the twelfth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`16.Argument13">
      <summary>Gets or sets the thirteenth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`16.Argument14">
      <summary>Gets or sets the fourteenth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`16.Argument15">
      <summary>Gets or sets the fifteenth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`16.Argument16">
      <summary>Gets or sets the sixteenth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`16.Argument2">
      <summary>Gets or sets the second in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`16.Argument3">
      <summary>Gets or sets the third in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`16.Argument4">
      <summary>Gets or sets the fourth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`16.Argument5">
      <summary>Gets or sets the fifth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`16.Argument6">
      <summary>Gets or sets the sixth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`16.Argument7">
      <summary>Gets or sets the seventh in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`16.Argument8">
      <summary>Gets or sets the eighth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`16.Argument9">
      <summary>Gets or sets the ninth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="T:System.Activities.ActivityAction`2">
      <summary>Defines an activity delegate that has two in arguments and does not return a value.</summary>
      <typeparam name="T1">The type of the first in argument of the activity delegate.</typeparam>
      <typeparam name="T2">The type of the second in argument of the activity delegate.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityAction`2.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityAction`2" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityAction`2.Argument1">
      <summary>Gets or sets the first in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`2.Argument2">
      <summary>Gets or sets the second in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate. </returns>
    </member>
    <member name="T:System.Activities.ActivityAction`3">
      <summary>Defines an activity delegate that has three in arguments and does not return a value.</summary>
      <typeparam name="T1">The type of the first in argument of the activity delegate.</typeparam>
      <typeparam name="T2">The type of the second in argument of the activity delegate.</typeparam>
      <typeparam name="T3">The type of the third in argument of the activity delegate.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityAction`3.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityAction`3" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityAction`3.Argument1">
      <summary>Gets or sets the first in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`3.Argument2">
      <summary>Gets or sets the second in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`3.Argument3">
      <summary>Gets or sets the third in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate. </returns>
    </member>
    <member name="T:System.Activities.ActivityAction`4">
      <summary>Defines an activity delegate that has four in arguments and does not return a value.</summary>
      <typeparam name="T1">The type of the first in argument of the activity delegate.</typeparam>
      <typeparam name="T2">The type of the second in argument of the activity delegate.</typeparam>
      <typeparam name="T3">The type of the third in argument of the activity delegate.</typeparam>
      <typeparam name="T4">The type of the fourth in argument of the activity delegate.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityAction`4.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityAction`4" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityAction`4.Argument1">
      <summary>Gets or sets the first in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`4.Argument2">
      <summary>Gets or sets the second in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`4.Argument3">
      <summary>Gets or sets the third in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`4.Argument4">
      <summary>Gets or sets the fourth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate. </returns>
    </member>
    <member name="T:System.Activities.ActivityAction`5">
      <summary>Defines an activity delegate that has five in arguments and does not return a value.</summary>
      <typeparam name="T1">The type of the first in argument of the activity delegate.</typeparam>
      <typeparam name="T2">The type of the second in argument of the activity delegate.</typeparam>
      <typeparam name="T3">The type of the third in argument of the activity delegate.</typeparam>
      <typeparam name="T4">The type of the fourth in argument of the activity delegate.</typeparam>
      <typeparam name="T5">The type of the fifth in argument of the activity delegate.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityAction`5.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityAction`5" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityAction`5.Argument1">
      <summary>Gets or sets the first in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`5.Argument2">
      <summary>Gets or sets the second in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`5.Argument3">
      <summary>Gets or sets the third in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`5.Argument4">
      <summary>Gets or sets the fourth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`5.Argument5">
      <summary>Gets or sets the fifth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.  </returns>
    </member>
    <member name="T:System.Activities.ActivityAction`6">
      <summary>Defines an activity delegate that has six in arguments and does not return a value.</summary>
      <typeparam name="T1">The type of the first in argument of the activity delegate.</typeparam>
      <typeparam name="T2">The type of the second in argument of the activity delegate.</typeparam>
      <typeparam name="T3">The type of the third in argument of the activity delegate.</typeparam>
      <typeparam name="T4">The type of the fourth in argument of the activity delegate.</typeparam>
      <typeparam name="T5">The type of the fifth in argument of the activity delegate.</typeparam>
      <typeparam name="T6">The type of the sixth in argument of the activity delegate.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityAction`6.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityAction`6" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityAction`6.Argument1">
      <summary>Gets or sets the first in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`6.Argument2">
      <summary>Gets or sets the second in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`6.Argument3">
      <summary>Gets or sets the third in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`6.Argument4">
      <summary>Gets or sets the fourth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`6.Argument5">
      <summary>Gets or sets the fifth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`6.Argument6">
      <summary>Gets or sets the sixth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="T:System.Activities.ActivityAction`7">
      <summary>Defines an activity delegate that has seven in arguments and does not return a value.</summary>
      <typeparam name="T1">The type of the first in argument of the activity delegate.</typeparam>
      <typeparam name="T2">The type of the second in argument of the activity delegate.</typeparam>
      <typeparam name="T3">The type of the third in argument of the activity delegate.</typeparam>
      <typeparam name="T4">The type of the fourth in argument of the activity delegate.</typeparam>
      <typeparam name="T5">The type of the fifth in argument of the activity delegate.</typeparam>
      <typeparam name="T6">The type of the sixth in argument of the activity delegate.</typeparam>
      <typeparam name="T7">The type of the seventh in argument of the activity delegate.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityAction`7.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityAction`7" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityAction`7.Argument1">
      <summary>Gets or sets the first in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`7.Argument2">
      <summary>Gets or sets the second in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`7.Argument3">
      <summary>Gets or sets the third in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`7.Argument4">
      <summary>Gets or sets the fourth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`7.Argument5">
      <summary>Gets or sets the fifth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`7.Argument6">
      <summary>Gets or sets the sixth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`7.Argument7">
      <summary>Gets or sets the seventh in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="T:System.Activities.ActivityAction`8">
      <summary>Defines an activity delegate that has eight in arguments and does not return a value. </summary>
      <typeparam name="T1">The type of the first in argument of the activity delegate.</typeparam>
      <typeparam name="T2">The type of the second in argument of the activity delegate.</typeparam>
      <typeparam name="T3">The type of the third in argument of the activity delegate.</typeparam>
      <typeparam name="T4">The type of the fourth in argument of the activity delegate.</typeparam>
      <typeparam name="T5">The type of the fifth in argument of the activity delegate.</typeparam>
      <typeparam name="T6">The type of the sixth in argument of the activity delegate.</typeparam>
      <typeparam name="T7">The type of the seventh in argument of the activity delegate.</typeparam>
      <typeparam name="T8">The type of the eighth in argument of the activity delegate.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityAction`8.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityAction`8" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityAction`8.Argument1">
      <summary>Gets or sets the first in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`8.Argument2">
      <summary>Gets or sets the second in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`8.Argument3">
      <summary>Gets or sets the third in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`8.Argument4">
      <summary>Gets or sets the fourth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`8.Argument5">
      <summary>Gets or sets the fifth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`8.Argument6">
      <summary>Gets or sets the sixth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`8.Argument7">
      <summary>Gets or sets the seventh in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`8.Argument8">
      <summary>Gets or sets the eighth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="T:System.Activities.ActivityAction`9">
      <summary>Defines an activity delegate that has nine in arguments and does not return a value.</summary>
      <typeparam name="T1">The type of the first in argument of the activity delegate.</typeparam>
      <typeparam name="T2">The type of the second in argument of the activity delegate.</typeparam>
      <typeparam name="T3">The type of the third in argument of the activity delegate.</typeparam>
      <typeparam name="T4">The type of the fourth in argument of the activity delegate.</typeparam>
      <typeparam name="T5">The type of the fifth in argument of the activity delegate.</typeparam>
      <typeparam name="T6">The type of the sixth in argument of the activity delegate.</typeparam>
      <typeparam name="T7">The type of the seventh in argument of the activity delegate.</typeparam>
      <typeparam name="T8">The type of the eighth in argument of the activity delegate.</typeparam>
      <typeparam name="T9">The type of the ninth in argument of the activity delegate.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityAction`9.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityAction`9" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityAction`9.Argument1">
      <summary>Gets or sets the first in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`9.Argument2">
      <summary>Gets or sets the second in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`9.Argument3">
      <summary>Gets or sets the third in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`9.Argument4">
      <summary>Gets or sets the fourth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`9.Argument5">
      <summary>Gets or sets the fifth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`9.Argument6">
      <summary>Gets or sets the sixth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`9.Argument7">
      <summary>Gets or sets the seventh in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`9.Argument8">
      <summary>Gets or sets the eighth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`9.Argument9">
      <summary>Gets or sets the ninth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="T:System.Activities.ActivityBuilder">
      <summary>Provides property data for a workflow activity.</summary>
    </member>
    <member name="M:System.Activities.ActivityBuilder.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityBuilder" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityBuilder.Attributes">
      <summary>Gets the collection of attributes to use in the construction of an activity tree.</summary>
      <returns>A collection of a specified type.</returns>
    </member>
    <member name="P:System.Activities.ActivityBuilder.Constraints">
      <summary>Gets the collection of constraints that govern the construction of an activity tree.</summary>
      <returns>A collection of a specified type.</returns>
    </member>
    <member name="M:System.Activities.ActivityBuilder.GetPropertyReference(System.Object)">
      <summary>Returns a <see cref="T:System.Activities.ActivityPropertyReference" /> for a property retrieved from the specified object.</summary>
      <returns>A reference to a property.</returns>
      <param name="target">An object that contains a property.</param>
    </member>
    <member name="M:System.Activities.ActivityBuilder.GetPropertyReferences(System.Object)">
      <summary>Returns a list of <see cref="T:System.Activities.ActivityPropertyReference" /> for a property retrieved from the specified object.</summary>
      <returns>A reference to a property.</returns>
      <param name="target">An object that contains a property.</param>
    </member>
    <member name="P:System.Activities.ActivityBuilder.Implementation">
      <summary>Gets or sets the activity tree that is represented by the current instance of <see cref="T:System.Activities.ActivityBuilder" />.</summary>
      <returns>The activity.</returns>
    </member>
    <member name="P:System.Activities.ActivityBuilder.ImplementationVersion">
      <summary>Gets or sets the implementation version for the activity builder.</summary>
      <returns>The implementation version for the activity builder.</returns>
    </member>
    <member name="P:System.Activities.ActivityBuilder.Name">
      <summary>Gets or sets the name of the activity tree that is represented by the current instance of <see cref="T:System.Activities.ActivityBuilder" />.</summary>
      <returns>The name of the activity tree.</returns>
    </member>
    <member name="P:System.Activities.ActivityBuilder.Properties">
      <summary>Gets a collection of property values for the current <see cref="T:System.Activities.ActivityBuilder" /> instance.</summary>
      <returns>A collection of property values.</returns>
    </member>
    <member name="M:System.Activities.ActivityBuilder.SetPropertyReference(System.Object,System.Activities.ActivityPropertyReference)">
      <summary>Sets a value for the specified attachable property in the specified store.</summary>
      <param name="target">A property store.</param>
      <param name="value">The value to set.</param>
    </member>
    <member name="M:System.Activities.ActivityBuilder.ShouldSerializePropertyReference(System.Object)">
      <summary>Specifies whether the activity builder should serialize the property reference.</summary>
      <returns>True if the activity builder should serialize the property reference; otherwise, false.</returns>
      <param name="target">A property store.</param>
    </member>
    <member name="M:System.Activities.ActivityBuilder.ShouldSerializePropertyReferences(System.Object)">
      <summary>Specifies whether the activity builder should serialize the property reference.</summary>
      <returns>True if the activity builder should serialize the property reference; otherwise, false.</returns>
      <param name="target">A property store.</param>
    </member>
    <member name="M:System.Activities.ActivityBuilder.System#Activities#Debugger#IDebuggableWorkflowTree#GetWorkflowRoot">
      <summary>When implemented in the base class, returns the root of a workflow activity tree.</summary>
      <returns>The activity.</returns>
    </member>
    <member name="T:System.Activities.ActivityBuilder`1">
      <summary>Provides property data for a generic workflow activity.</summary>
      <typeparam name="TResult">The type of the activity being implemented.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityBuilder`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityBuilder`1" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityBuilder`1.Attributes">
      <summary>Gets the generic collection of attributes to use in the construction of an activity tree.</summary>
      <returns>A generic collection.</returns>
    </member>
    <member name="P:System.Activities.ActivityBuilder`1.Constraints">
      <summary>Gets the generic collection of constraints that govern the construction of an activity tree.</summary>
      <returns>A generic collection. </returns>
    </member>
    <member name="P:System.Activities.ActivityBuilder`1.Implementation">
      <summary>Gets or sets the generic activity tree that is represented by the current instance of <see cref="T:System.Activities.ActivityBuilder`1" />.</summary>
      <returns>An activity object.</returns>
    </member>
    <member name="P:System.Activities.ActivityBuilder`1.ImplementationVersion">
      <summary>Gets or sets the implementation version of the activity builder.</summary>
      <returns>The implementation version of the activity builder.</returns>
    </member>
    <member name="P:System.Activities.ActivityBuilder`1.Name">
      <summary>Gets or sets the name of the generic activity tree that is represented by the current instance of <see cref="T:System.Activities.ActivityBuilder`1" />.</summary>
      <returns>The name of the activity tree.</returns>
    </member>
    <member name="P:System.Activities.ActivityBuilder`1.Properties">
      <summary>Gets a <see cref="T:System.Collections.ObjectModel.KeyedCollection" /> of the properties of the current instance of <see cref="T:System.Activities.ActivityBuilder`1" />.</summary>
      <returns>A key and value pair collection of activity properties.</returns>
    </member>
    <member name="M:System.Activities.ActivityBuilder`1.System#Activities#Debugger#IDebuggableWorkflowTree#GetWorkflowRoot">
      <summary>Returns the root of the current workflow tree.</summary>
      <returns>An activity.</returns>
    </member>
    <member name="T:System.Activities.ActivityContext">
      <summary>The base class for context classes that represent the execution environment of an activity.</summary>
    </member>
    <member name="P:System.Activities.ActivityContext.ActivityInstanceId">
      <summary>Gets the unique identifier of the currently executing activity instance.</summary>
      <returns>The unique identifier of the currently executing activity instance.</returns>
    </member>
    <member name="P:System.Activities.ActivityContext.DataContext">
      <summary>Gets the data context of the currently executing activity.</summary>
      <returns>The workflow data context of the currently executing activity.</returns>
    </member>
    <member name="M:System.Activities.ActivityContext.GetExtension``1">
      <summary>Returns an extension of the specified type.</summary>
      <returns>The extension of the specified type if present; otherwise, null.</returns>
      <typeparam name="T">The type of extension to retrieve.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityContext.GetLocation``1(System.Activities.LocationReference)">
      <summary>Returns the typed location for the specified referenced location for the current activity context.</summary>
      <returns>The typed location.</returns>
      <param name="locationReference">The referenced location.</param>
      <typeparam name="T">The type of the location to return.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityContext.GetValue(System.Activities.Argument)">
      <summary>Gets the value of the specified <see cref="T:System.Activities.Argument" />.</summary>
      <returns>The value of the argument.</returns>
      <param name="argument">The argument to inspect.</param>
    </member>
    <member name="M:System.Activities.ActivityContext.GetValue``1(System.Activities.InArgument{``0})">
      <summary>Gets the value of the specified <see cref="T:System.Activities.InArgument`1" />.</summary>
      <returns>The value of the argument.</returns>
      <param name="argument">The argument to inspect.</param>
      <typeparam name="T">The type of the argument.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityContext.GetValue``1(System.Activities.InOutArgument{``0})">
      <summary>Gets the value of the specified <see cref="T:System.Activities.InOutArgument`1" />.</summary>
      <returns>The value of the argument.</returns>
      <param name="argument">The argument to inspect.</param>
      <typeparam name="T">The type of the argument.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityContext.GetValue``1(System.Activities.LocationReference)">
      <summary>Gets the value at the specified <see cref="T:System.Activities.LocationReference" />.</summary>
      <returns>The value of the referenced location.</returns>
      <param name="locationReference">The referenced location to inspect.</param>
      <typeparam name="T">The type of the value.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityContext.GetValue``1(System.Activities.OutArgument{``0})">
      <summary>Gets the value of the specified <see cref="T:System.Activities.OutArgument`1" />.</summary>
      <returns>The value of the argument.</returns>
      <param name="argument">The argument to inspect.</param>
      <typeparam name="T">The type of the argument.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityContext.GetValue(System.Activities.RuntimeArgument)">
      <summary>Gets the value of the specified <see cref="T:System.Activities.RuntimeArgument" />.</summary>
      <returns>The value of the argument.</returns>
      <param name="runtimeArgument">The argument to inspect.</param>
    </member>
    <member name="M:System.Activities.ActivityContext.SetValue(System.Activities.Argument,System.Object)">
      <summary>Assigns a value to the specified <see cref="T:System.Activities.Argument" />.</summary>
      <param name="argument">The argument to receive the new value.</param>
      <param name="value">The new value of the argument.</param>
    </member>
    <member name="M:System.Activities.ActivityContext.SetValue``1(System.Activities.InArgument{``0},``0)">
      <summary>Assigns a value to the specified <see cref="T:System.Activities.InArgument`1" />.</summary>
      <param name="argument">The argument to receive the new value.</param>
      <param name="value">The new value of the argument.</param>
      <typeparam name="T">The type of the argument.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityContext.SetValue``1(System.Activities.InOutArgument{``0},``0)">
      <summary>Assigns a value to the specified <see cref="T:System.Activities.InOutArgument`1" />.</summary>
      <param name="argument">The argument to receive the new value.</param>
      <param name="value">The new value of the argument.</param>
      <typeparam name="T">The type of the argument.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityContext.SetValue``1(System.Activities.LocationReference,``0)">
      <summary>Assigns a value to the specified <see cref="T:System.Activities.LocationReference" />.</summary>
      <param name="locationReference">The referenced location to receive the new value.</param>
      <param name="value">The new value of the referenced location.</param>
      <typeparam name="T">The type of the location.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityContext.SetValue``1(System.Activities.OutArgument{``0},``0)">
      <summary>Assigns a value to the specified <see cref="T:System.Activities.OutArgument`1" />.</summary>
      <param name="argument">The argument to receive the new value.</param>
      <param name="value">The new value of the argument.</param>
      <typeparam name="T">The type of the argument.</typeparam>
    </member>
    <member name="P:System.Activities.ActivityContext.WorkflowInstanceId">
      <summary>Gets the unique indentifier of the currently executing workflow instance.</summary>
      <returns>The unique identifier of the currently executing workflow instance.</returns>
    </member>
    <member name="T:System.Activities.ActivityDelegate">
      <summary>Represents an activity-based callback.</summary>
    </member>
    <member name="M:System.Activities.ActivityDelegate.#ctor">
      <summary>Called by derived class constructors to initialize the object.</summary>
    </member>
    <member name="P:System.Activities.ActivityDelegate.DisplayName">
      <summary>Gets or sets an optional friendly name that is used for debugging, validation, exception handling, and tracking.</summary>
      <returns>A friendly name that is used for debugging, validation, exception handling, and tracking.</returns>
    </member>
    <member name="M:System.Activities.ActivityDelegate.GetResultArgument">
      <summary>When implemented in a derived class, returns the <see cref="T:System.Activities.DelegateOutArgument" /> of the <see cref="T:System.Activities.ActivityDelegate" />.</summary>
      <returns>An out argument for the <see cref="T:System.Activities.ActivityDelegate" />.</returns>
    </member>
    <member name="P:System.Activities.ActivityDelegate.Handler">
      <summary>Gets or sets the activity that is represented by this <see cref="T:System.Activities.ActivityDelegate" />.</summary>
      <returns>The activity that is represented by this <see cref="T:System.Activities.ActivityDelegate" />.</returns>
    </member>
    <member name="M:System.Activities.ActivityDelegate.OnGetRuntimeDelegateArguments(System.Collections.Generic.IList{System.Activities.RuntimeDelegateArgument})">
      <summary>Supplies a list of runtime arguments for the <see cref="T:System.Activities.ActivityDelegate" />.</summary>
      <param name="runtimeDelegateArguments">The list to be populated with runtime arguments.</param>
    </member>
    <member name="M:System.Activities.ActivityDelegate.ShouldSerializeDisplayName">
      <summary>Indicates whether the <see cref="P:System.Activities.ActivityDelegate.DisplayName" /> property value should be serialized to XAML.</summary>
      <returns>true, if the <see cref="P:System.Activities.ActivityDelegate.DisplayName" /> property value should be serialized; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.ActivityDelegate.ToString">
      <summary>Returns a <see cref="T:System.String" /> representation of the <see cref="T:System.Activities.ActivityDelegate" /> that contains the <see cref="P:System.Activities.ActivityDelegate.DisplayName" />.</summary>
      <returns>A representation of the <see cref="T:System.Activities.ActivityDelegate" /> that contains the <see cref="P:System.Activities.ActivityDelegate.DisplayName" />.</returns>
    </member>
    <member name="T:System.Activities.ActivityFunc`1">
      <summary>Defines an activity delegate with no in arguments and one out argument of type Tresult.</summary>
      <typeparam name="TResult">The type of the out argument of the activity delegate.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityFunc`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityFunc`1" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityFunc`1.Result">
      <summary>Gets or sets the out argument of the activity delegate.</summary>
      <returns>The argument.</returns>
    </member>
    <member name="T:System.Activities.ActivityFunc`10">
      <summary>Defines an activity delegate with nine in arguments of type T and one out argument of type TResult.</summary>
      <typeparam name="T1">The type of the first in argument of the activity delegate.</typeparam>
      <typeparam name="T2">The type of the second in argument of the activity delegate.</typeparam>
      <typeparam name="T3">The type of the third in argument of the activity delegate.</typeparam>
      <typeparam name="T4">The type of the fourth in argument of the activity delegate.</typeparam>
      <typeparam name="T5">The type of the fifth in argument of the activity delegate.</typeparam>
      <typeparam name="T6">The type of the sixth in argument of the activity delegate.</typeparam>
      <typeparam name="T7">The type of the seventh in argument of the activity delegate.</typeparam>
      <typeparam name="T8">The type of the eighth in argument of the activity delegate.</typeparam>
      <typeparam name="T9">The type of the ninth in argument of the activity delegate.</typeparam>
      <typeparam name="TResult">The type of the out argument of the activity delegate.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityFunc`10.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityFunc`10" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityFunc`10.Argument1">
      <summary>Gets or sets the first in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`10.Argument2">
      <summary>Gets or sets the second in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`10.Argument3">
      <summary>Gets or sets the third in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`10.Argument4">
      <summary>Gets or sets the fourth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`10.Argument5">
      <summary>Gets or sets the fifth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`10.Argument6">
      <summary>Gets or sets the sixth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`10.Argument7">
      <summary>Gets or sets the seventh in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`10.Argument8">
      <summary>Gets or sets the eighth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate. </returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`10.Argument9">
      <summary>Gets or sets the ninth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`10.Result">
      <summary>Gets or sets the out argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="T:System.Activities.ActivityFunc`11">
      <summary>Defines an activity delegate with one in argument of type T and one out argument of type TResult.</summary>
      <typeparam name="T1">The type of the first in argument of the activity delegate. </typeparam>
      <typeparam name="T2">The type of the second in argument of the activity delegate.</typeparam>
      <typeparam name="T3">The type of the third in argument of the activity delegate.</typeparam>
      <typeparam name="T4">The type of the fourth in argument of the activity delegate.</typeparam>
      <typeparam name="T5">The type of the fifth in argument of the activity delegate.</typeparam>
      <typeparam name="T6">The type of the sixth in argument of the activity delegate.</typeparam>
      <typeparam name="T7">The type of the seventh in argument of the activity delegate.</typeparam>
      <typeparam name="T8">The type of the eighth in argument of the activity delegate.</typeparam>
      <typeparam name="T9">The type of the ninth in argument of the activity delegate.</typeparam>
      <typeparam name="T10">The type of the tenth in argument of the activity delegate.</typeparam>
      <typeparam name="TResult">The type of the out argument of the activity delegate.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityFunc`11.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityFunc`11" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityFunc`11.Argument1">
      <summary>Gets or sets the first in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`11.Argument10">
      <summary>Gets or sets the tenth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`11.Argument2">
      <summary>Gets or sets the second in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`11.Argument3">
      <summary>Gets or sets the third in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`11.Argument4">
      <summary>Gets or sets the fourth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`11.Argument5">
      <summary>Gets or sets the fifth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`11.Argument6">
      <summary>Gets or sets the sixth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`11.Argument7">
      <summary>Gets or sets the seventh in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`11.Argument8">
      <summary>Gets or sets the eighth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`11.Argument9">
      <summary>Gets or sets the ninth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`11.Result">
      <summary>Gets or sets the out argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="T:System.Activities.ActivityFunc`12">
      <summary>Defines an activity delegate with one in argument of type T and one out argument of type TResult.</summary>
      <typeparam name="T1">The type of the first in argument of the activity delegate. </typeparam>
      <typeparam name="T2">The type of the second in argument of the activity delegate.</typeparam>
      <typeparam name="T3">The type of the third in argument of the activity delegate.</typeparam>
      <typeparam name="T4">The type of the fourth in argument of the activity delegate.</typeparam>
      <typeparam name="T5">The type of the fifth in argument of the activity delegate.</typeparam>
      <typeparam name="T6">The type of the sixth in argument of the activity delegate.</typeparam>
      <typeparam name="T7">The type of the seventh in argument of the activity delegate.</typeparam>
      <typeparam name="T8">The type of the eighth in argument of the activity delegate.</typeparam>
      <typeparam name="T9">The type of the ninth in argument of the activity delegate.</typeparam>
      <typeparam name="T10">The type of the tenth in argument of the activity delegate.</typeparam>
      <typeparam name="T11">The type of the eleventh in argument of the activity delegate.</typeparam>
      <typeparam name="TResult">The type of the out argument of the activity delegate.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityFunc`12.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityFunc`12" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityFunc`12.Argument1">
      <summary>Gets or sets the first in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`12.Argument10">
      <summary>Gets or sets the tenth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`12.Argument11">
      <summary>Gets or sets the eleventh in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`12.Argument2">
      <summary>Gets or sets the second in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`12.Argument3">
      <summary>Gets or sets the third in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`12.Argument4">
      <summary>Gets or sets the fourth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`12.Argument5">
      <summary>Gets or sets the fifth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`12.Argument6">
      <summary>Gets or sets the sixth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`12.Argument7">
      <summary>Gets or sets the seventh in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`12.Argument8">
      <summary>Gets or sets the eighth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`12.Argument9">
      <summary>Gets or sets the ninth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`12.Result">
      <summary>Gets or sets the out argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="T:System.Activities.ActivityFunc`13">
      <summary>Defines an activity delegate with one in argument of type T and one out argument of type TResult.</summary>
      <typeparam name="T1">The type of the first in argument of the activity delegate.</typeparam>
      <typeparam name="T2">The type of the second in argument of the activity delegate. </typeparam>
      <typeparam name="T3">The type of the third in argument of the activity delegate.</typeparam>
      <typeparam name="T4">The type of the fourth in argument of the activity delegate.</typeparam>
      <typeparam name="T5">The type of the fifth in argument of the activity delegate.</typeparam>
      <typeparam name="T6">The type of the sixth in argument of the activity delegate.</typeparam>
      <typeparam name="T7">The type of the seventh in argument of the activity delegate.</typeparam>
      <typeparam name="T8">The type of the eighth in argument of the activity delegate.</typeparam>
      <typeparam name="T9">The type of the ninth in argument of the activity delegate.</typeparam>
      <typeparam name="T10">The type of the tenth in argument of the activity delegate.</typeparam>
      <typeparam name="T11">The type of the eleventh in argument of the activity delegate.</typeparam>
      <typeparam name="T12">The type of the twelfth in argument of the activity delegate.</typeparam>
      <typeparam name="TResult">The type of the out argument of the activity delegate.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityFunc`13.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityFunc`13" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityFunc`13.Argument1">
      <summary>Gets or sets the first in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`13.Argument10">
      <summary>Gets or sets the tenth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`13.Argument11">
      <summary>Gets or sets the eleventh in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`13.Argument12">
      <summary>Gets or sets the twelfth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`13.Argument2">
      <summary>Gets or sets the second in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`13.Argument3">
      <summary>Gets or sets the third in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`13.Argument4">
      <summary>Gets or sets the fourth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`13.Argument5">
      <summary>Gets or sets the fifth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`13.Argument6">
      <summary>Gets or sets the sixth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`13.Argument7">
      <summary>Gets or sets the seventh in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`13.Argument8">
      <summary>Gets or sets the eighth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`13.Argument9">
      <summary>Gets or sets the ninth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`13.Result">
      <summary>Gets or sets the out argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="T:System.Activities.ActivityFunc`14">
      <summary>Defines an activity delegate with one in argument of type T and one out argument of type TResult.</summary>
      <typeparam name="T1">The type of the first in argument of the activity delegate.</typeparam>
      <typeparam name="T2">The type of the second in argument of the activity delegate.</typeparam>
      <typeparam name="T3">The type of the third in argument of the activity delegate. </typeparam>
      <typeparam name="T4">The type of the fourth in argument of the activity delegate.</typeparam>
      <typeparam name="T5">The type of the fifth in argument of the activity delegate.</typeparam>
      <typeparam name="T6">The type of the sixth in argument of the activity delegate.</typeparam>
      <typeparam name="T7">The type of the seventh in argument of the activity delegate.</typeparam>
      <typeparam name="T8">The type of the eighth in argument of the activity delegate.</typeparam>
      <typeparam name="T9">The type of the ninth in argument of the activity delegate.</typeparam>
      <typeparam name="T10">The type of the tenth in argument of the activity delegate.</typeparam>
      <typeparam name="T11">The type of the eleventh in argument of the activity delegate.</typeparam>
      <typeparam name="T12">The type of the twelfth in argument of the activity delegate.</typeparam>
      <typeparam name="T13">The type of the thirteenth in argument of the activity delegate.</typeparam>
      <typeparam name="TResult">The type of the out argument of the activity delegate.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityFunc`14.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityFunc`14" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityFunc`14.Argument1">
      <summary>Gets or sets the first in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`14.Argument10">
      <summary>Gets or sets the tenth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`14.Argument11">
      <summary>Gets or sets the eleventh in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`14.Argument12">
      <summary>Gets or sets the twelfth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`14.Argument13">
      <summary>Gets or sets the thirteenth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`14.Argument2">
      <summary>Gets or sets the second in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`14.Argument3">
      <summary>Gets or sets the third in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`14.Argument4">
      <summary>Gets or sets the fourth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`14.Argument5">
      <summary>Gets or sets the fifth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`14.Argument6">
      <summary>Gets or sets the sixth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`14.Argument7">
      <summary>Gets or sets the seventh in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`14.Argument8">
      <summary>Gets or sets the eighth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`14.Argument9">
      <summary>Gets or sets the ninth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`14.Result">
      <summary>Gets or sets the out argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="T:System.Activities.ActivityFunc`15">
      <summary>Defines an activity delegate with one in argument of type T and one out argument of type TResult.</summary>
      <typeparam name="T1">The type of the first in argument of the activity delegate.</typeparam>
      <typeparam name="T2">The type of the second in argument of the activity delegate.</typeparam>
      <typeparam name="T3">The type of the third in argument of the activity delegate.</typeparam>
      <typeparam name="T4">The type of the fourth in argument of the activity delegate.</typeparam>
      <typeparam name="T5">The type of the fifth in argument of the activity delegate.</typeparam>
      <typeparam name="T6">The type of the sixth in argument of the activity delegate.</typeparam>
      <typeparam name="T7">The type of the seventh in argument of the activity delegate.</typeparam>
      <typeparam name="T8">The type of the eighth in argument of the activity delegate.</typeparam>
      <typeparam name="T9">The type of the ninth in argument of the activity delegate.</typeparam>
      <typeparam name="T10">The type of the tenth in argument of the activity delegate.</typeparam>
      <typeparam name="T11">The type of the eleventh in argument of the activity delegate.</typeparam>
      <typeparam name="T12">The type of the twelfth in argument of the activity delegate.</typeparam>
      <typeparam name="T13">The type of the thirteenth in argument of the activity delegate.</typeparam>
      <typeparam name="T14">The type of the fourteenth in argument of the activity delegate.</typeparam>
      <typeparam name="TResult">The type of the out argument of the activity delegate.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityFunc`15.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityFunc`15" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityFunc`15.Argument1">
      <summary>Gets or sets the first in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`15.Argument10">
      <summary>Gets or sets the tenth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`15.Argument11">
      <summary>Gets or sets the eleventh in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`15.Argument12">
      <summary>Gets or sets the twelfth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`15.Argument13">
      <summary>Gets or sets the thirteenth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`15.Argument14">
      <summary>Gets or sets the fourteenth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`15.Argument2">
      <summary>Gets or sets the second in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`15.Argument3">
      <summary>Gets or sets the third in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`15.Argument4">
      <summary>Gets or sets the fourth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`15.Argument5">
      <summary>Gets or sets the fifth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`15.Argument6">
      <summary>Gets or sets the sixth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`15.Argument7">
      <summary>Gets or sets the seventh in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`15.Argument8">
      <summary>Gets or sets the eighth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`15.Argument9">
      <summary>Gets or sets the ninth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`15.Result">
      <summary>Gets or sets the out argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="T:System.Activities.ActivityFunc`16">
      <summary>Defines an activity delegate with one in argument of type T and one out argument of type TResult.</summary>
      <typeparam name="T1">The type of the first in argument of the activity delegate.</typeparam>
      <typeparam name="T2">The type of the second in argument of the activity delegate.</typeparam>
      <typeparam name="T3">The type of the third in argument of the activity delegate. </typeparam>
      <typeparam name="T4">The type of the fourth in argument of the activity delegate.</typeparam>
      <typeparam name="T5">The type of the fifth in argument of the activity delegate.</typeparam>
      <typeparam name="T6">The type of the sixth in argument of the activity delegate.</typeparam>
      <typeparam name="T7">The type of the seventh in argument of the activity delegate.</typeparam>
      <typeparam name="T8">The type of the eighth in argument of the activity delegate.</typeparam>
      <typeparam name="T9">The type of the ninth in argument of the activity delegate.</typeparam>
      <typeparam name="T10">The type of the tenth in argument of the activity delegate.</typeparam>
      <typeparam name="T11">The type of the eleventh in argument of the activity delegate.</typeparam>
      <typeparam name="T12">The type of the twelfth in argument of the activity delegate.</typeparam>
      <typeparam name="T13">The type of the thirteenth in argument of the activity delegate.</typeparam>
      <typeparam name="T14">The type of the fourteenth in argument of the activity delegate.</typeparam>
      <typeparam name="T15">The type of the fifteenth in argument of the activity delegate.</typeparam>
      <typeparam name="TResult">The type of the out argument of the activity delegate.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityFunc`16.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityFunc`16" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityFunc`16.Argument1">
      <summary>Gets or sets the first in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`16.Argument10">
      <summary>Gets or sets the tenth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`16.Argument11">
      <summary>Gets or sets the eleventh in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`16.Argument12">
      <summary>Gets or sets the twelfth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`16.Argument13">
      <summary>Gets or sets the thirteenth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`16.Argument14">
      <summary>Gets or sets the fourteenth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`16.Argument15">
      <summary>Gets or sets the fifteenth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`16.Argument2">
      <summary>Gets or sets the second in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`16.Argument3">
      <summary>Gets or sets the third in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`16.Argument4">
      <summary>Gets or sets the fourth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`16.Argument5">
      <summary>Gets or sets the fifth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`16.Argument6">
      <summary>Gets or sets the sixth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`16.Argument7">
      <summary>Gets or sets the seventh in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`16.Argument8">
      <summary>Gets or sets the eighth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`16.Argument9">
      <summary>Gets or sets the ninth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`16.Result">
      <summary>Gets or sets the out argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="T:System.Activities.ActivityFunc`17">
      <summary>Defines an activity delegate with one in argument of type T and one out argument of type TResult.</summary>
      <typeparam name="T1">The type of the first in argument of the activity delegate.</typeparam>
      <typeparam name="T2">The type of the second in argument of the activity delegate.</typeparam>
      <typeparam name="T3">The type of the third in argument of the activity delegate.</typeparam>
      <typeparam name="T4">The type of the fourth in argument of the activity delegate.</typeparam>
      <typeparam name="T5">The type of the fifth in argument of the activity delegate.</typeparam>
      <typeparam name="T6">The type of the sixth in argument of the activity delegate.</typeparam>
      <typeparam name="T7">The type of the seventh in argument of the activity delegate.</typeparam>
      <typeparam name="T8">The type of the eighth in argument of the activity delegate.</typeparam>
      <typeparam name="T9">The type of the ninth in argument of the activity delegate.</typeparam>
      <typeparam name="T10">The type of the tenth in argument of the activity delegate.</typeparam>
      <typeparam name="T11">The type of the eleventh in argument of the activity delegate.</typeparam>
      <typeparam name="T12">The type of the twelfth in argument of the activity delegate. </typeparam>
      <typeparam name="T13">The type of the thirteenth in argument of the activity delegate.</typeparam>
      <typeparam name="T14">The type of the fourteenth in argument of the activity delegate.</typeparam>
      <typeparam name="T15">The type of the fifteenth in argument of the activity delegate.</typeparam>
      <typeparam name="T16">The type of the sixteenth in argument of the activity delegate.</typeparam>
      <typeparam name="TResult">The type of the out argument of the activity delegate.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityFunc`17.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityFunc`17" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityFunc`17.Argument1">
      <summary>Gets or sets the first in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`17.Argument10">
      <summary>Gets or sets the tenth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`17.Argument11">
      <summary>Gets or sets the eleventh in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`17.Argument12">
      <summary>Gets or sets the twelfth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`17.Argument13">
      <summary>Gets or sets the thirteenth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`17.Argument14">
      <summary>Gets or sets the fourteenth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`17.Argument15">
      <summary>Gets or sets the fifteenth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`17.Argument16">
      <summary>Gets or sets the sixteenth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`17.Argument2">
      <summary>Gets or sets the second in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`17.Argument3">
      <summary>Gets or sets the third in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`17.Argument4">
      <summary>Gets or sets the fourth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`17.Argument5">
      <summary>Gets or sets the fifth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`17.Argument6">
      <summary>Gets or sets the sixth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`17.Argument7">
      <summary>Gets or sets the seventh in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`17.Argument8">
      <summary>Gets or sets the eighth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`17.Argument9">
      <summary>Gets or sets the ninth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`17.Result">
      <summary>Gets or sets the out argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="T:System.Activities.ActivityFunc`2">
      <summary>Defines an activity delegate with one in argument of type <paramref name="T" /> and one out argument of type <paramref name="TResult" />.</summary>
      <typeparam name="T">The type of the in argument of the activity delegate.</typeparam>
      <typeparam name="TResult">The type of the out argument of the activity delegate. </typeparam>
    </member>
    <member name="M:System.Activities.ActivityFunc`2.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityFunc`2" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityFunc`2.Argument">
      <summary>Gets or sets the in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`2.Result">
      <summary>Gets or sets the out argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="T:System.Activities.ActivityFunc`3">
      <summary>Defines an activity delegate with one in argument of type T and one out argument of type TResult.</summary>
      <typeparam name="T1">The type of the first in argument of the activity delegate.</typeparam>
      <typeparam name="T2">The type of the second in argument of the activity delegate.</typeparam>
      <typeparam name="TResult">The type of the out argument of the activity delegate.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityFunc`3.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityFunc`3" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityFunc`3.Argument1">
      <summary>Gets or sets the first in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`3.Argument2">
      <summary>Gets or sets the second in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate. </returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`3.Result">
      <summary>Gets or sets the out argument of the activity delegate.</summary>
      <returns>The result argument.</returns>
    </member>
    <member name="T:System.Activities.ActivityFunc`4">
      <summary>Defines an activity delegate with three in arguments of type T and one out argument of type TResult.</summary>
      <typeparam name="T1">The type of the first in argument of the activity delegate.</typeparam>
      <typeparam name="T2">The type of the second in argument of the activity delegate.</typeparam>
      <typeparam name="T3">The type of the third in argument of the activity delegate. </typeparam>
      <typeparam name="TResult">The type of the out argument of the activity delegate.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityFunc`4.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityFunc`4" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityFunc`4.Argument1">
      <summary>Gets or sets the first in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`4.Argument2">
      <summary>Gets or sets the second in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`4.Argument3">
      <summary>Gets or sets the third in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`4.Result">
      <summary>Gets or sets the out argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="T:System.Activities.ActivityFunc`5">
      <summary>Defines an activity delegate with four in arguments of type T and one out argument of type TResult.</summary>
      <typeparam name="T1">The type of the first in argument of the activity delegate.</typeparam>
      <typeparam name="T2">The type of the second in argument of the activity delegate.</typeparam>
      <typeparam name="T3">The type of the third in argument of the activity delegate.</typeparam>
      <typeparam name="T4">The type of the fourth in argument of the activity delegate.</typeparam>
      <typeparam name="TResult">The type of the out argument of the activity delegate.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityFunc`5.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityFunc`5" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityFunc`5.Argument1">
      <summary>Gets or sets the first in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`5.Argument2">
      <summary>Gets or sets the second in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`5.Argument3">
      <summary>Gets or sets the third in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate. </returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`5.Argument4">
      <summary>Gets or sets the fourth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`5.Result">
      <summary>Gets or sets the out argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="T:System.Activities.ActivityFunc`6">
      <summary>Defines an activity delegate with five in arguments of type T and one out argument of type TResult.</summary>
      <typeparam name="T1">The type of the first in argument of the activity delegate.</typeparam>
      <typeparam name="T2">The type of the second in argument of the activity delegate.</typeparam>
      <typeparam name="T3">The type of the third in argument of the activity delegate. </typeparam>
      <typeparam name="T4">The type of the fourth in argument of the activity delegate.</typeparam>
      <typeparam name="T5">The type of the fifth in argument of the activity delegate.</typeparam>
      <typeparam name="TResult">The type of the out argument of the activity delegate.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityFunc`6.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityFunc`6" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityFunc`6.Argument1">
      <summary>Gets or sets the first in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`6.Argument2">
      <summary>Gets or sets the second in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`6.Argument3">
      <summary>Gets or sets the third in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`6.Argument4">
      <summary>Gets or sets the fourth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`6.Argument5">
      <summary>Gets or sets the fifth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`6.Result">
      <summary>Gets or sets the out argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="T:System.Activities.ActivityFunc`7">
      <summary>Defines an activity delegate with six in arguments of type T and one out argument of type TResult.</summary>
      <typeparam name="T1">The type of the first in argument of the activity delegate. </typeparam>
      <typeparam name="T2">The type of the second in argument of the activity delegate.</typeparam>
      <typeparam name="T3">The type of the third in argument of the activity delegate.</typeparam>
      <typeparam name="T4">The type of the fourth in argument of the activity delegate.</typeparam>
      <typeparam name="T5">The type of the fifth in argument of the activity delegate.</typeparam>
      <typeparam name="T6">The type of the sixth in argument of the activity delegate.</typeparam>
      <typeparam name="TResult">The type of the out argument of the activity delegate.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityFunc`7.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityFunc`7" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityFunc`7.Argument1">
      <summary>Gets or sets the first in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`7.Argument2">
      <summary>Gets or sets the second in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`7.Argument3">
      <summary>Gets or sets the third in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`7.Argument4">
      <summary>Gets or sets the fourth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`7.Argument5">
      <summary>Gets or sets the fifth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`7.Argument6">
      <summary>Gets or sets the sixth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`7.Result">
      <summary>Gets or sets the out argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="T:System.Activities.ActivityFunc`8">
      <summary>Defines an activity delegate with seven in arguments of type T and one out argument of type TResult.</summary>
      <typeparam name="T1">The type of the first in argument of the activity delegate.</typeparam>
      <typeparam name="T2">The type of the second in argument of the activity delegate.</typeparam>
      <typeparam name="T3">The type of the third in argument of the activity delegate. </typeparam>
      <typeparam name="T4">The type of the fourth in argument of the activity delegate.</typeparam>
      <typeparam name="T5">The type of the fifth in argument of the activity delegate.</typeparam>
      <typeparam name="T6">The type of the sixth in argument of the activity delegate.</typeparam>
      <typeparam name="T7">The type of the seventh in argument of the activity delegate.</typeparam>
      <typeparam name="TResult">The type of the out argument of the activity delegate.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityFunc`8.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityFunc`8" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityFunc`8.Argument1">
      <summary>Gets or sets the first in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`8.Argument2">
      <summary>Gets or sets the second in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`8.Argument3">
      <summary>Gets or sets the third in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`8.Argument4">
      <summary>Gets or sets the fourth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`8.Argument5">
      <summary>Gets or sets the fifth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`8.Argument6">
      <summary>Gets or sets the sixth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`8.Argument7">
      <summary>Gets or sets the seventh in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`8.Result">
      <summary>Gets or sets the out argument of the activity delegate.</summary>
      <returns>The argument.</returns>
    </member>
    <member name="T:System.Activities.ActivityFunc`9">
      <summary>Defines an activity delegate with eight in arguments of type T and one out argument of type TResult.</summary>
      <typeparam name="T1">The type of the first in argument of the activity delegate.</typeparam>
      <typeparam name="T2">The type of the second in argument of the activity delegate.</typeparam>
      <typeparam name="T3">The type of the third in argument of the activity delegate.</typeparam>
      <typeparam name="T4">The type of the fourth in argument of the activity delegate.</typeparam>
      <typeparam name="T5">The type of the fifth in argument of the activity delegate.</typeparam>
      <typeparam name="T6">The type of the sixth in argument of the activity delegate.</typeparam>
      <typeparam name="T7">The type of the seventh in argument of the activity delegate.</typeparam>
      <typeparam name="T8">The type of the eighth in argument of the activity delegate.</typeparam>
      <typeparam name="TResult">The type of the out argument of the activity delegate.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityFunc`9.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ActivityFunc`9" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityFunc`9.Argument1">
      <summary>Gets or sets the first in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`9.Argument2">
      <summary>Gets or sets the second in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`9.Argument3">
      <summary>Gets or sets the third in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`9.Argument4">
      <summary>Gets or sets the fourth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`9.Argument5">
      <summary>Gets or sets the fifth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`9.Argument6">
      <summary>Gets or sets the sixth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`9.Argument7">
      <summary>Gets or sets the seventh in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`9.Argument8">
      <summary>Gets or sets the eighth in argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate. </returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`9.Result">
      <summary>Gets or sets the out argument of the activity delegate.</summary>
      <returns>An argument to an activity delegate.</returns>
    </member>
    <member name="T:System.Activities.ActivityInstance">
      <summary>Represents the instance state of an activity at runtime.</summary>
    </member>
    <member name="P:System.Activities.ActivityInstance.Activity">
      <summary>Gets the activity represented by the current <see cref="T:System.Activities.ActivityInstance" />.</summary>
      <returns>The activity represented by this <see cref="T:System.Activities.ActivityInstance" />.</returns>
    </member>
    <member name="P:System.Activities.ActivityInstance.Id">
      <summary>Gets an identifier that uniquely identifies the <see cref="T:System.Activities.ActivityInstance" />.</summary>
      <returns>An identifier that uniquely identifies the <see cref="T:System.Activities.ActivityInstance" />.</returns>
    </member>
    <member name="P:System.Activities.ActivityInstance.ImplementationVersion">
      <summary>Gets or sets the implementation version for the instance.</summary>
      <returns>The implementation version for the instance.</returns>
    </member>
    <member name="P:System.Activities.ActivityInstance.IsCompleted">
      <summary>Gets a value that indicates whether the activity represented by the current <see cref="T:System.Activities.ActivityInstance" /> is completed.</summary>
      <returns>true if the activity is completed; otherwise false.</returns>
    </member>
    <member name="P:System.Activities.ActivityInstance.State">
      <summary>Gets the <see cref="T:System.Activities.ActivityInstanceState" /> of the current <see cref="T:System.Activities.ActivityInstance" />.</summary>
      <returns>The state of the activity instance.</returns>
    </member>
    <member name="T:System.Activities.ActivityInstanceState">
      <summary>Describes the state of an activity instance.</summary>
    </member>
    <member name="F:System.Activities.ActivityInstanceState.Canceled">
      <summary>Specifies that the activity is in a canceled state.</summary>
    </member>
    <member name="F:System.Activities.ActivityInstanceState.Closed">
      <summary>Specifies that the activity is in a closed state.</summary>
    </member>
    <member name="F:System.Activities.ActivityInstanceState.Executing">
      <summary>Specifies that the activity is in an executing state.</summary>
    </member>
    <member name="F:System.Activities.ActivityInstanceState.Faulted">
      <summary>Specifies that the activity is in a faulted state.</summary>
    </member>
    <member name="T:System.Activities.ActivityMetadata">
      <summary>Represents the set of arguments, child activities, variables, and delegates that a configured <see cref="T:System.Activities.Activity" /> introduces to the execution environment. </summary>
    </member>
    <member name="M:System.Activities.ActivityMetadata.AddArgument(System.Activities.RuntimeArgument)">
      <summary>Adds an argument to the collection of arguments of an activity.</summary>
      <param name="argument">The argument to add to the collection.</param>
    </member>
    <member name="M:System.Activities.ActivityMetadata.AddDefaultExtensionProvider``1(System.Func{``0})">
      <summary>Adds the specified extension provider to the collection of default extension providers for the activity.</summary>
      <param name="extensionProvider">The function that returns the extension.</param>
      <typeparam name="T">The type of the extension provider.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityMetadata.AddImportedChild(System.Activities.Activity)">
      <summary>Adds the specified activity to the metadata’s list of imported child activities.</summary>
      <param name="importedChild">The activity to add.</param>
    </member>
    <member name="M:System.Activities.ActivityMetadata.AddImportedChild(System.Activities.Activity,System.Object)">
      <summary>Adds the specified activity to the metadata’s list of imported child activities.</summary>
      <param name="importedChild">The activity to add.</param>
      <param name="origin">The origin.</param>
    </member>
    <member name="M:System.Activities.ActivityMetadata.AddImportedDelegate(System.Activities.ActivityDelegate)">
      <summary>Adds the specified delegate to the metadata’s list of imported delegates.</summary>
      <param name="importedDelegate">The delegate to add.</param>
    </member>
    <member name="M:System.Activities.ActivityMetadata.AddImportedDelegate(System.Activities.ActivityDelegate,System.Object)">
      <summary>Adds the specified delegate to the metadata’s list of imported delegates.</summary>
      <param name="importedDelegate">The delegate to add.</param>
      <param name="origin">The origin.</param>
    </member>
    <member name="M:System.Activities.ActivityMetadata.AddValidationError(System.Activities.Validation.ValidationError)">
      <summary>Adds the specified validation error to the metadata’s collection of validation errors.</summary>
      <param name="validationError">The validation error to add.</param>
    </member>
    <member name="M:System.Activities.ActivityMetadata.AddValidationError(System.String)">
      <summary>Adds a validation error to the metadata’s collection of validation errors using the specified description.</summary>
      <param name="validationErrorMessage">A message that describes the validation error.</param>
    </member>
    <member name="M:System.Activities.ActivityMetadata.AddVariable(System.Activities.Variable)">
      <summary>Adds the specified variable to the metadata’s collection of variables.</summary>
      <param name="variable">The variable to add.</param>
    </member>
    <member name="M:System.Activities.ActivityMetadata.AddVariable(System.Activities.Variable,System.Object)">
      <summary>Adds the specified variable to the metadata’s collection of variables.</summary>
      <param name="variable">The variable to add.</param>
      <param name="origin">The origin.</param>
    </member>
    <member name="M:System.Activities.ActivityMetadata.Bind(System.Activities.Argument,System.Activities.RuntimeArgument)">
      <summary>Binds the specified <see cref="T:System.Activities.Argument" /> to the specified <see cref="T:System.Activities.RuntimeArgument" />.</summary>
      <param name="binding">The <see cref="T:System.Activities.Argument" /> to bind.</param>
      <param name="argument">The <see cref="T:System.Activities.RuntimeArgument" /> to bind.</param>
    </member>
    <member name="P:System.Activities.ActivityMetadata.Environment">
      <summary>Gets the activity’s <see cref="T:System.Activities.LocationReferenceEnvironment" /> of arguments, variables, delegate arguments, or symbols introduced by a <see cref="T:System.Activities.Hosting.SymbolResolver" />.</summary>
      <returns>The activity’s location reference environment of arguments, variables, delegate arguments, or symbols introduced by a <see cref="T:System.Activities.Hosting.SymbolResolver" />.</returns>
    </member>
    <member name="M:System.Activities.ActivityMetadata.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to this metadata instance.</summary>
      <returns>true if the specified object is equal to this metadata instance; otherwise, false.</returns>
      <param name="obj">The object to compare.</param>
    </member>
    <member name="M:System.Activities.ActivityMetadata.GetArgumentsWithReflection">
      <summary>Returns a collection of arguments obtained by using reflection.</summary>
      <returns>A collection of arguments.</returns>
    </member>
    <member name="M:System.Activities.ActivityMetadata.GetHashCode">
      <summary>Returns a unique identifier for this metadata instance.</summary>
      <returns>An integer that uniquely identifies this metadata instance.</returns>
    </member>
    <member name="M:System.Activities.ActivityMetadata.GetImportedChildrenWithReflection">
      <summary>Returns a collection of imported child activities using reflection.</summary>
      <returns>A collection of imported child activities.</returns>
    </member>
    <member name="M:System.Activities.ActivityMetadata.GetImportedDelegatesWithReflection">
      <summary>Returns a collection of delegates using reflection.</summary>
      <returns>A collection of delegates.</returns>
    </member>
    <member name="M:System.Activities.ActivityMetadata.GetVariablesWithReflection">
      <summary>Returns a collection of variables using reflection.</summary>
      <returns>A collection of variables.</returns>
    </member>
    <member name="P:System.Activities.ActivityMetadata.HasViolations">
      <summary>Gets a value that indicates whether there are any validation errors in the metadata.</summary>
      <returns>true if validation errors are present; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.ActivityMetadata.op_Equality(System.Activities.ActivityMetadata,System.Activities.ActivityMetadata)">
      <summary>Returns a value that indicates whether the two specified metadata instances are equal.</summary>
      <returns>true if the two items are equal; otherwise, false.</returns>
      <param name="left">The first item to compare.</param>
      <param name="right">The second item to compare.</param>
    </member>
    <member name="M:System.Activities.ActivityMetadata.op_Inequality(System.Activities.ActivityMetadata,System.Activities.ActivityMetadata)">
      <summary>Returns a value that indicates whether the two specified metadata instances are not equal.</summary>
      <returns>true if the two items are not equal; otherwise, false.</returns>
      <param name="left">The first item to compare.</param>
      <param name="right">The second item to compare.</param>
    </member>
    <member name="M:System.Activities.ActivityMetadata.RequireExtension``1">
      <summary>Specifies that the activity requires an extension of the specified generic type at runtime.</summary>
      <typeparam name="T">The type of the extension.</typeparam>
    </member>
    <member name="M:System.Activities.ActivityMetadata.RequireExtension(System.Type)">
      <summary>Specifies that the activity requires an extension of the specified type at runtime.</summary>
      <param name="extensionType">The type of the extension.</param>
    </member>
    <member name="M:System.Activities.ActivityMetadata.SetArgumentsCollection(System.Collections.ObjectModel.Collection{System.Activities.RuntimeArgument})">
      <summary>Adds the specified collection of arguments to the activity’s arguments.</summary>
      <param name="arguments">The arguments to add.</param>
    </member>
    <member name="M:System.Activities.ActivityMetadata.SetImportedChildrenCollection(System.Collections.ObjectModel.Collection{System.Activities.Activity})">
      <summary>Adds the specified collection as imported child activities of the activity.</summary>
      <param name="importedChildren">The activities to add.</param>
    </member>
    <member name="M:System.Activities.ActivityMetadata.SetImportedDelegatesCollection(System.Collections.ObjectModel.Collection{System.Activities.ActivityDelegate})">
      <summary>Adds the specified collection as imported delegates of the activity.</summary>
      <param name="importedDelegates">The delegates to add.</param>
    </member>
    <member name="M:System.Activities.ActivityMetadata.SetValidationErrorsCollection(System.Collections.ObjectModel.Collection{System.Activities.Validation.ValidationError})">
      <summary>Adds the specified collection of validation errors to the metadata’s collection of validation errors.</summary>
      <param name="validationErrors">The validation errors to add.</param>
    </member>
    <member name="M:System.Activities.ActivityMetadata.SetVariablesCollection(System.Collections.ObjectModel.Collection{System.Activities.Variable})">
      <summary>Adds the specified collection of variables to the activity’s variables.</summary>
      <param name="variables">The variables to add.</param>
    </member>
    <member name="T:System.Activities.ActivityPropertyReference">
      <summary>Represents a property reference that is used in <see cref="T:System.Activities.ActivityBuilder" /> and that maps to a <see cref="T:System.Activities.XamlIntegration.PropertyReferenceExtension`1" /> in an x:Class activity when the x:Class activity is deserialized into an <see cref="T:System.Activities.ActivityBuilder" />.</summary>
    </member>
    <member name="M:System.Activities.ActivityPropertyReference.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.ActivityPropertyReference" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityPropertyReference.SourceProperty">
      <summary>Gets or sets the source property name that corresponds to the property name in the x:Class activity definition.</summary>
      <returns>The source property name that corresponds to the property name in the x:Class activity definition.</returns>
    </member>
    <member name="P:System.Activities.ActivityPropertyReference.TargetProperty">
      <summary>Gets or sets the name of the property being set on the target object.</summary>
      <returns>The name of the property being set on the target object.</returns>
    </member>
    <member name="T:System.Activities.ActivityWithResult">
      <summary>Retrieves the value or type of an activity out argument. This class is abstract and derives from <see cref="T:System.Activities.Activity" /> class.</summary>
    </member>
    <member name="P:System.Activities.ActivityWithResult.Result">
      <summary>When implemented in a derived class, gets or sets the value of an object of type <see cref="T:System.Activities.OutArgument" />.</summary>
      <returns>An out argument.</returns>
    </member>
    <member name="P:System.Activities.ActivityWithResult.ResultType">
      <summary>When implemented in a derived class, gets the type of an activity <see cref="T:System.Activities.OutArgument" />.</summary>
      <returns>A type object.</returns>
    </member>
    <member name="T:System.Activities.Argument">
      <summary>The abstract base class that represents a binding terminal that supports the flow of data into and out of an activity. </summary>
    </member>
    <member name="P:System.Activities.Argument.ArgumentType">
      <summary>Gets the data type for the data bound to this <see cref="T:System.Activities.Argument" />.</summary>
      <returns>The data type for the data bound to this <see cref="T:System.Activities.Argument" />.</returns>
    </member>
    <member name="M:System.Activities.Argument.Create(System.Type,System.Activities.ArgumentDirection)">
      <summary>Initializes and returns a new <see cref="T:System.Activities.Argument" />.</summary>
      <returns>The newly created argument.</returns>
      <param name="type">The data type of the <see cref="T:System.Activities.Argument" />.</param>
      <param name="direction">One of the enumeration values that specifies the direction of the flow of data through the <see cref="T:System.Activities.Argument" />.</param>
    </member>
    <member name="M:System.Activities.Argument.CreateReference(System.Activities.Argument,System.String)">
      <summary>Creates a new argument that references the specified target argument using the specified referenced argument name.</summary>
      <returns>A new argument that references the specified target argument.</returns>
      <param name="argumentToReference">The target argument to reference.</param>
      <param name="referencedArgumentName">The name of the referenced argument.</param>
    </member>
    <member name="P:System.Activities.Argument.Direction">
      <summary>Gets an <see cref="T:System.Activities.ArgumentDirection" /> that specifies whether the <see cref="T:System.Activities.Argument" /> represents the flow of data into an activity, out of an activity, or both into and out of an activity. </summary>
      <returns>One of the enumeration values that specifies the direction of the flow of data through the <see cref="T:System.Activities.Argument" />.</returns>
    </member>
    <member name="P:System.Activities.Argument.EvaluationOrder">
      <summary>Gets or sets a zero-based value that specifies the order in which the argument is evaluated.</summary>
      <returns>A zero-based value that specifies the order in which the argument is evaluated.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value is less than zero and not equal to <see cref="F:System.Activities.Argument.UnspecifiedEvaluationOrder" />.</exception>
    </member>
    <member name="P:System.Activities.Argument.Expression">
      <summary>Gets or sets an <see cref="T:System.Activities.ActivityWithResult" /> that represents the value of the data bound to this <see cref="T:System.Activities.Argument" />.</summary>
      <returns>The value of the data bound to this <see cref="T:System.Activities.Argument" />.</returns>
    </member>
    <member name="M:System.Activities.Argument.Get(System.Activities.ActivityContext)">
      <summary>Gets the value of the argument using the specified activity context.</summary>
      <returns>The value of the argument.</returns>
      <param name="context">The current activity context.</param>
    </member>
    <member name="M:System.Activities.Argument.Get``1(System.Activities.ActivityContext)">
      <summary>Gets the value of the argument using the specified type and activity context.</summary>
      <returns>The value of the argument.</returns>
      <param name="context">The current activity context.</param>
      <typeparam name="T">The type of the argument.</typeparam>
    </member>
    <member name="M:System.Activities.Argument.GetLocation(System.Activities.ActivityContext)">
      <summary>Gets the <see cref="T:System.Activities.Location" /> for this <see cref="T:System.Activities.Argument" />.</summary>
      <returns>The location for this <see cref="T:System.Activities.Argument" />.</returns>
      <param name="context">The activity context of the executing activity.</param>
    </member>
    <member name="F:System.Activities.Argument.ResultValue">
      <summary>Represents the constant value of “Result”, which corresponds to the name of the <see cref="P:System.Activities.ActivityWithResult.Result" /> property of type <see cref="T:System.Activities.OutArgument" /> in the expression base class <see cref="T:System.Activities.ActivityWithResult" />.</summary>
    </member>
    <member name="M:System.Activities.Argument.Set(System.Activities.ActivityContext,System.Object)">
      <summary>Sets the value of the argument using the specified activity context.</summary>
      <param name="context">The current activity context.</param>
      <param name="value">The value for the argument.</param>
    </member>
    <member name="F:System.Activities.Argument.UnspecifiedEvaluationOrder">
      <summary>Represents the value of the <see cref="P:System.Activities.Argument.EvaluationOrder" /> property for an argument with an unspecified evaluation order. This value is read-only.</summary>
    </member>
    <member name="T:System.Activities.ArgumentDirection">
      <summary>Specifies the direction of data flow for an <see cref="T:System.Activities.Argument" />.</summary>
    </member>
    <member name="F:System.Activities.ArgumentDirection.In">
      <summary>An <see cref="T:System.Activities.Argument" /> that represents the flow of data into a workflow or activity.</summary>
    </member>
    <member name="F:System.Activities.ArgumentDirection.InOut">
      <summary>An <see cref="T:System.Activities.Argument" /> that represents the flow of data into and out of a workflow or activity.</summary>
    </member>
    <member name="F:System.Activities.ArgumentDirection.Out">
      <summary>An <see cref="T:System.Activities.Argument" /> that represents the flow of data out of a workflow or activity.</summary>
    </member>
    <member name="T:System.Activities.AsyncCodeActivity">
      <summary>Manages asynchronous code activity execution from start to completion. This is an abstract class.</summary>
    </member>
    <member name="M:System.Activities.AsyncCodeActivity.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.AsyncCodeActivity" /> class.</summary>
    </member>
    <member name="M:System.Activities.AsyncCodeActivity.BeginExecute(System.Activities.AsyncCodeActivityContext,System.AsyncCallback,System.Object)">
      <summary>When implemented in a derived class and using the specified execution context, callback method, and user state, enqueues an asynchronous activity in a run-time workflow. </summary>
      <returns>The object that saves variable information for an instance of an asynchronous activity.</returns>
      <param name="context">Information that defines the execution environment for the <see cref="T:System.Activities.AsyncCodeActivity" />.</param>
      <param name="callback">The method to be called after the asynchronous activity and completion notification have occurred.</param>
      <param name="state">An object that saves variable information for an instance of an asynchronous activity.</param>
    </member>
    <member name="M:System.Activities.AsyncCodeActivity.CacheMetadata(System.Activities.ActivityMetadata)">
      <summary>Not implemented. Use <see cref="M:System.Activities.AsyncCodeActivity.CacheMetadata(System.Activities.CodeActivityMetadata)" /> instead.</summary>
      <param name="metadata">Not implemented.</param>
    </member>
    <member name="M:System.Activities.AsyncCodeActivity.CacheMetadata(System.Activities.CodeActivityMetadata)">
      <summary>Serves as a virtual method and converts information obtained by cache reflection into arguments for an asynchronous activity.</summary>
      <param name="metadata">
        <see cref="T:System.Activities.CodeActivityMetadata" /> object that contains data for a set of asynchronous activity arguments. </param>
    </member>
    <member name="M:System.Activities.AsyncCodeActivity.Cancel(System.Activities.AsyncCodeActivityContext)">
      <summary>When implemented in a derived class and using the specified execution environment information, notifies the workflow runtime that the asynchronous activity operation has reached an early completion. Serves as a virtual method.</summary>
      <param name="context">Information that defines the execution environment for the <see cref="T:System.Activities.AsyncCodeActivity" />.</param>
    </member>
    <member name="M:System.Activities.AsyncCodeActivity.EndExecute(System.Activities.AsyncCodeActivityContext,System.IAsyncResult)">
      <summary>When implemented in a derived class and using the specified execution environment information, notifies the workflow runtime that the associated asynchronous activity operation has completed.</summary>
      <param name="context">Information that defines the execution environment for the <see cref="T:System.Activities.AsyncCodeActivity" />.</param>
      <param name="result">The implemented <see cref="T:System.IAsyncResult" /> that returns the status of an asynchronous activity when execution ends.</param>
    </member>
    <member name="P:System.Activities.AsyncCodeActivity.Implementation">
      <summary>Gets null or throws an error when there is an attempt to set the value of this property.</summary>
      <returns>An activity function.</returns>
    </member>
    <member name="P:System.Activities.AsyncCodeActivity.ImplementationVersion">
      <summary>Gets or sets the implementation version of the activity.</summary>
      <returns>The implementation version of the activity.</returns>
    </member>
    <member name="M:System.Activities.AsyncCodeActivity.OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.UpdateMapMetadata,System.Activities.Activity)">
      <summary>Raises an event when creating a map for the dynamic update.</summary>
      <param name="metadata">The metadata used.</param>
      <param name="originalActivity">The original activity.</param>
    </member>
    <member name="T:System.Activities.AsyncCodeActivity`1">
      <summary>Manages asynchronous code activity execution, for an activity of a specified type, from start to completion. This is an abstract and generic class.</summary>
      <typeparam name="TResult">The type of the asynchronous activity that is handled by this class. </typeparam>
    </member>
    <member name="M:System.Activities.AsyncCodeActivity`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.AsyncCodeActivity" /> class.</summary>
    </member>
    <member name="M:System.Activities.AsyncCodeActivity`1.BeginExecute(System.Activities.AsyncCodeActivityContext,System.AsyncCallback,System.Object)">
      <summary>When implemented in a derived class and using the specified execution context, callback method, and user state, enqueues an asynchronous activity in a run-time workflow. </summary>
      <returns>An object.</returns>
      <param name="context">Information that defines the execution environment for the <see cref="T:System.Activities.AsyncCodeActivity" />.</param>
      <param name="callback">The method to be called after the asynchronous activity and completion notification have occurred.</param>
      <param name="state">An object that saves variable information for an instance of an asynchronous activity.</param>
    </member>
    <member name="M:System.Activities.AsyncCodeActivity`1.CacheMetadata(System.Activities.ActivityMetadata)">
      <summary>Not implemented. Use <see cref="M:System.Activities.AsyncCodeActivity`1.CacheMetadata(System.Activities.CodeActivityMetadata)" /> instead.</summary>
      <param name="metadata">Not implemented.</param>
    </member>
    <member name="M:System.Activities.AsyncCodeActivity`1.CacheMetadata(System.Activities.CodeActivityMetadata)">
      <summary>Serves as a virtual method and converts information obtained by reflection on a cache into arguments for an asynchronous activity.</summary>
      <param name="metadata">
        <see cref="T:System.Activities.CodeActivityMetadata" /> object that contains data for a set of asynchronous activity arguments.</param>
    </member>
    <member name="M:System.Activities.AsyncCodeActivity`1.Cancel(System.Activities.AsyncCodeActivityContext)">
      <summary>When implemented in a derived class and using the specified execution environment information, notifies the workflow runtime that the asynchronous activity operation has been canceled. This method serves as a virtual method.</summary>
      <param name="context">Information that defines the execution environment for the <see cref="T:System.Activities.AsyncCodeActivity" />.</param>
    </member>
    <member name="M:System.Activities.AsyncCodeActivity`1.EndExecute(System.Activities.AsyncCodeActivityContext,System.IAsyncResult)">
      <summary>When implemented in a derived class and using the specified execution environment information, notifies the workflow runtime that the associated asynchronous activity operation has completed.</summary>
      <returns>A generic type.</returns>
      <param name="context">Information that defines the execution environment for the <see cref="T:System.Activities.AsyncCodeActivity" />.</param>
      <param name="result">The implemented <see cref="T:System.IAsyncResult" /> that returns the status of an asynchronous activity when execution ends.</param>
    </member>
    <member name="P:System.Activities.AsyncCodeActivity`1.Implementation">
      <summary>Gets null or throws an error when there is an attempt to set the value of this property.</summary>
      <returns>An activity function.</returns>
    </member>
    <member name="P:System.Activities.AsyncCodeActivity`1.ImplementationVersion">
      <summary>Gets or sets the implementation version of the activity.</summary>
      <returns>The implementation version of the activity.</returns>
    </member>
    <member name="M:System.Activities.AsyncCodeActivity`1.OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.UpdateMapMetadata,System.Activities.Activity)">
      <summary>Raises an event when creating a map for the dynamic update.</summary>
      <param name="metadata">The metadata.</param>
      <param name="originalActivity">The original activity.</param>
    </member>
    <member name="T:System.Activities.AsyncCodeActivityContext">
      <summary>The execution context for an asynchronous activity.</summary>
    </member>
    <member name="P:System.Activities.AsyncCodeActivityContext.IsCancellationRequested">
      <summary>Gets a value that indicates whether the currently executing <see cref="T:System.Activities.AsyncCodeActivity" /> is to be canceled.</summary>
      <returns>true if the currently executing <see cref="T:System.Activities.AsyncCodeActivity" /> is to be canceled; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.AsyncCodeActivityContext.MarkCanceled">
      <summary>Marks the current activity instance as canceled.</summary>
    </member>
    <member name="P:System.Activities.AsyncCodeActivityContext.UserState">
      <summary>Gets or sets a user-defined object associated with the current asynchronous activity.</summary>
      <returns>The user-defined object.</returns>
    </member>
    <member name="T:System.Activities.Bookmark">
      <summary>Represents a point at which a workflow or activity can passively wait to be resumed.</summary>
    </member>
    <member name="M:System.Activities.Bookmark.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Bookmark" /> class using the specified name.</summary>
      <param name="name">A name that identifies the bookmark.</param>
    </member>
    <member name="M:System.Activities.Bookmark.Equals(System.Activities.Bookmark)">
      <summary>Determines whether the current <see cref="T:System.Activities.Bookmark" /> and the specified <see cref="T:System.Activities.Bookmark" /> refer to the same continuation point in a workflow.</summary>
      <returns>true if the <see cref="T:System.Activities.Bookmark" /> objects are equal; otherwise, false.</returns>
      <param name="other">The bookmark to compare.</param>
    </member>
    <member name="M:System.Activities.Bookmark.Equals(System.Object)">
      <summary>Determines whether the current <see cref="T:System.Activities.Bookmark" /> and the specified object refer to the same continuation point in a workflow.</summary>
      <returns>true if the <see cref="T:System.Activities.Bookmark" /> objects are equal; otherwise, false.</returns>
      <param name="obj">The object to compare.</param>
    </member>
    <member name="M:System.Activities.Bookmark.GetHashCode">
      <summary>Returns a unique identifier for this <see cref="T:System.Activities.Bookmark" /> instance.</summary>
      <returns>The unique identifier of this <see cref="T:System.Activities.Bookmark" /> instance.</returns>
    </member>
    <member name="P:System.Activities.Bookmark.Name">
      <summary>Gets the bookmark name.</summary>
      <returns>The bookmark name.</returns>
    </member>
    <member name="M:System.Activities.Bookmark.ToString">
      <summary>Returns the bookmark name for a named bookmark or the bookmark ID for an unnamed bookmark.</summary>
      <returns>The bookmark name or ID.</returns>
    </member>
    <member name="T:System.Activities.BookmarkCallback">
      <summary>Represents the method that is called when a <see cref="T:System.Activities.Bookmark" /> is resumed.</summary>
      <param name="context">The execution environment of the activity handling the <see cref="T:System.Activities.Bookmark" /> resumption.</param>
      <param name="bookmark">The <see cref="T:System.Activities.Bookmark" /> being resumed.</param>
      <param name="value">The data associated with the <see cref="T:System.Activities.Bookmark" /> resumption. </param>
    </member>
    <member name="T:System.Activities.BookmarkOptions">
      <summary>Specifies the options for a <see cref="T:System.Activities.Bookmark" />.</summary>
    </member>
    <member name="F:System.Activities.BookmarkOptions.MultipleResume">
      <summary>A <see cref="T:System.Activities.Bookmark" /> that can be resumed multiple times.</summary>
    </member>
    <member name="F:System.Activities.BookmarkOptions.NonBlocking">
      <summary>A <see cref="T:System.Activities.Bookmark" /> that does not block the workflow.</summary>
    </member>
    <member name="F:System.Activities.BookmarkOptions.None">
      <summary>Default <see cref="T:System.Activities.Bookmark" /> options,</summary>
    </member>
    <member name="T:System.Activities.BookmarkResumptionResult">
      <summary>Defines an enumeration whose members represent the outcome of bookmark scheduling requests.</summary>
    </member>
    <member name="F:System.Activities.BookmarkResumptionResult.NotFound">
      <summary>The bookmark resumption was not scheduled because the bookmark could not be found.</summary>
    </member>
    <member name="F:System.Activities.BookmarkResumptionResult.NotReady">
      <summary>The bookmark resumption was not scheduled because the runtime has not yet created the bookmark. The host should wait until another idle point to try resumption again.</summary>
    </member>
    <member name="F:System.Activities.BookmarkResumptionResult.Success">
      <summary>The bookmark resumption was successfully scheduled.</summary>
    </member>
    <member name="T:System.Activities.BookmarkScope">
      <summary>Scopes a set of <see cref="T:System.Activities.Bookmark" /> objects that are categorized as operating under the same protocol.</summary>
    </member>
    <member name="M:System.Activities.BookmarkScope.#ctor(System.Guid)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.BookmarkScope" /> class with the specified GUID scope identification number.</summary>
      <param name="id">A GUID scope identification number.</param>
    </member>
    <member name="P:System.Activities.BookmarkScope.Default">
      <summary>Gets the default <see cref="T:System.Activities.BookmarkScope" />.</summary>
      <returns>The default <see cref="T:System.Activities.BookmarkScope" />.</returns>
    </member>
    <member name="M:System.Activities.BookmarkScope.Equals(System.Activities.BookmarkScope)">
      <summary>Gets a value that indicates whether the current <see cref="T:System.Activities.BookmarkScope" /> and the specified <see cref="T:System.Activities.BookmarkScope" /> are the same.</summary>
      <returns>true if the bookmark scopes are the same; otherwise, false.</returns>
      <param name="other">A bookmark scope object.</param>
    </member>
    <member name="M:System.Activities.BookmarkScope.GetHashCode">
      <summary>Generates an identification number for the current <see cref="T:System.Activities.BookmarkScope" />.</summary>
      <returns>A hash code.</returns>
    </member>
    <member name="P:System.Activities.BookmarkScope.Id">
      <summary>Gets the GUID that identifies the current <see cref="T:System.Activities.BookmarkScope" />.</summary>
      <returns>A GUID.</returns>
    </member>
    <member name="M:System.Activities.BookmarkScope.Initialize(System.Activities.NativeActivityContext,System.Guid)">
      <summary>Initializes the current <see cref="T:System.Activities.BookmarkScope" /> using the specified GUID.</summary>
      <param name="context">The current activity execution environment.</param>
      <param name="id">The GUID to assign to the <see cref="T:System.Activities.BookmarkScope" />.</param>
    </member>
    <member name="P:System.Activities.BookmarkScope.IsInitialized">
      <summary>Gets a value that indicates whether the current <see cref="T:System.Activities.BookmarkScope" /> has been initialized.</summary>
      <returns>true if the <see cref="T:System.Activities.BookmarkScope" /> has been initialized; otherwise, false.</returns>
    </member>
    <member name="T:System.Activities.BookmarkScopeHandle">
      <summary>A T:System.Handle used to manage the lifetime of a <see cref="T:System.Activities.BookmarkScope" />.</summary>
    </member>
    <member name="M:System.Activities.BookmarkScopeHandle.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.BookmarkScopeHandle" /> class.</summary>
    </member>
    <member name="P:System.Activities.BookmarkScopeHandle.BookmarkScope">
      <summary>The <see cref="T:System.Activities.BookmarkScope" /> associated with this <see cref="T:System.Activities.BookmarkScopeHandle" />.</summary>
      <returns>A <see cref="T:System.Activities.BookmarkScope" />.</returns>
    </member>
    <member name="M:System.Activities.BookmarkScopeHandle.CreateBookmarkScope(System.Activities.NativeActivityContext)">
      <summary>Creates a new <see cref="P:System.Activities.BookmarkScopeHandle.BookmarkScope" /></summary>
      <param name="context">The activity context.</param>
    </member>
    <member name="M:System.Activities.BookmarkScopeHandle.CreateBookmarkScope(System.Activities.NativeActivityContext,System.Guid)">
      <summary>Creates a new <see cref="T:System.Activities.BookmarkScope" />.</summary>
      <param name="context">The activity context.</param>
      <param name="scopeId">A unique global identifier associated with the <see cref="T:System.Activities.BookmarkScope" />.</param>
    </member>
    <member name="P:System.Activities.BookmarkScopeHandle.Default">
      <summary>The default <see cref="T:System.Activities.BookmarkScopeHandle" />.</summary>
      <returns>A <see cref="T:System.Activities.BookmarkScopeHandle" />.</returns>
    </member>
    <member name="M:System.Activities.BookmarkScopeHandle.Initialize(System.Activities.NativeActivityContext,System.Guid)">
      <summary>Initializes the <see cref="P:System.Activities.BookmarkScopeHandle.BookmarkScope" />, usingthe specified activity context and GUID identifier.</summary>
      <param name="context">The activity context.</param>
      <param name="scope">A GUID identifier that is associated with <see cref="P:System.Activities.BookmarkScopeHandle.BookmarkScope" />.</param>
    </member>
    <member name="T:System.Activities.CodeActivity">
      <summary>An abstract class for creating a custom activity with imperative behavior defined with the <see cref="M:System.Activities.CodeActivity.Execute(System.Activities.CodeActivityContext)" /> method, which gives access to variable and argument resolution and extensions.</summary>
    </member>
    <member name="M:System.Activities.CodeActivity.#ctor">
      <summary>When implemented in a derived class, creates an instance of the derived class.</summary>
    </member>
    <member name="M:System.Activities.CodeActivity.CacheMetadata(System.Activities.ActivityMetadata)">
      <summary>Not implemented. Use <see cref="M:System.Activities.CodeActivity.CacheMetadata(System.Activities.CodeActivityMetadata)" /> instead.</summary>
      <param name="metadata">Not implemented.</param>
    </member>
    <member name="M:System.Activities.CodeActivity.CacheMetadata(System.Activities.CodeActivityMetadata)">
      <summary>Creates and validates a description of the activity’s arguments, variables, child activities, and activity delegates.</summary>
      <param name="metadata">The activity’s metadata that encapsulates the activity’s arguments, variables, child activities, and activity delegates.</param>
    </member>
    <member name="M:System.Activities.CodeActivity.Execute(System.Activities.CodeActivityContext)">
      <summary>When implemented in a derived class, performs the execution of the activity.</summary>
      <param name="context">The execution context under which the activity executes.</param>
    </member>
    <member name="P:System.Activities.CodeActivity.Implementation">
      <summary>Not supported.</summary>
      <returns>Always returns null.</returns>
    </member>
    <member name="P:System.Activities.CodeActivity.ImplementationVersion">
      <summary>Gets or sets the implementation version of the activity.</summary>
      <returns>The implementation version of the activity.</returns>
    </member>
    <member name="M:System.Activities.CodeActivity.OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.UpdateMapMetadata,System.Activities.Activity)">
      <summary>Raises an event when creating a map for the dynamic update.</summary>
      <param name="metadata">The metadata.</param>
      <param name="originalActivity">The original activity.</param>
    </member>
    <member name="T:System.Activities.CodeActivity`1">
      <summary>An abstract class for creating a custom activity with imperative behavior defined in the <see cref="M:System.Activities.CodeActivity.Execute(System.Activities.CodeActivityContext)" /> method, giving access to variable and argument resolution and extensions.</summary>
      <typeparam name="TResult">The result returned by the activity.</typeparam>
    </member>
    <member name="M:System.Activities.CodeActivity`1.#ctor">
      <summary>When implemented in a derived class, creates an instance of the derived class.</summary>
    </member>
    <member name="M:System.Activities.CodeActivity`1.CacheMetadata(System.Activities.ActivityMetadata)">
      <summary>Not implemented. Use <see cref="M:System.Activities.CodeActivity.CacheMetadata(System.Activities.CodeActivityMetadata)" /> instead.</summary>
      <param name="metadata">Not implemented.</param>
    </member>
    <member name="M:System.Activities.CodeActivity`1.CacheMetadata(System.Activities.CodeActivityMetadata)">
      <summary>Creates and validates a description of the activity’s arguments, variables, child activities, and activity delegates.</summary>
      <param name="metadata">The activity’s metadata that encapsulates the activity’s arguments, variables, child activities, and activity delegates.</param>
    </member>
    <member name="M:System.Activities.CodeActivity`1.Execute(System.Activities.CodeActivityContext)">
      <summary>When implemented in a derived class, performs the execution of the activity.</summary>
      <returns>The result of the activity’s execution.</returns>
      <param name="context">The execution context under which the activity executes.</param>
    </member>
    <member name="P:System.Activities.CodeActivity`1.Implementation">
      <summary>Not supported.</summary>
      <returns>Always returns null.</returns>
    </member>
    <member name="P:System.Activities.CodeActivity`1.ImplementationVersion">
      <summary>Gets or sets the implementation version of the activity.</summary>
      <returns>The implementation version of the activity.</returns>
    </member>
    <member name="M:System.Activities.CodeActivity`1.OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.UpdateMapMetadata,System.Activities.Activity)">
      <summary>Raises an event when creating a map for the dynamic update.</summary>
      <param name="metadata">The metadata.</param>
      <param name="originalActivity">The original activity.</param>
    </member>
    <member name="T:System.Activities.CodeActivityContext">
      <summary>Extends <see cref="T:System.Activities.ActivityContext" /> and provides additional functionality for <see cref="T:System.Activities.CodeActivity" />. </summary>
    </member>
    <member name="M:System.Activities.CodeActivityContext.GetProperty``1">
      <summary>Gets the execution property of the specified type.</summary>
      <returns>The execution property.</returns>
      <typeparam name="THandle">The type of execution property.</typeparam>
    </member>
    <member name="M:System.Activities.CodeActivityContext.Track(System.Activities.Tracking.CustomTrackingRecord)">
      <summary>Sends the specified custom tracking record to any registered tracking providers.</summary>
      <param name="record">The data to be tracked.</param>
    </member>
    <member name="T:System.Activities.CodeActivityMetadata">
      <summary>Represents the set of arguments that a configured <see cref="T:System.Activities.CodeActivity" /> introduces to the execution environment.</summary>
    </member>
    <member name="M:System.Activities.CodeActivityMetadata.AddArgument(System.Activities.RuntimeArgument)">
      <summary>Adds an argument to the collection of arguments of an activity.</summary>
      <param name="argument">The argument to add to the collection.</param>
    </member>
    <member name="M:System.Activities.CodeActivityMetadata.AddDefaultExtensionProvider``1(System.Func{``0})">
      <summary>Adds the specified extension provider to the collection of default extension providers for the activity.</summary>
      <param name="extensionProvider">The function that returns the extension.</param>
      <typeparam name="T">The type of the extension provider.</typeparam>
    </member>
    <member name="M:System.Activities.CodeActivityMetadata.AddValidationError(System.Activities.Validation.ValidationError)">
      <summary>Adds the specified validation error to the metadata’s collection of validation errors.</summary>
      <param name="validationError">The validation error to add.</param>
    </member>
    <member name="M:System.Activities.CodeActivityMetadata.AddValidationError(System.String)">
      <summary>Adds a validation error to the metadata’s collection of validation errors using the specified description.</summary>
      <param name="validationErrorMessage">A message that describes the validation error.</param>
    </member>
    <member name="M:System.Activities.CodeActivityMetadata.Bind(System.Activities.Argument,System.Activities.RuntimeArgument)">
      <summary>Binds the specified <see cref="T:System.Activities.Argument" /> to the specified <see cref="T:System.Activities.RuntimeArgument" />.</summary>
      <param name="binding">The <see cref="T:System.Activities.Argument" /> to bind.</param>
      <param name="argument">The <see cref="T:System.Activities.RuntimeArgument" /> to bind.</param>
    </member>
    <member name="P:System.Activities.CodeActivityMetadata.Environment">
      <summary>Gets the activity’s <see cref="T:System.Activities.LocationReferenceEnvironment" /> of arguments or symbols introduced by a <see cref="T:System.Activities.Hosting.SymbolResolver" />.</summary>
      <returns>The activity’s location reference environment of arguments or symbols introduced by a <see cref="T:System.Activities.Hosting.SymbolResolver" />.</returns>
    </member>
    <member name="M:System.Activities.CodeActivityMetadata.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to this metadata instance.</summary>
      <returns>true if the specified object is equal to this metadata instance; otherwise, false.</returns>
      <param name="obj">The object to compare.</param>
    </member>
    <member name="M:System.Activities.CodeActivityMetadata.GetArgumentsWithReflection">
      <summary>Returns a collection of arguments obtained by using reflection.</summary>
      <returns>A collection of arguments.</returns>
    </member>
    <member name="M:System.Activities.CodeActivityMetadata.GetHashCode">
      <summary>Returns a unique identifier for this metadata instance.</summary>
      <returns>An integer that uniquely identifies this metadata instance.</returns>
    </member>
    <member name="P:System.Activities.CodeActivityMetadata.HasViolations">
      <summary>Gets a value that indicates whether there are any validation errors in the metadata.</summary>
      <returns>true if validation errors are present; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.CodeActivityMetadata.op_Equality(System.Activities.CodeActivityMetadata,System.Activities.CodeActivityMetadata)">
      <summary>Returns a value that indicates whether the two specified metadata instances are equal.</summary>
      <returns>true if the two items are equal; otherwise, false.</returns>
      <param name="left">The first item to compare. </param>
      <param name="right">The second item to compare.</param>
    </member>
    <member name="M:System.Activities.CodeActivityMetadata.op_Inequality(System.Activities.CodeActivityMetadata,System.Activities.CodeActivityMetadata)">
      <summary>Returns a value that indicates whether the two specified metadata instances are not equal.</summary>
      <returns>true if the two items are not equal; otherwise, false.</returns>
      <param name="left">The first item to compare.</param>
      <param name="right">The first item to compare.</param>
    </member>
    <member name="M:System.Activities.CodeActivityMetadata.RequireExtension``1">
      <summary>Specifies that the activity requires an extension of the specified generic type at runtime.</summary>
      <typeparam name="T">The type of the extension.</typeparam>
    </member>
    <member name="M:System.Activities.CodeActivityMetadata.RequireExtension(System.Type)">
      <summary>Specifies that the activity requires an extension of the specified type at runtime.</summary>
      <param name="extensionType">The type of the extension.</param>
    </member>
    <member name="M:System.Activities.CodeActivityMetadata.SetArgumentsCollection(System.Collections.ObjectModel.Collection{System.Activities.RuntimeArgument})">
      <summary>Adds the specified collection of arguments to the activity’s arguments.</summary>
      <param name="arguments">The arguments to add.</param>
    </member>
    <member name="M:System.Activities.CodeActivityMetadata.SetValidationErrorsCollection(System.Collections.ObjectModel.Collection{System.Activities.Validation.ValidationError})">
      <summary>Adds the specified collection of validation errors to the metadata’s collection of validation errors.</summary>
      <param name="validationErrors">The validation errors to add.</param>
    </member>
    <member name="T:System.Activities.CodeActivityPublicEnvironmentAccessor">
      <summary>Specifies information about a public environment accessor.</summary>
    </member>
    <member name="P:System.Activities.CodeActivityPublicEnvironmentAccessor.ActivityMetadata">
      <summary>Gets the activity’s arguments, variables, child activities, and activity delegates.</summary>
      <returns>The activity’s arguments, variables, child activities, and activity delegates.</returns>
    </member>
    <member name="M:System.Activities.CodeActivityPublicEnvironmentAccessor.Create(System.Activities.CodeActivityMetadata)">
      <summary>Creates the description of the arguments, child activities, variables, and activity delegates.</summary>
      <returns>The description of the arguments, child activities, variables, and activity delegates.</returns>
      <param name="metadata">The activity’s metadata that encapsulates the activity’s arguments, variables, child activities, and activity delegates.</param>
    </member>
    <member name="M:System.Activities.CodeActivityPublicEnvironmentAccessor.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the public environment accessor.</summary>
      <returns>True if the specified object is equal to the public environment accessor; otherwise, false.</returns>
      <param name="obj">The object to compare.</param>
    </member>
    <member name="M:System.Activities.CodeActivityPublicEnvironmentAccessor.GetHashCode">
      <summary>Returns a unique identifier for this public environment accessor.</summary>
      <returns>A unique identifier for this public environment accessor.</returns>
    </member>
    <member name="M:System.Activities.CodeActivityPublicEnvironmentAccessor.op_Equality(System.Activities.CodeActivityPublicEnvironmentAccessor,System.Activities.CodeActivityPublicEnvironmentAccessor)">
      <summary>Returns a value that indicates whether the two specified metadata instances are equal.</summary>
      <returns>True if the two specified metadata instances are equal; otherwise, false.</returns>
      <param name="left">The first item to compare.</param>
      <param name="right">The second item to compare.</param>
    </member>
    <member name="M:System.Activities.CodeActivityPublicEnvironmentAccessor.op_Inequality(System.Activities.CodeActivityPublicEnvironmentAccessor,System.Activities.CodeActivityPublicEnvironmentAccessor)">
      <summary>Returns a value that indicates whether the two specified metadata instances are not equal.</summary>
      <returns>True if the two specified metadata instances are not equal; otherwise, false.</returns>
      <param name="left">The first item to compare.</param>
      <param name="right">The second item to compare.</param>
    </member>
    <member name="M:System.Activities.CodeActivityPublicEnvironmentAccessor.TryGetAccessToPublicLocation(System.Activities.LocationReference,System.Activities.ArgumentDirection,System.Activities.LocationReference@)">
      <summary>Returns a value that indicates whether the activity will try to get access to public location.</summary>
      <returns>True if the activity to try will get access to public location; otherwise, false.</returns>
      <param name="publicLocation">Public location reference.</param>
      <param name="accessDirection">The access direction reference.</param>
      <param name="equivalentLocation">The equivalent location reference.</param>
    </member>
    <member name="M:System.Activities.CodeActivityPublicEnvironmentAccessor.TryGetReferenceToPublicLocation(System.Activities.LocationReference,System.Activities.LocationReference@)">
      <summary>Returns a value that indicates whether the activity will try to get reference for the public location.</summary>
      <returns>True if the activity will try to get reference for the public location; otherwise, false.</returns>
      <param name="publicReference">Public reference location.</param>
      <param name="equivalentReference">The equivalent reference location.</param>
    </member>
    <member name="T:System.Activities.CompletionCallback">
      <summary>The method that is called when an activity completes.</summary>
      <param name="context">The execution environment of the activity.</param>
      <param name="completedInstance">The activity that completed. </param>
    </member>
    <member name="T:System.Activities.CompletionCallback`1">
      <summary>The method that is called when an activity completes.</summary>
      <param name="context">The execution environment of the activity.</param>
      <param name="completedInstance">The activity that completed.</param>
      <param name="result">The <see cref="P:System.Activities.WorkflowElement`1.Result" /> value of the activity that completed. </param>
      <typeparam name="TResult">The type of the result value.</typeparam>
    </member>
    <member name="T:System.Activities.DelegateArgument">
      <summary>The abstract base class that represents a binding terminal that supports the flow of data into and out of an <see cref="T:System.Activities.ActivityDelegate" />.</summary>
    </member>
    <member name="P:System.Activities.DelegateArgument.Direction">
      <summary>Gets an <see cref="T:System.Activities.ArgumentDirection" /> that specifies whether the <see cref="T:System.Activities.DelegateArgument" /> represents the flow of data into an <see cref="T:System.Activities.ActivityDelegate" />, out of an <see cref="T:System.Activities.ActivityDelegate" />, or both into and out of an <see cref="T:System.Activities.ActivityDelegate" />.</summary>
      <returns>One of the enumeration values that specifies the direction of the flow of data through the <see cref="T:System.Activities.DelegateArgument" />.</returns>
    </member>
    <member name="M:System.Activities.DelegateArgument.Get(System.Activities.ActivityContext)">
      <summary>Returns the value of the argument using the specified activity context. </summary>
      <returns>The value of the argument.</returns>
      <param name="context">The current activity context.</param>
    </member>
    <member name="M:System.Activities.DelegateArgument.GetLocation(System.Activities.ActivityContext)">
      <summary>Returns the <see cref="T:System.Activities.Location" /> of the value referenced by the <see cref="T:System.Activities.DelegateArgument" />.</summary>
      <returns>The location of the value referenced by the <see cref="T:System.Activities.DelegateArgument" />.</returns>
      <param name="context">The current activity context.</param>
    </member>
    <member name="P:System.Activities.DelegateArgument.Name">
      <summary>Gets or sets the name of the <see cref="T:System.Activities.DelegateArgument" />.</summary>
      <returns>The name of the <see cref="T:System.Activities.DelegateArgument" />.</returns>
    </member>
    <member name="P:System.Activities.DelegateArgument.NameCore">
      <summary>Gets the string value used by <see cref="P:System.Activities.DelegateArgument.Name" />.</summary>
      <returns>The name of the <see cref="T:System.Activities.DelegateArgument" />.</returns>
    </member>
    <member name="T:System.Activities.DelegateCompletionCallback">
      <summary>Represents the method that is called when an <see cref="T:System.Activities.ActivityDelegate" /> completes.</summary>
      <param name="context">The execution environment of the activity handling the callback.</param>
      <param name="completedInstance">The completed activity instance of the <see cref="T:System.Activities.ActivityDelegate" /> handler.</param>
      <param name="outArguments">The output arguments of the completed <see cref="T:System.Activities.ActivityDelegate" />.</param>
    </member>
    <member name="T:System.Activities.DelegateInArgument">
      <summary>The abstract base class that represents a binding terminal that supports the flow of data into an <see cref="T:System.Activities.ActivityDelegate" />.</summary>
    </member>
    <member name="T:System.Activities.DelegateInArgument`1">
      <summary>A binding terminal that represents the flow of data into an <see cref="T:System.Activities.ActivityDelegate" />.</summary>
      <typeparam name="T">The data type of the <see cref="T:System.Activities.DelegateInArgument`1" />. </typeparam>
    </member>
    <member name="M:System.Activities.DelegateInArgument`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.DelegateInArgument`1" /> class.</summary>
    </member>
    <member name="M:System.Activities.DelegateInArgument`1.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.DelegateInArgument`1" /> class using the specified name.</summary>
      <param name="name">The name of the <see cref="T:System.Activities.DelegateInArgument`1" />.</param>
    </member>
    <member name="M:System.Activities.DelegateInArgument`1.Get(System.Activities.ActivityContext)">
      <summary>Gets the value of the <see cref="T:System.Activities.DelegateInArgument`1" />.</summary>
      <returns>The value of the <see cref="T:System.Activities.DelegateInArgument`1" />.</returns>
      <param name="context">The current activity context.</param>
    </member>
    <member name="M:System.Activities.DelegateInArgument`1.Set(System.Activities.ActivityContext,`0)">
      <summary>Sets the value of the <see cref="T:System.Activities.DelegateInArgument`1" />.</summary>
      <param name="context">The current activity context.</param>
      <param name="value">The new value.</param>
    </member>
    <member name="T:System.Activities.DelegateOutArgument">
      <summary>The abstract base class that represents a binding terminal that supports the flow of data out of an <see cref="T:System.Activities.ActivityDelegate" />.</summary>
    </member>
    <member name="T:System.Activities.DelegateOutArgument`1">
      <summary>A binding terminal that represents the flow of data out of an <see cref="T:System.Activities.ActivityDelegate" />. </summary>
      <typeparam name="T">The data type of the <see cref="T:System.Activities.DelegateOutArgument`1" />.</typeparam>
    </member>
    <member name="M:System.Activities.DelegateOutArgument`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.DelegateOutArgument`1" /> class.</summary>
    </member>
    <member name="M:System.Activities.DelegateOutArgument`1.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.DelegateOutArgument`1" /> class with the specified name.</summary>
      <param name="name">The name of the <see cref="T:System.Activities.DelegateOutArgument`1" />.</param>
    </member>
    <member name="M:System.Activities.DelegateOutArgument`1.Get(System.Activities.ActivityContext)">
      <summary>Gets the value of the <see cref="T:System.Activities.DelegateOutArgument`1" />.</summary>
      <returns>The value of the <see cref="T:System.Activities.DelegateOutArgument`1" />.</returns>
      <param name="context">The current activity context.</param>
    </member>
    <member name="M:System.Activities.DelegateOutArgument`1.GetLocation(System.Activities.ActivityContext)">
      <summary>Returns the <see cref="T:System.Activities.Location`1" /> for this <see cref="T:System.Activities.DelegateOutArgument`1" />.</summary>
      <returns>The location for this <see cref="T:System.Activities.DelegateOutArgument`1" />.</returns>
      <param name="context">The activity context that contains the location for this <see cref="T:System.Activities.DelegateOutArgument`1" />.</param>
    </member>
    <member name="M:System.Activities.DelegateOutArgument`1.Set(System.Activities.ActivityContext,`0)">
      <summary>Sets the value of the <see cref="T:System.Activities.DelegateOutArgument`1" />.</summary>
      <param name="context">The current activity context.</param>
      <param name="value">The new value.</param>
    </member>
    <member name="T:System.Activities.DynamicActivity">
      <summary>Provides an object model that allows you to construct activities dynamically that interface with the WF designer and runtime using <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />.</summary>
    </member>
    <member name="M:System.Activities.DynamicActivity.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.DynamicActivity" /> class.</summary>
    </member>
    <member name="P:System.Activities.DynamicActivity.Attributes">
      <summary>Gets the collection of attributes of the dynamically generated activity.</summary>
      <returns>The collection of attributes.</returns>
    </member>
    <member name="P:System.Activities.DynamicActivity.Constraints">
      <summary>Returns a collection of <see cref="T:System.Activities.Validation.Constraint" /> activities that are configured to provide validation for the <see cref="T:System.Activities.DynamicActivity" />.</summary>
      <returns>The constraint collection.</returns>
    </member>
    <member name="P:System.Activities.DynamicActivity.Implementation">
      <summary>Gets or sets the execution logic of the activity.</summary>
      <returns>The execution logic.</returns>
    </member>
    <member name="P:System.Activities.DynamicActivity.ImplementationVersion">
      <summary>Gets or sets the implementation version of the activity.</summary>
      <returns>The implementation version of the activity.</returns>
    </member>
    <member name="P:System.Activities.DynamicActivity.Name">
      <summary>The name to be displayed for the activity in the workflow designer.</summary>
      <returns>The activity name.</returns>
    </member>
    <member name="P:System.Activities.DynamicActivity.Properties">
      <summary>Gets the collection of properties that map to the arguments of the dynamically generated activity.</summary>
      <returns>The collection of properties.</returns>
    </member>
    <member name="M:System.Activities.DynamicActivity.System#ComponentModel#ICustomTypeDescriptor#GetAttributes">
      <summary>Returns a collection of attributes of the dynamic activity.</summary>
      <returns>The attributes of the dynamic activity.</returns>
    </member>
    <member name="M:System.Activities.DynamicActivity.System#ComponentModel#ICustomTypeDescriptor#GetClassName">
      <summary>Returns the class name of the dynamic activity.</summary>
      <returns>The class name.</returns>
    </member>
    <member name="M:System.Activities.DynamicActivity.System#ComponentModel#ICustomTypeDescriptor#GetComponentName">
      <summary>Returns the component name of the dynamic activity.</summary>
      <returns>The component name.</returns>
    </member>
    <member name="M:System.Activities.DynamicActivity.System#ComponentModel#ICustomTypeDescriptor#GetConverter">
      <summary>Returns a type converter for the dynamic activity.</summary>
      <returns>A type converter for this dynamic activity instance.</returns>
    </member>
    <member name="M:System.Activities.DynamicActivity.System#ComponentModel#ICustomTypeDescriptor#GetDefaultEvent">
      <summary>Returns the default event for the dynamic activity.</summary>
      <returns>The default event.</returns>
    </member>
    <member name="M:System.Activities.DynamicActivity.System#ComponentModel#ICustomTypeDescriptor#GetDefaultProperty">
      <summary>Returns the default property for the dynamic activity.</summary>
      <returns>The default property.</returns>
    </member>
    <member name="M:System.Activities.DynamicActivity.System#ComponentModel#ICustomTypeDescriptor#GetEditor(System.Type)">
      <summary>Returns an editor with the specified base type.</summary>
      <returns>An instance of the editor that can be cast to the specified editor type or null if no editor of the requested type can be found.</returns>
      <param name="editorBaseType">The base type of the editor you want to find.</param>
    </member>
    <member name="M:System.Activities.DynamicActivity.System#ComponentModel#ICustomTypeDescriptor#GetEvents">
      <summary>Returns the collection of events of the dynamic activity.</summary>
      <returns>The collection of events.</returns>
    </member>
    <member name="M:System.Activities.DynamicActivity.System#ComponentModel#ICustomTypeDescriptor#GetEvents(System.Attribute[])">
      <summary>Returns the collection of events of the dynamic activity using a specified array of attributes as a filter.</summary>
      <returns>The collection of events that match the specified attributes.</returns>
      <param name="attributes">An array that you can use as a filter.</param>
    </member>
    <member name="M:System.Activities.DynamicActivity.System#ComponentModel#ICustomTypeDescriptor#GetProperties">
      <summary>Returns the collection of properties of the dynamic activity.</summary>
      <returns>The collection of properties.</returns>
    </member>
    <member name="M:System.Activities.DynamicActivity.System#ComponentModel#ICustomTypeDescriptor#GetProperties(System.Attribute[])">
      <summary>Returns the collection of properties of the dynamic activity using a specified array of attributes as a filter.</summary>
      <returns>The collection of properties that match the specified attributes.</returns>
      <param name="attributes">An array that you can use as a filter.</param>
    </member>
    <member name="M:System.Activities.DynamicActivity.System#ComponentModel#ICustomTypeDescriptor#GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>Returns this instance of the <see cref="T:System.Activities.DynamicActivity" /> class.</summary>
      <returns>This instance of <see cref="T:System.Activities.DynamicActivity" />.</returns>
      <param name="pd">The property whose owner is to be found.</param>
    </member>
    <member name="T:System.Activities.DynamicActivity`1">
      <summary>Provides an approach that is consistent with the document object model (DOM), which constructs activities dynamically that interface with the WF designer and workflow runtime using <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />. </summary>
      <typeparam name="TResult">The result returned by the activity.</typeparam>
    </member>
    <member name="M:System.Activities.DynamicActivity`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.DynamicActivity`1" /> class.</summary>
    </member>
    <member name="P:System.Activities.DynamicActivity`1.Attributes">
      <summary>Gets the collection of attributes of the dynamically generated activity.</summary>
      <returns>The collection of attributes.</returns>
    </member>
    <member name="P:System.Activities.DynamicActivity`1.Constraints">
      <summary>Returns a collection of <see cref="T:System.Activities.Validation.Constraint" /> activities that are configured to provide validation for the <see cref="T:System.Activities.DynamicActivity`1" />.</summary>
      <returns>The constraint collection.</returns>
    </member>
    <member name="P:System.Activities.DynamicActivity`1.Implementation">
      <summary>Gets or sets the execution logic of the activity.</summary>
      <returns>The execution logic.</returns>
    </member>
    <member name="P:System.Activities.DynamicActivity`1.ImplementationVersion">
      <summary>Gets or sets the implementation version of the activity.</summary>
      <returns>The implementation version of the activity.</returns>
    </member>
    <member name="P:System.Activities.DynamicActivity`1.Name">
      <summary>Gets the name to be displayed for the activity in the workflow designer.</summary>
      <returns>The activity name.</returns>
    </member>
    <member name="P:System.Activities.DynamicActivity`1.Properties">
      <summary>Gets the collection of properties that map to the arguments of the dynamically generated activity.</summary>
      <returns>The collection of properties.</returns>
    </member>
    <member name="M:System.Activities.DynamicActivity`1.System#ComponentModel#ICustomTypeDescriptor#GetAttributes">
      <summary>Returns a collection of attributes of the dynamic activity.</summary>
      <returns>The attributes of the dynamic activity.</returns>
    </member>
    <member name="M:System.Activities.DynamicActivity`1.System#ComponentModel#ICustomTypeDescriptor#GetClassName">
      <summary>Returns the class name of the dynamic activity.</summary>
      <returns>The class name.</returns>
    </member>
    <member name="M:System.Activities.DynamicActivity`1.System#ComponentModel#ICustomTypeDescriptor#GetComponentName">
      <summary>Returns the component name of the dynamic activity.</summary>
      <returns>The component name.</returns>
    </member>
    <member name="M:System.Activities.DynamicActivity`1.System#ComponentModel#ICustomTypeDescriptor#GetConverter">
      <summary>Returns a type converter for the dynamic activity.</summary>
      <returns>A type converter for this dynamic activity instance.</returns>
    </member>
    <member name="M:System.Activities.DynamicActivity`1.System#ComponentModel#ICustomTypeDescriptor#GetDefaultEvent">
      <summary>Returns the default event for the dynamic activity.</summary>
      <returns>The default event.</returns>
    </member>
    <member name="M:System.Activities.DynamicActivity`1.System#ComponentModel#ICustomTypeDescriptor#GetDefaultProperty">
      <summary>Returns the default property for the dynamic activity.</summary>
      <returns>The default property.</returns>
    </member>
    <member name="M:System.Activities.DynamicActivity`1.System#ComponentModel#ICustomTypeDescriptor#GetEditor(System.Type)">
      <summary>Returns an editor with the specified base type.</summary>
      <returns>An instance of the editor that can be cast to the specified editor type, or null if no editor of the requested type can be found.</returns>
      <param name="editorBaseType">The base type of the editor you want to find.</param>
    </member>
    <member name="M:System.Activities.DynamicActivity`1.System#ComponentModel#ICustomTypeDescriptor#GetEvents">
      <summary>Returns the collection of events of the dynamic activity.</summary>
      <returns>The collection of events.</returns>
    </member>
    <member name="M:System.Activities.DynamicActivity`1.System#ComponentModel#ICustomTypeDescriptor#GetEvents(System.Attribute[])">
      <summary>Returns the collection of events of the dynamic activity using a specified array of attributes as a filter.</summary>
      <returns>The collection of events that match the specified attributes.</returns>
      <param name="attributes">An array that you can use as a filter.</param>
    </member>
    <member name="M:System.Activities.DynamicActivity`1.System#ComponentModel#ICustomTypeDescriptor#GetProperties">
      <summary>Returns the collection of properties of the dynamic activity.</summary>
      <returns>The collection of properties.</returns>
    </member>
    <member name="M:System.Activities.DynamicActivity`1.System#ComponentModel#ICustomTypeDescriptor#GetProperties(System.Attribute[])">
      <summary>Returns the collection of properties of the dynamic activity using a specified array of attributes as a filter.</summary>
      <returns>The collection of properties that match the specified attributes.</returns>
      <param name="attributes">An array that you can use as a filter.</param>
    </member>
    <member name="M:System.Activities.DynamicActivity`1.System#ComponentModel#ICustomTypeDescriptor#GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>Returns this instance of the <see cref="T:System.Activities.DynamicActivity`1" /> class.</summary>
      <returns>This instance of <see cref="T:System.Activities.DynamicActivity`1" />.</returns>
      <param name="pd">The property whose owner is to be found.</param>
    </member>
    <member name="T:System.Activities.DynamicActivityProperty">
      <summary>Represents a property of a  <see cref="T:System.Activities.DynamicActivity" /> that is created at runtime and executes in the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" />.</summary>
    </member>
    <member name="M:System.Activities.DynamicActivityProperty.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.DynamicActivityProperty" /> class.</summary>
    </member>
    <member name="P:System.Activities.DynamicActivityProperty.Attributes">
      <summary>Returns the attributes of the <see cref="T:System.Activities.DynamicActivityProperty" /> object.</summary>
      <returns>A collection of attributes.</returns>
    </member>
    <member name="P:System.Activities.DynamicActivityProperty.Name">
      <summary>Gets or sets the name of the <see cref="T:System.Activities.DynamicActivityProperty" /> object.</summary>
      <returns>The property name.</returns>
    </member>
    <member name="M:System.Activities.DynamicActivityProperty.ToString">
      <summary>Returns a string message that contains the type and the name of the <see cref="T:System.Activities.DynamicActivityProperty" /> instance.</summary>
      <returns>A string message.</returns>
    </member>
    <member name="P:System.Activities.DynamicActivityProperty.Type">
      <summary>Gets or sets the type of the <see cref="T:System.Activities.DynamicActivityProperty" /> object.</summary>
      <returns>An object of type <see cref="T:System.Type" />.</returns>
    </member>
    <member name="P:System.Activities.DynamicActivityProperty.Value">
      <summary>Gets or sets the value of the <see cref="T:System.Activities.DynamicActivityProperty" /> object.</summary>
      <returns>An object of type <see cref="T:System.Object" />.</returns>
    </member>
    <member name="T:System.Activities.ExceptionPersistenceExtension">
      <summary>Specifies exception persistence.</summary>
    </member>
    <member name="M:System.Activities.ExceptionPersistenceExtension.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.ExceptionPersistenceExtension" /> class.</summary>
    </member>
    <member name="P:System.Activities.ExceptionPersistenceExtension.PersistExceptions">
      <summary>Gets or sets a value that indicates whether the exceptions will persist.</summary>
      <returns>True if the exceptions will persist; otherwise, false.</returns>
    </member>
    <member name="T:System.Activities.ExclusiveHandle">
      <summary>Adds supplementary information to a bookmark that enables it to access a subset of its scope handles, excluding handles that are not required. </summary>
    </member>
    <member name="M:System.Activities.ExclusiveHandle.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.ExclusiveHandle" /> class.</summary>
    </member>
    <member name="M:System.Activities.ExclusiveHandle.OnInitialize(System.Activities.HandleInitializationContext)">
      <summary>Creates a list of default <see cref="T:System.Activities.BookmarkScopeHandle" /> objects from handle variables in the specified handle initialization context.</summary>
      <param name="context">The environment in which the handle is created.</param>
    </member>
    <member name="M:System.Activities.ExclusiveHandle.RegisterBookmarkScope(System.Activities.NativeActivityContext,System.Activities.BookmarkScopeHandle)">
      <summary>Adds the specified bookmark scope handle to the <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Activities.BookmarkScopeHandle" /> objects using the specified context.</summary>
      <param name="context">The environment in which the handle is created.</param>
      <param name="bookmarkScopeHandle">The token used to identify and access a group of bookmarks that operate under the same protocol in a workflow activity operation.</param>
    </member>
    <member name="P:System.Activities.ExclusiveHandle.RegisteredBookmarkScopes">
      <summary>Gets a new or existing <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Activities.BookmarkScopeHandle" /> objects.</summary>
      <returns>A read-only collection of bookmark scope handles.</returns>
    </member>
    <member name="M:System.Activities.ExclusiveHandle.Reinitialize(System.Activities.NativeActivityContext)">
      <summary>Sets the registered bookmark scope handles back to the defaults.</summary>
      <param name="context">The environment in which the handle is created.</param>
    </member>
    <member name="T:System.Activities.ExecutionProperties">
      <summary>Represents the collection of properties at a particular scope.</summary>
    </member>
    <member name="M:System.Activities.ExecutionProperties.Add(System.String,System.Object)">
      <summary>Registers a new property using the specified name.</summary>
      <param name="name">The name of the property.</param>
      <param name="property">The object that represents the property.</param>
    </member>
    <member name="M:System.Activities.ExecutionProperties.Add(System.String,System.Object,System.Boolean)">
      <summary>Registers a property using the specified name and child visibility.</summary>
      <param name="name">The name of the property.</param>
      <param name="property">The object that represents the property.</param>
      <param name="onlyVisibleToPublicChildren">A value that determines whether this property is visible to the children of the owning activity.</param>
    </member>
    <member name="M:System.Activities.ExecutionProperties.Find(System.String)">
      <summary>Returns the nearest property of the given name.</summary>
      <returns>The nearest property of the given name.</returns>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:System.Activities.ExecutionProperties.GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection of properties.</summary>
      <returns>An enumerator that iterates through the collection of properties.</returns>
    </member>
    <member name="P:System.Activities.ExecutionProperties.IsEmpty">
      <summary>Gets a value that indicates whether there are properties registered at the current scope.</summary>
      <returns>true if there are properties registered; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.ExecutionProperties.Remove(System.String)">
      <summary>Unregisters the property with the specified name.</summary>
      <returns>true if the property was unregistered; otherwise, false.</returns>
      <param name="name">The name of the property to unregister.</param>
    </member>
    <member name="M:System.Activities.ExecutionProperties.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection of properties.</summary>
      <returns>An enumerator that iterates through the collection of properties.</returns>
    </member>
    <member name="T:System.Activities.FaultCallback">
      <summary>Represents the method that is called when a scheduled activity or one of its children enters the <see cref="F:System.Activities.ActivityInstanceState.Faulted" /> state.</summary>
      <param name="faultContext">The <see cref="T:System.Activities.ActivityFaultContext" /> provided for inspecting the workflow fault.</param>
      <param name="propagatedException">The exception that caused the fault.</param>
      <param name="propagatedFrom">The activity that threw the exception and generated the fault. </param>
    </member>
    <member name="T:System.Activities.Handle">
      <summary>Represents a type that has its lifetime controlled by the workflow runtime.</summary>
    </member>
    <member name="M:System.Activities.Handle.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Handle" /> class.</summary>
    </member>
    <member name="P:System.Activities.Handle.ExecutionPropertyName">
      <summary>Gets the name to be used by this <see cref="T:System.Activities.Handle" /> when added to an activity’s execution properties.</summary>
      <returns>The name of derived type as provided by <see cref="P:System.Type.FullName" />.</returns>
    </member>
    <member name="M:System.Activities.Handle.OnInitialize(System.Activities.HandleInitializationContext)">
      <summary>Called by the workflow runtime when the environment that contains the <see cref="T:System.Activities.Handle" /> is initialized.</summary>
      <param name="context">The environment in which the handle is being created.</param>
    </member>
    <member name="M:System.Activities.Handle.OnUninitialize(System.Activities.HandleInitializationContext)">
      <summary>Called by the workflow runtime when the <see cref="T:System.Activities.Variable" /> for the <see cref="T:System.Activities.Handle" /> goes out of scope.</summary>
      <param name="context">The environment in which the handle was created.</param>
    </member>
    <member name="P:System.Activities.Handle.Owner">
      <summary>Gets the <see cref="T:System.Activities.ActivityInstance" /> that contains the <see cref="T:System.Activities.Variable" /> that contains the <see cref="T:System.Activities.Handle" />.</summary>
      <returns>The activity instance that contains the <see cref="T:System.Activities.Variable" /> that contains the <see cref="T:System.Activities.Handle" />.</returns>
    </member>
    <member name="M:System.Activities.Handle.ThrowIfUninitialized">
      <summary>Throws an <see cref="T:System.InvalidOperationException" /> if the <see cref="T:System.Activities.Handle" /> has not been initialized.</summary>
    </member>
    <member name="T:System.Activities.HandleInitializationContext">
      <summary>Represents the initialization environment of a <see cref="T:System.Activities.Handle" />.</summary>
    </member>
    <member name="M:System.Activities.HandleInitializationContext.CreateAndInitializeHandle``1">
      <summary>Creates and initializes a new instance of the handle type specified by the type parameter. </summary>
      <returns>A new initialized instance of the handle type specified by the type parameter.</returns>
      <typeparam name="THandle">The type of the <see cref="T:System.Activities.Handle" /> to create and initialize.</typeparam>
    </member>
    <member name="M:System.Activities.HandleInitializationContext.GetExtension``1">
      <summary>Retrieves the extension of the class.</summary>
      <returns>The extension of the class.</returns>
      <typeparam name="T">The class.</typeparam>
    </member>
    <member name="M:System.Activities.HandleInitializationContext.UninitializeHandle(System.Activities.Handle)">
      <summary>Uninitializes the specified <see cref="T:System.Activities.Handle" />.</summary>
      <param name="handle">The <see cref="T:System.Activities.Handle" /> to uninitialize.</param>
    </member>
    <member name="T:System.Activities.IExecutionProperty">
      <summary>Provides execution properties with a mechanism for configuring thread local storage before and after the work items of the associated activity.</summary>
    </member>
    <member name="M:System.Activities.IExecutionProperty.CleanupWorkflowThread">
      <summary>Provides an opportunity for the execution property to tear down thread local storage.</summary>
    </member>
    <member name="M:System.Activities.IExecutionProperty.SetupWorkflowThread">
      <summary>Provides an opportunity for the execution property to set up thread local storage.</summary>
    </member>
    <member name="T:System.Activities.InArgument">
      <summary>The abstract base class that represents a binding terminal that supports the flow of data into an activity.</summary>
    </member>
    <member name="M:System.Activities.InArgument.CreateReference(System.Activities.InArgument,System.String)">
      <summary>Creates a new <see cref="T:System.Activities.InArgument" /> that references the specified target <see cref="T:System.Activities.InArgument" /> using the specified referenced argument name.</summary>
      <returns>A new in argument that references the specified target <see cref="T:System.Activities.InArgument" />.</returns>
      <param name="argumentToReference">The target in argument to reference.</param>
      <param name="referencedArgumentName">The name of the referenced argument.</param>
    </member>
    <member name="M:System.Activities.InArgument.CreateReference(System.Activities.InOutArgument,System.String)">
      <summary>Creates a new <see cref="T:System.Activities.InArgument" /> that references the specified target <see cref="T:System.Activities.InOutArgument" /> using the specified referenced argument name.</summary>
      <returns>A new in argument that references the specified target <see cref="T:System.Activities.InOutArgument" />. </returns>
      <param name="argumentToReference">The target in/out argument to reference.</param>
      <param name="referencedArgumentName">The name of the referenced argument.</param>
    </member>
    <member name="T:System.Activities.InArgument`1">
      <summary>A binding terminal that represents the flow of data into an activity.</summary>
      <typeparam name="T">The data type of the <see cref="T:System.Activities.InArgument`1" />.</typeparam>
    </member>
    <member name="M:System.Activities.InArgument`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.InArgument`1" /> class using default values.</summary>
    </member>
    <member name="M:System.Activities.InArgument`1.#ctor(System.Activities.Activity{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.InArgument`1" /> class using the specified <see cref="T:System.Activities.Activity`1" />.</summary>
      <param name="expression">The value of the argument.</param>
    </member>
    <member name="M:System.Activities.InArgument`1.#ctor(System.Activities.DelegateArgument)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.InArgument`1" /> class using the specified <see cref="T:System.Activities.DelegateArgument" />.</summary>
      <param name="delegateArgument">The value of the argument.</param>
    </member>
    <member name="M:System.Activities.InArgument`1.#ctor(System.Activities.Variable)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.InArgument`1" /> class using the specified <see cref="T:System.Activities.Variable" />.</summary>
      <param name="variable">The data that is passed through this argument.</param>
    </member>
    <member name="M:System.Activities.InArgument`1.#ctor(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,`0}})">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.InArgument`1" /> class using the specified expression.</summary>
      <param name="expression">The value of the argument. </param>
    </member>
    <member name="M:System.Activities.InArgument`1.#ctor(`0)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.InArgument`1" /> class using the specified value.</summary>
      <param name="constValue">The value of the argument.</param>
    </member>
    <member name="P:System.Activities.InArgument`1.Expression">
      <summary>Gets an <see cref="T:System.Activities.Activity`1" /> that represents the value of this <see cref="T:System.Activities.InArgument`1" />.</summary>
      <returns>An activity that represents the value of the argument.</returns>
    </member>
    <member name="M:System.Activities.InArgument`1.FromDelegateArgument(System.Activities.DelegateArgument)">
      <summary>Initializes and returns a new <see cref="T:System.Activities.InArgument`1" /> using the specified <see cref="T:System.Activities.DelegateArgument" />.</summary>
      <returns>The new argument.</returns>
      <param name="delegateArgument">The value of the argument.</param>
    </member>
    <member name="M:System.Activities.InArgument`1.FromExpression(System.Activities.Activity{`0})">
      <summary>Initializes and returns a new <see cref="T:System.Activities.InArgument`1" /> using the specified <see cref="T:System.Activities.Activity`1" />.</summary>
      <returns>The new argument.</returns>
      <param name="expression">The value of the argument.</param>
    </member>
    <member name="M:System.Activities.InArgument`1.FromValue(`0)">
      <summary>Initializes and returns a new <see cref="T:System.Activities.InArgument`1" /> using the specified value.</summary>
      <returns>The new argument.</returns>
      <param name="constValue">The value of the argument,</param>
    </member>
    <member name="M:System.Activities.InArgument`1.FromVariable(System.Activities.Variable)">
      <summary>Initializes and returns a new <see cref="T:System.Activities.InArgument`1" /> using the specified <see cref="T:System.Activities.Variable" />.</summary>
      <returns>The new argument.</returns>
      <param name="variable">The value of the argument.</param>
    </member>
    <member name="M:System.Activities.InArgument`1.Get(System.Activities.ActivityContext)">
      <summary>Gets the value of the <see cref="T:System.Activities.InArgument`1" /> using the specified activity context.</summary>
      <returns>The value of the argument.</returns>
      <param name="context">The current activity context.</param>
    </member>
    <member name="M:System.Activities.InArgument`1.op_Implicit(System.Activities.Activity{`0})~System.Activities.InArgument{`0}">
      <summary>Initializes and returns a new <see cref="T:System.Activities.InArgument`1" /> using the specified <see cref="T:System.Activities.Activity`1" />.</summary>
      <returns>The new argument.</returns>
      <param name="expression">The value of the argument.</param>
    </member>
    <member name="M:System.Activities.InArgument`1.op_Implicit(System.Activities.DelegateArgument)~System.Activities.InArgument{`0}">
      <summary>Initializes and returns a new <see cref="T:System.Activities.InArgument`1" /> using the specified <see cref="T:System.Activities.DelegateArgument" />.</summary>
      <returns>The new argument.</returns>
      <param name="delegateArgument">The value of the argument.</param>
    </member>
    <member name="M:System.Activities.InArgument`1.op_Implicit(System.Activities.Variable)~System.Activities.InArgument{`0}">
      <summary>Initializes and returns a new <see cref="T:System.Activities.InArgument`1" /> using the specified <see cref="T:System.Activities.Variable" />.</summary>
      <returns>The new argument.</returns>
      <param name="variable">The value of the argument,</param>
    </member>
    <member name="M:System.Activities.InArgument`1.op_Implicit(`0)~System.Activities.InArgument{`0}">
      <summary>Initializes and returns a new <see cref="T:System.Activities.InArgument`1" /> using the specified value.</summary>
      <returns>The new argument.</returns>
      <param name="constValue">The value of the argument.</param>
    </member>
    <member name="M:System.Activities.InArgument`1.Set(System.Activities.ActivityContext,`0)">
      <summary>Sets the value of the <see cref="T:System.Activities.InArgument`1" /> using the specified value.</summary>
      <param name="context">The current activity context.</param>
      <param name="value">The new value.</param>
    </member>
    <member name="T:System.Activities.InOutArgument">
      <summary>The abstract base class that represents a binding terminal that supports the flow of data into and out of an activity.</summary>
    </member>
    <member name="M:System.Activities.InOutArgument.CreateReference(System.Activities.InOutArgument,System.String)">
      <summary>Creates a new <see cref="T:System.Activities.InOutArgument" /> that references the specified target <see cref="T:System.Activities.InOutArgument" /> using the specified referenced argument name.</summary>
      <returns>A new in/out argument that references the specified target <see cref="T:System.Activities.InOutArgument" />. </returns>
      <param name="argumentToReference">The target in/out argument to reference.</param>
      <param name="referencedArgumentName">The name of the referenced argument.</param>
    </member>
    <member name="T:System.Activities.InOutArgument`1">
      <summary>A binding terminal that represents the flow of data into and out of an activity. </summary>
      <typeparam name="T">The data type of the <see cref="T:System.Activities.InOutArgument`1" />.</typeparam>
    </member>
    <member name="M:System.Activities.InOutArgument`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.InOutArgument`1" /> class using default values.</summary>
    </member>
    <member name="M:System.Activities.InOutArgument`1.#ctor(System.Activities.Activity{System.Activities.Location{`0}})">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.InOutArgument`1" /> class using the specified <see cref="T:System.Activities.Activity`1" />.</summary>
      <param name="expression">The value of the argument.</param>
    </member>
    <member name="M:System.Activities.InOutArgument`1.#ctor(System.Activities.Variable)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.InOutArgument`1" /> class using the specified <see cref="T:System.Activities.Variable" />.</summary>
      <param name="variable">The value of the argument.</param>
    </member>
    <member name="M:System.Activities.InOutArgument`1.#ctor(System.Activities.Variable{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.InOutArgument`1" /> class using the specified <see cref="T:System.Activities.Variable`1" />.</summary>
      <param name="variable">The value of the argument.</param>
    </member>
    <member name="M:System.Activities.InOutArgument`1.#ctor(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,`0}})">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.InOutArgument`1" /> class using the specified expression.</summary>
      <param name="expression">The value of the argument.</param>
    </member>
    <member name="P:System.Activities.InOutArgument`1.Expression">
      <summary>Gets an <see cref="T:System.Activities.Activity`1" /> that represents the value of this <see cref="T:System.Activities.InOutArgument`1" />.</summary>
      <returns>The value of the argument.</returns>
    </member>
    <member name="M:System.Activities.InOutArgument`1.FromExpression(System.Activities.Activity{System.Activities.Location{`0}})">
      <summary>Initializes and returns a new <see cref="T:System.Activities.InOutArgument`1" /> constructed using the specified <see cref="T:System.Activities.Activity`1" />.</summary>
      <returns>The new argument.</returns>
      <param name="expression">The value of the argument.</param>
    </member>
    <member name="M:System.Activities.InOutArgument`1.FromVariable(System.Activities.Variable{`0})">
      <summary>Initializes and returns a new <see cref="T:System.Activities.InOutArgument`1" /> constructed by using the specified <see cref="T:System.Activities.Variable`1" />.</summary>
      <returns>The new argument.</returns>
      <param name="variable">The value of the argument.</param>
    </member>
    <member name="M:System.Activities.InOutArgument`1.Get(System.Activities.ActivityContext)">
      <summary>Gets the value of the <see cref="T:System.Activities.InOutArgument`1" /> using the specified <see cref="T:System.Activities.ActivityContext" />.</summary>
      <returns>The value of the argument.</returns>
      <param name="context">The activity context that contains the value of the argument.</param>
    </member>
    <member name="M:System.Activities.InOutArgument`1.GetLocation(System.Activities.ActivityContext)">
      <summary>Gets the location of the value for the <see cref="T:System.Activities.InOutArgument`1" />.</summary>
      <returns>A reference to the location where the value of the argument is stored.</returns>
      <param name="context">The activity context that contains the location of the argument value.</param>
    </member>
    <member name="M:System.Activities.InOutArgument`1.op_Implicit(System.Activities.Activity{System.Activities.Location{`0}})~System.Activities.InOutArgument{`0}">
      <summary>Initializes and returns a new <see cref="T:System.Activities.InOutArgument`1" /> constructed using the specified <see cref="T:System.Activities.Activity`1" />.</summary>
      <returns>The new argument.</returns>
      <param name="expression">The value of the argument.</param>
    </member>
    <member name="M:System.Activities.InOutArgument`1.op_Implicit(System.Activities.Variable{`0})~System.Activities.InOutArgument{`0}">
      <summary>Initializes and returns a new <see cref="T:System.Activities.InOutArgument`1" /> constructed using the specified <see cref="T:System.Activities.Variable`1" />.</summary>
      <returns>The new argument.</returns>
      <param name="variable">The value of the argument.</param>
    </member>
    <member name="M:System.Activities.InOutArgument`1.Set(System.Activities.ActivityContext,`0)">
      <summary>Sets the value of the argument using the specified value.</summary>
      <param name="context">The current activity context.</param>
      <param name="value">The new value.</param>
    </member>
    <member name="T:System.Activities.InvalidWorkflowException">
      <summary>Handles exceptions that occur when a workflow is not valid. </summary>
    </member>
    <member name="M:System.Activities.InvalidWorkflowException.#ctor">
      <summary>Create a new instance of the <see cref="T:System.Activities.InvalidWorkflowException" /> class with default values.</summary>
    </member>
    <member name="M:System.Activities.InvalidWorkflowException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Create a new instance of the <see cref="T:System.Activities.InvalidWorkflowException" /> class with the specified serialization information and streaming context.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that contains the serialized object data about the exception being thrown.</param>
      <param name="context">The source and destination of the serialized stream.</param>
    </member>
    <member name="M:System.Activities.InvalidWorkflowException.#ctor(System.String)">
      <summary>Create a new instance of the <see cref="T:System.Activities.InvalidWorkflowException" /> class with the specified invalid workflow exception description.</summary>
      <param name="message">A string description of the exception.</param>
    </member>
    <member name="M:System.Activities.InvalidWorkflowException.#ctor(System.String,System.Exception)">
      <summary>Create a new instance of the <see cref="T:System.Activities.InvalidWorkflowException" /> class with the specified invalid workflow exception description and inner exception.</summary>
      <param name="message">A description of the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. </param>
    </member>
    <member name="T:System.Activities.InvokeCompletedEventArgs">
      <summary>Provides data for the <see cref="E:System.Activities.WorkflowInvoker.InvokeCompleted" /> event.</summary>
    </member>
    <member name="P:System.Activities.InvokeCompletedEventArgs.Outputs">
      <summary>Gets an <see cref="T:System.Collections.Generic.IDictionary`2" /> of the root activity’s output argument values from the completed workflow.</summary>
      <returns>A dictionary of the root activity’s output argument values from the completed workflow.</returns>
    </member>
    <member name="T:System.Activities.IPropertyRegistrationCallback">
      <summary>Allows a workflow execution property to provide custom registration and un-registration logic.</summary>
    </member>
    <member name="M:System.Activities.IPropertyRegistrationCallback.Register(System.Activities.RegistrationContext)">
      <summary>Called when a workflow execution property is added through <see cref="Overload:System.Activities.ExecutionProperties.Add" />. This provides a validation hook for the property. </summary>
      <param name="context">A <see cref="T:System.Activities.RegistrationContext" /> that references the collection of execution properties to which the property is being registered.</param>
    </member>
    <member name="M:System.Activities.IPropertyRegistrationCallback.Unregister(System.Activities.RegistrationContext)">
      <summary>Called when a workflow execution property goes out of scope.</summary>
      <param name="context">A <see cref="T:System.Activities.RegistrationContext" /> that references the collection of execution properties to which the property belongs.</param>
    </member>
    <member name="T:System.Activities.Location">
      <summary>Provides a reference to a value used by an <see cref="T:System.Activities.Argument" /> or <see cref="T:System.Activities.Variable" />.</summary>
    </member>
    <member name="M:System.Activities.Location.#ctor">
      <summary>Called by derived class constructors to initialize the object.</summary>
    </member>
    <member name="P:System.Activities.Location.LocationType">
      <summary>When overridden in a derived class, gets the type of the referenced object.</summary>
      <returns>The type of the referenced object.</returns>
    </member>
    <member name="P:System.Activities.Location.Value">
      <summary>Gets or sets the value of the referenced object.</summary>
      <returns>The value of the object.</returns>
    </member>
    <member name="P:System.Activities.Location.ValueCore">
      <summary>When overridden in a derived class, gets or sets the value of the object referenced by the location.</summary>
      <returns>The value of the object.</returns>
    </member>
    <member name="T:System.Activities.Location`1">
      <summary>Provides a typed reference to a value used by an <see cref="T:System.Activities.Argument" /> or <see cref="T:System.Activities.Variable" />.</summary>
      <typeparam name="T">The type of the value.</typeparam>
    </member>
    <member name="M:System.Activities.Location`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Location`1" /> class.</summary>
    </member>
    <member name="P:System.Activities.Location`1.LocationType">
      <summary>Gets the type of the value referenced by the location.</summary>
      <returns>The type of the value.</returns>
    </member>
    <member name="M:System.Activities.Location`1.ToString">
      <summary>Returns the string representation of the value of the referenced object.</summary>
      <returns>The value of the referenced object.</returns>
    </member>
    <member name="P:System.Activities.Location`1.Value">
      <summary>Gets or sets the value of the referenced object.</summary>
      <returns>The value of the referenced object.</returns>
    </member>
    <member name="P:System.Activities.Location`1.ValueCore">
      <summary>Gets or sets the value of the referenced object.</summary>
      <returns>The value of the referenced object.</returns>
    </member>
    <member name="T:System.Activities.LocationReference">
      <summary>Provides a mechanism by which a <see cref="T:System.Activities.Location" /> can be resolved at runtime. </summary>
    </member>
    <member name="M:System.Activities.LocationReference.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.LocationReference" /> class.</summary>
    </member>
    <member name="M:System.Activities.LocationReference.GetLocation(System.Activities.ActivityContext)">
      <summary>When implemented in a derived class, extracts the location for a <see cref="T:System.Activities.LocationReference" /> from an <see cref="T:System.Activities.ActivityContext" /> object.</summary>
      <returns>The location of a variable, argument, or delegate argument value.</returns>
      <param name="context">The information about the activity execution environment, including values for variables, arguments, and delegate arguments associated with that environment.</param>
    </member>
    <member name="P:System.Activities.LocationReference.Name">
      <summary>Gets or sets the name of the <see cref="T:System.Activities.LocationReference" />.</summary>
      <returns>The name of the <see cref="T:System.Activities.LocationReference" />.</returns>
    </member>
    <member name="P:System.Activities.LocationReference.NameCore">
      <summary>When implemented by a derived class, gets or sets the culturally localized version of the name of the <see cref="T:System.Activities.LocationReference" />.</summary>
      <returns>The localized version of the name of the <see cref="T:System.Activities.LocationReference" />.</returns>
    </member>
    <member name="P:System.Activities.LocationReference.Type">
      <summary>Gets or sets the type of the <see cref="T:System.Activities.LocationReference" />.</summary>
      <returns>The type of the <see cref="T:System.Activities.LocationReference" />.</returns>
    </member>
    <member name="P:System.Activities.LocationReference.TypeCore">
      <summary>When implemented in a derived class, gets or sets the culturally localized version of the type of the <see cref="T:System.Activities.LocationReference" />.</summary>
      <returns>The localized version of the type of the <see cref="T:System.Activities.LocationReference" />.</returns>
    </member>
    <member name="T:System.Activities.LocationReferenceEnvironment">
      <summary>Provides a representation of the environment of variables and arguments that is available to an activity at runtime. </summary>
    </member>
    <member name="M:System.Activities.LocationReferenceEnvironment.#ctor">
      <summary>Called by derived class constructors to initialize the object. </summary>
    </member>
    <member name="M:System.Activities.LocationReferenceEnvironment.GetLocationReferences">
      <summary>When overridden in a derived class, returns a collection of <see cref="T:System.Activities.LocationReference" /> objects in the current scope.</summary>
      <returns>A collection of location reference objects in the current scope.</returns>
    </member>
    <member name="M:System.Activities.LocationReferenceEnvironment.IsVisible(System.Activities.LocationReference)">
      <summary>When overridden in a derived class, determines whether the specified <see cref="T:System.Activities.LocationReference" /> is visible in the current scope.</summary>
      <returns>true if the <see cref="T:System.Activities.LocationReference" /> is visible in the current scope; otherwise, false.</returns>
      <param name="locationReference">The location to evaluate.</param>
    </member>
    <member name="P:System.Activities.LocationReferenceEnvironment.Parent">
      <summary>Gets or sets the containing <see cref="T:System.Activities.LocationReferenceEnvironment" />.</summary>
      <returns>The containing <see cref="T:System.Activities.LocationReferenceEnvironment" />.</returns>
    </member>
    <member name="P:System.Activities.LocationReferenceEnvironment.Root">
      <summary>Gets the activity that determines the scoping rules for this environment.</summary>
      <returns>The activity that determines the scoping rules for this environment.</returns>
    </member>
    <member name="M:System.Activities.LocationReferenceEnvironment.TryGetLocationReference(System.String,System.Activities.LocationReference@)">
      <summary>When overridden in a derived class, attempts to get the specified <see cref="T:System.Activities.LocationReference" />.</summary>
      <returns>true if a <see cref="T:System.Activities.LocationReference" /> with the specified name is present; otherwise, false.</returns>
      <param name="name">The name of the <see cref="T:System.Activities.LocationReference" /> to retrieve.</param>
      <param name="result">When this method returns true, <paramref name="result" /> contains the <see cref="T:System.Activities.LocationReference" /> with the specified name; otherwise, null. This parameter is passed uninitialized.</param>
    </member>
    <member name="T:System.Activities.NativeActivity">
      <summary>Abstract base class for custom activities that implement execution logic using the <see cref="M:System.Activities.NativeActivity.Execute(System.Activities.ActivityExecutionContext)" /> method, which has full access to the runtime’s features.</summary>
    </member>
    <member name="M:System.Activities.NativeActivity.#ctor">
      <summary>When implemented in a derived class, creates a new instance of the derived class.</summary>
    </member>
    <member name="M:System.Activities.NativeActivity.Abort(System.Activities.NativeActivityAbortContext)">
      <summary>When implemented in a derived class, takes actions in response to the activity being aborted.</summary>
      <param name="context">The execution context in which the activity executes.</param>
    </member>
    <member name="M:System.Activities.NativeActivity.CacheMetadata(System.Activities.ActivityMetadata)">
      <summary>Not implemented. Use the <see cref="M:System.Activities.NativeActivity.CacheMetadata(System.Activities.NativeActivityMetadata)" /> method instead.</summary>
      <param name="metadata">Not implemented.</param>
    </member>
    <member name="M:System.Activities.NativeActivity.CacheMetadata(System.Activities.NativeActivityMetadata)">
      <summary>Creates and validates a description of the activity’s arguments, variables, child activities, and activity delegates.</summary>
      <param name="metadata">The activity’s metadata that encapsulates the activity’s arguments, variables, child activities, and activity delegates.</param>
    </member>
    <member name="M:System.Activities.NativeActivity.Cancel(System.Activities.NativeActivityContext)">
      <summary>When implemented in a derived class, runs logic to cause graceful early completion of the activity.</summary>
      <param name="context">The execution context in which the activity executes.</param>
    </member>
    <member name="P:System.Activities.NativeActivity.CanInduceIdle">
      <summary>Gets or sets a value that indicates whether the activity can cause the workflow to become idle.</summary>
      <returns>true if the activity can cause the workflow to become idle. This value is false by default.</returns>
    </member>
    <member name="M:System.Activities.NativeActivity.Execute(System.Activities.NativeActivityContext)">
      <summary>When implemented in a derived class, runs the activity’s execution logic.</summary>
      <param name="context">The execution context in which the activity executes.</param>
    </member>
    <member name="P:System.Activities.NativeActivity.Implementation">
      <summary>The execution logic of the activity.</summary>
      <returns>The execution logic.</returns>
    </member>
    <member name="P:System.Activities.NativeActivity.ImplementationVersion">
      <summary>Gets or sets the implementation version of the activity.</summary>
      <returns>The implementation version of the activity.</returns>
    </member>
    <member name="M:System.Activities.NativeActivity.OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata,System.Activities.Activity)">
      <summary>Raises an event when creating a map for the dynamic update.</summary>
      <param name="metadata">The metadata.</param>
      <param name="originalActivity">The original activity.</param>
    </member>
    <member name="M:System.Activities.NativeActivity.OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.UpdateMapMetadata,System.Activities.Activity)">
      <summary>Raises an event when creating a map for the dynamic update.</summary>
      <param name="metadata">The metadata.</param>
      <param name="originalActivity">The original activity.</param>
    </member>
    <member name="M:System.Activities.NativeActivity.UpdateInstance(System.Activities.DynamicUpdate.NativeActivityUpdateContext)">
      <summary>Updates the instance of <see cref="T:System.Activities.NativeActivity" />.</summary>
      <param name="updateContext">The update context.</param>
    </member>
    <member name="T:System.Activities.NativeActivity`1">
      <summary>Abstract base class for custom activities that implement execution logic using the <see cref="M:System.Activities.NativeActivity`1.Execute(System.Activities.ActivityExecutionContext)" /> method, that has full access to the runtime’s features.</summary>
      <typeparam name="TResult">The result returned by the activity.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivity`1.#ctor">
      <summary>When implemented in a derived class, creates a new instance of the derived class.</summary>
    </member>
    <member name="M:System.Activities.NativeActivity`1.Abort(System.Activities.NativeActivityAbortContext)">
      <summary>When implemented in a derived class, takes actions in response to the activity being aborted.</summary>
      <param name="context">The execution context in which the activity executes.</param>
    </member>
    <member name="M:System.Activities.NativeActivity`1.CacheMetadata(System.Activities.ActivityMetadata)">
      <summary>Not implemented. Use <see cref="M:System.Activities.NativeActivity`1.CacheMetadata(System.Activities.NativeActivityMetadata)" /> instead.</summary>
      <param name="metadata">Not implemented.</param>
    </member>
    <member name="M:System.Activities.NativeActivity`1.CacheMetadata(System.Activities.NativeActivityMetadata)">
      <summary>Creates and validates a description of the activity’s arguments, variables, child activities, and activity delegates.</summary>
      <param name="metadata">The activity’s metadata that encapsulates the activity’s arguments, variables, child activities, and activity delegates.</param>
    </member>
    <member name="M:System.Activities.NativeActivity`1.Cancel(System.Activities.NativeActivityContext)">
      <summary>When implemented in a derived class, runs logic to cause graceful early completion of the activity.</summary>
      <param name="context">The execution context in which the activity executes.</param>
    </member>
    <member name="P:System.Activities.NativeActivity`1.CanInduceIdle">
      <summary>Gets or sets a value that indicates whether the activity can cause the workflow to become idle.</summary>
      <returns>true if the activity can cause the workflow to become idle, otherwise false. This value is false by default.</returns>
    </member>
    <member name="M:System.Activities.NativeActivity`1.Execute(System.Activities.NativeActivityContext)">
      <summary>When implemented in a derived class, runs the activity’s execution logic.</summary>
      <param name="context">The execution context in which the activity executes.</param>
    </member>
    <member name="P:System.Activities.NativeActivity`1.Implementation">
      <summary>The execution logic of the activity.</summary>
      <returns>The execution logic.</returns>
    </member>
    <member name="P:System.Activities.NativeActivity`1.ImplementationVersion">
      <summary>Gets or sets the implementation version of the activity.</summary>
      <returns>The implementation version of the activity.</returns>
    </member>
    <member name="M:System.Activities.NativeActivity`1.OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata,System.Activities.Activity)">
      <summary>Raises an event when creating a map for the dynamic update.</summary>
      <param name="metadata">The metadata.</param>
      <param name="originalActivity">The original activity.</param>
    </member>
    <member name="M:System.Activities.NativeActivity`1.OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.UpdateMapMetadata,System.Activities.Activity)">
      <summary>Raises an event when creating a map for the dynamic update.</summary>
      <param name="metadata">The metadata.</param>
      <param name="originalActivity">The original activity.</param>
    </member>
    <member name="M:System.Activities.NativeActivity`1.UpdateInstance(System.Activities.DynamicUpdate.NativeActivityUpdateContext)">
      <summary>Updates the instance of <see cref="T:System.Activities.NativeActivity`1" />.</summary>
      <param name="updateContext">The update context.</param>
    </member>
    <member name="T:System.Activities.NativeActivityAbortContext">
      <summary>Represents the execution environment of an activity that is being aborted.</summary>
    </member>
    <member name="P:System.Activities.NativeActivityAbortContext.Reason">
      <summary>Gets an <see cref="T:System.Exception" /> that contains the reason for the activity being aborted.</summary>
      <returns>An exception that contains the reason for the activity being aborted.</returns>
    </member>
    <member name="T:System.Activities.NativeActivityContext">
      <summary>The execution context for a <see cref="T:System.Activities.NativeActivity" />.</summary>
    </member>
    <member name="M:System.Activities.NativeActivityContext.Abort">
      <summary>Aborts the current workflow instance during runtime.</summary>
    </member>
    <member name="M:System.Activities.NativeActivityContext.Abort(System.Exception)">
      <summary>Aborts the current workflow instance during runtime for the specified reason.</summary>
      <param name="reason">The error that caused the workflow to abort.</param>
    </member>
    <member name="M:System.Activities.NativeActivityContext.AbortChildInstance(System.Activities.ActivityInstance)">
      <summary>Aborts the specified instance of a <see cref="T:System.Activities.NativeActivity" /> child activity.</summary>
      <param name="activity">A child of the currently executing <see cref="T:System.Activities.NativeActivity" />.</param>
    </member>
    <member name="M:System.Activities.NativeActivityContext.AbortChildInstance(System.Activities.ActivityInstance,System.Exception)">
      <summary>Aborts the specified instance of a <see cref="T:System.Activities.NativeActivity" /> child activity for the specified reason.</summary>
      <param name="activity">A child of the currently executing <see cref="T:System.Activities.NativeActivity" />.</param>
      <param name="reason">The error that caused the child activity to abort.</param>
    </member>
    <member name="M:System.Activities.NativeActivityContext.CancelChild(System.Activities.ActivityInstance)">
      <summary>Cancels the specified child activity instance.</summary>
      <param name="activityInstance">A child of the currently executing <see cref="T:System.Activities.NativeActivity" />.</param>
    </member>
    <member name="M:System.Activities.NativeActivityContext.CancelChildren">
      <summary>Causes an early completion of all the child activities of an executing <see cref="T:System.Activities.NativeActivity" />.</summary>
    </member>
    <member name="M:System.Activities.NativeActivityContext.CreateBookmark">
      <summary>Creates a point at which a <see cref="T:System.Activities.NativeActivity" /> can passively wait to be resumed.</summary>
      <returns>A bookmark.</returns>
    </member>
    <member name="M:System.Activities.NativeActivityContext.CreateBookmark(System.Activities.BookmarkCallback)">
      <summary>Creates the point at which a <see cref="T:System.Activities.NativeActivity" /> can passively wait to be resumed and schedules the specified method to execute when notification of the resume operation completes.</summary>
      <returns>The callback method.</returns>
      <param name="callback">The method to be called when a notification signals resumption of the <see cref="T:System.Activities.NativeActivity" />.</param>
    </member>
    <member name="M:System.Activities.NativeActivityContext.CreateBookmark(System.Activities.BookmarkCallback,System.Activities.BookmarkOptions)">
      <summary>Creates the point at which a <see cref="T:System.Activities.NativeActivity" /> can passively wait to be resumed, with the specified method to execute when notification of the resume operation completes and with the specified option that governs how the bookmark is used during the execution of the current <see cref="T:System.Activities.NativeActivity" />.</summary>
      <returns>A bookmark that includes the callback method and the bookmark execution option.</returns>
      <param name="callback">The method to be called when a notification signals resumption of the <see cref="T:System.Activities.NativeActivity" />.</param>
      <param name="options">An enumerated setting that governs how the bookmark operates in relation to other threads during the execution of the current <see cref="T:System.Activities.NativeActivity" />.</param>
    </member>
    <member name="M:System.Activities.NativeActivityContext.CreateBookmark(System.String)">
      <summary>Creates the point, with the specified name, at which a <see cref="T:System.Activities.NativeActivity" /> can passively wait to be resumed.</summary>
      <returns>A bookmark that includes the name of the bookmark.</returns>
      <param name="name">The name of the bookmark.</param>
    </member>
    <member name="M:System.Activities.NativeActivityContext.CreateBookmark(System.String,System.Activities.BookmarkCallback)">
      <summary>Creates the point at which a <see cref="T:System.Activities.NativeActivity" /> can passively wait to be resumed, with the specified name and with the specified method to execute when notification of the resume operation completes.</summary>
      <returns>A bookmark that includes the name of the bookmark and the callback method.</returns>
      <param name="name">The name of the bookmark.</param>
      <param name="callback">The method to be called when a notification signals resumption of the <see cref="T:System.Activities.NativeActivity" />.</param>
    </member>
    <member name="M:System.Activities.NativeActivityContext.CreateBookmark(System.String,System.Activities.BookmarkCallback,System.Activities.BookmarkOptions)">
      <summary>Creates the point at which a <see cref="T:System.Activities.NativeActivity" /> can passively wait to be resumed with the specified name, the specified method to execute when notification of the resume operation completes, and the specified option that governs how the bookmark is used during the execution of the current <see cref="T:System.Activities.NativeActivity" />.</summary>
      <returns>A bookmark that includes the name of the bookmark, the callback method, and the bookmark execution option.</returns>
      <param name="name">The name of the bookmark.</param>
      <param name="callback">The method to be called when a notification signals resumption of the <see cref="T:System.Activities.NativeActivity" />.</param>
      <param name="options">The bookmark options that govern how the bookmark is used during the execution of the current <see cref="T:System.Activities.NativeActivity" />.</param>
    </member>
    <member name="M:System.Activities.NativeActivityContext.CreateBookmark(System.String,System.Activities.BookmarkCallback,System.Activities.BookmarkScope)">
      <summary>Creates the point at which a <see cref="T:System.Activities.NativeActivity" /> can passively wait to be resumed with the specified name, the specified method to execute when notification of the resume operation completes, and the specified scope of the bookmark.</summary>
      <returns>A bookmark that includes the name of the bookmark, the callback method, and the scope of the bookmark.</returns>
      <param name="name">The name of the bookmark.</param>
      <param name="callback">The method to be called when a notification signals resumption of the <see cref="T:System.Activities.NativeActivity" />.</param>
      <param name="scope">An identifier applied to a group of bookmarks that operate under the same protocol during a workflow runtime.</param>
    </member>
    <member name="M:System.Activities.NativeActivityContext.CreateBookmark(System.String,System.Activities.BookmarkCallback,System.Activities.BookmarkScope,System.Activities.BookmarkOptions)">
      <summary>Creates the point at which a <see cref="T:System.Activities.NativeActivity" /> can passively wait to be resumed with the specified name, the specified method to execute when notification of the resume operation completes, the specified scope of the bookmark, and the specified option that governs how the bookmark is used during the execution of the current <see cref="T:System.Activities.NativeActivity" />.</summary>
      <returns>A bookmark that includes the name of the bookmark, the callback method, the scope of the bookmark, and the bookmark execution option.</returns>
      <param name="name">The name of the bookmark.</param>
      <param name="callback">The method to be called when a notification signals resumption of the <see cref="T:System.Activities.NativeActivity" />.</param>
      <param name="scope">An identifier applied to a group of bookmarks that operate under the same protocol during a workflow runtime.</param>
      <param name="options">The bookmark options that governs how the bookmark is used during the execution of the current <see cref="T:System.Activities.NativeActivity" />.</param>
    </member>
    <member name="P:System.Activities.NativeActivityContext.DefaultBookmarkScope">
      <summary>Gets the bookmark scope associated with the root of the workflow.</summary>
      <returns>A unique GUID identifier.</returns>
    </member>
    <member name="M:System.Activities.NativeActivityContext.GetChildren">
      <summary>Returns a collection of the child activities for the current <see cref="T:System.Activities.NativeActivity" />.</summary>
      <returns>A generic read-only collection of child <see cref="T:System.Activities.NativeActivity" /> objects.</returns>
    </member>
    <member name="M:System.Activities.NativeActivityContext.GetValue(System.Activities.Variable)">
      <summary>Returns the value of the specified variable in the current <see cref="T:System.Activities.NativeActivity" /> instance.</summary>
      <returns>The value of the specified variable.</returns>
      <param name="variable">The variable whose value is being retrieved during execution of the current <see cref="T:System.Activities.NativeActivity" /> instance.</param>
    </member>
    <member name="M:System.Activities.NativeActivityContext.GetValue``1(System.Activities.Variable{``0})">
      <summary>Returns the value of the specified generic variable in the current <see cref="T:System.Activities.NativeActivity" /> instance.</summary>
      <returns>The value of the specified variable.</returns>
      <param name="variable">The generic variable whose value is being retrieved during execution of the current <see cref="T:System.Activities.NativeActivity" /> instance.</param>
      <typeparam name="T">The type of the variable whose value is being retrieved.</typeparam>
    </member>
    <member name="P:System.Activities.NativeActivityContext.IsCancellationRequested">
      <summary>Gets or sets a value that indicates whether the currently executing <see cref="T:System.Activities.NativeActivity" /> instance is to be canceled.</summary>
      <returns>true if the currently executing <see cref="T:System.Activities.NativeActivity" /> instance is to be canceled; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.NativeActivityContext.MarkCanceled">
      <summary>Designates the currently executing <see cref="T:System.Activities.NativeActivity" /> instance as canceled.</summary>
    </member>
    <member name="P:System.Activities.NativeActivityContext.Properties">
      <summary>Gets an object that handles properties for execution of the current <see cref="T:System.Activities.NativeActivityContext" />.</summary>
      <returns>An object that handles execution properties.</returns>
    </member>
    <member name="M:System.Activities.NativeActivityContext.RemoveAllBookmarks">
      <summary>Removes all the bookmarks associated with the currently executing <see cref="T:System.Activities.NativeActivity" /> instance.</summary>
    </member>
    <member name="M:System.Activities.NativeActivityContext.RemoveBookmark(System.Activities.Bookmark)">
      <summary>Removes the specified bookmark from the currently executing <see cref="T:System.Activities.NativeActivity" /> instance.</summary>
      <returns>true if the bookmark was removed; otherwise, false.</returns>
      <param name="bookmark">A point at which a <see cref="T:System.Activities.NativeActivity" /> instance can passively wait to be resumed.</param>
    </member>
    <member name="M:System.Activities.NativeActivityContext.RemoveBookmark(System.String)">
      <summary>Removes the bookmark with the specified name.</summary>
      <returns>true if the bookmark was removed; otherwise, false.</returns>
      <param name="name">The name of the bookmark.</param>
    </member>
    <member name="M:System.Activities.NativeActivityContext.RemoveBookmark(System.String,System.Activities.BookmarkScope)">
      <summary>Removes the bookmark with the specified name and the specified bookmark scope.</summary>
      <returns>true if the bookmark was removed; otherwise, false.</returns>
      <param name="name">The name of the bookmark.</param>
      <param name="scope">The unique GUID identifier for a group of <see cref="T:System.Activities.Bookmark" /> objects that are categorized as operating under the same protocol.</param>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ResumeBookmark(System.Activities.Bookmark,System.Object)">
      <summary>Resumes the specified bookmark.</summary>
      <returns>The outcome of the attempt to resume <see cref="T:System.Activities.NativeActivity" /> operation at the point of the bookmark.</returns>
      <param name="bookmark">A point at which a <see cref="T:System.Activities.NativeActivity" /> can passively wait to be resumed.</param>
      <param name="value">The information related to the resumption of a bookmark.</param>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleAction(System.Activities.ActivityAction,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified <see cref="T:System.Activities.ActivityAction" /> that has no parameters, and that bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityAction" />.</summary>
      <returns>A new instance of an activity action.</returns>
      <param name="activityAction">An action that executes when a specific event occurs in the parent activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityAction" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityAction" />.</param>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleAction``1(System.Activities.ActivityAction{``0},``0,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified <see cref="T:System.Activities.ActivityAction`1" /> that has one parameter for an in argument and bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityAction`1" />.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activityAction">An action that executes when a specific event occurs in the parent activity.</param>
      <param name="argument">Data sent into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityAction`1" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityAction`1" />.</param>
      <typeparam name="T">An argument that carries data into an activity.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleAction``10(System.Activities.ActivityAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified <see cref="T:System.Activities.ActivityAction`10" /> that has ten parameters for in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityAction`10" />.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activityAction">An action that executes when a specific event occurs in the parent activity.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="argument6">An argument that carries data into an activity.</param>
      <param name="argument7">An argument that carries data into an activity.</param>
      <param name="argument8">An argument that carries data into an activity.</param>
      <param name="argument9">An argument that carries data into an activity.</param>
      <param name="argument10">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityAction`10" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityAction`10" />.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="T6">The data that is carried into an activity.</typeparam>
      <typeparam name="T7">The data that is carried into an activity.</typeparam>
      <typeparam name="T8">The data that is carried into an activity.</typeparam>
      <typeparam name="T9">The data that is carried into an activity.</typeparam>
      <typeparam name="T10">The data that is carried into an activity.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleAction``11(System.Activities.ActivityAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified <see cref="T:System.Activities.ActivityAction`11" /> that has eleven parameters for in arguments, and that bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityAction`11" />.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activityAction">An action that executes when a specific event occurs in the parent activity.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="argument6">An argument that carries data into an activity.</param>
      <param name="argument7">An argument that carries data into an activity.</param>
      <param name="argument8">An argument that carries data into an activity.</param>
      <param name="argument9">An argument that carries data into an activity.</param>
      <param name="argument10">An argument that carries data into an activity.</param>
      <param name="argument11">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityAction`11" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityAction`11" />.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="T6">The data that is carried into an activity.</typeparam>
      <typeparam name="T7">The data that is carried into an activity.</typeparam>
      <typeparam name="T8">The data that is carried into an activity.</typeparam>
      <typeparam name="T9">The data that is carried into an activity.</typeparam>
      <typeparam name="T10">The data that is carried into an activity.</typeparam>
      <typeparam name="T11">The data that is carried into an activity.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleAction``12(System.Activities.ActivityAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified <see cref="T:System.Activities.ActivityAction`12" /> that has twelve parameters for in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityAction`12" />.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activityAction">An action that executes when a specific event occurs in the parent activity.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="argument6">An argument that carries data into an activity.</param>
      <param name="argument7">An argument that carries data into an activity.</param>
      <param name="argument8">An argument that carries data into an activity.</param>
      <param name="argument9">An argument that carries data into an activity.</param>
      <param name="argument10">An argument that carries data into an activity.</param>
      <param name="argument11">An argument that carries data into an activity.</param>
      <param name="argument12">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityAction`12" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityAction`12" />.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="T6">The data that is carried into an activity.</typeparam>
      <typeparam name="T7">The data that is carried into an activity.</typeparam>
      <typeparam name="T8">The data that is carried into an activity.</typeparam>
      <typeparam name="T9">The data that is carried into an activity.</typeparam>
      <typeparam name="T10">The data that is carried into an activity.</typeparam>
      <typeparam name="T11">The data that is carried into an activity.</typeparam>
      <typeparam name="T12">The data that is carried into an activity.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleAction``13(System.Activities.ActivityAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified <see cref="T:System.Activities.ActivityAction`13" /> that has thirteen parameters for in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityAction`13" />.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activityAction">An action that executes when a specific event occurs in the parent activity.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="argument6">An argument that carries data into an activity.</param>
      <param name="argument7">An argument that carries data into an activity.</param>
      <param name="argument8">An argument that carries data into an activity.</param>
      <param name="argument9">An argument that carries data into an activity.</param>
      <param name="argument10">An argument that carries data into an activity.</param>
      <param name="argument11">An argument that carries data into an activity.</param>
      <param name="argument12">An argument that carries data into an activity.</param>
      <param name="argument13">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityAction`13" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityAction`13" />.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="T6">The data that is carried into an activity.</typeparam>
      <typeparam name="T7">The data that is carried into an activity.</typeparam>
      <typeparam name="T8">The data that is carried into an activity.</typeparam>
      <typeparam name="T9">The data that is carried into an activity.</typeparam>
      <typeparam name="T10">The data that is carried into an activity.</typeparam>
      <typeparam name="T11">The data that is carried into an activity.</typeparam>
      <typeparam name="T12">The data that is carried into an activity.</typeparam>
      <typeparam name="T13">The data that is carried into an activity.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleAction``14(System.Activities.ActivityAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified <see cref="T:System.Activities.ActivityAction`14" /> that has fourteen parameters for in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityAction`14" />.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activityAction">An action that executes when a specific event occurs in the parent activity.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="argument6">An argument that carries data into an activity.</param>
      <param name="argument7">An argument that carries data into an activity.</param>
      <param name="argument8">An argument that carries data into an activity.</param>
      <param name="argument9">An argument that carries data into an activity.</param>
      <param name="argument10">An argument that carries data into an activity.</param>
      <param name="argument11">An argument that carries data into an activity.</param>
      <param name="argument12">An argument that carries data into an activity.</param>
      <param name="argument13">An argument that carries data into an activity.</param>
      <param name="argument14">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityAction`14" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityAction`14" />.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="T6">The data that is carried into an activity.</typeparam>
      <typeparam name="T7">The data that is carried into an activity.</typeparam>
      <typeparam name="T8">The data that is carried into an activity.</typeparam>
      <typeparam name="T9">The data that is carried into an activity.</typeparam>
      <typeparam name="T10">The data that is carried into an activity.</typeparam>
      <typeparam name="T11">The data that is carried into an activity.</typeparam>
      <typeparam name="T12">The data that is carried into an activity.</typeparam>
      <typeparam name="T13">The data that is carried into an activity.</typeparam>
      <typeparam name="T14">The data that is carried into an activity.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleAction``15(System.Activities.ActivityAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified <see cref="T:System.Activities.ActivityAction`15" /> that has fifteen parameters for in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityAction`15" />.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activityAction">An action that executes when a specific event occurs in the parent activity.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="argument6">An argument that carries data into an activity.</param>
      <param name="argument7">An argument that carries data into an activity.</param>
      <param name="argument8">An argument that carries data into an activity.</param>
      <param name="argument9">An argument that carries data into an activity.</param>
      <param name="argument10">An argument that carries data into an activity.</param>
      <param name="argument11">An argument that carries data into an activity.</param>
      <param name="argument12">An argument that carries data into an activity.</param>
      <param name="argument13">An argument that carries data into an activity.</param>
      <param name="argument14">An argument that carries data into an activity.</param>
      <param name="argument15">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityAction`15" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityAction`15" />.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="T6">The data that is carried into an activity.</typeparam>
      <typeparam name="T7">The  data that is carried into an activity.</typeparam>
      <typeparam name="T8">The data that is carried into an activity.</typeparam>
      <typeparam name="T9">The data that is carried into an activity.</typeparam>
      <typeparam name="T10">The data that is carried into an activity.</typeparam>
      <typeparam name="T11">The data that is carried into an activity.</typeparam>
      <typeparam name="T12">The data that is carried into an activity.</typeparam>
      <typeparam name="T13">The data that is carried into an activity.</typeparam>
      <typeparam name="T14">The data that is carried into an activity.</typeparam>
      <typeparam name="T15">Generic parameter that represents data that is carried into an activity.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleAction``16(System.Activities.ActivityAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified <see cref="T:System.Activities.ActivityAction`16" /> that has sixteen parameters for in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityAction`16" />.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activityAction">An action that executes when a specific event occurs in the parent activity.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="argument6">An argument that carries data into an activity.</param>
      <param name="argument7">An argument that carries data into an activity.</param>
      <param name="argument8">An argument that carries data into an activity.</param>
      <param name="argument9">An argument that carries data into an activity.</param>
      <param name="argument10">An argument that carries data into an activity.</param>
      <param name="argument11">An argument that carries data into an activity.</param>
      <param name="argument12">An argument that carries data into an activity.</param>
      <param name="argument13">An argument that carries data into an activity.</param>
      <param name="argument14">An argument that carries data into an activity.</param>
      <param name="argument15">An argument that carries data into an activity.</param>
      <param name="argument16">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityAction`16" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityAction`16" />.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="T6">The data that is carried into an activity.</typeparam>
      <typeparam name="T7">The data that is carried into an activity.</typeparam>
      <typeparam name="T8">The data that is carried into an activity.</typeparam>
      <typeparam name="T9">The data that is carried into an activity.</typeparam>
      <typeparam name="T10">The data that is carried into an activity.</typeparam>
      <typeparam name="T11">The data that is carried into an activity.</typeparam>
      <typeparam name="T12">The data that is carried into an activity.</typeparam>
      <typeparam name="T13">The data that is carried into an activity.</typeparam>
      <typeparam name="T14">The data that is carried into an activity.</typeparam>
      <typeparam name="T15">The data that is carried into an activity.</typeparam>
      <typeparam name="T16">The data that is carried into an activity.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleAction``2(System.Activities.ActivityAction{``0,``1},``0,``1,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified <see cref="T:System.Activities.ActivityAction`2" /> that has two parameters for in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityAction`2" />.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activityAction">An action that executes when a specific event occurs in the parent activity.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityAction`2" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityAction`2" />.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleAction``3(System.Activities.ActivityAction{``0,``1,``2},``0,``1,``2,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified <see cref="T:System.Activities.ActivityAction`3" /> that has three parameters for in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityAction`3" />.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activityAction">An action that executes when a specific event occurs in the parent activity.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityAction`3" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityAction`3" />.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleAction``4(System.Activities.ActivityAction{``0,``1,``2,``3},``0,``1,``2,``3,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified <see cref="T:System.Activities.ActivityAction`4" /> that has four parameters for in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityAction`4" />.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activityAction">An action that executes when a specific event occurs in the parent activity.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityAction`4" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityAction`4" />.</param>
      <typeparam name="T1">the data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleAction``5(System.Activities.ActivityAction{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified <see cref="T:System.Activities.ActivityAction`5" /> that has five parameters for in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityAction`5" />.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activityAction">An action that executes when a specific event occurs in the parent activity.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityAction`5" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityAction`5" />.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleAction``6(System.Activities.ActivityAction{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified <see cref="T:System.Activities.ActivityAction`6" /> that has six parameters for in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityAction`6" />.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activityAction">An action that executes when a specific event occurs in the parent activity.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="argument6">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityAction`6" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityAction`6" />.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="T6">The data that is carried into an activity.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleAction``7(System.Activities.ActivityAction{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified <see cref="T:System.Activities.ActivityAction`7" /> that has seven parameters for in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityAction`7" />.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activityAction">An action that executes when a specific event occurs in the parent activity.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="argument6">An argument that carries data into an activity.</param>
      <param name="argument7">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityAction`7" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityAction`7" />.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="T6">The data that is carried into an activity.</typeparam>
      <typeparam name="T7">The data that is carried into an activity.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleAction``8(System.Activities.ActivityAction{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,``7,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified <see cref="T:System.Activities.ActivityAction`8" /> that has eight parameters for in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityAction`8" />.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activityAction">An action that executes when a specific event occurs in the parent activity.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="argument6">An argument that carries data into an activity.</param>
      <param name="argument7">An argument that carries data into an activity.</param>
      <param name="argument8">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityAction`8" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityAction`8" />.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="T6">The data that is carried into an activity.</typeparam>
      <typeparam name="T7">The data that is carried into an activity.</typeparam>
      <typeparam name="T8">The data that is carried into an activity.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleAction``9(System.Activities.ActivityAction{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified <see cref="T:System.Activities.ActivityAction`9" /> that has nine parameters for in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityAction`9" />.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activityAction">An action that executes when a specific event occurs in the parent activity.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="argument6">An argument that carries data into an activity.</param>
      <param name="argument7">An argument that carries data into an activity.</param>
      <param name="argument8">An argument that carries data into an activity.</param>
      <param name="argument9">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityAction`9" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityAction`9" />.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="T6">The data that is carried into an activity.</typeparam>
      <typeparam name="T7">The data that is carried into an activity.</typeparam>
      <typeparam name="T8">The data that is carried into an activity.</typeparam>
      <typeparam name="T9">The data that is carried into an activity.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleActivity(System.Activities.Activity)">
      <summary>Schedules the specified <see cref="T:System.Activities.NativeActivity" /> child activity for execution.</summary>
      <returns>An activity instance.</returns>
      <param name="activity">A child activity that is triggered by an event that occurs in the execution of a parent <see cref="T:System.Activities.NativeActivity" />.</param>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleActivity(System.Activities.Activity,System.Activities.CompletionCallback)">
      <summary>Schedules the specified <see cref="T:System.Activities.NativeActivity" /> child activity for execution using the specified completion callback location where the parent process resumes upon completion of the activity.</summary>
      <returns>An activity instance.</returns>
      <param name="activity">A child activity that is triggered by an event that occurs in the execution of a parent <see cref="T:System.Activities.NativeActivity" />.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityAction" />.</param>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleActivity(System.Activities.Activity,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>Schedules the specified <see cref="T:System.Activities.NativeActivity" /> child activity for execution and bookmarks the specified callback locations where the parent process resumes upon completion of the child activity.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activity">A child activity that is triggered by an event that occurs in the execution of a parent <see cref="T:System.Activities.NativeActivity" />.</param>
      <param name="onCompleted">A bookmark that indicates where the <see cref="T:System.Activities.NativeActivity" /> execution resumes upon completion of the <see cref="T:System.Activities.ActivityAction" />.</param>
      <param name="onFaulted">A bookmark that indicates where the <see cref="T:System.Activities.NativeActivity" /> execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityAction" />.</param>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleActivity(System.Activities.Activity,System.Activities.FaultCallback)">
      <summary>Schedules the specified <see cref="T:System.Activities.NativeActivity" /> child activity for execution using the specified fault callback location where the parent process resumes when the activity enters the faulted state.</summary>
      <returns>An activity instance.</returns>
      <param name="activity">A child activity that is triggered by an event that occurs in the execution of a parent <see cref="T:System.Activities.NativeActivity" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityAction" />.</param>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleActivity``1(System.Activities.Activity{``0},System.Activities.CompletionCallback{``0},System.Activities.FaultCallback)">
      <summary>Schedules the specified <see cref="T:System.Activities.NativeActivity" /> child activity for execution, with one parameter for an in argument, and bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityAction`1" />.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activity">A child activity that is triggered by an event that occurs in the execution of a parent <see cref="T:System.Activities.NativeActivity" />.</param>
      <param name="onCompleted">A bookmark that indicates where the <see cref="T:System.Activities.NativeActivity" /> execution resumes upon completion of the <see cref="T:System.Activities.ActivityAction`1" />.</param>
      <param name="onFaulted">A bookmark that indicates where the <see cref="T:System.Activities.NativeActivity" /> execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityAction" />.</param>
      <typeparam name="TResult">The type of the <see cref="T:System.Activities.NativeActivity" /> child activity out argument.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleDelegate(System.Activities.ActivityDelegate,System.Collections.Generic.IDictionary{System.String,System.Object},System.Activities.DelegateCompletionCallback,System.Activities.FaultCallback)">
      <summary>Pushes the callback method for an activity into the work item pool. </summary>
      <returns>An instance of an activity.</returns>
      <param name="activityDelegate">The callback method to which an activity returns when the specified activity action completes.</param>
      <param name="inputParameters">A dictionary list of activity argument names and values.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityAction" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityAction" />.</param>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleFunc``1(System.Activities.ActivityFunc{``0},System.Activities.CompletionCallback{``0},System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified <see cref="T:System.Activities.ActivityFunc`1" /> with one parameter that holds a return value and bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityFunc`1" />.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activityFunc">A child activity that runs when a specific event occurs in the parent activity and returns a value.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityFunc`1" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityFunc`1" />.</param>
      <typeparam name="TResult">The type of the <see cref="T:System.Activities.NativeActivity" /> child activity out argument.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleFunc``10(System.Activities.ActivityFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Activities.CompletionCallback{``9},System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified <see cref="T:System.Activities.ActivityFunc`10" /> that has ten parameters for a return value and in arguments and bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityFunc`10" />.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activityFunc">A child activity that runs when a specific event occurs in the parent activity and returns a value.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="argument6">An argument that carries data into an activity.</param>
      <param name="argument7">An argument that carries data into an activity.</param>
      <param name="argument8">An argument that carries data into an activity.</param>
      <param name="argument9">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityFunc`10" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityFunc`10" />.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="T6">The data that is carried into an activity.</typeparam>
      <typeparam name="T7">The data that is carried into an activity.</typeparam>
      <typeparam name="T8">The data that is carried into an activity.</typeparam>
      <typeparam name="T9">The data that is carried into an activity.</typeparam>
      <typeparam name="TResult">The type of the child activity out argument.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleFunc``11(System.Activities.ActivityFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Activities.CompletionCallback{``10},System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified <see cref="T:System.Activities.ActivityFunc`11" /> that has eleven parameters for a return value and in arguments, and bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityFunc`11" />.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activityFunc">A child activity that runs when a specific event occurs in the parent activity and returns a value.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="argument6">An argument that carries data into an activity.</param>
      <param name="argument7">An argument that carries data into an activity.</param>
      <param name="argument8">An argument that carries data into an activity.</param>
      <param name="argument9">An argument that carries data into an activity.</param>
      <param name="argument10">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityFunc`11" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityFunc`11" />.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="T6">The data that is carried into an activity.</typeparam>
      <typeparam name="T7">The data that is carried into an activity.</typeparam>
      <typeparam name="T8">The data that is carried into an activity.</typeparam>
      <typeparam name="T9">The data that is carried into an activity.</typeparam>
      <typeparam name="T10">The data that is carried into an activity.</typeparam>
      <typeparam name="TResult">The type of the <see cref="T:System.Activities.NativeActivity" /> child activity out argument.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleFunc``12(System.Activities.ActivityFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Activities.CompletionCallback{``11},System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified <see cref="T:System.Activities.ActivityFunc`12" /> that has twelve parameters for a return value and in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityFunc`12" />.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activityFunc">A child activity that runs when a specific event occurs in the parent activity and returns a value.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="argument6">An argument that carries data into an activity.</param>
      <param name="argument7">An argument that carries data into an activity.</param>
      <param name="argument8">An argument that carries data into an activity.</param>
      <param name="argument9">An argument that carries data into an activity.</param>
      <param name="argument10">An argument that carries data into an activity.</param>
      <param name="argument11">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityFunc`12" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityFunc`12" />.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="T6">The data that is carried into an activity.</typeparam>
      <typeparam name="T7">The data that is carried into an activity.</typeparam>
      <typeparam name="T8">The data that is carried into an activity.</typeparam>
      <typeparam name="T9">The data that is carried into an activity.</typeparam>
      <typeparam name="T10">The data that is carried into an activity.</typeparam>
      <typeparam name="T11">The data that is carried into an activity.</typeparam>
      <typeparam name="TResult">The type of the child activity out argument.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleFunc``13(System.Activities.ActivityFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Activities.CompletionCallback{``12},System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified <see cref="T:System.Activities.ActivityFunc`13" /> that has thirteen parameters for a return value and in arguments and bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityFunc`13" />.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activityFunc">A child activity that runs when a specific event occurs in the parent activity and returns a value.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="argument6">An argument that carries data into an activity.</param>
      <param name="argument7">An argument that carries data into an activity.</param>
      <param name="argument8">An argument that carries data into an activity.</param>
      <param name="argument9">An argument that carries data into an activity.</param>
      <param name="argument10">An argument that carries data into an activity.</param>
      <param name="argument11">An argument that carries data into an activity.</param>
      <param name="argument12">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityFunc`13" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityFunc`13" />.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="T6">The data that is carried into an activity.</typeparam>
      <typeparam name="T7">The data that is carried into an activity.</typeparam>
      <typeparam name="T8">The data that is carried into an activity.</typeparam>
      <typeparam name="T9">The data that is carried into an activity.</typeparam>
      <typeparam name="T10">The data that is carried into an activity.</typeparam>
      <typeparam name="T11">The data that is carried into an activity.</typeparam>
      <typeparam name="T12">The data that is carried into an activity.</typeparam>
      <typeparam name="TResult">The type of the <see cref="T:System.Activities.NativeActivity" /> child activity out argument.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleFunc``14(System.Activities.ActivityFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Activities.CompletionCallback{``13},System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified <see cref="T:System.Activities.ActivityFunc`14" /> that has fourteen parameters for a return value and in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityFunc`14" />.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activityFunc">A child activity that runs when a specific event occurs in the parent activity and returns a value.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="argument6">An argument that carries data into an activity.</param>
      <param name="argument7">An argument that carries data into an activity.</param>
      <param name="argument8">An argument that carries data into an activity.</param>
      <param name="argument9">An argument that carries data into an activity.</param>
      <param name="argument10">An argument that carries data into an activity.</param>
      <param name="argument11">An argument that carries data into an activity.</param>
      <param name="argument12">An argument that carries data into an activity.</param>
      <param name="argument13">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityFunc`14" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityFunc`14" />.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="T6">The data that is carried into an activity.</typeparam>
      <typeparam name="T7">The data that is carried into an activity.</typeparam>
      <typeparam name="T8">The data that is carried into an activity.</typeparam>
      <typeparam name="T9">The data that is carried into an activity.</typeparam>
      <typeparam name="T10">The data that is carried into an activity.</typeparam>
      <typeparam name="T11">The data that is carried into an activity.</typeparam>
      <typeparam name="T12">The data that is carried into an activity.</typeparam>
      <typeparam name="T13">The data that is carried into an activity.</typeparam>
      <typeparam name="TResult">The type of the <see cref="T:System.Activities.NativeActivity" /> child activity out argument.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleFunc``15(System.Activities.ActivityFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Activities.CompletionCallback{``14},System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified <see cref="T:System.Activities.ActivityFunc`15" /> that has fifteen parameters for a return value and in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityFunc`15" />.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activityFunc">A child activity that runs when a specific event occurs in the parent activity and returns a value.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="argument6">An argument that carries data into an activity.</param>
      <param name="argument7">An argument that carries data into an activity.</param>
      <param name="argument8">An argument that carries data into an activity.</param>
      <param name="argument9">An argument that carries data into an activity.</param>
      <param name="argument10">An argument that carries data into an activity.</param>
      <param name="argument11">An argument that carries data into an activity.</param>
      <param name="argument12">An argument that carries data into an activity.</param>
      <param name="argument13">An argument that carries data into an activity.</param>
      <param name="argument14">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityFunc`15" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityFunc`15" />.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="T6">The data that is carried into an activity.</typeparam>
      <typeparam name="T7">The data that is carried into an activity.</typeparam>
      <typeparam name="T8">The data that is carried into an activity.</typeparam>
      <typeparam name="T9">The data that is carried into an activity.</typeparam>
      <typeparam name="T10">The data that is carried into an activity.</typeparam>
      <typeparam name="T11">The data that is carried into an activity.</typeparam>
      <typeparam name="T12">The data that is carried into an activity.</typeparam>
      <typeparam name="T13">The data that is carried into an activity.</typeparam>
      <typeparam name="T14">The data that is carried into an activity.</typeparam>
      <typeparam name="TResult">The type of the <see cref="T:System.Activities.NativeActivity" /> child activity out argument.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleFunc``16(System.Activities.ActivityFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Activities.CompletionCallback{``15},System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified <see cref="T:System.Activities.ActivityFunc`16" /> that has sixteen parameters for a return value and in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityFunc`16" />.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activityFunc">A child activity that runs when a specific event occurs in the parent activity and returns a value.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="argument6">An argument that carries data into an activity.</param>
      <param name="argument7">An argument that carries data into an activity.</param>
      <param name="argument8">An argument that carries data into an activity.</param>
      <param name="argument9">An argument that carries data into an activity.</param>
      <param name="argument10">An argument that carries data into an activity.</param>
      <param name="argument11">An argument that carries data into an activity.</param>
      <param name="argument12">An argument that carries data into an activity.</param>
      <param name="argument13">An argument that carries data into an activity.</param>
      <param name="argument14">An argument that carries data into an activity.</param>
      <param name="argument15">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityFunc`16" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityFunc`16" />.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="T6">The data that is carried into an activity.</typeparam>
      <typeparam name="T7">The data that is carried into an activity.</typeparam>
      <typeparam name="T8">The data that is carried into an activity.</typeparam>
      <typeparam name="T9">The data that is carried into an activity.</typeparam>
      <typeparam name="T10">The data that is carried into an activity.</typeparam>
      <typeparam name="T11">The data that is carried into an activity.</typeparam>
      <typeparam name="T12">The data that is carried into an activity.</typeparam>
      <typeparam name="T13">The data that is carried into an activity.</typeparam>
      <typeparam name="T14">The data that is carried into an activity.</typeparam>
      <typeparam name="T15">The data that is carried into an activity.</typeparam>
      <typeparam name="TResult">The type of the <see cref="T:System.Activities.NativeActivity" /> child activity out argument.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleFunc``17(System.Activities.ActivityFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Activities.CompletionCallback{``16},System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified <see cref="T:System.Activities.ActivityFunc`17" /> that has seventeen parameters for a return value and in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityFunc`17" />.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activityFunc">A child activity that runs when a specific event occurs in the parent activity, and returns a value.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="argument6">An argument that carries data into an activity.</param>
      <param name="argument7">An argument that carries data into an activity.</param>
      <param name="argument8">An argument that carries data into an activity.</param>
      <param name="argument9">An argument that carries data into an activity.</param>
      <param name="argument10">An argument that carries data into an activity.</param>
      <param name="argument11">An argument that carries data into an activity.</param>
      <param name="argument12">An argument that carries data into an activity.</param>
      <param name="argument13">An argument that carries data into an activity.</param>
      <param name="argument14">An argument that carries data into an activity.</param>
      <param name="argument15">An argument that carries data into an activity.</param>
      <param name="argument16">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityFunc`17" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityFunc`17" />.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="T6">The data that is carried into an activity.</typeparam>
      <typeparam name="T7">The data that is carried into an activity.</typeparam>
      <typeparam name="T8">The data that is carried into an activity.</typeparam>
      <typeparam name="T9">The data that is carried into an activity.</typeparam>
      <typeparam name="T10">The data that is carried into an activity.</typeparam>
      <typeparam name="T11">The data that is carried into an activity.</typeparam>
      <typeparam name="T12">The data that is carried into an activity.</typeparam>
      <typeparam name="T13">The data that is carried into an activity.</typeparam>
      <typeparam name="T14">The data that is carried into an activity.</typeparam>
      <typeparam name="T15">The data that is carried into an activity.</typeparam>
      <typeparam name="T16">The data that is carried into an activity.</typeparam>
      <typeparam name="TResult">The type of the <see cref="T:System.Activities.NativeActivity" /> child activity out argument.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleFunc``2(System.Activities.ActivityFunc{``0,``1},``0,System.Activities.CompletionCallback{``1},System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified <see cref="T:System.Activities.ActivityFunc`2" /> that has two parameters for a return value and an in argument and that bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityFunc`2" />.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activityFunc">A child activity that runs when a specific event occurs in the parent activity and returns a value.</param>
      <param name="argument">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityFunc`2" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityFunc`2" />.</param>
      <typeparam name="T">The data that is carried into an activity.</typeparam>
      <typeparam name="TResult">The type of the <see cref="T:System.Activities.NativeActivity" /> child activity out argument.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleFunc``3(System.Activities.ActivityFunc{``0,``1,``2},``0,``1,System.Activities.CompletionCallback{``2},System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified <see cref="T:System.Activities.ActivityFunc`3" /> that has three parameters for a return value and in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityFunc`3" />.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activityFunc">A child activity that runs when a specific event occurs in the parent activity and returns a value.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityFunc`3" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityFunc`3" />.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="TResult">The type of the <see cref="T:System.Activities.NativeActivity" /> child activity out argument.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleFunc``4(System.Activities.ActivityFunc{``0,``1,``2,``3},``0,``1,``2,System.Activities.CompletionCallback{``3},System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified <see cref="T:System.Activities.ActivityFunc`4" /> that has four parameters for a return value and in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityFunc`4" />.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activityFunc">A child activity that runs when a specific event occurs in the parent activity and returns a value.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityFunc`4" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityFunc`4" />.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="TResult">The type of the <see cref="T:System.Activities.NativeActivity" /> child activity out argument.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleFunc``5(System.Activities.ActivityFunc{``0,``1,``2,``3,``4},``0,``1,``2,``3,System.Activities.CompletionCallback{``4},System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified <see cref="T:System.Activities.ActivityFunc`5" /> that has five parameters for a return value and in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityFunc`5" />.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activityFunc">A child activity that runs when a specific event occurs in the parent activity and returns a value.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityFunc`5" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityFunc`5" />.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="TResult">The type of the <see cref="T:System.Activities.NativeActivity" /> child activity out argument.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleFunc``6(System.Activities.ActivityFunc{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,System.Activities.CompletionCallback{``5},System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified <see cref="T:System.Activities.ActivityFunc`6" /> that has six parameters for a return value and in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityFunc`6" />.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activityFunc">A child activity that runs when a specific event occurs in the parent activity and returns a value.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityFunc`6" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityFunc`6" />.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="TResult">The type of the <see cref="T:System.Activities.NativeActivity" /> child activity out argument.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleFunc``7(System.Activities.ActivityFunc{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,System.Activities.CompletionCallback{``6},System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified <see cref="T:System.Activities.ActivityFunc`7" /> that has seven parameters for a return value and in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityFunc`7" />.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activityFunc">A child activity that runs when a specific event occurs in the parent activity and returns a value.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="argument6">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityFunc`7" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityFunc`7" />.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="T6">The data that is carried into an activity.</typeparam>
      <typeparam name="TResult">The type of the <see cref="T:System.Activities.NativeActivity" /> child activity out argument.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleFunc``8(System.Activities.ActivityFunc{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,System.Activities.CompletionCallback{``7},System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified <see cref="T:System.Activities.ActivityFunc`8" /> that has eight parameters for a return value and in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityFunc`8" />.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activityFunc">A child activity that runs when a specific event occurs in the parent activity and returns a value.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="argument6">An argument that carries data into an activity.</param>
      <param name="argument7">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityFunc`8" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityFunc`8" />.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="T6">The data that is carried into an activity.</typeparam>
      <typeparam name="T7">The data that is carried into an activity.</typeparam>
      <typeparam name="TResult">The type of the <see cref="T:System.Activities.NativeActivity" /> child activity out argument.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleFunc``9(System.Activities.ActivityFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,System.Activities.CompletionCallback{``8},System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified <see cref="T:System.Activities.ActivityFunc`9" /> that has nine parameters for a return value and in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the <see cref="T:System.Activities.ActivityFunc`9" />.</summary>
      <returns>An instance of an activity.</returns>
      <param name="activityFunc">A child activity that runs when a specific event occurs in the parent activity and returns a value.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="argument6">An argument that carries data into an activity.</param>
      <param name="argument7">An argument that carries data into an activity.</param>
      <param name="argument8">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the <see cref="T:System.Activities.ActivityFunc`9" />.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityFunc`9" />.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="T6">The data that is carried into an activity.</typeparam>
      <typeparam name="T7">The data that is carried into an activity.</typeparam>
      <typeparam name="T8">The data that is carried into an activity.</typeparam>
      <typeparam name="TResult">The type of the <see cref="T:System.Activities.NativeActivity" /> child activity out argument.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.SetValue(System.Activities.Variable,System.Object)">
      <summary>Assigns the specified value object to the specified variable object.</summary>
      <param name="variable">A variable object without a specified type that can be assigned a value object.</param>
      <param name="value">An object without a specified type that can be assigned to a variable object.</param>
    </member>
    <member name="M:System.Activities.NativeActivityContext.SetValue``1(System.Activities.Variable{``0},``0)">
      <summary>Assigns the specified generic value object to the specified generic variable object.</summary>
      <param name="variable">A variable object with a specified type that can be assigned a value object.</param>
      <param name="value">An object with a specified type that can be assigned to a variable object.</param>
      <typeparam name="T">The type of the <paramref name="variable" /> and <paramref name="value" />.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.Track(System.Activities.Tracking.CustomTrackingRecord)">
      <summary>Adds an activity tracking record to the current workflow instance.</summary>
      <param name="record">The data sent to tracking participants when tracked events occur.</param>
    </member>
    <member name="T:System.Activities.NativeActivityFaultContext">
      <summary>Represents the execution environment of a <see cref="T:System.Activities.NativeActivity" /> when it is handling an exception thrown by a child activity.</summary>
    </member>
    <member name="M:System.Activities.NativeActivityFaultContext.HandleFault">
      <summary>Records that the exception is being handled.</summary>
    </member>
    <member name="T:System.Activities.NativeActivityMetadata">
      <summary>Represents the set of arguments, child activities, variables, and delegates that a configured <see cref="T:System.Activities.NativeActivity" /> introduces to the execution environment. </summary>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.AddArgument(System.Activities.RuntimeArgument)">
      <summary>Adds an argument to the collection of arguments of an activity.</summary>
      <param name="argument">The argument to add to the collection.</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.AddChild(System.Activities.Activity)">
      <summary>Adds the specified activity to the metadata’s list of child activities.</summary>
      <param name="child">The activity to add.</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.AddChild(System.Activities.Activity,System.Object)">
      <summary>Adds the specified activity to the metadata’s list of child activities.</summary>
      <param name="child">The activity to add.</param>
      <param name="origin">The origin of the activity.</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.AddDefaultExtensionProvider``1(System.Func{``0})">
      <summary>Adds the specified extension provider to the collection of default extension providers for the activity.</summary>
      <param name="extensionProvider">The function that returns the extension.</param>
      <typeparam name="T">The type of the extension provider.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.AddDelegate(System.Activities.ActivityDelegate)">
      <summary>Adds the specified delegate to the metadata’s list of delegates.</summary>
      <param name="activityDelegate">The delegate to add.</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.AddDelegate(System.Activities.ActivityDelegate,System.Object)">
      <summary>Adds the specified delegate to the metadata’s list of delegates.</summary>
      <param name="activityDelegate">The delegate to add.</param>
      <param name="origin">The origin of the delegate.</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.AddImplementationChild(System.Activities.Activity)">
      <summary>Adds the specified activity to the metadata’s list of implementation activities.</summary>
      <param name="implementationChild">The activity to add.</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.AddImplementationDelegate(System.Activities.ActivityDelegate)">
      <summary>Adds the specified delegate to the metadata’s list of implementation delegates.</summary>
      <param name="implementationDelegate">The delegate to add.</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.AddImplementationVariable(System.Activities.Variable)">
      <summary>Adds the specified variable to the metadata’s collection of implementation variables.</summary>
      <param name="implementationVariable">The variable to add.</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.AddImportedChild(System.Activities.Activity)">
      <summary>Adds the specified activity to the metadata’s list of imported child activities.</summary>
      <param name="importedChild">The activity to add.</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.AddImportedChild(System.Activities.Activity,System.Object)">
      <summary>Adds the specified activity to the metadata’s list of imported child activities.</summary>
      <param name="importedChild">The activity to add.</param>
      <param name="origin">The origin of the activity.</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.AddImportedDelegate(System.Activities.ActivityDelegate)">
      <summary>Adds the specified delegate to the metadata’s list of imported delegates.</summary>
      <param name="importedDelegate">The delegate to add.</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.AddImportedDelegate(System.Activities.ActivityDelegate,System.Object)">
      <summary>Adds the specified delegate to the metadata’s list of imported delegates.</summary>
      <param name="importedDelegate">The delegate to add.</param>
      <param name="origin">The origin of the delegate.</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.AddValidationError(System.Activities.Validation.ValidationError)">
      <summary>Adds the specified validation error to the metadata’s collection of validation errors.</summary>
      <param name="validationError">The validation error to add.</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.AddValidationError(System.String)">
      <summary>Adds a validation error to the metadata’s collection of validation errors using the specified description.</summary>
      <param name="validationErrorMessage">A message that describes the validation error.</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.AddVariable(System.Activities.Variable)">
      <summary>Adds the specified variable to the metadata’s collection of variables.</summary>
      <param name="variable">The variable to add.</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.AddVariable(System.Activities.Variable,System.Object)">
      <summary>Adds the specified variable to the metadata’s collection of variables.</summary>
      <param name="variable">The variable to add.</param>
      <param name="origin">The origin of the variable.</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.Bind(System.Activities.Argument,System.Activities.RuntimeArgument)">
      <summary>Binds the specified <see cref="T:System.Activities.Argument" /> to the specified <see cref="T:System.Activities.RuntimeArgument" />.</summary>
      <param name="binding">The <see cref="T:System.Activities.Argument" /> to bind.</param>
      <param name="argument">The <see cref="T:System.Activities.RuntimeArgument" /> to bind.</param>
    </member>
    <member name="P:System.Activities.NativeActivityMetadata.Environment">
      <summary>Gets the activity’s <see cref="T:System.Activities.LocationReferenceEnvironment" /> of arguments, variables, delegate arguments, or symbols introduced by a <see cref="T:System.Activities.Hosting.SymbolResolver" />.</summary>
      <returns>The activity’s location reference environment of arguments, variables, delegate arguments, or symbols introduced by a <see cref="T:System.Activities.Hosting.SymbolResolver" />.</returns>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to this metadata instance.</summary>
      <returns>true if the specified object is equal to this metadata instance; otherwise, false.</returns>
      <param name="obj">The object to compare.</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.GetArgumentsWithReflection">
      <summary>Returns a collection of arguments obtained by using reflection.</summary>
      <returns>A collection of arguments.</returns>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.GetChildrenWithReflection">
      <summary>Returns a collection of child activities using reflection.</summary>
      <returns>A collection of child activities.</returns>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.GetDelegatesWithReflection">
      <summary>Returns a collection of delegates using reflection.</summary>
      <returns>A collection of delegates.</returns>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.GetHashCode">
      <summary>Returns a unique identifier for this metadata instance.</summary>
      <returns>An integer that uniquely identifies this metadata instance.</returns>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.GetVariablesWithReflection">
      <summary>Returns a collection of variables using reflection.</summary>
      <returns>A collection of variables.</returns>
    </member>
    <member name="P:System.Activities.NativeActivityMetadata.HasViolations">
      <summary>Gets a value that indicates whether there are any validation errors in the metadata.</summary>
      <returns>true if validation errors are present; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.op_Equality(System.Activities.NativeActivityMetadata,System.Activities.NativeActivityMetadata)">
      <summary>Returns a value that indicates whether the two specified metadata instances are equal.</summary>
      <returns>true if the two items are equal; otherwise, false.</returns>
      <param name="left">The first item to compare.</param>
      <param name="right">The second item to compare.</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.op_Inequality(System.Activities.NativeActivityMetadata,System.Activities.NativeActivityMetadata)">
      <summary>Returns a value that indicates whether the two specified metadata instances are not equal.</summary>
      <returns>true if the two items are not equal; otherwise, false.</returns>
      <param name="left">The first item to compare.</param>
      <param name="right">The second item to compare.</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.RequireExtension``1">
      <summary>Specifies that the activity requires an extension of the specified generic type at runtime.</summary>
      <typeparam name="T">The type of the extension.</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.RequireExtension(System.Type)">
      <summary>Specifies that the activity requires an extension of the specified type at runtime.</summary>
      <param name="extensionType">The type of the extension.</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.SetArgumentsCollection(System.Collections.ObjectModel.Collection{System.Activities.RuntimeArgument})">
      <summary>Adds the specified collection of arguments to the activity’s arguments.</summary>
      <param name="arguments">The arguments to add.</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.SetChildrenCollection(System.Collections.ObjectModel.Collection{System.Activities.Activity})">
      <summary>Adds the specified collection as child activities of the activity.</summary>
      <param name="children">The activities to add.</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.SetDelegatesCollection(System.Collections.ObjectModel.Collection{System.Activities.ActivityDelegate})">
      <summary>Adds the specified collection as delegates of the activity.</summary>
      <param name="delegates">The delegates to add.</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.SetImplementationChildrenCollection(System.Collections.ObjectModel.Collection{System.Activities.Activity})">
      <summary>Adds the specified collection as implementation child activities of the activity.</summary>
      <param name="implementationChildren">The activities to add.</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.SetImplementationDelegatesCollection(System.Collections.ObjectModel.Collection{System.Activities.ActivityDelegate})">
      <summary>Adds the specified collection as implementation delegates of the activity.</summary>
      <param name="implementationDelegates">The delegates to add.</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.SetImplementationVariablesCollection(System.Collections.ObjectModel.Collection{System.Activities.Variable})">
      <summary>Adds the specified collection as implementation variables of the activity.</summary>
      <param name="implementationVariables">The delegates to add.</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.SetImportedChildrenCollection(System.Collections.ObjectModel.Collection{System.Activities.Activity})">
      <summary>Adds the specified collection as imported child activities of the activity.</summary>
      <param name="importedChildren">The activities to add.</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.SetImportedDelegatesCollection(System.Collections.ObjectModel.Collection{System.Activities.ActivityDelegate})">
      <summary>Adds the specified collection as imported delegates of the activity.</summary>
      <param name="importedDelegates">The delegates to add.</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.SetValidationErrorsCollection(System.Collections.ObjectModel.Collection{System.Activities.Validation.ValidationError})">
      <summary>Adds the specified collection of validation errors to the metadata’s collection of validation errors.</summary>
      <param name="validationErrors">The validation errors to add.</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.SetVariablesCollection(System.Collections.ObjectModel.Collection{System.Activities.Variable})">
      <summary>Adds the specified collection of variables to the activity’s variables.</summary>
      <param name="variables">The variables to add.</param>
    </member>
    <member name="T:System.Activities.NativeActivityTransactionContext">
      <summary>The execution context for a <see cref="T:System.Activities.NativeActivity" /> that needs to provide the runtime with a transaction.</summary>
    </member>
    <member name="M:System.Activities.NativeActivityTransactionContext.SetRuntimeTransaction(System.Transactions.Transaction)">
      <summary>Provides the runtime with the specified transaction.</summary>
      <param name="transaction">The transaction.</param>
    </member>
    <member name="T:System.Activities.NoPersistHandle">
      <summary>Manages the lifetime of a no-persist block.</summary>
    </member>
    <member name="M:System.Activities.NoPersistHandle.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.NoPersistHandle" /> class. </summary>
    </member>
    <member name="M:System.Activities.NoPersistHandle.Enter(System.Activities.NativeActivityContext)">
      <summary>Marks the beginning of the no-persist block.</summary>
      <param name="context">The current execution environment.</param>
    </member>
    <member name="M:System.Activities.NoPersistHandle.Exit(System.Activities.NativeActivityContext)">
      <summary>Marks the end of the no-persist block.</summary>
      <param name="context">The current execution environment.</param>
    </member>
    <member name="T:System.Activities.OutArgument">
      <summary>The abstract base class that represents a binding terminal that supports the flow of data out of an activity. </summary>
    </member>
    <member name="M:System.Activities.OutArgument.CreateReference(System.Activities.InOutArgument,System.String)">
      <summary>Creates a new <see cref="T:System.Activities.OutArgument" /> that references the specified target <see cref="T:System.Activities.InOutArgument" /> using the specified referenced argument name.</summary>
      <returns>A new out argument that references the specified target <see cref="T:System.Activities.InOutArgument" />.</returns>
      <param name="argumentToReference">The target in/out argument to reference.</param>
      <param name="referencedArgumentName">The name of the referenced argument.</param>
    </member>
    <member name="M:System.Activities.OutArgument.CreateReference(System.Activities.OutArgument,System.String)">
      <summary>Creates a new <see cref="T:System.Activities.OutArgument" /> that references the specified target <see cref="T:System.Activities.OutArgument" /> using the specified referenced argument name.</summary>
      <returns>A new out argument that references the specified target <see cref="T:System.Activities.OutArgument" />.</returns>
      <param name="argumentToReference">The target out argument to reference.</param>
      <param name="referencedArgumentName">The name of the referenced argument.</param>
    </member>
    <member name="T:System.Activities.OutArgument`1">
      <summary>A binding terminal that represents the flow of data out of an activity.</summary>
      <typeparam name="T">The data type of the <see cref="T:System.Activities.OutArgument`1" />.</typeparam>
    </member>
    <member name="M:System.Activities.OutArgument`1.#ctor">
      <summary>Initialize a new instance of the <see cref="T:System.Activities.OutArgument`1" /> class using default values.</summary>
    </member>
    <member name="M:System.Activities.OutArgument`1.#ctor(System.Activities.Activity{System.Activities.Location{`0}})">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.OutArgument`1" /> class using the specified <see cref="T:System.Activities.Activity`1" />.</summary>
      <param name="expression">The value of the argument.</param>
    </member>
    <member name="M:System.Activities.OutArgument`1.#ctor(System.Activities.DelegateArgument)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.OutArgument`1" /> class using the specified <see cref="T:System.Activities.DelegateArgument" />.</summary>
      <param name="delegateArgument">The value of the argument.</param>
    </member>
    <member name="M:System.Activities.OutArgument`1.#ctor(System.Activities.Variable)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.OutArgument`1" /> class using the specified <see cref="T:System.Activities.Variable" />.</summary>
      <param name="variable">The value of the argument.</param>
    </member>
    <member name="M:System.Activities.OutArgument`1.#ctor(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,`0}})">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.OutArgument`1" /> class using the specified expression.</summary>
      <param name="expression">The value of the argument.</param>
    </member>
    <member name="P:System.Activities.OutArgument`1.Expression">
      <summary>Gets an <see cref="T:System.Activities.Activity`1" /> that represents the value of this <see cref="T:System.Activities.OutArgument`1" />.</summary>
      <returns>An activity that represents the value of the argument.</returns>
    </member>
    <member name="M:System.Activities.OutArgument`1.FromDelegateArgument(System.Activities.DelegateArgument)">
      <summary>Initializes and returns a new <see cref="T:System.Activities.OutArgument`1" /> constructed using the specified <see cref="T:System.Activities.DelegateArgument" />.</summary>
      <returns>The new argument.</returns>
      <param name="delegateArgument">The value of the argument.</param>
    </member>
    <member name="M:System.Activities.OutArgument`1.FromExpression(System.Activities.Activity{System.Activities.Location{`0}})">
      <summary>Initializes and returns a new <see cref="T:System.Activities.OutArgument`1" /> constructed using the specified <see cref="T:System.Activities.Activity`1" />.</summary>
      <returns>The new argument.</returns>
      <param name="expression">The value of the argument,</param>
    </member>
    <member name="M:System.Activities.OutArgument`1.FromVariable(System.Activities.Variable)">
      <summary>Initializes and returns a new <see cref="T:System.Activities.OutArgument`1" /> constructed using the specified <see cref="T:System.Activities.Variable" />.</summary>
      <returns>The new argument.</returns>
      <param name="variable">The value of the argument.</param>
    </member>
    <member name="M:System.Activities.OutArgument`1.Get(System.Activities.ActivityContext)">
      <summary>Gets the value of the <see cref="T:System.Activities.OutArgument`1" /> using the specified activity context.</summary>
      <returns>The value of the argument.</returns>
      <param name="context">The current activity context.</param>
    </member>
    <member name="M:System.Activities.OutArgument`1.GetLocation(System.Activities.ActivityContext)">
      <summary>Gets the location of the value for the <see cref="T:System.Activities.OutArgument`1" />.</summary>
      <returns>A reference to the location where the value of the argument is stored.</returns>
      <param name="context">The activity context that contains the value of the variable.</param>
    </member>
    <member name="M:System.Activities.OutArgument`1.op_Implicit(System.Activities.Activity{System.Activities.Location{`0}})~System.Activities.OutArgument{`0}">
      <summary>Initializes and returns a new <see cref="T:System.Activities.OutArgument`1" /> constructed using the specified <see cref="T:System.Activities.Activity`1" />.</summary>
      <returns>The new argument.</returns>
      <param name="expression">The value of the argument,</param>
    </member>
    <member name="M:System.Activities.OutArgument`1.op_Implicit(System.Activities.DelegateArgument)~System.Activities.OutArgument{`0}">
      <summary>Initializes and returns a new <see cref="T:System.Activities.OutArgument`1" /> constructed using the specified <see cref="T:System.Activities.DelegateArgument" />.</summary>
      <returns>The new argument.</returns>
      <param name="delegateArgument">The value of the argument.</param>
    </member>
    <member name="M:System.Activities.OutArgument`1.op_Implicit(System.Activities.Variable)~System.Activities.OutArgument{`0}">
      <summary>Initializes and returns a new <see cref="T:System.Activities.OutArgument`1" /> constructed using the specified <see cref="T:System.Activities.Variable" />.</summary>
      <returns>The new argument.</returns>
      <param name="variable">The value of the argument.</param>
    </member>
    <member name="M:System.Activities.OutArgument`1.Set(System.Activities.ActivityContext,`0)">
      <summary>Sets the value of the <see cref="T:System.Activities.OutArgument`1" /> using the specified activity context.</summary>
      <param name="context">The current activity context.</param>
      <param name="value">The new value.</param>
    </member>
    <member name="T:System.Activities.OverloadGroupAttribute">
      <summary>Provides a method for indicating which combinations of arguments are valid in an activity.</summary>
    </member>
    <member name="M:System.Activities.OverloadGroupAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.OverloadGroupAttribute" /> class.</summary>
    </member>
    <member name="M:System.Activities.OverloadGroupAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.OverloadGroupAttribute" /> class.</summary>
      <param name="groupName">The name of the group of arguments.</param>
    </member>
    <member name="P:System.Activities.OverloadGroupAttribute.GroupName">
      <summary>Gets the name of the <see cref="T:System.Activities.OverloadGroupAttribute" />.</summary>
      <returns>The name of the group of related arguments.</returns>
    </member>
    <member name="P:System.Activities.OverloadGroupAttribute.TypeId">
      <summary>Gets a unique identifier for this attribute.</summary>
      <returns>A unique identifier for this attribute.</returns>
    </member>
    <member name="T:System.Activities.PersistableIdleAction">
      <summary>Specifies the action that occurs when a workflow becomes idle when persistence is allowed.</summary>
    </member>
    <member name="F:System.Activities.PersistableIdleAction.None">
      <summary>Specifies that no action is taken.</summary>
    </member>
    <member name="F:System.Activities.PersistableIdleAction.Persist">
      <summary>Specifies that the <see cref="T:System.Activities.WorkflowApplication" /> should persist the workflow.</summary>
    </member>
    <member name="F:System.Activities.PersistableIdleAction.Unload">
      <summary>Specifies that the <see cref="T:System.Activities.WorkflowApplication" /> should persist and unload the workflow.</summary>
    </member>
    <member name="T:System.Activities.RegistrationContext">
      <summary>Provides access to the current collection of workflow execution properties. </summary>
    </member>
    <member name="M:System.Activities.RegistrationContext.FindProperty(System.String)">
      <summary>Returns a workflow execution property with the specified name.</summary>
      <returns>The workflow execution property.</returns>
      <param name="name">The name of the workflow execution property.</param>
    </member>
    <member name="T:System.Activities.RequiredArgumentAttribute">
      <summary>Application element on which it is valid to apply an argument.0</summary>
    </member>
    <member name="M:System.Activities.RequiredArgumentAttribute.#ctor">
      <summary>Creates a new  instance of the <see cref="T:System.Activities.RequiredArgumentAttribute" /> class.</summary>
    </member>
    <member name="P:System.Activities.RequiredArgumentAttribute.TypeId">
      <summary>When implemented in a derived class, gets a unique identifier for this <see cref="T:System.Attribute" />.</summary>
      <returns>Returns <see cref="T:System.Object" />.</returns>
    </member>
    <member name="T:System.Activities.RuntimeArgument">
      <summary>Describes the characteristics of an argument of an activity to the runtime.</summary>
    </member>
    <member name="M:System.Activities.RuntimeArgument.#ctor(System.String,System.Type,System.Activities.ArgumentDirection)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.RuntimeArgument" /> class using a name, data type, and argument direction.</summary>
      <param name="name">The name of the <see cref="T:System.Activities.RuntimeArgument" />.</param>
      <param name="argumentType">The type of the <see cref="T:System.Activities.RuntimeArgument" />.</param>
      <param name="direction">The direction of data flow through an argument.</param>
    </member>
    <member name="M:System.Activities.RuntimeArgument.#ctor(System.String,System.Type,System.Activities.ArgumentDirection,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.RuntimeArgument" /> class using a name, data type, argument direction, and a value that indicates whether the <see cref="T:System.Activities.RuntimeArgument" /> is required to be bound to a value.</summary>
      <param name="name">The name of the <see cref="T:System.Activities.RuntimeArgument" />.</param>
      <param name="argumentType">The data type of the <see cref="T:System.Activities.RuntimeArgument" />.</param>
      <param name="direction">The direction of data flow through an argument.</param>
      <param name="isRequired">true to indicate that the <see cref="T:System.Activities.RuntimeArgument" /> is required to be bound to a value; otherwise false.</param>
    </member>
    <member name="M:System.Activities.RuntimeArgument.#ctor(System.String,System.Type,System.Activities.ArgumentDirection,System.Boolean,System.Collections.Generic.List{System.String})">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.RuntimeArgument" /> class with a name, data type, argument direction, whether the <see cref="T:System.Activities.RuntimeArgument" /> is required to be bound to a value, and a list of overload group names.</summary>
      <param name="name">The name of the <see cref="T:System.Activities.RuntimeArgument" />.</param>
      <param name="argumentType">The data type of the <see cref="T:System.Activities.RuntimeArgument" />.</param>
      <param name="direction">The direction of data flow through an argument.</param>
      <param name="isRequired">true to indicate that the <see cref="T:System.Activities.RuntimeArgument" /> is required to be bound to a value; otherwise false.</param>
      <param name="overloadGroupNames">The names of the overload groups that apply to this <see cref="T:System.Activities.RuntimeArgument" />.</param>
    </member>
    <member name="M:System.Activities.RuntimeArgument.#ctor(System.String,System.Type,System.Activities.ArgumentDirection,System.Collections.Generic.List{System.String})">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.RuntimeArgument" /> class using a name, data type, argument direction, and a list of overload group names.</summary>
      <param name="name">The name of the <see cref="T:System.Activities.RuntimeArgument" />.</param>
      <param name="argumentType">The data type of the <see cref="T:System.Activities.RuntimeArgument" />.</param>
      <param name="direction">The direction of data flow through an argument.</param>
      <param name="overloadGroupNames">The overload groups that apply to this <see cref="T:System.Activities.RuntimeArgument" />.</param>
    </member>
    <member name="P:System.Activities.RuntimeArgument.Direction">
      <summary>Gets the direction of the data flow through this <see cref="T:System.Activities.RuntimeArgument" />.</summary>
      <returns>The direction of data flow through an argument.</returns>
    </member>
    <member name="M:System.Activities.RuntimeArgument.Get(System.Activities.ActivityContext)">
      <summary>Gets the value of the <see cref="T:System.Activities.RuntimeArgument" /> using the specified activity context.</summary>
      <returns>The value of the <see cref="T:System.Activities.RuntimeArgument" />.</returns>
      <param name="context">The current activity context.</param>
    </member>
    <member name="M:System.Activities.RuntimeArgument.Get``1(System.Activities.ActivityContext)">
      <summary>Gets the strongly-typed value of the <see cref="T:System.Activities.RuntimeArgument" /> using the specified activity context.</summary>
      <returns>The value of the <see cref="T:System.Activities.RuntimeArgument" />.</returns>
      <param name="context">The current activity context.</param>
      <typeparam name="T">The return value type.</typeparam>
    </member>
    <member name="M:System.Activities.RuntimeArgument.GetLocation(System.Activities.ActivityContext)">
      <summary>Returns the <see cref="T:System.Activities.Location" /> for this <see cref="T:System.Activities.RuntimeArgument" />.</summary>
      <returns>The location of the <see cref="T:System.Activities.RuntimeArgument" />.</returns>
      <param name="context">The argument location.</param>
    </member>
    <member name="P:System.Activities.RuntimeArgument.IsRequired">
      <summary>Gets a value that indicates whether the <see cref="T:System.Activities.RuntimeArgument" /> is required to be bound to a value.</summary>
      <returns>true if the <see cref="T:System.Activities.RuntimeArgument" /> is required to be bound to a value; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.RuntimeArgument.OverloadGroupNames">
      <summary>Gets a list of the overload groups that this <see cref="T:System.Activities.RuntimeArgument" /> belongs to.</summary>
      <returns>A list of overload group names.</returns>
    </member>
    <member name="M:System.Activities.RuntimeArgument.Set(System.Activities.ActivityContext,System.Object)">
      <summary>Sets the value of the <see cref="T:System.Activities.RuntimeArgument" />.</summary>
      <param name="context">The current activity context.</param>
      <param name="value">The new value for the <see cref="T:System.Activities.RuntimeArgument" />.</param>
    </member>
    <member name="T:System.Activities.RuntimeDelegateArgument">
      <summary>Describes the characteristics of a <see cref="T:System.Activities.DelegateArgument" /> to the runtime.</summary>
    </member>
    <member name="M:System.Activities.RuntimeDelegateArgument.#ctor(System.String,System.Type,System.Activities.ArgumentDirection,System.Activities.DelegateArgument)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.RuntimeDelegateArgument" /> class using the specified name, data type, argument direction, and <see cref="T:System.Activities.DelegateArgument" />.</summary>
      <param name="name">The name of the <see cref="T:System.Activities.RuntimeDelegateArgument" />.</param>
      <param name="type">The data type of the <see cref="T:System.Activities.RuntimeDelegateArgument" />.</param>
      <param name="direction">One of the enumeration values that specifies the direction of data flow through an argument.</param>
      <param name="boundArgument">The delegate argument that is represented by this <see cref="T:System.Activities.RuntimeDelegateArgument" />.</param>
    </member>
    <member name="P:System.Activities.RuntimeDelegateArgument.BoundArgument">
      <summary>Gets the <see cref="T:System.Activities.DelegateArgument" /> that is represented by this <see cref="T:System.Activities.RuntimeDelegateArgument" />.</summary>
      <returns>The bound argument represented by this <see cref="T:System.Activities.RuntimeDelegateArgument" />.</returns>
    </member>
    <member name="P:System.Activities.RuntimeDelegateArgument.Direction">
      <summary>Gets the direction of data flow through the <see cref="T:System.Activities.RuntimeDelegateArgument" />.</summary>
      <returns>One of the enumeration values that specifies the direction of data flow through an argument. </returns>
    </member>
    <member name="P:System.Activities.RuntimeDelegateArgument.Name">
      <summary>Gets the name of the <see cref="T:System.Activities.RuntimeDelegateArgument" />.</summary>
      <returns>The name of the <see cref="T:System.Activities.RuntimeDelegateArgument" />.</returns>
    </member>
    <member name="P:System.Activities.RuntimeDelegateArgument.Type">
      <summary>Gets the data type of the <see cref="T:System.Activities.RuntimeDelegateArgument" />.</summary>
      <returns>The data type of the <see cref="T:System.Activities.RuntimeDelegateArgument" />.</returns>
    </member>
    <member name="T:System.Activities.RuntimeTransactionHandle">
      <summary>Provides access to the run-time transaction in a workflow instance.</summary>
    </member>
    <member name="M:System.Activities.RuntimeTransactionHandle.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.RuntimeTransactionHandle" /> class. </summary>
    </member>
    <member name="M:System.Activities.RuntimeTransactionHandle.#ctor(System.Transactions.Transaction)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.RuntimeTransactionHandle" /> class using the specified root transaction.</summary>
      <param name="rootTransaction">The root transaction.</param>
    </member>
    <member name="P:System.Activities.RuntimeTransactionHandle.AbortInstanceOnTransactionFailure">
      <summary>Gets or sets whether the workflow instance should be aborted if the transaction fails.</summary>
      <returns>true if the workflow instance should be aborted if the transaction fails; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.RuntimeTransactionHandle.CompleteTransaction(System.Activities.NativeActivityContext)">
      <summary>Completes the current run-time transaction.</summary>
      <param name="context">The current execution environment.</param>
    </member>
    <member name="M:System.Activities.RuntimeTransactionHandle.CompleteTransaction(System.Activities.NativeActivityContext,System.Activities.BookmarkCallback)">
      <summary>Completes the current run-time transaction and schedules the bookmark callback when the transaction is complete.</summary>
      <param name="context">The current execution environment.</param>
      <param name="callback">The bookmark callback to be invoked when the transaction completes.</param>
    </member>
    <member name="M:System.Activities.RuntimeTransactionHandle.GetCurrentTransaction(System.Activities.AsyncCodeActivityContext)">
      <summary>Returns a reference to the current run-time transaction.</summary>
      <returns>The current transaction.</returns>
      <param name="context">The current execution environment.</param>
    </member>
    <member name="M:System.Activities.RuntimeTransactionHandle.GetCurrentTransaction(System.Activities.CodeActivityContext)">
      <summary>Returns a reference to the current run-time transaction.</summary>
      <returns>The current transaction.</returns>
      <param name="context">The current execution environment.</param>
    </member>
    <member name="M:System.Activities.RuntimeTransactionHandle.GetCurrentTransaction(System.Activities.NativeActivityContext)">
      <summary>Returns a reference to the current run-time transaction.</summary>
      <returns>The current run-time transaction.</returns>
      <param name="context">The current execution environment.</param>
    </member>
    <member name="M:System.Activities.RuntimeTransactionHandle.RequestTransactionContext(System.Activities.NativeActivityContext,System.Action{System.Activities.NativeActivityTransactionContext,System.Object},System.Object)">
      <summary>Initiates the creation of a <see cref="T:System.Activities.NativeActivityTransactionContext" /> for use with a new transaction.</summary>
      <param name="context">The current execution environment.</param>
      <param name="callback">The method to be called when the <see cref="T:System.Activities.NativeActivityTransactionContext" /> is created.</param>
      <param name="state">An optional user-provided state that contains information about the request.</param>
    </member>
    <member name="M:System.Activities.RuntimeTransactionHandle.RequireTransactionContext(System.Activities.NativeActivityContext,System.Action{System.Activities.NativeActivityTransactionContext,System.Object},System.Object)">
      <summary>Initiates the creation of a <see cref="T:System.Activities.NativeActivityTransactionContext" /> for use with an existing transaction.</summary>
      <param name="context">The current execution environment.</param>
      <param name="callback">The method to be called when the <see cref="T:System.Activities.NativeActivityTransactionContext" /> is created.</param>
      <param name="state">An optional user-provided state that contains information about the request.</param>
    </member>
    <member name="P:System.Activities.RuntimeTransactionHandle.SuppressTransaction">
      <summary>Gets or sets a value that indicates whether this run-time transaction is suppressed.</summary>
      <returns>true if the run-time transaction is suppressed; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.RuntimeTransactionHandle.System#Activities#IExecutionProperty#CleanupWorkflowThread">
      <summary>For a description of this member, see <see cref="M:System.Activities.IExecutionProperty.CleanupWorkflowThread" />.</summary>
    </member>
    <member name="M:System.Activities.RuntimeTransactionHandle.System#Activities#IExecutionProperty#SetupWorkflowThread">
      <summary>For a description of this member, see <see cref="M:System.Activities.IExecutionProperty.SetupWorkflowThread" />.</summary>
    </member>
    <member name="M:System.Activities.RuntimeTransactionHandle.System#Activities#IPropertyRegistrationCallback#Register(System.Activities.RegistrationContext)">
      <summary>For a description of this member, see <see cref="M:System.Activities.IPropertyRegistrationCallback.Register(System.Activities.RegistrationContext)" />.</summary>
      <param name="context">For a description of this parameter, see <see cref="M:System.Activities.IPropertyRegistrationCallback.Register(System.Activities.RegistrationContext)" />.</param>
    </member>
    <member name="M:System.Activities.RuntimeTransactionHandle.System#Activities#IPropertyRegistrationCallback#Unregister(System.Activities.RegistrationContext)">
      <summary>For a description of this member, see <see cref="M:System.Activities.IPropertyRegistrationCallback.UnRegister(System.Activities.RegistrationContext)" />.</summary>
      <param name="context">For a description of this parameter, see <see cref="M:System.Activities.IPropertyRegistrationCallback.UnRegister(System.Activities.RegistrationContext)" />.</param>
    </member>
    <member name="T:System.Activities.UnhandledExceptionAction">
      <summary>Specifies the action that occurs when an exception escapes the root of a workflow.</summary>
    </member>
    <member name="F:System.Activities.UnhandledExceptionAction.Abort">
      <summary>Specifies that the <see cref="T:System.Activities.WorkflowApplication" /> should abort the workflow.</summary>
    </member>
    <member name="F:System.Activities.UnhandledExceptionAction.Cancel">
      <summary>Specifies that the <see cref="T:System.Activities.WorkflowApplication" /> should schedule the cancellation of the root activity and resume execution. </summary>
    </member>
    <member name="F:System.Activities.UnhandledExceptionAction.Terminate">
      <summary>Specifies that the <see cref="T:System.Activities.WorkflowApplication" /> should schedule termination of the root activity and resume execution.</summary>
    </member>
    <member name="T:System.Activities.ValidationException">
      <summary>The exception that is thrown when a workflow or activity is in an invalid state. </summary>
    </member>
    <member name="M:System.Activities.ValidationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.ValidationException" /> class using default values.</summary>
    </member>
    <member name="M:System.Activities.ValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.ValidationException" /> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination. </param>
    </member>
    <member name="M:System.Activities.ValidationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.ValidationException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.Activities.ValidationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.ValidationException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="T:System.Activities.Variable">
      <summary>The abstract base class from which the workflow data member support class <see cref="T:System.Activities.Variable`1" /> derives.</summary>
    </member>
    <member name="M:System.Activities.Variable.Create(System.String,System.Type,System.Activities.VariableModifiers)">
      <summary>Initializes and returns new instance of the <see cref="T:System.Activities.Variable" /> class.</summary>
      <returns>The new variable. </returns>
      <param name="name">The name for the <see cref="T:System.Activities.Variable" />.</param>
      <param name="type">The type for the <see cref="T:System.Activities.Variable" />.</param>
      <param name="modifiers">The configuration options for the <see cref="T:System.Activities.Variable" />.</param>
    </member>
    <member name="P:System.Activities.Variable.Default">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityWithResult" /> that represents the default value for this <see cref="T:System.Activities.Variable" />.</summary>
      <returns>The default value for this <see cref="T:System.Activities.Variable" />.</returns>
    </member>
    <member name="M:System.Activities.Variable.Get(System.Activities.ActivityContext)">
      <summary>Gets the value of the <see cref="T:System.Activities.Variable" /> using the specified <see cref="T:System.Activities.ActivityContext" />.</summary>
      <returns>The value of the <see cref="T:System.Activities.Variable" />.</returns>
      <param name="context">The current execution context.</param>
    </member>
    <member name="M:System.Activities.Variable.GetLocation(System.Activities.ActivityContext)">
      <summary>Gets the <see cref="T:System.Activities.Location" /> for this <see cref="T:System.Activities.Variable" />.</summary>
      <returns>The location for this <see cref="T:System.Activities.Variable" />.</returns>
      <param name="context">The activity context of the executing activity.</param>
    </member>
    <member name="P:System.Activities.Variable.Modifiers">
      <summary>Gets or sets the <see cref="T:System.Activities.VariableModifiers" /> value for this <see cref="T:System.Activities.Variable" />.</summary>
      <returns>The variable modifier value for this <see cref="T:System.Activities.Variable" />.</returns>
    </member>
    <member name="P:System.Activities.Variable.Name">
      <summary>Gets or sets the name of the <see cref="T:System.Activities.Variable" />.</summary>
      <returns>The name of the <see cref="T:System.Activities.Variable" />.</returns>
    </member>
    <member name="P:System.Activities.Variable.NameCore">
      <summary>Gets the name of the <see cref="T:System.Activities.Variable" />.</summary>
      <returns>The name of the <see cref="T:System.Activities.Variable" />.</returns>
    </member>
    <member name="M:System.Activities.Variable.Set(System.Activities.ActivityContext,System.Object)">
      <summary>Sets the value of the <see cref="T:System.Activities.Variable" /> using the specified <see cref="T:System.Activities.ActivityContext" />.</summary>
      <param name="context">The current execution context.</param>
      <param name="value">The new value.</param>
    </member>
    <member name="T:System.Activities.Variable`1">
      <summary>Represents a variable in a workflow.</summary>
      <typeparam name="T">The <see cref="T:System.Type" /> of the <see cref="T:System.Activities.Variable`1" />.</typeparam>
    </member>
    <member name="M:System.Activities.Variable`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Variable`1" /> class.</summary>
    </member>
    <member name="M:System.Activities.Variable`1.#ctor(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,`0}})">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Variable`1" /> class with the default expression.</summary>
      <param name="defaultExpression">The default expression.</param>
    </member>
    <member name="M:System.Activities.Variable`1.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Variable`1" /> class with the variable name.</summary>
      <param name="name">The variable name.</param>
    </member>
    <member name="M:System.Activities.Variable`1.#ctor(System.String,System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,`0}})">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Variable`1" /> class with the variable name and default expression.</summary>
      <param name="name">The variable name.</param>
      <param name="defaultExpression">The default expression.</param>
    </member>
    <member name="M:System.Activities.Variable`1.#ctor(System.String,`0)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Variable`1" /> class with the variable name and default value.</summary>
      <param name="name">The variable name.</param>
      <param name="defaultValue">The default value.</param>
    </member>
    <member name="P:System.Activities.Variable`1.Default">
      <summary>Gets or sets the <see cref="T:System.Activities.Activity`1" /> that represents the default value for this <see cref="T:System.Activities.Variable`1" />.</summary>
      <returns>The default value for this <see cref="T:System.Activities.Variable`1" />.</returns>
    </member>
    <member name="M:System.Activities.Variable`1.Get(System.Activities.ActivityContext)">
      <summary>Gets the value of the variable using the specified <see cref="T:System.Activities.ActivityContext" />.</summary>
      <returns>The value of the variable.</returns>
      <param name="context">The activity context of the executing activity.</param>
    </member>
    <member name="M:System.Activities.Variable`1.GetLocation(System.Activities.ActivityContext)">
      <summary>Returns the <see cref="T:System.Activities.Location`1" /> of the variable.</summary>
      <returns>The location of the variable.</returns>
      <param name="context">The activity context that contains the location of the variable.</param>
    </member>
    <member name="M:System.Activities.Variable`1.Set(System.Activities.ActivityContext,`0)">
      <summary>Sets the value of the variable.</summary>
      <param name="context">The activity context of the executing activity.</param>
      <param name="value">The value of the variable.</param>
    </member>
    <member name="T:System.Activities.VariableModifiers">
      <summary>Specifies the way the workflow runtime treats <see cref="T:System.Activities.Variable" /> objects.</summary>
    </member>
    <member name="F:System.Activities.VariableModifiers.Mapped">
      <summary>The <see cref="T:System.Activities.Variable" /> is mapped for persistence.</summary>
    </member>
    <member name="F:System.Activities.VariableModifiers.None">
      <summary>No modifiers are specified for the <see cref="T:System.Activities.Variable" />.</summary>
    </member>
    <member name="F:System.Activities.VariableModifiers.ReadOnly">
      <summary>The value for the <see cref="T:System.Activities.Variable" /> cannot be changed.</summary>
    </member>
    <member name="T:System.Activities.VersionMismatchException">
      <summary>Specifies information about a version mismatch exception.</summary>
    </member>
    <member name="M:System.Activities.VersionMismatchException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.VersionMismatchException" /> class.</summary>
    </member>
    <member name="M:System.Activities.VersionMismatchException.#ctor(System.Activities.WorkflowIdentity,System.Activities.WorkflowIdentity)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.VersionMismatchException" /> class using expected version and actual version.</summary>
      <param name="expectedVersion">The version that is expected.</param>
      <param name="actualVersion">Actual version from the file.</param>
    </member>
    <member name="M:System.Activities.VersionMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.VersionMismatchException" /> class using info and context.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Activities.VersionMismatchException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.VersionMismatchException" /> class using a message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.Activities.VersionMismatchException.#ctor(System.String,System.Activities.WorkflowIdentity,System.Activities.WorkflowIdentity)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.VersionMismatchException" /> class using the message, expected version and actual version.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="expectedVersion">The version that is expected.</param>
      <param name="actualVersion">Actual version from the file.</param>
    </member>
    <member name="M:System.Activities.VersionMismatchException.#ctor(System.String,System.Activities.WorkflowIdentity,System.Activities.WorkflowIdentity,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.VersionMismatchException" /> class.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="expectedVersion">The version that is expected.</param>
      <param name="actualVersion">Actual version from the file.</param>
      <param name="innerException">The exception that is the cause of the current exception.</param>
    </member>
    <member name="M:System.Activities.VersionMismatchException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.VersionMismatchException" /> class.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception.</param>
    </member>
    <member name="P:System.Activities.VersionMismatchException.ActualVersion">
      <summary>Gets or sets the actual version from the mismatch exception.</summary>
      <returns>The actual version from the mismatch exception.</returns>
    </member>
    <member name="P:System.Activities.VersionMismatchException.ExpectedVersion">
      <summary>Gets or sets the version of mismatch exception that is expected.</summary>
      <returns>The version of mismatch exception that is expected.</returns>
    </member>
    <member name="M:System.Activities.VersionMismatchException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the SerializationInfo with information about the exception.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
    </member>
    <member name="T:System.Activities.WorkflowApplication">
      <summary>Provides a host for a single instance of a workflow.</summary>
    </member>
    <member name="M:System.Activities.WorkflowApplication.#ctor(System.Activities.Activity)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplication" /> class with the specified workflow definition.</summary>
      <param name="workflowDefinition">The workflow definition.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.#ctor(System.Activities.Activity,System.Activities.WorkflowIdentity)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplication" /> class with the specified workflow definition and definition identity.</summary>
      <param name="workflowDefinition">The workflow definition.</param>
      <param name="definitionIdentity">The definition identity.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.#ctor(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplication" /> class that uses the specified workflow definition and argument values.</summary>
      <param name="workflowDefinition">The workflow definition.</param>
      <param name="inputs">The values for arguments defined on the root activity of the workflow definition, keyed by argument name.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.#ctor(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.Activities.WorkflowIdentity)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplication" /> class that uses the specified workflow definition and argument values, and definition identity.</summary>
      <param name="workflowDefinition">The workflow definition.</param>
      <param name="inputs">The definition identity.</param>
      <param name="definitionIdentity">The values for arguments defined on the root activity of the workflow definition, keyed by argument name.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.Abort">
      <summary>Notifies the workflow runtime that this workflow instance should abort.</summary>
    </member>
    <member name="M:System.Activities.WorkflowApplication.Abort(System.String)">
      <summary>Notifies the workflow runtime that this workflow instance should abort for the specified reason.</summary>
      <param name="reason">The reason for the request to abort.</param>
    </member>
    <member name="P:System.Activities.WorkflowApplication.Aborted">
      <summary>Gets or sets the <see cref="T:System.Action`1" /> that is invoked when the workflow instance is aborted.</summary>
      <returns>The action that is invoked when the workflow instance is aborted.</returns>
    </member>
    <member name="M:System.Activities.WorkflowApplication.AddInitialInstanceValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object})">
      <summary>Specifies instance metadata values that are included with the first persistence of a new instance.</summary>
      <param name="writeOnlyValues">The metadata values to be included with the first persistence.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginCancel(System.AsyncCallback,System.Object)">
      <summary>Cancels a workflow instance asynchronously using the specified <see cref="T:System.AsyncCallback" /> and user-provided state.</summary>
      <returns>A reference to the asynchronous cancel operation.</returns>
      <param name="callback">The method to be called when the cancel operation has completed.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginCancel(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Cancels a workflow instance asynchronously using the specified time-out interval, <see cref="T:System.AsyncCallback" />, and user-provided state.</summary>
      <returns>A reference to the asynchronous cancel operation.</returns>
      <param name="timeout">The interval in which the cancel operation must complete before the operation is canceled and a <see cref="T:System.TimeoutException" /> is thrown.</param>
      <param name="callback">The method to be called when the cancel operation has completed.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginCreateDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore,System.Activities.WorkflowIdentity,System.Activities.WorkflowIdentityFilter,System.AsyncCallback,System.Object)">
      <summary>Creates a default instance owner asynchronously using the <see cref="T:System.IAsyncResult" /> asynchronous design pattern with specified instance store, definition identity, identity filter, callback and state.</summary>
      <returns>A reference to the asynchronous operation.</returns>
      <param name="instanceStore">The access to the persisted state of the current instance of the workflow application.</param>
      <param name="definitionIdentity">The definition identity.</param>
      <param name="identityFilter">The identity filter.</param>
      <param name="callback">The method to be called when the begin load operation has completed.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginCreateDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore,System.Activities.WorkflowIdentity,System.Activities.WorkflowIdentityFilter,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Creates a default instance owner asynchronously using the <see cref="T:System.IAsyncResult" /> asynchronous design pattern with specified instance store, definition identity, identity filter, timeout interval, callback and state.</summary>
      <returns>A reference to the asynchronous operation.</returns>
      <param name="instanceStore">The access to the persisted state of the current instance of the workflow application.</param>
      <param name="definitionIdentity">The definition identity.</param>
      <param name="identityFilter">The identity filter.</param>
      <param name="timeout">The interval in which the begin load operation must complete before the operation is canceled and a <see cref="T:System.TimeoutException" /> is thrown.</param>
      <param name="callback">The method to be called when the begin load operation has completed.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginDeleteDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore,System.AsyncCallback,System.Object)">
      <summary>Deletes a default instance owner asynchronously using the <see cref="T:System.IAsyncResult" /> asynchronous design pattern with specified instance store, callback, and state.</summary>
      <returns>A reference to the asynchronous operation.</returns>
      <param name="instanceStore">The access to the persisted state of the current instance of the workflow application.</param>
      <param name="callback">The method to be called when the begin load operation has completed.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginDeleteDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Deletes a default instance owner asynchronously using the <see cref="T:System.IAsyncResult" /> asynchronous design pattern with specified instance store, timeout interval, callback, and state.</summary>
      <returns>A reference to the asynchronous operation.</returns>
      <param name="instanceStore">The access to the persisted state of the current instance of the workflow application.</param>
      <param name="timeout">The interval in which the begin load operation must complete before the operation is canceled and a <see cref="T:System.TimeoutException" /> is thrown.</param>
      <param name="callback">The method to be called when the begin load operation has completed.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginGetInstance(System.Guid,System.Runtime.DurableInstancing.InstanceStore,System.AsyncCallback,System.Object)">
      <summary>Retrieves an instance owner asynchronously using the <see cref="T:System.IAsyncResult" /> asynchronous design pattern with specified instance identifier, instance store, callback, and state.</summary>
      <returns>A reference to the asynchronous operation.</returns>
      <param name="instanceId">The instance identifier.</param>
      <param name="instanceStore">The access to the persisted state of the current instance of the workflow application.</param>
      <param name="callback">The method to be called when the begin load operation has completed.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginGetInstance(System.Guid,System.Runtime.DurableInstancing.InstanceStore,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Retrieves an instance owner asynchronously using the <see cref="T:System.IAsyncResult" /> asynchronous design pattern with specified instance identifier, instance store, timeout interval, callback, and state.</summary>
      <returns>A reference to the asynchronous operation.</returns>
      <param name="instanceId">The instance identifier.</param>
      <param name="instanceStore">The access to the persisted state of the current instance of the workflow application.</param>
      <param name="timeout">The interval in which the begin load operation must complete before the operation is canceled and a <see cref="T:System.TimeoutException" /> is thrown.</param>
      <param name="callback">The method to be called when the begin load operation has completed.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginGetRunnableInstance(System.Runtime.DurableInstancing.InstanceStore,System.AsyncCallback,System.Object)">
      <summary>Retrieves a runnable instance owner asynchronously using the <see cref="T:System.IAsyncResult" /> asynchronous design pattern with specified instance store, callback, and state.</summary>
      <returns>A reference to the asynchronous operation.</returns>
      <param name="instanceStore">The access to the persisted state of the current instance of the workflow application.</param>
      <param name="callback">The method to be called when the begin load operation has completed.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginGetRunnableInstance(System.Runtime.DurableInstancing.InstanceStore,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Retrieves a runnable instance owner asynchronously using the <see cref="T:System.IAsyncResult" /> asynchronous design pattern with specified instance store, timeout interval, callback, and state.</summary>
      <returns>A reference to the asynchronous operation.</returns>
      <param name="instanceStore">The access to the persisted state of the current instance of the workflow application.</param>
      <param name="timeout">The interval in which the begin load operation must complete before the operation is canceled and a <see cref="T:System.TimeoutException" /> is thrown.</param>
      <param name="callback">The method to be called when the begin load operation has completed.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginLoad(System.Activities.WorkflowApplicationInstance,System.Activities.DynamicUpdate.DynamicUpdateMap,System.AsyncCallback,System.Object)">
      <summary>Loads a workflow asynchronously from an instance store using the <see cref="T:System.IAsyncResult" /> asynchronous design pattern with specified instance, update map, callback and state.</summary>
      <returns>A reference to the asynchronous operation.</returns>
      <param name="instance">The instance.</param>
      <param name="updateMap">The update map.</param>
      <param name="callback">The method to be called when the begin load operation has completed.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginLoad(System.Activities.WorkflowApplicationInstance,System.Activities.DynamicUpdate.DynamicUpdateMap,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Loads a workflow asynchronously from an instance store using the <see cref="T:System.IAsyncResult" /> asynchronous design pattern with specified instance, update map, timeout interval, callback and state.</summary>
      <returns>A reference to the asynchronous operation.</returns>
      <param name="instance">The instance.</param>
      <param name="updateMap">The update map.</param>
      <param name="timeout">The interval in which the begin load operation must complete before the operation is canceled and a <see cref="T:System.TimeoutException" /> is thrown.</param>
      <param name="callback">The method to be called when the begin load operation has completed.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginLoad(System.Activities.WorkflowApplicationInstance,System.AsyncCallback,System.Object)">
      <summary>Loads a workflow asynchronously from an instance store using the <see cref="T:System.IAsyncResult" /> asynchronous design pattern with specified instance, callback and state.</summary>
      <returns>A reference to the asynchronous operation.</returns>
      <param name="instance">The instance.</param>
      <param name="callback">The method to be called when the begin load operation has completed.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginLoad(System.Activities.WorkflowApplicationInstance,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Loads a workflow asynchronously from an instance store using the <see cref="T:System.IAsyncResult" /> asynchronous design pattern with specified instance, timeout interval, callback and state.</summary>
      <returns>A reference to the asynchronous operation.</returns>
      <param name="instance">The instance.</param>
      <param name="timeout">The interval in which the begin load operation must complete before the operation is canceled and a <see cref="T:System.TimeoutException" /> is thrown.</param>
      <param name="callback">The method to be called when the begin load operation has completed.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginLoad(System.Guid,System.AsyncCallback,System.Object)">
      <summary>Loads a workflow asynchronously from an instance store using the specified instance identifier, callback method, and user-provided state.</summary>
      <returns>The status of an asynchronous operation.</returns>
      <param name="instanceId">A globally unique 128-bit identifier for the workflow instance.</param>
      <param name="callback">The method to be called when the begin load operation has completed.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginLoad(System.Guid,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Loads a workflow asynchronously from an instance store using the specified instance identifier, timeout period, callback method, and user-provided state.</summary>
      <returns>The status of an asynchronous operation.</returns>
      <param name="instanceId">A globally unique 128-bit identifier for the workflow instance.</param>
      <param name="timeout">The interval in which the begin load operation must complete before the operation is canceled and a <see cref="T:System.TimeoutException" /> is thrown.</param>
      <param name="callback">The method to be called when the begin load operation has completed.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginLoadRunnableInstance(System.AsyncCallback,System.Object)">
      <summary>Initiates an operation to load a runnable workflow instance from the <see cref="P:System.Activities.WorkflowApplication.InstanceStore" />.</summary>
      <returns>A reference to the asynchronous operation</returns>
      <param name="callback">The method to be called when the operation is complete.</param>
      <param name="state">An optional application-specific object containing information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginLoadRunnableInstance(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Initiates an operation to load a runnable workflow instance from the <see cref="P:System.Activities.WorkflowApplication.InstanceStore" /> using the specified time-out interval.</summary>
      <returns>A reference to the asynchronous operation</returns>
      <param name="timeout">The interval in which the load operation must complete before the operation is canceled and a <see cref="T:System.TimeoutException" /> is thrown.</param>
      <param name="callback">The method to be called when the operation is complete.</param>
      <param name="state">An optional application-specific object containing information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginPersist(System.AsyncCallback,System.Object)">
      <summary>Persists a workflow instance to an instance store asynchronously using the specified callback method and user-provided state.</summary>
      <returns>A reference to the asynchronous persist operation.</returns>
      <param name="callback">The method to be called when the persist operation has completed.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginPersist(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Persists a workflow instance to an instance store asynchronously using the specified time-out interval, callback method, and user-provided state.</summary>
      <returns>A reference to the asynchronous persist operation.</returns>
      <param name="timeout">The interval in which the persist operation must complete before the operation is canceled and a <see cref="T:System.TimeoutException" /> is thrown.</param>
      <param name="callback">The method to be called when the persist operation has completed.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginResumeBookmark(System.Activities.Bookmark,System.Object,System.AsyncCallback,System.Object)">
      <summary>Initiates an operation to resume a bookmark using the specified value, callback method, and state.</summary>
      <returns>A reference to the asynchronous bookmark resume operation.</returns>
      <param name="bookmark">The bookmark to resume.</param>
      <param name="value">An object passed as a parameter to the method that is invoked when the bookmark resumes.</param>
      <param name="callback">The method to be called when the resume operation has completed.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginResumeBookmark(System.Activities.Bookmark,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Initiates an operation to resume a bookmark using the specified value, time-out interval, callback method, and state.</summary>
      <returns>A reference to the asynchronous bookmark resume operation.</returns>
      <param name="bookmark">The bookmark to resume.</param>
      <param name="value">An object passed as a parameter to the method that is invoked when the bookmark resumes.</param>
      <param name="timeout">The interval in which the resume operation must complete before the operation is canceled and a <see cref="T:System.TimeoutException" /> is thrown.</param>
      <param name="callback">The method to be called when the resume operation has completed.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginResumeBookmark(System.String,System.Object,System.AsyncCallback,System.Object)">
      <summary>Initiates an asynchronous operation to resume the bookmark with the specified name, using the specified value, callback method, and state. The bookmark to be resumed is previously created by an activity within the workflow instance.</summary>
      <returns>The result of the bookmark resumption operation.</returns>
      <param name="bookmarkName">The name of the bookmark to be resumed.</param>
      <param name="value">An object passed as a parameter to the method that is invoked when the bookmark resumes.</param>
      <param name="callback">The method that is called when the asynchronous operation completes.</param>
      <param name="state">The state of execution of a workflow that was preserved by the calling thread before an asynchronous operation began.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginResumeBookmark(System.String,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Initiates an asynchronous operation to resume the bookmark with the specified name, using the specified value, time-out interval, callback method, and state. The bookmark to be resumed is previously created by an activity within the workflow instance.</summary>
      <returns>The result of the bookmark resumption operation.</returns>
      <param name="bookmarkName">The name of the bookmark to be resumed.</param>
      <param name="value">An object passed as a parameter to the method that is invoked when the bookmark resumes.</param>
      <param name="timeout">The time interval during which the bookmark must be resumed.</param>
      <param name="callback">The method that is called when the asynchronous operation completes.</param>
      <param name="state">The state of execution of a workflow that was saved by the calling thread before an asynchronous operation began.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginRun(System.AsyncCallback,System.Object)">
      <summary>Starts or resumes a workflow instance asynchronously using the specified callback method and user-provided state.</summary>
      <returns>A reference to the asynchronous run operation.</returns>
      <param name="callback">The method to be called when the resume operation has completed.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginRun(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Starts or resumes a workflow instance asynchronously using the specified time-out interval, callback method, and user-provided state.</summary>
      <returns>A reference to the asynchronous run operation.</returns>
      <param name="timeout">The interval in which the resume operation must complete before the operation is canceled and a <see cref="T:System.TimeoutException" /> is thrown.</param>
      <param name="callback">The method to be called when the resume operation has completed.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginTerminate(System.Exception,System.AsyncCallback,System.Object)">
      <summary>Terminates a workflow instance asynchronously using the specified exception, callback method, and user-provided state.</summary>
      <returns>A reference to the current <see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /> operation.</returns>
      <param name="reason">The reason the workflow instance is terminated.</param>
      <param name="callback">The method to be called when the <see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /> operation has completed.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginTerminate(System.Exception,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Terminates a workflow instance asynchronously using the specified exception, time-out interval, callback method, and user-provided state.</summary>
      <returns>A reference to the current <see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /> operation.</returns>
      <param name="reason">The reason for terminating the workflow instance.</param>
      <param name="timeout">The interval in which the <see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /> operation must complete before the operation is canceled and a <see cref="T:System.TimeoutException" /> is thrown.</param>
      <param name="callback">The method to be called when the <see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /> operation has completed.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginTerminate(System.String,System.AsyncCallback,System.Object)">
      <summary>Terminates a workflow instance asynchronously using the specified error message, callback method, and user-provided state.</summary>
      <returns>A reference to the current <see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /> operation.</returns>
      <param name="reason">The reason for terminating the workflow instance.</param>
      <param name="callback">The method to be called when the <see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /> operation has completed.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginTerminate(System.String,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Terminates a workflow instance asynchronously using the specified error message, time-out interval, callback method, and user-provided state.</summary>
      <returns>A reference to the asynchronous <see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /> operation.</returns>
      <param name="reason">The reason for terminating the workflow instance.</param>
      <param name="timeout">The interval in which the <see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /> operation must complete before the operation is canceled and a <see cref="T:System.TimeoutException" /> is thrown.</param>
      <param name="callback">The method to be called when the <see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /> operation has completed.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginUnload(System.AsyncCallback,System.Object)">
      <summary>Persists and disposes a workflow instance asynchronously using the specified callback method and user-provided state.</summary>
      <returns>A reference to the asynchronous <see cref="Overload:System.Activities.WorkflowApplication.BeginUnload" /> operation.</returns>
      <param name="callback">The method to be called when the <see cref="Overload:System.Activities.WorkflowApplication.BeginUnload" /> operation has completed.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginUnload(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Persists and disposes a workflow instance asynchronously using the specified time-out interval, callback method, and user-provided state.</summary>
      <returns>A reference to the asynchronous <see cref="Overload:System.Activities.WorkflowApplication.BeginUnload" /> operation.</returns>
      <param name="timeout">The interval in which the <see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /> operation must complete before the operation is canceled and a <see cref="T:System.TimeoutException" /> is thrown.</param>
      <param name="callback">The method to be called when the <see cref="Overload:System.Activities.WorkflowApplication.BeginUnload" /> operation has completed.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.Cancel">
      <summary>Cancels the workflow instance.</summary>
    </member>
    <member name="M:System.Activities.WorkflowApplication.Cancel(System.TimeSpan)">
      <summary>Cancels the workflow instance using the specified time-out interval.</summary>
      <param name="timeout">The interval in which the cancel operation must complete before the operation is canceled and a <see cref="T:System.TimeoutException" /> is thrown.</param>
    </member>
    <member name="P:System.Activities.WorkflowApplication.Completed">
      <summary>Gets or sets the <see cref="T:System.Action`1" /> that is invoked when the workflow instance completes.</summary>
      <returns>The action that is invoked when the workflow instance is complete.</returns>
    </member>
    <member name="M:System.Activities.WorkflowApplication.CreateDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore,System.Activities.WorkflowIdentity,System.Activities.WorkflowIdentityFilter)">
      <summary>Creates a default instance owner for the workflow using specified instance store, definition identity, and identity filter.</summary>
      <param name="instanceStore">The access to the persisted state of the current instance of the workflow application.</param>
      <param name="definitionIdentity">The definition identity of the workflow.</param>
      <param name="identityFilter">The identity filter.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.CreateDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore,System.Activities.WorkflowIdentity,System.Activities.WorkflowIdentityFilter,System.TimeSpan)">
      <summary>Creates a default instance owner for the workflow using specified instance store, definition identity, and identity filter and timeout interval.</summary>
      <param name="instanceStore">The access to the persisted state of the current instance of the workflow application.</param>
      <param name="definitionIdentity">The definition identity of the workflow.</param>
      <param name="identityFilter">The identity filter.</param>
      <param name="timeout">The interval in which the begin load operation must complete before the operation is canceled.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.DeleteDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore)">
      <summary>Deletes a default instance owner for the workflow with specified instance store.</summary>
      <param name="instanceStore">The access to the persisted state of the current instance of the workflow application.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.DeleteDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore,System.TimeSpan)">
      <summary>Deletes a default instance owner for the workflow with specified instance store and timeout interval..</summary>
      <param name="instanceStore">The access to the persisted state of the current instance of the workflow application.</param>
      <param name="timeout">The interval in which the begin load operation must complete before the operation is canceled.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.EndCancel(System.IAsyncResult)">
      <summary>Waits for the pending asynchronous cancel operation to complete.</summary>
      <param name="result">The asynchronous cancel operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.EndCreateDefaultInstanceOwner(System.IAsyncResult)">
      <summary>Waits for the creation of default instance owner to complete.</summary>
      <param name="asyncResult">The asynchronous result.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.EndDeleteDefaultInstanceOwner(System.IAsyncResult)">
      <summary>Waits for the deletion of default instance owner to complete.</summary>
      <param name="asyncResult">The asynchronous result.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.EndGetInstance(System.IAsyncResult)">
      <summary>Waits for the instance retrieval to complete.</summary>
      <returns>The result of the operation.</returns>
      <param name="asyncResult">The asynchronous result.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.EndGetRunnableInstance(System.IAsyncResult)">
      <summary>Waits for the asynchronous retrieval of runnable instance operation to complete.</summary>
      <returns>The result of the operation.</returns>
      <param name="asyncResult">The asynchronous result.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.EndLoad(System.IAsyncResult)">
      <summary>Waits for the pending asynchronous load operation to complete.</summary>
      <param name="result">The asynchronous load operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.EndLoadRunnableInstance(System.IAsyncResult)">
      <summary>Waits for the asynchronous load runnable instance operation to complete.</summary>
      <param name="result">A reference to the asynchronous load operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.EndPersist(System.IAsyncResult)">
      <summary>Waits for the pending asynchronous persist operation to complete.</summary>
      <param name="result">The asynchronous persist operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.EndResumeBookmark(System.IAsyncResult)">
      <summary>Waits for a bookmark resume operation to complete.</summary>
      <returns>One of the enumeration values that indicates the results of a bookmark resumption operation.</returns>
      <param name="result">A reference to the asynchronous bookmark resume operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.EndRun(System.IAsyncResult)">
      <summary>Waits for the pending asynchronous run operation to complete.</summary>
      <param name="result">The asynchronous run operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.EndTerminate(System.IAsyncResult)">
      <summary>Waits for the pending asynchronous terminate operation to complete.</summary>
      <param name="result">The asynchronous terminate operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.EndUnload(System.IAsyncResult)">
      <summary>Waits for the pending asynchronous unload operation to complete.</summary>
      <param name="result">The asynchronous unload operation.</param>
    </member>
    <member name="P:System.Activities.WorkflowApplication.Extensions">
      <summary>Gets the collection of extensions for the current workflow instance.</summary>
      <returns>A collection of objects.</returns>
    </member>
    <member name="M:System.Activities.WorkflowApplication.GetBookmarks">
      <summary>Returns the collection of bookmarks for the workflow instance.</summary>
      <returns>A read-only collection of bookmarks for the workflow instance.</returns>
    </member>
    <member name="M:System.Activities.WorkflowApplication.GetBookmarks(System.TimeSpan)">
      <summary>Returns the collection of bookmarks for the workflow instance using the specified time-out interval.</summary>
      <returns>A read-only collection of bookmarks for the workflow instance.</returns>
      <param name="timeout">The interval in which this method must complete before the operation is canceled and a <see cref="T:System.TimeoutException" /> is thrown.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.GetInstance(System.Guid,System.Runtime.DurableInstancing.InstanceStore)">
      <summary>Retrieves the workflow instance using specified instance identifier and instance store.</summary>
      <returns>The retrieved instance.</returns>
      <param name="instanceId">The instance identifier.</param>
      <param name="instanceStore">The access to the persisted state of the current instance of the workflow application.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.GetInstance(System.Guid,System.Runtime.DurableInstancing.InstanceStore,System.TimeSpan)">
      <summary>Retrieves the workflow instance using specified instance identifier, instance store and timeout interval.</summary>
      <returns>A reference to the asynchronous operation.</returns>
      <param name="instanceId">The instance identifier.</param>
      <param name="instanceStore">The access to the persisted state of the current instance of the workflow application.</param>
      <param name="timeout">The interval in which the begin load operation must complete before the operation is canceled.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.GetRunnableInstance(System.Runtime.DurableInstancing.InstanceStore)">
      <summary>Retrieves the runnable instance of the workflow with specified instance store.</summary>
      <returns>The runnable instance.</returns>
      <param name="instanceStore">The access to the persisted state of the current instance of the workflow application</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.GetRunnableInstance(System.Runtime.DurableInstancing.InstanceStore,System.TimeSpan)">
      <summary>Retrieves the runnable instance of the workflow with specified instance store and timeout interval.</summary>
      <returns>The runnable instance.</returns>
      <param name="instanceStore">The access to the persisted state of the current instance of the workflow application</param>
      <param name="timeout">The interval in which the begin load operation must complete before the operation is canceled.</param>
    </member>
    <member name="P:System.Activities.WorkflowApplication.Id">
      <summary>Gets the 128-bit GUID identifier of the current workflow application instance.</summary>
      <returns>A 128-bit GUID identifier.</returns>
    </member>
    <member name="P:System.Activities.WorkflowApplication.Idle">
      <summary>Gets or sets the <see cref="T:System.Action`1" /> that is invoked when the current workflow instance becomes idle.</summary>
      <returns>An action that executes when a workflow instance becomes idle.</returns>
    </member>
    <member name="P:System.Activities.WorkflowApplication.InstanceStore">
      <summary>Gets or sets an object that provides access to the persisted state of the current instance of the workflow application.</summary>
      <returns>An instance store.</returns>
    </member>
    <member name="M:System.Activities.WorkflowApplication.Load(System.Activities.WorkflowApplicationInstance)">
      <summary>Loads a workflow instance from an instance store with specified instance.</summary>
      <param name="instance">The instance.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.Load(System.Activities.WorkflowApplicationInstance,System.Activities.DynamicUpdate.DynamicUpdateMap)">
      <summary>Loads a workflow instance from an instance store with specified instance and update map.</summary>
      <param name="instance">The instance.</param>
      <param name="updateMap">The update map.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.Load(System.Activities.WorkflowApplicationInstance,System.Activities.DynamicUpdate.DynamicUpdateMap,System.TimeSpan)">
      <summary>Loads a workflow instance from an instance store with specified instance, update map and timeout interval.</summary>
      <param name="instance">The instance.</param>
      <param name="updateMap">The update map.</param>
      <param name="timeout">The interval in which the begin load operation must complete before the operation is canceled.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.Load(System.Activities.WorkflowApplicationInstance,System.TimeSpan)">
      <summary>Loads a workflow instance from an instance store with specified instance and timeout interval.</summary>
      <param name="instance">The instance.</param>
      <param name="timeout">The interval in which the begin load operation must complete before the operation is canceled.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.Load(System.Guid)">
      <summary>Loads the specified workflow instance into memory from an instance store.</summary>
      <param name="instanceId">A globally unique 128-bit identifier for the workflow instance.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.Load(System.Guid,System.TimeSpan)">
      <summary>Loads the specified workflow instance into memory from an instance store using the specified time-out interval.</summary>
      <param name="instanceId">A globally unique 128-bit identifier for the workflow instance.</param>
      <param name="timeout">The interval in which the load operation must complete before the load operation is canceled and a <see cref="T:System.TimeoutException" /> is thrown.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.LoadRunnableInstance">
      <summary>Loads a runnable workflow instance from the <see cref="P:System.Activities.WorkflowApplication.InstanceStore" />.</summary>
    </member>
    <member name="M:System.Activities.WorkflowApplication.LoadRunnableInstance(System.TimeSpan)">
      <summary>Loads a runnable workflow instance from the <see cref="P:System.Activities.WorkflowApplication.InstanceStore" /> using the specified time-out interval.</summary>
      <param name="timeout">The interval in which the load operation must complete before the operation is canceled and a <see cref="T:System.TimeoutException" /> is thrown.</param>
    </member>
    <member name="P:System.Activities.WorkflowApplication.OnUnhandledException">
      <summary>Gets or sets the <see cref="T:System.Func`2" /> that is invoked when the current workflow instance encounters an unhandled exception. </summary>
      <returns>The delegate that is invoked when a workflow instance encounters an unhandled exception.</returns>
    </member>
    <member name="M:System.Activities.WorkflowApplication.Persist">
      <summary>Persists a workflow instance to an instance store.</summary>
    </member>
    <member name="M:System.Activities.WorkflowApplication.Persist(System.TimeSpan)">
      <summary>Persists a workflow instance to an instance store using the specified time-out interval.</summary>
      <param name="timeout">The interval in which the persist operation must complete before the operation is canceled and a <see cref="T:System.TimeoutException" /> is thrown.</param>
    </member>
    <member name="P:System.Activities.WorkflowApplication.PersistableIdle">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityFunc" /> that is invoked when the current workflow instance is idle and can be persisted.</summary>
      <returns>The <see cref="T:System.Activities.ActivityFunc" /> that is invoked when the current workflow instance is idle and can be persisted.</returns>
    </member>
    <member name="M:System.Activities.WorkflowApplication.ResumeBookmark(System.Activities.Bookmark,System.Object)">
      <summary>Initiates an operation to resume the specified bookmark, using the specified value. The bookmark to be resumed is previously created by an activity within the workflow instance.</summary>
      <returns>The result of the bookmark resumption operation.</returns>
      <param name="bookmark">The bookmark to resume.</param>
      <param name="value">An object passed as a parameter to the method that is invoked when the bookmark resumes.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.ResumeBookmark(System.Activities.Bookmark,System.Object,System.TimeSpan)">
      <summary>Initiates an operation to resume the specified bookmark, using the specified value and time-out interval. The bookmark to be resumed is previously created by an activity within the workflow instance.</summary>
      <returns>The result of the bookmark resumption operation.</returns>
      <param name="bookmark">The bookmark to resume.</param>
      <param name="value">An object passed as a parameter to the method that is invoked when the bookmark resumes.</param>
      <param name="timeout">The time interval during which the bookmark must be resumed.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.ResumeBookmark(System.String,System.Object)">
      <summary>Initiates an operation to resume the bookmark with the specified name, using the specified value. The bookmark to be resumed is previously created by an activity within the workflow instance.</summary>
      <returns>The result of the bookmark resumption operation.</returns>
      <param name="bookmarkName">The name of the bookmark to be resumed.</param>
      <param name="value">An object passed as a parameter to the method that is invoked when the bookmark resumes.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.ResumeBookmark(System.String,System.Object,System.TimeSpan)">
      <summary>Initiates an operation to resume the bookmark with the specified name, using the specified value and time-out interval. The bookmark to be resumed is previously created by an activity within the workflow instance.</summary>
      <returns>The result of the bookmark resumption operation.</returns>
      <param name="bookmarkName">The name of the bookmark to be resumed.</param>
      <param name="value">An object passed as a parameter to the method that is invoked when the bookmark resumes.</param>
      <param name="timeout">The time interval during which the bookmark must be resumed.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.Run">
      <summary>Begins or resumes the execution of a workflow instance.</summary>
    </member>
    <member name="M:System.Activities.WorkflowApplication.Run(System.TimeSpan)">
      <summary>Begins or resumes the execution of a workflow instance using the specified time-out interval.</summary>
      <param name="timeout">Call this method to initiate execution of a newly created workflow instance.The interval in which the run operation must complete before the operation is canceled and a <see cref="T:System.TimeoutException" /> is thrown.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.Terminate(System.Exception)">
      <summary>Terminates a workflow instance using the specified exception.</summary>
      <param name="reason">The reason for terminating the workflow instance.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.Terminate(System.Exception,System.TimeSpan)">
      <summary>Terminates a workflow instance using the specified exception and time-out interval.</summary>
      <param name="reason">The reason for terminating the workflow instance.</param>
      <param name="timeout">The interval in which the <see cref="M:System.Activities.WorkflowApplication.Terminate(System.Exception,System.TimeSpan)" /> operation must complete before the operation is canceled and a <see cref="T:System.TimeoutException" /> is thrown.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.Terminate(System.String)">
      <summary>Terminates a workflow instance using the specified error message.</summary>
      <param name="reason">The reason for terminating the workflow instance.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.Terminate(System.String,System.TimeSpan)">
      <summary>Terminates a workflow instance using the specified error message and time-out interval.</summary>
      <param name="reason">The reason for terminating the workflow instance.</param>
      <param name="timeout">The interval in which the <see cref="M:System.Activities.WorkflowApplication.Terminate(System.String,System.TimeSpan)" /> operation must complete before the operation is canceled and a <see cref="T:System.TimeoutException" /> is thrown.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.Unload">
      <summary>Persists and unloads a workflow instance.</summary>
    </member>
    <member name="M:System.Activities.WorkflowApplication.Unload(System.TimeSpan)">
      <summary>Persists and unloads a workflow instance using the specified time-out interval.</summary>
      <param name="timeout">The interval in which the unload operation must complete before the operation is canceled and a <see cref="T:System.TimeoutException" /> is thrown.</param>
    </member>
    <member name="P:System.Activities.WorkflowApplication.Unloaded">
      <summary>Gets or sets the <see cref="T:System.Action`1" /> that is invoked when the current workflow unloads.</summary>
      <returns>An action that is invoked when a workflow instance is unloaded.</returns>
    </member>
    <member name="T:System.Activities.WorkflowApplicationAbortedEventArgs">
      <summary>Provides data about an aborted workflow instance.</summary>
    </member>
    <member name="P:System.Activities.WorkflowApplicationAbortedEventArgs.Reason">
      <summary>Gets the exception that provides information about why the workflow instance was aborted</summary>
      <returns>The exception that provides information about why the workflow instance was aborted.</returns>
    </member>
    <member name="T:System.Activities.WorkflowApplicationAbortedException">
      <summary>Represents the exception that is thrown when an operation on a workflow instance is not valid because the instance has been aborted. </summary>
    </member>
    <member name="M:System.Activities.WorkflowApplicationAbortedException.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplicationAbortedException" /> class.</summary>
    </member>
    <member name="M:System.Activities.WorkflowApplicationAbortedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplicationAbortedException" /> class with the context and serialization information required to retrieve data about this exception from a serialized stream.</summary>
      <param name="info">All the information required to serialize or deserialize the abort exception object.</param>
      <param name="context">The source and destination of a given serialized stream and an additional caller-defined context.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationAbortedException.#ctor(System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplicationAbortedException" /> class with a text string description of the exception.</summary>
      <param name="message">A description of the abort exception.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationAbortedException.#ctor(System.String,System.Exception)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplicationAbortedException" /> class with a text string description of the exception and an additional exception that is the cause of the abort exception.</summary>
      <param name="message">A description of the abort exception.</param>
      <param name="innerException">An exception that has a causal relationship to the application aborted exception. The application aborted exception is thrown in response to the inner exception and can use information from the inner exception to handle the error more appropriately.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationAbortedException.#ctor(System.String,System.Guid)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplicationAbortedException" /> class with a text string description of the abort exception and with a unique identifier for it.</summary>
      <param name="message">A description of the abort exception.</param>
      <param name="instanceId">A globally unique identifier.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationAbortedException.#ctor(System.String,System.Guid,System.Exception)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplicationAbortedException" /> class with a text string description of the abort exception, a unique identifier for it, and an additional exception that is the cause of the abort exception.</summary>
      <param name="message">A description of the abort exception.</param>
      <param name="instanceId">A globally unique identifier.</param>
      <param name="innerException">An exception that has a causal relationship to the application aborted exception. The application aborted exception is thrown in response to the inner exception and can use information from the inner exception to handle the error more appropriately.</param>
    </member>
    <member name="T:System.Activities.WorkflowApplicationCompletedEventArgs">
      <summary>Provides information about a workflow instance that has completed its execution.</summary>
    </member>
    <member name="P:System.Activities.WorkflowApplicationCompletedEventArgs.CompletionState">
      <summary>Gets the completion state of the workflow instance, which indicates whether the workflow instance completed successfully, was canceled, or faulted.</summary>
      <returns>The completion state of the workflow instance, which indicates whether the workflow instance completed successfully, was canceled, or faulted.</returns>
    </member>
    <member name="P:System.Activities.WorkflowApplicationCompletedEventArgs.Outputs">
      <summary>Gets a dictionary that contains the values of <see cref="T:System.Activities.OutArgument" />s of the workflow instance’s root activity, keyed by argument name.</summary>
      <returns>A dictionary that contains the values of <see cref="T:System.Activities.OutArgument" />s of the workflow instance’s root activity, keyed by argument name.</returns>
    </member>
    <member name="P:System.Activities.WorkflowApplicationCompletedEventArgs.TerminationException">
      <summary>Gets the exception associated with the termination of the workflow instance.</summary>
      <returns>The exception associated with the termination of the workflow instance.</returns>
    </member>
    <member name="T:System.Activities.WorkflowApplicationCompletedException">
      <summary>Represents the exception that is thrown when an operation on a workflow instance is not valid because the instance has completed.</summary>
    </member>
    <member name="M:System.Activities.WorkflowApplicationCompletedException.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplicationCompletedException" /> class.</summary>
    </member>
    <member name="M:System.Activities.WorkflowApplicationCompletedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplicationCompletedException" /> class with the context and serialization information required to retrieve data about this exception from a serialized stream.</summary>
      <param name="info">All the information required to serialize or deserialize the application completed exception object.</param>
      <param name="context">The source and destination of a given serialized stream and an additional caller-defined context.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationCompletedException.#ctor(System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplicationCompletedException" /> class with a text string description of the exception.</summary>
      <param name="message">A description of the application completed exception.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationCompletedException.#ctor(System.String,System.Exception)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplicationCompletedException" /> class with a text string description of the exception and with an additional exception that is the cause of the application completed exception.</summary>
      <param name="message">A description of the application completed exception.</param>
      <param name="innerException">An exception that has a causal relationship to the application completed exception. The application completed exception is thrown in response to the inner exception and can use information from the inner exception to handle the error more appropriately.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationCompletedException.#ctor(System.String,System.Guid)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplicationCompletedException" /> class with a text string description of the exception and with a unique identifier for the exception.</summary>
      <param name="message">A description of the application completed exception.</param>
      <param name="instanceId">A globally unique identifier.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationCompletedException.#ctor(System.String,System.Guid,System.Exception)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplicationCompletedException" /> class with a text string description of the exception, a unique identifier for it, and an additional exception that is the cause of the application completed exception.</summary>
      <param name="message">A description of the application completed exception.</param>
      <param name="instanceId">A globally unique identifier.</param>
      <param name="innerException">An exception that has a causal relationship to the application completed exception. The application completed exception is thrown in response to the inner exception and can use information from the inner exception to handle the error more appropriately.</param>
    </member>
    <member name="T:System.Activities.WorkflowApplicationEventArgs">
      <summary>A base class for events associated with a <see cref="T:System.Activities.WorkflowApplication" /> .</summary>
    </member>
    <member name="M:System.Activities.WorkflowApplicationEventArgs.GetInstanceExtensions``1">
      <summary>Gets the collection of extensions of the specified type.</summary>
      <returns>The collection of extensions.</returns>
      <typeparam name="T">The type of the extension.</typeparam>
    </member>
    <member name="P:System.Activities.WorkflowApplicationEventArgs.InstanceId">
      <summary>The unique identifier of the workflow instance.</summary>
      <returns>A unique identifier.</returns>
    </member>
    <member name="T:System.Activities.WorkflowApplicationException">
      <summary>Provides the base class for handling an error that occurs during the execution of a workflow application.</summary>
    </member>
    <member name="M:System.Activities.WorkflowApplicationException.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplicationException" /> class.</summary>
    </member>
    <member name="M:System.Activities.WorkflowApplicationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplicationException" /> class with the context and serialization information required to retrieve data about this exception from a serialized stream.</summary>
      <param name="info">The information required to serialize or deserialize the application exception object.</param>
      <param name="context">The source and destination of a given serialized stream, and an additional caller-defined context.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationException.#ctor(System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplicationException" /> class with a text string description of the exception.</summary>
      <param name="message">A description of the application exception. </param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationException.#ctor(System.String,System.Exception)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplicationException" /> class with a text string description of the exception and with an additional exception that is the cause of the application exception.</summary>
      <param name="message">A description of the application exception.</param>
      <param name="innerException">An exception that has a causal relationship to the application exception.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationException.#ctor(System.String,System.Guid)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplicationException" /> class with a text string description of the exception and with a unique identifier for it.</summary>
      <param name="message">A description of the application exception.</param>
      <param name="instanceId">A globally unique identifier.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationException.#ctor(System.String,System.Guid,System.Exception)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplicationException" /> class with a text string description of the exception, a unique identifier for it, and an additional exception that is the cause of the application exception.</summary>
      <param name="message">A description of the application exception.</param>
      <param name="instanceId">A globally unique identifier.</param>
      <param name="innerException">An exception that has a causal relationship to the application exception. </param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with information about the exception.</summary>
      <param name="info">The information required to serialize or deserialize the abort exception object.</param>
      <param name="context">The source and destination of a given serialized stream, and an additional caller-defined context.</param>
    </member>
    <member name="P:System.Activities.WorkflowApplicationException.InstanceId">
      <summary>Gets the unique identifier for the current exception.</summary>
      <returns>A unique identifier.</returns>
    </member>
    <member name="T:System.Activities.WorkflowApplicationIdleEventArgs">
      <summary>Holds information about the workflow instance that has become idle.</summary>
    </member>
    <member name="P:System.Activities.WorkflowApplicationIdleEventArgs.Bookmarks">
      <summary>Gets the read-only collection of bookmarks for the workflow instance.</summary>
      <returns>A read-only collection of bookmarks.</returns>
    </member>
    <member name="T:System.Activities.WorkflowApplicationInstance">
      <summary>Specifies information about a workflow application instance.</summary>
    </member>
    <member name="M:System.Activities.WorkflowApplicationInstance.Abandon">
      <summary>Causes the state machine to transition to the abandoned state.</summary>
    </member>
    <member name="M:System.Activities.WorkflowApplicationInstance.Abandon(System.TimeSpan)">
      <summary>Causes the state machine to transition to the abandoned state with the specified timeout value.</summary>
      <param name="timeout">The timeout for the abandon operation complete.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationInstance.BeginAbandon(System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous abandon operation.</summary>
      <returns>An asynchronous abandon operation.</returns>
      <param name="callback">The asynchronous callback delegate that receives the notification of the asynchronous operation completion.</param>
      <param name="state">The user-defined state data.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationInstance.BeginAbandon(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous abandon operation.</summary>
      <returns>An asynchronous abandon operation.</returns>
      <param name="timeout">The timeout that contains the reason for the abandon operation.</param>
      <param name="callback">The asynchronous callback delegate that receives the notification of the asynchronous operation completion.</param>
      <param name="state">The user-defined state data.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationInstance.CanApplyUpdate(System.Activities.DynamicUpdate.DynamicUpdateMap,System.Collections.Generic.IList{System.Activities.DynamicUpdate.ActivityBlockingUpdate}@)">
      <summary>Returns a value that indicates whether the WorkflowApplicationInstance can apply update.</summary>
      <returns>True if the WorkflowApplicationInstance can apply update; otherwise, false.</returns>
      <param name="updateMap">Updates a map.</param>
      <param name="activitiesBlockingUpdate">The activities blocking update.</param>
    </member>
    <member name="P:System.Activities.WorkflowApplicationInstance.DefinitionIdentity">
      <summary>Gets or sets the definition identity of the workflow.</summary>
      <returns>The definition identity of the workflow.</returns>
    </member>
    <member name="M:System.Activities.WorkflowApplicationInstance.EndAbandon(System.IAsyncResult)">
      <summary>Completes an asynchronous abandon operation.</summary>
      <param name="asyncResult">The IAsyncResult returned by a call to one of the BeginAbandon methods.</param>
    </member>
    <member name="P:System.Activities.WorkflowApplicationInstance.InstanceId">
      <summary>Gets the unique identifier of the workflow instance.</summary>
      <returns>The unique identifier of the workflow instance.</returns>
    </member>
    <member name="P:System.Activities.WorkflowApplicationInstance.InstanceStore">
      <summary>Gets or sets an object that provides access to the persisted state of the current instance of the workflow application.</summary>
      <returns>An object that provides access to the persisted state of the current instance of the workflow application.</returns>
    </member>
    <member name="T:System.Activities.WorkflowApplicationTerminatedException">
      <summary>An exception that is thrown when an operation on a workflow instance is not valid because the instance has been terminated. </summary>
    </member>
    <member name="M:System.Activities.WorkflowApplicationTerminatedException.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplicationTerminatedException" /> class.</summary>
    </member>
    <member name="M:System.Activities.WorkflowApplicationTerminatedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplicationTerminatedException" /> class with the context and serialization information required to retrieve data about this exception from a serialized stream.</summary>
      <param name="info">All the information required to serialize or deserialize the application terminated exception object.</param>
      <param name="context">The source and destination of a given serialized stream and an additional caller-defined context.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationTerminatedException.#ctor(System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplicationTerminatedException" /> class with a text string description of the exception.</summary>
      <param name="message">A description of the application terminated exception.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationTerminatedException.#ctor(System.String,System.Exception)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplicationTerminatedException" /> class with a text string description of the exception and with an exception that is the cause of the application terminated exception.</summary>
      <param name="message">A description of the application terminated exception.</param>
      <param name="innerException">An exception that has a causal relationship to the application terminated exception. The application terminated exception is thrown in response to the inner exception and can use information from the inner exception to handle the error more appropriately.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationTerminatedException.#ctor(System.String,System.Guid)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplicationTerminatedException" /> class with a text string description of the exception and with a unique identifier for it.</summary>
      <param name="message">A description of the application terminated exception.</param>
      <param name="instanceId">A globally unique identifier.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationTerminatedException.#ctor(System.String,System.Guid,System.Exception)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplicationTerminatedException" /> class with a text string description of the exception, a unique identifier for it, and an exception that is the cause of the current exception.</summary>
      <param name="message">A description of the application terminated exception.</param>
      <param name="instanceId">A globally unique identifier.</param>
      <param name="innerException">An exception that has a causal relationship to the application terminated exception. The application terminated exception is thrown in response to the inner exception and can use information from the inner exception to handle the error more appropriately.</param>
    </member>
    <member name="T:System.Activities.WorkflowApplicationUnhandledExceptionEventArgs">
      <summary>Provides information about an unhandled exception that occurred in a workflow instance.</summary>
    </member>
    <member name="P:System.Activities.WorkflowApplicationUnhandledExceptionEventArgs.ExceptionSource">
      <summary>Gets the activity that is the source of the unhandled exception.</summary>
      <returns>An activity.</returns>
    </member>
    <member name="P:System.Activities.WorkflowApplicationUnhandledExceptionEventArgs.ExceptionSourceInstanceId">
      <summary>Gets the unique identifier of the activity instance that is the source of the unhandled exception.</summary>
      <returns>An identifier of the activity instance that is the source of the unhandled exception.</returns>
    </member>
    <member name="P:System.Activities.WorkflowApplicationUnhandledExceptionEventArgs.UnhandledException">
      <summary>Gets the <see cref="T:System.Exception" /> that was unhandled by the workflow instance.</summary>
      <returns>The <see cref="T:System.Exception" /> that was unhandled by the workflow instance.</returns>
    </member>
    <member name="T:System.Activities.WorkflowApplicationUnloadedException">
      <summary>An exception that is thrown when an operation on a workflow instance is invalid because the instance has been unloaded. </summary>
    </member>
    <member name="M:System.Activities.WorkflowApplicationUnloadedException.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplicationUnloadedException" /> class.</summary>
    </member>
    <member name="M:System.Activities.WorkflowApplicationUnloadedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplicationUnloadedException" /> class with the context and serialization information required to retrieve data about this exception from a serialized stream.</summary>
      <param name="info">All the information required to serialize or deserialize the application unloaded exception object.</param>
      <param name="context">The source and destination of a given serialized stream and an additional caller-defined context.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationUnloadedException.#ctor(System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplicationUnloadedException" /> class with the specified text string description of the exception.</summary>
      <param name="message">The description of the application unloaded exception.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationUnloadedException.#ctor(System.String,System.Exception)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplicationUnloadedException" /> class with the specified text string description of the exception and with a specified exception that has a causal relationship to the <see cref="T:System.Activities.WorkflowApplicationUnloadedException" />.</summary>
      <param name="message">A description of the application unloaded exception.</param>
      <param name="innerException">An exception that has a causal relationship to the application unloaded exception. The application unloaded exception is thrown in response to the inner exception and can use information from the inner exception to handle the error more appropriately.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationUnloadedException.#ctor(System.String,System.Guid)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplicationUnloadedException" /> class with the specified text string description of the exception and the specified unique identifier for it.</summary>
      <param name="message">A description of the application unloaded exception.</param>
      <param name="instanceId">A globally unique identifier.</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationUnloadedException.#ctor(System.String,System.Guid,System.Exception)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplicationUnloadedException" /> class with the specified text string description of the exception, unique identifier for it, and the exception that is the cause of the <see cref="T:System.Activities.WorkflowApplicationUnloadedException" />.</summary>
      <param name="message">A description of the application unloaded exception.</param>
      <param name="instanceId">A globally unique identifier.</param>
      <param name="innerException">An exception that has a causal relationship to the application unloaded exception. The application unloaded exception is thrown in response to the inner exception and can use information from the exception to handle the error more appropriately.</param>
    </member>
    <member name="T:System.Activities.WorkflowDataContext">
      <summary>Represents the data context of the current workflow environment and provides a bridge to bring workflow arguments and variables into the scope of Windows Presentation Foundation (WPF) data binding.</summary>
    </member>
    <member name="M:System.Activities.WorkflowDataContext.Dispose">
      <summary>Releases the resources used by the <see cref="T:System.Activities.WorkflowDataContext" />.</summary>
    </member>
    <member name="M:System.Activities.WorkflowDataContext.GetProperties">
      <summary>Returns the collection of properties managed by this <see cref="T:System.Activities.WorkflowDataContext" />.</summary>
      <returns>The collection of properties managed by this <see cref="T:System.Activities.WorkflowDataContext" />.</returns>
    </member>
    <member name="E:System.Activities.WorkflowDataContext.PropertyChanged">
      <summary>Occurs when a property value changes.</summary>
    </member>
    <member name="T:System.Activities.WorkflowIdentity">
      <summary>Maps a persisted workflow instance to its corresponding workflow definition.</summary>
    </member>
    <member name="M:System.Activities.WorkflowIdentity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.WorkflowIdentity" /> class.</summary>
    </member>
    <member name="M:System.Activities.WorkflowIdentity.#ctor(System.String,System.Version,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.WorkflowIdentity" /> class using the name, version, and package.</summary>
      <param name="name">The workflow identity name.</param>
      <param name="version">The workflow identity version.</param>
      <param name="package">The workflow identity package.</param>
    </member>
    <member name="M:System.Activities.WorkflowIdentity.Equals(System.Activities.WorkflowIdentity)">
      <summary>Determines whether the current WorkflowIdentity and the specified WorkflowIdentity are the same.</summary>
      <returns>True if the current WorkflowIdentity and the specified WorkflowIdentity are the same; otherwise, false.</returns>
      <param name="other">The WorkflowIdentity to compare.</param>
    </member>
    <member name="M:System.Activities.WorkflowIdentity.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current object.</summary>
      <returns>True if the specified object is equal to the current object; otherwise. false.</returns>
      <param name="obj">The object to compare with the current object.</param>
    </member>
    <member name="M:System.Activities.WorkflowIdentity.GetHashCode">
      <summary>Returns the hash code for this workflow identity.</summary>
      <returns>The hash code for this workflow identity.</returns>
    </member>
    <member name="P:System.Activities.WorkflowIdentity.Name">
      <summary>Gets or sets the name of the workflow identity.</summary>
      <returns>The name of the workflow identity.</returns>
    </member>
    <member name="P:System.Activities.WorkflowIdentity.Package">
      <summary>Gets or sets the package of the workflow identity.</summary>
      <returns>The package of the workflow identity.</returns>
    </member>
    <member name="M:System.Activities.WorkflowIdentity.Parse(System.String)">
      <summary>Converts the string representation of the WorkflowIdentity.</summary>
      <returns>The string representation of the WorkflowIdentity.</returns>
      <param name="identity">A new identity.</param>
    </member>
    <member name="M:System.Activities.WorkflowIdentity.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="M:System.Activities.WorkflowIdentity.TryParse(System.String,System.Activities.WorkflowIdentity@)">
      <summary>Parses the string and creates a new instance of a WorkflowIdentity.</summary>
      <returns>True if a WorkflowIdentity instance has been created; otherwise, false.</returns>
      <param name="identity">A new identity.</param>
      <param name="result">The result created from the string.</param>
    </member>
    <member name="P:System.Activities.WorkflowIdentity.Version">
      <summary>Gets or sets the version of the workflow identity.</summary>
      <returns>The version of the workflow identity.</returns>
    </member>
    <member name="T:System.Activities.WorkflowIdentityFilter">
      <summary>Specifies the workflow identity filter.</summary>
    </member>
    <member name="F:System.Activities.WorkflowIdentityFilter.Any">
      <summary>Specifies any workflow identity filter.</summary>
    </member>
    <member name="F:System.Activities.WorkflowIdentityFilter.AnyRevision">
      <summary>Specifies any revision of workflow identity filter.</summary>
    </member>
    <member name="F:System.Activities.WorkflowIdentityFilter.Exact">
      <summary>The exact workflow identity filter.</summary>
    </member>
    <member name="T:System.Activities.WorkflowInspectionServices">
      <summary>Provides methods for working with the runtime metadata for an activity tree. </summary>
    </member>
    <member name="M:System.Activities.WorkflowInspectionServices.CacheMetadata(System.Activities.Activity)">
      <summary>Caches the runtime metadata for the specified activity tree.</summary>
      <param name="rootActivity">The root activity of the activity tree.</param>
    </member>
    <member name="M:System.Activities.WorkflowInspectionServices.CacheMetadata(System.Activities.Activity,System.Activities.LocationReferenceEnvironment)">
      <summary>Caches the runtime metadata for the specified activity tree using the specified environment.</summary>
      <param name="rootActivity">The root activity of the activity tree.</param>
      <param name="hostEnvironment">The environment associated with the activity tree.</param>
    </member>
    <member name="M:System.Activities.WorkflowInspectionServices.CanInduceIdle(System.Activities.Activity)">
      <summary>Specifies whether the service can include idle activities.</summary>
      <returns>True if the service can include idle activities; otherwise, false.</returns>
      <param name="activity">The activity.</param>
    </member>
    <member name="M:System.Activities.WorkflowInspectionServices.GetActivities(System.Activities.Activity)">
      <summary>Returns an <see cref="T:System.Collections.Generic.IEnumerable`1" /> that represents all activities associated with the input activity.</summary>
      <returns>An enumeration that represents all activities associated with the input activity.</returns>
      <param name="activity">The root activity.</param>
    </member>
    <member name="M:System.Activities.WorkflowInspectionServices.GetImplementationVersion(System.Activities.Activity)">
      <summary>Retrieves the implementation version of the activity.</summary>
      <returns>The implementation version of the activity.</returns>
      <param name="activity">The activity.</param>
    </member>
    <member name="M:System.Activities.WorkflowInspectionServices.Resolve(System.Activities.Activity,System.String)">
      <summary>Returns the activity with the specified <paramref name="id" /> from the specified activity tree.</summary>
      <returns>The specified activity if found; otherwise, an <see cref="T:System.ArgumentException" /> is thrown.</returns>
      <param name="root">The activity tree to search.</param>
      <param name="id">The identifier of the activity to find.</param>
    </member>
    <member name="T:System.Activities.WorkflowInvoker">
      <summary>Provides a means for invoking a workflow as if it were a method call.</summary>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.WorkflowInvoker" /> class.</summary>
      <param name="workflow">The workflow definition of the workflow to be invoked by this instance of the <see cref="T:System.Activities.WorkflowInvoker" /> class.</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)">
      <summary>Invokes a workflow asynchronously using the specified <see cref="T:System.AsyncCallback" /> and user-provided state.</summary>
      <returns>A reference to the asynchronous invoke operation.</returns>
      <param name="callback">The method to be called when the workflow has completed.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)">
      <summary>Invokes a workflow asynchronously using the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, <see cref="T:System.AsyncCallback" />, and user-provided state.</summary>
      <returns>A reference to the asynchronous invoke operation.</returns>
      <param name="inputs">The dictionary of input parameters to the workflow, keyed by argument name.</param>
      <param name="callback">The method to be called when the workflow has completed.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Invokes a workflow asynchronously using the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, time-out interval, <see cref="T:System.AsyncCallback" />, and user-provided state.</summary>
      <returns>A reference to the asynchronous invoke operation.</returns>
      <param name="inputs">The dictionary of input parameters to the workflow, keyed by argument name.</param>
      <param name="timeout">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</param>
      <param name="callback">The method to be called when the workflow has completed.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Invokes a workflow asynchronously using the specified time-out interval, <see cref="T:System.AsyncCallback" />, and user-provided state.</summary>
      <returns>A reference to the asynchronous invoke operation.</returns>
      <param name="timeout">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</param>
      <param name="callback">The method to be called when the workflow has completed.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.CancelAsync(System.Object)">
      <summary>Attempts to cancel the workflow that was invoked with the specified <paramref name="userState" />.</summary>
      <param name="userState">The token for the workflow to cancel.</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.EndInvoke(System.IAsyncResult)">
      <summary>Returns the results of a workflow that was invoked using one of the <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" /> overloads.</summary>
      <returns>A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</returns>
      <param name="result">The <see cref="T:System.IAsyncResult" /> that references the <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" /> operation that started the workflow.</param>
    </member>
    <member name="P:System.Activities.WorkflowInvoker.Extensions">
      <summary>Gets the <see cref="T:System.Collections.ObjectModel.Collection`1" /> of extensions that are available to workflows invoked by a <see cref="T:System.Activities.WorkflowInvoker" /> instance.</summary>
      <returns>The <see cref="T:System.Collections.ObjectModel.Collection`1" /> of extensions that are available to workflows invoked by a <see cref="T:System.Activities.WorkflowInvoker" /> instance.</returns>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.Invoke">
      <summary>Invokes a workflow synchronously using the workflow definition passed to the <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> constructor.</summary>
      <returns>A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</returns>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity)">
      <summary>Invokes a workflow synchronously using the specified workflow definition.</summary>
      <returns>A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</returns>
      <param name="workflow">The workflow definition of the workflow to invoke.</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Invokes a workflow synchronously using the specified workflow definition and <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters.</summary>
      <returns>A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</returns>
      <param name="workflow">The workflow definition of the workflow to invoke.</param>
      <param name="inputs">The dictionary of input parameters to the workflow, keyed by argument name.</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
      <summary>Invokes a workflow synchronously using the specified workflow definition, <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, and time-out interval.</summary>
      <returns>A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</returns>
      <param name="workflow">The workflow definition of the workflow to invoke.</param>
      <param name="inputs">The dictionary of input parameters to the workflow, keyed by argument name.</param>
      <param name="timeout">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.TimeSpan)">
      <summary>Invokes a workflow synchronously using the specified workflow definition and time-out interval.</summary>
      <returns>A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</returns>
      <param name="workflow">The workflow definition of the workflow to invoke.</param>
      <param name="timeout">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0})">
      <summary>Invokes a workflow synchronously using the workflow definition passed to the <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> constructor.</summary>
      <returns>A value of type TResult with the result of the execution of the activity.</returns>
      <param name="workflow">The workflow definition of the workflow to invoke. The workflow definition needs to derive from <see cref="T:System.Activities.ActivityWithResult" />.</param>
      <typeparam name="TResult">The type of the workflow.</typeparam>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Invokes a workflow synchronously using the specified workflow definition and <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters.</summary>
      <returns>A value of type TResult with the result of the execution of the activity.</returns>
      <param name="workflow">The workflow definition of the workflow to invoke.</param>
      <param name="inputs">The dictionary of input parameters to the workflow, keyed by argument name.</param>
      <typeparam name="TResult">The type of the workflow.</typeparam>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)">
      <summary>Invokes a workflow synchronously using the specified workflow definition, <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, <see cref="T:System.Collections.Generic.IDictionary`2" /> of additional output parameters, and time-out interval.</summary>
      <returns>A value of type TResult with the result of the execution of the activity.</returns>
      <param name="workflow">The workflow definition of the workflow to invoke.</param>
      <param name="inputs">The dictionary of input parameters to the workflow, keyed by argument name.</param>
      <param name="additionalOutputs">The dictionary of additional output parameters of the workflow, keyed by argument name.</param>
      <param name="timeout">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</param>
      <typeparam name="TResult">The type of the workflow.</typeparam>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
      <summary>Invokes a workflow synchronously using the specified workflow definition, <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, and time-out interval.</summary>
      <returns>A value of type TResult with the result of the execution of the activity.</returns>
      <param name="workflow">The workflow definition of the workflow to invoke.</param>
      <param name="inputs">The dictionary of input parameters to the workflow, keyed by argument name.</param>
      <param name="timeout">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</param>
      <typeparam name="TResult">The type of the workflow.</typeparam>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Invokes the activity passed to the <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> constructor synchronously with the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters.</summary>
      <returns>A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</returns>
      <param name="inputs">The dictionary of input parameters to the workflow, keyed by argument name.</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
      <summary>Invokes the activity passed to the <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> constructor synchronously with the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters and the specified time-out interval.</summary>
      <returns>A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</returns>
      <param name="inputs">The dictionary of input parameters to the workflow, keyed by argument name.</param>
      <param name="timeout">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.Invoke(System.TimeSpan)">
      <summary>Invokes a workflow synchronously with the specified time-out interval.</summary>
      <returns>A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</returns>
      <param name="timeout">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.InvokeAsync">
      <summary>Invokes a workflow asynchronously.</summary>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Invokes a workflow asynchronously using the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters.</summary>
      <param name="inputs">The dictionary of input parameters to the workflow, keyed by argument name.</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
      <summary>Invokes a workflow asynchronously using the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters and a unique identifier.</summary>
      <param name="inputs">The dictionary of input parameters to the workflow, keyed by argument name.</param>
      <param name="userState">A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
      <summary>Invokes a workflow asynchronously with the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters and the specified time-out interval.</summary>
      <param name="inputs">The dictionary of input parameters to the workflow, keyed by argument name.</param>
      <param name="timeout">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)">
      <summary>Invokes a workflow asynchronously with the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, the specified time-out interval, and a unique identifier.</summary>
      <param name="inputs">The dictionary of input parameters to the workflow, keyed by argument name.</param>
      <param name="timeout">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</param>
      <param name="userState">A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Object)">
      <summary>Invokes a workflow asynchronously using the specified unique identifier.</summary>
      <param name="userState">A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan)">
      <summary>Invokes a workflow asynchronously with the specified time-out interval.</summary>
      <param name="timeout">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)">
      <summary>Invokes a workflow asynchronously with the specified time-out interval and a unique identifier.</summary>
      <param name="timeout">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</param>
      <param name="userState">A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</param>
    </member>
    <member name="E:System.Activities.WorkflowInvoker.InvokeCompleted">
      <summary>Occurs when the workflow invoked by one of the <see cref="Overload:System.Activities.WorkflowInvoker.InvokeAsync" /> overloads is completed or canceled.</summary>
    </member>
    <member name="T:System.Activities.Debugger.DebugInfo">
      <summary>Represents the debugging information.</summary>
    </member>
    <member name="T:System.Activities.Debugger.IDebuggableWorkflowTree">
      <summary>Provides an interface whose implementation enables the Workflow debugger to debug a serialized Workflow object.</summary>
    </member>
    <member name="M:System.Activities.Debugger.IDebuggableWorkflowTree.GetWorkflowRoot">
      <summary>Returns the root of the Workflow tree.</summary>
      <returns>An activity that represents the root of the workflow tree.</returns>
    </member>
    <member name="T:System.Activities.Debugger.LocalsItemDescription">
      <summary>Represents the name and type of an early bound item that displays in the workflow debugger Locals window. </summary>
    </member>
    <member name="M:System.Activities.Debugger.LocalsItemDescription.#ctor(System.String,System.Type)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Debugger.LocalsItemDescription" /> class with the name and type of the local item defined.</summary>
      <param name="name">The name of the specified early bound local item.</param>
      <param name="type">The type of the specified early bound local item.</param>
    </member>
    <member name="P:System.Activities.Debugger.LocalsItemDescription.Name">
      <summary>Returns the name of a local item accessed while debugging a workflow.</summary>
      <returns>A string representing the name of a local item.</returns>
    </member>
    <member name="M:System.Activities.Debugger.LocalsItemDescription.ToString">
      <summary>Returns a string that represents the name and type of an early bound local item that displays in the workflow debugger Locals window.</summary>
      <returns>A string representing the name and type of a local item.</returns>
    </member>
    <member name="P:System.Activities.Debugger.LocalsItemDescription.Type">
      <summary>Returns the type of a local item accessed while debugging a workflow.</summary>
      <returns>A string representing the type of a local item.</returns>
    </member>
    <member name="T:System.Activities.Debugger.SourceLocation">
      <summary>Identifies a specific location in a target source code file. </summary>
    </member>
    <member name="M:System.Activities.Debugger.SourceLocation.#ctor(System.String,System.Int32)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Debugger.SourceLocation" /> class that specifies a source code file name and the number of a line in that file.</summary>
      <param name="fileName">A source code file.</param>
      <param name="line">The number of a line in the source code file.</param>
    </member>
    <member name="M:System.Activities.Debugger.SourceLocation.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Debugger.SourceLocation" /> class that specifies a source code file name and parameters for a range of data within that file.</summary>
      <param name="fileName">The name of a source code file.</param>
      <param name="startLine">A number that designates the line in the source code file where reading begins.</param>
      <param name="startColumn">A number that designates the column in the source code file where reading begins.</param>
      <param name="endLine">A number that designates the line in the source code file where reading ends.</param>
      <param name="endColumn">A number that designates the column in the source code file where reading ends.</param>
    </member>
    <member name="P:System.Activities.Debugger.SourceLocation.EndColumn">
      <summary>Gets the final column in a range of one or more columns in the source code file.</summary>
      <returns>An integer representing the final column in a range of columns.</returns>
    </member>
    <member name="P:System.Activities.Debugger.SourceLocation.EndLine">
      <summary>Gets the final line in a range of one or more lines in the source code file.</summary>
      <returns>An integer representing the final line in a range of lines.</returns>
    </member>
    <member name="M:System.Activities.Debugger.SourceLocation.Equals(System.Object)">
      <summary>Returns a value that indicates whether the source code file line and column settings referenced by the <see cref="T:System.Activities.Debugger.SourceLocation" /> object are an exact match for the line and column settings in another, specified <see cref="T:System.Activities.Debugger.SourceLocation" /> object.</summary>
      <returns>A boolean that indicates the presence or absence of a match.</returns>
      <param name="obj">A specified <see cref="T:System.Activities.Debugger.SourceLocation" /> object.</param>
    </member>
    <member name="P:System.Activities.Debugger.SourceLocation.FileName">
      <summary>Gets the name of the target source code file.</summary>
      <returns>A string instance of the name of the target source code file.</returns>
    </member>
    <member name="M:System.Activities.Debugger.SourceLocation.GetHashCode">
      <summary>Returns a unique value to represent the <see cref="T:System.Activities.Debugger.SourceLocation" /> object.</summary>
      <returns>An integer representing a hash code.</returns>
    </member>
    <member name="P:System.Activities.Debugger.SourceLocation.IsSingleWholeLine">
      <summary>Gets a value that indicates whether the line and column settings define a single, complete line, and not multiple lines, in the source code file.</summary>
      <returns>A boolean representing what the column settings define.</returns>
    </member>
    <member name="P:System.Activities.Debugger.SourceLocation.StartColumn">
      <summary>Gets the first column in a range of one or more columns in the source code file.</summary>
      <returns>An integer representing a column in a range of columns.</returns>
    </member>
    <member name="P:System.Activities.Debugger.SourceLocation.StartLine">
      <summary>Gets the first line in a range of one or more lines in the source code file.</summary>
      <returns>An integer representing a line a range of lines.</returns>
    </member>
    <member name="T:System.Activities.Debugger.SourceLocationFoundEventArgs">
      <summary>Represents SourceLocationFoundEventArgs.</summary>
    </member>
    <member name="M:System.Activities.Debugger.SourceLocationFoundEventArgs.#ctor(System.Object,System.Activities.Debugger.SourceLocation)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Debugger.SourceLocationFoundEventArgs" /> class using the target and source location.</summary>
      <param name="target">The target location.</param>
      <param name="sourceLocation">The source location.</param>
    </member>
    <member name="P:System.Activities.Debugger.SourceLocationFoundEventArgs.SourceLocation">
      <summary>Gets the specific location in a target source code file.</summary>
      <returns>The specific location in a target source code file.</returns>
    </member>
    <member name="P:System.Activities.Debugger.SourceLocationFoundEventArgs.Target">
      <summary>Gets the target source code files for the specific location.</summary>
      <returns>The target source code files for the specific location.</returns>
    </member>
    <member name="T:System.Activities.Debugger.SourceLocationProvider">
      <summary>Provides <see cref="T:System.Activities.Debugger.SourceLocation" /> information for the mapping of a root activity and its descendants to their corresponding source locations.</summary>
    </member>
    <member name="M:System.Activities.Debugger.SourceLocationProvider.CollectMapping(System.Activities.Activity,System.Activities.Activity,System.Collections.Generic.Dictionary{System.Object,System.Activities.Debugger.SourceLocation},System.String)">
      <summary>Creates to a dictionary type collection of mappings of the root activity and its descendants to their corresponding source locations.</summary>
      <param name="rootActivity1">A workflow element that represents an activity that is not mapped to a source location.</param>
      <param name="rootActivity2">A workflow element that shadows <paramref name="rootActivity1" /> but has specific source locations to which its members are mapped.</param>
      <param name="mapping">A dictionary object that contains a root activity and its descendants, each mapped to a source location.</param>
      <param name="path">The path of the source file to use.</param>
    </member>
    <member name="M:System.Activities.Debugger.SourceLocationProvider.GetSourceLocations(System.Activities.Activity,System.Activities.Debugger.Symbol.WorkflowSymbol)">
      <summary>Gets the source locations for the specified root activity and workflow symbols.</summary>
      <returns>A <see cref="T:System.Collections.Generic.Dictionary`2" /> object that contains the source locations.</returns>
      <param name="rootActivity">A workflow element that represents the root activity from which to get the source locations.</param>
      <param name="symbol">An object that contains the workflow symbols.</param>
    </member>
    <member name="M:System.Activities.Debugger.SourceLocationProvider.GetSymbols(System.Activities.Activity,System.Collections.Generic.Dictionary{System.Object,System.Activities.Debugger.SourceLocation})">
      <summary>Gets the workflow symbols for the specified root activity and source locations.</summary>
      <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> object that contains the workflow symbols.</returns>
      <param name="rootActivity">A workflow element that represents the root activity from which to get the workflow symbols.</param>
      <param name="sourceLocations">An object that contains the source locations.</param>
    </member>
    <member name="T:System.Activities.Debugger.State">
      <summary>Maintains property information that pinpoints source code locations that can serve as breakpoints or be stepped to by the interpreter.</summary>
    </member>
    <member name="T:System.Activities.Debugger.StateManager">
      <summary>Manages the debugging of each activity that is mapped to a state by the debugging infrastructure. </summary>
    </member>
    <member name="M:System.Activities.Debugger.StateManager.Dispose">
      <summary>Exits each thread in the logical thread list and then clears the list.</summary>
    </member>
    <member name="M:System.Activities.Debugger.StateManager.Exit(System.Int32)">
      <summary>Exits the specified thread and sets its location in the logical thread list to null.</summary>
      <param name="threadIndex">A number that represents an index into a list of logical threads.</param>
    </member>
    <member name="T:System.Activities.Debugger.ThreadWorkerController">
      <summary>Supports the creation and execution of an auxiliary debugging thread, or island, on a dedicated worker thread. This type is a utility class used by the framework and is not intended for public use. </summary>
    </member>
    <member name="M:System.Activities.Debugger.ThreadWorkerController.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Debugger.ThreadWorkerController" /> class.</summary>
    </member>
    <member name="M:System.Activities.Debugger.ThreadWorkerController.IslandWorker(System.Activities.Debugger.ThreadWorkerController)">
      <summary>Directs execution to a particular auxiliary debugger thread.</summary>
      <param name="controller">The auxiliary debugger thread to execute.</param>
    </member>
    <member name="T:System.Activities.Debugger.VirtualStackFrame">
      <summary>Provides a virtual call stack frame for the interpreter. </summary>
    </member>
    <member name="M:System.Activities.Debugger.VirtualStackFrame.#ctor(System.Activities.Debugger.State)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Debugger.VirtualStackFrame" /> class with the state specified.</summary>
      <param name="state">For this implementation, an object that contains the set of properties that define a virtual environment for a frame on a call stack. </param>
    </member>
    <member name="M:System.Activities.Debugger.VirtualStackFrame.#ctor(System.Activities.Debugger.State,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Debugger.VirtualStackFrame" /> class with the state and local variables specified.</summary>
      <param name="state">For this implementation, an object that contains the set of properties that define a virtual environment for a frame on a call stack.</param>
      <param name="locals">Early and late bound variables associated with the state.</param>
    </member>
    <member name="P:System.Activities.Debugger.VirtualStackFrame.Locals">
      <summary>Gets local variables for a frame on a call stack.</summary>
      <returns>A collection of key/value pairs that define early and late bound variables associated with the specified state.</returns>
    </member>
    <member name="P:System.Activities.Debugger.VirtualStackFrame.State">
      <summary>Gets the properties that define a virtual environment for a frame on a call stack.</summary>
      <returns>A State object that contains the properties that define a specified virtual environment.</returns>
    </member>
    <member name="M:System.Activities.Debugger.VirtualStackFrame.ToString">
      <summary>A string instance of the state information.</summary>
      <returns>The state information for a virtual environment.</returns>
    </member>
    <member name="T:System.Activities.Debugger.XamlDebuggerXmlReader">
      <summary>Provides the functionality to parse XAML markup code into an object or tree of objects.</summary>
    </member>
    <member name="M:System.Activities.Debugger.XamlDebuggerXmlReader.#ctor(System.IO.TextReader)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Debugger.XamlDebuggerXmlReader" /> class with the specified text reader.</summary>
      <param name="underlyingTextReader">The text reader to the underlying text data.</param>
    </member>
    <member name="M:System.Activities.Debugger.XamlDebuggerXmlReader.#ctor(System.IO.TextReader,System.Xaml.XamlSchemaContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Debugger.XamlDebuggerXmlReader" /> class with the specified text reader and schema context for interpreting or mapping XAML types.</summary>
      <param name="underlyingTextReader">The text reader to the underlying text data.</param>
      <param name="schemaContext">The schema context for interpreting or mapping XAML types.</param>
    </member>
    <member name="M:System.Activities.Debugger.XamlDebuggerXmlReader.#ctor(System.Xaml.XamlReader,System.IO.TextReader)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Debugger.XamlDebuggerXmlReader" /> class with the specified XAML reader and text reader.</summary>
      <param name="underlyingReader">The XAML reader to the underlying XAML data.</param>
      <param name="textReader">The text reader to the underlying text data.</param>
    </member>
    <member name="M:System.Activities.Debugger.XamlDebuggerXmlReader.#ctor(System.Xaml.XamlReader,System.Xaml.IXamlLineInfo,System.IO.TextReader)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Debugger.XamlDebuggerXmlReader" /> class with the specified XAML reader, XAML line information, and text reader.</summary>
      <param name="underlyingReader">The XAML reader to the underlying XAML data.</param>
      <param name="xamlLineInfo">The object that reports XAML line information.</param>
      <param name="textReader">The text reader to the underlying text data.</param>
    </member>
    <member name="P:System.Activities.Debugger.XamlDebuggerXmlReader.CollectNonActivitySourceLocation">
      <summary>Gets or sets a value that indicates whether a non-activity source location is collected.</summary>
      <returns>true if the non-activity source location is collected; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.Debugger.XamlDebuggerXmlReader.CopyAttachedSourceLocation(System.Object,System.Object)">
      <summary>Retrieves row and column values from the specified activity object and assigns them to the current instance of the XAML reader.</summary>
      <param name="source">The XAML activity instance from which to read source location values.</param>
      <param name="destination">An activity instance.</param>
    </member>
    <member name="M:System.Activities.Debugger.XamlDebuggerXmlReader.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Activities.Debugger.XamlDebuggerXmlReader" />, and optionally, releases the managed resources. </summary>
      <param name="disposing">true to release the managed resources; otherwise, false.</param>
    </member>
    <member name="F:System.Activities.Debugger.XamlDebuggerXmlReader.EndColumnName">
      <summary>The name of an attached property that represents the ending column of an activity element in its XAML form.</summary>
    </member>
    <member name="F:System.Activities.Debugger.XamlDebuggerXmlReader.EndLineName">
      <summary>The name of an attached property that represents the ending line of an activity element in its XAML form.</summary>
    </member>
    <member name="F:System.Activities.Debugger.XamlDebuggerXmlReader.FileNameName">
      <summary>The name of an attached property that represents the name of the file to be parsed.</summary>
    </member>
    <member name="M:System.Activities.Debugger.XamlDebuggerXmlReader.GetEndColumn(System.Object)">
      <summary>Gets the value of the attached property named in the EndColumnName dependency property field of the specified instance of a XAML reader.</summary>
      <returns>An attached property object.</returns>
      <param name="instance">An activity instance.</param>
    </member>
    <member name="M:System.Activities.Debugger.XamlDebuggerXmlReader.GetEndLine(System.Object)">
      <summary>Gets the value of the attached property named in the EndLineName dependency property field of the specified instance of a XAML reader.</summary>
      <returns>An attached property object.</returns>
      <param name="instance">An activity instance.</param>
    </member>
    <member name="M:System.Activities.Debugger.XamlDebuggerXmlReader.GetFileName(System.Object)">
      <summary>Gets the value of the attached property named in the FileNameName dependency property field of the specified instance of a XAML reader.</summary>
      <returns>An attached property object.</returns>
      <param name="instance">An activity instance.</param>
    </member>
    <member name="M:System.Activities.Debugger.XamlDebuggerXmlReader.GetStartColumn(System.Object)">
      <summary>Gets the value of the attached property named in the StartColumnName dependency property field of the specified instance of a XAML reader.</summary>
      <returns>An attached property object.</returns>
      <param name="instance">An activity instance.</param>
    </member>
    <member name="M:System.Activities.Debugger.XamlDebuggerXmlReader.GetStartLine(System.Object)">
      <summary>Gets the value of the attached property named in the StartLineName dependency property field of the specified instance of a XAML reader.</summary>
      <returns>An attached property object.</returns>
      <param name="instance">An activity instance.</param>
    </member>
    <member name="P:System.Activities.Debugger.XamlDebuggerXmlReader.HasLineInfo">
      <summary>Gets a value that indicates whether line information is available. </summary>
      <returns>true if line information is available; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Debugger.XamlDebuggerXmlReader.IsEof">
      <summary>Gets a value that indicates whether the underlying reader has reached the end of the XAML file that is being parsed.</summary>
      <returns>true if the reader has reached the end of the file it is parsing; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Debugger.XamlDebuggerXmlReader.LineNumber">
      <summary>Gets the line in a XAML file that is currently being examined by the reader.</summary>
      <returns>The line in a XAML file that is currently being examined by the reader.</returns>
    </member>
    <member name="P:System.Activities.Debugger.XamlDebuggerXmlReader.LinePosition">
      <summary>Gets the position of the line in a XAML file that is currently being examined by the XML reader.</summary>
      <returns>The position of the line in a XAML file that is currently being examined by the XML reader.</returns>
    </member>
    <member name="P:System.Activities.Debugger.XamlDebuggerXmlReader.Member">
      <summary>Gets the starting member of the document being parsed to the XAML member base.</summary>
      <returns>The starting member of the document being parsed to the XAML member base.</returns>
    </member>
    <member name="P:System.Activities.Debugger.XamlDebuggerXmlReader.Namespace">
      <summary>Gets the path that is used in the root element of the XAML document to establish a relationship between the XAML code and its schema.</summary>
      <returns>A namespace declaration for use in the root element of the XAML document.</returns>
    </member>
    <member name="P:System.Activities.Debugger.XamlDebuggerXmlReader.NodeType">
      <summary>Gets the type of the node currently being read in a XAML file.</summary>
      <returns>One of the enumeration values of the <see cref="T:System.Xaml.XamlNodeType" /> enumeration.</returns>
    </member>
    <member name="M:System.Activities.Debugger.XamlDebuggerXmlReader.Read">
      <summary>Provides the next XAML node from the loaded source, if a XAML node is available. </summary>
      <returns>true if a node is available; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Debugger.XamlDebuggerXmlReader.SchemaContext">
      <summary>Gets the schema context for the underlying XAML reader.</summary>
      <returns>The schema context information.</returns>
    </member>
    <member name="M:System.Activities.Debugger.XamlDebuggerXmlReader.SetEndColumn(System.Object,System.Object)">
      <summary>Sets the value of the attached property named in the EndColumnName dependency property field of the specified instance of a XAML reader.</summary>
      <param name="instance">The current instance of the XAML reader.</param>
      <param name="value">The EndColumnName property identifier or name.</param>
    </member>
    <member name="M:System.Activities.Debugger.XamlDebuggerXmlReader.SetEndLine(System.Object,System.Object)">
      <summary>Sets the value of the attached property named in the EndLineName dependency property field of the specified instance of a XAML reader.</summary>
      <param name="instance">The current instance of the XAML reader.</param>
      <param name="value">The EndLineName identifier or name.</param>
    </member>
    <member name="M:System.Activities.Debugger.XamlDebuggerXmlReader.SetFileName(System.Object,System.Object)">
      <summary>Sets the value of the attached property named in the FileNameName dependency property field of the specified instance of a XAML reader.</summary>
      <param name="instance">The current instance of the XAML reader.</param>
      <param name="value">The FileNameName property identifier or name.</param>
    </member>
    <member name="M:System.Activities.Debugger.XamlDebuggerXmlReader.SetStartColumn(System.Object,System.Object)">
      <summary>Sets the value of the attached property named in the StartColumnName dependency property field of the specified instance of a XAML reader.</summary>
      <param name="instance">The current instance of the XAML reader.</param>
      <param name="value">The StartColumnName property identifier or name.</param>
    </member>
    <member name="M:System.Activities.Debugger.XamlDebuggerXmlReader.SetStartLine(System.Object,System.Object)">
      <summary>Sets the value of the attached property named in the StartLineName dependency property field of the specified instance of a XAML reader.</summary>
      <param name="instance">The current instance of the XAML reader.</param>
      <param name="value">The StartLineName property identifier or name.</param>
    </member>
    <member name="E:System.Activities.Debugger.XamlDebuggerXmlReader.SourceLocationFound">
      <summary>Occurs when the source location is found.</summary>
    </member>
    <member name="F:System.Activities.Debugger.XamlDebuggerXmlReader.StartColumnName">
      <summary>The name of an attached property that represents the starting column of the activity in its XAML form.</summary>
    </member>
    <member name="F:System.Activities.Debugger.XamlDebuggerXmlReader.StartLineName">
      <summary>The name of an attached property that represents the starting line of the activity in its XAML form.</summary>
    </member>
    <member name="P:System.Activities.Debugger.XamlDebuggerXmlReader.Type">
      <summary>Gets the record type at the XAML start node.</summary>
      <returns>A XAML record type.</returns>
    </member>
    <member name="P:System.Activities.Debugger.XamlDebuggerXmlReader.Value">
      <summary>Gets the element at the node currently being read.</summary>
      <returns>An element in an XAML file.</returns>
    </member>
    <member name="T:System.Activities.Debugger.Symbol.ActivitySymbol">
      <summary>Represents an activity symbol.</summary>
    </member>
    <member name="P:System.Activities.Debugger.Symbol.ActivitySymbol.EndColumn">
      <summary>Gets the final column in a range of one or more columns in the source code file.</summary>
      <returns>The final column in a range of one or more columns.</returns>
    </member>
    <member name="P:System.Activities.Debugger.Symbol.ActivitySymbol.EndLine">
      <summary>Gets the final line in a range of one or more lines in the source code file.</summary>
      <returns>The final line in a range of one or more lines in the source code file.</returns>
    </member>
    <member name="P:System.Activities.Debugger.Symbol.ActivitySymbol.Id">
      <summary>Gets the identification for the activity.</summary>
      <returns>The identification for the activity.</returns>
    </member>
    <member name="P:System.Activities.Debugger.Symbol.ActivitySymbol.StartColumn">
      <summary>Gets the first column in a range of one or more columns in the source code file.</summary>
      <returns>The first column in a range of one or more columns in the source code file.</returns>
    </member>
    <member name="P:System.Activities.Debugger.Symbol.ActivitySymbol.StartLine">
      <summary>Gets the first line in a range of one or more lines in the source code file.</summary>
      <returns>The first line in a range of one or more lines in the source code file.</returns>
    </member>
    <member name="M:System.Activities.Debugger.Symbol.ActivitySymbol.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="T:System.Activities.Debugger.Symbol.DebugSymbol">
      <summary>Represents a debug symbol.</summary>
    </member>
    <member name="M:System.Activities.Debugger.Symbol.DebugSymbol.GetSymbol(System.Object)">
      <summary>Gets a symbol for the debug symbol.</summary>
      <returns>The symbol.</returns>
      <param name="instance">The instance of the object.</param>
    </member>
    <member name="M:System.Activities.Debugger.Symbol.DebugSymbol.SetSymbol(System.Object,System.Object)">
      <summary>The symbol for the debug symbol.</summary>
      <param name="instance">The instance of the object.</param>
      <param name="value">The value of the symbol.</param>
    </member>
    <member name="F:System.Activities.Debugger.Symbol.DebugSymbol.SymbolName">
      <summary>Specifies the symbol name.</summary>
    </member>
    <member name="T:System.Activities.Debugger.Symbol.WorkflowSymbol">
      <summary>Represents a workflow symbol.</summary>
    </member>
    <member name="M:System.Activities.Debugger.Symbol.WorkflowSymbol.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Debugger.Symbol.WorkflowSymbol" /> class.</summary>
    </member>
    <member name="M:System.Activities.Debugger.Symbol.WorkflowSymbol.CalculateChecksum">
      <summary>Indicates whether the workflow symbol to calculate the checksum symbols.</summary>
      <returns>True if the workflow symbol to calculate the checksum symbols; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.Debugger.Symbol.WorkflowSymbol.Decode(System.String)">
      <summary>Converts the data encoding format into a data object for a specified type.</summary>
      <returns>The data encoded format converts into a data object for a specified type.</returns>
      <param name="symbolString">The symbol string.</param>
    </member>
    <member name="M:System.Activities.Debugger.Symbol.WorkflowSymbol.Encode">
      <summary>Specifies the encoding format for the symbol.</summary>
      <returns>The encoding format for the symbol.</returns>
    </member>
    <member name="P:System.Activities.Debugger.Symbol.WorkflowSymbol.FileName">
      <summary>Gets or sets the file name for the workflow symbol.</summary>
      <returns>The file name for the workflow symbol.</returns>
    </member>
    <member name="M:System.Activities.Debugger.Symbol.WorkflowSymbol.GetChecksum">
      <summary>Gets the checksum for the workflow symbol.</summary>
      <returns>The checksum for the workflow symbol.</returns>
    </member>
    <member name="P:System.Activities.Debugger.Symbol.WorkflowSymbol.Symbols">
      <summary>Gets or sets the collection of symbols.</summary>
      <returns>The collection of symbols.</returns>
    </member>
    <member name="M:System.Activities.Debugger.Symbol.WorkflowSymbol.ToString">
      <summary>Returns a string that represents the workflow symbol.</summary>
      <returns>A string that represents the workflow symbol.</returns>
    </member>
    <member name="T:System.Activities.DurableInstancing.ActivatableWorkflowsQueryResult">
      <summary>Contains the results from executing the <see cref="T:System.Activities.DurableInstancing.QueryActivatableWorkflowsCommand" /> against an instance store.</summary>
    </member>
    <member name="M:System.Activities.DurableInstancing.ActivatableWorkflowsQueryResult.#ctor">
      <summary>Initializes an instance of the <see cref="T:System.Activities.DurableInstancing.ActivatableWorkflowsQueryResult" /> class.</summary>
    </member>
    <member name="M:System.Activities.DurableInstancing.ActivatableWorkflowsQueryResult.#ctor(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object})">
      <summary>Creates an instance of the <see cref="T:System.Activities.DurableInstancing.ActivatableWorkflowsQueryResult" /> class and initializes the <see cref="P:System.Activities.DurableInstancing.ActivatableWorkflowsQueryResult.ActivationParameters" /> property with the data in the dictionary object passed in as a parameter.</summary>
      <param name="parameters">A dictionary object containing activation parameters.</param>
    </member>
    <member name="M:System.Activities.DurableInstancing.ActivatableWorkflowsQueryResult.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}})">
      <summary>Creates an instance of the <see cref="T:System.Activities.DurableInstancing.ActivatableWorkflowsQueryResult" /> class and initializes the <see cref="P:System.Activities.DurableInstancing.ActivatableWorkflowsQueryResult.ActivationParameters" /> property with the data in the enumerable dictionary object passed in as a parameter.</summary>
      <param name="parameters">An enumerable dictionary object containing activation parameters.</param>
    </member>
    <member name="P:System.Activities.DurableInstancing.ActivatableWorkflowsQueryResult.ActivationParameters">
      <summary>A list of activation parameters that a generic host uses to create a workflow host.</summary>
      <returns>A List object containing activation parameters. </returns>
    </member>
    <member name="T:System.Activities.DurableInstancing.CreateWorkflowOwnerCommand">
      <summary>Use this persistence command to register a workflow service host as a lock owner in the persistence database.</summary>
    </member>
    <member name="M:System.Activities.DurableInstancing.CreateWorkflowOwnerCommand.#ctor">
      <summary>Initializes an instance of the <see cref="T:System.Activities.DurableInstancing.CreateWorkflowOwnerCommand" /> class.</summary>
    </member>
    <member name="P:System.Activities.DurableInstancing.CreateWorkflowOwnerCommand.InstanceOwnerMetadata">
      <summary>Gets the metadata about the instance owner (currently has a one-to-one mapping to a service host) in a dictionary with an XName object as the key and an <see cref="T:System.Runtime.Persistence.InstanceValue" /> object as a value.</summary>
      <returns>The metadata about the instance owner.</returns>
    </member>
    <member name="T:System.Activities.DurableInstancing.CreateWorkflowOwnerWithIdentityCommand">
      <summary>Specifies creation of a workflow owner with identity command.</summary>
    </member>
    <member name="M:System.Activities.DurableInstancing.CreateWorkflowOwnerWithIdentityCommand.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.DurableInstancing.CreateWorkflowOwnerWithIdentityCommand" /> class.</summary>
    </member>
    <member name="P:System.Activities.DurableInstancing.CreateWorkflowOwnerWithIdentityCommand.InstanceOwnerMetadata">
      <summary>Gets the metadata about the instance owner in a dictionary with an XName object as the key and an InstanceValue object as a value.</summary>
      <returns>The metadata about the instance owner.</returns>
    </member>
    <member name="T:System.Activities.DurableInstancing.DeleteWorkflowOwnerCommand">
      <summary>Deletes lock owner information from the persistence database. </summary>
    </member>
    <member name="M:System.Activities.DurableInstancing.DeleteWorkflowOwnerCommand.#ctor">
      <summary>Initializes an instance of the <see cref="T:System.Activities.DurableInstancing.DeleteWorkflowOwnerCommand" /> class. </summary>
    </member>
    <member name="T:System.Activities.DurableInstancing.HasActivatableWorkflowEvent">
      <summary>Represents an event that an instance store raises to notify generic hosts about the existence of activatable instances in the persistence database. </summary>
    </member>
    <member name="M:System.Activities.DurableInstancing.HasActivatableWorkflowEvent.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.DurableInstancing.HasActivatableWorkflowEvent" /> class.</summary>
    </member>
    <member name="T:System.Activities.DurableInstancing.HasRunnableWorkflowEvent">
      <summary>Represents an event that the SQL Workflow Instance Store raises to notify workflow hosts about the existence of runnable instances in the persistence database. </summary>
    </member>
    <member name="M:System.Activities.DurableInstancing.HasRunnableWorkflowEvent.#ctor">
      <summary>Initializes an instance of the <see cref="T:System.Activities.DurableInstancing.HasRunnableWorkflowEvent" /> class.</summary>
    </member>
    <member name="T:System.Activities.DurableInstancing.LoadWorkflowByInstanceKeyCommand">
      <summary>A persistence command that loads a workflow instance by using the instance key associated with the instance.</summary>
    </member>
    <member name="M:System.Activities.DurableInstancing.LoadWorkflowByInstanceKeyCommand.#ctor">
      <summary>Initializes an instance of the <see cref="T:System.Activities.DurableInstancing.LoadWorkflowByInstanceKeyCommand" /> class.</summary>
    </member>
    <member name="P:System.Activities.DurableInstancing.LoadWorkflowByInstanceKeyCommand.AcceptUninitializedInstance">
      <summary>Gets a value that indicates whether to allow loading a workflow instance that is in an uninitialized state.</summary>
      <returns>true if the workflow instance is allowed to be loaded when in an uninitialized state; otherwise false.</returns>
    </member>
    <member name="P:System.Activities.DurableInstancing.LoadWorkflowByInstanceKeyCommand.AssociateInstanceKeyToInstanceId">
      <summary>Gets or sets the instance identifier associated with an instance key.</summary>
      <returns>The instance identifier.</returns>
    </member>
    <member name="P:System.Activities.DurableInstancing.LoadWorkflowByInstanceKeyCommand.InstanceKeysToAssociate">
      <summary>Gets the instance keys to be associated with an instance in the persistence store.</summary>
      <returns>The instance keys.</returns>
    </member>
    <member name="P:System.Activities.DurableInstancing.LoadWorkflowByInstanceKeyCommand.LookupInstanceKey">
      <summary>Gets the instance key used to identify the instance to be loaded.</summary>
      <returns>The instance key.</returns>
    </member>
    <member name="T:System.Activities.DurableInstancing.LoadWorkflowCommand">
      <summary>A persistence command that loads a workflow instance based on state information of the instance in the persistence store.</summary>
    </member>
    <member name="M:System.Activities.DurableInstancing.LoadWorkflowCommand.#ctor">
      <summary>Initializes an instance of the <see cref="T:System.Activities.DurableInstancing.LoadWorkflowCommand" /> class.</summary>
    </member>
    <member name="P:System.Activities.DurableInstancing.LoadWorkflowCommand.AcceptUninitializedInstance">
      <summary>Gets a value that indicates whether to allow loading an uninitialized instance.</summary>
      <returns>true if loading an uninitialized instance is allowed; otherwise false.</returns>
    </member>
    <member name="T:System.Activities.DurableInstancing.QueryActivatableWorkflowsCommand">
      <summary>Represents the command that a generic host executes against an instance store to retrieve activation parameters. The generic host uses these activation parameters to create a workflow host, which in turn loads a runnable service instance.</summary>
    </member>
    <member name="M:System.Activities.DurableInstancing.QueryActivatableWorkflowsCommand.#ctor">
      <summary>Initializes an instance of the <see cref="T:System.Activities.DurableInstancing.QueryActivatableWorkflowsCommand" /> class.</summary>
    </member>
    <member name="T:System.Activities.DurableInstancing.SaveWorkflowCommand">
      <summary>A persistence command that lets you save instance state information into the persistence store.</summary>
    </member>
    <member name="M:System.Activities.DurableInstancing.SaveWorkflowCommand.#ctor">
      <summary>Initializes an instance of the <see cref="T:System.Activities.DurableInstancing.SaveWorkflowCommand" /> class. </summary>
    </member>
    <member name="P:System.Activities.DurableInstancing.SaveWorkflowCommand.CompleteInstance">
      <summary>Sets the status of the instance in the persistence database to “Completed” and deletes the state information from the database unless the <see cref="P:System.Activities.DurableInstancing.SqlWorkflowInstanceStore.InstanceCompletionAction" /> property is set to “Delete Nothing”.</summary>
      <returns>true if the status of the instance is “Completed” and the state information is deleted; otherwise false. </returns>
    </member>
    <member name="P:System.Activities.DurableInstancing.SaveWorkflowCommand.InstanceData">
      <summary>Gets the instance data to be saved into the persistence store. A dictionary that contains names of properties and their values.</summary>
      <returns>The dictionary that contains names of properties and their values.</returns>
    </member>
    <member name="P:System.Activities.DurableInstancing.SaveWorkflowCommand.InstanceKeyMetadataChanges">
      <summary>Gets a dictionary with an instance key as the key and a dictionary of XName and <see cref="T:System.Runtime.Persistence.InstanceValue" /> pairs as the value.</summary>
      <returns>The dictionaries with key/value pairs.</returns>
    </member>
    <member name="P:System.Activities.DurableInstancing.SaveWorkflowCommand.InstanceKeysToAssociate">
      <summary>Contains instance keys that must be associated with an instance. A dictionary that contains a GUID associated with an instance key and metadata associated with the instance key.</summary>
      <returns>The instance keys that must be associated with an instance.</returns>
    </member>
    <member name="P:System.Activities.DurableInstancing.SaveWorkflowCommand.InstanceKeysToComplete">
      <summary>Gets a collection of instance keys that must be disassociated with an instance.</summary>
      <returns>A collection of instance keys that must be disassociated with an instance.</returns>
    </member>
    <member name="P:System.Activities.DurableInstancing.SaveWorkflowCommand.InstanceKeysToFree">
      <summary>Gets a collection of instance keys to be deleted from the persistence store.</summary>
      <returns>A collection of instance keys to be deleted from the persistence store.</returns>
    </member>
    <member name="P:System.Activities.DurableInstancing.SaveWorkflowCommand.InstanceMetadataChanges">
      <summary>Gets a dictionary that contains changes to instance metadata.</summary>
      <returns>The changes to instance metadata.</returns>
    </member>
    <member name="P:System.Activities.DurableInstancing.SaveWorkflowCommand.UnlockInstance">
      <summary>Removes the lock on an instance. Sets the lock owner to null for an instance.</summary>
      <returns>true if the lock is removed on an instance; otherwise false.</returns>
    </member>
    <member name="T:System.Activities.DurableInstancing.TryLoadRunnableWorkflowCommand">
      <summary>Represents the command that a workflow host executes against an instance store to load runnable instances in the persistence store into the memory.</summary>
    </member>
    <member name="M:System.Activities.DurableInstancing.TryLoadRunnableWorkflowCommand.#ctor">
      <summary>Initializes an instance of the <see cref="T:System.Activities.DurableInstancing.TryLoadRunnableWorkflowCommand" /> class.</summary>
    </member>
    <member name="T:System.Activities.DynamicUpdate.ActivityBlockingUpdate">
      <summary>Represents an activity blocking update.</summary>
    </member>
    <member name="M:System.Activities.DynamicUpdate.ActivityBlockingUpdate.#ctor(System.Activities.Activity,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.DynamicUpdate.ActivityBlockingUpdate" /> class with the specified activity, original activity identifier and reason.</summary>
      <param name="activity">The activity workflow definition.</param>
      <param name="originalActivityId">The original activity identifier.</param>
      <param name="reason">The reason to block activities.</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.ActivityBlockingUpdate.#ctor(System.Activities.Activity,System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.DynamicUpdate.ActivityBlockingUpdate" /> class with the specified activity, original activity identifier, reason and activity instance identifier.</summary>
      <param name="activity">The activity workflow definition.</param>
      <param name="originalActivityId">The original activity identifier.</param>
      <param name="reason">The reason to block activities.</param>
      <param name="activityInstanceId">The identifier of executing activity instance.</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.ActivityBlockingUpdate.#ctor(System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.DynamicUpdate.ActivityBlockingUpdate" /> class with the specified updated activity identifier, original activity identifier and reason.</summary>
      <param name="updatedActivityId">The updated activity identifier.</param>
      <param name="originalActivityId">The original activity identifier.</param>
      <param name="reason">The reason to block activities.</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.ActivityBlockingUpdate.#ctor(System.String,System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.DynamicUpdate.ActivityBlockingUpdate" /> class with the specified updated activity identifier, original activity identifier, reason and activity instance identifier.</summary>
      <param name="updatedActivityId">The updated activity identifier.</param>
      <param name="originalActivityId">The original activity identifier.</param>
      <param name="reason">The reason to block activities.</param>
      <param name="activityInstanceId">The identifier of executing activity instance.</param>
    </member>
    <member name="P:System.Activities.DynamicUpdate.ActivityBlockingUpdate.Activity">
      <summary>Gets the activity of the workflow definition.</summary>
      <returns>The activity of the workflow definition.</returns>
    </member>
    <member name="P:System.Activities.DynamicUpdate.ActivityBlockingUpdate.ActivityInstanceId">
      <summary>Gets or sets the unique identifier of the currently executing activity instance.</summary>
      <returns>The unique identifier of the currently executing activity instance.</returns>
    </member>
    <member name="P:System.Activities.DynamicUpdate.ActivityBlockingUpdate.OriginalActivityId">
      <summary>Gets or sets the identifier of the original activity in the workflow definition.</summary>
      <returns>The identifier of the original activity in the workflow definition.</returns>
    </member>
    <member name="P:System.Activities.DynamicUpdate.ActivityBlockingUpdate.Reason">
      <summary>Gets or sets the reason for the activity blocking.</summary>
      <returns>The reason for the activity blocking.</returns>
    </member>
    <member name="P:System.Activities.DynamicUpdate.ActivityBlockingUpdate.UpdatedActivityId">
      <summary>Gets or sets the updated activity identifier in the workflow definition.</summary>
      <returns>The updated activity identifier in the workflow definition.</returns>
    </member>
    <member name="T:System.Activities.DynamicUpdate.DynamicUpdateInfo">
      <summary>Specifies dynamic update information.</summary>
    </member>
    <member name="M:System.Activities.DynamicUpdate.DynamicUpdateInfo.GetMapItem(System.Object)">
      <summary>Gets the map item for the <see cref="T:System.Activities.DynamicUpdate.DynamicUpdateInfo" />.</summary>
      <returns>The map item.</returns>
      <param name="instance">The instance of the specified object.</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.DynamicUpdateInfo.GetOriginalActivityBuilder(System.Object)">
      <summary>Gets the original activity builder for the <see cref="T:System.Activities.DynamicUpdate.DynamicUpdateInfo" />.</summary>
      <returns>The original activity builder.</returns>
      <param name="instance">The instance of the specified object.</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.DynamicUpdateInfo.GetOriginalDefinition(System.Object)">
      <summary>Gets the original definition for the <see cref="T:System.Activities.DynamicUpdate.DynamicUpdateInfo" />.</summary>
      <returns>The original definition.</returns>
      <param name="instance">The instance of the specified object.</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.DynamicUpdateInfo.SetMapItem(System.Object,System.Activities.DynamicUpdate.DynamicUpdateMapItem)">
      <summary>Sets the map item for the <see cref="T:System.Activities.DynamicUpdate.DynamicUpdateInfo" />.</summary>
      <param name="instance">The instance of the specified object.</param>
      <param name="mapItem">The map item to be set.</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.DynamicUpdateInfo.SetOriginalActivityBuilder(System.Object,System.Activities.ActivityBuilder)">
      <summary>Sets the original activity builder for the <see cref="T:System.Activities.DynamicUpdate.DynamicUpdateInfo" />.</summary>
      <param name="instance">The instance of the specified object.</param>
      <param name="originalActivityBuilder">The original activity builder to be set.</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.DynamicUpdateInfo.SetOriginalDefinition(System.Object,System.Activities.Activity)">
      <summary>Sets the original definition for the <see cref="T:System.Activities.DynamicUpdate.DynamicUpdateInfo" />.</summary>
      <param name="instance">The instance of the specified object.</param>
      <param name="originalDefinition">The original definition to be set.</param>
    </member>
    <member name="T:System.Activities.DynamicUpdate.DynamicUpdateMap">
      <summary>Specifies options for a dynamic update map.</summary>
    </member>
    <member name="M:System.Activities.DynamicUpdate.DynamicUpdateMap.CalculateImplementationMapItems(System.Activities.Activity)">
      <summary>Calculates the map items used in the implementation of <see cref="T:System.Activities.DynamicUpdate.DynamicUpdateMap" /> with specified activity definition.</summary>
      <returns>The calculated map items.</returns>
      <param name="activityDefinitionToBeUpdated">The activity definition to be updated.</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.DynamicUpdateMap.CalculateImplementationMapItems(System.Activities.Activity,System.Activities.LocationReferenceEnvironment)">
      <summary>Calculates the map items used in the implementation of <see cref="T:System.Activities.DynamicUpdate.DynamicUpdateMap" /> with specified activity definition and environment..</summary>
      <returns>The calculated map items.</returns>
      <param name="activityDefinitionToBeUpdated">The activity definition to be updated.</param>
      <param name="environment">The environment.</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.DynamicUpdateMap.CalculateMapItems(System.Activities.Activity)">
      <summary>Calculates the map items used in <see cref="T:System.Activities.DynamicUpdate.DynamicUpdateMap" /> with specified workflow definition.</summary>
      <returns>The calculated map items.</returns>
      <param name="workflowDefinitionToBeUpdated">The activity definition to be updated.</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.DynamicUpdateMap.CalculateMapItems(System.Activities.Activity,System.Activities.LocationReferenceEnvironment)">
      <summary>Calculates the map items used in <see cref="T:System.Activities.DynamicUpdate.DynamicUpdateMap" /> with specified workflow definition and environment.</summary>
      <returns>The calculated map items.</returns>
      <param name="workflowDefinitionToBeUpdated">The activity definition to be updated.</param>
      <param name="environment">The environment.</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.DynamicUpdateMap.Merge(System.Activities.DynamicUpdate.DynamicUpdateMap[])">
      <summary>Merges the dynamic update map.</summary>
      <returns>The merged dynamic update map.</returns>
      <param name="maps">The collection of maps to be merged.</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.DynamicUpdateMap.Merge(System.Collections.Generic.IEnumerable{System.Activities.DynamicUpdate.DynamicUpdateMap})">
      <summary>Merges the dynamic update map.</summary>
      <returns>The merged dynamic update map.</returns>
      <param name="maps">The maps to be merged.</param>
    </member>
    <member name="P:System.Activities.DynamicUpdate.DynamicUpdateMap.NoChanges">
      <summary>Gets the dynamic update map without changes.</summary>
      <returns>The dynamic update map without changes.</returns>
    </member>
    <member name="M:System.Activities.DynamicUpdate.DynamicUpdateMap.Query(System.Activities.Activity,System.Activities.Activity)">
      <summary>Displays the dynamic update map query.</summary>
      <returns>The dynamic update map query.</returns>
      <param name="updatedWorkflowDefinition">The updated workflow information.</param>
      <param name="originalWorkflowDefinition">The original workflow definition.</param>
    </member>
    <member name="T:System.Activities.DynamicUpdate.DynamicUpdateMapBuilder">
      <summary>Represents a dynamic update map builder.</summary>
    </member>
    <member name="M:System.Activities.DynamicUpdate.DynamicUpdateMapBuilder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.DynamicUpdate.DynamicUpdateMapBuilder" /> class.</summary>
    </member>
    <member name="M:System.Activities.DynamicUpdate.DynamicUpdateMapBuilder.CreateMap">
      <summary>Creates map for the <see cref="T:System.Activities.DynamicUpdate.DynamicUpdateMapBuilder" />.</summary>
      <returns>The created map.</returns>
    </member>
    <member name="M:System.Activities.DynamicUpdate.DynamicUpdateMapBuilder.CreateMap(System.Collections.Generic.IList{System.Activities.DynamicUpdate.ActivityBlockingUpdate}@)">
      <summary>Creates map for the <see cref="T:System.Activities.DynamicUpdate.DynamicUpdateMapBuilder" /> with specified activities blocking update.</summary>
      <returns>The created map.</returns>
      <param name="activitiesBlockingUpdate">The activities blocking update.</param>
    </member>
    <member name="P:System.Activities.DynamicUpdate.DynamicUpdateMapBuilder.DisallowUpdateInside">
      <summary>Gets the disallow update inside for the <see cref="T:System.Activities.DynamicUpdate.DynamicUpdateMapBuilder" />.</summary>
      <returns>The disallow update inside.</returns>
    </member>
    <member name="P:System.Activities.DynamicUpdate.DynamicUpdateMapBuilder.ForImplementation">
      <summary>Gets or sets whether the <see cref="T:System.Activities.DynamicUpdate.DynamicUpdateMapBuilder" /> is for implementation.</summary>
      <returns>True if the <see cref="T:System.Activities.DynamicUpdate.DynamicUpdateMapBuilder" /> is for implementation; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.DynamicUpdate.DynamicUpdateMapBuilder.LookupImplementationMap">
      <summary>Gets or sets the lookup implementation map for the <see cref="T:System.Activities.DynamicUpdate.DynamicUpdateMapBuilder" />.</summary>
      <returns>The lookup implementation map.</returns>
    </member>
    <member name="P:System.Activities.DynamicUpdate.DynamicUpdateMapBuilder.LookupMapItem">
      <summary>Gets or sets the lookup map item for the <see cref="T:System.Activities.DynamicUpdate.DynamicUpdateMapBuilder" />.</summary>
      <returns>The lookup map item.</returns>
    </member>
    <member name="P:System.Activities.DynamicUpdate.DynamicUpdateMapBuilder.OriginalEnvironment">
      <summary>Gets or sets the location reference environment for the <see cref="T:System.Activities.DynamicUpdate.DynamicUpdateMapBuilder" />.</summary>
      <returns>The location reference environment.</returns>
    </member>
    <member name="P:System.Activities.DynamicUpdate.DynamicUpdateMapBuilder.OriginalWorkflowDefinition">
      <summary>Gets or sets the original workflow definition.</summary>
      <returns>The original workflow definition.</returns>
    </member>
    <member name="P:System.Activities.DynamicUpdate.DynamicUpdateMapBuilder.UpdatedEnvironment">
      <summary>Gets or sets the updated environment for the <see cref="T:System.Activities.DynamicUpdate.DynamicUpdateMapBuilder" />.</summary>
      <returns>The updated environment.</returns>
    </member>
    <member name="P:System.Activities.DynamicUpdate.DynamicUpdateMapBuilder.UpdatedWorkflowDefinition">
      <summary>Gets or sets the updated workflow definition for the <see cref="T:System.Activities.DynamicUpdate.DynamicUpdateMapBuilder" />.</summary>
      <returns>The updated workflow definition.</returns>
    </member>
    <member name="T:System.Activities.DynamicUpdate.DynamicUpdateMapItem">
      <summary>Represents a single map item contained in the dynamic update map.</summary>
    </member>
    <member name="T:System.Activities.DynamicUpdate.DynamicUpdateMapQuery">
      <summary>Represents a dynamic update map query.</summary>
    </member>
    <member name="M:System.Activities.DynamicUpdate.DynamicUpdateMapQuery.CanApplyUpdateWhileRunning(System.Activities.Activity)">
      <summary>Specifies whether the <see cref="T:System.Activities.DynamicUpdate.DynamicUpdateMapQuery" /> can update while running.</summary>
      <returns>True if the <see cref="T:System.Activities.DynamicUpdate.DynamicUpdateMapQuery" /> can update while running; otherwise, false.</returns>
      <param name="activity">The current activity.</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.DynamicUpdateMapQuery.FindMatch(System.Activities.Activity)">
      <summary>Searches for the match with <see cref="T:System.Activities.DynamicUpdate.DynamicUpdateMapQuery" /> using the specified activities.</summary>
      <returns>The match for the activity.</returns>
      <param name="activity">The activity to be searched for a match.</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.DynamicUpdateMapQuery.FindMatch(System.Activities.Variable)">
      <summary>Searches for the match with <see cref="T:System.Activities.DynamicUpdate.DynamicUpdateMapQuery" /> using the specified variable.</summary>
      <returns>The match for the variable.</returns>
      <param name="variable">The variable to be searched for a match.</param>
    </member>
    <member name="T:System.Activities.DynamicUpdate.DynamicUpdateServices">
      <summary>Represents dynamic update services.</summary>
    </member>
    <member name="M:System.Activities.DynamicUpdate.DynamicUpdateServices.CreateUpdateMap(System.Activities.Activity)">
      <summary>Creates an update map with specified workflow definition.</summary>
      <returns>The created update map.</returns>
      <param name="updatedWorkflowDefinition">The updated workflow definition.</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.DynamicUpdateServices.CreateUpdateMap(System.Activities.Activity,System.Collections.Generic.IEnumerable{System.Activities.Activity})">
      <summary>Creates an update map with specified workflow definition and list of disallow update inside activities.</summary>
      <returns>The created update map.</returns>
      <param name="updatedWorkflowDefinition">The updated workflow definition.</param>
      <param name="disallowUpdateInsideActivities">The list of activities.</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.DynamicUpdateServices.CreateUpdateMap(System.Activities.Activity,System.Collections.Generic.IEnumerable{System.Activities.Activity},System.Collections.Generic.IList{System.Activities.DynamicUpdate.ActivityBlockingUpdate}@)">
      <summary>Creates an update map with specified workflow definition, list of disallow update inside activities and blocking updates.</summary>
      <returns>The created update map.</returns>
      <param name="updatedWorkflowDefinition">The updated workflow definition.</param>
      <param name="disallowUpdateInsideActivities">The list of activities.</param>
      <param name="activitiesBlockingUpdate">The list of blocking update.</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.DynamicUpdateServices.CreateUpdateMap(System.Activities.ActivityBuilder)">
      <summary>Creates an update map with specified activity definition.</summary>
      <returns>The created update map.</returns>
      <param name="updatedActivityDefinition">The updated activity definition.</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.DynamicUpdateServices.CreateUpdateMap(System.Activities.ActivityBuilder,System.Collections.Generic.IEnumerable{System.Activities.Activity})">
      <summary>Creates an update map with specified activity definition and list of disallow update inside activities.</summary>
      <returns>The created update map.</returns>
      <param name="updatedActivityDefinition">The updated activity definition.</param>
      <param name="disallowUpdateInsideActivities">The list of activities.</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.DynamicUpdateServices.CreateUpdateMap(System.Activities.ActivityBuilder,System.Collections.Generic.IEnumerable{System.Activities.Activity},System.Collections.Generic.IList{System.Activities.DynamicUpdate.ActivityBlockingUpdate}@)">
      <summary>Creates an update map with specified activity definition and list of disallow update inside activities and blocking updates.</summary>
      <returns>The created update map.</returns>
      <param name="updatedActivityDefinition">The updated activity definition.</param>
      <param name="disallowUpdateInsideActivities">The list of activities.</param>
      <param name="activitiesBlockingUpdate">The list of blocking update.</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.DynamicUpdateServices.GetImplementationMap(System.Activities.Activity)">
      <summary>Gets an implementation map for the <see cref="T:System.Activities.DynamicUpdate.DynamicUpdateServices" />.</summary>
      <returns>The retrieved implementation map.</returns>
      <param name="targetActivity">The target activity.</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.DynamicUpdateServices.PrepareForUpdate(System.Activities.Activity)">
      <summary>Prepares a workflow definition to be updated.</summary>
      <param name="workflowDefinitionToBeUpdated">The workflow to be updated.</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.DynamicUpdateServices.PrepareForUpdate(System.Activities.ActivityBuilder)">
      <summary>Prepares a workflow definition to be updated.</summary>
      <param name="activityDefinitionToBeUpdated">The activity to be updated.</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.DynamicUpdateServices.SetImplementationMap(System.Activities.Activity,System.Activities.DynamicUpdate.DynamicUpdateMap)">
      <summary>Sets an implementation map for the <see cref="T:System.Activities.DynamicUpdate.DynamicUpdateServices" />.</summary>
      <param name="targetActivity">The target activity.</param>
      <param name="implementationMap">The set implementation map.</param>
    </member>
    <member name="T:System.Activities.DynamicUpdate.InstanceUpdateException">
      <summary>Represents an instance update exception.</summary>
    </member>
    <member name="M:System.Activities.DynamicUpdate.InstanceUpdateException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.DynamicUpdate.InstanceUpdateException" /> class.</summary>
    </member>
    <member name="M:System.Activities.DynamicUpdate.InstanceUpdateException.#ctor(System.Collections.Generic.IList{System.Activities.DynamicUpdate.ActivityBlockingUpdate})">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.DynamicUpdate.InstanceUpdateException" /> class with the specified blocking activities.</summary>
      <param name="blockingActivities">The activities to block in this instance.</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.InstanceUpdateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.DynamicUpdate.InstanceUpdateException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.InstanceUpdateException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.DynamicUpdate.InstanceUpdateException" /> class with the specified message.</summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.InstanceUpdateException.#ctor(System.String,System.Collections.Generic.IList{System.Activities.DynamicUpdate.ActivityBlockingUpdate})">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.DynamicUpdate.InstanceUpdateException" /> class with the specified message and blocking activities.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="blockingActivities">The activities to block in this instance.</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.InstanceUpdateException.#ctor(System.String,System.Collections.Generic.IList{System.Activities.DynamicUpdate.ActivityBlockingUpdate},System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.DynamicUpdate.InstanceUpdateException" /> class.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="blockingActivities">The activities to block in this instance.</param>
      <param name="innerException">The exception that is the cause of the current exception.</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.InstanceUpdateException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.DynamicUpdate.InstanceUpdateException" /> class with the specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception.</param>
    </member>
    <member name="P:System.Activities.DynamicUpdate.InstanceUpdateException.BlockingActivities">
      <summary>Gets the collection of blocking activities for the instance.</summary>
      <returns>The collection of blocking activities for the instance.</returns>
    </member>
    <member name="M:System.Activities.DynamicUpdate.InstanceUpdateException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the SerializationInfo object with additional exception information.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:System.Activities.DynamicUpdate.NativeActivityUpdateContext">
      <summary>Represents a native activity update context.</summary>
    </member>
    <member name="P:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ActivityInstanceId">
      <summary>Gets the unique identifier of the currently executing activity instance.</summary>
      <returns>The unique identifier of the currently executing activity instance.</returns>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.CreateBookmark">
      <summary>Creates a point at which a NativeActivity can passively wait to be resumed.</summary>
      <returns>A bookmark.</returns>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.CreateBookmark(System.Activities.BookmarkCallback)">
      <summary>Creates the point at which a NativeActivity can passively wait to be resumed and schedules the specified method to execute when notification of the resume operation completes.</summary>
      <returns>The callback method</returns>
      <param name="callback">The method to be called when a notification signals resumption of the NativeActivity.</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.CreateBookmark(System.Activities.BookmarkCallback,System.Activities.BookmarkOptions)">
      <summary>Creates the point at which a NativeActivity can passively wait to be resumed, with the specified method to execute when notification of the resume operation completes and with the specified option that governs how the bookmark is used during the execution of the current NativeActivity.</summary>
      <returns>A bookmark that includes the callback method and the bookmark execution option.</returns>
      <param name="callback">The method to be called when a notification signals resumption of the NativeActivity.</param>
      <param name="options">An enumerated setting that governs how the bookmark operates in relation to other threads during the execution of the current NativeActivity.</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.CreateBookmark(System.String)">
      <summary>Creates the point, with the specified name, at which NativeActivity can passively wait to be resumed.</summary>
      <returns>A bookmark that includes the name of the bookmark.</returns>
      <param name="name">The name of the bookmark.</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.CreateBookmark(System.String,System.Activities.BookmarkCallback)">
      <summary>Creates the point at which a NativeActivity can passively wait to be resumed with the specified name and with the specified method to execute when notification of the resume operation completes.</summary>
      <returns>A bookmark that includes the name of the bookmark and the callback method.</returns>
      <param name="name">The name of the bookmark.</param>
      <param name="callback">The method to be called when a notification signals resumption of the NativeActivity.</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.CreateBookmark(System.String,System.Activities.BookmarkCallback,System.Activities.BookmarkOptions)">
      <summary>Creates the point at which a NativeActivity can passively wait to be resumed with the specified name, the specified method to execute when notification of the resume operation completes and the specified option that governs how the bookmark is used during the execution of the current NativeActivity.</summary>
      <returns>A bookmark that includes the name of the bookmark, the callback method, and the bookmark execution option.</returns>
      <param name="name">The name of the bookmark.</param>
      <param name="callback">The method to be called when a notification signals resumption of the NativeActivity.</param>
      <param name="options">The bookmark options that govern how the bookmark is used during the execution of the current NativeActivity.</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.CreateBookmark(System.String,System.Activities.BookmarkCallback,System.Activities.BookmarkScope)">
      <summary>Creates the point at which a NativeActivity can passively wait to be resumed with the specified name, the specified method to execute when notification of the resume operation completes and the specified scope of the bookmark.</summary>
      <returns>A bookmark that includes the name of the bookmark, the callback method, and the scope of the bookmark.</returns>
      <param name="name">The name of the bookmark.</param>
      <param name="callback">The method to be called when a notification signals resumption of the NativeActivity.</param>
      <param name="scope">An identifier applied to a group of bookmarks that operate under the same protocol during a workflow runtime.</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.CreateBookmark(System.String,System.Activities.BookmarkCallback,System.Activities.BookmarkScope,System.Activities.BookmarkOptions)">
      <summary>Creates the point at which a NativeActivity can passively wait to be resumed with the specified name, the specified method to execute when notification of the resume operation completes and the specified scope of the bookmark and the specified option that governs how the bookmark is used during the execution of the current NativeActivity.</summary>
      <returns>A bookmark that includes the name of the bookmark, the callback method, the scope of the bookmark and the bookmark execution option.</returns>
      <param name="name">The name of the bookmark.</param>
      <param name="callback">The method to be called when a notification signals resumption of the NativeActivity.</param>
      <param name="scope">An identifier applied to a group of bookmarks that operate under the same protocol during a workflow runtime.</param>
      <param name="options">The bookmark options that govern how the bookmark is used during the execution of the current NativeActivity.</param>
    </member>
    <member name="P:System.Activities.DynamicUpdate.NativeActivityUpdateContext.DefaultBookmarkScope">
      <summary>Gets the bookmark scope associated with the root of the workflow.</summary>
      <returns>The bookmark scope associated with the root of the workflow.</returns>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.DisallowUpdate(System.String)">
      <summary>Disallows the updating of the <see cref="T:System.Activities.DynamicUpdate.NativeActivityUpdateContext" />.</summary>
      <param name="reason">The reason of disallowing the context.</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.FindExecutionProperty(System.String)">
      <summary>Finds the workflow execution property with the specified name.</summary>
      <returns>The workflow execution property with the specified name.</returns>
      <param name="name">The name of the workflow execution property.</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.GetLocation``1(System.Activities.Variable)">
      <summary>Returns the typed location for the specified referenced location.</summary>
      <returns>The typed location for the specified referenced location.</returns>
      <param name="variable">The variable from the location.</param>
      <typeparam name="T">The type of the location to return.</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.GetSavedOriginalValue(System.Activities.Activity)">
      <summary>Indicates the object to save the original value for the current activity.</summary>
      <returns>The object to save the original value for the current activity.</returns>
      <param name="childActivity">The child activity.</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.GetSavedOriginalValue(System.String)">
      <summary>Indicates the object to save the original value for the current activity.</summary>
      <returns>The object to save the original value for the current activity.</returns>
      <param name="propertyName">The name of the property.</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.GetValue(System.Activities.Argument)">
      <summary>Gets the value of the specified Argument.</summary>
      <returns>The value of the specified Argument.</returns>
      <param name="argument">The argument to inspect.</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.GetValue(System.Activities.RuntimeArgument)">
      <summary>Gets the value of the specified RuntimeArgument.</summary>
      <returns>the value of the specified RuntimeArgument.</returns>
      <param name="runtimeArgument">The argument to inspect.</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.GetValue(System.Activities.Variable)">
      <summary>Gets the value of the specified variable in the current NativeActivity instance.</summary>
      <returns>The value of the specified variable in the current NativeActivity instance.</returns>
      <param name="variable">The variable whose value is being retrieved during execution of the current NativeActivity instance.</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.GetValue``1(System.Activities.Variable{``0})">
      <summary>Returns the value of the specified generic variable in the current NativeActivity instance.</summary>
      <returns>The value of the specified generic variable in the current NativeActivity instance.</returns>
      <param name="variable">The generic variable whose value is being retrieved during execution of the current NativeActivity instance.</param>
      <typeparam name="T">The type of the variable whose value is being retrieved.</typeparam>
    </member>
    <member name="P:System.Activities.DynamicUpdate.NativeActivityUpdateContext.IsCancellationRequested">
      <summary>Gets or sets a value that indicates whether the currently executing NativeActivity instance is to be canceled.</summary>
      <returns>True if the currently executing NativeActivity instance is to be canceled; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.IsNewlyAdded(System.Activities.Activity)">
      <summary>Initializes whether the <see cref="T:System.Activities.DynamicUpdate.NativeActivityUpdateContext" /> is newly added.</summary>
      <returns>True if the <see cref="T:System.Activities.DynamicUpdate.NativeActivityUpdateContext" /> is newly added; otherwise, false.</returns>
      <param name="childActivity">The child activity.</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.RemoveAllBookmarks">
      <summary>Removes all the bookmarks associated with the currently executing NativeActivity instance.</summary>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.RemoveBookmark(System.Activities.Bookmark)">
      <summary>Removes the specified bookmark from the currently executing NativeActivity instance.</summary>
      <returns>True if the specified bookmark from the currently executing NativeActivity instance was removed; otherwise, false.</returns>
      <param name="bookmark">A point at which a NativeActivity instance can passively wait to be resumed.</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.RemoveBookmark(System.String)">
      <summary>Removes the bookmark with the specified name.</summary>
      <returns>True if the bookmark with the specified name was removed; otherwise, false.</returns>
      <param name="name">The name of the bookmark.</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.RemoveBookmark(System.String,System.Activities.BookmarkScope)">
      <summary>Removes the bookmark with the specified name and the specified bookmark scope.</summary>
      <returns>True if the bookmark with the specified name and the specified bookmark scope were removed; otherwise, false.</returns>
      <param name="name">The name of the bookmark.</param>
      <param name="scope">The unique GUID identifier for a group of Bookmark objects that are categorized as operating under the same protocol.</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleAction(System.Activities.ActivityAction,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified ActivityAction that has no parameters, and that bookmarks the specified callback locations where the parent process resumes upon completion of the ActivityAction.</summary>
      <param name="activityAction">An action that executes when a specific event occurs in the parent activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the ActivityAction.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the ActivityAction.</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleAction``1(System.Activities.ActivityAction{``0},``0,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified ActivityAction&lt;T&gt; that has one parameter for an in argument and bookmarks the specified callback locations where the parent process resumes upon completion of the ActivityAction&lt;T&gt;.</summary>
      <param name="activityAction">An action that executes when a specific event occurs in the parent activity.</param>
      <param name="argument">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the ActivityAction&lt;T&gt;.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the ActivityAction&lt;T&gt;.</param>
      <typeparam name="T">The data that is carried into an activity.</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleAction``10(System.Activities.ActivityAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10&gt; that has ten parameters for in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10&gt;.</summary>
      <param name="activityAction">An action that executes when a specific event occurs in the parent activity.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="argument6">An argument that carries data into an activity.</param>
      <param name="argument7">An argument that carries data into an activity.</param>
      <param name="argument8">An argument that carries data into an activity.</param>
      <param name="argument9">An argument that carries data into an activity.</param>
      <param name="argument10">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10&gt;.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10&gt;.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="T6">The data that is carried into an activity.</typeparam>
      <typeparam name="T7">The data that is carried into an activity.</typeparam>
      <typeparam name="T8">The data that is carried into an activity.</typeparam>
      <typeparam name="T9">The data that is carried into an activity.</typeparam>
      <typeparam name="T10">The data that is carried into an activity.</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleAction``11(System.Activities.ActivityAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11&gt; that has eleven parameters for in arguments, and that bookmarks the specified callback locations where the parent process resumes upon completion of the ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11&gt;.</summary>
      <param name="activityAction">An action that executes when a specific event occurs in the parent activity.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="argument6">An argument that carries data into an activity.</param>
      <param name="argument7">An argument that carries data into an activity.</param>
      <param name="argument8">An argument that carries data into an activity.</param>
      <param name="argument9">An argument that carries data into an activity.</param>
      <param name="argument10">An argument that carries data into an activity.</param>
      <param name="argument11">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11&gt;.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11&gt;.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="T6">The data that is carried into an activity.</typeparam>
      <typeparam name="T7">The data that is carried into an activity.</typeparam>
      <typeparam name="T8">The data that is carried into an activity.</typeparam>
      <typeparam name="T9">The data that is carried into an activity.</typeparam>
      <typeparam name="T10">The data that is carried into an activity.</typeparam>
      <typeparam name="T11">The data that is carried into an activity.</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleAction``12(System.Activities.ActivityAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12&gt; that has twelve parameters for in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12&gt;.</summary>
      <param name="activityAction">An action that executes when a specific event occurs in the parent activity.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="argument6">An argument that carries data into an activity.</param>
      <param name="argument7">An argument that carries data into an activity.</param>
      <param name="argument8">An argument that carries data into an activity.</param>
      <param name="argument9">An argument that carries data into an activity.</param>
      <param name="argument10">An argument that carries data into an activity.</param>
      <param name="argument11">An argument that carries data into an activity.</param>
      <param name="argument12">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12&gt;.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12&gt;.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="T6">The data that is carried into an activity.</typeparam>
      <typeparam name="T7">The data that is carried into an activity.</typeparam>
      <typeparam name="T8">The data that is carried into an activity.</typeparam>
      <typeparam name="T9">The data that is carried into an activity.</typeparam>
      <typeparam name="T10">The data that is carried into an activity.</typeparam>
      <typeparam name="T11">The data that is carried into an activity.</typeparam>
      <typeparam name="T12">The data that is carried into an activity.</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleAction``13(System.Activities.ActivityAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13&gt; that has thirteen parameters for in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13&gt;.</summary>
      <param name="activityAction">An action that executes when a specific event occurs in the parent activity.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="argument6">An argument that carries data into an activity.</param>
      <param name="argument7">An argument that carries data into an activity.</param>
      <param name="argument8">An argument that carries data into an activity.</param>
      <param name="argument9">An argument that carries data into an activity.</param>
      <param name="argument10">An argument that carries data into an activity.</param>
      <param name="argument11">An argument that carries data into an activity.</param>
      <param name="argument12">An argument that carries data into an activity.</param>
      <param name="argument13">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13&gt;.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13&gt;.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="T6">The data that is carried into an activity.</typeparam>
      <typeparam name="T7">The data that is carried into an activity.</typeparam>
      <typeparam name="T8">The data that is carried into an activity.</typeparam>
      <typeparam name="T9">The data that is carried into an activity.</typeparam>
      <typeparam name="T10">The data that is carried into an activity.</typeparam>
      <typeparam name="T11">The data that is carried into an activity.</typeparam>
      <typeparam name="T12">The data that is carried into an activity.</typeparam>
      <typeparam name="T13">The data that is carried into an activity.</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleAction``14(System.Activities.ActivityAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14&gt; that has fourteen parameters for in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14&gt;.</summary>
      <param name="activityAction">An action that executes when a specific event occurs in the parent activity.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="argument6">An argument that carries data into an activity.</param>
      <param name="argument7">An argument that carries data into an activity.</param>
      <param name="argument8">An argument that carries data into an activity.</param>
      <param name="argument9">An argument that carries data into an activity.</param>
      <param name="argument10">An argument that carries data into an activity.</param>
      <param name="argument11">An argument that carries data into an activity.</param>
      <param name="argument12">An argument that carries data into an activity.</param>
      <param name="argument13">An argument that carries data into an activity.</param>
      <param name="argument14">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14&gt;.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14&gt;.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="T6">The data that is carried into an activity.</typeparam>
      <typeparam name="T7">The data that is carried into an activity.</typeparam>
      <typeparam name="T8">The data that is carried into an activity.</typeparam>
      <typeparam name="T9">The data that is carried into an activity.</typeparam>
      <typeparam name="T10">The data that is carried into an activity.</typeparam>
      <typeparam name="T11">The data that is carried into an activity.</typeparam>
      <typeparam name="T12">The data that is carried into an activity.</typeparam>
      <typeparam name="T13">The data that is carried into an activity.</typeparam>
      <typeparam name="T14">The data that is carried into an activity.</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleAction``15(System.Activities.ActivityAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15&gt; that has fifteen parameters for in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15&gt;.</summary>
      <param name="activityAction">An action that executes when a specific event occurs in the parent activity.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="argument6">An argument that carries data into an activity.</param>
      <param name="argument7">An argument that carries data into an activity.</param>
      <param name="argument8">An argument that carries data into an activity.</param>
      <param name="argument9">An argument that carries data into an activity.</param>
      <param name="argument10">An argument that carries data into an activity.</param>
      <param name="argument11">An argument that carries data into an activity.</param>
      <param name="argument12">An argument that carries data into an activity.</param>
      <param name="argument13">An argument that carries data into an activity.</param>
      <param name="argument14">An argument that carries data into an activity.</param>
      <param name="argument15">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15&gt;.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15&gt;.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="T6">The data that is carried into an activity.</typeparam>
      <typeparam name="T7">The data that is carried into an activity.</typeparam>
      <typeparam name="T8">The data that is carried into an activity.</typeparam>
      <typeparam name="T9">The data that is carried into an activity.</typeparam>
      <typeparam name="T10">The data that is carried into an activity.</typeparam>
      <typeparam name="T11">The data that is carried into an activity.</typeparam>
      <typeparam name="T12">The data that is carried into an activity.</typeparam>
      <typeparam name="T13">The data that is carried into an activity.</typeparam>
      <typeparam name="T14">The data that is carried into an activity.</typeparam>
      <typeparam name="T15">The data that is carried into an activity.</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleAction``16(System.Activities.ActivityAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16&gt; that has sixteen parameters for in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16&gt;.</summary>
      <param name="activityAction">An action that executes when a specific event occurs in the parent activity.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="argument6">An argument that carries data into an activity.</param>
      <param name="argument7">An argument that carries data into an activity.</param>
      <param name="argument8">An argument that carries data into an activity.</param>
      <param name="argument9">An argument that carries data into an activity.</param>
      <param name="argument10">An argument that carries data into an activity.</param>
      <param name="argument11">An argument that carries data into an activity.</param>
      <param name="argument12">An argument that carries data into an activity.</param>
      <param name="argument13">An argument that carries data into an activity.</param>
      <param name="argument14">An argument that carries data into an activity.</param>
      <param name="argument15">An argument that carries data into an activity.</param>
      <param name="argument16">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16&gt;.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16&gt;.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="T6">The data that is carried into an activity.</typeparam>
      <typeparam name="T7">The data that is carried into an activity.</typeparam>
      <typeparam name="T8">The data that is carried into an activity.</typeparam>
      <typeparam name="T9">The data that is carried into an activity.</typeparam>
      <typeparam name="T10">The data that is carried into an activity.</typeparam>
      <typeparam name="T11">The data that is carried into an activity.</typeparam>
      <typeparam name="T12">The data that is carried into an activity.</typeparam>
      <typeparam name="T13">The data that is carried into an activity.</typeparam>
      <typeparam name="T14">The data that is carried into an activity.</typeparam>
      <typeparam name="T15">The data that is carried into an activity.</typeparam>
      <typeparam name="T16">The data that is carried into an activity.</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleAction``2(System.Activities.ActivityAction{``0,``1},``0,``1,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified ActivityAction&lt;T1, T2&gt; that has two parameters for in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the ActivityAction&lt;T1, T2&gt;.</summary>
      <param name="activityAction">An action that executes when a specific event occurs in the parent activity.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the ActivityAction&lt;T1, T2&gt;.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the ActivityAction&lt;T1, T2&gt;.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleAction``3(System.Activities.ActivityAction{``0,``1,``2},``0,``1,``2,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified ActivityAction&lt;T1, T2, T3&gt; that has three parameters for in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the ActivityAction&lt;T1, T2, T3&gt;.</summary>
      <param name="activityAction">An action that executes when a specific event occurs in the parent activity.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the ActivityAction&lt;T1, T2, T3&gt;.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the ActivityAction&lt;T1, T2, T3&gt;.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleAction``4(System.Activities.ActivityAction{``0,``1,``2,``3},``0,``1,``2,``3,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified ActivityAction&lt;T1, T2, T3, T4&gt; that has four parameters for in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the ActivityAction&lt;T1, T2, T3, T4&gt;.</summary>
      <param name="activityAction">An action that executes when a specific event occurs in the parent activity.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the ActivityAction&lt;T1, T2, T3, T4&gt;.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the ActivityAction&lt;T1, T2, T3, T4&gt;.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleAction``5(System.Activities.ActivityAction{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified ActivityAction&lt;T1, T2, T3, T4, T5&gt; that has five parameters for in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the ActivityAction&lt;T1, T2, T3, T4, T5&gt;.</summary>
      <param name="activityAction">An action that executes when a specific event occurs in the parent activity.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the ActivityAction&lt;T1, T2, T3, T4, T5&gt;.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the ActivityAction&lt;T1, T2, T3, T4, T5&gt;.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleAction``6(System.Activities.ActivityAction{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified ActivityAction&lt;T1, T2, T3, T4, T5, T6&gt; that has six parameters for in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the ActivityAction&lt;T1, T2, T3, T4, T5, T6&gt;.</summary>
      <param name="activityAction">An action that executes when a specific event occurs in the parent activity.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="argument6">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the ActivityAction&lt;T1, T2, T3, T4, T5, T6&gt;.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the ActivityAction&lt;T1, T2, T3, T4, T5, T6&gt;.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="T6">The data that is carried into an activity.</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleAction``7(System.Activities.ActivityAction{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7&gt; that has seven parameters for in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7&gt;.</summary>
      <param name="activityAction">An action that executes when a specific event occurs in the parent activity.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="argument6">An argument that carries data into an activity.</param>
      <param name="argument7">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7&gt;.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7&gt;.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="T6">The data that is carried into an activity.</typeparam>
      <typeparam name="T7">The data that is carried into an activity.</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleAction``8(System.Activities.ActivityAction{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,``7,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8&gt; that has eight parameters for in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8&gt;.</summary>
      <param name="activityAction">An action that executes when a specific event occurs in the parent activity.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="argument6">An argument that carries data into an activity.</param>
      <param name="argument7">An argument that carries data into an activity.</param>
      <param name="argument8">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8&gt;.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8&gt;.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="T6">The data that is carried into an activity.</typeparam>
      <typeparam name="T7">The data that is carried into an activity.</typeparam>
      <typeparam name="T8">The data that is carried into an activity.</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleAction``9(System.Activities.ActivityAction{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9&gt; that has nine parameters for in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9&gt;.</summary>
      <param name="activityAction">An action that executes when a specific event occurs in the parent activity.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="argument6">An argument that carries data into an activity.</param>
      <param name="argument7">An argument that carries data into an activity.</param>
      <param name="argument8">An argument that carries data into an activity.</param>
      <param name="argument9">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9&gt;.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9&gt;.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="T6">The data that is carried into an activity.</typeparam>
      <typeparam name="T7">The data that is carried into an activity.</typeparam>
      <typeparam name="T8">The data that is carried into an activity.</typeparam>
      <typeparam name="T9">The data that is carried into an activity.</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleActivity(System.Activities.Activity)">
      <summary>Schedules the specified NativeActivity child activity for execution.</summary>
      <param name="activity">A child activity that is triggered by an event that occurs in the execution of a parent NativeActivity.</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleActivity(System.Activities.Activity,System.Activities.CompletionCallback)">
      <summary>Schedules the specified NativeActivity child activity for execution using the specified completion callback location where the parent process resumes upon completion of the activity.</summary>
      <param name="activity">A child activity that is triggered by an event that occurs in the execution of a parent NativeActivity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the ActivityAction.</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleActivity(System.Activities.Activity,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>Schedules the specified NativeActivity child activity for execution using the specified fault callback location where the parent process resumes when the activity enters the faulted state.</summary>
      <param name="activity">A child activity that is triggered by an event that occurs in the execution of a parent NativeActivity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the ActivityAction.</param>
      <param name="onFaulted">A bookmark that indicates where the NativeActivity execution resumes if an error causes the termination of the ActivityAction.</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleActivity(System.Activities.Activity,System.Activities.FaultCallback)">
      <summary>Schedules the specified NativeActivity child activity for execution using the specified fault callback location where the parent process resumes when the activity enters the faulted state.</summary>
      <param name="activity">A child activity that is triggered by an event that occurs in the execution of a parent NativeActivity.</param>
      <param name="onFaulted">A bookmark that indicates where the NativeActivity execution resumes if an error causes the termination of the ActivityAction.</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleActivity``1(System.Activities.Activity{``0},System.Activities.CompletionCallback{``0},System.Activities.FaultCallback)">
      <summary>Schedules the specified NativeActivity child activity for execution, with one parameter for an in argument, and bookmarks the specified callback locations where the parent process resumes upon completion of the ActivityAction&lt;T&gt;.</summary>
      <param name="activity">A child activity that is triggered by an event that occurs in the execution of a parent NativeActivity.</param>
      <param name="onCompleted">A bookmark that indicates where the NativeActivity execution resumes upon completion of the ActivityAction&lt;T&gt;.</param>
      <param name="onFaulted">A bookmark that indicates where the NativeActivity execution resumes if an error causes the termination of the ActivityAction.</param>
      <typeparam name="TResult">The type of the NativeActivity child activity out argument.</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleDelegate(System.Activities.ActivityDelegate,System.Collections.Generic.IDictionary{System.String,System.Object},System.Activities.DelegateCompletionCallback,System.Activities.FaultCallback)">
      <summary>Pushes the callback method for an activity into the work item pool.</summary>
      <param name="activityDelegate">The callback method to which an activity returns when the specified activity action completes.</param>
      <param name="inputParameters">A dictionary list of activity argument names and values.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the ActivityAction.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the ActivityAction.</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleFunc``1(System.Activities.ActivityFunc{``0},System.Activities.CompletionCallback{``0},System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified ActivityFunc&lt;TResult&gt; with one parameter that holds a return value and bookmarks the specified callback locations where the parent process resumes upon completion of the ActivityFunc&lt;TResult&gt;.</summary>
      <param name="activityFunc">A child activity that runs when a specific event occurs in the parent activity and returns a value.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the ActivityFunc&lt;TResult&gt;.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the ActivityFunc&lt;TResult&gt;.</param>
      <typeparam name="TResult">The type of the NativeActivity child activity out argument.</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleFunc``10(System.Activities.ActivityFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Activities.CompletionCallback{``9},System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult&gt; that has ten parameters for a return value and in arguments and bookmarks the specified callback locations where the parent process resumes upon completion of the ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult&gt;.</summary>
      <param name="activityFunc">A child activity that runs when a specific event occurs in the parent activity and returns a value.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="argument6">An argument that carries data into an activity.</param>
      <param name="argument7">An argument that carries data into an activity.</param>
      <param name="argument8">An argument that carries data into an activity.</param>
      <param name="argument9">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult&gt;.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult&gt;.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="T6">The data that is carried into an activity.</typeparam>
      <typeparam name="T7">The data that is carried into an activity.</typeparam>
      <typeparam name="T8">The data that is carried into an activity.</typeparam>
      <typeparam name="T9">The data that is carried into an activity.</typeparam>
      <typeparam name="TResult">The type of the NativeActivity child activity out argument.</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleFunc``11(System.Activities.ActivityFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Activities.CompletionCallback{``10},System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult&gt; that has eleven parameters for a return value and in arguments, and bookmarks the specified callback locations where the parent process resumes upon completion of the ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult&gt;.</summary>
      <param name="activityFunc">A child activity that runs when a specific event occurs in the parent activity and returns a value.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="argument6">An argument that carries data into an activity.</param>
      <param name="argument7">An argument that carries data into an activity.</param>
      <param name="argument8">An argument that carries data into an activity.</param>
      <param name="argument9">An argument that carries data into an activity.</param>
      <param name="argument10">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult&gt;.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult&gt;.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="T6">The data that is carried into an activity.</typeparam>
      <typeparam name="T7">The data that is carried into an activity.</typeparam>
      <typeparam name="T8">The data that is carried into an activity.</typeparam>
      <typeparam name="T9">The data that is carried into an activity.</typeparam>
      <typeparam name="T10">The data that is carried into an activity.</typeparam>
      <typeparam name="TResult">The type of the NativeActivity child activity out argument.</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleFunc``12(System.Activities.ActivityFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Activities.CompletionCallback{``11},System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult&gt; that has twelve parameters for a return value and in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult&gt;.</summary>
      <param name="activityFunc">A child activity that runs when a specific event occurs in the parent activity and returns a value.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="argument6">An argument that carries data into an activity.</param>
      <param name="argument7">An argument that carries data into an activity.</param>
      <param name="argument8">An argument that carries data into an activity.</param>
      <param name="argument9">An argument that carries data into an activity.</param>
      <param name="argument10">An argument that carries data into an activity.</param>
      <param name="argument11">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult&gt;.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult&gt;.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="T6">The data that is carried into an activity.</typeparam>
      <typeparam name="T7">The data that is carried into an activity.</typeparam>
      <typeparam name="T8">The data that is carried into an activity.</typeparam>
      <typeparam name="T9">The data that is carried into an activity.</typeparam>
      <typeparam name="T10">The data that is carried into an activity.</typeparam>
      <typeparam name="T11">The data that is carried into an activity.</typeparam>
      <typeparam name="TResult">The type of the NativeActivity child activity out argument.</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleFunc``13(System.Activities.ActivityFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Activities.CompletionCallback{``12},System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult&gt; that has thirteen parameters for a return value and in arguments and bookmarks the specified callback locations where the parent process resumes upon completion of the ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult&gt;.</summary>
      <param name="activityFunc">A child activity that runs when a specific event occurs in the parent activity and returns a value.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="argument6">An argument that carries data into an activity.</param>
      <param name="argument7">An argument that carries data into an activity.</param>
      <param name="argument8">An argument that carries data into an activity.</param>
      <param name="argument9">An argument that carries data into an activity.</param>
      <param name="argument10">An argument that carries data into an activity.</param>
      <param name="argument11">An argument that carries data into an activity.</param>
      <param name="argument12">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult&gt;.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult&gt;.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="T6">The data that is carried into an activity.</typeparam>
      <typeparam name="T7">The data that is carried into an activity.</typeparam>
      <typeparam name="T8">The data that is carried into an activity.</typeparam>
      <typeparam name="T9">The data that is carried into an activity.</typeparam>
      <typeparam name="T10">The data that is carried into an activity.</typeparam>
      <typeparam name="T11">The data that is carried into an activity.</typeparam>
      <typeparam name="T12">The data that is carried into an activity.</typeparam>
      <typeparam name="TResult">The type of the NativeActivity child activity out argument.</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleFunc``14(System.Activities.ActivityFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Activities.CompletionCallback{``13},System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult&gt; that has fourteen parameters for a return value and in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult&gt;.</summary>
      <param name="activityFunc">A child activity that runs when a specific event occurs in the parent activity and returns a value.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="argument6">An argument that carries data into an activity.</param>
      <param name="argument7">An argument that carries data into an activity.</param>
      <param name="argument8">An argument that carries data into an activity.</param>
      <param name="argument9">An argument that carries data into an activity.</param>
      <param name="argument10">An argument that carries data into an activity.</param>
      <param name="argument11">An argument that carries data into an activity.</param>
      <param name="argument12">An argument that carries data into an activity.</param>
      <param name="argument13">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult&gt;.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult&gt;.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="T6">The data that is carried into an activity.</typeparam>
      <typeparam name="T7">The data that is carried into an activity.</typeparam>
      <typeparam name="T8">The data that is carried into an activity.</typeparam>
      <typeparam name="T9">The data that is carried into an activity.</typeparam>
      <typeparam name="T10">The data that is carried into an activity.</typeparam>
      <typeparam name="T11">The data that is carried into an activity.</typeparam>
      <typeparam name="T12">The data that is carried into an activity.</typeparam>
      <typeparam name="T13">The data that is carried into an activity.</typeparam>
      <typeparam name="TResult">The type of the NativeActivity child activity out argument.</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleFunc``15(System.Activities.ActivityFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Activities.CompletionCallback{``14},System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult&gt; that has fifteen parameters for a return value and in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult&gt;.</summary>
      <param name="activityFunc">A child activity that runs when a specific event occurs in the parent activity and returns a value.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="argument6">An argument that carries data into an activity.</param>
      <param name="argument7">An argument that carries data into an activity.</param>
      <param name="argument8">An argument that carries data into an activity.</param>
      <param name="argument9">An argument that carries data into an activity.</param>
      <param name="argument10">An argument that carries data into an activity.</param>
      <param name="argument11">An argument that carries data into an activity.</param>
      <param name="argument12">An argument that carries data into an activity.</param>
      <param name="argument13">An argument that carries data into an activity.</param>
      <param name="argument14">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult&gt;.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult&gt;.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="T6">The data that is carried into an activity.</typeparam>
      <typeparam name="T7">The data that is carried into an activity.</typeparam>
      <typeparam name="T8">The data that is carried into an activity.</typeparam>
      <typeparam name="T9">The data that is carried into an activity.</typeparam>
      <typeparam name="T10">The data that is carried into an activity.</typeparam>
      <typeparam name="T11">The data that is carried into an activity.</typeparam>
      <typeparam name="T12">The data that is carried into an activity.</typeparam>
      <typeparam name="T13">The data that is carried into an activity.</typeparam>
      <typeparam name="T14">The data that is carried into an activity.</typeparam>
      <typeparam name="TResult">The type of the NativeActivity child activity out argument.</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleFunc``16(System.Activities.ActivityFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Activities.CompletionCallback{``15},System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult&gt; that has sixteen parameters for a return value and in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult&gt;.</summary>
      <param name="activityFunc">A child activity that runs when a specific event occurs in the parent activity and returns a value.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="argument6">An argument that carries data into an activity.</param>
      <param name="argument7">An argument that carries data into an activity.</param>
      <param name="argument8">An argument that carries data into an activity.</param>
      <param name="argument9">An argument that carries data into an activity.</param>
      <param name="argument10">An argument that carries data into an activity.</param>
      <param name="argument11">An argument that carries data into an activity.</param>
      <param name="argument12">An argument that carries data into an activity.</param>
      <param name="argument13">An argument that carries data into an activity.</param>
      <param name="argument14">An argument that carries data into an activity.</param>
      <param name="argument15">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult&gt;.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult&gt;.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="T6">The data that is carried into an activity.</typeparam>
      <typeparam name="T7">The data that is carried into an activity.</typeparam>
      <typeparam name="T8">The data that is carried into an activity.</typeparam>
      <typeparam name="T9">The data that is carried into an activity.</typeparam>
      <typeparam name="T10">The data that is carried into an activity.</typeparam>
      <typeparam name="T11">The data that is carried into an activity.</typeparam>
      <typeparam name="T12">The data that is carried into an activity.</typeparam>
      <typeparam name="T13">The data that is carried into an activity.</typeparam>
      <typeparam name="T14">The data that is carried into an activity.</typeparam>
      <typeparam name="T15">The data that is carried into an activity.</typeparam>
      <typeparam name="TResult">The type of the NativeActivity child activity out argument.</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleFunc``17(System.Activities.ActivityFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Activities.CompletionCallback{``16},System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult&gt; that has seventeen parameters for a return value and in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult&gt;.</summary>
      <param name="activityFunc">A child activity that runs when a specific event occurs in the parent activity and returns a value.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="argument6">An argument that carries data into an activity.</param>
      <param name="argument7">An argument that carries data into an activity.</param>
      <param name="argument8">An argument that carries data into an activity.</param>
      <param name="argument9">An argument that carries data into an activity.</param>
      <param name="argument10">An argument that carries data into an activity.</param>
      <param name="argument11">An argument that carries data into an activity.</param>
      <param name="argument12">An argument that carries data into an activity.</param>
      <param name="argument13">An argument that carries data into an activity.</param>
      <param name="argument14">An argument that carries data into an activity.</param>
      <param name="argument15">An argument that carries data into an activity.</param>
      <param name="argument16">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult&gt;.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult&gt;.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="T6">The data that is carried into an activity.</typeparam>
      <typeparam name="T7">The data that is carried into an activity.</typeparam>
      <typeparam name="T8">The data that is carried into an activity.</typeparam>
      <typeparam name="T9">The data that is carried into an activity.</typeparam>
      <typeparam name="T10">The data that is carried into an activity.</typeparam>
      <typeparam name="T11">The data that is carried into an activity.</typeparam>
      <typeparam name="T12">The data that is carried into an activity.</typeparam>
      <typeparam name="T13">The data that is carried into an activity.</typeparam>
      <typeparam name="T14">The data that is carried into an activity.</typeparam>
      <typeparam name="T15">The data that is carried into an activity.</typeparam>
      <typeparam name="T16">The data that is carried into an activity.</typeparam>
      <typeparam name="TResult">The type of the NativeActivity child activity out argument.</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleFunc``2(System.Activities.ActivityFunc{``0,``1},``0,System.Activities.CompletionCallback{``1},System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified ActivityFunc&lt;T, TResult&gt; that has two parameters for a return value and an in argument and that bookmarks the specified callback locations where the parent process resumes upon completion of the ActivityFunc&lt;T, TResult&gt;.</summary>
      <param name="activityFunc">A child activity that runs when a specific event occurs in the parent activity and returns a value.</param>
      <param name="argument">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the ActivityFunc&lt;T, TResult&gt;.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the ActivityFunc&lt;T, TResult&gt;.</param>
      <typeparam name="T">The data that is carried into an activity.</typeparam>
      <typeparam name="TResult">The type of the NativeActivity child activity out argument.</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleFunc``3(System.Activities.ActivityFunc{``0,``1,``2},``0,``1,System.Activities.CompletionCallback{``2},System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified ActivityFunc&lt;T1, T2, TResult&gt; that has three parameters for a return value and in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the ActivityFunc&lt;T1, T2, TResult&gt;.</summary>
      <param name="activityFunc">A child activity that runs when a specific event occurs in the parent activity and returns a value.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the ActivityFunc&lt;T1, T2, TResult&gt;.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the ActivityFunc&lt;T1, T2, TResult&gt;.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="TResult">The type of the NativeActivity child activity out argument.</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleFunc``4(System.Activities.ActivityFunc{``0,``1,``2,``3},``0,``1,``2,System.Activities.CompletionCallback{``3},System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified ActivityFunc&lt;T1, T2, T3, TResult&gt; that has four parameters for a return value and in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the ActivityFunc&lt;T1, T2, T3, TResult&gt;.</summary>
      <param name="activityFunc">A child activity that runs when a specific event occurs in the parent activity and returns a value.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the ActivityFunc&lt;T1, T2, T3, TResult&gt;.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the ActivityFunc&lt;T1, T2, T3, TResult&gt;.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="TResult">The type of the NativeActivity child activity out argument.</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleFunc``5(System.Activities.ActivityFunc{``0,``1,``2,``3,``4},``0,``1,``2,``3,System.Activities.CompletionCallback{``4},System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified ActivityFunc&lt;T1, T2, T3, T4, TResult&gt; that has five parameters for a return value and in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the ActivityFunc&lt;T1, T2, T3, T4, TResult&gt;.</summary>
      <param name="activityFunc">A child activity that runs when a specific event occurs in the parent activity and returns a value.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the ActivityFunc&lt;T1, T2, T3, T4, TResult&gt;.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the ActivityFunc&lt;T1, T2, T3, T4, TResult&gt;.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="TResult">The type of the NativeActivity child activity out argument.</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleFunc``6(System.Activities.ActivityFunc{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,System.Activities.CompletionCallback{``5},System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified ActivityFunc&lt;T1, T2, T3, T4, T5, TResult&gt; that has six parameters for a return value and in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the ActivityFunc&lt;T1, T2, T3, T4, T5, TResult&gt;.</summary>
      <param name="activityFunc">A child activity that runs when a specific event occurs in the parent activity and returns a value.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the ActivityFunc&lt;T1, T2, T3, T4, T5, TResult&gt;.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the ActivityFunc&lt;T1, T2, T3, T4, T5, TResult&gt;.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="TResult">The type of the NativeActivity child activity out argument.</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleFunc``7(System.Activities.ActivityFunc{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,System.Activities.CompletionCallback{``6},System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7&gt; that has seven parameters for in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7&gt;.</summary>
      <param name="activityFunc">A child activity that runs when a specific event occurs in the parent activity and returns a value.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="argument6">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the ActivityFunc&lt;T1, T2, T3, T4, T5, T6, TResult&gt;.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the ActivityFunc&lt;T1, T2, T3, T4, T5, T6, TResult&gt;.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="T6">The data that is carried into an activity.</typeparam>
      <typeparam name="TResult">The type of the NativeActivity child activity out argument.</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleFunc``8(System.Activities.ActivityFunc{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,System.Activities.CompletionCallback{``7},System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, TResult&gt; that has eight parameters for a return value and in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, TResult&gt;.</summary>
      <param name="activityFunc">A child activity that runs when a specific event occurs in the parent activity and returns a value.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="argument6">An argument that carries data into an activity.</param>
      <param name="argument7">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, TResult&gt;.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, TResult&gt;.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="T6">The data that is carried into an activity.</typeparam>
      <typeparam name="T7">The data that is carried into an activity.</typeparam>
      <typeparam name="TResult">The type of the NativeActivity child activity out argument.</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleFunc``9(System.Activities.ActivityFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,System.Activities.CompletionCallback{``8},System.Activities.FaultCallback)">
      <summary>Schedules for execution a specified ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, TResult&gt; that has nine parameters for a return value and in arguments and that bookmarks the specified callback locations where the parent process resumes upon completion of the ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, TResult&gt;.</summary>
      <param name="activityFunc">A child activity that runs when a specific event occurs in the parent activity and returns a value.</param>
      <param name="argument1">An argument that carries data into an activity.</param>
      <param name="argument2">An argument that carries data into an activity.</param>
      <param name="argument3">An argument that carries data into an activity.</param>
      <param name="argument4">An argument that carries data into an activity.</param>
      <param name="argument5">An argument that carries data into an activity.</param>
      <param name="argument6">An argument that carries data into an activity.</param>
      <param name="argument7">An argument that carries data into an activity.</param>
      <param name="argument8">An argument that carries data into an activity.</param>
      <param name="onCompleted">A bookmark that indicates where the parent activity execution resumes upon completion of the ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, TResult&gt;.</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, TResult&gt;.</param>
      <typeparam name="T1">The data that is carried into an activity.</typeparam>
      <typeparam name="T2">The data that is carried into an activity.</typeparam>
      <typeparam name="T3">The data that is carried into an activity.</typeparam>
      <typeparam name="T4">The data that is carried into an activity.</typeparam>
      <typeparam name="T5">The data that is carried into an activity.</typeparam>
      <typeparam name="T6">The data that is carried into an activity.</typeparam>
      <typeparam name="T7">The data that is carried into an activity.</typeparam>
      <typeparam name="T8">The data that is carried into an activity.</typeparam>
      <typeparam name="TResult">The type of the NativeActivity child activity out argument.</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.SetValue(System.Activities.Argument,System.Object)">
      <summary>Assigns a value to the specified Argument.</summary>
      <param name="argument">The argument to receive the new value.</param>
      <param name="value">The new value of the argument.</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.SetValue(System.Activities.Variable,System.Object)">
      <summary>Assigns the specified value object to the specified variable object.</summary>
      <param name="variable">A variable object without a specified type that can be assigned a value object.</param>
      <param name="value">An object without a specified type that can be assigned to a variable object.</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.SetValue``1(System.Activities.Variable{``0},``0)">
      <summary>Assigns the specified generic value object to the generic variable object.</summary>
      <param name="variable">A variable object with a specified type that can be assigned a value object.</param>
      <param name="value">An object with a specified type that can be assigned to a variable object.</param>
      <typeparam name="T">The type of the variable.</typeparam>
    </member>
    <member name="T:System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata">
      <summary>Represents native activity update map metadata.</summary>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata.SaveOriginalValue(System.Activities.Activity,System.Object)">
      <summary>Indicates the object to save the original value for the current activity.</summary>
      <param name="updatedChildActivity">The updated child activity.</param>
      <param name="originalValue">The original value.</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata.SaveOriginalValue(System.String,System.Object)">
      <summary>Indicates the object to save the original value for the current activity.</summary>
      <param name="propertyName">The property name.</param>
      <param name="originalValue">The original value.</param>
    </member>
    <member name="T:System.Activities.DynamicUpdate.UpdateMapMetadata">
      <summary>Specifies options for update map metadata.</summary>
    </member>
    <member name="M:System.Activities.DynamicUpdate.UpdateMapMetadata.AddMatch(System.Activities.Activity,System.Activities.Activity)">
      <summary>Adds a match for <see cref="T:System.Activities.DynamicUpdate.UpdateMapMetadata" /> with specified child.</summary>
      <param name="updatedChild">The updated child.</param>
      <param name="originalChild">The original child.</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.UpdateMapMetadata.AddMatch(System.Activities.Variable,System.Activities.Variable)">
      <summary>Adds a match for <see cref="T:System.Activities.DynamicUpdate.UpdateMapMetadata" /> with specified variable.</summary>
      <param name="updatedVariable">The updated variable.</param>
      <param name="originalVariable">The original variable.</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.UpdateMapMetadata.AllowUpdateInsideThisActivity">
      <summary>Allows updating of map metadata within the current activity.</summary>
    </member>
    <member name="M:System.Activities.DynamicUpdate.UpdateMapMetadata.DisallowUpdateInsideThisActivity(System.String)">
      <summary>Disallows updating of map metadata within the current activity.</summary>
      <param name="reason">The reason of disallowing.</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.UpdateMapMetadata.GetMatch(System.Activities.Activity)">
      <summary>Gets a match for <see cref="T:System.Activities.DynamicUpdate.UpdateMapMetadata" /> with specified child.</summary>
      <returns>The match for <see cref="T:System.Activities.DynamicUpdate.UpdateMapMetadata" />.</returns>
      <param name="updatedChild">The updated child.</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.UpdateMapMetadata.GetMatch(System.Activities.Variable)">
      <summary>Gets a match for <see cref="T:System.Activities.DynamicUpdate.UpdateMapMetadata" /> with specified variable.</summary>
      <returns>The match for <see cref="T:System.Activities.DynamicUpdate.UpdateMapMetadata" />.</returns>
      <param name="updatedVariable">The updated variable.</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.UpdateMapMetadata.IsReferenceToImportedChild(System.Activities.Activity)">
      <summary>Indicates whether the <see cref="T:System.Activities.DynamicUpdate.UpdateMapMetadata" /> is a reference to imported child.</summary>
      <returns>True if the <see cref="T:System.Activities.DynamicUpdate.UpdateMapMetadata" /> is a reference to imported child; otherwise, false.</returns>
      <param name="childActivity">The child activity.</param>
    </member>
    <member name="T:System.Activities.ExpressionParser.SourceExpressionException">
      <summary>Represents the exception that is thrown when a text-based expression cannot be converted into an executable form. </summary>
    </member>
    <member name="M:System.Activities.ExpressionParser.SourceExpressionException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.ExpressionParser.SourceExpressionException" /> class.</summary>
    </member>
    <member name="M:System.Activities.ExpressionParser.SourceExpressionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.ExpressionParser.SourceExpressionException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Activities.ExpressionParser.SourceExpressionException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.ExpressionParser.SourceExpressionException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.Activities.ExpressionParser.SourceExpressionException.#ctor(System.String,System.CodeDom.Compiler.CompilerErrorCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.ExpressionParser.SourceExpressionException" /> class with a specified error message and a collection of compiler errors.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="errors">A collection of compiler error data.</param>
    </member>
    <member name="M:System.Activities.ExpressionParser.SourceExpressionException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.ExpressionParser.SourceExpressionException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception.</param>
    </member>
    <member name="P:System.Activities.ExpressionParser.SourceExpressionException.Errors">
      <summary>Gets an enumerable type collection of compiler errors.</summary>
      <returns>An enumerable collection of compiler errors.</returns>
    </member>
    <member name="M:System.Activities.ExpressionParser.SourceExpressionException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with information about the exception.</summary>
      <param name="info">The object that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The object that contains contextual information about the source or destination.</param>
    </member>
    <member name="T:System.Activities.Expressions.Add`3">
      <summary>Computes the sum of two values.</summary>
      <typeparam name="TLeft">The type of the left operand.</typeparam>
      <typeparam name="TRight">The type of the right operand.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.Add`3.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.Add`3" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.Add`3.Checked">
      <summary>Gets or sets a value that indicates whether the addition executes in a checked context.</summary>
      <returns>true if the addition executes in a checked context; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Activities.Expressions.Add`3.Left">
      <summary>Gets or sets the left operand.</summary>
      <returns>The left operand.</returns>
    </member>
    <member name="P:System.Activities.Expressions.Add`3.Right">
      <summary>Gets or sets the right operand.</summary>
      <returns>The right operand.</returns>
    </member>
    <member name="T:System.Activities.Expressions.And`3">
      <summary>Computes the bitwise logical AND of two values. </summary>
      <typeparam name="TLeft">The type of the left operand.</typeparam>
      <typeparam name="TRight">The type of the right operand.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.And`3.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.And`3" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.And`3.Left">
      <summary>Gets or sets the left operand.</summary>
      <returns>The <see cref="F:System.Activities.Design.View.PropertyKind.InArgument" /> that represents the left operand.</returns>
    </member>
    <member name="P:System.Activities.Expressions.And`3.Right">
      <summary>Gets or sets the right operand.</summary>
      <returns>The <see cref="F:System.Activities.Design.View.PropertyKind.InArgument" /> that represents the right operand.</returns>
    </member>
    <member name="T:System.Activities.Expressions.AndAlso">
      <summary>Computes the logical AND of two values. Both values are converted into Boolean, and if both are true then this expression returns true. If one or both values evaluate to false, this expression returns false. <see cref="T:System.Activities.Expressions.AndAlso" /> is the “short circuit” version of the logical AND operator, returning false as soon as one of operands is evaluated to be false.</summary>
    </member>
    <member name="M:System.Activities.Expressions.AndAlso.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.AndAlso" /> class. </summary>
    </member>
    <member name="P:System.Activities.Expressions.AndAlso.Left">
      <summary>Gets or sets the left operand.</summary>
      <returns>The left operand.</returns>
    </member>
    <member name="P:System.Activities.Expressions.AndAlso.Right">
      <summary>Gets or sets the right operand.</summary>
      <returns>The right operand.</returns>
    </member>
    <member name="T:System.Activities.Expressions.ArgumentReference`1">
      <summary> Represents an <see cref="T:System.Activities.Argument" /> used as an l-value in an expression.</summary>
      <typeparam name="T">The type of the argument returned by the <see cref="T:System.Activities.Expressions.ArgumentReference`1" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.ArgumentReference`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.ArgumentReference`1" /> class.</summary>
    </member>
    <member name="M:System.Activities.Expressions.ArgumentReference`1.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.ArgumentReference`1" /> class with the argument name.</summary>
      <param name="argumentName">The argument name.</param>
    </member>
    <member name="P:System.Activities.Expressions.ArgumentReference`1.ArgumentName">
      <summary>Gets or sets the name of the argument to which a reference is to be returned.</summary>
      <returns>The argument name.</returns>
    </member>
    <member name="P:System.Activities.Expressions.ArgumentReference`1.LocationReference">
      <summary>Gets the location reference.</summary>
      <returns>The location reference.</returns>
    </member>
    <member name="M:System.Activities.Expressions.ArgumentReference`1.ToString">
      <summary>Returns a <see cref="T:System.String" /> representation of the <see cref="T:System.Activities.Expressions.ArgumentReference`1" />.</summary>
      <returns>The argument name, if the <see cref="P:System.Activities.Expressions.ArgumentReference`1.ArgumentName" /> has been set, otherwise the activity ID and name.</returns>
    </member>
    <member name="T:System.Activities.Expressions.ArgumentValue`1">
      <summary>Represents an <see cref="T:System.Activities.Argument" /> used as an r-value in an expression.</summary>
      <typeparam name="T">The type of the value returned by the <see cref="T:System.Activities.Expressions.ArgumentValue`1" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.ArgumentValue`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.ArgumentValue`1" /> class.</summary>
    </member>
    <member name="M:System.Activities.Expressions.ArgumentValue`1.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.ArgumentValue`1" /> class with the specified argument name.</summary>
      <param name="argumentName">The argument name.</param>
    </member>
    <member name="P:System.Activities.Expressions.ArgumentValue`1.ArgumentName">
      <summary>Gets or sets the name of the argument whose value is to be returned.</summary>
      <returns>The argument name.</returns>
    </member>
    <member name="P:System.Activities.Expressions.ArgumentValue`1.LocationReference">
      <summary>Gets the location reference of the argument value.</summary>
      <returns>The location reference of the argument value.</returns>
    </member>
    <member name="M:System.Activities.Expressions.ArgumentValue`1.ToString">
      <summary>A <see cref="T:System.String" /> representation of the <see cref="T:System.Activities.Expressions.ArgumentValue`1" />.</summary>
      <returns>The argument name, if the <see cref="P:System.Activities.Expressions.ArgumentValue`1.ArgumentName" /> has been set; otherwise the activity ID and name.</returns>
    </member>
    <member name="T:System.Activities.Expressions.ArrayItemReference`1">
      <summary>A reference to an item within an array.</summary>
      <typeparam name="TItem">The type of the items within the array.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.ArrayItemReference`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.ArrayItemReference`1" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.ArrayItemReference`1.Array">
      <summary>Gets or sets the array whose item is being referenced.</summary>
      <returns>The array whose item is being referenced.</returns>
    </member>
    <member name="P:System.Activities.Expressions.ArrayItemReference`1.Index">
      <summary>Gets or sets the array index number of the item being referenced.</summary>
      <returns>The array index number of the item being referenced. </returns>
    </member>
    <member name="T:System.Activities.Expressions.ArrayItemValue`1">
      <summary>An item within an array.</summary>
      <typeparam name="TItem">The type of the items within the array. </typeparam>
    </member>
    <member name="M:System.Activities.Expressions.ArrayItemValue`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.ArrayItemValue`1" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.ArrayItemValue`1.Array">
      <summary>Gets or sets the array to which the item belongs to.</summary>
      <returns>The array to which the item belongs to.</returns>
    </member>
    <member name="P:System.Activities.Expressions.ArrayItemValue`1.Index">
      <summary>Gets or sets the array index number of the array item.</summary>
      <returns>The array item index.</returns>
    </member>
    <member name="T:System.Activities.Expressions.As`2">
      <summary>Attempts to converts an operand to a given type. If the conversion is not possible the result is set to null.</summary>
      <typeparam name="TOperand">The type of the operand.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.As`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.As`2" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.As`2.Operand">
      <summary>Gets or sets the operand.</summary>
      <returns>The operand.</returns>
    </member>
    <member name="T:System.Activities.Expressions.AssemblyReference">
      <summary>Represents an assembly reference.</summary>
    </member>
    <member name="M:System.Activities.Expressions.AssemblyReference.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.AssemblyReference" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.AssemblyReference.Assembly">
      <summary>Gets or sets the assembly of the assembly reference.</summary>
      <returns>The assembly of the assembly reference.</returns>
    </member>
    <member name="P:System.Activities.Expressions.AssemblyReference.AssemblyName">
      <summary>Gets or sets the name of the assembly.</summary>
      <returns>The name of the assembly.</returns>
    </member>
    <member name="M:System.Activities.Expressions.AssemblyReference.LoadAssembly">
      <summary>Attempts to load an assembly.</summary>
    </member>
    <member name="M:System.Activities.Expressions.AssemblyReference.op_Implicit(System.Reflection.Assembly)~System.Activities.Expressions.AssemblyReference">
      <summary>Converts the specified assembly reference.</summary>
      <returns>The instance <see cref="T:System.Activities.Expressions.AssemblyReference" /> object.</returns>
      <param name="assembly">The assembly.</param>
    </member>
    <member name="M:System.Activities.Expressions.AssemblyReference.op_Implicit(System.Reflection.AssemblyName)~System.Activities.Expressions.AssemblyReference">
      <summary>Converts the specified assembly reference with a specific assembly name.</summary>
      <returns>An instance <see cref="T:System.Activities.Expressions.AssemblyReference" /> object.</returns>
      <param name="assemblyName">The assembly name.</param>
    </member>
    <member name="T:System.Activities.Expressions.Cast`2">
      <summary>Attempts to convert an operand to a given type. If the conversion is not possible a run-time error is generated.</summary>
      <typeparam name="TOperand">The type of the operand.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.Cast`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.Cast`2" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.Cast`2.Checked">
      <summary>Gets or sets a value that indicates whether the cast operation executes in a checked context.</summary>
      <returns>true if the cast operation executes in a checked context; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Activities.Expressions.Cast`2.Operand">
      <summary>Gets or sets the operand.</summary>
      <returns>The operand.</returns>
    </member>
    <member name="T:System.Activities.Expressions.CompiledExpressionInvoker">
      <summary>Represents a compiled expression invoker.</summary>
    </member>
    <member name="M:System.Activities.Expressions.CompiledExpressionInvoker.#ctor(System.Activities.Expressions.ITextExpression,System.Boolean,System.Activities.CodeActivityMetadata)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.CompiledExpressionInvoker" /> class using the expression, isReference and metadata.</summary>
      <param name="expression">The expression.</param>
      <param name="isReference">True to keep object reference data; otherwise, false.</param>
      <param name="metadata">The activity metadata.</param>
    </member>
    <member name="M:System.Activities.Expressions.CompiledExpressionInvoker.GetCompiledExpressionRoot(System.Object)">
      <summary>Sets the compiled expression root.</summary>
      <returns>The compiled expression root.</returns>
      <param name="target">The target.</param>
    </member>
    <member name="M:System.Activities.Expressions.CompiledExpressionInvoker.GetCompiledExpressionRootForImplementation(System.Object)">
      <summary>Gets the compiled expression root for the implementation of <see cref="T:System.Activities.Expressions.CompiledExpressionInvoker" />.</summary>
      <returns>The compiled expression root.</returns>
      <param name="target">The target.</param>
    </member>
    <member name="M:System.Activities.Expressions.CompiledExpressionInvoker.InvokeExpression(System.Activities.ActivityContext)">
      <summary>Invokes the compiled expression.</summary>
      <returns>The invoked expression.</returns>
      <param name="activityContext">The activity context.</param>
    </member>
    <member name="P:System.Activities.Expressions.CompiledExpressionInvoker.IsStaticallyCompiled">
      <summary>Gets or sets whether the compiled expression invoker is statically compiled.</summary>
      <returns>true if the compiled expression invoker is statically compiled; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.Expressions.CompiledExpressionInvoker.SetCompiledExpressionRoot(System.Object,System.Activities.XamlIntegration.ICompiledExpressionRoot)">
      <summary>Sets the compiled expression root.</summary>
      <param name="target">The target.</param>
      <param name="compiledExpressionRoot">The compiled expression root to be set.</param>
    </member>
    <member name="M:System.Activities.Expressions.CompiledExpressionInvoker.SetCompiledExpressionRootForImplementation(System.Object,System.Activities.XamlIntegration.ICompiledExpressionRoot)">
      <summary>Sets the compiled expression root for the implementation of <see cref="T:System.Activities.Expressions.CompiledExpressionInvoker" />.</summary>
      <param name="target">The target.</param>
      <param name="compiledExpressionRoot">The compiled expression root to be set.</param>
    </member>
    <member name="T:System.Activities.Expressions.DelegateArgumentReference`1">
      <summary>Represents a <see cref="T:System.Activities.DelegateArgument" /> used as an l-value in an expression.</summary>
      <typeparam name="T">The data type of the <see cref="T:System.Activities.DelegateArgument" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.DelegateArgumentReference`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.DelegateArgumentReference`1" /> class.</summary>
    </member>
    <member name="M:System.Activities.Expressions.DelegateArgumentReference`1.#ctor(System.Activities.DelegateArgument)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.DelegateArgumentReference`1" /> class using the specified <see cref="T:System.Activities.DelegateArgument" />.</summary>
      <param name="delegateArgument">The value of the expression.</param>
    </member>
    <member name="P:System.Activities.Expressions.DelegateArgumentReference`1.DelegateArgument">
      <summary>Gets or sets the <see cref="T:System.Activities.DelegateArgument" /> represented by the <see cref="T:System.Activities.Expressions.DelegateArgumentReference`1" />.</summary>
      <returns>The <see cref="T:System.Activities.DelegateArgument" /> represented by the <see cref="T:System.Activities.Expressions.DelegateArgumentReference`1" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.DelegateArgumentReference`1.LocationReference">
      <summary>Gets the location reference of the delegate argument.</summary>
      <returns>The location reference of the delegate argument.</returns>
    </member>
    <member name="T:System.Activities.Expressions.DelegateArgumentValue`1">
      <summary>Represents a <see cref="T:System.Activities.DelegateArgument" /> used as an r-value in an expression.</summary>
      <typeparam name="T">The data type of the <see cref="T:System.Activities.DelegateArgument" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.DelegateArgumentValue`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.DelegateArgumentValue`1" /> class.</summary>
    </member>
    <member name="M:System.Activities.Expressions.DelegateArgumentValue`1.#ctor(System.Activities.DelegateArgument)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.DelegateArgumentValue`1" /> class using the specified <see cref="T:System.Activities.DelegateArgument" />.</summary>
      <param name="delegateArgument">The value of the expression.</param>
    </member>
    <member name="P:System.Activities.Expressions.DelegateArgumentValue`1.DelegateArgument">
      <summary>Gets or sets the <see cref="T:System.Activities.DelegateArgument" /> represented by the <see cref="T:System.Activities.Expressions.DelegateArgumentValue`1" />.</summary>
      <returns>The <see cref="T:System.Activities.DelegateArgument" /> represented by the <see cref="T:System.Activities.Expressions.DelegateArgumentValue`1" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.DelegateArgumentValue`1.LocationReference">
      <summary>Gets the location reference of <see cref="T:System.Activities.Expressions.DelegateArgumentValue`1" />.</summary>
      <returns>The location reference.</returns>
    </member>
    <member name="T:System.Activities.Expressions.Divide`3">
      <summary>Computes the quotient of a division operation.</summary>
      <typeparam name="TLeft">The type of the left operand.</typeparam>
      <typeparam name="TRight">The type of the right operand.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.Divide`3.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.Divide`3" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.Divide`3.Left">
      <summary>Gets or sets the left operand. The left operand is the divisor. </summary>
      <returns>The left operand.</returns>
    </member>
    <member name="P:System.Activities.Expressions.Divide`3.Right">
      <summary>Gets or sets the right operand. The right operand is the dividend.</summary>
      <returns>The right operand.</returns>
    </member>
    <member name="T:System.Activities.Expressions.EnvironmentLocationReference`1">
      <summary>Represents an environment location reference.</summary>
      <typeparam name="T">The data type of <see cref="T:System.Activities.Expressions.EnvironmentLocationReference`1" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.EnvironmentLocationReference`1.CacheMetadata(System.Activities.CodeActivityMetadata)">
      <summary>Creates and validates a description of the activity’s arguments, variables, child activities, and activity delegates.</summary>
      <param name="metadata">The activity’s metadata that encapsulates the activity’s arguments, variables, child activities, and activity delegates.</param>
    </member>
    <member name="M:System.Activities.Expressions.EnvironmentLocationReference`1.Execute(System.Activities.CodeActivityContext)">
      <summary>Performs the execution of the activity.</summary>
      <returns>The execution of the activity.</returns>
      <param name="context">The execution context under which the activity executes.</param>
    </member>
    <member name="P:System.Activities.Expressions.EnvironmentLocationReference`1.LocationReference">
      <summary>Gets the location reference value.</summary>
      <returns>The location reference value.</returns>
    </member>
    <member name="T:System.Activities.Expressions.EnvironmentLocationValue`1">
      <summary>Represents the environment location value.</summary>
      <typeparam name="T">The data type of the <see cref="T:System.Activities.Expressions.EnvironmentLocationValue`1" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.EnvironmentLocationValue`1.CacheMetadata(System.Activities.CodeActivityMetadata)">
      <summary>Creates and validates a description of the activity’s arguments, variables, child activities, and activity delegates.</summary>
      <param name="metadata">The activity’s metadata that encapsulates the activity’s arguments, variables, child activities, and activity delegates.</param>
    </member>
    <member name="M:System.Activities.Expressions.EnvironmentLocationValue`1.Execute(System.Activities.CodeActivityContext)">
      <summary>Performs the execution of the activity.</summary>
      <returns>The execution of the activity.</returns>
      <param name="context">The execution context under which the activity executes.</param>
    </member>
    <member name="P:System.Activities.Expressions.EnvironmentLocationValue`1.LocationReference">
      <summary>Gets the location reference value.</summary>
      <returns>The location reference value.</returns>
    </member>
    <member name="T:System.Activities.Expressions.Equal`3">
      <summary>Performs an equality test between two values. If the two values are equal the expression returns true; otherwise, it returns false.</summary>
      <typeparam name="TLeft">The type of the left operand.</typeparam>
      <typeparam name="TRight">The type of the right operand. </typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.Equal`3.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.Equal`3" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.Equal`3.Left">
      <summary>Gets or sets the left operand.</summary>
      <returns>The left operand.</returns>
    </member>
    <member name="P:System.Activities.Expressions.Equal`3.Right">
      <summary>Gets or sets the right operand.</summary>
      <returns>The right operand.</returns>
    </member>
    <member name="T:System.Activities.Expressions.ExpressionServices">
      <summary>A transformation API used to convert environment aware expressions to an activity tree.</summary>
    </member>
    <member name="M:System.Activities.Expressions.ExpressionServices.Convert``1(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,``0}})">
      <summary>Converts a workflow environment-aware expression to an activity tree.</summary>
      <returns>The converted expression.</returns>
      <param name="expression">The expression being converted.</param>
      <typeparam name="TResult">The type the expression is being converted to.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.ExpressionServices.ConvertReference``1(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,``0}})">
      <summary>Converts a reference to a workflow environment-aware expression to an activity tree.</summary>
      <returns>The converted expression.</returns>
      <param name="expression">The expression being converted.</param>
      <typeparam name="TResult">The type the expression is being converted to.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.ExpressionServices.TryConvert``1(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,``0}},System.Activities.Activity{``0}@)">
      <summary>Converts a workflow environment-aware expression to an activity tree.</summary>
      <returns>true if the expression can be converted; otherwise, false.</returns>
      <param name="expression">The expression being converted.</param>
      <param name="result">The converted expression.</param>
      <typeparam name="TResult">The type the expression is being converted to.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.ExpressionServices.TryConvertReference``1(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,``0}},System.Activities.Activity{System.Activities.Location{``0}}@)">
      <summary>Converts a reference to a workflow environment-aware expression to an activity tree.</summary>
      <returns>true if the expression can be converted; otherwise, false.</returns>
      <param name="expression">The expression being converted.</param>
      <param name="result">The converted expression.</param>
      <typeparam name="TResult">The type the expression is being converted to.</typeparam>
    </member>
    <member name="T:System.Activities.Expressions.FieldReference`2">
      <summary>A reference to a field.</summary>
      <typeparam name="TOperand">The type of the operand.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.FieldReference`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.FieldReference`2" /> class. </summary>
    </member>
    <member name="P:System.Activities.Expressions.FieldReference`2.FieldName">
      <summary>Gets or sets the name of the field being referenced.</summary>
      <returns>The name of the field being referenced.</returns>
    </member>
    <member name="P:System.Activities.Expressions.FieldReference`2.Operand">
      <summary>Gets or sets the field reference. </summary>
      <returns>The field reference.</returns>
    </member>
    <member name="T:System.Activities.Expressions.FieldValue`2">
      <summary>A field value.</summary>
      <typeparam name="TOperand">The type of the operand.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.FieldValue`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.FieldValue`2" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.FieldValue`2.FieldName">
      <summary>Gets or sets the field name.</summary>
      <returns>The field name.</returns>
    </member>
    <member name="P:System.Activities.Expressions.FieldValue`2.Operand">
      <summary>Gets or sets the value of the field.</summary>
      <returns>The field value.</returns>
    </member>
    <member name="T:System.Activities.Expressions.GreaterThan`3">
      <summary>Performs a relational test between two values. If the left operand is greater than the right operand, the expression returns true. Otherwise, it returns false.</summary>
      <typeparam name="TLeft">The type of the left operand. </typeparam>
      <typeparam name="TRight">The type of the right operand.</typeparam>
      <typeparam name="TResult">The type of the result. </typeparam>
    </member>
    <member name="M:System.Activities.Expressions.GreaterThan`3.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.GreaterThan`3" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.GreaterThan`3.Left">
      <summary>Gets or sets the left operand.</summary>
      <returns>The <see cref="F:System.Activities.Design.View.PropertyKind.InArgument" /> that represents the left operand.</returns>
    </member>
    <member name="P:System.Activities.Expressions.GreaterThan`3.Right">
      <summary>Gets or sets the right operand.</summary>
      <returns>The <see cref="F:System.Activities.Design.View.PropertyKind.InArgument" /> that represents the right operand.</returns>
    </member>
    <member name="T:System.Activities.Expressions.GreaterThanOrEqual`3">
      <summary>Performs a relational test between two values. If the left operand is greater than or equal to the right operand, the expression returns true; otherwise, it returns false.</summary>
      <typeparam name="TLeft">The type of the left operand. </typeparam>
      <typeparam name="TRight">The type of the right operand.</typeparam>
      <typeparam name="TResult">The type of the result. </typeparam>
    </member>
    <member name="M:System.Activities.Expressions.GreaterThanOrEqual`3.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.GreaterThanOrEqual`3" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.GreaterThanOrEqual`3.Left">
      <summary>Gets or sets the left operand.</summary>
      <returns>The left operand.</returns>
    </member>
    <member name="P:System.Activities.Expressions.GreaterThanOrEqual`3.Right">
      <summary>Gets or sets the right operand.</summary>
      <returns>The right operand.</returns>
    </member>
    <member name="T:System.Activities.Expressions.IndexerReference`2">
      <summary>Represents an element referenced by an object indexer that can be used as an l-value in an expression.</summary>
      <typeparam name="TOperand">The type with the indexer.</typeparam>
      <typeparam name="TItem">The type of the indexer array. </typeparam>
    </member>
    <member name="M:System.Activities.Expressions.IndexerReference`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.IndexerReference`2" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.IndexerReference`2.Indices">
      <summary>Gets a collection of arguments that represent the indices of the element in the indexer array.</summary>
      <returns>The indices of the element in the indexer array.</returns>
    </member>
    <member name="P:System.Activities.Expressions.IndexerReference`2.Operand">
      <summary>Gets or sets the object that contains the indexer.</summary>
      <returns>The object that contains the indexer.</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeFunc`1">
      <summary>Invokes an <see cref="T:System.Activities.ActivityFunc`1" />.</summary>
      <typeparam name="TResult">The type of the return <see cref="T:System.Activities.OutArgument`1" /> whose value is returned from the <see cref="T:System.Activities.ActivityFunc`1" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeFunc`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.InvokeFunc`1" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`1.Func">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityFunc`1" /> to be invoked.</summary>
      <returns>The activity function to be invoked.</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeFunc`10">
      <summary>Invokes an <see cref="T:System.Activities.ActivityFunc`10" />.</summary>
      <typeparam name="T1">The type of the first <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</typeparam>
      <typeparam name="T2">The type of the second <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</typeparam>
      <typeparam name="T3">The type of the third <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</typeparam>
      <typeparam name="T4">The type of the fourth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</typeparam>
      <typeparam name="T5">The type of the fifth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</typeparam>
      <typeparam name="T6">The type of the sixth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</typeparam>
      <typeparam name="T7">The type of the seventh <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</typeparam>
      <typeparam name="T8">The type of the eighth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</typeparam>
      <typeparam name="T9">The type of the ninth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</typeparam>
      <typeparam name="TResult">The type of the return <see cref="T:System.Activities.OutArgument`1" /> whose value is returned from the <see cref="T:System.Activities.ActivityFunc`10" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeFunc`10.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.InvokeFunc`10" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`10.Argument1">
      <summary>Gets or sets the first argument passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</summary>
      <returns>The first argument passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`10.Argument2">
      <summary>Gets or sets the second argument passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</summary>
      <returns>The second argument passed to the <see cref="T:System.Activities.ActivityFunc`10" />.Returns <see cref="T:System.Activities.InArgument`1" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`10.Argument3">
      <summary>Gets or sets the third argument passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</summary>
      <returns>The third argument passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`10.Argument4">
      <summary>Gets or sets the fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</summary>
      <returns>The fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`10.Argument5">
      <summary>Gets or sets the fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</summary>
      <returns>The fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`10.Argument6">
      <summary>Gets or sets the sixth argument passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</summary>
      <returns>The sixth argument passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`10.Argument7">
      <summary>Gets or sets the seventh argument passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</summary>
      <returns>The seventh argument passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`10.Argument8">
      <summary>Gets or sets the eighth argument passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</summary>
      <returns>The eighth argument passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`10.Argument9">
      <summary>Gets or sets the ninth argument passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</summary>
      <returns>The ninth argument passed to the <see cref="T:System.Activities.ActivityFunc`10" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`10.Func">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityFunc`10" /> to be invoked.</summary>
      <returns>The activity function to be invoked.</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeFunc`11">
      <summary>Invokes an <see cref="T:System.Activities.ActivityFunc`11" />.</summary>
      <typeparam name="T1">The type of the first <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</typeparam>
      <typeparam name="T2">The type of the second <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</typeparam>
      <typeparam name="T3">The type of the third <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</typeparam>
      <typeparam name="T4">The type of the fourth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</typeparam>
      <typeparam name="T5">The type of the fifth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</typeparam>
      <typeparam name="T6">The type of the sixth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</typeparam>
      <typeparam name="T7">The type of the seventh <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</typeparam>
      <typeparam name="T8">The type of the eighth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</typeparam>
      <typeparam name="T9">The type of the ninth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</typeparam>
      <typeparam name="T10">The type of the tenth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</typeparam>
      <typeparam name="TResult">The type of the return <see cref="T:System.Activities.OutArgument`1" /> whose value is returned from the <see cref="T:System.Activities.ActivityFunc`11" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeFunc`11.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.InvokeFunc`11" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`11.Argument1">
      <summary>Gets or sets the first argument passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</summary>
      <returns>The first argument passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`11.Argument10">
      <summary>Gets or sets the tenth argument passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</summary>
      <returns>The tenth argument passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`11.Argument2">
      <summary>Gets or sets the second argument passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</summary>
      <returns>The second argument passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`11.Argument3">
      <summary>Gets or sets the third argument passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</summary>
      <returns>The third argument passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`11.Argument4">
      <summary>Gets or sets the fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</summary>
      <returns>The fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`11.Argument5">
      <summary>Gets or sets the fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</summary>
      <returns>The fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`11.Argument6">
      <summary>Gets or sets the sixth argument passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</summary>
      <returns>The sixth argument passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`11.Argument7">
      <summary>Gets or sets the seventh argument passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</summary>
      <returns>The seventh argument passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`11.Argument8">
      <summary>Gets or sets the eighth argument passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</summary>
      <returns>The eighth argument passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`11.Argument9">
      <summary>Gets or sets the ninth argument passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</summary>
      <returns>The ninth argument passed to the <see cref="T:System.Activities.ActivityFunc`11" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`11.Func">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityFunc`11" /> to be invoked.</summary>
      <returns>The activity function to be invoked.</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeFunc`12">
      <summary>Invokes an <see cref="T:System.Activities.ActivityFunc`12" />.</summary>
      <typeparam name="T1">The type of the first <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</typeparam>
      <typeparam name="T2">The type of the second <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</typeparam>
      <typeparam name="T3">The type of the third <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</typeparam>
      <typeparam name="T4">The type of the fourth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</typeparam>
      <typeparam name="T5">The type of the fifth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</typeparam>
      <typeparam name="T6">The type of the sixth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</typeparam>
      <typeparam name="T7">The type of the seventh <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</typeparam>
      <typeparam name="T8">The type of the eighth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</typeparam>
      <typeparam name="T9">The type of the ninth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</typeparam>
      <typeparam name="T10">The type of the tenth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</typeparam>
      <typeparam name="T11">The type of the eleventh <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</typeparam>
      <typeparam name="TResult">The type of the return <see cref="T:System.Activities.OutArgument`1" /> whose value is returned from the <see cref="T:System.Activities.ActivityFunc`12" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeFunc`12.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.InvokeFunc`12" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`12.Argument1">
      <summary>Gets or sets the first argument passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</summary>
      <returns>The first argument passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`12.Argument10">
      <summary>Gets or sets the tenth argument passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</summary>
      <returns>The tenth argument passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`12.Argument11">
      <summary>Gets or sets the eleventh argument passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</summary>
      <returns>The eleventh argument passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`12.Argument2">
      <summary>Gets or sets the second argument passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</summary>
      <returns>The second argument passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`12.Argument3">
      <summary>Gets or sets the third argument passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</summary>
      <returns>The third argument passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`12.Argument4">
      <summary>Gets or sets the fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</summary>
      <returns>The fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`12.Argument5">
      <summary>Gets or sets the fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</summary>
      <returns>The fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`12.Argument6">
      <summary>Gets or sets the sixth argument passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</summary>
      <returns>The sixth argument passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`12.Argument7">
      <summary>Gets or sets the seventh argument passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</summary>
      <returns>The seventh argument passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`12.Argument8">
      <summary>Gets or sets the eighth argument passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</summary>
      <returns>The eighth argument passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`12.Argument9">
      <summary>Gets or sets the ninth argument passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</summary>
      <returns>The ninth argument passed to the <see cref="T:System.Activities.ActivityFunc`12" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`12.Func">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityFunc`12" /> to be invoked.</summary>
      <returns>The activity function to be invoked.</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeFunc`13">
      <summary>Invokes an <see cref="T:System.Activities.ActivityFunc`13" />.</summary>
      <typeparam name="T1">The type of the first <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</typeparam>
      <typeparam name="T2">The type of the second <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</typeparam>
      <typeparam name="T3">The type of the third <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</typeparam>
      <typeparam name="T4">The type of the fourth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</typeparam>
      <typeparam name="T5">The type of the fifth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</typeparam>
      <typeparam name="T6">The type of the sixth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</typeparam>
      <typeparam name="T7">The type of the seventh <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</typeparam>
      <typeparam name="T8">The type of the eighth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</typeparam>
      <typeparam name="T9">The type of the ninth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</typeparam>
      <typeparam name="T10">The type of the tenth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</typeparam>
      <typeparam name="T11">The type of the eleventh <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</typeparam>
      <typeparam name="T12">The type of the twelfth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</typeparam>
      <typeparam name="TResult">The type of the return <see cref="T:System.Activities.OutArgument`1" /> whose value is returned from the <see cref="T:System.Activities.ActivityFunc`13" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeFunc`13.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.InvokeFunc`13" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`13.Argument1">
      <summary>Gets or sets the first argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</summary>
      <returns>The first argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`13.Argument10">
      <summary>Gets or sets the tenth argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</summary>
      <returns>The tenth argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`13.Argument11">
      <summary>Gets or sets the eleventh argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</summary>
      <returns>The eleventh argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`13.Argument12">
      <summary>Gets or sets the twelfth argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</summary>
      <returns>The twelfth argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`13.Argument2">
      <summary>Gets or sets the second argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</summary>
      <returns>The second argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`13.Argument3">
      <summary>Gets or sets the third argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</summary>
      <returns>The third argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`13.Argument4">
      <summary>Gets or sets the fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</summary>
      <returns>The fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`13.Argument5">
      <summary>Gets or sets the fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</summary>
      <returns>The fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`13.Argument6">
      <summary>Gets or sets the sixth argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</summary>
      <returns>The sixth argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`13.Argument7">
      <summary>Gets or sets the seventh argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</summary>
      <returns>The seventh argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`13.Argument8">
      <summary>Gets or sets the eighth argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</summary>
      <returns>The eighth argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`13.Argument9">
      <summary>Gets or sets the ninth argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</summary>
      <returns>The ninth argument passed to the <see cref="T:System.Activities.ActivityFunc`13" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`13.Func">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityFunc`13" /> to be invoked.</summary>
      <returns>The activity function to be invoked.</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeFunc`14">
      <summary>Invokes an <see cref="T:System.Activities.ActivityFunc`14" />.</summary>
      <typeparam name="T1">The type of the first <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</typeparam>
      <typeparam name="T2">The type of the second <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</typeparam>
      <typeparam name="T3">The type of the third <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</typeparam>
      <typeparam name="T4">The type of the fourth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</typeparam>
      <typeparam name="T5">The type of the fifth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</typeparam>
      <typeparam name="T6">The type of the sixth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</typeparam>
      <typeparam name="T7">The type of the seventh <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</typeparam>
      <typeparam name="T8">The type of the eighth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</typeparam>
      <typeparam name="T9">The type of the ninth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</typeparam>
      <typeparam name="T10">The type of the tenth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</typeparam>
      <typeparam name="T11">The type of the eleventh <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</typeparam>
      <typeparam name="T12">The type of the twelfth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</typeparam>
      <typeparam name="T13">The type of the thirteenth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</typeparam>
      <typeparam name="TResult">The type of the return <see cref="T:System.Activities.OutArgument`1" /> whose value is returned from the <see cref="T:System.Activities.ActivityFunc`14" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeFunc`14.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.InvokeFunc`14" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`14.Argument1">
      <summary>Gets or sets the first argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</summary>
      <returns>The first argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`14.Argument10">
      <summary>Gets or sets the tenth argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</summary>
      <returns>The tenth argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`14.Argument11">
      <summary>Gets or sets the eleventh argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</summary>
      <returns>The eleventh argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`14.Argument12">
      <summary>Gets or sets the twelfth argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</summary>
      <returns>The twelfth argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`14.Argument13">
      <summary>Gets or sets the thirteenth argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</summary>
      <returns>The thirteenth argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`14.Argument2">
      <summary>Gets or sets the second argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</summary>
      <returns>The second argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`14.Argument3">
      <summary>Gets or sets the third argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</summary>
      <returns>The third argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`14.Argument4">
      <summary>Gets or sets the fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</summary>
      <returns>The fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`14.Argument5">
      <summary>Gets or sets the fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</summary>
      <returns>The fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`14.Argument6">
      <summary>Gets or sets the sixth argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</summary>
      <returns>The sixth argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`14.Argument7">
      <summary>Gets or sets the seventh argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</summary>
      <returns>The seventh argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`14.Argument8">
      <summary>Gets or sets the eighth argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</summary>
      <returns>The eighth argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`14.Argument9">
      <summary>Gets or sets the ninth argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</summary>
      <returns>The ninth argument passed to the <see cref="T:System.Activities.ActivityFunc`14" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`14.Func">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityFunc`14" /> to be invoked.</summary>
      <returns>The activity function to be invoked.</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeFunc`15">
      <summary>Invokes an <see cref="T:System.Activities.ActivityFunc`15" />.</summary>
      <typeparam name="T1">The type of the first <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</typeparam>
      <typeparam name="T2">The type of the second <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</typeparam>
      <typeparam name="T3">The type of the third <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</typeparam>
      <typeparam name="T4">The type of the fourth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</typeparam>
      <typeparam name="T5">The type of the fifth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</typeparam>
      <typeparam name="T6">The type of the sixth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</typeparam>
      <typeparam name="T7">The type of the seventh <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</typeparam>
      <typeparam name="T8">The type of the eighth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</typeparam>
      <typeparam name="T9">The type of the ninth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</typeparam>
      <typeparam name="T10">The type of the tenth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</typeparam>
      <typeparam name="T11">The type of the eleventh <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</typeparam>
      <typeparam name="T12">The type of the twelfth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</typeparam>
      <typeparam name="T13">The type of the thirteenth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</typeparam>
      <typeparam name="T14">The type of the fourteenth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</typeparam>
      <typeparam name="TResult">The type of the return <see cref="T:System.Activities.OutArgument`1" /> whose value is returned from the <see cref="T:System.Activities.ActivityFunc`15" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeFunc`15.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.InvokeFunc`15" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`15.Argument1">
      <summary>Gets or sets the first argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</summary>
      <returns>The first argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`15.Argument10">
      <summary>Gets or sets the tenth argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</summary>
      <returns>The tenth argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`15.Argument11">
      <summary>Gets or sets the eleventh argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</summary>
      <returns>The eleventh argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`15.Argument12">
      <summary>Gets or sets the twelfth argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</summary>
      <returns>The twelfth argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`15.Argument13">
      <summary>Gets or sets the thirteenth argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</summary>
      <returns>The thirteenth argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`15.Argument14">
      <summary>Gets or sets the fourteenth argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</summary>
      <returns>The fourteenth argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`15.Argument2">
      <summary>Gets or sets the second argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</summary>
      <returns>The second argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`15.Argument3">
      <summary>Gets or sets the third argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</summary>
      <returns>The third argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`15.Argument4">
      <summary>Gets or sets the fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</summary>
      <returns>The fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`15.Argument5">
      <summary>Gets or sets the fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</summary>
      <returns>The fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`15.Argument6">
      <summary>Gets or sets the sixth argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</summary>
      <returns>The sixth argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`15.Argument7">
      <summary>Gets or sets the seventh argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</summary>
      <returns>The seventh argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`15.Argument8">
      <summary>Gets or sets the eighth argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</summary>
      <returns>The eighth argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`15.Argument9">
      <summary>Gets or sets the ninth argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</summary>
      <returns>The ninth argument passed to the <see cref="T:System.Activities.ActivityFunc`15" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`15.Func">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityFunc`15" /> to be invoked.</summary>
      <returns>The activity function to be invoked.</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeFunc`16">
      <summary>Invokes an <see cref="T:System.Activities.ActivityFunc`16" />.</summary>
      <typeparam name="T1">The type of the first <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</typeparam>
      <typeparam name="T2">The type of the second <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</typeparam>
      <typeparam name="T3">The type of the third <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</typeparam>
      <typeparam name="T4">The type of the fourth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</typeparam>
      <typeparam name="T5">The type of the fifth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</typeparam>
      <typeparam name="T6">The type of the sixth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</typeparam>
      <typeparam name="T7">The type of the seventh <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</typeparam>
      <typeparam name="T8">The type of the eighth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</typeparam>
      <typeparam name="T9">The type of the ninth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</typeparam>
      <typeparam name="T10">The type of the tenth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</typeparam>
      <typeparam name="T11">The type of the eleventh <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</typeparam>
      <typeparam name="T12">The type of the twelfth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</typeparam>
      <typeparam name="T13">The type of the thirteenth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</typeparam>
      <typeparam name="T14">The type of the fourteenth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</typeparam>
      <typeparam name="T15">The type of the fifteenth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</typeparam>
      <typeparam name="TResult">The type of the return <see cref="T:System.Activities.OutArgument`1" /> whose value is returned from the <see cref="T:System.Activities.ActivityFunc`16" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeFunc`16.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.InvokeFunc`16" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`16.Argument1">
      <summary>Gets or sets the first argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</summary>
      <returns>The first argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`16.Argument10">
      <summary>Gets or sets the tenth argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</summary>
      <returns>The tenth argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`16.Argument11">
      <summary>Gets or sets the eleventh argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</summary>
      <returns>The eleventh argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`16.Argument12">
      <summary>Gets or sets the twelfth argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</summary>
      <returns>The twelfth argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`16.Argument13">
      <summary>Gets or sets the thirteenth argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</summary>
      <returns>The thirteenth argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`16.Argument14">
      <summary>Gets or sets the fourteenth argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</summary>
      <returns>The fourteenth argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`16.Argument15">
      <summary>Gets or sets the fifteenth argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</summary>
      <returns>The fifteenth argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`16.Argument2">
      <summary>Gets or sets the second argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</summary>
      <returns>The second argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.Returns <see cref="T:System.Activities.InArgument`1" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`16.Argument3">
      <summary>Gets or sets the third argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</summary>
      <returns>The third argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`16.Argument4">
      <summary>Gets or sets the fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</summary>
      <returns>The fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`16.Argument5">
      <summary>Gets or sets the fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</summary>
      <returns>The fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`16.Argument6">
      <summary>Gets or sets the sixth argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</summary>
      <returns>The sixth argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`16.Argument7">
      <summary>Gets or sets the seventh argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</summary>
      <returns>The seventh argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`16.Argument8">
      <summary>Gets or sets the eighth argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</summary>
      <returns>The eighth argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`16.Argument9">
      <summary>Gets or sets the ninth argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</summary>
      <returns>The ninth argument passed to the <see cref="T:System.Activities.ActivityFunc`16" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`16.Func">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityFunc`16" /> to be invoked.</summary>
      <returns>The activity function to be invoked.</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeFunc`17">
      <summary>Invokes an <see cref="T:System.Activities.ActivityFunc`17" />.</summary>
      <typeparam name="T1">The type of the first <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</typeparam>
      <typeparam name="T2">The type of the second <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</typeparam>
      <typeparam name="T3">The type of the third <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</typeparam>
      <typeparam name="T4">The type of the fourth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</typeparam>
      <typeparam name="T5">The type of the fifth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</typeparam>
      <typeparam name="T6">The type of the sixth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</typeparam>
      <typeparam name="T7">The type of the seventh <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</typeparam>
      <typeparam name="T8">The type of the eighth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</typeparam>
      <typeparam name="T9">The type of the ninth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</typeparam>
      <typeparam name="T10">The type of the tenth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</typeparam>
      <typeparam name="T11">The type of the eleventh <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</typeparam>
      <typeparam name="T12">The type of the twelfth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</typeparam>
      <typeparam name="T13">The type of the thirteenth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</typeparam>
      <typeparam name="T14">The type of the fourteenth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</typeparam>
      <typeparam name="T15">The type of the fifteenth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</typeparam>
      <typeparam name="T16">The type of the sixteenth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</typeparam>
      <typeparam name="TResult">The type of the return <see cref="T:System.Activities.OutArgument`1" /> whose value is returned from the <see cref="T:System.Activities.ActivityFunc`17" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeFunc`17.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.InvokeFunc`17" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`17.Argument1">
      <summary>Gets or sets the first argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</summary>
      <returns>The first argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`17.Argument10">
      <summary>Gets or sets the tenth argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</summary>
      <returns>The tenth argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`17.Argument11">
      <summary>Gets or sets the eleventh argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</summary>
      <returns>The eleventh argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`17.Argument12">
      <summary>Gets or sets the twelfth argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</summary>
      <returns>The twelfth argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`17.Argument13">
      <summary>Gets or sets the thirteenth argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</summary>
      <returns>The thirteenth argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`17.Argument14">
      <summary>Gets or sets the fourteenth argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</summary>
      <returns>The fourteenth argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`17.Argument15">
      <summary>Gets or sets the fifteenth argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</summary>
      <returns>The fifteenth argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`17.Argument16">
      <summary>Gets or sets the sixteenth argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</summary>
      <returns>The sixteenth argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`17.Argument2">
      <summary>Gets or sets the second argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</summary>
      <returns>The second argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.Returns <see cref="T:System.Activities.InArgument`1" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`17.Argument3">
      <summary>Gets or sets the third argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</summary>
      <returns>The third argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`17.Argument4">
      <summary>Gets or sets the fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</summary>
      <returns>The fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`17.Argument5">
      <summary>Gets or sets the fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</summary>
      <returns>The fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`17.Argument6">
      <summary>Gets or sets the sixth argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</summary>
      <returns>The sixth argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`17.Argument7">
      <summary>Gets or sets the seventh argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</summary>
      <returns>The seventh argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`17.Argument8">
      <summary>Gets or sets the eighth argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</summary>
      <returns>The eighth argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`17.Argument9">
      <summary>Gets or sets the ninth argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</summary>
      <returns>The ninth argument passed to the <see cref="T:System.Activities.ActivityFunc`17" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`17.Func">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityFunc`17" /> to be invoked.</summary>
      <returns>The activity functions to be invoked.</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeFunc`2">
      <summary>Invokes an <see cref="T:System.Activities.ActivityFunc`2" />.</summary>
      <typeparam name="T">The type of the <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`2" />.</typeparam>
      <typeparam name="TResult">The type of the return <see cref="T:System.Activities.OutArgument`1" /> whose value is returned from the <see cref="T:System.Activities.ActivityFunc`2" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeFunc`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.InvokeFunc`2" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`2.Argument">
      <summary>Gets or sets the argument passed to the <see cref="T:System.Activities.ActivityFunc`2" />.</summary>
      <returns>The argument passed to the <see cref="T:System.Activities.ActivityFunc`2" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`2.Func">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityFunc`2" /> to be invoked.</summary>
      <returns>The <see cref="T:System.Activities.ActivityFunc`2" /> to be invoked.</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeFunc`3">
      <summary>Invokes an <see cref="T:System.Activities.ActivityFunc`3" />.</summary>
      <typeparam name="T1">The type of the first <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`3" />.</typeparam>
      <typeparam name="T2">The type of the second <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`3" />.</typeparam>
      <typeparam name="TResult">The type of the return <see cref="T:System.Activities.OutArgument`1" /> whose value is returned from the <see cref="T:System.Activities.ActivityFunc`3" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeFunc`3.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.InvokeFunc`3" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`3.Argument1">
      <summary>Gets or sets the first argument passed to the <see cref="T:System.Activities.ActivityFunc`3" />.</summary>
      <returns>The first argument passed to the <see cref="T:System.Activities.ActivityFunc`3" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`3.Argument2">
      <summary>Gets or sets the second argument passed to the <see cref="T:System.Activities.ActivityFunc`3" />.</summary>
      <returns>The second argument passed to the <see cref="T:System.Activities.ActivityFunc`3" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`3.Func">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityFunc`3" /> to be invoked.</summary>
      <returns>The activity function to be invoked.</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeFunc`4">
      <summary>Invokes an <see cref="T:System.Activities.ActivityFunc`4" />.</summary>
      <typeparam name="T1">The type of the first <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`4" />.</typeparam>
      <typeparam name="T2">The type of the second <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`4" />.</typeparam>
      <typeparam name="T3">The type of the third <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`4" />.</typeparam>
      <typeparam name="TResult">The type of the return <see cref="T:System.Activities.OutArgument`1" /> whose value is returned from the <see cref="T:System.Activities.ActivityFunc`4" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeFunc`4.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.InvokeFunc`4" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`4.Argument1">
      <summary>Gets or sets the first argument passed to the <see cref="T:System.Activities.ActivityFunc`4" />.</summary>
      <returns>The first argument passed to the <see cref="T:System.Activities.ActivityFunc`4" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`4.Argument2">
      <summary>Gets or sets the second argument passed to the <see cref="T:System.Activities.ActivityFunc`4" />.</summary>
      <returns>The second argument passed to the <see cref="T:System.Activities.ActivityFunc`4" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`4.Argument3">
      <summary>Gets or sets the third argument passed to the <see cref="T:System.Activities.ActivityFunc`4" />.</summary>
      <returns>The third argument passed to the <see cref="T:System.Activities.ActivityFunc`4" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`4.Func">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityFunc`4" /> to be invoked.</summary>
      <returns>The activity function to be invoked.</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeFunc`5">
      <summary>Invokes an <see cref="T:System.Activities.ActivityFunc`5" />.</summary>
      <typeparam name="T1">The type of the first <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`5" />.</typeparam>
      <typeparam name="T2">The type of the second <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`5" />.</typeparam>
      <typeparam name="T3">The type of the third <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`5" />.</typeparam>
      <typeparam name="T4">The type of the fourth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`5" />.</typeparam>
      <typeparam name="TResult">The type of the return <see cref="T:System.Activities.OutArgument`1" /> whose value is returned from the <see cref="T:System.Activities.ActivityFunc`5" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeFunc`5.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.InvokeFunc`5" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`5.Argument1">
      <summary>Gets or sets the first argument passed to the <see cref="T:System.Activities.ActivityFunc`5" />.</summary>
      <returns>The first argument passed to the <see cref="T:System.Activities.ActivityFunc`5" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`5.Argument2">
      <summary>Gets or sets the second argument passed to the <see cref="T:System.Activities.ActivityFunc`5" />.</summary>
      <returns>The second argument passed to the <see cref="T:System.Activities.ActivityFunc`5" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`5.Argument3">
      <summary>Gets or sets the third argument passed to the <see cref="T:System.Activities.ActivityFunc`5" />.</summary>
      <returns>The third argument passed to the <see cref="T:System.Activities.ActivityFunc`5" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`5.Argument4">
      <summary>Gets or sets the fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`5" />.</summary>
      <returns>The fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`5" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`5.Func">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityFunc`5" /> to be invoked.</summary>
      <returns>The activity function to be invoked.</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeFunc`6">
      <summary>Invokes an <see cref="T:System.Activities.ActivityFunc`6" />.</summary>
      <typeparam name="T1">The type of the first <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`6" />.</typeparam>
      <typeparam name="T2">The type of the second <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`6" />.</typeparam>
      <typeparam name="T3">The type of the third <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`6" />.</typeparam>
      <typeparam name="T4">The type of the fourth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`6" />.</typeparam>
      <typeparam name="T5">The type of the fifth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`6" />.</typeparam>
      <typeparam name="TResult">The type of the return <see cref="T:System.Activities.OutArgument`1" /> whose value is returned from the <see cref="T:System.Activities.ActivityFunc`6" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeFunc`6.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.InvokeFunc`6" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`6.Argument1">
      <summary>Gets or sets the first argument passed to the <see cref="T:System.Activities.ActivityFunc`6" />.</summary>
      <returns>The first argument passed to the <see cref="T:System.Activities.ActivityFunc`6" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`6.Argument2">
      <summary>Gets or sets the second argument passed to the <see cref="T:System.Activities.ActivityFunc`6" />.</summary>
      <returns>The second argument passed to the <see cref="T:System.Activities.ActivityFunc`6" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`6.Argument3">
      <summary>Gets or sets the third argument passed to the <see cref="T:System.Activities.ActivityFunc`6" />.</summary>
      <returns>The third argument passed to the <see cref="T:System.Activities.ActivityFunc`6" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`6.Argument4">
      <summary>Gets or sets the fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`6" />.</summary>
      <returns>The fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`6" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`6.Argument5">
      <summary>Gets or sets the fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`6" />.</summary>
      <returns>The fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`6" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`6.Func">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityFunc`6" /> to be invoked.</summary>
      <returns>The activity function to be invoked.</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeFunc`7">
      <summary>Invokes an <see cref="T:System.Activities.ActivityFunc`7" />.</summary>
      <typeparam name="T1">The type of the first <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`7" />.</typeparam>
      <typeparam name="T2">The type of the second <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`7" />.</typeparam>
      <typeparam name="T3">The type of the third <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`7" />.</typeparam>
      <typeparam name="T4">The type of the fourth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`7" />.</typeparam>
      <typeparam name="T5">The type of the fifth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`7" />.</typeparam>
      <typeparam name="T6">The type of the sixth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`7" />.</typeparam>
      <typeparam name="TResult">The type of the return <see cref="T:System.Activities.OutArgument`1" /> whose value is returned from the <see cref="T:System.Activities.ActivityFunc`7" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeFunc`7.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.InvokeFunc`7" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`7.Argument1">
      <summary>Gets or sets the first argument passed to the <see cref="T:System.Activities.ActivityFunc`7" />.</summary>
      <returns>The first argument passed to the <see cref="T:System.Activities.ActivityFunc`7" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`7.Argument2">
      <summary>Gets or sets the second argument passed to the <see cref="T:System.Activities.ActivityFunc`7" />.</summary>
      <returns>The second argument passed to the <see cref="T:System.Activities.ActivityFunc`7" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`7.Argument3">
      <summary>Gets or sets the third argument passed to the <see cref="T:System.Activities.ActivityFunc`7" />.</summary>
      <returns>The third argument passed to the <see cref="T:System.Activities.ActivityFunc`7" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`7.Argument4">
      <summary>Gets or sets the fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`7" />.</summary>
      <returns>The fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`7" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`7.Argument5">
      <summary>Gets or sets the fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`7" />.</summary>
      <returns>The fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`7" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`7.Argument6">
      <summary>Gets or sets the sixth argument passed to the <see cref="T:System.Activities.ActivityFunc`7" />.</summary>
      <returns>The sixth argument passed to the <see cref="T:System.Activities.ActivityFunc`7" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`7.Func">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityFunc`7" /> to be invoked.</summary>
      <returns>The activity function to be invoked.</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeFunc`8">
      <summary>Invokes an <see cref="T:System.Activities.ActivityFunc`8" />.</summary>
      <typeparam name="T1">The type of the first <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`8" />.</typeparam>
      <typeparam name="T2">The type of the second <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`8" />.</typeparam>
      <typeparam name="T3">The type of the third <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`8" />.</typeparam>
      <typeparam name="T4">The type of the fourth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`8" />.</typeparam>
      <typeparam name="T5">The type of the fifth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`8" />.</typeparam>
      <typeparam name="T6">The type of the sixth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`8" />.</typeparam>
      <typeparam name="T7">The type of the seventh <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`8" />.</typeparam>
      <typeparam name="TResult">The type of the return <see cref="T:System.Activities.OutArgument`1" /> whose value is returned from the <see cref="T:System.Activities.ActivityFunc`8" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeFunc`8.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.InvokeFunc`8" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`8.Argument1">
      <summary>Gets or sets the first argument passed to the <see cref="T:System.Activities.ActivityFunc`8" />.</summary>
      <returns>The first argument passed to the <see cref="T:System.Activities.ActivityFunc`8" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`8.Argument2">
      <summary>Gets or sets the second argument passed to the <see cref="T:System.Activities.ActivityFunc`8" />.</summary>
      <returns>The second argument passed to the <see cref="T:System.Activities.ActivityFunc`8" />.Returns <see cref="T:System.Activities.InArgument`1" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`8.Argument3">
      <summary>Gets or sets the third argument passed to the <see cref="T:System.Activities.ActivityFunc`8" />.</summary>
      <returns>The third argument passed to the <see cref="T:System.Activities.ActivityFunc`8" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`8.Argument4">
      <summary>Gets or sets the fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`8" />.</summary>
      <returns>The fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`8" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`8.Argument5">
      <summary>Gets or sets the fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`8" />.</summary>
      <returns>The fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`8" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`8.Argument6">
      <summary>Gets or sets the sixth argument passed to the <see cref="T:System.Activities.ActivityFunc`8" />.</summary>
      <returns>The sixth argument passed to the <see cref="T:System.Activities.ActivityFunc`8" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`8.Argument7">
      <summary>Gets or sets the seventh argument passed to the <see cref="T:System.Activities.ActivityFunc`8" />.</summary>
      <returns>The seventh argument passed to the <see cref="T:System.Activities.ActivityFunc`8" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`8.Func">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityFunc`8" /> to be invoked.</summary>
      <returns>The activity function to be invoked.</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeFunc`9">
      <summary>Invokes an <see cref="T:System.Activities.ActivityFunc`9" />.</summary>
      <typeparam name="T1">The type of the first <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</typeparam>
      <typeparam name="T2">The type of the second <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</typeparam>
      <typeparam name="T3">The type of the third <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</typeparam>
      <typeparam name="T4">The type of the fourth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</typeparam>
      <typeparam name="T5">The type of the fifth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</typeparam>
      <typeparam name="T6">The type of the sixth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</typeparam>
      <typeparam name="T7">The type of the seventh <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</typeparam>
      <typeparam name="T8">The type of the eighth <see cref="T:System.Activities.InArgument`1" /> whose value is passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</typeparam>
      <typeparam name="TResult">The type of the return <see cref="T:System.Activities.OutArgument`1" /> whose value is returned from the <see cref="T:System.Activities.ActivityFunc`9" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeFunc`9.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.InvokeFunc`9" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`9.Argument1">
      <summary>Gets or sets the first argument passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</summary>
      <returns>The first argument passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`9.Argument2">
      <summary>Gets or sets the second argument passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</summary>
      <returns>The second argument passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`9.Argument3">
      <summary>Gets or sets the third argument passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</summary>
      <returns>The third argument passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`9.Argument4">
      <summary>Gets or sets the fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</summary>
      <returns>The fourth argument passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`9.Argument5">
      <summary>Gets or sets the fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</summary>
      <returns>The fifth argument passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`9.Argument6">
      <summary>Gets or sets the sixth argument passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</summary>
      <returns>The sixth argument passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`9.Argument7">
      <summary>Gets or sets the seventh argument passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</summary>
      <returns>The seventh argument passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`9.Argument8">
      <summary>Gets or sets the eighth argument passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</summary>
      <returns>The eighth argument passed to the <see cref="T:System.Activities.ActivityFunc`9" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`9.Func">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityFunc`9" /> to be invoked.</summary>
      <returns>The activity function to be invoked.</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeMethod`1">
      <summary>Calls a public method of a specified object or type.</summary>
      <typeparam name="TResult">The type of value returned by the activity.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeMethod`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.InvokeMethod`1" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeMethod`1.GenericTypeArguments">
      <summary>The generic type arguments of the contained method.</summary>
      <returns>The arguments.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeMethod`1.MethodName">
      <summary>The name of the method to be invoked when the activity executes.</summary>
      <returns>The method name.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeMethod`1.Parameters">
      <summary>The parameter collection of the method to be invoked.</summary>
      <returns>The parameter collection.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeMethod`1.RunAsynchronously">
      <summary>Gets or sets a value that indicates whether the activity’s method is invoked asynchronously.</summary>
      <returns>true if the method executes asynchronously; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeMethod`1.TargetObject">
      <summary>Gets or sets the object that contains the method to invoke.</summary>
      <returns>The method to invoke.</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeMethod`1.TargetType">
      <summary>Gets or sets the type of the <see cref="P:System.Activities.Expressions.InvokeMethod`1.TargetObject" />.</summary>
      <returns>The target object type.</returns>
    </member>
    <member name="T:System.Activities.Expressions.ITextExpression">
      <summary>Represents a text expression.</summary>
    </member>
    <member name="P:System.Activities.Expressions.ITextExpression.ExpressionText">
      <summary>Gets the expression text to be evaluated.</summary>
      <returns>The expression text to be evaluated.</returns>
    </member>
    <member name="M:System.Activities.Expressions.ITextExpression.GetExpressionTree">
      <summary>Gets the expression tree.</summary>
      <returns>The expression tree.</returns>
    </member>
    <member name="P:System.Activities.Expressions.ITextExpression.Language">
      <summary>Gets the language information that applies to interface text expression.</summary>
      <returns>The language information that applies to interface text expression.</returns>
    </member>
    <member name="P:System.Activities.Expressions.ITextExpression.RequiresCompilation">
      <summary>Gets a value that indicates whether the ITextExpression requires compilation.</summary>
      <returns>True if the ITextExpression requires compilation; otherwise, false.</returns>
    </member>
    <member name="T:System.Activities.Expressions.LambdaReference`1">
      <summary>Represents a lambda expression used as an l-value, which supports binding of <see cref="F:System.Activities.ArgumentDirection.Out" /> arguments.</summary>
      <typeparam name="T">The type of value returned by the expression.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.LambdaReference`1.#ctor(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,`0}})">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.LambdaReference`1" /> class.</summary>
      <param name="locationExpression">The value of the expression.</param>
    </member>
    <member name="M:System.Activities.Expressions.LambdaReference`1.CanConvertToString(System.Windows.Markup.IValueSerializerContext)">
      <summary>This method always returns true and is used in conjunction with <see cref="M:System.Activities.Expressions.LambdaReference`1.ConvertToString(System.Windows.Markup.IValueSerializerContext)" /> to provide descriptive error messages when an attempt is made to serialize this activity to XAML.</summary>
      <returns>This method always returns true.</returns>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Activities.Expressions.LambdaReference`1.ConvertToString(System.Windows.Markup.IValueSerializerContext)">
      <summary>Throws a <see cref="T:System.Activities.Expressions.LambdaSerializationException" /> and is used in conjunction with <see cref="M:System.Activities.Expressions.LambdaReference`1.CanConvertToString(System.Windows.Markup.IValueSerializerContext)" /> to provide descriptive error messages when an attempt is made to serialize this activity to XAML.</summary>
      <returns>This method throws a <see cref="T:System.Activities.Expressions.LambdaSerializationException" /> when called.</returns>
      <param name="context">The context information that is used for conversion.</param>
    </member>
    <member name="T:System.Activities.Expressions.LambdaSerializationException">
      <summary>The exception that is thrown when a XAML serialization attempt is made on a <see cref="T:System.Activities.Expressions.LambdaValue`1" /> or <see cref="T:System.Activities.Expressions.LambdaReference`1" />.</summary>
    </member>
    <member name="M:System.Activities.Expressions.LambdaSerializationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.LambdaSerializationException" /> class.</summary>
    </member>
    <member name="M:System.Activities.Expressions.LambdaSerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.LambdaSerializationException" /> class with serialized data.</summary>
      <param name="info">The serialized object data about the exception being thrown.</param>
      <param name="context">The contextual information about the source or destination. </param>
    </member>
    <member name="M:System.Activities.Expressions.LambdaSerializationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.LambdaSerializationException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.Activities.Expressions.LambdaSerializationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.LambdaSerializationException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="T:System.Activities.Expressions.LambdaValue`1">
      <summary>Represents a lambda expression used as an r-value, which supports binding of <see cref="F:System.Activities.ArgumentDirection.In" /> arguments.</summary>
      <typeparam name="TResult">The type of value returned by the expression.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.LambdaValue`1.#ctor(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,`0}})">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.LambdaValue`1" /> class using the specified expression.</summary>
      <param name="lambdaValue">The lambda expression that represents the value of the <see cref="T:System.Activities.Expressions.LambdaValue`1" />.</param>
    </member>
    <member name="M:System.Activities.Expressions.LambdaValue`1.CanConvertToString(System.Windows.Markup.IValueSerializerContext)">
      <summary>This method always returns true and is used in conjunction with <see cref="M:System.Activities.Expressions.LambdaValue`1.ConvertToString(System.Windows.Markup.IValueSerializerContext)" /> to provide descriptive error messages when an attempt is made to serialize this activity to XAML.</summary>
      <returns>This method always returns true.</returns>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Activities.Expressions.LambdaValue`1.ConvertToString(System.Windows.Markup.IValueSerializerContext)">
      <summary>Throws a <see cref="T:System.Activities.Expressions.LambdaSerializationException" />, and is used in conjunction with <see cref="M:System.Activities.Expressions.LambdaValue`1.CanConvertToString(System.Windows.Markup.IValueSerializerContext)" /> to provide descriptive error messages when an attempt is made to serialize this activity to XAML.</summary>
      <returns>Throws a <see cref="T:System.Activities.Expressions.LambdaSerializationException" /> when called.</returns>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="T:System.Activities.Expressions.LessThan`3">
      <summary>Performs a relational test between two values. If the left operand is less than the right operand, the expression returns true. Otherwise, it returns false.</summary>
      <typeparam name="TLeft">The type of the left operand. </typeparam>
      <typeparam name="TRight">The type of the right operand.</typeparam>
      <typeparam name="TResult">The type of the result. </typeparam>
    </member>
    <member name="M:System.Activities.Expressions.LessThan`3.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.LessThan`3" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.LessThan`3.Left">
      <summary>Gets or sets the left operand.</summary>
      <returns>The left operand.</returns>
    </member>
    <member name="P:System.Activities.Expressions.LessThan`3.Right">
      <summary>Gets or sets the right operand.</summary>
      <returns>The right operand.</returns>
    </member>
    <member name="T:System.Activities.Expressions.LessThanOrEqual`3">
      <summary>Performs a relational test between two values. If the left operand is less than or equal to the right operand, the expression returns true. Otherwise, it returns false.</summary>
      <typeparam name="TLeft">The type of the left operand. </typeparam>
      <typeparam name="TRight">The type of the right operand.</typeparam>
      <typeparam name="TResult">The type of the result. </typeparam>
    </member>
    <member name="M:System.Activities.Expressions.LessThanOrEqual`3.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.LessThanOrEqual`3" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.LessThanOrEqual`3.Left">
      <summary>Gets or sets the left operand.</summary>
      <returns>The <see cref="F:System.Activities.Design.View.PropertyKind.InArgument" /> that represents the left operand.</returns>
    </member>
    <member name="P:System.Activities.Expressions.LessThanOrEqual`3.Right">
      <summary>Gets or sets the right operand.</summary>
      <returns>The <see cref="F:System.Activities.Design.View.PropertyKind.InArgument" /> that represents the right operand.</returns>
    </member>
    <member name="T:System.Activities.Expressions.Literal`1">
      <summary>Represents an expression activity that returns a literal value of the specified type.</summary>
      <typeparam name="T">The type of the value.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.Literal`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.Literal`1" /> class.</summary>
    </member>
    <member name="M:System.Activities.Expressions.Literal`1.#ctor(`0)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.Literal`1" /> class using the specified value.</summary>
      <param name="value">The literal value of the expression.</param>
    </member>
    <member name="M:System.Activities.Expressions.Literal`1.CanConvertToString(System.Windows.Markup.IValueSerializerContext)">
      <summary>Gets a value that indicates whether the <see cref="T:System.Activities.Expressions.Literal`1" /> can be converted into a <see cref="T:System.String" />.</summary>
      <returns>true if the value can be converted into a <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="context">The context information that is used for conversion.</param>
    </member>
    <member name="M:System.Activities.Expressions.Literal`1.ConvertToString(System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts the <see cref="T:System.Activities.Expressions.Literal`1" /> to a <see cref="T:System.String" />.</summary>
      <returns>The literal expression.</returns>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Activities.Expressions.Literal`1.ShouldSerializeValue">
      <summary>Returns a value that indicates whether the <see cref="P:System.Activities.Expressions.Literal`1.Value" /> property has changed from its default value and should be serialized.</summary>
      <returns>true if the <see cref="P:System.Activities.Expressions.Literal`1.Value" /> property value should be serialized; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.Expressions.Literal`1.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents the literal’s value.</summary>
      <returns>The string representation of the literal’s value.</returns>
    </member>
    <member name="P:System.Activities.Expressions.Literal`1.Value">
      <summary>Gets or sets the value of the literal expression.</summary>
      <returns>The value of the literal expression.</returns>
    </member>
    <member name="T:System.Activities.Expressions.MultidimensionalArrayItemReference`1">
      <summary>Represents an element in a multidimensional array that can be used as an l-value in an expression.</summary>
      <typeparam name="TItem">The type of elements in the array.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.MultidimensionalArrayItemReference`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.MultidimensionalArrayItemReference`1" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.MultidimensionalArrayItemReference`1.Array">
      <summary>Gets or sets the array referenced by the <see cref="T:System.Activities.Expressions.MultidimensionalArrayItemReference`1" />.</summary>
      <returns>The array referenced by the <see cref="T:System.Activities.Expressions.MultidimensionalArrayItemReference`1" />.</returns>
    </member>
    <member name="P:System.Activities.Expressions.MultidimensionalArrayItemReference`1.Indices">
      <summary>Gets a collection of arguments that represent the indices of the element in the array.</summary>
      <returns>The indices of the element in the array.</returns>
    </member>
    <member name="T:System.Activities.Expressions.Multiply`3">
      <summary>Computes the product of two values.</summary>
      <typeparam name="TLeft">The type of the left operand.</typeparam>
      <typeparam name="TRight">The type of the right operand.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.Multiply`3.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.Multiply`3" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.Multiply`3.Checked">
      <summary>Gets or sets a value that indicates whether the multiplication executes in a checked context.</summary>
      <returns>true if the multiplication executes in a checked context; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Activities.Expressions.Multiply`3.Left">
      <summary>Gets or sets the left operand.</summary>
      <returns>The left operand.</returns>
    </member>
    <member name="P:System.Activities.Expressions.Multiply`3.Right">
      <summary>Gets or sets the right operand.</summary>
      <returns>The right operand.</returns>
    </member>
    <member name="T:System.Activities.Expressions.New`1">
      <summary>Creates a new instance of the type specified by the <paramref name="TResult" /> type.</summary>
      <typeparam name="TResult">The type of the instance being created.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.New`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.New`1" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.New`1.Arguments">
      <summary>Gets the arguments required by the constructor.</summary>
      <returns>The arguments required by the constructor.</returns>
    </member>
    <member name="T:System.Activities.Expressions.NewArray`1">
      <summary>Creates a new instance of the array type specified by the <paramref name="Tresult" /> type.</summary>
      <typeparam name="TResult">The type of the instance being created.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.NewArray`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.NewArray`1" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.NewArray`1.Bounds">
      <summary>Gets the bounds on each dimension of the array.</summary>
      <returns>The bounds on each dimension of the array.</returns>
    </member>
    <member name="T:System.Activities.Expressions.Not`2">
      <summary>Computes the logical negation of a value expression.</summary>
      <typeparam name="TOperand">The type of the value expression.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.Not`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.Not`2" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.Not`2.Operand">
      <summary>Gets the value expression that is negated.</summary>
      <returns>The value expression that is negated.</returns>
    </member>
    <member name="T:System.Activities.Expressions.NotEqual`3">
      <summary>Performs an inequality test between two values. If the two values are not equal the expression returns true; otherwise, it returns false.</summary>
      <typeparam name="TLeft">The type of the left operand.</typeparam>
      <typeparam name="TRight">The type of the right operand. </typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.NotEqual`3.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.NotEqual`3" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.NotEqual`3.Left">
      <summary>Gets or sets the left operand.</summary>
      <returns>The left operand.</returns>
    </member>
    <member name="P:System.Activities.Expressions.NotEqual`3.Right">
      <summary>Gets or sets the right operand.</summary>
      <returns>The right operand.</returns>
    </member>
    <member name="T:System.Activities.Expressions.Or`3">
      <summary>Computes the bitwise logical OR of two values.</summary>
      <typeparam name="TLeft">The type of the left operand.</typeparam>
      <typeparam name="TRight">The type of the right operand.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.Or`3.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.Or`3" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.Or`3.Left">
      <summary>Gets or sets the left operand.</summary>
      <returns>The left operand.</returns>
    </member>
    <member name="P:System.Activities.Expressions.Or`3.Right">
      <summary>Gets or sets the right operand.</summary>
      <returns>The right operand.</returns>
    </member>
    <member name="T:System.Activities.Expressions.OrElse">
      <summary>Computes the logical OR of two values. To do this, both operands are evaluated to boolean values. If both operands are false then the expression returns false. If one or both operands evaluate to true, the expression returns true.</summary>
    </member>
    <member name="M:System.Activities.Expressions.OrElse.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.OrElse" /> class. </summary>
    </member>
    <member name="P:System.Activities.Expressions.OrElse.Left">
      <summary>Gets or sets the left operand.</summary>
      <returns>The <see cref="T:System.Activities.Activity" /> that represents the left operand.</returns>
    </member>
    <member name="P:System.Activities.Expressions.OrElse.Right">
      <summary>Gets or sets the right operand.</summary>
      <returns>The <see cref="T:System.Activities.Activity" /> that represents the right operand.</returns>
    </member>
    <member name="T:System.Activities.Expressions.PropertyReference`2">
      <summary>A reference to a property.</summary>
      <typeparam name="TOperand">The type of the operand.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.PropertyReference`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.PropertyReference`2" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.PropertyReference`2.Operand">
      <summary>Gets or sets the property reference.</summary>
      <returns>The property reference.</returns>
    </member>
    <member name="P:System.Activities.Expressions.PropertyReference`2.PropertyName">
      <summary>Gets or sets the name of the property being referenced.</summary>
      <returns>The name of the property being referenced.</returns>
    </member>
    <member name="T:System.Activities.Expressions.PropertyValue`2">
      <summary>A property value.</summary>
      <typeparam name="TOperand">The type of the operand.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.PropertyValue`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.PropertyValue`2" /> class. </summary>
    </member>
    <member name="P:System.Activities.Expressions.PropertyValue`2.Operand">
      <summary>Gets or sets the property value.</summary>
      <returns>The property value.</returns>
    </member>
    <member name="P:System.Activities.Expressions.PropertyValue`2.PropertyName">
      <summary>Gets or sets the property name.</summary>
      <returns>The property name.</returns>
    </member>
    <member name="T:System.Activities.Expressions.Subtract`3">
      <summary>Computes the difference between two values.</summary>
      <typeparam name="TLeft">The type of the left operand.</typeparam>
      <typeparam name="TRight">The type of the right operand.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.Subtract`3.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.Subtract`3" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.Subtract`3.Checked">
      <summary>Gets or sets a value that indicates whether the subtraction executes in a checked context.</summary>
      <returns>true if the subtraction executes in a checked context; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Activities.Expressions.Subtract`3.Left">
      <summary>Gets or sets the left operand.</summary>
      <returns>The left operand.</returns>
    </member>
    <member name="P:System.Activities.Expressions.Subtract`3.Right">
      <summary>Gets or sets the right operand.</summary>
      <returns>The right operand.</returns>
    </member>
    <member name="T:System.Activities.Expressions.TextExpression">
      <summary>Represents a text expression.</summary>
    </member>
    <member name="P:System.Activities.Expressions.TextExpression.DefaultNamespaces">
      <summary>Gets the default namespaces within the activity.</summary>
      <returns>The default namespaces within the activity.</returns>
    </member>
    <member name="P:System.Activities.Expressions.TextExpression.DefaultReferences">
      <summary>Gets the default references within the activity.</summary>
      <returns>The default references within the activity.</returns>
    </member>
    <member name="M:System.Activities.Expressions.TextExpression.GetNamespaces(System.Object)">
      <summary>Gets the collection of namespaces used in the text expression.</summary>
      <returns>The collection of namespaces.</returns>
      <param name="target">The target.</param>
    </member>
    <member name="M:System.Activities.Expressions.TextExpression.GetNamespacesForImplementation(System.Object)">
      <summary>Get the collection of namespaces for the implementation of the text expression.</summary>
      <returns>The collection of namespaces.</returns>
      <param name="target">The target.</param>
    </member>
    <member name="M:System.Activities.Expressions.TextExpression.GetNamespacesInScope(System.Activities.Activity)">
      <summary>Gets the namespaces that are being used within the scope.</summary>
      <returns>The namespaces that are being used within the scope.</returns>
      <param name="activity">The activity for the scope.</param>
    </member>
    <member name="M:System.Activities.Expressions.TextExpression.GetReferences(System.Object)">
      <summary>Gets the list of references used for the text expression.</summary>
      <returns>The list of references used.</returns>
      <param name="target">The target.</param>
    </member>
    <member name="M:System.Activities.Expressions.TextExpression.GetReferencesForImplementation(System.Object)">
      <summary>Gets the list of references used for the implementation of the text expression.</summary>
      <returns>The list of references used.</returns>
      <param name="target">The target.</param>
    </member>
    <member name="M:System.Activities.Expressions.TextExpression.GetReferencesInScope(System.Activities.Activity)">
      <summary>Gets the references that are being used within the scope.</summary>
      <returns>The references that are being used within the scope.</returns>
      <param name="activity">The activity for the scope.</param>
    </member>
    <member name="M:System.Activities.Expressions.TextExpression.SetNamespaces(System.Object,System.Collections.Generic.IList{System.String})">
      <summary>Sets the namespace for the Text expression with specified target and namespaces.</summary>
      <param name="target">The target.</param>
      <param name="namespaces">The generic list of the namespaces.</param>
    </member>
    <member name="M:System.Activities.Expressions.TextExpression.SetNamespaces(System.Object,System.String[])">
      <summary>Sets the namespace for the Text expression with specified target and namespaces.</summary>
      <param name="target">The target.</param>
      <param name="namespaces">The array of namespaces.</param>
    </member>
    <member name="M:System.Activities.Expressions.TextExpression.SetNamespacesForImplementation(System.Object,System.Collections.Generic.IList{System.String})">
      <summary>Represents an object to set namespaces for implementation of the text expression with specified target and namespaces.</summary>
      <param name="target">The target.</param>
      <param name="namespaces">The list of namespaces.</param>
    </member>
    <member name="M:System.Activities.Expressions.TextExpression.SetNamespacesForImplementation(System.Object,System.String[])">
      <summary>Represents an object to set namespaces for implementation of the text expression with specified target and namespaces.</summary>
      <param name="target">The target.</param>
      <param name="namespaces">The collection of namespaces.</param>
    </member>
    <member name="M:System.Activities.Expressions.TextExpression.SetReferences(System.Object,System.Activities.Expressions.AssemblyReference[])">
      <summary>Represents an object to set references of the text expression with specified target and reference.</summary>
      <param name="target">The target.</param>
      <param name="references">The collection of references</param>
    </member>
    <member name="M:System.Activities.Expressions.TextExpression.SetReferences(System.Object,System.Collections.Generic.IList{System.Activities.Expressions.AssemblyReference})">
      <summary>Represents an object to set references of the text expression with specified target and reference.</summary>
      <param name="target">The target.</param>
      <param name="references">The generic list of references.</param>
    </member>
    <member name="M:System.Activities.Expressions.TextExpression.SetReferencesForImplementation(System.Object,System.Activities.Expressions.AssemblyReference[])">
      <summary>Represents an object to set references for implementation of the text expression with specified target and reference.</summary>
      <param name="target">The target.</param>
      <param name="references">The collection of the assembly reference.</param>
    </member>
    <member name="M:System.Activities.Expressions.TextExpression.SetReferencesForImplementation(System.Object,System.Collections.Generic.IList{System.Activities.Expressions.AssemblyReference})">
      <summary>Represents an object to set references for implementation of the text expression with specified target and reference.</summary>
      <param name="target">The target.</param>
      <param name="references">The generic list of the assembly reference.</param>
    </member>
    <member name="M:System.Activities.Expressions.TextExpression.ShouldSerializeNamespaces(System.Object)">
      <summary>Represents a value that indicates whether the object should serialize namespaces.</summary>
      <returns>True if the object should serialize namespaces; otherwise, false.</returns>
      <param name="target">The target object.</param>
    </member>
    <member name="M:System.Activities.Expressions.TextExpression.ShouldSerializeNamespacesForImplementation(System.Object)">
      <summary>Represents a value that indicates whether the target should serialize namespaces for implementation.</summary>
      <returns>True if the target should serialize namespaces for implementation; otherwise, false.</returns>
      <param name="target">The target object.</param>
    </member>
    <member name="M:System.Activities.Expressions.TextExpression.ShouldSerializeReferences(System.Object)">
      <summary>Represents a value that indicates whether the object should serialize references.</summary>
      <returns>True if the object should serialize references; otherwise, false.</returns>
      <param name="target">The target object.</param>
    </member>
    <member name="M:System.Activities.Expressions.TextExpression.ShouldSerializeReferencesForImplementation(System.Object)">
      <summary>Represents a value that indicates whether the text expression should serialize namespaces for implementation.</summary>
      <returns>True if the text expression should serialize namespaces for implementation; otherwise, false.</returns>
      <param name="target">The target object.</param>
    </member>
    <member name="T:System.Activities.Expressions.ValueTypeFieldReference`2">
      <summary>Represents a field on a value type that can be used as an l-value in an expression.</summary>
      <typeparam name="TOperand">The value type.</typeparam>
      <typeparam name="TResult">The field type.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.ValueTypeFieldReference`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.ValueTypeFieldReference`2" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.ValueTypeFieldReference`2.FieldName">
      <summary>Gets or sets the name of the field.</summary>
      <returns>The name of the field.</returns>
    </member>
    <member name="P:System.Activities.Expressions.ValueTypeFieldReference`2.OperandLocation">
      <summary>Gets or sets the instance of the value type that contains the field.</summary>
      <returns>The instance of the value type that contains the field.</returns>
    </member>
    <member name="T:System.Activities.Expressions.ValueTypeIndexerReference`2">
      <summary>Represents an element referenced by an indexer on a value type that can be used as an l-value in an expression.</summary>
      <typeparam name="TOperand">The value type with the indexer.</typeparam>
      <typeparam name="TItem">The type of indexer array.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.ValueTypeIndexerReference`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.ValueTypeIndexerReference`2" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.ValueTypeIndexerReference`2.Indices">
      <summary>Gets a collection of arguments that represent the indices of the element in the indexer array.</summary>
      <returns>The indices of the element in the indexer array.</returns>
    </member>
    <member name="P:System.Activities.Expressions.ValueTypeIndexerReference`2.OperandLocation">
      <summary>Gets or sets the instance of the value type that contains the indexer.</summary>
      <returns>The instance of the value type that contains the indexer.</returns>
    </member>
    <member name="T:System.Activities.Expressions.ValueTypePropertyReference`2">
      <summary>Represents a property on a value type that can be used as an l-value in an expression.</summary>
      <typeparam name="TOperand">The value type.</typeparam>
      <typeparam name="TResult">The property type.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.ValueTypePropertyReference`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.ValueTypePropertyReference`2" /> class.</summary>
    </member>
    <member name="P:System.Activities.Expressions.ValueTypePropertyReference`2.OperandLocation">
      <summary>Gets or sets the instance of the value type that contains the property.</summary>
      <returns>The instance of the value type that contains the property.</returns>
    </member>
    <member name="P:System.Activities.Expressions.ValueTypePropertyReference`2.PropertyName">
      <summary>Gets or sets the name of the property.</summary>
      <returns>The name of the property.</returns>
    </member>
    <member name="T:System.Activities.Expressions.VariableReference`1">
      <summary>Represents a <see cref="T:System.Activities.Variable" /> used as an l-value in an expression.</summary>
      <typeparam name="T">The type of the <see cref="T:System.Activities.Expressions.VariableReference`1" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.VariableReference`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.VariableReference`1" /> class.</summary>
    </member>
    <member name="M:System.Activities.Expressions.VariableReference`1.#ctor(System.Activities.Variable)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.VariableReference`1" /> class using the specified variable.</summary>
      <param name="variable">The value of the expression.</param>
    </member>
    <member name="P:System.Activities.Expressions.VariableReference`1.LocationReference">
      <summary>Gets the variable reference of <see cref="T:System.Activities.Expressions.VariableReference`1" />.</summary>
      <returns>The variable reference.</returns>
    </member>
    <member name="M:System.Activities.Expressions.VariableReference`1.ToString">
      <summary>Returns a <see cref="T:System.String" /> representation of the <see cref="T:System.Activities.Expressions.VariableReference`1" />.</summary>
      <returns>The variable reference.</returns>
    </member>
    <member name="P:System.Activities.Expressions.VariableReference`1.Variable">
      <summary>Gets or sets the <see cref="T:System.Activities.Variable" /> represented by the <see cref="T:System.Activities.Expressions.VariableReference`1" />.</summary>
      <returns>The variable.</returns>
    </member>
    <member name="T:System.Activities.Expressions.VariableValue`1">
      <summary>Represents a <see cref="T:System.Activities.Variable" /> used as an r-value in an expression.</summary>
      <typeparam name="T">The type of the <see cref="T:System.Activities.Expressions.VariableValue`1" />.</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.VariableValue`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.VariableValue`1" /> class.</summary>
    </member>
    <member name="M:System.Activities.Expressions.VariableValue`1.#ctor(System.Activities.Variable)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Expressions.VariableValue`1" /> class using the specified variable.</summary>
      <param name="variable">The value of the expression.</param>
    </member>
    <member name="P:System.Activities.Expressions.VariableValue`1.LocationReference">
      <summary>Gets the location reference of <see cref="T:System.Activities.Expressions.VariableValue`1" />.</summary>
      <returns>The location reference.</returns>
    </member>
    <member name="M:System.Activities.Expressions.VariableValue`1.ToString">
      <summary>Returns a <see cref="T:System.String" /> representation of the <see cref="T:System.Activities.Expressions.VariableValue`1" />.</summary>
      <returns>The value of the variable.</returns>
    </member>
    <member name="P:System.Activities.Expressions.VariableValue`1.Variable">
      <summary>Gets or sets the <see cref="T:System.Activities.Variable" /> represented by the <see cref="T:System.Activities.Expressions.VariableValue`1" />.</summary>
      <returns>The variable.</returns>
    </member>
    <member name="T:System.Activities.Hosting.BookmarkInfo">
      <summary>Represents information about a named <see cref="T:System.Activities.Bookmark" />.</summary>
    </member>
    <member name="P:System.Activities.Hosting.BookmarkInfo.BookmarkName">
      <summary>Gets the name associated with the <see cref="T:System.Activities.Bookmark" />.</summary>
      <returns>The name associated with the <see cref="T:System.Activities.Bookmark" />.</returns>
    </member>
    <member name="P:System.Activities.Hosting.BookmarkInfo.OwnerDisplayName">
      <summary>Gets an optional friendly name that is used for debugging, validation, exception handling, and tracking.</summary>
      <returns>A friendly name that is used for debugging, validation, exception handling, and tracking.</returns>
    </member>
    <member name="P:System.Activities.Hosting.BookmarkInfo.ScopeInfo">
      <summary>Gets the <see cref="T:System.Activities.Hosting.BookmarkScopeInfo" /> of the <see cref="T:System.Activities.BookmarkScope" /> associated with the <see cref="T:System.Activities.Bookmark" />.</summary>
      <returns>The bookmark scope information of the <see cref="T:System.Activities.BookmarkScope" /> associated with the <see cref="T:System.Activities.Bookmark" />.</returns>
    </member>
    <member name="T:System.Activities.Hosting.BookmarkScopeInfo">
      <summary>Contains identification and initialization information about a <see cref="T:System.Activities.BookmarkScope" /> object.</summary>
    </member>
    <member name="P:System.Activities.Hosting.BookmarkScopeInfo.Id">
      <summary>Gets the unique identifier for the <see cref="T:System.Activities.BookmarkScope" />.</summary>
      <returns>The unique identifier for the <see cref="T:System.Activities.BookmarkScope" />.</returns>
    </member>
    <member name="P:System.Activities.Hosting.BookmarkScopeInfo.IsInitialized">
      <summary>Gets a value that indicates whether the <see cref="T:System.Activities.BookmarkScope" /> has been initialized.</summary>
      <returns>true if the <see cref="T:System.Activities.BookmarkScope" /> has been initialized; otherwise false.</returns>
    </member>
    <member name="P:System.Activities.Hosting.BookmarkScopeInfo.TemporaryId">
      <summary>Gets a value that uniquely identifies the <see cref="T:System.Activities.BookmarkScope" /> when the <see cref="T:System.Activities.BookmarkScope" /> is in an uninitialized state.</summary>
      <returns>A value that uniquely identifies the <see cref="T:System.Activities.BookmarkScope" /> when the <see cref="T:System.Activities.BookmarkScope" /> is in an uninitialized state.</returns>
    </member>
    <member name="T:System.Activities.Hosting.IWorkflowInstanceExtension">
      <summary>This interface is implemented by composite extensions, or extensions that need access to the workflow instance. Implementers of this interface will be called by the <see cref="T:System.Activities.Hosting.WorkflowInstance" /> prior to execution in order to provide additional extensions, or get access to the <see cref="T:System.Activities.Hosting.WorkflowInstance" /> through the <see cref="T:System.Activities.Hosting.WorkflowInstanceProxy" />.</summary>
    </member>
    <member name="M:System.Activities.Hosting.IWorkflowInstanceExtension.GetAdditionalExtensions">
      <summary>When implemented, returns any additional extensions the implementing class requires.</summary>
      <returns>A collection of additional workflow extensions.</returns>
    </member>
    <member name="M:System.Activities.Hosting.IWorkflowInstanceExtension.SetInstance(System.Activities.Hosting.WorkflowInstanceProxy)">
      <summary>Sets the specified target <see cref="T:System.Activities.Hosting.WorkflowInstanceProxy" />.</summary>
      <param name="instance">The target workflow instance to set.</param>
    </member>
    <member name="T:System.Activities.Hosting.LocationInfo">
      <summary>Provides information about a related <see cref="T:System.Activities.Location" />.</summary>
    </member>
    <member name="P:System.Activities.Hosting.LocationInfo.Name">
      <summary>Gets a <see cref="T:System.String" /> value that identifies the related <see cref="T:System.Activities.Location" />.</summary>
      <returns>The related location.</returns>
    </member>
    <member name="P:System.Activities.Hosting.LocationInfo.OwnerDisplayName">
      <summary>Gets an optional friendly name that is used for debugging, validation, exception handling, and tracking.</summary>
      <returns>An optional friendly name that is used for debugging, validation, exception handling, and tracking.</returns>
    </member>
    <member name="P:System.Activities.Hosting.LocationInfo.Value">
      <summary>Gets the value stored at the related <see cref="T:System.Activities.Location" />.</summary>
      <returns>The value stored at the related <see cref="T:System.Activities.Location" />.</returns>
    </member>
    <member name="T:System.Activities.Hosting.SymbolResolver">
      <summary>
        <see cref="T:System.Activities.Hosting.SymbolResolver" /> is an extension for providing a host <see cref="T:System.Activities.LocationReferenceEnvironment" /> containing objects that can be dereferenced by a string name.  Values provided through a <see cref="T:System.Activities.Hosting.SymbolResolver" /> are not persisted.  Persistence of <see cref="T:System.Activities.Hosting.SymbolResolver" /> values is a host responsibility.</summary>
    </member>
    <member name="M:System.Activities.Hosting.SymbolResolver.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Hosting.SymbolResolver" /> class.</summary>
    </member>
    <member name="M:System.Activities.Hosting.SymbolResolver.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Adds a symbol using the specified key/value pair.</summary>
      <param name="item">The symbol to add.</param>
    </member>
    <member name="M:System.Activities.Hosting.SymbolResolver.Add(System.String,System.Object)">
      <summary>Adds a symbol using the specified symbol name and value.</summary>
      <param name="key">The name of the symbol.</param>
      <param name="value">The value of the symbol to reference.</param>
    </member>
    <member name="M:System.Activities.Hosting.SymbolResolver.Add(System.String,System.Object,System.Type)">
      <summary>Adds a symbol using the specified symbol name, value, and type.</summary>
      <param name="key">The name of the symbol.</param>
      <param name="value">The value of the symbol to reference.</param>
      <param name="type">The type of the symbol value.</param>
    </member>
    <member name="M:System.Activities.Hosting.SymbolResolver.Add(System.String,System.Type)">
      <summary>Adds a symbol using the specified symbol name and type.</summary>
      <param name="key">The name of the symbol.</param>
      <param name="type">The type of the symbol value.</param>
    </member>
    <member name="M:System.Activities.Hosting.SymbolResolver.AsLocationReferenceEnvironment">
      <summary>Returns a <see cref="T:System.Activities.LocationReferenceEnvironment" /> instance that enables access to references of symbol values in <see cref="T:System.Activities.Hosting.SymbolResolver" /> represented as <see cref="T:System.Activities.LocationReference" /> objects.</summary>
      <returns>A location reference that enables access to references to symbol values in <see cref="T:System.Activities.Hosting.SymbolResolver" /> represented as <see cref="T:System.Activities.LocationReference" /> objects.</returns>
    </member>
    <member name="M:System.Activities.Hosting.SymbolResolver.Clear">
      <summary>Removes all symbols from the <see cref="T:System.Activities.Hosting.SymbolResolver" />.</summary>
    </member>
    <member name="M:System.Activities.Hosting.SymbolResolver.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Returns a value that indicates whether the <see cref="T:System.Activities.Hosting.SymbolResolver" /> contains the specified symbol.</summary>
      <returns>true if the <see cref="T:System.Activities.Hosting.SymbolResolver" /> contains the specified symbol; otherwise, false.</returns>
      <param name="item">The symbol as a key/value pair to locate in the <see cref="T:System.Activities.Hosting.SymbolResolver" />.</param>
    </member>
    <member name="M:System.Activities.Hosting.SymbolResolver.ContainsKey(System.String)">
      <summary>Returns a value that indicates whether the <see cref="T:System.Activities.Hosting.SymbolResolver" /> contains a symbol with the specified key.</summary>
      <returns>true if the <see cref="T:System.Activities.Hosting.SymbolResolver" /> contains a symbol with the specified key; otherwise, false.</returns>
      <param name="key">The key of the symbol to locate.</param>
    </member>
    <member name="M:System.Activities.Hosting.SymbolResolver.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
      <summary>Copies the symbols in the <see cref="T:System.Activities.Hosting.SymbolResolver" /> to an existing one-dimensional array of key/value pairs, starting at the specified array index.</summary>
      <param name="array">The one-dimensional array of key/value pairs to copy the symbols to. The array must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in the destination array at which copying begins.</param>
    </member>
    <member name="P:System.Activities.Hosting.SymbolResolver.Count">
      <summary>Gets the number of symbols contained in the <see cref="T:System.Activities.Hosting.SymbolResolver" />.</summary>
      <returns>The number of symbols contained in the <see cref="T:System.Activities.Hosting.SymbolResolver" />.</returns>
    </member>
    <member name="M:System.Activities.Hosting.SymbolResolver.GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection of key/value pairs where the keys are the symbol names and values the symbol values.</summary>
      <returns>An enumerator that iterates through a collection of key/value pairs.</returns>
    </member>
    <member name="P:System.Activities.Hosting.SymbolResolver.IsReadOnly">
      <summary>Gets a value that indicates whether the dictionary of symbols in the <see cref="T:System.Activities.Hosting.SymbolResolver" /> is read-only.</summary>
      <returns>false.</returns>
    </member>
    <member name="P:System.Activities.Hosting.SymbolResolver.Item(System.String)">
      <summary>Gets or sets the value of the item associated with the specified key.</summary>
      <returns>The value of the item associated with the specified key.</returns>
      <param name="key">The key of the item.</param>
    </member>
    <member name="P:System.Activities.Hosting.SymbolResolver.Keys">
      <summary>Gets a collection of all keys in the <see cref="T:System.Activities.Hosting.SymbolResolver" />.</summary>
      <returns>A collection of all keys in the <see cref="T:System.Activities.Hosting.SymbolResolver" />.</returns>
    </member>
    <member name="M:System.Activities.Hosting.SymbolResolver.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Removes the specified symbol from the <see cref="T:System.Activities.Hosting.SymbolResolver" />.</summary>
      <returns>true if the symbol is successfully found and removed; otherwise, false. This method returns false if the symbol is not present.</returns>
      <param name="item">The symbol to remove.</param>
    </member>
    <member name="M:System.Activities.Hosting.SymbolResolver.Remove(System.String)">
      <summary>Removes a symbol from the <see cref="T:System.Activities.Hosting.SymbolResolver" /> using a specified key.</summary>
      <returns>true if the symbol is successfully found and removed; otherwise, false. This method returns false if the symbol is not present.</returns>
      <param name="key">The key of the symbol to remove.</param>
    </member>
    <member name="M:System.Activities.Hosting.SymbolResolver.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection of key/value pairs where the keys are the symbol names and values the symbol values.</summary>
      <returns>An enumerator that iterates through a collection of key/value pairs.</returns>
    </member>
    <member name="M:System.Activities.Hosting.SymbolResolver.TryGetValue(System.String,System.Object@)">
      <summary>Gets the value associated with the specified key.</summary>
      <returns>true if the <see cref="T:System.Activities.Hosting.SymbolResolver" /> contains an element with the specified key; otherwise, false.</returns>
      <param name="key">The key of the value to get.</param>
      <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
    </member>
    <member name="P:System.Activities.Hosting.SymbolResolver.Values">
      <summary>Gets a collection of all values in the <see cref="T:System.Activities.Hosting.SymbolResolver" />.</summary>
      <returns>A collection of all values in the <see cref="T:System.Activities.Hosting.SymbolResolver" />.</returns>
    </member>
    <member name="T:System.Activities.Hosting.WorkflowInstance">
      <summary>
        <see cref="T:System.Activities.Hosting.WorkflowInstance" /> is a lightweight, per-instance runtime for executing a workflow program. It can be constructed to create a new workflow instance or from existing instance state. The APIs that <see cref="T:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl" /> exposes are the minimal set of runtime controls from which higher level operations can be implemented. This API set represents the entire breadth of functionality of the runtime. <see cref="T:System.Activities.Hosting.WorkflowInstance" /> is an abstract class and relies on a host’s implementation of its abstract methods in order to provide host functionality such as synchronization, persistence, tracking, and extensions.</summary>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.#ctor(System.Activities.Activity)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Hosting.WorkflowInstance" /> class with the specified workflow definition.</summary>
      <param name="workflowDefinition">The activity that defines the workflow.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.#ctor(System.Activities.Activity,System.Activities.WorkflowIdentity)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Hosting.WorkflowInstance" /> class with the specified workflow definition and definition identity.</summary>
      <param name="workflowDefinition">The activity that defines the workflow.</param>
      <param name="definitionIdentity">The definition identity.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.BeginFlushTrackingRecords(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Called by the workflow runtime to begin sending pending tracking records to tracking participants asynchronously.</summary>
      <returns>The status of the current track operation.</returns>
      <param name="timeout">The time period after which to abort the attempt.</param>
      <param name="callback">The method to be called when the track operation has completed.</param>
      <param name="state">The information about the asynchronous operation.</param>
    </member>
    <member name="P:System.Activities.Hosting.WorkflowInstance.Controller">
      <summary>Gets the <see cref="T:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl" /> instance for this <see cref="T:System.Activities.Hosting.WorkflowInstance" />.</summary>
      <returns>The controller instance for this workflow instance.</returns>
    </member>
    <member name="P:System.Activities.Hosting.WorkflowInstance.DefinitionIdentity">
      <summary>Gets or sets the definition identity of <see cref="T:System.Activities.Hosting.WorkflowInstance" />.</summary>
      <returns>The definition identity of <see cref="T:System.Activities.Hosting.WorkflowInstance" />.</returns>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.DisposeExtensions">
      <summary>Calls <see cref="M:System.Disposable.Dispose" /> on all extensions that implement <see cref="T:System.IDisposable" />.</summary>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.EndFlushTrackingRecords(System.IAsyncResult)">
      <summary>Called by the workflow runtime to end the track operation.</summary>
      <param name="result">The status of the asynchronous track operation.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.FlushTrackingRecords(System.TimeSpan)">
      <summary>Called by the workflow runtime to send pending tracking records to tracking participants.</summary>
      <param name="timeout">The time period after which to abort the attempt.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.GetActivitiesBlockingUpdate(System.Object,System.Activities.DynamicUpdate.DynamicUpdateMap)">
      <summary>Retrieves the list of activity that is blocking the update of the workflow.</summary>
      <returns>The list of activity that is blocking the update.</returns>
      <param name="deserializedRuntimeState">The deserialized runtime state.</param>
      <param name="updateMap">The update map.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.GetExtension``1">
      <summary>Returns an extension of the specified type.</summary>
      <returns>An extension of the specified type.</returns>
      <typeparam name="T">The type of the extension to find.</typeparam>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.GetExtensions``1">
      <summary>Returns all extensions found for the specified type.</summary>
      <returns>All extensions found for the specified type.</returns>
      <typeparam name="T">The type of the extension to find.</typeparam>
    </member>
    <member name="P:System.Activities.Hosting.WorkflowInstance.HostEnvironment">
      <summary>Gets or sets the root environment for the workflow instance’s arguments and variables.</summary>
      <returns>The root environment for the workflow instance’s arguments and variables.</returns>
    </member>
    <member name="P:System.Activities.Hosting.WorkflowInstance.Id">
      <summary>Gets the unique identifier for the workflow instance.</summary>
      <returns>The unique identifier for the workflow instance.</returns>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.Initialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IList{System.Activities.Handle})">
      <summary>Called by the host to initialize the workflow instance with the argument values and execution properties.</summary>
      <param name="workflowArgumentValues">The input parameters to the workflow, keyed by argument name.</param>
      <param name="workflowExecutionProperties">The list of workflow execution properties.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.Initialize(System.Object)">
      <summary>Called by the host to initialize the workflow instance with the workflow run-time state.</summary>
      <param name="deserializedRuntimeState">The run-time state used to execute the workflow.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.Initialize(System.Object,System.Activities.DynamicUpdate.DynamicUpdateMap)">
      <summary>Called by the host to initialize the workflow instance with the workflow run-time state and update map.</summary>
      <param name="deserializedRuntimeState">The run-time state used to execute the workflow.</param>
      <param name="updateMap">The update map.</param>
    </member>
    <member name="P:System.Activities.Hosting.WorkflowInstance.IsReadOnly">
      <summary>Gets a value that indicates whether the workflow instance has been initialized.</summary>
      <returns>true if the workflow instance has been initialized; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.OnBeginAssociateKeys(System.Collections.Generic.ICollection{System.Runtime.DurableInstancing.InstanceKey},System.AsyncCallback,System.Object)">
      <summary>Called by the workflow runtime to notify the host that new instance keys should be associated with this instance.</summary>
      <returns>A reference to the asynchronous associate keys operation.</returns>
      <param name="keys">The instance keys to associate with this workflow instance.</param>
      <param name="callback">The method to be called when the operation completes.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.OnBeginFlushTrackingRecords(System.AsyncCallback,System.Object)">
      <summary>Asynchronous call to ask host to flush pending tracking records to tracking participants.</summary>
      <returns>The status of the current track operation.</returns>
      <param name="callback">The method to be called when the track operation has completed.</param>
      <param name="state">The information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.OnBeginPersist(System.AsyncCallback,System.Object)">
      <summary>Asynchronous call to ask the host to persist the workflow.</summary>
      <returns>A reference to the current persist operation.</returns>
      <param name="callback">The method to be called when the persist operation has completed.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.OnBeginResumeBookmark(System.Activities.Bookmark,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Called by the workflow runtime to notify the host that a resume bookmark operation is beginning.</summary>
      <returns>A reference to the asynchronous resume operation.</returns>
      <param name="bookmark">The bookmark to resume.</param>
      <param name="value">The data to be passed to the activity that created the <see cref="T:System.Activities.Bookmark" />.</param>
      <param name="timeout">The interval in which the resume operation must complete before the operation is canceled and a <see cref="T:System.TimeoutException" /> is thrown.</param>
      <param name="callback">The method to be called when the resume operation has completed.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.OnDisassociateKeys(System.Collections.Generic.ICollection{System.Runtime.DurableInstancing.InstanceKey})">
      <summary>Called by the workflow runtime to notify the host that a certain set of instance keys should no longer be associated with this instance.</summary>
      <param name="keys">The list of keys to disassociate.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.OnEndAssociateKeys(System.IAsyncResult)">
      <summary>Called by the workflow runtime to notify the host that an associate keys operation is complete.</summary>
      <param name="result">The reference to the asynchronous associate keys operation.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.OnEndFlushTrackingRecords(System.IAsyncResult)">
      <summary>Called by the workflow runtime to notify the host when the flush tracking records operation is complete. </summary>
      <param name="result">The status of the asynchronous flush tracking records operation.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.OnEndPersist(System.IAsyncResult)">
      <summary>Called by the workflow runtime to notify the host that a persist operation is complete.</summary>
      <param name="result">The reference to the asynchronous persist operation.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.OnEndResumeBookmark(System.IAsyncResult)">
      <summary>Called by the workflow runtime to notify the host that a resume bookmark operation is complete.</summary>
      <returns>One of the enumeration values that indicates the result of a <see cref="T:System.Activities.Bookmark" /> resume operation.</returns>
      <param name="result">The reference to the asynchronous resume bookmark operation.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.OnNotifyPaused">
      <summary>Called by the workflow runtime to notify the host that the workflow instance has transitioned from the running state to the paused state.</summary>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.OnNotifyUnhandledException(System.Exception,System.Activities.Activity,System.String)">
      <summary>Called by the workflow runtime to notify the host an unhandled exception has occurred in the workflow instance.</summary>
      <param name="exception">The unhandled exception.</param>
      <param name="source">The activity that threw the exception.</param>
      <param name="sourceInstanceId">The unique identifier of the <see cref="T:System.Activities.ActivityInstance" /> representing the activity that threw the exception.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.OnRequestAbort(System.Exception)">
      <summary>Called by the workflow runtime to notify the host that an abort operation has been requested for the workflow instance.</summary>
      <param name="reason">The reason for aborting the workflow instance.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.RegisterExtensionManager(System.Activities.Hosting.WorkflowInstanceExtensionManager)">
      <summary>Called by the host to register the specified extension manager, validate that all required extensions are present, and to initialize the collection of extensions to be used.</summary>
      <param name="extensionManager">The extension manager to register.</param>
    </member>
    <member name="P:System.Activities.Hosting.WorkflowInstance.SupportsInstanceKeys">
      <summary>Gets a value that indicates whether the host supports the association of <see cref="P:System.Runtime.Persistence.InstanceView.InstanceKeys" /> with a run-time instance.</summary>
      <returns>true if the host supports the association of <see cref="P:System.Runtime.Persistence.InstanceView.InstanceKeys" /> with a workflow instance; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Hosting.WorkflowInstance.SynchronizationContext">
      <summary>Gets or sets the <see cref="T:System.Threading.SynchronizationContext" /> used for scheduling the workflow instance.</summary>
      <returns>The synchronization context used for scheduling the workflow instance.</returns>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.ThrowIfReadOnly">
      <summary>Throws an <see cref="T:System.InvalidOperationException" /> if the workflow instance has been initialized, as determined by <see cref="P:System.Activities.Hosting.WorkflowInstance.IsReadOnly" />.</summary>
    </member>
    <member name="P:System.Activities.Hosting.WorkflowInstance.WorkflowDefinition">
      <summary>Gets the workflow definition of the workflow instance.</summary>
      <returns>The workflow definition of the workflow instance.</returns>
    </member>
    <member name="T:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl">
      <summary>Provides methods for <see cref="T:System.Activities.Hosting.WorkflowInstance" /> derived classes to access the functionality of the workflow runtime. </summary>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Abort">
      <summary>Aborts the <see cref="T:System.Activities.Hosting.WorkflowInstance" />.</summary>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Abort(System.Exception)">
      <summary>Aborts the <see cref="T:System.Activities.Hosting.WorkflowInstance" /> using the specified exception.</summary>
      <param name="reason">The reason for aborting the <see cref="T:System.Activities.Hosting.WorkflowInstance" />.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.BeginFlushTrackingRecords(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Called by the workflow runtime to begin sending pending tracking records to tracking participants asynchronously.</summary>
      <returns>The status of the current track operation.</returns>
      <param name="timeout">The time period after which to abort the attempt.</param>
      <param name="callback">The method to be called when the track operation has completed.</param>
      <param name="state">The information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.EndFlushTrackingRecords(System.IAsyncResult)">
      <summary>Called by the workflow runtime to end the track operation.</summary>
      <param name="result">The status of the asynchronous track operation.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl" /> is equal to the specified object.</summary>
      <returns>true of the object is equal to the current <see cref="T:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl" />; otherwise, false.</returns>
      <param name="obj">The object to compare.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.FlushTrackingRecords(System.TimeSpan)">
      <summary>Called by the workflow runtime to send pending tracking records to tracking participants.</summary>
      <param name="timeout">The time period after which to abort the attempt.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetAbortReason">
      <summary>Returns the exception that causes the <see cref="T:System.Activities.Hosting.WorkflowInstance" /> to abort.</summary>
      <returns>The exception that caused the <see cref="T:System.Activities.Hosting.WorkflowInstance" /> to abort, or null if the <see cref="T:System.Activities.Hosting.WorkflowInstance" /> did not abort.</returns>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetBookmarks">
      <summary>Returns the collection of available bookmarks for the <see cref="T:System.Activities.Hosting.WorkflowInstance" />.</summary>
      <returns>A collection of bookmarks for the <see cref="T:System.Activities.Hosting.WorkflowInstance" />.</returns>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetBookmarks(System.Activities.BookmarkScope)">
      <summary>Returns the collection of available bookmarks for the <see cref="T:System.Activities.Hosting.WorkflowInstance" /> created in the specified <see cref="T:System.Activities.BookmarkScope" />.</summary>
      <returns>The collection of bookmarks created in the specified <see cref="T:System.Activities.BookmarkScope" />.</returns>
      <param name="scope">The bookmark scope to inspect.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetCompletionState">
      <summary>Returns the final <see cref="T:System.Activities.ActivityInstanceState" /> of the <see cref="T:System.Activities.Hosting.WorkflowInstance" />.</summary>
      <returns>One of the enumeration members that describes the state of an activity instance.</returns>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetCompletionState(System.Collections.Generic.IDictionary{System.String,System.Object}@,System.Exception@)">
      <summary>Returns the final <see cref="T:System.Activities.ActivityInstanceState" /> of the <see cref="T:System.Activities.Hosting.WorkflowInstance" />, including workflow outputs and termination exception.</summary>
      <returns>One of the enumeration members that describes the state of an activity instance.</returns>
      <param name="outputs">When this method returns, <paramref name="outputs" /> contains a dictionary of <see cref="F:System.Activities.ArgumentDirection.Out" /> arguments of the workflow, keyed by argument name. This parameter is passed uninitialized.</param>
      <param name="terminationException">When this method returns, <paramref name="terminationException" /> contains the exception that caused the <see cref="T:System.Activities.Hosting.WorkflowInstance" /> to terminate, or null if the <see cref="T:System.Activities.Hosting.WorkflowInstance" /> did not terminate. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetCompletionState(System.Exception@)">
      <summary>Returns the final <see cref="T:System.Activities.ActivityInstanceState" /> of the <see cref="T:System.Activities.Hosting.WorkflowInstance" />, including termination exception.</summary>
      <returns>One of the enumeration members that describes the state of an activity instance.</returns>
      <param name="terminationException">When this method returns, <paramref name="terminationException" /> contains the exception that caused the <see cref="T:System.Activities.Hosting.WorkflowInstance" /> to terminate, or null if the <see cref="T:System.Activities.Hosting.WorkflowInstance" /> did not terminate. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetHashCode">
      <summary>Returns the hash code for this <see cref="T:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl" />.</summary>
      <returns>The hash code for this <see cref="T:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl" />.</returns>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetMappedVariables">
      <summary>Returns a dictionary of variables in the current scope that have been specified with <see cref="F:System.Activities.VariableModifiers.Mapped" />.</summary>
      <returns>A dictionary of mapped variables currently in scope.</returns>
    </member>
    <member name="P:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.HasPendingTrackingRecords">
      <summary>Called by the workflow runtime to determine whether this workflow instance has pending tracking records and a tracking participant.</summary>
      <returns>true if this workflow instance has pending tracking records and a tracking participant; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.IsPersistable">
      <summary>Gets a value that indicates whether the <see cref="T:System.Activities.Hosting.WorkflowInstance" /> is in a state where it can be persisted.</summary>
      <returns>true if the <see cref="T:System.Activities.Hosting.WorkflowInstance" /> can be persisted; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.op_Equality(System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl,System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl)">
      <summary>Returns a value that indicates whether two <see cref="T:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl" /> instances are equal.</summary>
      <returns>true if the two <see cref="T:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl" /> instances are equal; otherwise, false. </returns>
      <param name="left">The first <see cref="T:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl" /> to compare.</param>
      <param name="right">The second <see cref="T:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl" /> to compare.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.op_Inequality(System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl,System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl)">
      <summary>Returns a value that indicates whether two <see cref="T:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl" /> instances are not equal.</summary>
      <returns>true if the two <see cref="T:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl" /> instances are not equal; otherwise, false.</returns>
      <param name="left">The first <see cref="T:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl" /> to compare.</param>
      <param name="right">The second <see cref="T:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl" /> to compare.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.PauseWhenPersistable">
      <summary>Requests that the workflow runtime pause the <see cref="T:System.Activities.Hosting.WorkflowInstance" /> at the next point of execution where it is possible to persist. Note that the scheduler queue may not be empty at this point.</summary>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.PrepareForSerialization">
      <summary>Prepares the <see cref="T:System.Activities.Hosting.WorkflowInstance" /> state for serialization.</summary>
      <returns>A workflow instance state.</returns>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.RequestPause">
      <summary>Requests that the scheduler stops.</summary>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Run">
      <summary>Instructs the <see cref="T:System.Activities.Hosting.WorkflowInstance" /> to begin execution.</summary>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.ScheduleBookmarkResumption(System.Activities.Bookmark,System.Object)">
      <summary>Schedules a bookmark resumption with the specified value.</summary>
      <returns>One of the enumeration values that indicates the result of a <see cref="T:System.Activities.Bookmark" /> scheduling operation.</returns>
      <param name="bookmark">The bookmark to resume.</param>
      <param name="value">The data to be passed to the activity that created the <see cref="T:System.Activities.Bookmark" />.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.ScheduleBookmarkResumption(System.Activities.Bookmark,System.Object,System.Activities.BookmarkScope)">
      <summary>Schedules a <see cref="T:System.Activities.Bookmark" /> resumption from the specified <see cref="T:System.Activities.BookmarkScope" />.</summary>
      <returns>One of the enumeration values that indicates the result of a <see cref="T:System.Activities.Bookmark" /> scheduling operation.</returns>
      <param name="bookmark">The bookmark to resume.</param>
      <param name="value">The data to be passed to the activity that created the <see cref="T:System.Activities.Bookmark" />.</param>
      <param name="scope">The <see cref="T:System.Activities.Bookmark" /> under which the <see cref="T:System.Activities.Bookmark" /> was created.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.ScheduleCancel">
      <summary>Schedules the cancellation of the <see cref="T:System.Activities.Hosting.WorkflowInstance" />.</summary>
    </member>
    <member name="P:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.State">
      <summary>Gets the state of the <see cref="T:System.Activities.Hosting.WorkflowInstance" />.</summary>
      <returns>One of the enumeration values that specifies the state of a <see cref="T:System.Activities.Hosting.WorkflowInstance" />.</returns>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Terminate(System.Exception)">
      <summary>Transitions the <see cref="T:System.Activities.Hosting.WorkflowInstance" /> into the terminal <see cref="F:System.Activities.ActivityInstanceState.Faulted" /> state using the specified exception.</summary>
      <param name="reason">The exception that is the reason for terminating the <see cref="T:System.Activities.Hosting.WorkflowInstance" />.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Track(System.Activities.Tracking.WorkflowInstanceRecord)">
      <summary>Called by the workflow runtime to add the specified pending record to the list of pending records.</summary>
      <param name="instanceRecord">The tracking record to add.</param>
    </member>
    <member name="P:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.TrackingEnabled">
      <summary>Called by the workflow runtime to determine whether tracking is enabled in this workflow instance.</summary>
      <returns>true if tracking is enabled in this workflow instance; otherwise, false.</returns>
    </member>
    <member name="T:System.Activities.Hosting.WorkflowInstanceExtensionManager">
      <summary>Manages a collection of extensions for a <see cref="T:System.Activities.Hosting.WorkflowInstance" />.</summary>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstanceExtensionManager.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Hosting.WorkflowInstanceExtensionManager" /> class. </summary>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstanceExtensionManager.Add``1(System.Func{``0})">
      <summary>Registers a <see cref="T:System.Func`1" /> that is used to provide an instance of an extension when requested by a workflow instance.</summary>
      <param name="extensionCreationFunction">The method that creates the extension.</param>
      <typeparam name="T">The type of extension to add.</typeparam>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstanceExtensionManager.Add(System.Object)">
      <summary>Adds the specified extension to the collection of extensions.</summary>
      <param name="singletonExtension">The extension to add.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstanceExtensionManager.MakeReadOnly">
      <summary>Marks the collection of extensions as read-only.</summary>
    </member>
    <member name="T:System.Activities.Hosting.WorkflowInstanceProxy">
      <summary>A class that allows <see cref="T:System.Activities.Hosting.IWorkflowInstanceExtensions" /> extensions access to the workflow service host. </summary>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstanceProxy.BeginResumeBookmark(System.Activities.Bookmark,System.Object,System.AsyncCallback,System.Object)">
      <summary>Resumes a workflow from a bookmark asynchronously using the specified bookmark, value, callback method, and user-provided state data.</summary>
      <returns>A reference to the asynchronous operation.</returns>
      <param name="bookmark">The bookmark.</param>
      <param name="value">The data to be passed to the activity that created the bookmark.</param>
      <param name="callback">The method to be called when the asynchronous resume operation has completed.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstanceProxy.BeginResumeBookmark(System.Activities.Bookmark,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Resumes a workflow from a bookmark asynchronously using the specified bookmark, value, time-out interval, callback method, and user-provided state. </summary>
      <returns>A reference to the asynchronous operation.</returns>
      <param name="bookmark">The bookmark.</param>
      <param name="value">The data to be passed to the activity that created the bookmark.</param>
      <param name="timeout">The interval in which the resume operation must complete before the operation is canceled and a <see cref="T:System.TimeoutException" /> is thrown.</param>
      <param name="callback">The method to be called when the resume operation has completed.</param>
      <param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstanceProxy.EndResumeBookmark(System.IAsyncResult)">
      <summary>Waits for the pending asynchronous <see cref="Overload:System.Activities.Hosting.WorkflowInstanceProxy.BeginResumeBookmark" /> to complete.</summary>
      <returns>Returns <see cref="T:System.Activities.BookmarkResumptionResult" />.</returns>
      <param name="result">The <see cref="T:System.IAsyncResult" /> that references the resume operation.</param>
    </member>
    <member name="P:System.Activities.Hosting.WorkflowInstanceProxy.Id">
      <summary>Gets the workflow instance ID.</summary>
      <returns>The workflow instance ID.</returns>
    </member>
    <member name="P:System.Activities.Hosting.WorkflowInstanceProxy.WorkflowDefinition">
      <summary>Gets the workflow definition.</summary>
      <returns>The workflow definition.</returns>
    </member>
    <member name="T:System.Activities.Hosting.WorkflowInstanceState">
      <summary>Specifies the state of a <see cref="T:System.Activities.Hosting.WorkflowInstance" />.</summary>
    </member>
    <member name="F:System.Activities.Hosting.WorkflowInstanceState.Aborted">
      <summary>The <see cref="T:System.Activities.Hosting.WorkflowInstance" /> is aborted.</summary>
    </member>
    <member name="F:System.Activities.Hosting.WorkflowInstanceState.Complete">
      <summary>The <see cref="T:System.Activities.Hosting.WorkflowInstance" /> is complete.</summary>
    </member>
    <member name="F:System.Activities.Hosting.WorkflowInstanceState.Idle">
      <summary>The <see cref="T:System.Activities.Hosting.WorkflowInstance" /> is idle. </summary>
    </member>
    <member name="F:System.Activities.Hosting.WorkflowInstanceState.Runnable">
      <summary>The <see cref="T:System.Activities.Hosting.WorkflowInstance" /> can be run.</summary>
    </member>
    <member name="T:System.Activities.Persistence.PersistenceIOParticipant">
      <summary>A derived vclass of the <see cref="T:System.Activities.Persistence.PersistenceParticipant" /> class with methods that perform input and output operations in addition to the persisting and loading of workflow instances through the persistence process.</summary>
    </member>
    <member name="M:System.Activities.Persistence.PersistenceIOParticipant.#ctor(System.Boolean,System.Boolean)">
      <summary>Initializes an instance of the <see cref="T:System.Activities.Persistence.PersistenceIOParticipant" /> class.</summary>
      <param name="isSaveTransactionRequired">true if a transaction is required for the Save operation. If the <see cref="T:System.Activities.Persistence.PersistenceIOParticipant" /> object is created with this parameter set to true,  Transaction.Current is guaranteed to be set when BeginOnSave is invoked. The transaction is shared between the persistence provider, all PersistenceIOParticipant extensions, and potentially other transaction participants.</param>
      <param name="isLoadTransactionRequired">true if a transaction is required for the Load operation. If the <see cref="T:System.Activities.Persistence.PersistenceIOParticipant" /> object is created with this parameter set to true,  Transaction.Current is guaranteed to be set  when BeginOnLoad is invoked. The transaction is shared between the persistence provider, all PersistenceIOParticipant extensions, and potentially other transaction participants.</param>
    </member>
    <member name="M:System.Activities.Persistence.PersistenceIOParticipant.Abort">
      <summary>Aborts the pending IO (Load or Save) operation.</summary>
    </member>
    <member name="M:System.Activities.Persistence.PersistenceIOParticipant.BeginOnLoad(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to load additional state in conjunction with an instance being loaded from the instance store.</summary>
      <returns>The status of an asynchronous operation.</returns>
      <param name="readWriteValues">A dictionary of read-write values loaded by the persistence provider. This corresponds to the set of read-write values passed to BeginOnSave in the most recent persistence episode for this instance.</param>
      <param name="timeout">The time span within which the operation should be completed without timing out. </param>
      <param name="callback">The asynchronous callback delegate that receives notification of the completion of the asynchronous Load operation.</param>
      <param name="state">The state information associated with the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.Persistence.PersistenceIOParticipant.BeginOnSave(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object},System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to save additional state in conjunction with an instance being persisted to the instance store. </summary>
      <returns>The status of an asynchronous operation.</returns>
      <param name="readWriteValues">A dictionary of read-write values collected in the CollectValues and MapValues stages.</param>
      <param name="writeOnlyValues">A dictionary of write-only values collected in the CollectValues and MapValues stages.</param>
      <param name="timeout">The time span within which the operation should be completed without timing out. </param>
      <param name="callback">The asynchronous callback delegate that receives notification of the completion of the asynchronous operation.</param>
      <param name="state">The state information associated with the asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.Persistence.PersistenceIOParticipant.EndOnLoad(System.IAsyncResult)">
      <summary>Completes the asynchronous Load operation.</summary>
      <param name="result">The asynchronous result returned by a call to the <see cref="M:System.Activities.Persistence.PersistenceIOParticipant.BeginOnSave(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object},System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)" /> method.</param>
    </member>
    <member name="M:System.Activities.Persistence.PersistenceIOParticipant.EndOnSave(System.IAsyncResult)">
      <summary>Completes the asynchronous Save operation.</summary>
      <param name="result">The asynchronous result returned by a call to the <see cref="M:System.Activities.Persistence.PersistenceIOParticipant.BeginOnSave(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object},System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)" /> method.</param>
    </member>
    <member name="T:System.Activities.Persistence.PersistenceParticipant">
      <summary>This class allows both <see cref="T:System.Activities.WorkflowApplication" /> and <see cref="T:System.ServiceModel.WorkflowServiceHost" /> to participate in persistence process. A persistence participant derives from the <see cref="T:System.Activities.Persistence.PersistenceParticipant" /> class or the <see cref="T:System.Activities.Persistence.PersistenceIOParticipant" /> class (derived class of the <see cref="T:System.Activities.Persistence.PersistenceParticipant" /> class), implements abstract methods, and then add an instance of the class as a workflow instance extension. The <see cref="T:System.Activities.WorkflowApplication" /> and <see cref="T:System.ServiceModel.WorkflowServiceHost" /> look for such extensions when persisting an instance and invoke appropriate methods at appropriate times.</summary>
    </member>
    <member name="M:System.Activities.Persistence.PersistenceParticipant.#ctor">
      <summary>Initializes an instance of the <see cref="T:System.Activities.Persistence.PersistenceParticipant" /> class.</summary>
    </member>
    <member name="M:System.Activities.Persistence.PersistenceParticipant.CollectValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}@,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}@)">
      <summary>A host invokes this method on a custom persistence participant to collect read-write values and write-only values, to be persisted.</summary>
      <param name="readWriteValues">The read-write values to be persisted.</param>
      <param name="writeOnlyValues">The write-only values to be persisted.</param>
    </member>
    <member name="M:System.Activities.Persistence.PersistenceParticipant.MapValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object},System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object})">
      <summary>A host invokes this method after it is done with collecting the values in the first stage. The host forwards two read-only dictionaries of values it collected from all persistence participants during the first stage (CollectValues stage) to this method for mapping. The host adds values in the dictionary returned by this method to the collection of write-only values.</summary>
      <returns>A dictionary containing additional write-only values to be persisted.</returns>
      <param name="readWriteValues">The read-write values to be persisted.</param>
      <param name="writeOnlyValues">The write-only values to be persisted.</param>
    </member>
    <member name="M:System.Activities.Persistence.PersistenceParticipant.PublishValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object})">
      <summary>The host invokes this method and passes all the loaded values in the <see cref="P:System.Activities.Persistence.SaveWorkflowCommand.InstanceData" /> collection (filled by the <see cref="T:System.Activities.Persistence.LoadWorkflowCommand" /> or <see cref="T:System.Activities.Persistence.LoadWorkflowByInstanceKeyCommand" />) as a dictionary parameter. </summary>
      <param name="readWriteValues">The read-write values that were loaded from the persistence store. This dictionary corresponds to the dictionary of read-write values persisted in the most recent persistence episode.</param>
    </member>
    <member name="T:System.Activities.Statements.AddToCollection`1">
      <summary>Adds an item to a specified collection.</summary>
      <typeparam name="T">The type of elements in the specified collection.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.AddToCollection`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.AddToCollection`1" /> class. </summary>
    </member>
    <member name="P:System.Activities.Statements.AddToCollection`1.Collection">
      <summary>The collection that receives the new item.</summary>
      <returns>The collection.</returns>
    </member>
    <member name="P:System.Activities.Statements.AddToCollection`1.Item">
      <summary>The item to add to the specified collection.</summary>
      <returns>The item.</returns>
    </member>
    <member name="T:System.Activities.Statements.Assign">
      <summary>Sets <see cref="T:System.Activities.Argument" /> values from within a workflow.</summary>
    </member>
    <member name="M:System.Activities.Statements.Assign.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.Assign" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.Assign.To">
      <summary>Specifies the <see cref="T:System.Activities.Argument" /> that the activity assigns its <see cref="P:System.Activities.Statements.Assign.Value" /> to.</summary>
      <returns>The specified <see cref="T:System.Activities.Argument" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.Assign.Value">
      <summary>Specifies the value that is assigned.</summary>
      <returns>The value to be assigned.</returns>
    </member>
    <member name="T:System.Activities.Statements.Assign`1">
      <summary>The <see cref="T:System.Activities.Statements.Assign" /> activity is used to set <see cref="T:System.Activities.Argument" /> values from within a workflow.</summary>
      <typeparam name="T">The type of the assigned value.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.Assign`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.Assign`1" /> class. </summary>
    </member>
    <member name="P:System.Activities.Statements.Assign`1.To">
      <summary>Specifies the <see cref="T:System.Activities.Argument" /> that the activity assigns its <see cref="P:System.Activities.Statements.Assign.Value" /> to.</summary>
      <returns>The specified <see cref="T:System.WorkflowModel.Argument" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.Assign`1.Value">
      <summary>Specifies the value that is assigned.</summary>
      <returns>The value to be assigned.</returns>
    </member>
    <member name="T:System.Activities.Statements.CancellationScope">
      <summary>Associates cancellation logic, in the form of a <see cref="T:System.Activities.Activity" />, with a main path of execution, also expressed as a <see cref="T:System.Activities.Activity" />.</summary>
    </member>
    <member name="M:System.Activities.Statements.CancellationScope.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.CancellationScope" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.CancellationScope.Body">
      <summary>Gets the <see cref="T:System.Activities.Activity" /> contained by the <see cref="T:System.Activities.Statements.CancellationScope" /> that represents the main path of execution.</summary>
      <returns>The main path of execution.</returns>
    </member>
    <member name="P:System.Activities.Statements.CancellationScope.CancellationHandler">
      <summary>The <see cref="T:System.Activities.Activity" /> that is executed in the event of cancellation.</summary>
      <returns>The cancellation handler.</returns>
    </member>
    <member name="P:System.Activities.Statements.CancellationScope.Variables">
      <summary>Gets the collection of <see cref="T:System.Activities.Activity" /> objects associated with the <see cref="T:System.Activities.Statements.CancellationScope" />.</summary>
      <returns>The collection of <see cref="T:System.Activities.Activity" /> objects associated with the <see cref="T:System.Activities.Statements.CancellationScope" />.</returns>
    </member>
    <member name="T:System.Activities.Statements.Catch">
      <summary>Contains the actions to be executed after an exception is thrown in the corresponding Try block of a <see cref="T:System.Activities.Statements.TryCatchFinally" /> activity.</summary>
    </member>
    <member name="P:System.Activities.Statements.Catch.ExceptionType">
      <summary>The type of exception that the <see cref="T:System.Activities.Statements.Catch" /> block is handling.</summary>
      <returns>The exception type.</returns>
    </member>
    <member name="T:System.Activities.Statements.Catch`1">
      <summary>Contains the actions to be executed after an exception is raised in the corresponding Try block of a <see cref="T:System.Activities.Statements.TryCatchFinally" /> activity.</summary>
      <typeparam name="TException">The type of exception that the <see cref="T:System.Activities.Statements.Catch`1" /> block is handling.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.Catch`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.Catch`1" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.Catch`1.Action">
      <summary>The handler for the exception being caught. </summary>
      <returns>The activity action.</returns>
    </member>
    <member name="P:System.Activities.Statements.Catch`1.ExceptionType">
      <summary>The type of exception that the <see cref="T:System.Activities.Statements.Catch" /> block is handling.</summary>
      <returns>The exception type.</returns>
    </member>
    <member name="T:System.Activities.Statements.ClearCollection`1">
      <summary>Clears a specified collection of all items.</summary>
      <typeparam name="T">The type of the elements in the <see cref="P:System.Activities.Statements.ClearCollection`1.Collection" /> parameter.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.ClearCollection`1.#ctor">
      <summary>Creates a new instance of the <see cref="M:System.Activities.Statements.ClearCollection`1.#ctor" /> class. </summary>
    </member>
    <member name="P:System.Activities.Statements.ClearCollection`1.Collection">
      <summary>The collection to be cleared of contents.</summary>
      <returns>The collection.</returns>
    </member>
    <member name="T:System.Activities.Statements.CompensableActivity">
      <summary>An activity that supports compensation of its child activities.</summary>
    </member>
    <member name="M:System.Activities.Statements.CompensableActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.CompensableActivity" /> class. </summary>
    </member>
    <member name="P:System.Activities.Statements.CompensableActivity.Body">
      <summary>Gets or sets the activity that is scheduled when the <see cref="T:System.Activities.Statements.CompensableActivity" /> executes.</summary>
      <returns>The activity that is scheduled when the <see cref="T:System.Activities.Statements.CompensableActivity" /> executes.</returns>
    </member>
    <member name="P:System.Activities.Statements.CompensableActivity.CancellationHandler">
      <summary>Gets or sets the activity that is scheduled when the activity is canceled.</summary>
      <returns>The activity that is scheduled when the activity is canceled.</returns>
    </member>
    <member name="P:System.Activities.Statements.CompensableActivity.CompensationHandler">
      <summary>Gets or sets the activity that is scheduled when compensation is performed on the <see cref="T:System.Activities.Statements.CompensableActivity" />.</summary>
      <returns>The activity that is scheduled when compensation is performed on the <see cref="T:System.Activities.Statements.CompensableActivity" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.CompensableActivity.ConfirmationHandler">
      <summary>Gets or sets the activity that is scheduled when confirmation is performed for this <see cref="T:System.Activities.Statements.CompensableActivity" />.</summary>
      <returns>The activity that is scheduled when confirmation is performed for this <see cref="T:System.Activities.Statements.CompensableActivity" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.CompensableActivity.Variables">
      <summary>Gets the collection of <see cref="T:System.WorkflowModel.Variable" /> objects for this <see cref="T:System.Activities.Statements.CompensableActivity" />.</summary>
      <returns>The collection of <see cref="T:System.WorkflowModel.Variable" /> objects for this <see cref="T:System.Activities.Statements.CompensableActivity" />.</returns>
    </member>
    <member name="T:System.Activities.Statements.Compensate">
      <summary>An activity used to explicitly invoke the compensation handler of a <see cref="T:System.Activities.Statements.CompensableActivity" />.</summary>
    </member>
    <member name="M:System.Activities.Statements.Compensate.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.Compensate" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.Compensate.Target">
      <summary>Gets or sets the <see cref="T:System.WorkflowModel.InArgument`1" /> that contains the <see cref="T:System.Activities.Statements.CompensationHandle" /> for this <see cref="T:System.Activities.Statements.Compensate" /> activity.</summary>
      <returns>
A <see cref="T:System.WorkflowModel.InArgument`1" /> that contains the <see cref="T:System.Activities.Statements.CompensationHandle" /> for this <see cref="T:System.Activities.Statements.Compensate" />.
</returns>
    </member>
    <member name="T:System.Activities.Statements.CompensationExtension">
      <summary>Represents an extension that hooks up with compensation activities and persists compensation-related instance state.</summary>
    </member>
    <member name="M:System.Activities.Statements.CompensationExtension.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.CompensationExtension" /> class.</summary>
    </member>
    <member name="M:System.Activities.Statements.CompensationExtension.CollectValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}@,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}@)">
      <summary>Called by the host to collect read-write values and write-only values related to compensation to be persisted.</summary>
      <param name="readWriteValues">The read-write values to be persisted.</param>
      <param name="writeOnlyValues">The write-only values to be persisted.</param>
    </member>
    <member name="M:System.Activities.Statements.CompensationExtension.PublishValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object})">
      <summary>Called by the host to pass all of the loaded values related to compensation that were part of the most recent persistence episode.</summary>
      <param name="readWriteValues">The read-write values that were loaded from the persistence store.</param>
    </member>
    <member name="M:System.Activities.Statements.CompensationExtension.System#Activities#Hosting#IWorkflowInstanceExtension#GetAdditionalExtensions">
      <summary>Returns any additional extensions to compensation activities.</summary>
      <returns>A collection of additional workflow extensions.</returns>
    </member>
    <member name="M:System.Activities.Statements.CompensationExtension.System#Activities#Hosting#IWorkflowInstanceExtension#SetInstance(System.Activities.Hosting.WorkflowInstanceProxy)">
      <summary>Sets any additional extensions to compensation activities.</summary>
      <param name="instance">The target workflow instance to set.</param>
    </member>
    <member name="T:System.Activities.Statements.CompensationToken">
      <summary>Provides a means to explicitly confirm or compensate a <see cref="T:System.Activities.Statements.CompensableActivity" /> once the <see cref="P:System.Activities.Statements.CompensableActivity.Body" /> of the <see cref="T:System.Activities.Statements.CompensableActivity" /> has successfully completed.</summary>
    </member>
    <member name="T:System.Activities.Statements.Confirm">
      <summary>An activity used to explicitly invoke the confirmation handler of a <see cref="T:System.Activities.Statements.CompensableActivity" />.</summary>
    </member>
    <member name="M:System.Activities.Statements.Confirm.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.Confirm" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.Confirm.Target">
      <summary>Gets or sets the <see cref="T:System.WorkflowModel.InArgument`1" /> that contains the <see cref="T:System.Activities.Statements.CompensationHandle" /> for this <see cref="T:System.Activities.Statements.Confirm" /> activity.</summary>
      <returns>The <see cref="T:System.WorkflowModel.InArgument`1" /> that contains the <see cref="T:System.Activities.Statements.CompensationHandle" /> for this <see cref="T:System.Activities.Statements.Confirm" /> activity.</returns>
    </member>
    <member name="T:System.Activities.Statements.CreateBookmarkScope">
      <summary>Creates a <see cref="T:System.Activities.BookmarkScope" />.</summary>
    </member>
    <member name="M:System.Activities.Statements.CreateBookmarkScope.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.CreateBookmarkScope" /> class.</summary>
    </member>
    <member name="T:System.Activities.Statements.Delay">
      <summary>Creates a timer for a specified duration, using a <see cref="T:System.Activities.Statements.TimerExtension" />.</summary>
    </member>
    <member name="M:System.Activities.Statements.Delay.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.Delay" /> activity.</summary>
    </member>
    <member name="P:System.Activities.Statements.Delay.Duration">
      <summary>The duration of the timer that the <see cref="T:System.Activities.Statements.Delay" /> activity creates. If the duration is set to <see cref="P:System.TimeSpan.MaxValue" />, the delay is infinite.</summary>
      <returns>The timer duration.</returns>
    </member>
    <member name="T:System.Activities.Statements.DeleteBookmarkScope">
      <summary>Deletes the <see cref="T:System.Activities.BookmarkScope" /> referenced by <see cref="P:System.Activities.Statements.DeleteBookmarkScope.Scope" />.</summary>
    </member>
    <member name="M:System.Activities.Statements.DeleteBookmarkScope.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.DeleteBookmarkScope" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.DeleteBookmarkScope.Scope">
      <summary>Gets or sets the associated <see cref="T:System.Activities.BookmarkScope" />.</summary>
      <returns>The associated <see cref="T:System.Activities.BookmarkScope" />.</returns>
    </member>
    <member name="T:System.Activities.Statements.DoWhile">
      <summary>A looping activity that executes contained activities at least once, until a condition is no longer true.</summary>
    </member>
    <member name="M:System.Activities.Statements.DoWhile.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.DoWhile" /> class. </summary>
    </member>
    <member name="M:System.Activities.Statements.DoWhile.#ctor(System.Activities.Activity{System.Boolean})">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.DoWhile" /> class. </summary>
      <param name="condition">The condition under which the activity continues to iterate.</param>
    </member>
    <member name="M:System.Activities.Statements.DoWhile.#ctor(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,System.Boolean}})">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.DoWhile" /> class. </summary>
      <param name="condition">The condition under which the activity continues to iterate.</param>
    </member>
    <member name="P:System.Activities.Statements.DoWhile.Body">
      <summary>The child activity to be executed with every iteration.</summary>
      <returns>The child activity.</returns>
    </member>
    <member name="P:System.Activities.Statements.DoWhile.Condition">
      <summary>The <see cref="T:System.Activities.Activity’1" /> checked at the end of the loop to determine whether the loop is executed again.</summary>
      <returns>The condition for re-executing the loop.</returns>
    </member>
    <member name="P:System.Activities.Statements.DoWhile.Variables">
      <summary>The collection of <see cref="T:System.Activity.Variable" /> objects associated with the <see cref="T:System.Activities.Statements.DoWhile" /> activity.</summary>
      <returns>The collection of variables.</returns>
    </member>
    <member name="T:System.Activities.Statements.DurableTimerExtension">
      <summary>Represents an activity timer extension that can be persisted. </summary>
    </member>
    <member name="M:System.Activities.Statements.DurableTimerExtension.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.DurableTimerExtension" /> class.</summary>
    </member>
    <member name="M:System.Activities.Statements.DurableTimerExtension.Dispose">
      <summary>Terminates all registered timers.</summary>
    </member>
    <member name="M:System.Activities.Statements.DurableTimerExtension.GetAdditionalExtensions">
      <summary>Returns an enumerator that iterates over the collection of timer extensions.</summary>
      <returns>An enumerator.</returns>
    </member>
    <member name="M:System.Activities.Statements.DurableTimerExtension.OnCancelTimer(System.Activities.Bookmark)">
      <summary>Removes a timer object from the table of registered timers for the current workflow operation.</summary>
      <param name="bookmark">A point at which a workflow or activity can passively wait to be resumed following the expiration of the timer object.</param>
    </member>
    <member name="M:System.Activities.Statements.DurableTimerExtension.OnRegisterTimer(System.TimeSpan,System.Activities.Bookmark)">
      <summary>Adds a timer object that contains the specified time span and bookmark information to the table of registered timers for the current workflow operation.</summary>
      <param name="timeout">A time span object that is added to the timer registration table entry in a workflow operation along with callback information.</param>
      <param name="bookmark">A point at which a workflow or activity can passively wait to be resumed following the expiration of a timer object.</param>
    </member>
    <member name="M:System.Activities.Statements.DurableTimerExtension.SetInstance(System.Activities.Hosting.WorkflowInstanceProxy)">
      <summary>Establishes the specified workflow instance as the current instance.</summary>
      <param name="instance">The workflow instance to make current.</param>
    </member>
    <member name="T:System.Activities.Statements.ExistsInCollection`1">
      <summary>Indicates whether a given item is present in a given collection.</summary>
      <typeparam name="T">The type of elements in the specified collection.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.ExistsInCollection`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.ExistsInCollection`1" /> class. </summary>
    </member>
    <member name="P:System.Activities.Statements.ExistsInCollection`1.Collection">
      <summary>The collection to be searched for the specified element.</summary>
      <returns>The collection.</returns>
    </member>
    <member name="P:System.Activities.Statements.ExistsInCollection`1.Item">
      <summary>The item to search the specified collection for.</summary>
      <returns>The item.</returns>
    </member>
    <member name="T:System.Activities.Statements.Flowchart">
      <summary>Represents the models workflows using the familiar flowchart paradigm.</summary>
    </member>
    <member name="M:System.Activities.Statements.Flowchart.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.Flowchart" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.Flowchart.Nodes">
      <summary>Gets or sets the collection of <see cref="T:System.Activities.Statements.FlowNode" /> objects contained by the flowchart.</summary>
      <returns>A collection of <see cref="T:System.Activities.Statements.FlowNode" /> objects..</returns>
    </member>
    <member name="P:System.Activities.Statements.Flowchart.StartNode">
      <summary>Gets or sets the <see cref="T:System.Activities.Statements.FlowNode" /> to be executed when the flowchart starts.</summary>
      <returns>The starting node.</returns>
    </member>
    <member name="P:System.Activities.Statements.Flowchart.ValidateUnconnectedNodes">
      <summary>Gets or sets a value that indicates whether unconnected nodes are validated.</summary>
      <returns>true if unconnected nodes are validated; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Statements.Flowchart.Variables">
      <summary>Gets or sets the collection of <see cref="T:System.WorkflowModel.Variable" /> objects associated with the <see cref="T:System.Activities.Statements.Flowchart" />, which are available to share state across the child activities contained within the Flowchart.</summary>
      <returns>The collection of variables.</returns>
    </member>
    <member name="T:System.Activities.Statements.FlowDecision">
      <summary>A specialized <see cref="T:System.Activities.Statements.FlowNode" /> that provides the ability to model a conditional node with two outcomes. </summary>
    </member>
    <member name="M:System.Activities.Statements.FlowDecision.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.FlowDecision" /> class. </summary>
    </member>
    <member name="M:System.Activities.Statements.FlowDecision.#ctor(System.Activities.Activity{System.Boolean})">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.FlowDecision" /> class with the specified condition.</summary>
      <param name="condition">The condition the <see cref="T:System.Activities.Statements.FlowDecision" /> is testing.</param>
    </member>
    <member name="M:System.Activities.Statements.FlowDecision.#ctor(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,System.Boolean}})">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.FlowDecision" /> class with the specified condition.</summary>
      <param name="condition">The condition the <see cref="T:System.Activities.Statements.FlowDecision" /> is testing.</param>
    </member>
    <member name="P:System.Activities.Statements.FlowDecision.Condition">
      <summary>Specifies the condition the <see cref="T:System.Activities.Statements.FlowDecision" /> is testing.</summary>
      <returns>A value expression that represents the condition. </returns>
    </member>
    <member name="P:System.Activities.Statements.FlowDecision.DisplayName">
      <summary>The name of this flow decision to be displayed in the activity designer.</summary>
      <returns>The name of the flow decision.</returns>
    </member>
    <member name="P:System.Activities.Statements.FlowDecision.False">
      <summary>Gets or sets the <see cref="T:System.Activities.Statements.FlowNode" /> that is executed when the condition evaluates to false.</summary>
      <returns>The activity that is executed when the condition evaluates to false.</returns>
    </member>
    <member name="P:System.Activities.Statements.FlowDecision.True">
      <summary>Gets or sets the <see cref="T:System.Activities.Statements.FlowNode" /> that is executed when the condition evaluates to true.</summary>
      <returns>The activity to execute when the condition evaluates to true.</returns>
    </member>
    <member name="T:System.Activities.Statements.FlowNode">
      <summary>The abstract base class for all the different node types that can be contained within a <see cref="T:System.Activities.Statements.Flowchart" /> activity.</summary>
    </member>
    <member name="T:System.Activities.Statements.FlowStep">
      <summary>A <see cref="T:System.Activities.Statements.FlowNode" /> element that executes a specified <see cref="P:System.Activities.Statements.FlowStep.Action" /> and has a <see cref="P:System.Activities.Statements.FlowStep.Next" /> pointer. </summary>
    </member>
    <member name="M:System.Activities.Statements.FlowStep.#ctor">
      <summary>Returns a new instance of the <see cref="T:System.Activities.Statements.FlowStep" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.FlowStep.Action">
      <summary>The <see cref="T:System.Activities.Activity" /> that the <see cref="T:System.Activities.Statements.FlowStep" /> executes.</summary>
      <returns>The activity to be executed as part of this step of the flowchart.</returns>
    </member>
    <member name="P:System.Activities.Statements.FlowStep.Next">
      <summary>The next <see cref="T:System.Activities.Statements.FlowNode" />in the flowchart to execute after executing the current <see cref="T:System.Activities.Statements.FlowStep" />.</summary>
      <returns>The specified element.</returns>
    </member>
    <member name="T:System.Activities.Statements.FlowSwitch`1">
      <summary>A specialized <see cref="T:System.Activities.Statements.FlowNode" /> that allows modeling a switch construct, with one expression and one outcome for each match.</summary>
      <typeparam name="T">The type of the expression to evaluate against cases. </typeparam>
    </member>
    <member name="M:System.Activities.Statements.FlowSwitch`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.FlowSwitch`1" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.FlowSwitch`1.Cases">
      <summary>Gets a dictionary of cases to be processed by the <see cref="T:System.Activities.Statements.FlowSwitch`1" /> element.</summary>
      <returns>The collection of cases.</returns>
    </member>
    <member name="P:System.Activities.Statements.FlowSwitch`1.Default">
      <summary>The <see cref="T:System.Activities.Statements.FlowNode" /> to be executed if no elements in the <see cref="P:System.Activities.Statements.FlowSwitch`1.Cases" /> collection match the result of the evaluation of the <see cref="P:System.Activities.Statements.FlowSwitch`1.Expression" />.</summary>
      <returns>The default <see cref="T:System.Activities.Statements.FlowNode" /> to execute.</returns>
    </member>
    <member name="P:System.Activities.Statements.FlowSwitch`1.DisplayName">
      <summary>Gets the name of this flow switch to be displayed in the activity designer.</summary>
      <returns>The name of the flow switch.</returns>
    </member>
    <member name="P:System.Activities.Statements.FlowSwitch`1.Expression">
      <summary>The expression to evaluate against the collection of <see cref="P:System.Activities.Statements.FlowSwitch`1.Cases" />.</summary>
      <returns>The expression to evaluate.</returns>
    </member>
    <member name="T:System.Activities.Statements.ForEach`1">
      <summary>Executes an activity action once for each value provided in the <see cref="P:System.Activities.Statements.ForEach`1.Values" /> collection.</summary>
      <typeparam name="T">The type of the values provided in the <see cref="P:System.Activities.Statements.ForEach`1.Values" /> collection.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.ForEach`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.ForEach`1" /> class. </summary>
    </member>
    <member name="P:System.Activities.Statements.ForEach`1.Body">
      <summary>The <see cref="T:System.Activities.ActivityAction" /> to be executed for each item in the <see cref="P:System.Activities.Statements.ForEach`1.Values" /> collection.</summary>
      <returns>The action to be executed.</returns>
    </member>
    <member name="P:System.Activities.Statements.ForEach`1.Values">
      <summary>The activity’s collection of inputs for the execution of the <see cref="P:System.Activities.Statements.ForEach`1.Body" /> activity action.</summary>
      <returns>The collection of values.</returns>
    </member>
    <member name="T:System.Activities.Statements.HandleScope`1">
      <summary>Provides default scoping behavior for <see cref="T:System.Activities.Handle" /> objects.</summary>
      <typeparam name="THandle">The type of the <see cref="P:System.Activities.Statements.HandleScope`1.Handle" />.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.HandleScope`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.HandleScope`1" /> class. </summary>
    </member>
    <member name="P:System.Activities.Statements.HandleScope`1.Body">
      <summary>The activity to be scoped by this activity.</summary>
      <returns>The scoped activity.</returns>
    </member>
    <member name="P:System.Activities.Statements.HandleScope`1.Handle">
      <summary>The <see cref="T:System.Activities.Handle" /> flowed in from a parent scope.</summary>
      <returns>The handle.</returns>
    </member>
    <member name="T:System.Activities.Statements.If">
      <summary>Models an If-Then-Else condition.</summary>
    </member>
    <member name="M:System.Activities.Statements.If.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.If" /> class. </summary>
    </member>
    <member name="M:System.Activities.Statements.If.#ctor(System.Activities.Activity{System.Boolean})">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.If" /> class using the specified condition.</summary>
      <param name="condition">The execution condition.</param>
    </member>
    <member name="M:System.Activities.Statements.If.#ctor(System.Activities.InArgument{System.Boolean})">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.If" /> class using the specified condition.</summary>
      <param name="condition">The execution condition.</param>
    </member>
    <member name="M:System.Activities.Statements.If.#ctor(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,System.Boolean}})">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.If" /> class using the specified condition.</summary>
      <param name="condition">The execution condition.</param>
    </member>
    <member name="P:System.Activities.Statements.If.Condition">
      <summary>The condition that determines which child activity to execute. The <see cref="P:System.Activities.Statements.If.Then" /> activity executes if the condition resolves to true. The <see cref="P:System.Activities.Statements.If.Else" /> activity executes if the condition resolves to false.</summary>
      <returns>The execution condition.</returns>
    </member>
    <member name="P:System.Activities.Statements.If.Else">
      <summary>The activity to be executed if the activity’s <see cref="P:System.Activities.Statements.If.Condition" /> resolves to false.</summary>
      <returns>The child activity.</returns>
    </member>
    <member name="P:System.Activities.Statements.If.Then">
      <summary>The activity to be executed if the activity’s <see cref="P:System.Activities.Statements.If.Condition" /> resolves to true.</summary>
      <returns>The child activity.</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeAction">
      <summary>Invokes an activity’s <see cref="T:System.Activities.ActivityAction" /> handler.</summary>
    </member>
    <member name="M:System.Activities.Statements.InvokeAction.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.InvokeAction" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction.Action">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityAction" /> invoked by this <see cref="T:System.Activities.Statements.InvokeAction" />.</summary>
      <returns>The <see cref="T:System.Activities.ActivityAction" /> invoked by this <see cref="T:System.Activities.Statements.InvokeAction" />.</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeAction`1">
      <summary>Invokes an activity’s <see cref="T:System.Activities.ActivityAction`1" /> handler.</summary>
      <typeparam name="T">The data type of the <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`1" />.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.InvokeAction`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.InvokeAction`1" /> class. </summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`1.Action">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityAction`1" /> invoked by this <see cref="T:System.Activities.Statements.InvokeAction`1" />.</summary>
      <returns>The <see cref="T:System.Activities.ActivityAction`1" /> invoked by this <see cref="T:System.Activities.Statements.InvokeAction`1" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`1.Argument">
      <summary>Gets or sets the <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`1" />.</summary>
      <returns>The <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`1" />.</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeAction`10">
      <summary>Invokes an activity’s <see cref="T:System.Activities.ActivityAction`10" /> handler.</summary>
      <typeparam name="T1">The data type of the first <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`10" />.</typeparam>
      <typeparam name="T2">The data type of the second <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`10" />.</typeparam>
      <typeparam name="T3">The data type of the third <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`10" />.</typeparam>
      <typeparam name="T4">The data type of the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`10" />.</typeparam>
      <typeparam name="T5">The data type of the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`10" />.</typeparam>
      <typeparam name="T6">The data type of the sixth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`10" />.</typeparam>
      <typeparam name="T7">The data type of the seventh <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`10" />.</typeparam>
      <typeparam name="T8">The data type of the eighth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`10" />.</typeparam>
      <typeparam name="T9">The data type of the ninth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`10" />.</typeparam>
      <typeparam name="T10">The data type of the tenth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`10" />.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.InvokeAction`10.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.InvokeAction`10" /> class. </summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`10.Action">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityAction`10" /> invoked by this <see cref="T:System.Activities.Statements.InvokeAction`10" />.</summary>
      <returns>The activity action invoked by this <see cref="T:System.Activities.Statements.InvokeAction`10" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`10.Argument1">
      <summary>Gets or sets the first <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`10" />.</summary>
      <returns>The first In argument passed to the associated <see cref="T:System.Activities.ActivityAction`10" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`10.Argument10">
      <summary>Gets or sets the tenth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`10" />.</summary>
      <returns>The tenth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`10" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`10.Argument2">
      <summary>Gets or sets the second <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`10" />.</summary>
      <returns>The second In argument passed to the associated <see cref="T:System.Activities.ActivityAction`10" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`10.Argument3">
      <summary>Gets or sets the third <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`10" />.</summary>
      <returns>The third In argument passed to the associated <see cref="T:System.Activities.ActivityAction`10" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`10.Argument4">
      <summary>Gets or sets the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`10" />.</summary>
      <returns>The fourth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`10" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`10.Argument5">
      <summary>Gets or sets the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`10" />.</summary>
      <returns>The fifth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`10" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`10.Argument6">
      <summary>Gets or sets the sixth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`10" />.</summary>
      <returns>The sixth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`10" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`10.Argument7">
      <summary>Gets or sets the seventh <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`10" />.</summary>
      <returns>The seventh In argument passed to the associated <see cref="T:System.Activities.ActivityAction`10" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`10.Argument8">
      <summary>Gets or sets the eighth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`10" />.</summary>
      <returns>The eighth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`10" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`10.Argument9">
      <summary>Gets or sets the ninth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`10" />.</summary>
      <returns>The ninth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`10" />.</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeAction`11">
      <summary>Invokes an <see cref="T:System.Activities.ActivityAction`11" />.</summary>
      <typeparam name="T1">The data type of the first <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`11" />.</typeparam>
      <typeparam name="T2">The data type of the second <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`11" />.</typeparam>
      <typeparam name="T3">The data type of the third <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`11" />.</typeparam>
      <typeparam name="T4">The data type of the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`11" />.</typeparam>
      <typeparam name="T5">The data type of the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`11" />.</typeparam>
      <typeparam name="T6">The data type of the sixth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`11" />.</typeparam>
      <typeparam name="T7">The data type of the seventh <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`11" />.</typeparam>
      <typeparam name="T8">The data type of the eighth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`11" />.</typeparam>
      <typeparam name="T9">The data type of the ninth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`11" />.</typeparam>
      <typeparam name="T10">The data type of the tenth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`11" />.</typeparam>
      <typeparam name="T11">The data type of the eleventh <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`11" />.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.InvokeAction`11.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.InvokeAction`11" /> class. </summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`11.Action">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityAction`11" /> invoked by this <see cref="T:System.Activities.Statements.InvokeAction`11" />.</summary>
      <returns>The activity action invoked by this <see cref="T:System.Activities.Statements.InvokeAction`11" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`11.Argument1">
      <summary>Gets or sets the first <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`11" />.</summary>
      <returns>The first In argument passed to the associated <see cref="T:System.Activities.ActivityAction`11" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`11.Argument10">
      <summary>Gets or sets the tenth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`11" />.</summary>
      <returns>The tenth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`11" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`11.Argument11">
      <summary>Gets or sets the eleventh <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`11" />.</summary>
      <returns>The eleventh In argument passed to the associated <see cref="T:System.Activities.ActivityAction`11" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`11.Argument2">
      <summary>Gets or sets the second <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`11" />.</summary>
      <returns>The second In argument passed to the associated <see cref="T:System.Activities.ActivityAction`11" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`11.Argument3">
      <summary>Gets or sets the third <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`11" />.</summary>
      <returns>The third In argument passed to the associated <see cref="T:System.Activities.ActivityAction`11" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`11.Argument4">
      <summary>Gets or sets the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`11" />.</summary>
      <returns>The fourth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`11" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`11.Argument5">
      <summary>Gets or sets the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`11" />.</summary>
      <returns>The fifth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`11" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`11.Argument6">
      <summary>Gets or sets the sixth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`11" />.</summary>
      <returns>The sixth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`11" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`11.Argument7">
      <summary>Gets or sets the seventh <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`11" />.</summary>
      <returns>The seventh In argument passed to the associated <see cref="T:System.Activities.ActivityAction`11" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`11.Argument8">
      <summary>Gets or sets the eighth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`11" />.</summary>
      <returns>The eighth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`11" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`11.Argument9">
      <summary>Gets or sets the ninth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`11" />.</summary>
      <returns>The ninth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`11" />.</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeAction`12">
      <summary>Invokes an activity’s <see cref="T:System.Activities.ActivityAction`12" /> handler.</summary>
      <typeparam name="T1">The data type of the first <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`12" />.</typeparam>
      <typeparam name="T2">The data type of the second <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`12" />.</typeparam>
      <typeparam name="T3">The data type of the third <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`12" />.</typeparam>
      <typeparam name="T4">The data type of the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`12" />.</typeparam>
      <typeparam name="T5">The data type of the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`12" />.</typeparam>
      <typeparam name="T6">The data type of the sixth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`12" />.</typeparam>
      <typeparam name="T7">The data type of the seventh <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`12" />.</typeparam>
      <typeparam name="T8">The data type of the eighth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`12" />.</typeparam>
      <typeparam name="T9">The data type of the ninth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`12" />.</typeparam>
      <typeparam name="T10">The data type of the tenth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`12" />.</typeparam>
      <typeparam name="T11">The data type of the eleventh <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`12" />.</typeparam>
      <typeparam name="T12">The data type of the twelfth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`12" />.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.InvokeAction`12.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.InvokeAction`12" /> class. </summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`12.Action">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.InvokeAction`12" /> class. </summary>
      <returns>The activity action invoked by this <see cref="T:System.Activities.Statements.InvokeAction`12" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`12.Argument1">
      <summary>Gets or sets the first <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</summary>
      <returns>The first In argument passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`12.Argument10">
      <summary>Gets or sets the tenth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</summary>
      <returns>The tenth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`12.Argument11">
      <summary>Gets or sets the eleventh <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</summary>
      <returns>The eleventh In argument passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`12.Argument12">
      <summary>Gets or sets the twelfth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</summary>
      <returns>The twelfth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`12.Argument2">
      <summary>Gets or sets the second <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</summary>
      <returns>The second In argument passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`12.Argument3">
      <summary>Gets or sets the third <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</summary>
      <returns>The third In argument passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`12.Argument4">
      <summary>Gets or sets the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</summary>
      <returns>The fourth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`12.Argument5">
      <summary>Gets or sets the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</summary>
      <returns>The fifth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`12.Argument6">
      <summary>Gets or sets the sixth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</summary>
      <returns>The sixth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`12.Argument7">
      <summary>Gets or sets the seventh <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</summary>
      <returns>The seventh In argument passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`12.Argument8">
      <summary>Gets or sets the eighth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</summary>
      <returns>The eighth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`12.Argument9">
      <summary>Gets or sets the ninth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</summary>
      <returns>The ninth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`12" />.</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeAction`13">
      <summary>Invokes an activity’s <see cref="T:System.Activities.ActivityAction`13" /> handler.</summary>
      <typeparam name="T1">The data type of the first <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`13" />.</typeparam>
      <typeparam name="T2">The data type of the second <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`13" />.</typeparam>
      <typeparam name="T3">The data type of the third <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`13" />.</typeparam>
      <typeparam name="T4">The data type of the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`13" />.</typeparam>
      <typeparam name="T5">The data type of the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`13" />.</typeparam>
      <typeparam name="T6">The data type of the sixth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`13" />.</typeparam>
      <typeparam name="T7">The data type of the seventh <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`13" />.</typeparam>
      <typeparam name="T8">The data type of the eighth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`13" />.</typeparam>
      <typeparam name="T9">The data type of the ninth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`13" />.</typeparam>
      <typeparam name="T10">The data type of the tenth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`13" />.</typeparam>
      <typeparam name="T11">The data type of the eleventh <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`13" />.</typeparam>
      <typeparam name="T12">The data type of the twelfth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`13" />.</typeparam>
      <typeparam name="T13">The data type of the thirteenth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`13" />.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.InvokeAction`13.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.InvokeAction`13" /> class. </summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`13.Action">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityAction`13" /> invoked by this <see cref="T:System.Activities.Statements.InvokeAction`13" />.</summary>
      <returns>The activity action invoked by this <see cref="T:System.Activities.Statements.InvokeAction`13" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`13.Argument1">
      <summary>Gets or sets the first <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</summary>
      <returns>The first In argument passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`13.Argument10">
      <summary>Gets or sets the tenth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</summary>
      <returns>The tenth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`13.Argument11">
      <summary>Gets or sets the eleventh <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</summary>
      <returns>The eleventh In argument passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`13.Argument12">
      <summary>Gets or sets the twelfth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</summary>
      <returns>The twelfth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`13.Argument13">
      <summary>Gets or sets the thirteenth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</summary>
      <returns>The thirteenth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`13.Argument2">
      <summary>Gets or sets the second <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</summary>
      <returns>The second In argument passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`13.Argument3">
      <summary>Gets or sets the third <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</summary>
      <returns>The third In argument passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`13.Argument4">
      <summary>Gets or sets the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</summary>
      <returns>The fourth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`13.Argument5">
      <summary>Gets or sets the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</summary>
      <returns>The fifth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`13.Argument6">
      <summary>Gets or sets the sixth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</summary>
      <returns>The sixth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`13.Argument7">
      <summary>Gets or sets the seventh <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</summary>
      <returns>The seventh In argument passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`13.Argument8">
      <summary>Gets or sets the eighth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</summary>
      <returns>The eighth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`13.Argument9">
      <summary>Gets or sets the ninth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</summary>
      <returns>The ninth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`13" />.</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeAction`14">
      <summary>Invokes an activity’s <see cref="T:System.Activities.ActivityAction`14" /> handler.</summary>
      <typeparam name="T1">The data type of the first <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`14" />.</typeparam>
      <typeparam name="T2">The data type of the second <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`14" />.</typeparam>
      <typeparam name="T3">The data type of the third <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`14" />.</typeparam>
      <typeparam name="T4">The data type of the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`14" />.</typeparam>
      <typeparam name="T5">The data type of the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`14" />.</typeparam>
      <typeparam name="T6">The data type of the sixth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`14" />.</typeparam>
      <typeparam name="T7">The data type of the seventh <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`14" />.</typeparam>
      <typeparam name="T8">The data type of the eighth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`14" />.</typeparam>
      <typeparam name="T9">The data type of the ninth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`14" />.</typeparam>
      <typeparam name="T10">The data type of the tenth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`13" />.</typeparam>
      <typeparam name="T11">The data type of the eleventh <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`14" />.</typeparam>
      <typeparam name="T12">The data type of the twelfth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`14" />.</typeparam>
      <typeparam name="T13">The data type of the thirteenth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`14" />.</typeparam>
      <typeparam name="T14">The data type of the fourteenth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`14" />.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.InvokeAction`14.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.InvokeAction`14" /> class. </summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`14.Action">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityAction`14" /> invoked by this <see cref="T:System.Activities.Statements.InvokeAction`14" />.</summary>
      <returns>The activity action invoked by this <see cref="T:System.Activities.Statements.InvokeAction`14" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`14.Argument1">
      <summary>Gets or sets the first <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</summary>
      <returns>The first In argument passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`14.Argument10">
      <summary>Gets or sets the tenth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</summary>
      <returns>The tenth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`14.Argument11">
      <summary>Gets or sets the eleventh <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</summary>
      <returns>The eleventh In argument passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`14.Argument12">
      <summary>Gets or sets the twelfth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</summary>
      <returns>The twelfth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`14.Argument13">
      <summary>Gets or sets the thirteenth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</summary>
      <returns>The thirteenth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`14.Argument14">
      <summary>Gets or sets the fourteenth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</summary>
      <returns>The fourteenth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`14.Argument2">
      <summary>Gets or sets the second <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</summary>
      <returns>The second In argument passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`14.Argument3">
      <summary>Gets or sets the third <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</summary>
      <returns>The third In argument passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`14.Argument4">
      <summary>Gets or sets the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</summary>
      <returns>The fourth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`14.Argument5">
      <summary>Gets or sets the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</summary>
      <returns>The fifth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`14.Argument6">
      <summary>Gets or sets the sixth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</summary>
      <returns>The sixth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`14.Argument7">
      <summary>Gets or sets the seventh <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</summary>
      <returns>The seventh In argument passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`14.Argument8">
      <summary>Gets or sets the eighth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</summary>
      <returns>The eighth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`14.Argument9">
      <summary>Gets or sets the ninth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</summary>
      <returns>The ninth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`14" />.</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeAction`15">
      <summary>Invokes an activity’s <see cref="T:System.Activities.ActivityAction`15" /> handler.</summary>
      <typeparam name="T1">The data type of the first <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`15" />.</typeparam>
      <typeparam name="T2">The data type of the second <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`15" />.</typeparam>
      <typeparam name="T3">The data type of the third <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`15" />.</typeparam>
      <typeparam name="T4">The data type of the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`15" />.</typeparam>
      <typeparam name="T5">The data type of the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`15" />.</typeparam>
      <typeparam name="T6">The data type of the sixth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`15" />.</typeparam>
      <typeparam name="T7">The data type of the seventh <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`15" />.</typeparam>
      <typeparam name="T8">The data type of the eighth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`15" />.</typeparam>
      <typeparam name="T9">The data type of the ninth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`15" />.</typeparam>
      <typeparam name="T10">The data type of the tenth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`15" />.</typeparam>
      <typeparam name="T11">The data type of the eleventh <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`15" />.</typeparam>
      <typeparam name="T12">The data type of the twelfth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`15" />.</typeparam>
      <typeparam name="T13">The data type of the thirteenth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`15" />.</typeparam>
      <typeparam name="T14">The data type of the fourteenth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`15" />.</typeparam>
      <typeparam name="T15">The data type of the fifteenth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`15" />.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.InvokeAction`15.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.InvokeAction`15" /> class. </summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`15.Action">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityAction`15" /> invoked by this <see cref="T:System.Activities.Statements.InvokeAction`15" />.</summary>
      <returns>The activity action invoked by this <see cref="T:System.Activities.Statements.InvokeAction`15" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`15.Argument1">
      <summary>Gets or sets the first <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</summary>
      <returns>The first In argument passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`15.Argument10">
      <summary>Gets or sets the tenth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</summary>
      <returns>The tenth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`15.Argument11">
      <summary>Gets or sets the eleventh <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</summary>
      <returns>The eleventh In argument passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`15.Argument12">
      <summary>Gets or sets the twelfth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</summary>
      <returns>The twelfth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`15.Argument13">
      <summary>Gets or sets the thirteenth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</summary>
      <returns>The thirteenth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`15.Argument14">
      <summary>Gets or sets the fourteenth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</summary>
      <returns>The fourteenth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`15.Argument15">
      <summary>Gets or sets the fifteenth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</summary>
      <returns>The fifteenth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`15.Argument2">
      <summary>Gets or sets the second <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</summary>
      <returns>The second In argument passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`15.Argument3">
      <summary>Gets or sets the third <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</summary>
      <returns>The third In argument passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`15.Argument4">
      <summary>Gets or sets the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</summary>
      <returns>The fourth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`15.Argument5">
      <summary>Gets or sets the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</summary>
      <returns>The fifth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`15.Argument6">
      <summary>Gets or sets the sixth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</summary>
      <returns>The sixth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`15.Argument7">
      <summary>Gets or sets the seventh <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</summary>
      <returns>The seventh In argument passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`15.Argument8">
      <summary>Gets or sets the eighth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</summary>
      <returns>The eighth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`15.Argument9">
      <summary>Gets or sets the ninth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</summary>
      <returns>The ninth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`15" />.</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeAction`16">
      <summary>Invokes an activity’s <see cref="T:System.Activities.ActivityAction`16" /> handler.</summary>
      <typeparam name="T1">The data type of the first <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`16" />.</typeparam>
      <typeparam name="T2">The data type of the second <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`16" />.</typeparam>
      <typeparam name="T3">The data type of the third <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`16" />.</typeparam>
      <typeparam name="T4">The data type of the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`16" />.</typeparam>
      <typeparam name="T5">The data type of the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`16" />.</typeparam>
      <typeparam name="T6">The data type of the sixth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`16" />.</typeparam>
      <typeparam name="T7">The data type of the seventh <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`16" />.</typeparam>
      <typeparam name="T8">The data type of the eighth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`16" />.</typeparam>
      <typeparam name="T9">The data type of the ninth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`16" />.</typeparam>
      <typeparam name="T10">The data type of the tenth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`16" />.</typeparam>
      <typeparam name="T11">The data type of the eleventh <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`16" />.</typeparam>
      <typeparam name="T12">The data type of the twelfth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`16" />.</typeparam>
      <typeparam name="T13">The data type of the thirteenth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`16" />.</typeparam>
      <typeparam name="T14">The data type of the fourteenth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`16" />.</typeparam>
      <typeparam name="T15">The data type of the fifteenth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`16" />.</typeparam>
      <typeparam name="T16">The data type of the sixteenth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`16" />.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.InvokeAction`16.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.InvokeAction`16" /> class. </summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`16.Action">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityAction`16" /> invoked by this <see cref="T:System.Activities.Statements.InvokeAction`16" />.</summary>
      <returns>The activity action invoked by this <see cref="T:System.Activities.Statements.InvokeAction`16" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`16.Argument1">
      <summary>Gets or sets the first <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</summary>
      <returns>The first In argument passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`16.Argument10">
      <summary>Gets or sets the tenth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</summary>
      <returns>The tenth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`16.Argument11">
      <summary>Gets or sets the eleventh <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</summary>
      <returns>The eleventh In argument passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`16.Argument12">
      <summary>Gets or sets the twelfth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</summary>
      <returns>The twelfth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`16.Argument13">
      <summary>Gets or sets the thirteenth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</summary>
      <returns>The thirteenth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`16.Argument14">
      <summary>Gets or sets the fourteenth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</summary>
      <returns>The fourteenth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`16.Argument15">
      <summary>Gets or sets the fifteenth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</summary>
      <returns>The fifteenth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`16.Argument16">
      <summary>Gets or sets the sixteenth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</summary>
      <returns>The sixteenth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`16.Argument2">
      <summary>Gets or sets the second <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</summary>
      <returns>The second In argument passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`16.Argument3">
      <summary>Gets or sets the third <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</summary>
      <returns>The third In argument passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`16.Argument4">
      <summary>Gets or sets the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</summary>
      <returns>The fourth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`16.Argument5">
      <summary>Gets or sets the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</summary>
      <returns>The fifth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`16.Argument6">
      <summary>Gets or sets the sixth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</summary>
      <returns>The sixth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`16.Argument7">
      <summary>Gets or sets the seventh <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</summary>
      <returns>The seventh In argument passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`16.Argument8">
      <summary>Gets or sets the eighth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</summary>
      <returns>The eighth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`16.Argument9">
      <summary>Gets or sets the ninth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</summary>
      <returns>The ninth In argument passed to the associated <see cref="T:System.Activities.ActivityAction`16" />.</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeAction`2">
      <summary>Invokes an activity’s <see cref="T:System.Activities.ActivityAction`2" /> handler.</summary>
      <typeparam name="T1">The data type of the first <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`2" />.</typeparam>
      <typeparam name="T2">The data type of the second <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`2" />.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.InvokeAction`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.InvokeAction`2" /> class. </summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`2.Action">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityAction`2" /> invoked by this <see cref="T:System.Activities.Statements.InvokeAction`2" />.</summary>
      <returns>The <see cref="T:System.Activities.ActivityAction`2" /> invoked by this <see cref="T:System.Activities.Statements.InvokeAction`2" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`2.Argument1">
      <summary>Gets or sets the first <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`2" />.</summary>
      <returns>The first <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`2" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`2.Argument2">
      <summary>Gets or sets the second <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`2" />.</summary>
      <returns>The second <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`2" />.</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeAction`3">
      <summary>Invokes an activity’s <see cref="T:System.Activities.ActivityAction`3" /> handler.</summary>
      <typeparam name="T1">The data type of the first <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`3" />.</typeparam>
      <typeparam name="T2">The data type of the second <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`3" />.</typeparam>
      <typeparam name="T3">The data type of the third <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`3" />.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.InvokeAction`3.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.InvokeAction`3" /> class. </summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`3.Action">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityAction`3" /> invoked by this <see cref="T:System.Activities.Statements.InvokeAction`3" />.</summary>
      <returns>The <see cref="T:System.Activities.ActivityAction`3" /> invoked by this <see cref="T:System.Activities.Statements.InvokeAction`3" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`3.Argument1">
      <summary>Gets or sets the first <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`3" />.</summary>
      <returns>The first <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`3" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`3.Argument2">
      <summary>Gets or sets the second <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`3" />.</summary>
      <returns>The second <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`3" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`3.Argument3">
      <summary>Gets or sets the third <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`3" />.</summary>
      <returns>The third <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`3" />.</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeAction`4">
      <summary>Invokes an activity’s <see cref="T:System.Activities.ActivityAction`4" /> handler.</summary>
      <typeparam name="T1">The data type of the first <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`4" />.</typeparam>
      <typeparam name="T2">The data type of the second <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`4" />.</typeparam>
      <typeparam name="T3">The data type of the third <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`4" />.</typeparam>
      <typeparam name="T4">The data type of the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`4" />.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.InvokeAction`4.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.InvokeAction`4" /> class. </summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`4.Action">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityAction`4" /> invoked by this <see cref="T:System.Activities.Statements.InvokeAction`4" />.</summary>
      <returns>The <see cref="T:System.Activities.ActivityAction`4" /> invoked by this <see cref="T:System.Activities.Statements.InvokeAction`4" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`4.Argument1">
      <summary>Gets or sets the first <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`4" />.</summary>
      <returns>The first <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`4" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`4.Argument2">
      <summary>Gets or sets the second <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`4" />.</summary>
      <returns>The second <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`4" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`4.Argument3">
      <summary>Gets or sets the third <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`4" />.</summary>
      <returns>The third <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`4" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`4.Argument4">
      <summary>Gets or sets the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`4" />.</summary>
      <returns>The fourth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`4" />.</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeAction`5">
      <summary>Invokes an activity’s <see cref="T:System.Activities.ActivityAction`5" /> handler.</summary>
      <typeparam name="T1">The data type of the first <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`5" />.</typeparam>
      <typeparam name="T2">The data type of the second <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`5" />.</typeparam>
      <typeparam name="T3">The data type of the third <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`5" />.</typeparam>
      <typeparam name="T4">The data type of the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`5" />.</typeparam>
      <typeparam name="T5">The data type of the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`5" />.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.InvokeAction`5.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.InvokeAction`5" /> class. </summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`5.Action">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityAction`5" /> invoked by this <see cref="T:System.Activities.Statements.InvokeAction`5" />.</summary>
      <returns>The activity action invoked by this <see cref="T:System.Activities.Statements.InvokeAction`5" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`5.Argument1">
      <summary>Gets or sets the first <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`5" />.</summary>
      <returns>The first argument passed to the associated <see cref="T:System.Activities.ActivityAction`5" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`5.Argument2">
      <summary>Gets or sets the second <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`5" />.</summary>
      <returns>The second argument passed to the associated <see cref="T:System.Activities.ActivityAction`5" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`5.Argument3">
      <summary>Gets or sets the third <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`5" />.</summary>
      <returns>The third argument passed to the associated <see cref="T:System.Activities.ActivityAction`5" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`5.Argument4">
      <summary>Gets or sets the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`5" />.</summary>
      <returns>The fourth argument passed to the associated <see cref="T:System.Activities.ActivityAction`5" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`5.Argument5">
      <summary>Gets or sets the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`5" />.</summary>
      <returns>The fifth argument passed to the associated <see cref="T:System.Activities.ActivityAction`5" />.</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeAction`6">
      <summary>Invokes an activity’s <see cref="T:System.Activities.ActivityAction`6" /> handler.</summary>
      <typeparam name="T1">The data type of the first <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`6" />.</typeparam>
      <typeparam name="T2">The data type of the second <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`6" />.</typeparam>
      <typeparam name="T3">The data type of the third <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`6" />.</typeparam>
      <typeparam name="T4">The data type of the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`6" />.</typeparam>
      <typeparam name="T5">The data type of the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`6" />.</typeparam>
      <typeparam name="T6">The data type of the sixth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`6" />.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.InvokeAction`6.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.InvokeAction`6" /> class. </summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`6.Action">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityAction`6" /> invoked by this <see cref="T:System.Activities.Statements.InvokeAction`6" />.</summary>
      <returns>The activity action invoked by this <see cref="T:System.Activities.Statements.InvokeAction`6" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`6.Argument1">
      <summary>Gets or sets the first <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`6" />.</summary>
      <returns>The first argument passed to the associated <see cref="T:System.Activities.ActivityAction`6" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`6.Argument2">
      <summary>Gets or sets the second <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`6" />.</summary>
      <returns>The second argument passed to the associated <see cref="T:System.Activities.ActivityAction`6" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`6.Argument3">
      <summary>Gets or sets the third <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`6" />.</summary>
      <returns>The third argument passed to the associated <see cref="T:System.Activities.ActivityAction`6" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`6.Argument4">
      <summary>Gets or sets the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`6" />.</summary>
      <returns>The fourth argument passed to the associated <see cref="T:System.Activities.ActivityAction`6" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`6.Argument5">
      <summary>Gets or sets the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`6" />.</summary>
      <returns>The fifth argument passed to the associated <see cref="T:System.Activities.ActivityAction`6" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`6.Argument6">
      <summary>Gets or sets the sixth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`6" />.</summary>
      <returns>The sixth argument passed to the associated <see cref="T:System.Activities.ActivityAction`6" />.</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeAction`7">
      <summary>Invokes an activity’s <see cref="T:System.Activities.ActivityAction`7" /> handler.</summary>
      <typeparam name="T1">The data type of the first <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`7" />.</typeparam>
      <typeparam name="T2">The data type of the second <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`7" />.</typeparam>
      <typeparam name="T3">The data type of the third <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`7" />.</typeparam>
      <typeparam name="T4">The data type of the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`7" />.</typeparam>
      <typeparam name="T5">The data type of the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`7" />.</typeparam>
      <typeparam name="T6">The data type of the sixth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`7" />.</typeparam>
      <typeparam name="T7">The data type of the seventh <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`7" />.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.InvokeAction`7.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.InvokeAction`7" /> class. </summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`7.Action">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityAction`7" /> invoked by this <see cref="T:System.Activities.Statements.InvokeAction`7" />.</summary>
      <returns>The activity action invoked by this <see cref="T:System.Activities.Statements.InvokeAction`7" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`7.Argument1">
      <summary>Gets or sets the first <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`7" />.</summary>
      <returns>The first argument passed to the associated <see cref="T:System.Activities.ActivityAction`7" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`7.Argument2">
      <summary>Gets or sets the second <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`7" />.</summary>
      <returns>The second argument passed to the associated <see cref="T:System.Activities.ActivityAction`7" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`7.Argument3">
      <summary>Gets or sets the third <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`7" />.</summary>
      <returns>The third argument passed to the associated <see cref="T:System.Activities.ActivityAction`7" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`7.Argument4">
      <summary>Gets or sets the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`7" />.</summary>
      <returns>The fourth argument passed to the associated <see cref="T:System.Activities.ActivityAction`7" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`7.Argument5">
      <summary>Gets or sets the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`7" />.</summary>
      <returns>The fifth argument passed to the associated <see cref="T:System.Activities.ActivityAction`7" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`7.Argument6">
      <summary>Gets or sets the sixth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`7" />.</summary>
      <returns>The sixth argument passed to the associated <see cref="T:System.Activities.ActivityAction`7" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`7.Argument7">
      <summary>Gets or sets the seventh <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`7" />.</summary>
      <returns>The seventh argument passed to the associated <see cref="T:System.Activities.ActivityAction`7" />.</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeAction`8">
      <summary>Invokes an activity’s <see cref="T:System.Activities.ActivityAction`8" /> handler.</summary>
      <typeparam name="T1">The data type of the first <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`8" />.</typeparam>
      <typeparam name="T2">The data type of the second <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`8" />.</typeparam>
      <typeparam name="T3">The data type of the third <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`8" />.</typeparam>
      <typeparam name="T4">The data type of the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`8" />.</typeparam>
      <typeparam name="T5">The data type of the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`8" />.</typeparam>
      <typeparam name="T6">The data type of the sixth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`8" />.</typeparam>
      <typeparam name="T7">The data type of the seventh <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`8" />.</typeparam>
      <typeparam name="T8">The data type of the eighth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`8" />.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.InvokeAction`8.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.InvokeAction`8" /> class. </summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`8.Action">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityAction`8" /> invoked by this <see cref="T:System.Activities.Statements.InvokeAction`8" />.</summary>
      <returns>The activity action invoked by this <see cref="T:System.Activities.Statements.InvokeAction`8" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`8.Argument1">
      <summary>Gets or sets the first <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`8" />.</summary>
      <returns>The first argument passed to the associated <see cref="T:System.Activities.ActivityAction`8" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`8.Argument2">
      <summary>Gets or sets the second <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`8" />.</summary>
      <returns>The second argument passed to the associated <see cref="T:System.Activities.ActivityAction`8" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`8.Argument3">
      <summary>Gets or sets the third <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`8" />.</summary>
      <returns>The third argument passed to the associated <see cref="T:System.Activities.ActivityAction`8" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`8.Argument4">
      <summary>Gets or sets the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`8" />.</summary>
      <returns>The fourth argument passed to the associated <see cref="T:System.Activities.ActivityAction`8" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`8.Argument5">
      <summary>Gets or sets the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`8" />.</summary>
      <returns>The fifth argument passed to the associated <see cref="T:System.Activities.ActivityAction`8" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`8.Argument6">
      <summary>Gets or sets the sixth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`8" />.</summary>
      <returns>The sixth argument passed to the associated <see cref="T:System.Activities.ActivityAction`8" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`8.Argument7">
      <summary>Gets or sets the seventh <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`8" />.</summary>
      <returns>The seventh argument passed to the associated <see cref="T:System.Activities.ActivityAction`8" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`8.Argument8">
      <summary>Gets or sets the eighth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`8" />.</summary>
      <returns>The eighth argument passed to the associated <see cref="T:System.Activities.ActivityAction`8" />.</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeAction`9">
      <summary>Invokes an activity’s <see cref="T:System.Activities.ActivityAction`9" /> handler.</summary>
      <typeparam name="T1">The data type of the first <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`9" />.</typeparam>
      <typeparam name="T2">The data type of the second <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`9" />.</typeparam>
      <typeparam name="T3">The data type of the third <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`9" />.</typeparam>
      <typeparam name="T4">The data type of the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`9" />.</typeparam>
      <typeparam name="T5">The data type of the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`9" />.</typeparam>
      <typeparam name="T6">The data type of the sixth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`9" />.</typeparam>
      <typeparam name="T7">The data type of the seventh <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`9" />.</typeparam>
      <typeparam name="T8">The data type of the eighth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`9" />.</typeparam>
      <typeparam name="T9">The data type of the ninth <see cref="T:System.Activities.InArgument`1" /> passed to the <see cref="T:System.Activities.ActivityAction`9" />.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.InvokeAction`9.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.InvokeAction`9" /> class. </summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`9.Action">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityAction`9" /> invoked by this <see cref="T:System.Activities.Statements.InvokeAction`9" />.</summary>
      <returns>The activity action invoked by this <see cref="T:System.Activities.Statements.InvokeAction`9" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`9.Argument1">
      <summary>Gets or sets the first <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`9" />.</summary>
      <returns>The first argument passed to the associated <see cref="T:System.Activities.ActivityAction`9" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`9.Argument2">
      <summary>Gets or sets the second <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`9" />.</summary>
      <returns>The second argument passed to the associated <see cref="T:System.Activities.ActivityAction`9" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`9.Argument3">
      <summary>Gets or sets the third <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`9" />.</summary>
      <returns>The third argument passed to the associated <see cref="T:System.Activities.ActivityAction`9" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`9.Argument4">
      <summary>Gets or sets the fourth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`9" />.</summary>
      <returns>The fourth argument passed to the associated <see cref="T:System.Activities.ActivityAction`9" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`9.Argument5">
      <summary>Gets or sets the fifth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`9" />.</summary>
      <returns>The fifth argument passed to the associated <see cref="T:System.Activities.ActivityAction`9" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`9.Argument6">
      <summary>Gets or sets the sixth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`9" />.</summary>
      <returns>The sixth argument passed to the associated <see cref="T:System.Activities.ActivityAction`9" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`9.Argument7">
      <summary>Gets or sets the seventh <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`9" />.</summary>
      <returns>The seventh argument passed to the associated <see cref="T:System.Activities.ActivityAction`9" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`9.Argument8">
      <summary>Gets or sets the eighth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`9" />.</summary>
      <returns>The eighth argument passed to the associated <see cref="T:System.Activities.ActivityAction`9" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`9.Argument9">
      <summary>Gets or sets the ninth <see cref="T:System.Activities.InArgument`1" /> passed to the associated <see cref="T:System.Activities.ActivityAction`9" />.</summary>
      <returns>The ninth argument passed to the associated <see cref="T:System.Activities.ActivityAction`9" />.</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeDelegate">
      <summary>Invokes the specified <see cref="T:System.Activities.ActivityDelegate" />.</summary>
    </member>
    <member name="M:System.Activities.Statements.InvokeDelegate.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.InvokeDelegate" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeDelegate.Default">
      <summary>Gets or sets the default activity when invoke is not required.</summary>
      <returns>The default activity.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeDelegate.Delegate">
      <summary>Gets the <see cref="T:System.Activities.ActivityDelegate" /> to invoke.</summary>
      <returns>The delegate.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeDelegate.DelegateArguments">
      <summary>The arguments to be passed to the <see cref="P:System.Activities.Statements.InvokeDelegate.ActivityDelegate" />.</summary>
      <returns>The arguments to be passed to the delegate.</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeMethod">
      <summary>Calls a public method of a specified object or type.</summary>
    </member>
    <member name="M:System.Activities.Statements.InvokeMethod.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.InvokeMethod" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeMethod.GenericTypeArguments">
      <summary>The generic type arguments of the contained method.</summary>
      <returns>The arguments.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeMethod.MethodName">
      <summary>The name of the method to be invoked when the activity executes.</summary>
      <returns>The method name.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeMethod.Parameters">
      <summary>The parameter collection of the method to be invoked.</summary>
      <returns>The parameter collection.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeMethod.Result">
      <summary>The return value of the method operation.</summary>
      <returns>The operation’s return value.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeMethod.RunAsynchronously">
      <summary> Gets or sets a value that indicates whether the activity’s method is invoked asynchronously.</summary>
      <returns>true if the method executes asynchronously.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeMethod.TargetObject">
      <summary>The object that contains the method to execute.</summary>
      <returns>The object.</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeMethod.TargetType">
      <summary>The type of the <see cref="P:System.Activities.Statements.InvokeMethod.TargetObject" />.</summary>
      <returns>The target object type.</returns>
    </member>
    <member name="T:System.Activities.Statements.NoPersistScope">
      <summary>Represents the NoPersistScope activity.</summary>
    </member>
    <member name="M:System.Activities.Statements.NoPersistScope.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.NoPersistScope" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.NoPersistScope.Body">
      <summary>Gets or sets the body of NoPersistScope activity.</summary>
      <returns>The body of NoPersistScope activity.</returns>
    </member>
    <member name="T:System.Activities.Statements.Parallel">
      <summary>An activity that executes all child activities simultaneously and asynchronously.</summary>
    </member>
    <member name="M:System.Activities.Statements.Parallel.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.Parallel" /> activity.</summary>
    </member>
    <member name="P:System.Activities.Statements.Parallel.Branches">
      <summary>The child elements to be executed in parallel.</summary>
      <returns>The elements.</returns>
    </member>
    <member name="P:System.Activities.Statements.Parallel.CompletionCondition">
      <summary>Evaluates after any branch completes. </summary>
      <returns>The completion expression.</returns>
    </member>
    <member name="P:System.Activities.Statements.Parallel.Variables">
      <summary>The collection of contained variables.</summary>
      <returns>The contained variables.</returns>
    </member>
    <member name="T:System.Activities.Statements.ParallelForEach`1">
      <summary>Enumerates the elements of a collection and executes an embedded statement for each element of the collection in parallel.</summary>
      <typeparam name="T">The type of the values provided in the <see cref="P:System.Activities.Statements.ParallelForEach`1.Values" /> collection.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.ParallelForEach`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.ParallelForEach`1" /> class. </summary>
    </member>
    <member name="P:System.Activities.Statements.ParallelForEach`1.Body">
      <summary>The <see cref="T:System.Activities.ActivityAction" /> that is executed once for every value contained in the <see cref="P:System.Activities.Statements.ParallelForEach`1.Values" /> collection.</summary>
      <returns>The contained activity action.</returns>
    </member>
    <member name="P:System.Activities.Statements.ParallelForEach`1.CompletionCondition">
      <summary>Evaluated after each iteration completes. </summary>
      <returns>The completion expression.</returns>
    </member>
    <member name="P:System.Activities.Statements.ParallelForEach`1.Values">
      <summary>The collection of values used as parameters for each iteration of the activity contained in the <see cref="P:System.Activities.Statements.ParallelForEach`1.Body" />.</summary>
      <returns>The collection of values.</returns>
    </member>
    <member name="T:System.Activities.Statements.Persist">
      <summary>Requests that a workflow instance persist.</summary>
    </member>
    <member name="M:System.Activities.Statements.Persist.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.Persist" /> class.</summary>
    </member>
    <member name="T:System.Activities.Statements.Pick">
      <summary>Provides event-based control flow modeling. </summary>
    </member>
    <member name="M:System.Activities.Statements.Pick.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.Pick" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.Pick.Branches">
      <summary>The collection of <see cref="T:System.Activities.Statements.PickBranch" /> objects that the <see cref="T:System.Activities.Statements.Pick" /> activity potentially executes one of, based on incoming events.</summary>
      <returns>The branch collection.</returns>
    </member>
    <member name="T:System.Activities.Statements.PickBranch">
      <summary>A potential path of execution within a <see cref="T:System.Activities.Statements.Pick" /> activity.</summary>
    </member>
    <member name="M:System.Activities.Statements.PickBranch.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.PickBranch" /> activity.</summary>
    </member>
    <member name="P:System.Activities.Statements.PickBranch.Action">
      <summary>The <see cref="T:System.Activities.Activity" /> to execute if this branch is triggered for execution.</summary>
      <returns>The activity to execute.</returns>
    </member>
    <member name="P:System.Activities.Statements.PickBranch.DisplayName">
      <summary>The name of this branch to be displayed in the activity designer.</summary>
      <returns>The branch name.</returns>
    </member>
    <member name="P:System.Activities.Statements.PickBranch.Trigger">
      <summary>The activity whose completion activates this pick branch.</summary>
      <returns>The triggering activity.</returns>
    </member>
    <member name="P:System.Activities.Statements.PickBranch.Variables">
      <summary>The collection of user-defined variables associated with this activity.</summary>
      <returns>The variable collection.</returns>
    </member>
    <member name="T:System.Activities.Statements.RemoveFromCollection`1">
      <summary>Removes an item from a specified collection.</summary>
      <typeparam name="T">The type of elements in the specified collection.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.RemoveFromCollection`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.RemoveFromCollection`1" /> class. </summary>
    </member>
    <member name="P:System.Activities.Statements.RemoveFromCollection`1.Collection">
      <summary>The collection from which to remove the <see cref="P:System.Activities.Statements.RemoveFromCollection`1.Item" />.</summary>
      <returns>The collection.</returns>
    </member>
    <member name="P:System.Activities.Statements.RemoveFromCollection`1.Item">
      <summary>The item to remove from the specified <see cref="P:System.Activities.Statements.RemoveFromCollection`1.Collection" />.</summary>
      <returns>The item to remove.</returns>
    </member>
    <member name="T:System.Activities.Statements.Rethrow">
      <summary>Throws a previously thrown exception from within a <see cref="T:System.Activities.Statements.Catch" /> activity.</summary>
    </member>
    <member name="M:System.Activities.Statements.Rethrow.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.Rethrow" /> activity.</summary>
    </member>
    <member name="T:System.Activities.Statements.Sequence">
      <summary>Executes a set of child activities according to a single, defined ordering.</summary>
    </member>
    <member name="M:System.Activities.Statements.Sequence.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.Sequence" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.Sequence.Activities">
      <summary>The collection of contained activities to be executed in sequence.</summary>
      <returns>The activities.</returns>
    </member>
    <member name="P:System.Activities.Statements.Sequence.Variables">
      <summary>The collection of contained variables.</summary>
      <returns>The collection of variables.</returns>
    </member>
    <member name="T:System.Activities.Statements.State">
      <summary>Models the state which a state machine can be in.</summary>
    </member>
    <member name="M:System.Activities.Statements.State.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.State" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.State.DisplayName">
      <summary>Gets or sets an optional friendly name that is used for debugging, validation, exception handling, and tracking.</summary>
      <returns>Returns <see cref="T:System.String" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.State.Entry">
      <summary>Gets or sets the activity performed when entering the state.</summary>
      <returns>Returns <see cref="T:System.Activities.Activity" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.State.Exit">
      <summary>Gets or sets the activity performed when exiting the state.</summary>
      <returns>Returns <see cref="T:System.Activities.Activity" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.State.IsFinal">
      <summary>Gets or sets whether the state is a final state.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.State.Transitions">
      <summary>Gets the collection of transitions that come from this state.</summary>
      <returns>Returns <see cref="T:System.Collections.ObjectModel.Collection`1" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.State.Variables">
      <summary>Gets the collection of variable objects associated with the state.</summary>
      <returns>Returns <see cref="T:System.Collections.ObjectModel.Collection`1" />.</returns>
    </member>
    <member name="T:System.Activities.Statements.StateMachine">
      <summary>Models workflows using the familiar state machine paradigm.</summary>
    </member>
    <member name="M:System.Activities.Statements.StateMachine.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.StateMachine" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.StateMachine.InitialState">
      <summary>Gets or sets the start state of the <see cref="T:System.Activities.Statements.StateMachine" />. </summary>
      <returns>Returns <see cref="T:System.Activities.Statements.State" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.StateMachine.States">
      <summary>Gets the collection of all root level states in the <see cref="T:System.Activities.Statements.StateMachine" />.</summary>
      <returns>Returns <see cref="T:System.Collections.ObjectModel.Collection`1" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.StateMachine.Variables">
      <summary>Gets the collection of variables which can be used within the <see cref="T:System.Activities.Statements.StateMachine" /> scope.</summary>
      <returns>Returns <see cref="T:System.Collections.ObjectModel.Collection`1" />.</returns>
    </member>
    <member name="T:System.Activities.Statements.Switch`1">
      <summary>Selects one choice from a number of activities to execute, based on the value of a given expression of the type specified in this object’s type specifier.</summary>
      <typeparam name="T">The type of the values provided in the <see cref="P:System.Activities.Statements.Switch`1.Cases" /> collection.</typeparam>
    </member>
    <member name="M:System.Activities.Statements.Switch`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.Switch`1" /> class. </summary>
    </member>
    <member name="M:System.Activities.Statements.Switch`1.#ctor(System.Activities.Activity{`0})">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.Switch`1" /> class with the specified expression.</summary>
      <param name="expression">The expression to evaluate and compare against the values in the <see cref="P:System.Activities.Statements.Switch`1.Cases" /> dictionary.</param>
    </member>
    <member name="M:System.Activities.Statements.Switch`1.#ctor(System.Activities.InArgument{`0})">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.Switch`1" /> class with the specified expression.</summary>
      <param name="expression">The expression to evaluate and compare against the values in the <see cref="P:System.Activities.Statements.Switch`1.Cases" /> dictionary.</param>
    </member>
    <member name="M:System.Activities.Statements.Switch`1.#ctor(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,`0}})">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.Switch`1" /> class with the specified expression.</summary>
      <param name="expression">The expression to evaluate and compare against the values in the <see cref="P:System.Activities.Statements.Switch`1.Cases" /> dictionary.</param>
    </member>
    <member name="P:System.Activities.Statements.Switch`1.Cases">
      <summary>Represents the dictionary of potential execution paths. Each entry contains a key and an activity that is executed when the result of the expression matches the key.</summary>
      <returns>The execution paths.</returns>
    </member>
    <member name="P:System.Activities.Statements.Switch`1.Default">
      <summary>Represents the activity that is executed if no keys of entries in the <see cref="P:System.Activities.Statements.Switch.Cases" /> collection match the <see cref="P:System.Activities.Statements.Switch.Expression" /> property.</summary>
      <returns>The default activity to execute.</returns>
    </member>
    <member name="P:System.Activities.Statements.Switch`1.Expression">
      <summary>Gets the object to compare to the keys in the <see cref="P:System.Activities.Statements.Switch.Cases" /> collection.</summary>
      <returns>The object to compare to the keys in the <see cref="P:System.Activities.Statements.Switch.Cases" /> collection.</returns>
    </member>
    <member name="T:System.Activities.Statements.TerminateWorkflow">
      <summary>Terminates the running workflow instance, raises the <see cref="P:System.Activities.WorkflowApplication.Completed" /> event in the host, and reports error information. Once the workflow is terminated, it cannot be resumed.</summary>
    </member>
    <member name="M:System.Activities.Statements.TerminateWorkflow.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.TerminateWorkflow" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.TerminateWorkflow.Exception">
      <summary>Gets or sets the exception that provoked the instance termination.</summary>
      <returns>The exception.</returns>
    </member>
    <member name="P:System.Activities.Statements.TerminateWorkflow.Reason">
      <summary>A string input argument with the reason for the workflow instance termination. </summary>
      <returns>The reason for workflow termination.</returns>
    </member>
    <member name="T:System.Activities.Statements.Throw">
      <summary>Throws an exception.</summary>
    </member>
    <member name="M:System.Activities.Statements.Throw.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.Throw" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.Throw.Exception">
      <summary>The exception thrown by the activity.</summary>
      <returns>The exception.</returns>
    </member>
    <member name="T:System.Activities.Statements.TimerExtension">
      <summary>Abstract base class for timer extensions.</summary>
    </member>
    <member name="M:System.Activities.Statements.TimerExtension.#ctor">
      <summary>When implemented in a derived class, creates a new instance of the derived class.</summary>
    </member>
    <member name="M:System.Activities.Statements.TimerExtension.CancelTimer(System.Activities.Bookmark)">
      <summary>Removes a timer.</summary>
      <param name="bookmark">The bookmark associated with the timer.</param>
    </member>
    <member name="M:System.Activities.Statements.TimerExtension.OnCancelTimer(System.Activities.Bookmark)">
      <summary>Called by the <see cref="M:System.Activities.Statements.TimerExtension.CancelTimer(System.Activities.Bookmark)" /> method.</summary>
      <param name="bookmark">The bookmark associated with the timer.</param>
    </member>
    <member name="M:System.Activities.Statements.TimerExtension.OnRegisterTimer(System.TimeSpan,System.Activities.Bookmark)">
      <summary>Called by the <see cref="M:System.Activities.Statements.TimerExtension.RegisterTimer(System.TimeSpan,System.Activities.Bookmark)" /> method.</summary>
      <param name="timeout">The duration of the timer.</param>
      <param name="bookmark">The bookmark associated with the timer, to be resumed when the timer expires.</param>
    </member>
    <member name="M:System.Activities.Statements.TimerExtension.RegisterTimer(System.TimeSpan,System.Activities.Bookmark)">
      <summary>Creates a timer with the specified duration and associated.</summary>
      <param name="timeout">The duration of the timer.</param>
      <param name="bookmark">The bookmark associated with the timer, to be resumed when the timer expires.</param>
    </member>
    <member name="T:System.Activities.Statements.TransactionScope">
      <summary>An activity that demarcates a transaction boundary. </summary>
    </member>
    <member name="M:System.Activities.Statements.TransactionScope.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.TransactionScope" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.TransactionScope.AbortInstanceOnTransactionFailure">
      <summary>Gets or sets the value that indicates whether the workflow should be aborted if the transaction aborts.</summary>
      <returns>true if the workflow should be aborted.</returns>
    </member>
    <member name="P:System.Activities.Statements.TransactionScope.Body">
      <summary>Gets or sets the activity that is scheduled when the <see cref="T:System.Activities.Statements.TransactionScope" /> executes.</summary>
      <returns>The activity that is scheduled when the <see cref="T:System.Activities.Statements.TransactionScope" /> executes.</returns>
    </member>
    <member name="P:System.Activities.Statements.TransactionScope.IsolationLevel">
      <summary>Gets or sets the <see cref="T:System.Transactions.IsolationLevel" /> for this <see cref="T:System.Activities.Statements.TransactionScope" />.</summary>
      <returns>The <see cref="T:System.Transactions.IsolationLevel" /> for this <see cref="T:System.Activities.Statements.TransactionScope" />.</returns>
    </member>
    <member name="M:System.Activities.Statements.TransactionScope.ShouldSerializeIsolationLevel">
      <summary>Indicates whether the <see cref="P:System.Activities.Statements.TransactionScope.IsolationLevel" /> for this <see cref="T:System.Activities.Statements.TransactionScope" /> should be serialized.</summary>
      <returns>true if the <see cref="P:System.Activities.Statements.TransactionScope.IsolationLevel" /> property value should be serialized; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.Statements.TransactionScope.ShouldSerializeTimeout">
      <summary>Indicates whether the <see cref="P:System.Activities.Statements.TransactionScope.Timeout" /> for this <see cref="T:System.Activities.Statements.TransactionScope" /> should be serialized.</summary>
      <returns>true if the <see cref="P:System.Activities.Statements.TransactionScope.Timeout" /> property value should be serialized; otherwise, false.
</returns>
    </member>
    <member name="P:System.Activities.Statements.TransactionScope.Timeout">
      <summary>Gets or sets the <see cref="T:System.TimeSpan" /> that indicates the timeout period for the transaction used for this <see cref="T:System.Activities.Statements.TransactionScope" />.</summary>
      <returns>The <see cref="T:System.TimeSpan" /> that indicates the timeout period for the transaction used for this <see cref="T:System.Activities.Statements.TransactionScope" />.</returns>
    </member>
    <member name="T:System.Activities.Statements.Transition">
      <summary>Models the list of possible state changes.</summary>
    </member>
    <member name="M:System.Activities.Statements.Transition.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.Transition" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.Transition.Action">
      <summary>Gets or sets the activity performed during a transition.</summary>
      <returns>Returns <see cref="T:System.Activities.Activity" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.Transition.Condition">
      <summary>Specifies the condition the transition is testing when the trigger activity is activated.</summary>
      <returns>A Boolean value expression that represents the condition.</returns>
    </member>
    <member name="P:System.Activities.Statements.Transition.DisplayName">
      <summary>Gets or sets an optional friendly name that is used for debugging, validation, exception handling, and tracking.</summary>
      <returns>Returns <see cref="T:System.String" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.Transition.To">
      <summary>Gets or sets the next state in the state machine to execute after the transition is completed.</summary>
      <returns>Returns <see cref="T:System.Activities.Statements.State" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.Transition.Trigger">
      <summary>Gets or sets the activity whose completion activates this transition.</summary>
      <returns>Returns <see cref="T:System.Activities.Activity" />.</returns>
    </member>
    <member name="T:System.Activities.Statements.TryCatch">
      <summary>Contains activities to be executed by the workflow runtime in an exception handling block.</summary>
    </member>
    <member name="M:System.Activities.Statements.TryCatch.#ctor">
      <summary>Creates a new instance of the <see cref="M:System.Activities.Statements.TryCatch.#ctor" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.TryCatch.Catches">
      <summary>The collection of Catch elements to be checked when the <see cref="P:System.Activities.Statements.TryCatch.Try" /> activity throws an exception.</summary>
      <returns>The catch collection.</returns>
    </member>
    <member name="P:System.Activities.Statements.TryCatch.Finally">
      <summary>The activity to be executed when the <see cref="P:System.Activities.Statements.TryCatch.Try" /> and any necessary activities in the <see cref="P:System.Activities.Statements.TryCatch.Catches" /> collection complete execution.</summary>
      <returns>The activity that represents the <see cref="P:System.Activities.Statements.TryCatch.Finally" /> logic.</returns>
    </member>
    <member name="P:System.Activities.Statements.TryCatch.Try">
      <summary>The activity first executed when the <see cref="T:System.Activities.Statements.TryCatch" /> executes.</summary>
      <returns>The activity.</returns>
    </member>
    <member name="P:System.Activities.Statements.TryCatch.Variables">
      <summary>The collection of contained variables.</summary>
      <returns>The collection of variables.</returns>
    </member>
    <member name="T:System.Activities.Statements.While">
      <summary>Executes a contained activity while a condition evaluates to true.</summary>
    </member>
    <member name="M:System.Activities.Statements.While.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.While" /> activity.</summary>
    </member>
    <member name="M:System.Activities.Statements.While.#ctor(System.Activities.Activity{System.Boolean})">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.While" /> activity.</summary>
      <param name="condition">The condition under which the activity iterates.</param>
    </member>
    <member name="M:System.Activities.Statements.While.#ctor(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,System.Boolean}})">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.While" /> activity.</summary>
      <param name="condition">The condition under which the activity iterates.</param>
    </member>
    <member name="P:System.Activities.Statements.While.Body">
      <summary>The <see cref="T:System.Activities.Activity" /> to execute in the While loop.</summary>
      <returns>The activit to execute.</returns>
    </member>
    <member name="P:System.Activities.Statements.While.Condition">
      <summary>The <see cref="T:System.Activities.Activity`1" /> to be evaluated before each iteration of the While loop.</summary>
      <returns>The condition.</returns>
    </member>
    <member name="P:System.Activities.Statements.While.Variables">
      <summary>The collection of <see cref="T:System.Activities.Variable" /> objects associated with the <see cref="T:System.Activities.Statements.While" /> activity.</summary>
      <returns>The collection of variables.</returns>
    </member>
    <member name="T:System.Activities.Statements.WorkflowTerminatedException">
      <summary>The exception that is thrown when an operation is invoked on a terminated <see cref="T:System.Activities.WorkflowApplication" />.</summary>
    </member>
    <member name="M:System.Activities.Statements.WorkflowTerminatedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.WorkflowTerminatedException" /> class using default values.</summary>
    </member>
    <member name="M:System.Activities.Statements.WorkflowTerminatedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.WorkflowTerminatedException" /> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination. </param>
    </member>
    <member name="M:System.Activities.Statements.WorkflowTerminatedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.WorkflowTerminatedException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.Activities.Statements.WorkflowTerminatedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.WorkflowTerminatedException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="T:System.Activities.Statements.WriteLine">
      <summary>Writes a specified string to a specified <see cref="T:System.IO.TextWriter" /> object.</summary>
    </member>
    <member name="M:System.Activities.Statements.WriteLine.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.WriteLine" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.WriteLine.Text">
      <summary>The text to write.</summary>
      <returns>The text.</returns>
    </member>
    <member name="P:System.Activities.Statements.WriteLine.TextWriter">
      <summary>The <see cref="T:System.IO.TextWriter" /> to write the <see cref="P:System.Activities.Statements.WriteLine.Text" /> to.</summary>
      <returns>The text writer.</returns>
    </member>
    <member name="T:System.Activities.Statements.Tracking.StateMachineStateQuery">
      <summary>When added to the queries, subscribes to state machine state execution records.</summary>
    </member>
    <member name="M:System.Activities.Statements.Tracking.StateMachineStateQuery.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.Tracking.StateMachineStateQuery" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.Tracking.StateMachineStateQuery.Name">
      <summary>Gets the name that distinguishes this tracking record.</summary>
      <returns>Returns <see cref="T:System.String" />.</returns>
    </member>
    <member name="T:System.Activities.Statements.Tracking.StateMachineStateRecord">
      <summary>Represents a tracking record that is created when an state machine instance transitions to a state.</summary>
    </member>
    <member name="M:System.Activities.Statements.Tracking.StateMachineStateRecord.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Statements.Tracking.StateMachineStateRecord" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.Tracking.StateMachineStateRecord.StateMachineName">
      <summary>Gets the display name of the state machine activity that contains the state.</summary>
      <returns>Returns <see cref="T:System.String" />.</returns>
    </member>
    <member name="P:System.Activities.Statements.Tracking.StateMachineStateRecord.StateName">
      <summary>Gets the display name of executing state when the record is generated.</summary>
      <returns>Returns <see cref="T:System.String" />.</returns>
    </member>
    <member name="T:System.Activities.Tracking.ActivityInfo">
      <summary>Contains information on a tracked <see cref="T:System.Activities.Activity" />.</summary>
    </member>
    <member name="M:System.Activities.Tracking.ActivityInfo.#ctor(System.String,System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Tracking.ActivityInfo" /> class using the specified name, ID, instance ID and type name.</summary>
      <param name="name">The name of the activity.</param>
      <param name="id">The activity ID.</param>
      <param name="instanceId">The instance ID of the activity.</param>
      <param name="typeName">The type name of the activity.</param>
    </member>
    <member name="P:System.Activities.Tracking.ActivityInfo.Id">
      <summary>Gets the ID for the activity.</summary>
      <returns>The activity ID.</returns>
    </member>
    <member name="P:System.Activities.Tracking.ActivityInfo.InstanceId">
      <summary>Gets the run-time ID of the activity instance.</summary>
      <returns>The instance ID of the activity.</returns>
    </member>
    <member name="P:System.Activities.Tracking.ActivityInfo.Name">
      <summary>Gets the name associated with the activity</summary>
      <returns>The activity name.</returns>
    </member>
    <member name="M:System.Activities.Tracking.ActivityInfo.ToString">
      <summary>Gets a string representation of the <see cref="T:System.Activities.Tracking.ActivityInfo" /> object</summary>
      <returns>The activity name, ID, instance ID and type name.</returns>
    </member>
    <member name="P:System.Activities.Tracking.ActivityInfo.TypeName">
      <summary>Gets the type name of the activity.</summary>
      <returns>The type name of the activity.</returns>
    </member>
    <member name="T:System.Activities.Tracking.ActivityScheduledQuery">
      <summary>When added to the <see cref="P:System.Activities.Tracking.TrackingProfile.Queries" /> collection, subscribes to activity scheduled records when the tracking profile is created to subscribe to tracking records.</summary>
    </member>
    <member name="M:System.Activities.Tracking.ActivityScheduledQuery.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.ActivityScheduledQuery" /> class.</summary>
    </member>
    <member name="P:System.Activities.Tracking.ActivityScheduledQuery.ActivityName">
      <summary>Gets the name of the activity that the tracking query subscribes from.</summary>
      <returns>The name of the activity that schedules this activity.</returns>
    </member>
    <member name="P:System.Activities.Tracking.ActivityScheduledQuery.ChildActivityName">
      <summary>Gets the name of the scheduled activity that the tracking query subscribes to.</summary>
      <returns>The name of the scheduled activity.</returns>
    </member>
    <member name="T:System.Activities.Tracking.ActivityScheduledRecord">
      <summary>Represents a tracking record of an activity being scheduled for execution. </summary>
    </member>
    <member name="M:System.Activities.Tracking.ActivityScheduledRecord.#ctor(System.Guid,System.Int64,System.Activities.Tracking.ActivityInfo,System.Activities.Tracking.ActivityInfo)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Tracking.ActivityScheduledRecord" /> class using the specified instance ID, record number, activity and child activity.</summary>
      <param name="instanceId">The instance ID of the scheduled activity.</param>
      <param name="recordNumber">A sequence that indicates the order in which tracking records are generated.</param>
      <param name="activity">The activity issuing the scheduled execution request.</param>
      <param name="child">The scheduled activity.</param>
    </member>
    <member name="P:System.Activities.Tracking.ActivityScheduledRecord.Activity">
      <summary>Gets the <see cref="T:System.Activities.Tracking.ActivityInfo" /> for the activity.</summary>
      <returns>The activity information.</returns>
    </member>
    <member name="P:System.Activities.Tracking.ActivityScheduledRecord.Child">
      <summary>Gets the <see cref="T:System.Activities.Tracking.ActivityInfo" /> for the child activity</summary>
      <returns>The child activity information.</returns>
    </member>
    <member name="M:System.Activities.Tracking.ActivityScheduledRecord.ToString">
      <summary>Returns a string that contains all of the details of the <see cref="T:System.Activities.Tracking.ActivityScheduledRecord" />.</summary>
      <returns>The tracking record details.</returns>
    </member>
    <member name="T:System.Activities.Tracking.ActivityStateQuery">
      <summary>When added to the <see cref="P:System.Activities.Tracking.TrackingProfile.Queries" />, subscribes to activity state records.</summary>
    </member>
    <member name="M:System.Activities.Tracking.ActivityStateQuery.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.ActivityStateQuery" /> class.</summary>
    </member>
    <member name="P:System.Activities.Tracking.ActivityStateQuery.ActivityName">
      <summary>Gets the name of the activity that the tracking record is subscribed from.</summary>
      <returns>The activity name.</returns>
    </member>
    <member name="P:System.Activities.Tracking.ActivityStateQuery.Arguments">
      <summary>Gets the collection of arguments associated with this activity query.</summary>
      <returns>A collection of arguments.</returns>
    </member>
    <member name="P:System.Activities.Tracking.ActivityStateQuery.States">
      <summary>Gets the states of the subscribed activity for which a tracking record should be emitted.</summary>
      <returns>A collection of states.</returns>
    </member>
    <member name="P:System.Activities.Tracking.ActivityStateQuery.Variables">
      <summary>Gets the collection of variables associated with this activity query.</summary>
      <returns>A collection of variables.</returns>
    </member>
    <member name="T:System.Activities.Tracking.ActivityStateRecord">
      <summary>Represents a tracking record that is created when an activity changes state.</summary>
    </member>
    <member name="M:System.Activities.Tracking.ActivityStateRecord.#ctor(System.Guid,System.Int64,System.Activities.Tracking.ActivityInfo,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Tracking.ActivityStateRecord" /> class using the specified instance ID, record number, activity and activity state.</summary>
      <param name="instanceId">The instance ID of the activity.</param>
      <param name="recordNumber">A sequence that defines the order in which tracking records are generated.</param>
      <param name="activity">The activity.</param>
      <param name="state">The activity state.</param>
    </member>
    <member name="P:System.Activities.Tracking.ActivityStateRecord.Activity">
      <summary>Gets an <see cref="T:System.Activities.Tracking.ActivityInfo" /> that contains information on the activity when the record is generated.</summary>
      <returns>The activity information.</returns>
    </member>
    <member name="P:System.Activities.Tracking.ActivityStateRecord.Arguments">
      <summary>Gets the current values of the tracked arguments associated with the activity when the record is generated.</summary>
      <returns>A <see cref="T:System.Collections.Generic.IDictionary`2" /> containing the arguments.</returns>
    </member>
    <member name="P:System.Activities.Tracking.ActivityStateRecord.State">
      <summary>Gets the current state of the activity when the record is generated.</summary>
      <returns>The activity state.</returns>
    </member>
    <member name="M:System.Activities.Tracking.ActivityStateRecord.ToString">
      <summary>Returns a string that contains all the details of the tracking record.</summary>
      <returns>The tracking data.</returns>
    </member>
    <member name="P:System.Activities.Tracking.ActivityStateRecord.Variables">
      <summary>Gets the current values of the tracked variables associated with the activity when the record is generated.</summary>
      <returns>The current values.</returns>
    </member>
    <member name="T:System.Activities.Tracking.ActivityStates">
      <summary>Specifies the state of an activity.</summary>
    </member>
    <member name="F:System.Activities.Tracking.ActivityStates.Canceled">
      <summary>The activity state is canceled.</summary>
    </member>
    <member name="F:System.Activities.Tracking.ActivityStates.Closed">
      <summary>The activity state is closed.</summary>
    </member>
    <member name="F:System.Activities.Tracking.ActivityStates.Executing">
      <summary>The activity state is executing.</summary>
    </member>
    <member name="F:System.Activities.Tracking.ActivityStates.Faulted">
      <summary>The activity state is faulted.</summary>
    </member>
    <member name="T:System.Activities.Tracking.BookmarkResumptionQuery">
      <summary>When added to the <see cref="P:System.Activities.Tracking.TrackingProfile.Queries" /> collection, subscribes to bookmark resumption records when the tracking profile is queried for <see cref="T:System.Activities.Tracking.TrackingRecord" /> objects.</summary>
    </member>
    <member name="M:System.Activities.Tracking.BookmarkResumptionQuery.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.BookmarkResumptionQuery" /> class.</summary>
    </member>
    <member name="P:System.Activities.Tracking.BookmarkResumptionQuery.Name">
      <summary>Gets or sets the name of the bookmark record to subscribe to.</summary>
      <returns>The bookmark name.</returns>
    </member>
    <member name="T:System.Activities.Tracking.BookmarkResumptionRecord">
      <summary>Contains the data sent to a tracking participant by the run-time tracking infrastructure when a <see cref="T:System.Activities.Bookmark" /> is resumed.</summary>
    </member>
    <member name="M:System.Activities.Tracking.BookmarkResumptionRecord.#ctor(System.Guid,System.Int64,System.Guid,System.String,System.Activities.Tracking.ActivityInfo)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Tracking.BookmarkResumptionRecord" /> class using the specified instance ID, record number, bookmark scope, bookmark name and owner.</summary>
      <param name="instanceId">The instance ID of the associated activity.</param>
      <param name="recordNumber">A sequence that defines the order in which tracking records are generated.</param>
      <param name="bookmarkScope">The ID of the associated activity’s <see cref="T:System.Activities.BookmarkScope" />.</param>
      <param name="bookmarkName">The bookmark name.</param>
      <param name="owner">The activity that was waiting for the bookmark to be resumed.</param>
    </member>
    <member name="P:System.Activities.Tracking.BookmarkResumptionRecord.BookmarkName">
      <summary>Gets the name of the <see cref="T:System.Activities.Bookmark" /> that is resumed by the workflow execution engine.</summary>
      <returns>The name of the <see cref="T:System.Activities.Bookmark" /> that is referenced by this <see cref="T:System.Activities.Tracking.BookmarkResumptionRecord" />.</returns>
    </member>
    <member name="P:System.Activities.Tracking.BookmarkResumptionRecord.BookmarkScope">
      <summary>Gets the scope ID of the <see cref="T:System.Activities.BookmarkScope" /> that is associated with this bookmark.</summary>
      <returns>The scope ID.</returns>
    </member>
    <member name="P:System.Activities.Tracking.BookmarkResumptionRecord.Owner">
      <summary>Gets information on the <see cref="T:System.Activities.Tracking.ActivityInfo" /> object that was waiting for the bookmark to be resumed.</summary>
      <returns>The activity information.</returns>
    </member>
    <member name="P:System.Activities.Tracking.BookmarkResumptionRecord.Payload">
      <summary>Gets the value that was supplied when the <see cref="T:System.Activities.Bookmark" /> was resumed.</summary>
      <returns>The value that was supplied when the <see cref="T:System.Activities.Bookmark" /> was resumed.</returns>
    </member>
    <member name="M:System.Activities.Tracking.BookmarkResumptionRecord.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Activities.Tracking.BookmarkResumptionRecord" /> object.</summary>
      <returns>The current object.</returns>
    </member>
    <member name="T:System.Activities.Tracking.CancelRequestedQuery">
      <summary>When added to the <see cref="P:System.Activities.Tracking.TrackingProfile.Queries" /> collection, subscribes to cancellation request records when the tracking profile is queried for tracking records.</summary>
    </member>
    <member name="M:System.Activities.Tracking.CancelRequestedQuery.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.CancelRequestedQuery" /> object.</summary>
    </member>
    <member name="P:System.Activities.Tracking.CancelRequestedQuery.ActivityName">
      <summary>The name of the activity that is requesting the cancellation.</summary>
      <returns>The activity name.</returns>
    </member>
    <member name="P:System.Activities.Tracking.CancelRequestedQuery.ChildActivityName">
      <summary>The name of the child activity for which cancellation was requested.</summary>
      <returns>The child activity name.</returns>
    </member>
    <member name="T:System.Activities.Tracking.CancelRequestedRecord">
      <summary>Represents the data sent by the workflow runtime to tracking participants when <see cref="M:System.Activities.ActivityExecutionContext.CancelChild" /> or <see cref="M:System.Activities.ActivityExecutionContext.CancelChildren" /> is called.</summary>
    </member>
    <member name="M:System.Activities.Tracking.CancelRequestedRecord.#ctor(System.Guid,System.Int64,System.Activities.Tracking.ActivityInfo,System.Activities.Tracking.ActivityInfo)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.CancelRequestedRecord" /> class using the specified instance ID, record number, activity and child activity.</summary>
      <param name="instanceId">The instance ID of the activity that generated the event.</param>
      <param name="recordNumber">A sequence that defines the order of generated tracking events.</param>
      <param name="activity">The activity issuing the cancellation request.</param>
      <param name="child">The activity to be canceled.</param>
    </member>
    <member name="P:System.Activities.Tracking.CancelRequestedRecord.Activity">
      <summary>Gets the <see cref="T:System.Activities.Tracking.ActivityInfo" /> of the activity requesting the cancellation.</summary>
      <returns>The activity information.</returns>
    </member>
    <member name="P:System.Activities.Tracking.CancelRequestedRecord.Child">
      <summary>Gets the <see cref="T:System.Activities.Tracking.ActivityInfo" /> of the activity to be canceled.</summary>
      <returns>The activity information.</returns>
    </member>
    <member name="M:System.Activities.Tracking.CancelRequestedRecord.ToString">
      <summary>Returns a string that represents the current <see cref="T:System.Activities.Tracking.CancelRequestedRecord" /> object.</summary>
      <returns>The tracking data.</returns>
    </member>
    <member name="T:System.Activities.Tracking.CustomTrackingQuery">
      <summary>When added to the <see cref="P:System.Activities.Tracking.TrackingProfile.Queries" />, subscribes to custom tracking records when the tracking profile is queried for custom records.</summary>
    </member>
    <member name="M:System.Activities.Tracking.CustomTrackingQuery.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.CustomTrackingQuery" /> class.</summary>
    </member>
    <member name="P:System.Activities.Tracking.CustomTrackingQuery.ActivityName">
      <summary>Gets or sets the name of the activity that generated the tracking record.</summary>
      <returns>The name of the activity that emits the custom tracking record.</returns>
    </member>
    <member name="P:System.Activities.Tracking.CustomTrackingQuery.Name">
      <summary>Gets or sets the name of the custom tracking record that is emitted. </summary>
      <returns>The custom tracking record name.</returns>
    </member>
    <member name="T:System.Activities.Tracking.CustomTrackingRecord">
      <summary>Contains the data sent to a tracking participant by the run-time tracking infrastructure when a custom tracking record is raised.</summary>
    </member>
    <member name="M:System.Activities.Tracking.CustomTrackingRecord.#ctor(System.Activities.Tracking.CustomTrackingRecord)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.CustomTrackingRecord" /> class based on information from the specified <see cref="T:System.Activities.Tracking.CustomTrackingRecord" /> instance.</summary>
      <param name="record">The custom tracking record instance to use.</param>
    </member>
    <member name="M:System.Activities.Tracking.CustomTrackingRecord.#ctor(System.Guid,System.String,System.Diagnostics.TraceLevel)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.CustomTrackingRecord" /> class with the specified instance ID, custom tracking record name, and trace level.</summary>
      <param name="instanceId">The ID of the activity.</param>
      <param name="name">The name of the custom tracking record.</param>
      <param name="level">The trace level used by the tracking record.</param>
    </member>
    <member name="M:System.Activities.Tracking.CustomTrackingRecord.#ctor(System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.CustomTrackingRecord" /> class with the specified custom tracking record name.</summary>
      <param name="name">The name of the custom tracking record.</param>
    </member>
    <member name="M:System.Activities.Tracking.CustomTrackingRecord.#ctor(System.String,System.Diagnostics.TraceLevel)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.CustomTrackingRecord" /> class with the specified custom tracking record name and trace level.</summary>
      <param name="name">The name of the custom tracking record.</param>
      <param name="level">The trace level used by the tracking record.</param>
    </member>
    <member name="P:System.Activities.Tracking.CustomTrackingRecord.Activity">
      <summary>Returns the <see cref="T:System.Activities.Tracking.ActivityInfo" /> of the activity associated with this record.</summary>
      <returns>The activity information.</returns>
    </member>
    <member name="M:System.Activities.Tracking.CustomTrackingRecord.Clone">
      <summary>Creates a copy of the <see cref="T:System.Activities.Tracking.CustomTrackingRecord" />.</summary>
      <returns>A copy of the <see cref="T:System.Activities.Tracking.CustomTrackingRecord" /> instance.</returns>
    </member>
    <member name="P:System.Activities.Tracking.CustomTrackingRecord.Data">
      <summary>Gets the user-defined data associated with this tracking record.</summary>
      <returns>The user-defined data.</returns>
    </member>
    <member name="P:System.Activities.Tracking.CustomTrackingRecord.Name">
      <summary>Gets the name that distinguishes this tracking record.</summary>
      <returns>The name that distinguishes this tracking record.</returns>
    </member>
    <member name="M:System.Activities.Tracking.CustomTrackingRecord.ToString">
      <summary>Returns a string that contains the tracking record data.</summary>
      <returns>The tracking record data.</returns>
    </member>
    <member name="T:System.Activities.Tracking.EtwTrackingParticipant">
      <summary>A consumer of workflow tracking data that emits an Event Tracking for Windows (ETW) event to an ETW session that contains the data from the tracking record. </summary>
    </member>
    <member name="M:System.Activities.Tracking.EtwTrackingParticipant.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.EtwTrackingParticipant" /> class.</summary>
    </member>
    <member name="P:System.Activities.Tracking.EtwTrackingParticipant.ApplicationReference">
      <summary>Gets the reference value used by the ETW provider created by this tracking participant.</summary>
      <returns>The reference value.</returns>
    </member>
    <member name="P:System.Activities.Tracking.EtwTrackingParticipant.EtwProviderId">
      <summary>Gets the provider ID used by the ETW provider created by this tracking participant.</summary>
      <returns>The provider ID.</returns>
    </member>
    <member name="T:System.Activities.Tracking.FaultPropagationQuery">
      <summary>When added to the <see cref="P:System.Activities.Tracking.TrackingProfile.Queries" /> collection, subscribes to fault propagation records when the tracking profile is queried for tracking records.</summary>
    </member>
    <member name="M:System.Activities.Tracking.FaultPropagationQuery.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.FaultPropagationQuery" /> class.</summary>
    </member>
    <member name="P:System.Activities.Tracking.FaultPropagationQuery.FaultHandlerActivityName">
      <summary>Gets the name of the fault hander activity that propagated the fault.</summary>
      <returns>The activity name.</returns>
    </member>
    <member name="P:System.Activities.Tracking.FaultPropagationQuery.FaultSourceActivityName">
      <summary>Gets the name of the activity that was the source of the fault.</summary>
      <returns>The activity name</returns>
    </member>
    <member name="T:System.Activities.Tracking.FaultPropagationRecord">
      <summary>Contains the data sent to a tracking participant by the run-time tracking infrastructure when a fault is propagated from a workflow activity.</summary>
    </member>
    <member name="M:System.Activities.Tracking.FaultPropagationRecord.#ctor(System.Guid,System.Int64,System.Activities.Tracking.ActivityInfo,System.Activities.Tracking.ActivityInfo,System.Boolean,System.Exception)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.FaultPropagationRecord" /> class.</summary>
      <param name="instanceId">The instance ID of the activity that generated the event.</param>
      <param name="recordNumber">A sequence that defines the order in which tracking events are generated.</param>
      <param name="faultSource">The activity that is the source of the fault.</param>
      <param name="faultHandler">The activity that is the fault handler.</param>
      <param name="isFaultSource">true if this handler is the first handler of the fault; false if this handler is a subsequent handler of the fault.</param>
      <param name="fault">The exception details.</param>
    </member>
    <member name="P:System.Activities.Tracking.FaultPropagationRecord.Fault">
      <summary>Get the exception data contained in the fault.</summary>
      <returns>The exception data.</returns>
    </member>
    <member name="P:System.Activities.Tracking.FaultPropagationRecord.FaultHandler">
      <summary>Gets the <see cref="T:System.Activities.Tracking.ActivityInfo" /> of the fault handler.</summary>
      <returns>The activity information.</returns>
    </member>
    <member name="P:System.Activities.Tracking.FaultPropagationRecord.FaultSource">
      <summary>Gets the <see cref="T:System.Activities.Tracking.ActivityInfo" /> of the activity that generated the fault.</summary>
      <returns>The activity information.</returns>
    </member>
    <member name="P:System.Activities.Tracking.FaultPropagationRecord.IsFaultSource">
      <summary>A value that indicates whether this handler is the first handler for the fault. </summary>
      <returns>true if this is the first handler for the exception. false if this handler is a subsequent handler for the fault.</returns>
    </member>
    <member name="M:System.Activities.Tracking.FaultPropagationRecord.ToString">
      <summary>Returns a string that represents the current <see cref="T:System.Activities.Tracking.FaultPropagationRecord" /> object.</summary>
      <returns>The tracking data.</returns>
    </member>
    <member name="T:System.Activities.Tracking.ImplementationVisibility">
      <summary>Describes the visibility modes within a tracking profile.</summary>
    </member>
    <member name="F:System.Activities.Tracking.ImplementationVisibility.All">
      <summary>All tracking records are emitted.</summary>
    </member>
    <member name="F:System.Activities.Tracking.ImplementationVisibility.RootScope">
      <summary>Only the root activity and its implementation for the workflow is emitted.</summary>
    </member>
    <member name="T:System.Activities.Tracking.TrackingParticipant">
      <summary>The base class for workflow extensions that interact with the workflow tracking infrastructure and access tracking records.</summary>
    </member>
    <member name="M:System.Activities.Tracking.TrackingParticipant.#ctor">
      <summary>When implemented in a derived class, creates a new instance of the derived class.</summary>
    </member>
    <member name="M:System.Activities.Tracking.TrackingParticipant.BeginTrack(System.Activities.Tracking.TrackingRecord,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>When implemented in a derived class, begins asynchronous processing of the tracking record.</summary>
      <returns>The result of the operation.</returns>
      <param name="record">The generated tracking record.</param>
      <param name="timeout">The time period after which the provider aborts the attempt.</param>
      <param name="callback">The method to be called on completion of the operation.</param>
      <param name="state">A user-defined object that uniquely identifies this asynchronous operation.</param>
    </member>
    <member name="M:System.Activities.Tracking.TrackingParticipant.EndTrack(System.IAsyncResult)">
      <summary>When implemented in a derived class, represents the end of an asynchronous tracking operation. </summary>
      <param name="result">The status of the operation.</param>
    </member>
    <member name="M:System.Activities.Tracking.TrackingParticipant.Track(System.Activities.Tracking.TrackingRecord,System.TimeSpan)">
      <summary>When implemented in a derived class, used to synchronously process the tracking record.</summary>
      <param name="record">The generated tracking record.</param>
      <param name="timeout">The time period after which the provider aborts the attempt.</param>
    </member>
    <member name="P:System.Activities.Tracking.TrackingParticipant.TrackingProfile">
      <summary>The tracking profile object used by the tracking participant. Before adding the tracking participant to the workflow extensions, the tracking profile is set on the participant.</summary>
      <returns>The tracking profile.</returns>
    </member>
    <member name="T:System.Activities.Tracking.TrackingProfile">
      <summary>Creates a subscription to workflow tracking records in a <see cref="T:System.Activities.Tracking.TrackingParticipant" />. </summary>
    </member>
    <member name="M:System.Activities.Tracking.TrackingProfile.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.TrackingProfile" /> class.</summary>
    </member>
    <member name="P:System.Activities.Tracking.TrackingProfile.ActivityDefinitionId">
      <summary>Gets or sets the activity definition ID of the tracking profile.</summary>
      <returns>The activity definition ID.</returns>
    </member>
    <member name="P:System.Activities.Tracking.TrackingProfile.ImplementationVisibility">
      <summary>Gets or sets a value that filters tracking records emitted from nested activities within a top level activity (activities that compose the implementation of another activity.)</summary>
      <returns>An <see cref="T:System.Activities.Tracking.ImplementationVisibility" /> object that indicates the scope of records to be filtered.The default value is <see cref="F:System.Activities.Tracking.ImplementationVisibility.RootScope" />.</returns>
    </member>
    <member name="P:System.Activities.Tracking.TrackingProfile.Name">
      <summary>Gets the display name of the tracking profile.</summary>
      <returns>The profile name.</returns>
    </member>
    <member name="P:System.Activities.Tracking.TrackingProfile.Queries">
      <summary>Gets the collection of <see cref="T:System.Activities.Tracking.TrackingQuery" /> objects that define the records to which this tracking profile subscribes.</summary>
      <returns>The collection of queries.</returns>
    </member>
    <member name="T:System.Activities.Tracking.TrackingQuery">
      <summary>The base class for all tracking queries. Tracking queries are used to create a subscription definition for a <see cref="T:System.Activities.Tracking.TrackingProfile" />.</summary>
    </member>
    <member name="M:System.Activities.Tracking.TrackingQuery.#ctor">
      <summary>When implemented in a derived class, creates a new instance of the derived class.</summary>
    </member>
    <member name="P:System.Activities.Tracking.TrackingQuery.QueryAnnotations">
      <summary>A collection of data in the form of name/value pairs that is included with data that is returned by this query.</summary>
      <returns>The collection of annotations.</returns>
    </member>
    <member name="T:System.Activities.Tracking.TrackingRecord">
      <summary>The abstract class from which all workflow tracking records derive. Tracking records represent the data sent to tracking participants when tracked events occur.</summary>
    </member>
    <member name="M:System.Activities.Tracking.TrackingRecord.#ctor(System.Activities.Tracking.TrackingRecord)">
      <summary>When implemented in a derived class, creates a new instance of the derived class with the specified instance tracking record.</summary>
      <param name="record">The tracking record of the generating activity.</param>
    </member>
    <member name="M:System.Activities.Tracking.TrackingRecord.#ctor(System.Guid)">
      <summary>When implemented in a derived class, creates a new instance of the derived class with the specified instance ID.</summary>
      <param name="instanceId">The ID of the generating workflow instance.</param>
    </member>
    <member name="M:System.Activities.Tracking.TrackingRecord.#ctor(System.Guid,System.Int64)">
      <summary>When implemented in a derived class, creates a new instance of the derived class with the specified instance ID and record number.</summary>
      <param name="instanceId">The ID of the generating workflow instance.</param>
      <param name="recordNumber">A sequence that defines the order in which tracking records are generated.</param>
    </member>
    <member name="P:System.Activities.Tracking.TrackingRecord.Annotations">
      <summary>When implemented in a derived class, represents a collection of name/value pairs that are added to this tracking record.</summary>
      <returns>The dictionary of elements to be added to this tracking record.</returns>
    </member>
    <member name="M:System.Activities.Tracking.TrackingRecord.Clone">
      <summary>Creates a copy of the <see cref="T:System.Activities.Tracking.TrackingRecord" />.</summary>
      <returns>A copy of the <see cref="T:System.Activities.Tracking.TrackingRecord" />.</returns>
    </member>
    <member name="P:System.Activities.Tracking.TrackingRecord.EventTime">
      <summary>When implemented in a derived class, represents the time the tracking record occurred.</summary>
      <returns>The event time.</returns>
    </member>
    <member name="P:System.Activities.Tracking.TrackingRecord.InstanceId">
      <summary>When implemented in a derived class, represents the ID of the generating workflow instance.</summary>
      <returns>The element ID.</returns>
    </member>
    <member name="P:System.Activities.Tracking.TrackingRecord.Level">
      <summary>Gets the <see cref="T:System.Diagnostics.TraceLevel" /> of the event.</summary>
      <returns>The trace level.</returns>
    </member>
    <member name="P:System.Activities.Tracking.TrackingRecord.RecordNumber">
      <summary>A sequence that defines the order in which tracking records are generated. </summary>
      <returns>The sequence order.</returns>
    </member>
    <member name="M:System.Activities.Tracking.TrackingRecord.ToString">
      <summary>When implemented in a derived class, returns a string that contains all tracking data from the record.</summary>
      <returns>The tracking data.</returns>
    </member>
    <member name="T:System.Activities.Tracking.WorkflowInstanceAbortedRecord">
      <summary>Contains the data sent to a tracking participant by the run-time tracking infrastructure when a workflow instance is aborted.</summary>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceAbortedRecord.#ctor(System.Guid,System.Int64,System.String,System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.WorkflowInstanceAbortedRecord" /> class.</summary>
      <param name="instanceId">The instance ID of the aborted workflow.</param>
      <param name="recordNumber">A sequence that defines the order in which tracking records are generated.</param>
      <param name="activityDefinitionId">The display name of the root workflow activity.</param>
      <param name="reason">The reason the workflow was aborted.</param>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceAbortedRecord.#ctor(System.Guid,System.Int64,System.String,System.String,System.Activities.WorkflowIdentity)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.WorkflowInstanceAbortedRecord" /> class.</summary>
      <param name="instanceId">The instance ID of the aborted workflow.</param>
      <param name="recordNumber">A sequence that defines the order in which tracking records are generated.</param>
      <param name="activityDefinitionId">The display name of the root workflow activity.</param>
      <param name="reason">The reason the workflow was aborted.</param>
      <param name="workflowDefinitionIdentity">The information about the workflow identity.</param>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceAbortedRecord.#ctor(System.Guid,System.String,System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.WorkflowInstanceAbortedRecord" /> class. </summary>
      <param name="instanceId">The instance ID of the aborted workflow.</param>
      <param name="activityDefinitionId">The display name of the root Workflow Activity.</param>
      <param name="reason">The reason the workflow was aborted.</param>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceAbortedRecord.#ctor(System.Guid,System.String,System.String,System.Activities.WorkflowIdentity)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.WorkflowInstanceAbortedRecord" /> class. </summary>
      <param name="instanceId">The instance ID of the aborted workflow.</param>
      <param name="activityDefinitionId">The display name of the root workflow activity.</param>
      <param name="reason">The reason the workflow was aborted.</param>
      <param name="workflowDefinitionIdentity">The information about the workflow identity.</param>
    </member>
    <member name="P:System.Activities.Tracking.WorkflowInstanceAbortedRecord.Reason">
      <summary>Gets a string that describes why the workflow was aborted.</summary>
      <returns>The reason the workflow was aborted.</returns>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceAbortedRecord.ToString">
      <summary>Returns a string that contains the tracking record data.</summary>
      <returns>The tracking record data.</returns>
    </member>
    <member name="T:System.Activities.Tracking.WorkflowInstanceQuery">
      <summary>When added to the <see cref="P:System.Activities.Tracking.TrackingProfile.Queries" /> collection, subscribes to workflow instance records when the tracking profile is created to subscribe to tracking records.</summary>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceQuery.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.WorkflowInstanceQuery" /> class.</summary>
    </member>
    <member name="P:System.Activities.Tracking.WorkflowInstanceQuery.States">
      <summary>The subscribed states from the tracked workflow instance when the tracking records are created.</summary>
      <returns>The workflow states.</returns>
    </member>
    <member name="T:System.Activities.Tracking.WorkflowInstanceRecord">
      <summary>Contains the data sent to a tracking service by the run-time tracking infrastructure when a workflow instance changes state.</summary>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceRecord.#ctor(System.Activities.Tracking.WorkflowInstanceRecord)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.WorkflowInstanceRecord" /> class from an existing <see cref="T:System.Activities.Tracking.WorkflowInstanceRecord" /> instance.</summary>
      <param name="record">The instance of the workflow instance record to use.</param>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceRecord.#ctor(System.Guid,System.Int64,System.String,System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.WorkflowInstanceRecord" /> class. </summary>
      <param name="instanceId">The instance ID of the generating workflow instance.</param>
      <param name="recordNumber">A sequence that defines the order in which tracking events are generated.</param>
      <param name="activityDefinitionId">The display name of the root activity of the workflow.</param>
      <param name="state">The current state of the workflow when the record is generated.</param>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceRecord.#ctor(System.Guid,System.Int64,System.String,System.String,System.Activities.WorkflowIdentity)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.WorkflowInstanceRecord" /> class.</summary>
      <param name="instanceId">The instance ID of the generating workflow instance.</param>
      <param name="recordNumber">A sequence that defines the order in which tracking events are generated.</param>
      <param name="activityDefinitionId">The display name of the root activity of the workflow.</param>
      <param name="state">The current state of the workflow when the record is generated.</param>
      <param name="workflowDefinitionIdentity">The information about the workflow identity.</param>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceRecord.#ctor(System.Guid,System.String,System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.WorkflowInstanceRecord" /> class. </summary>
      <param name="instanceId">The instance ID of the generating workflow instance.</param>
      <param name="activityDefinitionId">The display name of the root activity of the workflow.</param>
      <param name="state">The current state of the workflow when the record is generated.</param>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceRecord.#ctor(System.Guid,System.String,System.String,System.Activities.WorkflowIdentity)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.WorkflowInstanceRecord" /> class.</summary>
      <param name="instanceId">The instance ID of the generating workflow instance.</param>
      <param name="activityDefinitionId">The display name of the root activity of the workflow.</param>
      <param name="state">The current state of the workflow when the record is generated.</param>
      <param name="workflowDefinitionIdentity">The information about the workflow identity.</param>
    </member>
    <member name="P:System.Activities.Tracking.WorkflowInstanceRecord.ActivityDefinitionId">
      <summary>Returns the display name of the root activity of the workflow that generated this record.</summary>
      <returns>The activity definition ID.</returns>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceRecord.Clone">
      <summary>Creates a deep copy of <see cref="T:System.Activities.Tracking.WorkflowInstanceRecord" />.</summary>
      <returns>A deep copy of the <see cref="T:System.Activities.Tracking.WorkflowInstanceRecord" />.</returns>
    </member>
    <member name="P:System.Activities.Tracking.WorkflowInstanceRecord.State">
      <summary>The current state of the workflow when the record is generated.</summary>
      <returns>The workflow state.</returns>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceRecord.ToString">
      <summary>Returns a string that contains the tracking record data.</summary>
      <returns>The tracking data.</returns>
    </member>
    <member name="P:System.Activities.Tracking.WorkflowInstanceRecord.WorkflowDefinitionIdentity">
      <summary>Gets or sets the information about the workflow identity.</summary>
      <returns>The information about the workflow identity.</returns>
    </member>
    <member name="T:System.Activities.Tracking.WorkflowInstanceStates">
      <summary>Specifies the state of a workflow instance.</summary>
    </member>
    <member name="F:System.Activities.Tracking.WorkflowInstanceStates.Aborted">
      <summary>The workflow instance is aborted.</summary>
    </member>
    <member name="F:System.Activities.Tracking.WorkflowInstanceStates.Canceled">
      <summary>The workflow instance is canceled.</summary>
    </member>
    <member name="F:System.Activities.Tracking.WorkflowInstanceStates.Completed">
      <summary>The workflow instance is completed.</summary>
    </member>
    <member name="F:System.Activities.Tracking.WorkflowInstanceStates.Deleted">
      <summary>The workflow instance is deleted.</summary>
    </member>
    <member name="F:System.Activities.Tracking.WorkflowInstanceStates.Idle">
      <summary>The workflow instance is idle.</summary>
    </member>
    <member name="F:System.Activities.Tracking.WorkflowInstanceStates.Persisted">
      <summary>The workflow instance is persisted.</summary>
    </member>
    <member name="F:System.Activities.Tracking.WorkflowInstanceStates.Resumed">
      <summary>The workflow instance is resumed.</summary>
    </member>
    <member name="F:System.Activities.Tracking.WorkflowInstanceStates.Started">
      <summary>The workflow instance is started.</summary>
    </member>
    <member name="F:System.Activities.Tracking.WorkflowInstanceStates.Suspended">
      <summary>The workflow instance is suspended.</summary>
    </member>
    <member name="F:System.Activities.Tracking.WorkflowInstanceStates.Terminated">
      <summary>The workflow instance is terminated.</summary>
    </member>
    <member name="F:System.Activities.Tracking.WorkflowInstanceStates.UnhandledException">
      <summary>The workflow instance encountered an unhandled exception.</summary>
    </member>
    <member name="F:System.Activities.Tracking.WorkflowInstanceStates.Unloaded">
      <summary>The workflow instance is unloaded.</summary>
    </member>
    <member name="F:System.Activities.Tracking.WorkflowInstanceStates.Unsuspended">
      <summary>The workflow instance is unsuspended.</summary>
    </member>
    <member name="F:System.Activities.Tracking.WorkflowInstanceStates.Updated">
      <summary>The workflow instance is updated.</summary>
    </member>
    <member name="F:System.Activities.Tracking.WorkflowInstanceStates.UpdateFailed">
      <summary>The workflow instance failed to update.</summary>
    </member>
    <member name="T:System.Activities.Tracking.WorkflowInstanceSuspendedRecord">
      <summary>Contains the data sent to a tracking participant by the run-time tracking infrastructure when a workflow instance is suspended.</summary>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceSuspendedRecord.#ctor(System.Guid,System.Int64,System.String,System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.WorkflowInstanceSuspendedRecord" /> class. </summary>
      <param name="instanceId">The instance ID of the suspended workflow.</param>
      <param name="recordNumber">A sequence that defines the order in which tracking records are generated.</param>
      <param name="activityDefinitionId">The display name of the root activity of the workflow.</param>
      <param name="reason">The reason the workflow was suspended.</param>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceSuspendedRecord.#ctor(System.Guid,System.Int64,System.String,System.String,System.Activities.WorkflowIdentity)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.WorkflowInstanceSuspendedRecord" /> class.</summary>
      <param name="instanceId">The instance ID of the suspended workflow.</param>
      <param name="recordNumber">A sequence that defines the order in which tracking records are generated.</param>
      <param name="activityDefinitionId">The display name of the root activity of the workflow.</param>
      <param name="reason">The reason the workflow was suspended.</param>
      <param name="workflowDefinitionIdentity">The information about the workflow identity.</param>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceSuspendedRecord.#ctor(System.Guid,System.String,System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.WorkflowInstanceSuspendedRecord" /> class. </summary>
      <param name="instanceId">The instance ID of the suspended workflow.</param>
      <param name="activityDefinitionId">The display name of the root activity of the workflow.</param>
      <param name="reason">The reason the workflow was suspended.</param>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceSuspendedRecord.#ctor(System.Guid,System.String,System.String,System.Activities.WorkflowIdentity)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.WorkflowInstanceSuspendedRecord" /> class. </summary>
      <param name="instanceId">The instance ID of the suspended workflow.</param>
      <param name="activityDefinitionId">The display name of the root activity of the workflow.</param>
      <param name="reason">The reason the workflow was suspended.</param>
      <param name="workflowDefinitionIdentity">The information about the workflow identity.</param>
    </member>
    <member name="P:System.Activities.Tracking.WorkflowInstanceSuspendedRecord.Reason">
      <summary>Gets a string that describes why the workflow instance was suspended.</summary>
      <returns>The reason the workflow was suspended.</returns>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceSuspendedRecord.ToString">
      <summary>Returns a string that contains the tracking record data.</summary>
      <returns>The tracking record data.</returns>
    </member>
    <member name="T:System.Activities.Tracking.WorkflowInstanceTerminatedRecord">
      <summary>Contains the data sent to a tracking participant by the run-time tracking infrastructure when a workflow is terminated.</summary>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceTerminatedRecord.#ctor(System.Guid,System.Int64,System.String,System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.WorkflowInstanceTerminatedRecord" /> class. </summary>
      <param name="instanceId">The instance ID of the terminated workflow.</param>
      <param name="recordNumber">A sequence that defines the order in which tracking records are generated.</param>
      <param name="activityDefinitionId">The display name of the root activity of the workflow.</param>
      <param name="reason">The reason the workflow was terminated.</param>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceTerminatedRecord.#ctor(System.Guid,System.Int64,System.String,System.String,System.Activities.WorkflowIdentity)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.WorkflowInstanceTerminatedRecord" /> class.</summary>
      <param name="instanceId">The instance ID of the terminated workflow.</param>
      <param name="recordNumber">A sequence that defines the order in which tracking records are generated.</param>
      <param name="activityDefinitionId">The display name of the root activity of the workflow.</param>
      <param name="reason">The reason the workflow was terminated.</param>
      <param name="workflowDefinitionIdentity">The information about the workflow identity.</param>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceTerminatedRecord.#ctor(System.Guid,System.String,System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.WorkflowInstanceTerminatedRecord" /> class. </summary>
      <param name="instanceId">The instance ID of the terminated workflow.</param>
      <param name="activityDefinitionId">The ID of the activity definition.</param>
      <param name="reason">The reason the workflow was terminated.</param>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceTerminatedRecord.#ctor(System.Guid,System.String,System.String,System.Activities.WorkflowIdentity)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.WorkflowInstanceTerminatedRecord" /> class. </summary>
      <param name="instanceId">The instance ID of the terminated workflow.</param>
      <param name="activityDefinitionId">The display name of the root activity of the workflow.</param>
      <param name="reason">The reason the workflow was terminated.</param>
      <param name="workflowDefinitionIdentity">The information about the workflow identity.</param>
    </member>
    <member name="P:System.Activities.Tracking.WorkflowInstanceTerminatedRecord.Reason">
      <summary>Gets a string that describes why the workflow instance was terminated.</summary>
      <returns>The reason the workflow was terminated.</returns>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceTerminatedRecord.ToString">
      <summary>Returns a string that contains the tracking record data.</summary>
      <returns>The tracking record data.</returns>
    </member>
    <member name="T:System.Activities.Tracking.WorkflowInstanceUnhandledExceptionRecord">
      <summary>Contains the data sent to a tracking participant by the run-time tracking infrastructure when a workflow instance encounters an unhandled exception.</summary>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceUnhandledExceptionRecord.#ctor(System.Guid,System.Int64,System.String,System.Activities.Tracking.ActivityInfo,System.Exception)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.WorkflowInstanceUnhandledExceptionRecord" /> class. </summary>
      <param name="instanceId">The instance ID of the generating workflow instance.</param>
      <param name="recordNumber">A sequence that defines the order in which tracking events are generated.</param>
      <param name="activityDefinitionId">The display name of the root activity of the workflow.</param>
      <param name="faultSource">The activity that generated the fault.</param>
      <param name="exception">The unhandled exception data.</param>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceUnhandledExceptionRecord.#ctor(System.Guid,System.Int64,System.String,System.Activities.Tracking.ActivityInfo,System.Exception,System.Activities.WorkflowIdentity)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.WorkflowInstanceUnhandledExceptionRecord" /> class. </summary>
      <param name="instanceId">The instance ID of the generating workflow instance.</param>
      <param name="recordNumber">A sequence that defines the order in which tracking events are generated.</param>
      <param name="activityDefinitionId">The display name of the root activity of the workflow.</param>
      <param name="faultSource">The activity that generated the fault.</param>
      <param name="exception">The unhandled exception data.</param>
      <param name="workflowDefinitionIdentity">The information about the workflow identity.</param>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceUnhandledExceptionRecord.#ctor(System.Guid,System.String,System.Activities.Tracking.ActivityInfo,System.Exception)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.WorkflowInstanceUnhandledExceptionRecord" /> class. </summary>
      <param name="instanceId">The instance ID of the generating workflow instance.</param>
      <param name="activityDefinitionId">The activity definition ID of the generating workflow activity.</param>
      <param name="faultSource">The activity that generated the fault.</param>
      <param name="exception">The unhandled exception data.</param>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceUnhandledExceptionRecord.#ctor(System.Guid,System.String,System.Activities.Tracking.ActivityInfo,System.Exception,System.Activities.WorkflowIdentity)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.WorkflowInstanceUnhandledExceptionRecord" /> class. </summary>
      <param name="instanceId">The instance ID of the generating workflow instance.</param>
      <param name="activityDefinitionId">The display name of the root activity of the workflow.</param>
      <param name="faultSource">The activity that generated the fault.</param>
      <param name="exception">The unhandled exception data.</param>
      <param name="workflowDefinitionIdentity">The information about the workflow identity.</param>
    </member>
    <member name="P:System.Activities.Tracking.WorkflowInstanceUnhandledExceptionRecord.FaultSource">
      <summary>Returns the activity that generated the fault.</summary>
      <returns>The faulting activity.</returns>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceUnhandledExceptionRecord.ToString">
      <summary>Returns the tracking record data.</summary>
      <returns>The tracking data.</returns>
    </member>
    <member name="P:System.Activities.Tracking.WorkflowInstanceUnhandledExceptionRecord.UnhandledException">
      <summary>Gets the unhandled exception data.</summary>
      <returns>The exception data.</returns>
    </member>
    <member name="T:System.Activities.Tracking.WorkflowInstanceUpdatedRecord">
      <summary>Specifies information about an updated record.</summary>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceUpdatedRecord.#ctor(System.Guid,System.Int64,System.String,System.Activities.WorkflowIdentity,System.Activities.WorkflowIdentity)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Tracking.WorkflowInstanceUpdatedRecord" /> class.</summary>
      <param name="instanceId">The instance identification of the generating workflow.</param>
      <param name="recordNumber">A sequence that defines the order in which tracking event are generated.</param>
      <param name="activityDefinitionId">The display name of the root activity of the workflow.</param>
      <param name="originalDefinitionIdentity">The original definition identity of the workflow.</param>
      <param name="updatedDefinitionIdentity">The updated definition identity of the workflow.</param>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceUpdatedRecord.#ctor(System.Guid,System.Int64,System.String,System.Activities.WorkflowIdentity,System.Activities.WorkflowIdentity,System.Collections.Generic.IList{System.Activities.DynamicUpdate.ActivityBlockingUpdate})">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Tracking.WorkflowInstanceUpdatedRecord" /> class.</summary>
      <param name="instanceId">The instance identification of the generating workflow.</param>
      <param name="recordNumber">A sequence that defines the order in which tracking event are generated.</param>
      <param name="activityDefinitionId">The display name of the root activity of the workflow.</param>
      <param name="originalDefinitionIdentity">The original definition identity of the workflow.</param>
      <param name="updatedDefinitionIdentity">The updated definition identity of the workflow.</param>
      <param name="blockingActivities">The blocking activities of the workflow.</param>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceUpdatedRecord.#ctor(System.Guid,System.String,System.Activities.WorkflowIdentity,System.Activities.WorkflowIdentity)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Tracking.WorkflowInstanceUpdatedRecord" /> class.</summary>
      <param name="instanceId">The instance identification of the generating workflow.</param>
      <param name="activityDefinitionId">The display name of the root activity of the workflow.</param>
      <param name="originalDefinitionIdentity">The original definition identity of the workflow.</param>
      <param name="updatedDefinitionIdentity">The updated definition identity of the workflow.</param>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceUpdatedRecord.#ctor(System.Guid,System.String,System.Activities.WorkflowIdentity,System.Activities.WorkflowIdentity,System.Collections.Generic.IList{System.Activities.DynamicUpdate.ActivityBlockingUpdate})">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Tracking.WorkflowInstanceUpdatedRecord" /> class.</summary>
      <param name="instanceId">The instance identification of the generating workflow.</param>
      <param name="activityDefinitionId">The display name of the root activity of the workflow.</param>
      <param name="originalDefinitionIdentity">The original definition identity of the workflow.</param>
      <param name="updatedDefinitionIdentity">The updated definition identity of the workflow.</param>
      <param name="blockingActivities">The blocking activities of the workflow.</param>
    </member>
    <member name="P:System.Activities.Tracking.WorkflowInstanceUpdatedRecord.BlockingActivities">
      <summary>Gets or sets the list of blocking activities for the instance of updated record.</summary>
      <returns>The list of blocking activities.</returns>
    </member>
    <member name="P:System.Activities.Tracking.WorkflowInstanceUpdatedRecord.IsSuccessful">
      <summary>Gets a value that indicates whether the updated record of workflow instance is successful.</summary>
      <returns>true if the updated record of workflow instance is successful; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Tracking.WorkflowInstanceUpdatedRecord.OriginalDefinitionIdentity">
      <summary>Gets or sets the original definition of the workflow identity.</summary>
      <returns>The original definition of the workflow identity.</returns>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceUpdatedRecord.ToString">
      <summary>Returns a string that contains the tracking record data.</summary>
      <returns>A string that contains the tracking record data.</returns>
    </member>
    <member name="T:System.Activities.Validation.ActivityValidationServices">
      <summary>Provides the functionality to validate a workflow. </summary>
    </member>
    <member name="M:System.Activities.Validation.ActivityValidationServices.Resolve(System.Activities.Activity,System.String)">
      <summary>Retrieves the workflow activity with the specified ID in the specified workflow.</summary>
      <returns>A workflow activity.</returns>
      <param name="root">The root workflow activity that contains the activity element to access.</param>
      <param name="id">An identifier that is associated with an activity.</param>
    </member>
    <member name="M:System.Activities.Validation.ActivityValidationServices.Validate(System.Activities.Activity)">
      <summary>Verifies that a workflow activity is correctly configured according to the validation logic. This logic can be the <see cref="M:System.Activities.CodeActivity.CacheMetadata(System.Activities.CodeActivityMetadata)" /> method of the activities to validate, or build and policy constraints.</summary>
      <returns>A collection of validation errors, each of which can contain the name of the validated activity, a descriptive message, an error code, and other information.</returns>
      <param name="toValidate">An element from a workflow activity tree.</param>
    </member>
    <member name="M:System.Activities.Validation.ActivityValidationServices.Validate(System.Activities.Activity,System.Activities.Validation.ValidationSettings)">
      <summary>Verifies that a workflow activity is correctly configured according to the validation logic. This logic can be the cacheMetadata method of the activities to validate, or build and policy constraints.</summary>
      <returns>A collection of validation errors, each of which can contain the name of the activity that is configured incorrectly, a descriptive message, an error or warning code , and other information.</returns>
      <param name="toValidate">An activity from a workflow activity tree.</param>
      <param name="settings">An object that determines the behavior of the validation method on the workflow , can suppress the internal validation logic, and can also contain the policy constraints.</param>
    </member>
    <member name="T:System.Activities.Validation.AddValidationError">
      <summary>Add a specified activity validation error to the activity before execution.</summary>
    </member>
    <member name="M:System.Activities.Validation.AddValidationError.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Validation.AddValidationError" /> class.</summary>
    </member>
    <member name="P:System.Activities.Validation.AddValidationError.IsWarning">
      <summary>Gets or sets a value that indicates whether the validation error that occurred is a warning and not an error.</summary>
      <returns>true if the error that occurred is a warning and not an error; otherwise false.</returns>
    </member>
    <member name="P:System.Activities.Validation.AddValidationError.Message">
      <summary>Gets or sets an alphanumeric string that contains a description of the error.</summary>
      <returns>A description of the error.</returns>
    </member>
    <member name="P:System.Activities.Validation.AddValidationError.PropertyName">
      <summary>Gets or sets the name of the property that caused the error.</summary>
      <returns>The name of the property that caused the error.</returns>
    </member>
    <member name="T:System.Activities.Validation.AssertValidation">
      <summary>Adds a constraint violation to a list of constraint violations if the Assertion condition evaluates to false. </summary>
    </member>
    <member name="M:System.Activities.Validation.AssertValidation.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Validation.AssertValidation" /> class. </summary>
    </member>
    <member name="P:System.Activities.Validation.AssertValidation.Assertion">
      <summary>Gets or sets a value that indicates whether the assert validation resolved to true or false.</summary>
      <returns>
        <see cref="T:System.Activities.InArgument`1" />.</returns>
    </member>
    <member name="P:System.Activities.Validation.AssertValidation.IsWarning">
      <summary>Gets or sets the value that indicates whether the result of the assert validation is a warning or an error.</summary>
      <returns>
        <see cref="T:System.Activities.InArgument`1" />.</returns>
    </member>
    <member name="P:System.Activities.Validation.AssertValidation.Message">
      <summary>Gets or sets the text string that states the results of the assert validation.</summary>
      <returns>
        <see cref="T:System.Activities.InArgument`1" />.</returns>
    </member>
    <member name="P:System.Activities.Validation.AssertValidation.PropertyName">
      <summary>Gets or sets the name of the property associated with the assert violation.</summary>
      <returns>An InArgument that contains the name of the property associated with the assert violation.</returns>
    </member>
    <member name="T:System.Activities.Validation.Constraint">
      <summary>Handles the validation constraint that is used for validating an activity.</summary>
    </member>
    <member name="M:System.Activities.Validation.Constraint.AddValidationError(System.Activities.NativeActivityContext,System.Activities.Validation.ValidationError)">
      <summary>Adds a validation error to a list of run-time validation errors that are attached to the execution context.</summary>
      <param name="context">The workflow activity execution environment.</param>
      <param name="error">A validation error that occurs during a workflow runtime.</param>
    </member>
    <member name="M:System.Activities.Validation.Constraint.CacheMetadata(System.Activities.NativeActivityMetadata)">
      <summary>Creates a <see cref="T:System.Activities.NativeActivityMetadata" /> object that contains runtime arguments for the workflow validation process.</summary>
      <param name="metadata">A <see cref="T:System.Activities.NativeActivityMetadata" /> object that becomes the container for a list of validation runtime arguments. </param>
    </member>
    <member name="M:System.Activities.Validation.Constraint.Execute(System.Activities.NativeActivityContext)">
      <summary>Invokes the process that validates an activity.</summary>
      <param name="context">The workflow activity execution environment.</param>
    </member>
    <member name="M:System.Activities.Validation.Constraint.OnExecute(System.Activities.NativeActivityContext,System.Object,System.Activities.Validation.ValidationContext)">
      <summary>When implemented by a derived class, validates the specified object using the specified native activity and validation contexts.</summary>
      <param name="context">The workflow activity execution.</param>
      <param name="objectToValidate">The activity to be validated.</param>
      <param name="objectToValidateContext">The context of the activity to be validated.</param>
    </member>
    <member name="F:System.Activities.Validation.Constraint.ValidationErrorListPropertyName">
      <summary>The name for an activity constraint property that is a list of workflow run-time validation errors.</summary>
    </member>
    <member name="T:System.Activities.Validation.Constraint`1">
      <summary>Handles a constraint used for validating an element of type T. </summary>
      <typeparam name="T">The type of the element to be validated.</typeparam>
    </member>
    <member name="M:System.Activities.Validation.Constraint`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Validation.Constraint`1" /> class. </summary>
    </member>
    <member name="P:System.Activities.Validation.Constraint`1.Body">
      <summary>Gets or sets the validation logic.</summary>
      <returns>An <see cref="T:System.Activities.ActivityAction" /> delegate.</returns>
    </member>
    <member name="T:System.Activities.Validation.GetChildSubtree">
      <summary>Retrieves workflow child activities from an instance of an activity.</summary>
    </member>
    <member name="M:System.Activities.Validation.GetChildSubtree.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Validation.GetChildSubtree" /> class.</summary>
    </member>
    <member name="P:System.Activities.Validation.GetChildSubtree.ValidationContext">
      <summary>Gets or sets the property that serves as an argument into an activity and provides the activity with the information required for its validation process.</summary>
      <returns>An argument to an activity that provides information for its validation process.</returns>
    </member>
    <member name="T:System.Activities.Validation.GetParentChain">
      <summary>Retrieves the collection of all activities which belong to the parent axis of an activity.</summary>
    </member>
    <member name="M:System.Activities.Validation.GetParentChain.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Validation.GetParentChain" /> class.</summary>
    </member>
    <member name="P:System.Activities.Validation.GetParentChain.ValidationContext">
      <summary>Gets or sets the property that serves as an argument into an activity and provides the activity with the information required for its validation process.</summary>
      <returns>An argument to an activity that provides information for its validation process.</returns>
    </member>
    <member name="T:System.Activities.Validation.GetWorkflowTree">
      <summary>Retrieves a workflow tree from an instance of an activity.</summary>
    </member>
    <member name="M:System.Activities.Validation.GetWorkflowTree.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Validation.GetWorkflowTree" /> class.</summary>
    </member>
    <member name="P:System.Activities.Validation.GetWorkflowTree.ValidationContext">
      <summary>Gets or sets the property that serves as an argument into an activity and provides the activity with the information required for its validation process.</summary>
      <returns>An argument to an activity that provides information for its validation process.</returns>
    </member>
    <member name="T:System.Activities.Validation.ValidationContext">
      <summary>Generates results based on the correct context for the current node in the workflow tree.</summary>
    </member>
    <member name="T:System.Activities.Validation.ValidationError">
      <summary>Represents an instance of a validation error that occurs before execution of the workflow.</summary>
    </member>
    <member name="M:System.Activities.Validation.ValidationError.#ctor(System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Validation.ValidationError" /> class using the specified error message.</summary>
      <param name="message">The information about the error.</param>
    </member>
    <member name="M:System.Activities.Validation.ValidationError.#ctor(System.String,System.Boolean)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Validation.ValidationError" /> class using the specified error message and warning indication.</summary>
      <param name="message">The error message.</param>
      <param name="isWarning">true if the error is a warning; otherwise, false.</param>
    </member>
    <member name="M:System.Activities.Validation.ValidationError.#ctor(System.String,System.Boolean,System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Validation.ValidationError" /> class using the specified error message, warning indicator, and name of the property that caused the error.</summary>
      <param name="message">The error message.</param>
      <param name="isWarning">An indicator whether the error is a warning.</param>
      <param name="propertyName">The alphanumeric name of the property that generated the error.</param>
    </member>
    <member name="M:System.Activities.Validation.ValidationError.#ctor(System.String,System.Boolean,System.String,System.Object)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Validation.ValidationError" /> class using the specified error message, warning indicator, name of the property and the source detail that caused the error.</summary>
      <param name="message">The error message.</param>
      <param name="isWarning">An indicator whether the error is a warning.</param>
      <param name="propertyName">The alphanumeric name of the property that generated the error.</param>
      <param name="sourceDetail">The detail about the source of the error.</param>
    </member>
    <member name="P:System.Activities.Validation.ValidationError.Id">
      <summary>A unique alphanumeric identifier for the <see cref="T:System.Activities.Activity" /> that is the source of the error. This identifier is unique for each activity in a specific workflow.</summary>
      <returns>An identifier for the activity that is the source of the error.</returns>
    </member>
    <member name="P:System.Activities.Validation.ValidationError.IsWarning">
      <summary>Gets a value that indicates whether the validation error is a warning and not an error.</summary>
      <returns>true if the validation error is a warning; otherwise false.</returns>
    </member>
    <member name="P:System.Activities.Validation.ValidationError.Message">
      <summary>Gets an alphanumeric message that provides information about the validation error.</summary>
      <returns>A message that provides information about the validation error.</returns>
    </member>
    <member name="P:System.Activities.Validation.ValidationError.PropertyName">
      <summary>Gets the alphanumeric name of the property that generated the error.</summary>
      <returns>A name of the property that generated the error.</returns>
    </member>
    <member name="P:System.Activities.Validation.ValidationError.Source">
      <summary>Gets the activity that is the source of the error.</summary>
      <returns>An activity that is the source of the error.</returns>
    </member>
    <member name="P:System.Activities.Validation.ValidationError.SourceDetail">
      <summary>Gets the detail about the source of the error.</summary>
      <returns>The detail about the source of the error.</returns>
    </member>
    <member name="M:System.Activities.Validation.ValidationError.ToString">
      <summary>Converts the validation error property names and values into a message string that lists them.</summary>
      <returns>A string representation of the validation error.</returns>
    </member>
    <member name="T:System.Activities.Validation.ValidationResults">
      <summary>Containts all validation errors generated by <see cref="M:System.Activities.Validation.ActivityValidationServices.Validate(System.Activities.Activity)" /> while validating a workflow.  These errors are contained in the <see cref="P:System.Activities.Validation.ValidationResults.Errors" /> and <see cref="P:System.Activities.Validation.ValidationResults.Warnings" /> collections.</summary>
    </member>
    <member name="M:System.Activities.Validation.ValidationResults.#ctor(System.Collections.Generic.IList{System.Activities.Validation.ValidationError})">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Validation.ValidationResults" /> class.</summary>
      <param name="allValidationErrors">The collection of validation errors and warnings.</param>
    </member>
    <member name="P:System.Activities.Validation.ValidationResults.Errors">
      <summary>Gets a read-only collection of workflow validation errors.</summary>
      <returns>A read-only collection of validation errors.</returns>
    </member>
    <member name="P:System.Activities.Validation.ValidationResults.Warnings">
      <summary>Gets a read-only collection of workflow validation warnings.</summary>
      <returns>A read-only collection of validation warnings.</returns>
    </member>
    <member name="T:System.Activities.Validation.ValidationSettings">
      <summary>Represents a collection of settings that customize the behavior that <see cref="M:System.Activities.Validation.ActivityValidationServices.Validate(System.Activities.Activity)" /> will exhibit. It also enables the activity user to apply policy constraints to a workflow.</summary>
    </member>
    <member name="M:System.Activities.Validation.ValidationSettings.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Validation.ValidationSettings" /> class.</summary>
    </member>
    <member name="P:System.Activities.Validation.ValidationSettings.AdditionalConstraints">
      <summary>Gets a  dictionary of type-constraint pairs. Each additional constraint added to the dictionary will be applied to every activity of the specify type in the workflow to validate. </summary>
      <returns>A dictionary type list of constraints and types. </returns>
    </member>
    <member name="P:System.Activities.Validation.ValidationSettings.CancellationToken">
      <summary>Gets or sets the cancellation token used to notify should the activity be cancelled.</summary>
      <returns>The cancellation token used to notify should the activity be cancelled.</returns>
    </member>
    <member name="P:System.Activities.Validation.ValidationSettings.Environment">
      <summary>Gets or sets the environment of variables and arguments associated with this validation settings.</summary>
      <returns>The environment of variables and arguments associated with this validation settings.</returns>
    </member>
    <member name="P:System.Activities.Validation.ValidationSettings.OnlyUseAdditionalConstraints">
      <summary>Gets or sets a value that indicates whether the additional validation constraints are to be used exclusively to validate the workflow. If set to true, all the validation contained inside the activity itself will be ignored.</summary>
      <returns>true if the additional constraints are to be used exclusively; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Validation.ValidationSettings.PrepareForRuntime">
      <summary>Gets or sets a value that indicates whether this instance is prepared for runtime.</summary>
      <returns>True if this instance is prepared for runtime; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Validation.ValidationSettings.SingleLevel">
      <summary>Gets or sets a value that indicates whether the supplied activity and all the children and sub-children of the supplied activity are validated, or if the validator should validate only to the supplied activity.</summary>
      <returns>true if an element is being validated without validating its child elements; otherwise, false if the element and its children and sub-children are being validated.</returns>
    </member>
    <member name="P:System.Activities.Validation.ValidationSettings.SkipValidatingRootConfiguration">
      <summary>Gets or sets a value that indicates whether the root configuration is not subject for validation.</summary>
      <returns>true if the root configuration is not subject for validation; otherwise, false.</returns>
    </member>
    <member name="T:System.Activities.XamlIntegration.ActivityWithResultConverter">
      <summary>Provides type conversion for the result type of a workflow activity operation.  </summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityWithResultConverter.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.XamlIntegration.ActivityWithResultConverter" /> class. </summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityWithResultConverter.#ctor(System.Type)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.XamlIntegration.ActivityWithResultConverter" /> class with the specified type to which an activity result is converted.</summary>
      <param name="type">The type to which the activity result is converted.</param>
    </member>
    <member name="T:System.Activities.XamlIntegration.ActivityWithResultValueSerializer">
      <summary>Ensures that the result of an activity is properly converted to a string that can be used for serial transmission. </summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityWithResultValueSerializer.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.XamlIntegration.ActivityWithResultValueSerializer" /> class.</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityWithResultValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Returns an indication whether an input object is an <see cref="T:System.Activities.XamlIntegration.IValueSerializableExpression" /> that can be serialized into a string.</summary>
      <returns>true if the expression can be serialized; otherwise, false.</returns>
      <param name="value">The <see cref="T:System.Activities.XamlIntegration.IValueSerializableExpression" /> object that is verified for its ability to be converted to a string for serial transmission.</param>
      <param name="context">Defines a context for the serialization of <see cref="T:System.Activities.XamlIntegration.IValueSerializableExpression" />.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityWithResultValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Serializes the specified object into a string.</summary>
      <returns>A string version of the serializable expression.</returns>
      <param name="value">The object that is converted to a string for serial transmission.</param>
      <param name="context">Defines a context for the serialization of the object being that is converted into a string.</param>
    </member>
    <member name="T:System.Activities.XamlIntegration.ActivityXamlServices">
      <summary>Creates an instance of an activity tree described in XAML. </summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityXamlServices.CreateBuilderReader(System.Xaml.XamlReader)">
      <summary>Maps an x:Class activity tree from the specified reader to an <see cref="T:System.Activities.ActivityBuilder" /> or <see cref="T:System.Activities.ActivityBuilder`1" />.</summary>
      <returns>A <see cref="T:System.Xaml.XamlReader" /> that handles the transformation between the <see cref="T:System.Activities.ActivityBuilder" /> and the activity x:Class XAML.</returns>
      <param name="innerReader">The x:Class content.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityXamlServices.CreateBuilderReader(System.Xaml.XamlReader,System.Xaml.XamlSchemaContext)">
      <summary>Maps an x:Class activity tree from the specified reader to an <see cref="T:System.Activities.ActivityBuilder" /> or <see cref="T:System.Activities.ActivityBuilder`1" /> using the specified schema context.</summary>
      <returns>A <see cref="T:System.Xaml.XamlReader" /> that handles the transformation between the <see cref="T:System.Activities.ActivityBuilder" /> and the activity x:Class XAML.</returns>
      <param name="innerReader">The x:Class content.</param>
      <param name="schemaContext">The schema context.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityXamlServices.CreateBuilderWriter(System.Xaml.XamlWriter)">
      <summary>Maps an <see cref="T:System.Activities.ActivityBuilder" /> or <see cref="T:System.Activities.ActivityBuilder`1" /> from the specified writer to an x:Class activity tree.</summary>
      <returns>A <see cref="T:System.Xaml.XamlWriter" /> that handles the transformation between the <see cref="T:System.Activities.ActivityBuilder" /> and the activity x:Class XAML.</returns>
      <param name="innerWriter">The content of an <see cref="T:System.Activities.ActivityBuilder" /> or <see cref="T:System.Activities.ActivityBuilder`1" />.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityXamlServices.CreateFactory``1(System.Xaml.XamlReader)">
      <summary>Returns a delegate method for the specified XAML reader with return value of specified type.</summary>
      <returns>A delegate method for the specified XAML reader with return value of type <paramref name="T" />.</returns>
      <param name="reader">The XAML reader.</param>
      <typeparam name="T">The type of the return value of the method that this delegate encapsulates.</typeparam>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityXamlServices.CreateFactory(System.Xaml.XamlReader,System.Type)">
      <summary>Returns a delegate method for the specified XAML reader with return value of specified type.</summary>
      <returns>A delegate method for the specified XAML reader with return value of specified type.</returns>
      <param name="reader">The XAML reader.</param>
      <param name="resultType">The type of the return value of the method that this delegate encapsulates.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityXamlServices.CreateReader(System.IO.Stream)">
      <summary>Maps an x:Class activity tree from the specified stream to an <see cref="T:System.Activities.DynamicActivity" /> or <see cref="T:System.Activities.DynamicActivity`1" />.</summary>
      <returns>The <see cref="T:System.Activities.ActivityBuilder" /> or <see cref="T:System.Activities.ActivityBuilder`1" /> content.</returns>
      <param name="stream">The x:Class content.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityXamlServices.CreateReader(System.Xaml.XamlReader)">
      <summary>Maps an x:Class activity tree from the specified reader to an <see cref="T:System.Activities.DynamicActivity" /> or <see cref="T:System.Activities.DynamicActivity`1" />.</summary>
      <returns>The <see cref="T:System.Activities.ActivityBuilder" /> or <see cref="T:System.Activities.ActivityBuilder`1" /> content.</returns>
      <param name="innerReader">The x:Class content.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityXamlServices.CreateReader(System.Xaml.XamlReader,System.Xaml.XamlSchemaContext)">
      <summary>Maps an x:Class activity tree from the specified reader to an <see cref="T:System.Activities.DynamicActivity" /> or <see cref="T:System.Activities.DynamicActivity`1" /> using the specified schema context.</summary>
      <returns>The <see cref="T:System.Activities.ActivityBuilder" /> or <see cref="T:System.Activities.ActivityBuilder`1" /> content.</returns>
      <param name="innerReader">The x:Class content.</param>
      <param name="schemaContext">The schema context.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityXamlServices.InitializeComponent(System.Type,System.Object)">
      <summary>Initializes the specified component.</summary>
      <param name="componentType">The type of the component.</param>
      <param name="componentInstance">The component instance.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityXamlServices.Load(System.IO.Stream)">
      <summary>Creates an instance of the declarative workflow described in the specified stream.</summary>
      <returns>An instance of the activity tree that describes the workflow.</returns>
      <param name="stream">The workflow definition.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityXamlServices.Load(System.IO.Stream,System.Activities.XamlIntegration.ActivityXamlServicesSettings)">
      <summary>Creates an instance of the declarative workflow described in the specified stream.</summary>
      <returns>An instance of the activity tree that describes the workflow.</returns>
      <param name="stream">The workflow definition.</param>
      <param name="settings">The XAML service settings.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityXamlServices.Load(System.IO.TextReader)">
      <summary>Creates an instance of the declarative workflow described in the specified text reader.</summary>
      <returns>An instance of the activity tree that describes the workflow.</returns>
      <param name="textReader">The workflow definition.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityXamlServices.Load(System.IO.TextReader,System.Activities.XamlIntegration.ActivityXamlServicesSettings)">
      <summary>Creates an instance of the declarative workflow described in the specified text reader.</summary>
      <returns>An instance of the activity tree that describes the workflow.</returns>
      <param name="textReader">The workflow definition.</param>
      <param name="settings">The XAML service settings.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityXamlServices.Load(System.String)">
      <summary>Creates an instance of the declarative workflow described in the specified file.</summary>
      <returns>An instance of the activity tree that describes the workflow.</returns>
      <param name="fileName">A file that contains the workflow definition.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityXamlServices.Load(System.String,System.Activities.XamlIntegration.ActivityXamlServicesSettings)">
      <summary>Creates an instance of the declarative workflow described in the specified file.</summary>
      <returns>An instance of the activity tree that describes the workflow.</returns>
      <param name="fileName">A file that contains the workflow definition.</param>
      <param name="settings">The XAML service settings.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityXamlServices.Load(System.Xaml.XamlReader)">
      <summary>Creates an instance of the declarative workflow described in the specified XAML reader.</summary>
      <returns>An instance of the activity tree that describes the workflow.</returns>
      <param name="xamlReader">The workflow definition.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityXamlServices.Load(System.Xaml.XamlReader,System.Activities.XamlIntegration.ActivityXamlServicesSettings)">
      <summary>Creates an instance of the declarative workflow described in the specified XAML reader.</summary>
      <returns>An instance of the activity tree that describes the workflow.</returns>
      <param name="xamlReader">The workflow definition.</param>
      <param name="settings">The XAML service settings.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityXamlServices.Load(System.Xml.XmlReader)">
      <summary>Creates an instance of the declarative workflow described in the specified XML reader.</summary>
      <returns>An instance of the activity tree that describes the workflow.</returns>
      <param name="xmlReader">The workflow definition.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityXamlServices.Load(System.Xml.XmlReader,System.Activities.XamlIntegration.ActivityXamlServicesSettings)">
      <summary>Creates an instance of the declarative workflow described in the specified XML reader.</summary>
      <returns>An instance of the activity tree that describes the workflow.</returns>
      <param name="xmlReader">The workflow definition.</param>
      <param name="settings">The XAML service settings.</param>
    </member>
    <member name="T:System.Activities.XamlIntegration.ActivityXamlServicesSettings">
      <summary>Specifies XAML Service settings.</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityXamlServicesSettings.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.XamlIntegration.ActivityXamlServicesSettings" /> class.</summary>
    </member>
    <member name="P:System.Activities.XamlIntegration.ActivityXamlServicesSettings.CompileExpressions">
      <summary>Gets or sets a value that indicates whether the expressions are compiled.</summary>
      <returns>True if the expressions are compiled; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.XamlIntegration.ActivityXamlServicesSettings.LocationReferenceEnvironment">
      <summary>Gets or sets the activity’s location reference environment.</summary>
      <returns>The activity’s location reference environment.</returns>
    </member>
    <member name="T:System.Activities.XamlIntegration.ArgumentValueSerializer">
      <summary>Converts instances of <see cref="T:System.Activities.Argument" /> to instances of <see cref="T:System.String" />. </summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.ArgumentValueSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.XamlIntegration.ArgumentValueSerializer" /> class. </summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.ArgumentValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines whether the specified object can be converted into a <see cref="T:System.String" />.</summary>
      <returns>true if <paramref name="value" /> can be converted into a <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="value">The object to evaluate for conversion.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ArgumentValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts the specified object to a <see cref="T:System.String" />.</summary>
      <returns>A <see cref="T:System.String" /> representation of the specified object.</returns>
      <param name="value">The object to convert into a <see cref="T:System.String" />.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="T:System.Activities.XamlIntegration.AssemblyReferenceConverter">
      <summary>Represents a converter for assembly references.</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.AssemblyReferenceConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.XamlIntegration.AssemblyReferenceConverter" /> class.</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.AssemblyReferenceConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether the specified type can be converted from.</summary>
      <returns>True if the specified type can be converted from; otherwise, false.</returns>
      <param name="context">Context information that is used for conversion.</param>
      <param name="sourceType">The type to convert from.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.AssemblyReferenceConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether the specified type can be converted to.</summary>
      <returns>True if the specified type can be converted to; otherwise, false.</returns>
      <param name="context">Context information that is used for conversion.</param>
      <param name="destinationType">The type to convert to.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.AssemblyReferenceConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the specified value to a new representation specified by the derived class.</summary>
      <returns>True if the specified value to a new representation is converted; otherwise, false.</returns>
      <param name="context">Context information that is used for conversion.</param>
      <param name="culture">An optional culture information.</param>
      <param name="value">The object to convert.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.AssemblyReferenceConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts the specified value to the specified representation.</summary>
      <returns>True if the specified value to the specified representation is converted; otherwise, false.</returns>
      <param name="context">Context information that is used for conversion.</param>
      <param name="culture">An optional culture information.</param>
      <param name="value">The object to convert.</param>
      <param name="destinationType">The type to convert to.</param>
    </member>
    <member name="T:System.Activities.XamlIntegration.CompiledDataContext">
      <summary>Represents the compiled data context.</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.CompiledDataContext.#ctor(System.Collections.Generic.IList{System.Activities.Location})">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.XamlIntegration.CompiledDataContext" /> class using the locations.</summary>
      <param name="locations">The locations.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.CompiledDataContext.#ctor(System.Collections.Generic.IList{System.Activities.LocationReference})">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.XamlIntegration.CompiledDataContext" /> class using the location references.</summary>
      <param name="locationReferences">The location references.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.CompiledDataContext.#ctor(System.Collections.Generic.IList{System.Activities.LocationReference},System.Activities.ActivityContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.XamlIntegration.CompiledDataContext" /> class using the location references and activity context.</summary>
      <param name="locationReferences">The location references.</param>
      <param name="activityContext">The activity context.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.CompiledDataContext.GetCompiledDataContextCache(System.Object,System.Activities.ActivityContext,System.Activities.Activity,System.Boolean,System.Int32)">
      <summary>Retrieves the cache used by the data context.</summary>
      <returns>The data context.</returns>
      <param name="dataContextActivities">The data context activities.</param>
      <param name="activityContext">The activity context.</param>
      <param name="compiledRoot">The compiled root.</param>
      <param name="forImplementation">True if the compiled data context is for implementation; otherwise, false.</param>
      <param name="compiledDataContextCount">The number of compiled data context.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.CompiledDataContext.GetDataContextActivities(System.Activities.Activity,System.Boolean)">
      <summary>Gets the activities for the compiled data using the specified compiled root and implementation.</summary>
      <returns>The activities for the compiled data.</returns>
      <param name="compiledRoot">The compiled root.</param>
      <param name="forImplementation">True if the compiled data context is for implementation; otherwise, false.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.CompiledDataContext.GetLocation``1(System.Func{``0},System.Action{``0})">
      <summary>Retrieves the location of the compiled data context using the specified get and set methods.</summary>
      <returns>The location of the compiled data context.</returns>
      <param name="getMethod">The get method used.</param>
      <param name="setMethod">The set method used.</param>
      <typeparam name="T">The function.</typeparam>
    </member>
    <member name="M:System.Activities.XamlIntegration.CompiledDataContext.GetLocation``1(System.Func{``0},System.Action{``0},System.Int32,System.Activities.Activity,System.Activities.ActivityContext)">
      <summary>Retrieves the location of the compiled data context.</summary>
      <returns>The location of the compiled data context.</returns>
      <param name="getMethod">The get method used.</param>
      <param name="setMethod">The set method used.</param>
      <param name="expressionId">The expression identifier.</param>
      <param name="compiledRootActivity">The compiled root activity.</param>
      <param name="activityContext">The activity context.</param>
      <typeparam name="T">The function.</typeparam>
    </member>
    <member name="M:System.Activities.XamlIntegration.CompiledDataContext.GetValueTypeValues">
      <summary>Gets the value of the value type used by the data context.</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.CompiledDataContext.GetVariableValue(System.Int32)">
      <summary>Gets the value of the variable used by the data context.</summary>
      <returns>The value of the variable used by the data context.</returns>
      <param name="index">The index of the variable</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.CompiledDataContext.RewriteExpressionTree(System.Linq.Expressions.Expression)">
      <summary>Rewrites the expression used by the data context.</summary>
      <returns>The rewritten expression.</returns>
      <param name="originalExpression">The original expression to be rewritten.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.CompiledDataContext.SetValueTypeValues">
      <summary>Returns the value of the value type used by the data context.</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.CompiledDataContext.SetVariableValue(System.Int32,System.Object)">
      <summary>Returns the value of the variable used by the data context.</summary>
      <param name="index">The index of the variable.</param>
      <param name="value">The value of the variable.</param>
    </member>
    <member name="T:System.Activities.XamlIntegration.DynamicUpdateMapConverter">
      <summary>Represents a dynamic update map converter.</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.DynamicUpdateMapConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.XamlIntegration.DynamicUpdateMapConverter" /> class.</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.DynamicUpdateMapConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether the specified type can be converted to.</summary>
      <returns>True if the specified type can be converted to; otherwise, false.</returns>
      <param name="context">Context information that is used for conversion.</param>
      <param name="destinationType">The type to convert to.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.DynamicUpdateMapConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts the specified value to the specified representation.</summary>
      <returns>True if the specified value to the specified representation is converted; otherwise, false.</returns>
      <param name="context">Context information that is used for conversion.</param>
      <param name="culture">An optional culture information.</param>
      <param name="value">The object to convert.</param>
      <param name="destinationType">The type to convert to.</param>
    </member>
    <member name="T:System.Activities.XamlIntegration.DynamicUpdateMapExtension">
      <summary>Specifies dynamic update map extension options.</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.DynamicUpdateMapExtension.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.XamlIntegration.DynamicUpdateMapExtension" /> class.</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.DynamicUpdateMapExtension.#ctor(System.Activities.DynamicUpdate.DynamicUpdateMap)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.XamlIntegration.DynamicUpdateMapExtension" /> class using the update map.</summary>
      <param name="updateMap">The update map.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.DynamicUpdateMapExtension.ProvideValue(System.IServiceProvider)">
      <summary>Specifies the value for service provider.</summary>
      <param name="serviceProvider">The service provider.</param>
    </member>
    <member name="P:System.Activities.XamlIntegration.DynamicUpdateMapExtension.UpdateMap">
      <summary>Gets the extension for the dynamic update map.</summary>
      <returns>The extension for the dynamic update map.</returns>
    </member>
    <member name="P:System.Activities.XamlIntegration.DynamicUpdateMapExtension.XmlContent">
      <summary>Gets the Xml content for the Dynamic Update Map Extension.</summary>
      <returns>The Xml content for the Dynamic Update Map Extension.</returns>
    </member>
    <member name="T:System.Activities.XamlIntegration.DynamicUpdateMapItemConverter">
      <summary>Represents a converter for dynamic update map items.</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.DynamicUpdateMapItemConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.XamlIntegration.DynamicUpdateMapItemConverter" /> class.</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.DynamicUpdateMapItemConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether the specified type can be converted from.</summary>
      <returns>True if the specified type can be converted from; otherwise, false.</returns>
      <param name="context">Context information that is used for conversion.</param>
      <param name="sourceType">The type to convert from.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.DynamicUpdateMapItemConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether the specified type can be converted to.</summary>
      <returns>True if the specified type can be converted to; otherwise, false.</returns>
      <param name="context">Context information that is used for conversion.</param>
      <param name="destinationType">The type to convert to.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.DynamicUpdateMapItemConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the specified value to a new representation specified by the derived class.</summary>
      <returns>True if the specified value to a new representation is converted; otherwise, false.</returns>
      <param name="context">Context information that is used for conversion.</param>
      <param name="culture">An optional culture information.</param>
      <param name="value">The object to convert.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.DynamicUpdateMapItemConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts the specified value to the specified representation.</summary>
      <returns>True if the specified value to the specified representation is converted; otherwise, false.</returns>
      <param name="context">Context information that is used for conversion.</param>
      <param name="culture">An optional culture information.</param>
      <param name="value">The object to convert.</param>
      <param name="destinationType">The type to convert to.</param>
    </member>
    <member name="T:System.Activities.XamlIntegration.FuncDeferringLoader">
      <summary>Represents an object that loads an instance of a saved function.</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.FuncDeferringLoader.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.XamlIntegration.FuncDeferringLoader" /> class. </summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.FuncDeferringLoader.Load(System.Xaml.XamlReader,System.IServiceProvider)">
      <summary>Loads an instance of a function that can be used at any point to deserialize a list of nodes.</summary>
      <returns>An instance of a function. </returns>
      <param name="xamlReader">A list of serialized nodes.</param>
      <param name="context">A context that provides information needed for parsing.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.FuncDeferringLoader.Save(System.Object,System.IServiceProvider)">
      <summary>Serializes the specified <see cref="T:System.Object" /> into a Xaml node list.</summary>
      <returns>A Xaml reader.</returns>
      <param name="value">The object to transform into a Xaml node list.</param>
      <param name="serviceProvider">An object that provides context information for serialization. </param>
    </member>
    <member name="T:System.Activities.XamlIntegration.ICompiledExpressionRoot">
      <summary>Specifies information about a compiled expression root.</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.ICompiledExpressionRoot.CanExecuteExpression(System.String,System.Boolean,System.Collections.Generic.IList{System.Activities.LocationReference},System.Int32@)">
      <summary>Indicates whether the <see cref="T:System.Activities.XamlIntegration.ICompiledExpressionRoot" /> can execute expression.</summary>
      <returns>True if the <see cref="T:System.Activities.XamlIntegration.ICompiledExpressionRoot" /> can execute expression; otherwise, false.</returns>
      <param name="expressionText">The expression text used.</param>
      <param name="isReference">True if reference; otherwise, false.</param>
      <param name="locations">The collection of locations.</param>
      <param name="expressionId">The expression identifier.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ICompiledExpressionRoot.GetExpressionTreeForExpression(System.Int32,System.Collections.Generic.IList{System.Activities.LocationReference})">
      <summary>Gets the expression tree used for the expression.</summary>
      <returns>The expression tree used for the expression.</returns>
      <param name="expressionId">The expression identifier.</param>
      <param name="locationReferences">The location reference.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ICompiledExpressionRoot.GetLanguage">
      <summary>Gets the language used in the expression root.</summary>
      <returns>The language used.</returns>
    </member>
    <member name="M:System.Activities.XamlIntegration.ICompiledExpressionRoot.GetRequiredLocations(System.Int32)">
      <summary>Gets the list of required locations for the expression root.</summary>
      <returns>The list of required locations for the expression root.</returns>
      <param name="expressionId">The expression identifier.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ICompiledExpressionRoot.InvokeExpression(System.Int32,System.Collections.Generic.IList{System.Activities.Location})">
      <summary>Invokes the <see cref="T:System.Activities.XamlIntegration.ICompiledExpressionRoot" /> using the specified expression identifier and locations.</summary>
      <returns>The invoked expression.</returns>
      <param name="expressionId">The expression identifier.</param>
      <param name="locations">The locations used.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ICompiledExpressionRoot.InvokeExpression(System.Int32,System.Collections.Generic.IList{System.Activities.LocationReference},System.Activities.ActivityContext)">
      <summary>Invokes the <see cref="T:System.Activities.XamlIntegration.ICompiledExpressionRoot" /> using the specified expression identifier and locations and activity context.</summary>
      <returns>The invoked expression.</returns>
      <param name="expressionId">The expression identifier.</param>
      <param name="locations">The locations.</param>
      <param name="activityContext">The activity context.</param>
    </member>
    <member name="T:System.Activities.XamlIntegration.ImplementationVersionConverter">
      <summary>Represents a converter for implementation versions.</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.ImplementationVersionConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.XamlIntegration.ImplementationVersionConverter" /> class.</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.ImplementationVersionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether the specified type can be converted from.</summary>
      <returns>True if the specified type can be converted from; otherwise, false.</returns>
      <param name="context">Context information that is used for conversion.</param>
      <param name="sourceType">The type to convert from.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ImplementationVersionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether the specified type can be converted to.</summary>
      <returns>True if the specified type can be converted to; otherwise, false.</returns>
      <param name="context">Context information that is used for conversion.</param>
      <param name="destinationType">The type to convert to.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ImplementationVersionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the specified value to a new representation specified by the derived class.</summary>
      <returns>True if the specified value to a new representation is converted; otherwise, false.</returns>
      <param name="context">Context information that is used for conversion.</param>
      <param name="culture">An optional culture information.</param>
      <param name="value">The object to convert.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ImplementationVersionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts the specified value to the specified representation.</summary>
      <returns>True if the specified value to the specified representation is converted; otherwise, false.</returns>
      <param name="context">Context information that is used for conversion.</param>
      <param name="culture">An optional culture information.</param>
      <param name="value">The object to convert.</param>
      <param name="destinationType">The type to convert to.</param>
    </member>
    <member name="T:System.Activities.XamlIntegration.InArgumentConverter">
      <summary>Provides a type converter to convert <see cref="T:System.Activities.InArgument" /> classes to and from various other representations. </summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.InArgumentConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.XamlIntegration.InArgumentConverter" /> class. </summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.InArgumentConverter.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.XamlIntegration.InArgumentConverter" /> class using the specified type.</summary>
      <param name="type">The type of the associated <see cref="T:System.Activities.InArgument" />.</param>
    </member>
    <member name="T:System.Activities.XamlIntegration.InOutArgumentConverter">
      <summary>Provides a type converter to convert <see cref="T:System.Activities.InOutArgument" /> classes to and from various other representations. </summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.InOutArgumentConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.XamlIntegration.InOutArgumentConverter" /> class. </summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.InOutArgumentConverter.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.XamlIntegration.InOutArgumentConverter" /> class using the specified type.</summary>
      <param name="type">The type of the associated <see cref="T:System.Activities.InOutArgument" />.</param>
    </member>
    <member name="T:System.Activities.XamlIntegration.IValueSerializableExpression">
      <summary>Provides methods for converting expressions to strings.</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.IValueSerializableExpression.CanConvertToString(System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines whether the expression can be converted into a string.</summary>
      <returns>true if the expression can be converted into a string; otherwise, false.</returns>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.IValueSerializableExpression.ConvertToString(System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts an expression to a string.</summary>
      <returns>A string representation of the expression. </returns>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="T:System.Activities.XamlIntegration.OutArgumentConverter">
      <summary>Provides a type converter to convert <see cref="T:System.Activities.OutArgument" /> classes to and from various other representations. </summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.OutArgumentConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.XamlIntegration.OutArgumentConverter" /> class. </summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.OutArgumentConverter.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.XamlIntegration.OutArgumentConverter" /> class using the specified type.</summary>
      <param name="type">The type of the associated <see cref="T:System.Activities.OutArgument" />.</param>
    </member>
    <member name="T:System.Activities.XamlIntegration.PropertyReferenceExtension`1">
      <summary>Provides access to properties contained in an x:Class document.</summary>
      <typeparam name="T">The type of the associated property.</typeparam>
    </member>
    <member name="M:System.Activities.XamlIntegration.PropertyReferenceExtension`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.XamlIntegration.PropertyReferenceExtension`1" /> class. </summary>
    </member>
    <member name="P:System.Activities.XamlIntegration.PropertyReferenceExtension`1.PropertyName">
      <summary>Get or sets the name of the associated property.</summary>
      <returns>The name of the property.</returns>
    </member>
    <member name="M:System.Activities.XamlIntegration.PropertyReferenceExtension`1.ProvideValue(System.IServiceProvider)">
      <summary>Retrieves the value of the associated property.</summary>
      <returns>The property value.</returns>
      <param name="serviceProvider">An object that provides services for the markup extension.</param>
    </member>
    <member name="T:System.Activities.XamlIntegration.SerializableFuncDeferringLoader">
      <summary>Represents a serializable function deferring loader.</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.SerializableFuncDeferringLoader.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.XamlIntegration.SerializableFuncDeferringLoader" /> class.</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.SerializableFuncDeferringLoader.Load(System.Xaml.XamlReader,System.IServiceProvider)">
      <summary>Loads an instance of a function that can be used at any point to deserialize a list of nodes.</summary>
      <returns>An instance of a function.</returns>
      <param name="xamlReader">A list of serialized nodes.</param>
      <param name="context">A context that provides information needed for parsing.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.SerializableFuncDeferringLoader.Save(System.Object,System.IServiceProvider)">
      <summary>Serializes the specified object into a Xaml node list.</summary>
      <returns>The specified object into a Xaml node list.</returns>
      <param name="value">The object to transform into a Xaml node list.</param>
      <param name="serviceProvider">An object that provides context information for serialization.</param>
    </member>
    <member name="T:System.Activities.XamlIntegration.TextExpressionCompiler">
      <summary>Represents the text expression compiler.</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.TextExpressionCompiler.#ctor(System.Activities.XamlIntegration.TextExpressionCompilerSettings)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.XamlIntegration.TextExpressionCompiler" /> class.</summary>
      <param name="settings">The settings used.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.TextExpressionCompiler.Compile">
      <summary>Compiles the <see cref="T:System.Activities.XamlIntegration.TextExpressionCompiler" />.</summary>
      <returns>The result of the compiled <see cref="T:System.Activities.XamlIntegration.TextExpressionCompiler" />.</returns>
    </member>
    <member name="M:System.Activities.XamlIntegration.TextExpressionCompiler.GenerateSource(System.IO.TextWriter)">
      <summary>Indicated whether the <see cref="T:System.Activities.XamlIntegration.TextExpressionCompiler" /> generates sources.</summary>
      <returns>True if the <see cref="T:System.Activities.XamlIntegration.TextExpressionCompiler" /> generates sources; otherwise, false.</returns>
      <param name="textWriter">The argument used.</param>
    </member>
    <member name="T:System.Activities.XamlIntegration.TextExpressionCompilerError">
      <summary>Represents a text expression compiler error.</summary>
    </member>
    <member name="P:System.Activities.XamlIntegration.TextExpressionCompilerError.IsWarning">
      <summary>Gets or sets a value that indicates whether the compiler error is a warning.</summary>
      <returns>true if the compiler error is a warning; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.XamlIntegration.TextExpressionCompilerError.Message">
      <summary>Gets or sets the message that contains information about the error.</summary>
      <returns>The message that contains information about the error.</returns>
    </member>
    <member name="P:System.Activities.XamlIntegration.TextExpressionCompilerError.Number">
      <summary>Gets or sets the number of the error.</summary>
      <returns>The number of the error.</returns>
    </member>
    <member name="P:System.Activities.XamlIntegration.TextExpressionCompilerError.SourceLineNumber">
      <summary>Gets or sets the source line number of the error.</summary>
      <returns>The source line number of the error.</returns>
    </member>
    <member name="T:System.Activities.XamlIntegration.TextExpressionCompilerResults">
      <summary>Specifies information about text expression compiler results.</summary>
    </member>
    <member name="P:System.Activities.XamlIntegration.TextExpressionCompilerResults.CompilerMessages">
      <summary>Gets the results of the compiler messages.</summary>
      <returns>The results of the compiler messages.</returns>
    </member>
    <member name="P:System.Activities.XamlIntegration.TextExpressionCompilerResults.HasErrors">
      <summary>Gets or sets a value that indicates whether the result has errors.</summary>
      <returns>True if the result has errors; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.XamlIntegration.TextExpressionCompilerResults.HasSourceInfo">
      <summary>Gets or sets a value that indicates whether the information has source.</summary>
      <returns>True if the information has source; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.XamlIntegration.TextExpressionCompilerResults.ResultType">
      <summary>Gets or sets the results type.</summary>
      <returns>The results type.</returns>
    </member>
    <member name="T:System.Activities.XamlIntegration.TextExpressionCompilerSettings">
      <summary>Specifies text expression compiler settings.</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.TextExpressionCompilerSettings.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.XamlIntegration.TextExpressionCompilerSettings" /> class.</summary>
    </member>
    <member name="P:System.Activities.XamlIntegration.TextExpressionCompilerSettings.Activity">
      <summary>Gets or sets the activity of the compiler settings.</summary>
      <returns>The activity of the compiler settings.</returns>
    </member>
    <member name="P:System.Activities.XamlIntegration.TextExpressionCompilerSettings.ActivityName">
      <summary>Gets or sets the name of the activity for the compiler settings.</summary>
      <returns>The name of the activity.</returns>
    </member>
    <member name="P:System.Activities.XamlIntegration.TextExpressionCompilerSettings.ActivityNamespace">
      <summary>Gets or sets the namespace of the activity.</summary>
      <returns>The namespace of the activity.</returns>
    </member>
    <member name="P:System.Activities.XamlIntegration.TextExpressionCompilerSettings.AlwaysGenerateSource">
      <summary>Gets or sets a value that indicates whether the text expression compiler settings always generate source.</summary>
      <returns>true if the text expression compiler settings always generate source; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.XamlIntegration.TextExpressionCompilerSettings.ForImplementation">
      <summary>Gets or sets whether the <see cref="T:System.Activities.XamlIntegration.TextExpressionCompilerSettings" /> is for implementation.</summary>
      <returns>True of the <see cref="T:System.Activities.XamlIntegration.TextExpressionCompilerSettings" /> is for implementation; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.XamlIntegration.TextExpressionCompilerSettings.GenerateAsPartialClass">
      <summary>Gets or sets whether the <see cref="T:System.Activities.XamlIntegration.TextExpressionCompilerSettings" /> generates as partial class.</summary>
      <returns>True if the <see cref="T:System.Activities.XamlIntegration.TextExpressionCompilerSettings" /> generates as partial class; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.XamlIntegration.TextExpressionCompilerSettings.Language">
      <summary>Gets or sets the language used by the <see cref="T:System.Activities.XamlIntegration.TextExpressionCompilerSettings" />.</summary>
      <returns>The language used by the <see cref="T:System.Activities.XamlIntegration.TextExpressionCompilerSettings" />.</returns>
    </member>
    <member name="P:System.Activities.XamlIntegration.TextExpressionCompilerSettings.LogSourceGenerationMessage">
      <summary>Gets or sets the log source generation message for the <see cref="T:System.Activities.XamlIntegration.TextExpressionCompilerSettings" />.</summary>
      <returns>The log source generation message for the <see cref="T:System.Activities.XamlIntegration.TextExpressionCompilerSettings" />.</returns>
    </member>
    <member name="P:System.Activities.XamlIntegration.TextExpressionCompilerSettings.RootNamespace">
      <summary>Gets or sets the root namespace for the <see cref="T:System.Activities.XamlIntegration.TextExpressionCompilerSettings" />.</summary>
      <returns>The root namespace for the <see cref="T:System.Activities.XamlIntegration.TextExpressionCompilerSettings" />.</returns>
    </member>
    <member name="T:System.Activities.XamlIntegration.TypeConverterBase">
      <summary>Provides methods that derived type converter classes can use for converting objects to and from various representations. </summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.TypeConverterBase.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>When overridden in a derived class, determines whether the specified type can be converted from.</summary>
      <returns>true if the specified type can be converted from; otherwise, false.</returns>
      <param name="context">Context information that is used for conversion.</param>
      <param name="sourceType">The type to convert from.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.TypeConverterBase.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>When overridden in a derived class, determines whether the specified type can be converted to.</summary>
      <returns>true if the specified type can be converted to; otherwise, false.</returns>
      <param name="context">Context information that is used for conversion.</param>
      <param name="destinationType">The type to convert to.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.TypeConverterBase.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>When overridden in a derived class, converts the specified value to a new representation specified by the derived class.</summary>
      <returns>The converted value.</returns>
      <param name="context">Context information that is used for conversion.</param>
      <param name="culture">An optional <see cref="T:System.Globalization.CultureInfo" />. If not supplied, the current culture is assumed.</param>
      <param name="value">The object to convert.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.TypeConverterBase.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>When overridden in a derived class, converts the specified value to the specified representation.</summary>
      <returns>The converted value.</returns>
      <param name="context">Context information that is used for conversion.</param>
      <param name="culture">An optional <see cref="T:System.Globalization.CultureInfo" />. If not supplied, the current culture is assumed.</param>
      <param name="value">The object to convert.</param>
      <param name="destinationType">The type to convert to.</param>
    </member>
    <member name="T:System.Activities.XamlIntegration.WorkflowIdentityConverter">
      <summary>Represents a workflow identity converter.</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.WorkflowIdentityConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.XamlIntegration.WorkflowIdentityConverter" /> class.</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.WorkflowIdentityConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether the specified type can be converted from.</summary>
      <returns>True if the specified type can be converted from; otherwise, false.</returns>
      <param name="context">Context information that is used for conversion.</param>
      <param name="sourceType">The type to convert from.</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.WorkflowIdentityConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the specified value to a new representation specified by the derived class.</summary>
      <returns>True if the specified value to a new representation is converted; otherwise, false.</returns>
      <param name="context">Context information that is used for conversion.</param>
      <param name="culture">An optional culture information.</param>
      <param name="value">The object to convert.</param>
    </member>
  </members>
</doc>