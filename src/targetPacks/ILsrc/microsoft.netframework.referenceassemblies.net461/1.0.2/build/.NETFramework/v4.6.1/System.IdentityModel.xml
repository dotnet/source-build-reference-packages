<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.IdentityModel</name>
  </assembly>
  <members>
    <member name="T:System.IdentityModel.AsynchronousOperationException">
      <summary>The exception that is thrown when an error occurs during an asynchronous operation.</summary>
    </member>
    <member name="M:System.IdentityModel.AsynchronousOperationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.AsynchronousOperationException" /> class.</summary>
    </member>
    <member name="M:System.IdentityModel.AsynchronousOperationException.#ctor(System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.AsynchronousOperationException" /> class with a system-supplied error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="innerException">The <see cref="T:System.Exception" /> that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="M:System.IdentityModel.AsynchronousOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.AsynchronousOperationException" /> class with serialized data.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains the contextual information about the source or destination.</param>
    </member>
    <member name="M:System.IdentityModel.AsynchronousOperationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.AsynchronousOperationException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.IdentityModel.AsynchronousOperationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.AsynchronousOperationException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The <see cref="T:System.Exception" /> that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="T:System.IdentityModel.AsyncResult">
      <summary>An abstract base class that implements the <see cref="T:System.IAsyncResult" /> interface. Serves as a base class from which to derive <see cref="T:System.IAsyncResult" /> objects that can be used for common asynchronous programming scenarios.</summary>
    </member>
    <member name="M:System.IdentityModel.AsyncResult.#ctor">
      <summary>Called from constructors in derived classes to initialize an instance of the <see cref="T:System.IdentityModel.AsyncResult" /> class that does not have a callback delegate or  a state object.</summary>
    </member>
    <member name="M:System.IdentityModel.AsyncResult.#ctor(System.AsyncCallback,System.Object)">
      <summary>Called from constructors in derived classes to initialize an instance of the <see cref="T:System.IdentityModel.AsyncResult" /> class that has a callback delegate and  a state object.</summary>
      <param name="callback">The method to be called when the asynchronous operation completes.</param>
      <param name="state">A user-defined object that qualifies or contains information about an asynchronous operation.</param>
    </member>
    <member name="M:System.IdentityModel.AsyncResult.#ctor(System.Object)">
      <summary>Called from constructors in derived classes to initialize an instance of the <see cref="T:System.IdentityModel.AsyncResult" /> class that does not have a callback delegate but does have  a state object.</summary>
      <param name="state">A user-defined object that qualifies or contains information about an asynchronous operation.</param>
    </member>
    <member name="P:System.IdentityModel.AsyncResult.AsyncState">
      <summary>Gets a user-defined object that qualifies or contains information about an asynchronous operation.</summary>
      <returns>A user-defined object that qualifies or contains information about an asynchronous operation.</returns>
    </member>
    <member name="P:System.IdentityModel.AsyncResult.AsyncWaitHandle">
      <summary>Gets a <see cref="T:System.Threading.WaitHandle" /> that is used to wait for an asynchronous operation to complete.</summary>
      <returns>A <see cref="T:System.Threading.WaitHandle" /> that is used to wait for an asynchronous operation to complete.</returns>
    </member>
    <member name="M:System.IdentityModel.AsyncResult.Complete(System.Boolean)">
      <summary>Call this version of complete when your asynchronous operation is complete and no exception was encountered. It updates the state of the operation and notifies the callback.</summary>
      <param name="completedSynchronously">true if the asynchronous operation completed synchronously; otherwise false.</param>
    </member>
    <member name="M:System.IdentityModel.AsyncResult.Complete(System.Boolean,System.Exception)">
      <summary>Call this version of complete if you raise an exception during processing. In addition to notifying the callback, it captures the exception and stores it to be thrown during the call to the <see cref="M:System.IdentityModel.AsyncResult.End(System.IAsyncResult)" /> method.</summary>
      <param name="completedSynchronously">true if the asynchronous operation completed synchronously; otherwise false.</param>
      <param name="exception">The exception that occurred during the processing of the asynchronous operation.</param>
    </member>
    <member name="P:System.IdentityModel.AsyncResult.CompletedSynchronously">
      <summary>Gets a value that indicates whether the asynchronous operation completed synchronously.</summary>
      <returns>true if the asynchronous operation completed synchronously; otherwise, false.</returns>
    </member>
    <member name="M:System.IdentityModel.AsyncResult.Dispose">
      <summary>Releases the resources used by the current instance of the <see cref="T:System.IdentityModel.AsyncResult" /> class.</summary>
    </member>
    <member name="M:System.IdentityModel.AsyncResult.Dispose(System.Boolean)">
      <summary>Called by the <see cref="M:System.IdentityModel.AsyncResult.Dispose" /> and <see cref="M:System.IdentityModel.AsyncResult.Finalize" /> methods to release the managed and unmanaged resources used by the current instance of the <see cref="T:System.IdentityModel.AsyncResult" /> class.</summary>
      <param name="isExplicitDispose">true to release managed and unmanaged resources; false to release only unmanaged resources. true indicates that this is an explicit call to Dispose.</param>
    </member>
    <member name="M:System.IdentityModel.AsyncResult.End(System.IAsyncResult)">
      <summary>Call this method when the End function for the asynchronous operation is complete. It ensures that the asynchronous operation is complete, and does some common validation.</summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> representing the status of the asynchronous operation.</param>
    </member>
    <member name="M:System.IdentityModel.AsyncResult.Finalize">
      <summary>Allows the <see cref="T:System.IdentityModel.AsyncResult" /> object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</summary>
    </member>
    <member name="P:System.IdentityModel.AsyncResult.IsCompleted">
      <summary>Gets a value that indicates whether the asynchronous operation has completed.</summary>
      <returns>true if the operation is complete; otherwise, false.</returns>
    </member>
    <member name="T:System.IdentityModel.BadRequestException">
      <summary>The exception that is thrown when a token request (RST) is not understood by the security token service (STS).</summary>
    </member>
    <member name="M:System.IdentityModel.BadRequestException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.BadRequestException" /> class.</summary>
    </member>
    <member name="M:System.IdentityModel.BadRequestException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.BadRequestException" /> class with serialized data.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains the contextual information about the source or destination.</param>
    </member>
    <member name="M:System.IdentityModel.BadRequestException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.BadRequestException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.IdentityModel.BadRequestException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.BadRequestException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The <see cref="T:System.Exception" /> that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="T:System.IdentityModel.CookieTransform">
      <summary>The abstract base class for classes that apply a reversible data transform to cookie data.</summary>
    </member>
    <member name="M:System.IdentityModel.CookieTransform.#ctor">
      <summary>Called from constructors in derived classes to initialize the <see cref="T:System.IdentityModel.CookieTransform" /> class.</summary>
    </member>
    <member name="M:System.IdentityModel.CookieTransform.Decode(System.Byte[])">
      <summary>When overridden in a derived class, reverses the transform.</summary>
      <returns>The decoded byte array.</returns>
      <param name="encoded">The encoded form of the cookie.</param>
    </member>
    <member name="M:System.IdentityModel.CookieTransform.Encode(System.Byte[])">
      <summary>When overridden in a derived class, applies the transform.</summary>
      <returns>The encoded cookie.</returns>
      <param name="value">The byte array to be encoded.</param>
    </member>
    <member name="T:System.IdentityModel.DeflateCookieTransform">
      <summary>Provides cookie compression using <see cref="T:System.IO.Compression.DeflateStream" />.</summary>
    </member>
    <member name="M:System.IdentityModel.DeflateCookieTransform.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.DeflateCookieTransform" /> class.</summary>
    </member>
    <member name="M:System.IdentityModel.DeflateCookieTransform.Decode(System.Byte[])">
      <summary>Inflates data.</summary>
      <returns>The decoded data.</returns>
      <param name="encoded">Data previously returned from <see cref="M:System.IdentityModel.DeflateCookieTransform.Encode(System.Byte[])" /></param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> contains zero bytes.</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">The decompressed length is larger than the maximum length specified by the <see cref="P:System.IdentityModel.DeflateCookieTransform.MaxDecompressedSize" /> property.</exception>
    </member>
    <member name="M:System.IdentityModel.DeflateCookieTransform.Encode(System.Byte[])">
      <summary>Deflates data.</summary>
      <returns>The compressed data.</returns>
      <param name="value">The data to be compressed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> contains zero bytes.</exception>
    </member>
    <member name="P:System.IdentityModel.DeflateCookieTransform.MaxDecompressedSize">
      <summary>Gets or sets the maximum size, in bytes, of a decompressed cookie.</summary>
      <returns>The maximum size, in bytes, of a decompressed cookie.</returns>
    </member>
    <member name="T:System.IdentityModel.DelegatingXmlDictionaryReader">
      <summary>A class that wraps a specified reader and delegates all <see cref="T:System.Xml.XmlDictionaryReader" /> calls to the wrapped reader.</summary>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryReader.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.DelegatingXmlDictionaryReader" /> class.</summary>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.AttributeCount">
      <summary>Gets the number of attributes at the current reader position.</summary>
      <returns>The number of attributes.</returns>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.BaseURI">
      <summary>Gets the base URI of the current node.</summary>
      <returns>The base URI.</returns>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryReader.Close">
      <summary>Closes the reader and changes the <see cref="P:System.Xml.XmlReader.ReadState" /> to Closed.</summary>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.Depth">
      <summary>Gets the Depth of the current node.</summary>
      <returns>The depth.</returns>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.EOF">
      <summary>Gets a value that indicates whether the reader is positioned at the end of the stream.</summary>
      <returns>true if the user is at the end of the stream; otherwise, false.</returns>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryReader.GetAttribute(System.Int32)">
      <summary>Gets the value of the attribute at the given index.</summary>
      <returns>The value of the attribute at the specified index.</returns>
      <param name="i">The index of the attribute. The index is 0 based index.</param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryReader.GetAttribute(System.String)">
      <summary>Gets the value of the attribute with the given name.</summary>
      <returns>The value of the attribute. If the attribute is not found null is returned.</returns>
      <param name="name">The qualified name of the attribute.</param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryReader.GetAttribute(System.String,System.String)">
      <summary>Gets the value of the attribute with the given name and namespace Uri.</summary>
      <returns>The value of the attribute. If the attribute is not found null is returned.</returns>
      <param name="name">The local name of the attribute.</param>
      <param name="namespaceURI">The namespace of the attribute.</param>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.HasValue">
      <summary>Gets a value that indicates whether the current node can have a <see cref="P:System.Xml.XmlReader.Value" />.</summary>
      <returns>true if the current node can have a <see cref="P:System.Xml.XmlReader.Value" />; otherwise, false.</returns>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryReader.InitializeInnerReader(System.Xml.XmlDictionaryReader)">
      <summary>Initializes this instance with the specified inner reader.</summary>
      <param name="innerReader">The reader that is to be wrapped by this instance.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="innerReader" /> is null.</exception>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.InnerReader">
      <summary>Gets the inner reader that is wrapped by this instance.</summary>
      <returns>The inner reader.</returns>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.IsDefault">
      <summary>Gets a value that indicates whether the current node is an attribute that was generated from the default value defined in the DTD or Schema.</summary>
      <returns>true if the current node was generated from the default value; otherwise, false.</returns>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.IsEmptyElement">
      <summary>Gets a value that indicates whether the current node is an empty element.</summary>
      <returns>true if the current node is an empty element; otherwise, false.</returns>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.Item(System.Int32)">
      <summary>Gets the value of the attribute with the specified index.</summary>
      <returns>The attribute value at the specified index.</returns>
      <param name="i">The index of the attribute.</param>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.Item(System.String)">
      <summary>Gets the value of the attribute with the specified name (as returned by the <see cref="P:System.Xml.XmlReader.Name" /> property from the wrapped reader).</summary>
      <returns>The value of the specified attribute. If the attribute is not found, null is returned.</returns>
      <param name="name">The qualified name of the attribute.</param>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.Item(System.String,System.String)">
      <summary>Gets the value of the attribute with the specified local name and namespace URI (as returned by the <see cref="P:System.Xml.XmlReader.LocalName" /> property and the <see cref="P:System.Xml.XmlReader.NamespaceURI" /> property from the wrapped reader.</summary>
      <returns>The value of the specified attribute. If the attribute is not found, null is returned.</returns>
      <param name="name">The local name of the attribute.</param>
      <param name="namespaceURI">The namespace URI of the attribute.</param>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.LocalName">
      <summary>Gets the local name of the current node.</summary>
      <returns>The name of the current node with the prefix removed.</returns>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryReader.LookupNamespace(System.String)">
      <summary>Resolves a namespace prefix in the current element scope.</summary>
      <returns>The namespace Uri to which the prefix matches or null if no matching prefix is found.</returns>
      <param name="prefix">Prefix whose namespace Uri to be resolved.</param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryReader.MoveToAttribute(System.Int32)">
      <summary>Moves to the attribute with the specified index.</summary>
      <param name="i">The index of the attribute.</param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryReader.MoveToAttribute(System.String)">
      <summary>Moves to the attribute with the given local name.</summary>
      <returns>true if the attribute is found; otherwise, false.</returns>
      <param name="name">The qualified name of the attribute.</param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryReader.MoveToAttribute(System.String,System.String)">
      <summary>Moves to the attribute with the specified System.Xml.XmlReader.LocalName and System.Xml.XmlReader.NamespaceURI.</summary>
      <returns>true if the attribute is found; otherwise, false.</returns>
      <param name="name">The local name of the attribute.</param>
      <param name="ns">The namespace URI of the attribute.</param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryReader.MoveToElement">
      <summary>Moves to a node of type Element.</summary>
      <returns>true if the reader is positioned on an element else false</returns>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryReader.MoveToFirstAttribute">
      <summary>Moves to the first attribute.</summary>
      <returns>Returns true if the reader is positioned at a attribute else false.</returns>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryReader.MoveToNextAttribute">
      <summary>Moves the reader to the next attribute.</summary>
      <returns>Returns true if the reader is positioned at an attribute else false.</returns>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.Name">
      <summary>Gets the qualified name of the current node.</summary>
      <returns>The qualified name of the current node.</returns>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.NamespaceURI">
      <summary>Gets the namespace URI of the current node.</summary>
      <returns>The namespace URI of the current node..</returns>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.NameTable">
      <summary>Gets the <see cref="T:System.Xml.XmlNameTable" /> associated with this instance.</summary>
      <returns>The <see cref="T:System.Xml.XmlNameTable" /> enabling you to get the atomized version of a string within the node.</returns>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.NodeType">
      <summary>Gets the type of the current node.</summary>
      <returns>One of the <see cref="T:System.Xml.XmlNodeType" /> values representing the type of the current node.</returns>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.Prefix">
      <summary>Gets the namespace prefix associated with the current node.</summary>
      <returns>The namespace prefix associated with the current node.</returns>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.QuoteChar">
      <summary>Gets the quotation mark character used to enclose the value of an attribute node. (" or ').</summary>
      <returns>The quotation mark character (" or ') used to enclose the value of an attribute node.</returns>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryReader.Read">
      <summary>Reads the next node from the stream.</summary>
      <returns>true if the next node was read successfully.</returns>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryReader.ReadAttributeValue">
      <summary>Parses the attribute value into one or more Text, EntityReference, or EndEntity nodes.</summary>
      <returns>true if there are nodes to return.false if the reader is not positioned on an attribute node when the initial call is made or if all the attribute values have been read.</returns>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads the content and returns the Base64 decoded binary bytes.</summary>
      <returns>The number of bytes written to the buffer.</returns>
      <param name="buffer">The buffer into which to copy the resulting text. This value cannot be null.</param>
      <param name="index">The offset into the buffer where to start copying the result.</param>
      <param name="count">The maximum number of bytes to copy into the buffer.</param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads the content and returns the BinHex decoded binary bytes.</summary>
      <returns>The number of bytes written to the buffer.</returns>
      <param name="buffer">The buffer into which to copy the resulting text. This value cannot be null.</param>
      <param name="index">The offset into the buffer where to start copying the result.</param>
      <param name="count">The maximum number of bytes to copy into the buffer.</param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryReader.ReadContentAsUniqueId">
      <summary>Reads the content and returns the contained string.</summary>
      <returns>Returns <see cref="T:System.Xml.UniqueId" />.</returns>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.ReadState">
      <summary>Gets the state of the reader.</summary>
      <returns>One of the <see cref="T:System.Xml.ReadState" /> values that specifies the state of the reader.</returns>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)">
      <summary>Reads large streams of text embedded in an XML document.</summary>
      <returns>The number of characters read into the buffer. The value zero is returned when there is no more text content.</returns>
      <param name="buffer">The array of characters that serves as the buffer to which the text contents are written. This value cannot be null.</param>
      <param name="index">The offset within the buffer where the System.Xml.XmlReader can start to copy the results.</param>
      <param name="count">The maximum number of characters to copy into the buffer. The actual number of characters copied is returned from this method.</param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryReader.ResolveEntity">
      <summary>Resolves the entity reference for EntityReference nodes.</summary>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.Value">
      <summary>Gets the text value of the current node.</summary>
      <returns>The text value of the current node. For more information, see the <see cref="P:System.Xml.XmlReader.Value" /> property</returns>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.ValueType">
      <summary>Gets the Common Language Runtime (CLR) type of the current node.</summary>
      <returns>The CLR type that corresponds to the typed value of the node. The default is <see cref="T:System.String" />.</returns>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.XmlLang">
      <summary>Gets the xml:lang scope.</summary>
      <returns>The xml:lang scope.</returns>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.XmlSpace">
      <summary>Gets the current xml:space scope. </summary>
      <returns>One of the <see cref="T:System.Xml.XmlSpace" /> values. If no xml:space scope exists, this property defaults to <see cref="F:System.Xml.XmlSpace.None" />.</returns>
    </member>
    <member name="T:System.IdentityModel.DelegatingXmlDictionaryWriter">
      <summary>A class that wraps a specified writer and delegates all <see cref="T:System.Xml.XmlDictionaryWriter" /> calls to the wrapped writer.</summary>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.DelegatingXmlDictionaryWriter" /> class.</summary>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryWriter.CanCanonicalize">
      <summary>Returns a value indicating if the reader is capable of Canonicalization.</summary>
      <returns>true if the reader is capable of Canonicalization; otherwise, false.</returns>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.Close">
      <summary>Closes the underlying stream.</summary>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.EndCanonicalization">
      <summary>When implemented by a derived class, it stops the canonicalization started by the matching <see cref="M:System.Xml.XmlDictionaryWriter.StartCanonicalization(System.IO.Stream,System.Boolean,System.String[])" /> call.</summary>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.Flush">
      <summary>Flushes the underlying stream.</summary>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.InitializeInnerWriter(System.Xml.XmlDictionaryWriter)">
      <summary>Initializes this instance with the specified inner writer.</summary>
      <param name="innerWriter">The writer that is to be wrapped by this instance.</param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.InitializeTracingWriter(System.Xml.XmlWriter)">
      <summary>Initializes this instance with a writer to which all calls will be echoed and that will write non-canonical XML.</summary>
      <param name="tracingWriter">A writer to which all calls will be echoed. If null, calls are not echoed.</param>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryWriter.InnerWriter">
      <summary>Get the wrapped writer.</summary>
      <returns>Returns a <see cref="T:System.Xml.XmlDictionaryWriter" />.</returns>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.LookupPrefix(System.String)">
      <summary>Returns the closest prefix defined in the current namespace scope for the namespace URI.</summary>
      <returns>The matching prefix or null if no matching namespace URI is found in the current scope.</returns>
      <param name="ns">The namespace URI whose prefix you want to find.</param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.StartCanonicalization(System.IO.Stream,System.Boolean,System.String[])">
      <param name="stream">Stream to which the canonical stream should be written.</param>
      <param name="includeComments">The value indicates if comments written should be canonicalized as well.</param>
      <param name="inclusivePrefixes">Set of prefixes that needs to be included into the canonical stream. The prefixes are defined at the first element that is written to the canonical stream.</param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>Encodes the specified binary bytes as Base64 and writes out the resulting text.</summary>
      <param name="buffer">Byte array to encode.</param>
      <param name="index">The position in the buffer indicating the start of the bytes to write.</param>
      <param name="count">The number of bytes to write.</param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteCData(System.String)">
      <summary>writes out a CDATA block containing the specified text.</summary>
      <param name="text">The text to place inside the CDATA block.</param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteCharEntity(System.Char)">
      <summary>Forces the generation of a character entity for the specified Unicode character value.</summary>
      <param name="ch">The Unicode character for which to generate a character entity.</param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
      <summary>When overridden in a derived class, writes text one buffer at a time.</summary>
      <param name="buffer">Character array containing the text to write.</param>
      <param name="index">The position in the buffer indicating the start of the text to write.</param>
      <param name="count">The number of characters to write.</param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteComment(System.String)">
      <summary>Writes out a comment containing the specified text.</summary>
      <param name="text">Text to place inside the comment.</param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteDocType(System.String,System.String,System.String,System.String)">
      <summary>Writes the DOCTYPE declaration with the specified name and optional attributes.</summary>
      <param name="name">The name of the DOCTYPE. This must be non-empty.</param>
      <param name="pubid">If non-null it also writes PUBLIC "pubid" "sysid" where pubid and sysid are replaced with the value of the given arguments.</param>
      <param name="sysid">If pubid is null and sysid is non-null it writes SYSTEM "sysid" where sysid is replaced with the value of this argument.</param>
      <param name="subset">If non-null it writes [subset] where subset is replaced with the value of this argument.</param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteEndAttribute">
      <summary>Closes the previous System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String) call.</summary>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteEndDocument">
      <summary>Closes any open elements or attributes and puts the writer back in the Start state.</summary>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteEndElement">
      <summary>Closes one element and pops the corresponding namespace scope.</summary>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteEntityRef(System.String)">
      <summary>Writes out an entity reference as name.</summary>
      <param name="name">The name of the entity reference.</param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteFullEndElement">
      <summary>Closes one element and pops the corresponding namespace scope.</summary>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteProcessingInstruction(System.String,System.String)">
      <summary>Writes out a processing instruction with a space between the name and text as follows: &amp;lt;?name text?&amp;gt;.</summary>
      <param name="name">The name of the processing instruction.</param>
      <param name="text">The text to include in the processing instruction.</param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
      <summary>When overridden in a derived class, writes raw markup manually from a character buffer.</summary>
      <param name="buffer">Character array containing the text to write.</param>
      <param name="index">The position within the buffer indicating the start of the text to write.</param>
      <param name="count">The number of characters to write.</param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteRaw(System.String)">
      <summary>Writes raw markup manually from a string.</summary>
      <param name="data">String containing the text to write.</param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteStartAttribute(System.String,System.String,System.String)">
      <summary>Writes the start of an attribute with the specified local name and namespace URI.</summary>
      <param name="prefix">The namespace prefix of the attribute.</param>
      <param name="localName">The local name of the attribute.</param>
      <param name="ns">The namespace URI for the attribute.</param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteStartDocument">
      <summary>When overridden in a derived class, writes the XML declaration with the version "1.0".</summary>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteStartDocument(System.Boolean)">
      <summary>When overridden in a derived class, writes the XML declaration with the version "1.0" and the standalone attribute.</summary>
      <param name="standalone">If true, it writes "standalone=yes"; if false, it writes "standalone=no".</param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteStartElement(System.String,System.String,System.String)">
      <summary>When overridden in a derived class, writes the specified start tag and associates it with the given namespace and prefix.</summary>
      <param name="prefix">The namespace prefix of the element.</param>
      <param name="localName">The local name of the element.</param>
      <param name="ns">The namespace URI to associate with the element.</param>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteState">
      <summary>When overridden in a derived class, gets the state of the writer.</summary>
      <returns>Returns an <see cref="T:System.Xml.WriteState" />.</returns>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteString(System.String)">
      <summary>Writes the given text content.</summary>
      <param name="text">The text to write.</param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
      <summary>Generates and writes the surrogate character entity for the surrogate character pair.</summary>
      <param name="lowChar">The low surrogate. This must be a value between 0xDC00 and 0xDFFF.</param>
      <param name="highChar">The high surrogate. This must be a value between 0xD800 and 0xDBFF.</param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteWhitespace(System.String)">
      <summary>Writes out the given white space.</summary>
      <param name="ws">The string of white space characters.</param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteXmlAttribute(System.String,System.String)">
      <summary>Writes an attribute as a xml attribute with the prefix 'xml:'.</summary>
      <param name="localName">Localname of the attribute.</param>
      <param name="value">Attribute value.</param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteXmlnsAttribute(System.String,System.String)">
      <summary>Writes an xmlns namespace declaration.</summary>
      <param name="prefix">The prefix of the namespace declaration.</param>
      <param name="namespaceUri">The namespace Uri itself.</param>
    </member>
    <member name="T:System.IdentityModel.EnvelopedSignatureReader">
      <summary>Wraps a reader that is pointing to enveloped signed XML to provide a reader that can be used to read the content without having to process the signature. The signature is automatically validated when the last element of the envelope is read. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.IdentityModel.EnvelopedSignatureReader.#ctor(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenSerializer)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.EnvelopedSignatureReader" /> class by using the specified reader and security token serializer.</summary>
      <param name="reader">A reader that is pointing to the enveloped signed XML.</param>
      <param name="securityTokenSerializer">The token serializer to be used to deserialize the <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> of the signature.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.-or-<paramref name="securityTokenSerializer" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.EnvelopedSignatureReader.#ctor(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.EnvelopedSignatureReader" /> class by using the specified reader, security token serializer, and token resolver.</summary>
      <param name="reader">A reader that is pointing to the enveloped signed XML.</param>
      <param name="securityTokenSerializer">The token serializer to be used to deserialize the <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> of the signature.</param>
      <param name="signingTokenResolver">The token resolver to be used to resolve the signing token. null specifies that a default security token resolver should be used.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.-or-<paramref name="securityTokenSerializer" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.EnvelopedSignatureReader.#ctor(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver,System.Boolean,System.Boolean,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.EnvelopedSignatureReader" /> class by using the specified reader, security token serializer, token resolver, and behavior.</summary>
      <param name="reader">A reader that is pointing to the enveloped signed XML.</param>
      <param name="securityTokenSerializer">The token serializer to be used to deserialize the <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> of the signature.</param>
      <param name="signingTokenResolver">The token resolver to be used to resolve the signing token. null specifies that a default security token resolver should be used.</param>
      <param name="requireSignature">true if the signature is required; otherwise, false.</param>
      <param name="automaticallyReadSignature">true if the signature should be read; otherwise, false.</param>
      <param name="resolveIntrinsicSigningKeys">true if intrinsic signing keys should be resolved; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.-or-<paramref name="securityTokenSerializer" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.EnvelopedSignatureReader.Read">
      <summary>Reads the next node from the stream.</summary>
      <returns>true if the next node was read successfully; false if there are no more nodes.</returns>
    </member>
    <member name="P:System.IdentityModel.EnvelopedSignatureReader.SigningCredentials">
      <summary>Gets the signing credentials that are used in the signature, after the envelope is consumed and when the signature is validated.</summary>
      <returns>The signing credentials.</returns>
    </member>
    <member name="M:System.IdentityModel.EnvelopedSignatureReader.TryReadSignature">
      <summary>Reads the signature if the reader is currently positioned at a &lt;Signature&gt; element.</summary>
      <returns>true if the signature was successfully read; otherwise, false.</returns>
    </member>
    <member name="T:System.IdentityModel.EnvelopedSignatureWriter">
      <summary>Wraps a writer and generates a signature automatically when the envelope has been completely written. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.IdentityModel.EnvelopedSignatureWriter.#ctor(System.Xml.XmlWriter,System.IdentityModel.Tokens.SigningCredentials,System.String,System.IdentityModel.Selectors.SecurityTokenSerializer)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.EnvelopedSignatureWriter" /> class.</summary>
      <param name="innerWriter">The writer to wrap.</param>
      <param name="signingCredentials">The signing credentials to be used to generate the signature.</param>
      <param name="referenceId">The reference ID of the envelope.</param>
      <param name="securityTokenSerializer">The token serializer to use to serialize the signature KeyInfo.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="referenceId" /> is null or empty.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="innerWriter" /> is null.-or-<paramref name="signingCredentials" /> is null.-or-<paramref name="securityTokenSerializer" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.EnvelopedSignatureWriter.WriteEndElement">
      <summary>Closes one element and pops the corresponding namespace scope.</summary>
    </member>
    <member name="M:System.IdentityModel.EnvelopedSignatureWriter.WriteFullEndElement">
      <summary>Closes one element and pops the corresponding namespace scope.</summary>
    </member>
    <member name="M:System.IdentityModel.EnvelopedSignatureWriter.WriteSignature">
      <summary>Sets the position of the signature within the envelope. Call this method while writing the envelope to indicate at which point the signature should be inserted.</summary>
    </member>
    <member name="M:System.IdentityModel.EnvelopedSignatureWriter.WriteStartElement(System.String,System.String,System.String)">
      <summary>Writes the specified start tag and associates it with the specified namespace.</summary>
      <param name="prefix">The namespace prefix of the element.</param>
      <param name="localName">The local name of the element. (The name of the element without the prefix.)</param>
      <param name="ns">The namespace URI to associate with the element.</param>
    </member>
    <member name="T:System.IdentityModel.LimitExceededException">
      <summary>The exception that is thrown when a configured limit or quota is exceeded.</summary>
    </member>
    <member name="M:System.IdentityModel.LimitExceededException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.LimitExceededException" /> class.</summary>
    </member>
    <member name="M:System.IdentityModel.LimitExceededException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.LimitExceededException" /> class with serialized data.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains the contextual information about the source or destination.</param>
    </member>
    <member name="M:System.IdentityModel.LimitExceededException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.LimitExceededException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.IdentityModel.LimitExceededException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.LimitExceededException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The <see cref="T:System.Exception" /> that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="T:System.IdentityModel.OpenObject">
      <summary>An abstract class that provides a generic property bag to derived classes.</summary>
    </member>
    <member name="M:System.IdentityModel.OpenObject.#ctor">
      <summary>Called from derived classes to initialize the <see cref="T:System.IdentityModel.OpenObject" /> class.</summary>
    </member>
    <member name="P:System.IdentityModel.OpenObject.Properties">
      <summary>Get the properties bag to extend the object.</summary>
      <returns>The properties bag to extend the object.</returns>
    </member>
    <member name="T:System.IdentityModel.ProtectedDataCookieTransform">
      <summary>Provides cookie integrity and confidentiality by using the <see cref="T:System.Security.Cryptography.ProtectedData" /> class. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.IdentityModel.ProtectedDataCookieTransform.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.IdentityModel.ProtectedDataCookieTransform" /> class.</summary>
    </member>
    <member name="M:System.IdentityModel.ProtectedDataCookieTransform.Decode(System.Byte[])">
      <summary>Verifies data protection and returns the decrypted data.</summary>
      <returns>The decrypted data that was originally protected.</returns>
      <param name="encoded">Data previously returned from the <see cref="M:System.IdentityModel.ProtectedDataCookieTransform.Encode(System.Byte[])" /> method.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="encoded" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="encoded" /> contains zero bytes.</exception>
    </member>
    <member name="M:System.IdentityModel.ProtectedDataCookieTransform.Encode(System.Byte[])">
      <summary>Protects (encrypts) the specified data.</summary>
      <returns>The protected (encrypted) data.</returns>
      <param name="value">The data to be protected (encrypted).</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> contains zero bytes.</exception>
    </member>
    <member name="T:System.IdentityModel.RequestException">
      <summary>The base class for exceptions thrown on request failures.</summary>
    </member>
    <member name="M:System.IdentityModel.RequestException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.RequestException" /> class.</summary>
    </member>
    <member name="M:System.IdentityModel.RequestException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.RequestException" /> class with serialized data.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains the contextual information about the source or destination.</param>
    </member>
    <member name="M:System.IdentityModel.RequestException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.RequestException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.IdentityModel.RequestException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.RequestException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The <see cref="T:System.Exception" /> that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="T:System.IdentityModel.RequestFailedException">
      <summary>The exception that is thrown if the specified request (RST) failed due to an external reason that cannot be specifically determined.</summary>
    </member>
    <member name="M:System.IdentityModel.RequestFailedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.RequestFailedException" /> class.</summary>
    </member>
    <member name="M:System.IdentityModel.RequestFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.RequestFailedException" /> class with serialized data.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains the contextual information about the source or destination.</param>
    </member>
    <member name="M:System.IdentityModel.RequestFailedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.RequestFailedException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.IdentityModel.RequestFailedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.RequestFailedException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The <see cref="T:System.Exception" /> that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="T:System.IdentityModel.RsaEncryptionCookieTransform">
      <summary>Encrypts a cookie using <see cref="T:System.Security.Cryptography.RSA" />.</summary>
    </member>
    <member name="M:System.IdentityModel.RsaEncryptionCookieTransform.#ctor(System.Security.Cryptography.RSA)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.RsaEncryptionCookieTransform" /> class that uses the specified key for encryption and decryption.</summary>
      <param name="key">The key to use as the default encryption and decryption key. Initializes the <see cref="P:System.IdentityModel.RsaEncryptionCookieTransform.DecryptionKeys" /> and <see cref="P:System.IdentityModel.RsaEncryptionCookieTransform.EncryptionKey" /> properties.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.RsaEncryptionCookieTransform.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.RsaEncryptionCookieTransform" /> class that uses the private key of the specified X.509 certificate for encryption and decryption.</summary>
      <param name="certificate">The certificate whose private key is used to encrypt and decrypt.The certificate whose private key will be used as the default encryption and decryption key. Initializes the <see cref="P:System.IdentityModel.RsaEncryptionCookieTransform.DecryptionKeys" /> and <see cref="P:System.IdentityModel.RsaEncryptionCookieTransform.EncryptionKey" /> properties.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="certificate" /> does not have a private key.-or-The private key is not RSA.</exception>
    </member>
    <member name="M:System.IdentityModel.RsaEncryptionCookieTransform.Decode(System.Byte[])">
      <summary>Decrypts the specified data by using the provided RSA key(s) to decrypt an AES key, which decrypts the cookie.</summary>
      <returns>The decoded data</returns>
      <param name="encoded">The encoded data</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="encoded" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="encoded" /> contains zero bytes.</exception>
      <exception cref="T:System.NotSupportedException">The platform does not support the requested algorithm.</exception>
      <exception cref="T:System.InvalidOperationException">There are no decryption keys or none of the keys match.</exception>
    </member>
    <member name="P:System.IdentityModel.RsaEncryptionCookieTransform.DecryptionKeys">
      <summary>Gets the keys used for decryption By default, this property returns a list that contains only the encryption key.</summary>
      <returns>The keys to use for decryption.</returns>
    </member>
    <member name="M:System.IdentityModel.RsaEncryptionCookieTransform.Encode(System.Byte[])">
      <summary>Encodes the specified data. The data is encrypted using the default encryption algorithm (AES-256), then the AES key is encrypted using RSA and the RSA public key is appended.</summary>
      <returns>The encoded data</returns>
      <param name="value">The data to encode</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> contains zero bytes.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.IdentityModel.RsaEncryptionCookieTransform.EncryptionKey" /> is null.</exception>
    </member>
    <member name="P:System.IdentityModel.RsaEncryptionCookieTransform.EncryptionKey">
      <summary>Gets or sets the RSA key used for encryption</summary>
      <returns>The RSA key used for encryption.</returns>
    </member>
    <member name="P:System.IdentityModel.RsaEncryptionCookieTransform.HashName">
      <summary>Gets or sets the name of the hash algorithm to use.</summary>
      <returns>The name of the hash algorithm to use. The default is “SHA2566”.</returns>
    </member>
    <member name="T:System.IdentityModel.RsaSignatureCookieTransform">
      <summary>Provides cookie integrity using an <see cref="T:System.Security.Cryptography.RSA" /> signature.</summary>
    </member>
    <member name="M:System.IdentityModel.RsaSignatureCookieTransform.#ctor(System.Security.Cryptography.RSA)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.RsaSignatureCookieTransform" /> class by using the specified RSA key.</summary>
      <param name="key">The RSA key to use as the default signing and verification key.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.RsaSignatureCookieTransform.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.RsaSignatureCookieTransform" /> class by using the private key of the specified certificate.</summary>
      <param name="certificate">The certificate whose private key is to be used for signing and verifying.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="certificate" /> has no private key-or-The private key of the <paramref name="certificate" /> is not an RSA key.</exception>
    </member>
    <member name="M:System.IdentityModel.RsaSignatureCookieTransform.Decode(System.Byte[])">
      <summary>Verifies the specified signature and returns the original, unsigned data.</summary>
      <returns>The original data (unsigned).</returns>
      <param name="encoded">Data previously returned from the <see cref="M:System.IdentityModel.RsaSignatureCookieTransform.Encode(System.Byte[])" /> method.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="encoded" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="encoded" /> contains zero bytes.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The signature is not valid.</exception>
      <exception cref="T:System.FormatException">The data is in the wrong format.</exception>
      <exception cref="T:System.InvalidOperationException">There are no verification keys.</exception>
      <exception cref="T:System.NotSupportedException">The platform does not support the specified algorithm.</exception>
    </member>
    <member name="M:System.IdentityModel.RsaSignatureCookieTransform.Encode(System.Byte[])">
      <summary>Signs the specified data.</summary>
      <returns>The signed data.</returns>
      <param name="value">The data to be signed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> contains zero bytes.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.IdentityModel.RsaSignatureCookieTransform.SigningKey" /> property is null.-or-The key specified by the <see cref="P:System.IdentityModel.RsaSignatureCookieTransform.SigningKey" /> property is not assignable as <see cref="T:System.Security.Cryptography.RSACryptoServiceProvider" />.-or-The key specified by the <see cref="P:System.IdentityModel.RsaSignatureCookieTransform.SigningKey" /> property does not contain a private key.</exception>
      <exception cref="T:System.NotSupportedException">The operating system does not support the specified algorithm.</exception>
    </member>
    <member name="P:System.IdentityModel.RsaSignatureCookieTransform.HashName">
      <summary>Gets or sets the name of the hash algorithm to use.</summary>
      <returns>The name of the hash algorithm. The default is “SHA256”.</returns>
    </member>
    <member name="P:System.IdentityModel.RsaSignatureCookieTransform.SigningKey">
      <summary>Gets or sets the RSA key that is used for signing.</summary>
      <returns>The RSA key that is used for signing.</returns>
    </member>
    <member name="P:System.IdentityModel.RsaSignatureCookieTransform.VerificationKeys">
      <summary>Gets the collection of keys used for signature verification. By default, this property returns a list that contains only the signing key.</summary>
      <returns>The collection of keys used for signature verification.</returns>
    </member>
    <member name="T:System.IdentityModel.Scope">
      <summary>Represents the configuration for the token issuance request.</summary>
    </member>
    <member name="M:System.IdentityModel.Scope.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Scope" /> class.</summary>
    </member>
    <member name="M:System.IdentityModel.Scope.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Scope" /> class with the specified appliesTo address.</summary>
      <param name="appliesToAddress">The appliesTo address of the relying party. This is typically a URI.</param>
    </member>
    <member name="M:System.IdentityModel.Scope.#ctor(System.String,System.IdentityModel.Tokens.EncryptingCredentials)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Scope" /> class with the specified appliesTo address and encrypting credentials.</summary>
      <param name="appliesToAddress">The appliesTo address of the relying party. This is typically a URI.</param>
      <param name="encryptingCredentials">The encrypting credentials for the relying party.</param>
    </member>
    <member name="M:System.IdentityModel.Scope.#ctor(System.String,System.IdentityModel.Tokens.SigningCredentials)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Scope" /> class with the specified appliesTo address and signing credentials.</summary>
      <param name="appliesToAddress">The appliesTo address of the relying party. This is typically a URI.</param>
      <param name="signingCredentials">The signing credentials for the relying party.</param>
    </member>
    <member name="M:System.IdentityModel.Scope.#ctor(System.String,System.IdentityModel.Tokens.SigningCredentials,System.IdentityModel.Tokens.EncryptingCredentials)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Scope" /> class with the specified appliesTo address, signing credentials, and encrypting credentials.</summary>
      <param name="appliesToAddress">The appliesTo address of the relying party. This is typically a URI.</param>
      <param name="signingCredentials">The signing credentials for the relying party.</param>
      <param name="encryptingCredentials">The encrypting credentials for the relying party.</param>
    </member>
    <member name="P:System.IdentityModel.Scope.AppliesToAddress">
      <summary>Gets or sets the appliesTo address of the relying party.</summary>
      <returns>The appliesTo address of the relying party. This is typically a URI.</returns>
    </member>
    <member name="P:System.IdentityModel.Scope.EncryptingCredentials">
      <summary>Gets or sets the encrypting credentials for the relying party.</summary>
      <returns>The encrypting credentials to be used for the relying party.</returns>
    </member>
    <member name="P:System.IdentityModel.Scope.Properties">
      <summary>Gets the properties bag to extend the object.</summary>
      <returns>The properties bag.</returns>
    </member>
    <member name="P:System.IdentityModel.Scope.ReplyToAddress">
      <summary>Gets or sets the replyTo address of the relying party.</summary>
      <returns>The replyTo address of the relying party. This is typically a URI.</returns>
    </member>
    <member name="P:System.IdentityModel.Scope.SigningCredentials">
      <summary>Gets or sets the signing credentials for the relying party.</summary>
      <returns>The signing credentials to be used for the relying party.</returns>
    </member>
    <member name="P:System.IdentityModel.Scope.SymmetricKeyEncryptionRequired">
      <summary>Gets or sets a value that indicates whether issued symmetric keys must be encrypted.</summary>
      <returns>true if symmetric keys must be encrypted; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.IdentityModel.Scope.TokenEncryptionRequired">
      <summary>Gets or sets a value that indicates whether issued security tokens must be encrypted.</summary>
      <returns>true if security tokens must be encrypted; otherwise, false. The default is true.</returns>
    </member>
    <member name="T:System.IdentityModel.SecurityMessageSerializationException">
      <summary>The exception that is thrown when an error occurs while serializing a security message.</summary>
    </member>
    <member name="M:System.IdentityModel.SecurityMessageSerializationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.SecurityMessageSerializationException" /> class.</summary>
    </member>
    <member name="M:System.IdentityModel.SecurityMessageSerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.SecurityMessageSerializationException" /> class with serialized data.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains the contextual information about the source or destination.</param>
    </member>
    <member name="M:System.IdentityModel.SecurityMessageSerializationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.SecurityMessageSerializationException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.IdentityModel.SecurityMessageSerializationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.SecurityMessageSerializationException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The <see cref="T:System.Exception" /> that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="T:System.IdentityModel.SecurityTokenService">
      <summary>The abstract base class that defines the properties and methods of a security token service (STS).</summary>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.#ctor(System.IdentityModel.Configuration.SecurityTokenServiceConfiguration)">
      <summary>Called from derived classes to initialize the <see cref="T:System.IdentityModel.SecurityTokenService" /> class using the specified configuration settings.</summary>
      <param name="securityTokenServiceConfiguration">A <see cref="T:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration" /> that contains the settings for the STS.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="securityTokenServiceConfiguration" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.BeginCancel(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)">
      <summary>When overridden in a derived class, begins an asynchronous WS-Trust Cancel request.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous cancel operation.</returns>
      <param name="principal">A <see cref="T:System.Security.Claims.ClaimsPrincipal" /> that represents the identity of the token requestor.</param>
      <param name="request">A <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> that represents the security token request. This includes the request message as well as other client related information such as authorization context.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives notification of the completion of the asynchronous cancel operation.</param>
      <param name="state">An object that contains state information associated with the asynchronous cancel operation.</param>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.BeginGetOutputClaimsIdentity(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope,System.AsyncCallback,System.Object)">
      <summary>When overridden in a derived class, begins an asynchronous call to the <see cref="M:System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope)" /> method.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
      <param name="principal">A <see cref="T:System.Security.Claims.ClaimsPrincipal" /> that represents the identity of the token requestor.</param>
      <param name="request">A <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> that represents the security token request. This includes the request message as well as other client related information such as authorization context.</param>
      <param name="scope">The <see cref="T:System.IdentityModel.Scope" /> that contains information about the relying party associated with the request. </param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives notification of the completion of the asynchronous operation.</param>
      <param name="state">An object that contains state information associated with the asynchronous operation.</param>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.BeginGetScope(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)">
      <summary>When overridden in a derived class, begins an asynchronous call for the <see cref="M:System.IdentityModel.SecurityTokenService.GetScope(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)" /> method.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous cancel operation.</returns>
      <param name="principal">A <see cref="T:System.Security.Claims.ClaimsPrincipal" /> that represents the identity of the token requestor.</param>
      <param name="request">A <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> that represents the security token request. This includes the request message as well as other client related information such as authorization context.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives notification of the completion of the asynchronous operation.</param>
      <param name="state">An object that contains state information associated with the asynchronous operation.</param>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.BeginIssue(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)">
      <summary>When overridden in a derived class, begins an asynchronous WS-Trust Issue request.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous issue operation.</returns>
      <param name="principal">A <see cref="T:System.Security.Claims.ClaimsPrincipal" /> that represents the identity of the token requestor.</param>
      <param name="request">A <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> that represents the security token request. This includes the request message as well as other client related information such as authorization context.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives notification of the completion of the asynchronous issue operation.</param>
      <param name="state">An object that contains state information associated with the asynchronous issue operation.</param>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.BeginRenew(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)">
      <summary>When overridden in a derived class, begins an asynchronous WS-Trust Renew request.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous renew operation.</returns>
      <param name="principal">A <see cref="T:System.Security.Claims.ClaimsPrincipal" /> that represents the identity of the token requestor.</param>
      <param name="request">A <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> that represents the security token request. This includes the request message as well as other client related information such as authorization context.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives notification of the completion of the asynchronous renew operation.</param>
      <param name="state">An object that contains state information associated with the asynchronous renew operation.</param>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.BeginValidate(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)">
      <summary>When overridden in a derived class, begins an asynchronous WS-Trust Validate request.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous validate operation.</returns>
      <param name="principal">A <see cref="T:System.Security.Claims.ClaimsPrincipal" /> that represents the identity of the token requestor.</param>
      <param name="request">A <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> that represents the security token request. This includes the request message as well as other client related information such as authorization context.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives notification of the completion of the asynchronous validate operation.</param>
      <param name="state">An object that contains state information associated with the asynchronous validate operation.</param>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.Cancel(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)">
      <summary>When overridden in a derived class, processes a WS-Trust Cancel request.</summary>
      <returns>A <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> that represents the RSTR to return to the caller.</returns>
      <param name="principal">A <see cref="T:System.Security.Claims.ClaimsPrincipal" /> that represents the identity of the token requestor.</param>
      <param name="request">A <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> that represents the security token request. This includes the request message as well as other client related information such as authorization context.</param>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.CreateSecurityTokenDescriptor(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope)">
      <summary>Creates an instance of a <see cref="P:System.IdentityModel.SecurityTokenService.SecurityTokenDescriptor" />.</summary>
      <returns>The <see cref="P:System.IdentityModel.SecurityTokenService.SecurityTokenDescriptor" />.</returns>
      <param name="request">The incoming token request.</param>
      <param name="scope">The <see cref="P:System.IdentityModel.SecurityTokenService.Scope" /> object returned from <see cref="M:System.IdentityModel.SecurityTokenService.GetScope(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="request" /> is null.-or-<paramref name="scope" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.EndCancel(System.IAsyncResult)">
      <summary>When overridden in a derived class, completes the asynchronous WS-Trust Cancel request.</summary>
      <returns>A <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> that represents the RSTR to return to the caller.</returns>
      <param name="result">The <see cref="T:System.IAsyncResult" /> that is returned by a call to the <see cref="M:System.IdentityModel.SecurityTokenService.BeginCancel(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)" /> method.</param>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.EndGetOutputClaimsIdentity(System.IAsyncResult)">
      <summary>When overridden in a derived class, completes the asynchronous call to the <see cref="M:System.IdentityModel.SecurityTokenService.BeginGetOutputClaimsIdentity(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope,System.AsyncCallback,System.Object)" /> method.</summary>
      <returns>A <see cref="T:System.Security.Claims.ClaimsIdentity" /> that contains the collection of claims that will be placed in the issued security token.</returns>
      <param name="result">The <see cref="T:System.IAsyncResult" /> that is returned by a call to the <see cref="M:System.IdentityModel.SecurityTokenService.BeginGetOutputClaimsIdentity(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope,System.AsyncCallback,System.Object)" /> method.</param>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.EndGetScope(System.IAsyncResult)">
      <summary>When overridden in a derived class, completes the asynchronous call to the <see cref="M:System.IdentityModel.SecurityTokenService.BeginGetScope(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)" /> method.</summary>
      <returns>A <see cref="T:System.IdentityModel.Scope" /> that encapsulates the relying party (RP) information associated with the request (RST) specified in the call to the <see cref="M:System.IdentityModel.SecurityTokenService.BeginGetScope(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)" /> method.</returns>
      <param name="result">The <see cref="T:System.IAsyncResult" /> that is returned by a call to the <see cref="M:System.IdentityModel.SecurityTokenService.BeginGetScope(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)" /> method.</param>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.EndIssue(System.IAsyncResult)">
      <summary>When overridden in a derived class, completes the asynchronous WS-Trust Issue request.</summary>
      <returns>A <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> that represents the RSTR to return to the caller.</returns>
      <param name="result">The <see cref="T:System.IAsyncResult" /> that is returned by a call to the <see cref="M:System.IdentityModel.SecurityTokenService.BeginIssue(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)" /> method.</param>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.EndRenew(System.IAsyncResult)">
      <summary>When overridden in a derived class, completes the asynchronous WS-Trust Renew request.</summary>
      <returns>A <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> that represents the RSTR to return to the caller.</returns>
      <param name="result">The <see cref="T:System.IAsyncResult" /> that is returned by a call to the <see cref="M:System.IdentityModel.SecurityTokenService.BeginRenew(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)" /> method.</param>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.EndValidate(System.IAsyncResult)">
      <summary>When overridden in a derived class, completes the asynchronous WS-Trust Validate request.</summary>
      <returns>A <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> that represents the RSTR to return to the caller.</returns>
      <param name="result">The <see cref="T:System.IAsyncResult" /> that is returned by a call to the <see cref="M:System.IdentityModel.SecurityTokenService.BeginValidate(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)" /> method.</param>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.GetIssuerName">
      <summary>Gets the name of the security token service (STS).</summary>
      <returns>The issuer name.</returns>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope)">
      <summary>When overridden in a derived class, this method returns a collection of output subjects to be included in the issued token.</summary>
      <returns>A <see cref="T:System.Security.Claims.ClaimsIdentity" /> that contains the collection of claims that will be placed in the issued security token.</returns>
      <param name="principal">A <see cref="T:System.Security.Claims.ClaimsPrincipal" /> that represents the identity of the token requestor.</param>
      <param name="request">A <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> that represents the security token request. This includes the request message as well as other client related information such as authorization context.</param>
      <param name="scope">The <see cref="T:System.IdentityModel.Scope" /> that contains information about the relying party associated with the request. This is the <see cref="T:System.IdentityModel.Scope" /> object that was returned by the <see cref="M:System.IdentityModel.SecurityTokenService.GetScope(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)" /> method.</param>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.GetProofToken(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope)">
      <summary>Gets the proof token to be included in the response (RSTR).</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.ProofDescriptor" /> that represents the newly created proof descriptor. The proof descriptor can be an asymmetric proof descriptor, a symmetric proof descriptor, or null in the bearer token case.</returns>
      <param name="request">A <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> that represents the incoming token request (RST).</param>
      <param name="scope">The <see cref="T:System.IdentityModel.Scope" /> instance that encapsulates information about the relying party.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="request" /> is null.-or-<paramref name="scope" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.GetRequestorProofEncryptingCredentials(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)">
      <summary>Gets the requestor's proof encrypting credentials.</summary>
      <returns>An <see cref="T:System.IdentityModel.Tokens.EncryptingCredentials" /> object that represents the requestor’s encrypting credentials.</returns>
      <param name="request">A <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> that represents the incoming token request (RST).</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="request" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.GetResponse(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>Creates the response (RSTR) that contains the issued token by using the specified request (RST) and security token descriptor.</summary>
      <returns>The response (RSTR) or null if a response cannot be created from the specified request and token descriptor. The default implementation returns null if the <paramref name="tokenDescriptor" /> parameter is null.</returns>
      <param name="request">The RST that contains the token request.</param>
      <param name="tokenDescriptor">The token descriptor that contains the information to use for the issued token.</param>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.GetScope(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)">
      <summary>Gets a <see cref="T:System.IdentityModel.Scope" /> object that contains information about the relying party (RP) associated with the specified request (RST). You must override this method in your implementation of the <see cref="T:System.IdentityModel.SecurityTokenService" /> class.</summary>
      <returns>A <see cref="T:System.IdentityModel.Scope" /> that encapsulates the RP information associated with the request. </returns>
      <param name="principal">A <see cref="T:System.Security.Claims.ClaimsPrincipal" /> that represents the client making the request.</param>
      <param name="request">A <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> that represents the incoming request (RST).</param>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.GetSecurityTokenHandler(System.String)">
      <summary>Gets the appropriate security token handler for issuing a security token of the specified type.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" /> that represents the token handler to be used for creating the issued security token. Returns null if the requested token type is not supported (there is no handler configured for the specified token type).</returns>
      <param name="requestedTokenType">A string that contains the requested token type URI.</param>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.GetTokenLifetime(System.IdentityModel.Protocols.WSTrust.Lifetime)">
      <summary>Gets the lifetime for the issued token.</summary>
      <returns>A <see cref="T:System.IdentityModel.Protocols.WSTrust.Lifetime" /> that represents the granted lifetime.</returns>
      <param name="requestLifetime">A <see cref="T:System.IdentityModel.Protocols.WSTrust.Lifetime" /> that represents the requested lifetime.</param>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.Issue(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)">
      <summary>Issues a security token.</summary>
      <returns>A <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> that contains the issued security token.</returns>
      <param name="principal">A <see cref="T:System.Security.Claims.ClaimsPrincipal" /> that represents the identity of the token requestor.</param>
      <param name="request">A <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> that represents the security token request. This includes the request message as well as other client related information such as authorization context.</param>
    </member>
    <member name="P:System.IdentityModel.SecurityTokenService.Principal">
      <summary>Gets or sets the principal associated with the current instance.</summary>
      <returns>A <see cref="T:System.Security.Claims.ClaimsPrincipal" /> that represents the current principal.</returns>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.Renew(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)">
      <summary>When overridden in a derived class, processes a WS-Trust Renew request.</summary>
      <returns>A <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> that represents the RSTR to return to the caller.</returns>
      <param name="principal">A <see cref="T:System.Security.Claims.ClaimsPrincipal" /> that represents the identity of the token requestor.</param>
      <param name="request">A <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> that represents the security token request. This includes the request message as well as other client related information such as authorization context.</param>
    </member>
    <member name="P:System.IdentityModel.SecurityTokenService.Request">
      <summary>Gets or sets the security token request (RST) associated with the current instance.</summary>
      <returns>A <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> that contains the request.</returns>
    </member>
    <member name="P:System.IdentityModel.SecurityTokenService.Scope">
      <summary>Gets or sets the scope associated with the current instance.</summary>
      <returns>A <see cref="T:System.IdentityModel.Scope" /> that represents the configuration for the token issuance request.</returns>
    </member>
    <member name="P:System.IdentityModel.SecurityTokenService.SecurityTokenDescriptor">
      <summary>Gets or sets the <see cref="T:System.IdentityModel.Tokens.SecurityTokenDescriptor" /> associated with the current instance.</summary>
      <returns>The security token descriptor that is associated with the current instance.</returns>
      <exception cref="T:System.ArgumentNullException">An attempt to set the property to null occurs.</exception>
    </member>
    <member name="P:System.IdentityModel.SecurityTokenService.SecurityTokenServiceConfiguration">
      <summary>Gets the owner configuration instance.</summary>
      <returns>A <see cref="T:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration" /> that contains the configuration for the current instance.</returns>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.Validate(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)">
      <summary>When overridden in a derived class, processes a WS-Trust Validate request.</summary>
      <returns>A <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> that represents the RSTR to return to the caller.</returns>
      <param name="principal">A <see cref="T:System.Security.Claims.ClaimsPrincipal" /> that represents the identity of the token requestor.</param>
      <param name="request">A <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> that represents the security token request. This includes the request message as well as other client related information such as authorization context.</param>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.ValidateRequest(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)">
      <summary>Validates the security token request (RST) encapsulated by this instance.</summary>
      <param name="request">A <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> that represents the request.</param>
      <exception cref="T:System.IdentityModel.Protocols.WSTrust.InvalidRequestException">
        <paramref name="request" /> is null.-or-The <see cref="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.RequestType" /> property of the request is not set to <see cref="F:System.IdentityModel.Protocols.WSTrust.RequestTypes.Issue" />.-or-The <see cref="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.KeyType" /> property of the request is not null or one of the constants defined in the <see cref="T:System.IdentityModel.Protocols.WSTrust.KeyTypes" /> class.-or-The <see cref="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.KeyType" /> of the request is <see cref="F:System.IdentityModel.Protocols.WSTrust.KeyTypes.Bearer" /> and the KeySize element is present, but its value is not equal to zero.</exception>
      <exception cref="T:System.IdentityModel.UnsupportedTokenTypeBadRequestException">The STS does not support the request token type (based on the value of the <see cref="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.TokenType" /> property of the request).</exception>
    </member>
    <member name="T:System.IdentityModel.SecurityTokenService.FederatedAsyncState">
      <summary>This class is used to maintain the request state across asynchronous calls within a security token service.</summary>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.FederatedAsyncState.#ctor(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.Security.Claims.ClaimsPrincipal,System.IAsyncResult)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.SecurityTokenService.FederatedAsyncState" /> class with the specified token request (RST), token requestor, and <see cref="T:System.IAsyncResult" /> object.</summary>
      <param name="request">The token request.</param>
      <param name="principal">The identity of the requestor.</param>
      <param name="result">An <see cref="T:System.IAsyncResult" /> that represents the status of the asynchronous call.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="request" /> is null.-or-<paramref name="result" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.FederatedAsyncState.#ctor(System.IdentityModel.SecurityTokenService.FederatedAsyncState)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.SecurityTokenService.FederatedAsyncState" /> class from the specified <see cref="T:System.IdentityModel.SecurityTokenService.FederatedAsyncState" /> object. This constructor effectively creates a copy of the specified instance.</summary>
      <param name="federatedAsyncState">The <see cref="T:System.IdentityModel.SecurityTokenService.FederatedAsyncState" /> instance from which to create the new instance.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="federatedAsyncState" /> is null.</exception>
    </member>
    <member name="P:System.IdentityModel.SecurityTokenService.FederatedAsyncState.ClaimsPrincipal">
      <summary>Gets the identity of the token requestor associated with the asynchronous call.</summary>
      <returns>The identity of the token requestor.</returns>
    </member>
    <member name="P:System.IdentityModel.SecurityTokenService.FederatedAsyncState.Request">
      <summary>Gets the token request (RST) associated with the asynchronous call.</summary>
      <returns>The token request associated with the asynchronous call.</returns>
    </member>
    <member name="P:System.IdentityModel.SecurityTokenService.FederatedAsyncState.Result">
      <summary>Gets the <see cref="T:System.IAsyncResult" /> associated with the asynchronous call.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that represents the status of the asynchronous call.</returns>
    </member>
    <member name="P:System.IdentityModel.SecurityTokenService.FederatedAsyncState.SecurityTokenHandler">
      <summary>Gets or sets the security token handler that will be used during an asynchronous token-issuance call.</summary>
      <returns>The token handler that will be used.</returns>
    </member>
    <member name="T:System.IdentityModel.SignatureVerificationFailedException">
      <summary>The exception that is thrown when an error occurs while processing a signature</summary>
    </member>
    <member name="M:System.IdentityModel.SignatureVerificationFailedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.SignatureVerificationFailedException" /> class.</summary>
    </member>
    <member name="M:System.IdentityModel.SignatureVerificationFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.SignatureVerificationFailedException" /> class with serialized data.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains the contextual information about the source or destination.</param>
    </member>
    <member name="M:System.IdentityModel.SignatureVerificationFailedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.SignatureVerificationFailedException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.IdentityModel.SignatureVerificationFailedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.SignatureVerificationFailedException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The <see cref="T:System.Exception" /> that is the cause of the current exception. If the <paramref name="inner" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="T:System.IdentityModel.TypedAsyncResult`1">
      <summary>A concrete implementation of <see cref="T:System.IdentityModel.AsyncResult" /> that will wrap the result <see cref="T:System.Type" /> and return it when the <see cref="M:System.IdentityModel.TypedAsyncResult`1.End(System.IAsyncResult)" /> method is called.</summary>
      <typeparam name="T">The type of the result.</typeparam>
    </member>
    <member name="M:System.IdentityModel.TypedAsyncResult`1.#ctor(System.AsyncCallback,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.TypedAsyncResult`1" /> class that has a callback delegate and a state object. </summary>
      <param name="callback">The method to be called when the asynchronous operation completes.</param>
      <param name="state">A user-defined object that qualifies or contains information about an asynchronous operation.</param>
    </member>
    <member name="M:System.IdentityModel.TypedAsyncResult`1.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.TypedAsyncResult`1" /> class that has a state object. </summary>
      <param name="state">A user-defined object that qualifies or contains information about an asynchronous operation.</param>
    </member>
    <member name="M:System.IdentityModel.TypedAsyncResult`1.Complete(`0,System.Boolean)">
      <summary>Call this version of complete when your asynchronous operation is complete and no exception was encountered. It updates the state of the operation and notifies the callback.</summary>
      <param name="result">The result to be wrapped.</param>
      <param name="completedSynchronously">true if the asynchronous operation completed synchronously; otherwise false.</param>
    </member>
    <member name="M:System.IdentityModel.TypedAsyncResult`1.Complete(`0,System.Boolean,System.Exception)">
      <summary>Call this version of complete if you raise an exception during processing. In addition to notifying the callback, it captures the exception and stores it to be thrown during the call to the <see cref="M:System.IdentityModel.TypedAsyncResult`1.End(System.IAsyncResult)" /> method.</summary>
      <param name="result">The result to be wrapped.</param>
      <param name="completedSynchronously">true if the asynchronous operation completed synchronously; otherwise false.</param>
      <param name="exception">The exception that occurred during the processing of the asynchronous operation.</param>
    </member>
    <member name="M:System.IdentityModel.TypedAsyncResult`1.End(System.IAsyncResult)">
      <summary>End should be called when the End function for the asynchronous operation is complete. It ensures the asynchronous operation is complete, and does some common validation.</summary>
      <returns>The typed result of the asynchronous operation.</returns>
      <param name="result">The <see cref="T:System.IAsyncResult" /> representing the status of an asynchronous operation.</param>
    </member>
    <member name="P:System.IdentityModel.TypedAsyncResult`1.Result">
      <summary>Gets the typed result of the completed asynchronous operation.</summary>
      <returns>The typed result of the completed asynchronous operation.</returns>
    </member>
    <member name="T:System.IdentityModel.UnsupportedTokenTypeBadRequestException">
      <summary>The exception that is thrown when the specified token request (RST) is not understood because of an unknown token type.</summary>
    </member>
    <member name="M:System.IdentityModel.UnsupportedTokenTypeBadRequestException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.UnsupportedTokenTypeBadRequestException" /> class.</summary>
    </member>
    <member name="M:System.IdentityModel.UnsupportedTokenTypeBadRequestException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.UnsupportedTokenTypeBadRequestException" /> class with serialized data.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains the contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.UnsupportedTokenTypeBadRequestException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.UnsupportedTokenTypeBadRequestException" /> class with the specified token type.</summary>
      <param name="tokenType">A string that contains the token type URI.</param>
    </member>
    <member name="M:System.IdentityModel.UnsupportedTokenTypeBadRequestException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.UnsupportedTokenTypeBadRequestException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="exception">The <see cref="T:System.Exception" /> that is the cause of the current exception. If the <paramref name="exception" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="M:System.IdentityModel.UnsupportedTokenTypeBadRequestException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the unsupported token type and other exception information.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains the contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is null.</exception>
    </member>
    <member name="P:System.IdentityModel.UnsupportedTokenTypeBadRequestException.TokenType">
      <summary>Gets and sets the unsupported token type URI.</summary>
      <returns>A string that contains the unsupported token type URI.</returns>
    </member>
    <member name="T:System.IdentityModel.Claims.Claim">
      <summary>Represents a claim that is associated with an entity. </summary>
    </member>
    <member name="M:System.IdentityModel.Claims.Claim.#ctor(System.String,System.Object,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Claims.Claim" /> class with the specified type, resource, and right.</summary>
      <param name="claimType">A uniform resource identifier (URI) that represents a claim type. </param>
      <param name="resource">The object with which the new claim is associated.</param>
      <param name="right">The URI of the right associated with the claim.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="claimType" /> is null.-or-<paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="claimType" /> is zero length.-or-<paramref name="right" /> is zero length.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Claims.Claim.ClaimType">
      <summary>Gets the type of the claim. </summary>
      <returns>A URI that represents the type of the claim.</returns>
    </member>
    <member name="M:System.IdentityModel.Claims.Claim.CreateDenyOnlyWindowsSidClaim(System.Security.Principal.SecurityIdentifier)">
      <summary>Creates a <see cref="T:System.IdentityModel.Claims.Claim" /> object that represents a deny-only specified security identifier (SID).</summary>
      <returns>A <see cref="T:System.IdentityModel.Claims.Claim" /> that represents the SID specified in the <paramref name="sid" /> parameter. </returns>
      <param name="sid">A <see cref="T:System.Security.Principal.SecurityIdentifier" />  that represents the deny-only SID.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sid" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.Claim.CreateDnsClaim(System.String)">
      <summary>Creates a <see cref="T:System.IdentityModel.Claims.Claim" /> object that represents the specified Domain Name System (DNS) name.</summary>
      <returns>The <see cref="T:System.IdentityModel.Claims.Claim" /> object this method creates.</returns>
      <param name="dns">The DNS name of the entity associated with the claim. This parameter must not be null. If this parameter is null, this method throws a <see cref="T:System.ArgumentNullException" /> exception.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="dns" /> parameter is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.Claim.CreateHashClaim(System.Byte[])">
      <summary>Creates a <see cref="T:System.IdentityModel.Claims.Claim" /> object that represents the specified hash value.</summary>
      <returns>The <see cref="T:System.IdentityModel.Claims.Claim" /> object this method creates.</returns>
      <param name="hash">An array of byte values that specifies a hash value. This parameter must not be null. If this parameter is null, this method throws a <see cref="T:System.ArgumentNullException" /> exception.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="hash" /> parameter is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.Claim.CreateMailAddressClaim(System.Net.Mail.MailAddress)">
      <summary>Creates a <see cref="T:System.IdentityModel.Claims.Claim" /> object that represents the specified email address.</summary>
      <returns>The <see cref="T:System.IdentityModel.Claims.Claim" /> object this method creates.</returns>
      <param name="mailAddress">A <see cref="T:System.Net.Mail.MailAddress" /> that specifies the email address this claim represents. This parameter must not be null. If this parameter is null, this method throws an <see cref="T:System.ArgumentNullException" /> exception.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="mailAddress" /> parameter is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.Claim.CreateNameClaim(System.String)">
      <summary>Creates a <see cref="T:System.IdentityModel.Claims.Claim" /> object that represents the specified name.</summary>
      <returns>The <see cref="T:System.IdentityModel.Claims.Claim" /> object this method creates.</returns>
      <param name="name">The name of the entity associated with the claim. This parameter must not be null. If this parameter is null, this method throws an <see cref="T:System.ArgumentNullException" /> exception.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.Claim.CreateRsaClaim(System.Security.Cryptography.RSA)">
      <summary>Creates a <see cref="T:System.IdentityModel.Claims.Claim" /> object that represents the specified RSA key.</summary>
      <returns>The <see cref="T:System.IdentityModel.Claims.Claim" /> object this method creates.</returns>
      <param name="rsa">An <see cref="T:System.Security.Cryptography.RSA" /> object that represents an RSA cryptographic key. This parameter must not be null. If this parameter is null, this method throws an <see cref="T:System.ArgumentNullException" /> exception.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="rsa" /> parameter is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.Claim.CreateSpnClaim(System.String)">
      <summary>Creates a <see cref="T:System.IdentityModel.Claims.Claim" /> object that represents the specified Service Principal Name (SPN).</summary>
      <returns>The <see cref="T:System.IdentityModel.Claims.Claim" /> object this method creates.</returns>
      <param name="spn">The SPN of the entity associated with this claim. This parameter must not be null. If this parameter is null, this method throws an <see cref="T:System.ArgumentNullException" /> exception.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="spn" /> parameter is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.Claim.CreateThumbprintClaim(System.Byte[])">
      <summary>Creates a <see cref="T:System.IdentityModel.Claims.Claim" /> object that represents the specified thumbprint.</summary>
      <returns>The <see cref="T:System.IdentityModel.Claims.Claim" /> object this method creates.</returns>
      <param name="thumbprint">An array of byte values that specifies the thumbprint of the entity associated with the claim. This parameter must not be null. If this parameter is null, this method throws an <see cref="T:System.ArgumentNullException" /> exception.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="thumbprint" /> parameter is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.Claim.CreateUpnClaim(System.String)">
      <summary>Creates a <see cref="T:System.IdentityModel.Claims.Claim" /> object that represents the specified Universal Principal Name (UPN).</summary>
      <returns>The <see cref="T:System.IdentityModel.Claims.Claim" /> object this method creates.</returns>
      <param name="upn">The UPN of the entity associated with this claim. This parameter must not be null. If this parameter is null, this method throws an <see cref="T:System.ArgumentNullException" /> exception.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="upn" /> parameter is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.Claim.CreateUriClaim(System.Uri)">
      <summary>Creates a <see cref="T:System.IdentityModel.Claims.Claim" /> object that represents the specified Uniform Resource Locator (URL).</summary>
      <returns>The <see cref="T:System.IdentityModel.Claims.Claim" /> object this method creates.</returns>
      <param name="uri">A <see cref="T:System.Uri" /> that represents the URL of the entity associated with this claim. This parameter must not be null. If this parameter is null, this method throws an <see cref="T:System.ArgumentNullException" /> exception.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="uri" /> parameter is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.Claim.CreateWindowsSidClaim(System.Security.Principal.SecurityIdentifier)">
      <summary>Creates a <see cref="T:System.IdentityModel.Claims.Claim" /> object that represents the specified security identifier (SID).</summary>
      <returns>A <see cref="T:System.IdentityModel.Claims.Claim" /> that represents the SID specified in the <paramref name="sid" /> parameter.</returns>
      <param name="sid">A <see cref="T:System.Security.Principal.SecurityIdentifier" />  that represents the SID.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sid" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.Claim.CreateX500DistinguishedNameClaim(System.Security.Cryptography.X509Certificates.X500DistinguishedName)">
      <summary>Creates a <see cref="T:System.IdentityModel.Claims.Claim" /> object that represents the specified X.500 distinguished name.</summary>
      <returns>The <see cref="T:System.IdentityModel.Claims.Claim" /> object this method creates.</returns>
      <param name="x500DistinguishedName">A <see cref="T:System.Security.Cryptography.X509Certificates.X500DistinguishedName" /> that specifies the X.500 distinguished name of the entity associated with the claim. This parameter must not be null. If this parameter is null, this method throws an <see cref="T:System.ArgumentNullException" /> exception.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="x500DistinguishedName" /> parameter is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Claims.Claim.DefaultComparer">
      <summary>Gets an object that can compare two <see cref="T:System.IdentityModel.Claims.Claim" /> objects for equality.</summary>
      <returns>A <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> interface implementation that compares two <see cref="T:System.IdentityModel.Claims.Claim" /> objects.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.Claim.Equals(System.Object)">
      <summary>Determines whether the specified object represents the same claim as the current <see cref="T:System.IdentityModel.Claims.Claim" /> object.</summary>
      <returns>true if <paramref name="obj" /> represents the same claim as the current <see cref="T:System.IdentityModel.Claims.Claim" />; otherwise false.</returns>
      <param name="obj">The object to compare with the current <see cref="T:System.IdentityModel.Claims.Claim" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.Claim.GetHashCode">
      <summary>Returns a hash code for the current claim.</summary>
      <returns>The hash code for the claim.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Claims.Claim.Resource">
      <summary>Gets the resource with which this <see cref="T:System.IdentityModel.Claims.Claim" /> object is associated.</summary>
      <returns>The resource with which this <see cref="T:System.IdentityModel.Claims.Claim" /> object is associated. </returns>
    </member>
    <member name="P:System.IdentityModel.Claims.Claim.Right">
      <summary>A string representation of a uniform resource identifier (URI) that specifies the right associated with this <see cref="T:System.IdentityModel.Claims.Claim" /> object. Pre-defined rights are available as static properties of the <see cref="T:System.IdentityModel.Claims.Rights" /> class. </summary>
      <returns>A URI that specifies the right associated with this <see cref="T:System.IdentityModel.Claims.Claim" /> object.</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.Claim.System">
      <summary>A pre-defined claim that represents the system entity.</summary>
      <returns>A <see cref="T:System.IdentityModel.Claims.Claim" /> object that represents the system entity. This <see cref="T:System.IdentityModel.Claims.Claim" /> object has the property values shown in the following table.PropertyValue<see cref="P:System.IdentityModel.Claims.Claim.ClaimType" /><see cref="P:System.IdentityModel.Claims.ClaimTypes.System" /><see cref="P:System.IdentityModel.Claims.Claim.Resource" />System<see cref="P:System.IdentityModel.Claims.Claim.Right" /><see cref="P:System.IdentityModel.Claims.Rights.Identity" /></returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.Claim.ToString">
      <summary>Returns a string representation of this <see cref="T:System.IdentityModel.Claims.Claim" /> object.</summary>
      <returns>This <see cref="T:System.IdentityModel.Claims.Claim" /> object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Claims.ClaimSet">
      <summary>Represents the collection of claims that are associated with an entity.</summary>
    </member>
    <member name="M:System.IdentityModel.Claims.ClaimSet.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Claims.ClaimSet" /> class. </summary>
    </member>
    <member name="M:System.IdentityModel.Claims.ClaimSet.ContainsClaim(System.IdentityModel.Claims.Claim)">
      <summary>Determines whether the <see cref="T:System.IdentityModel.Claims.ClaimSet" /> contains the specified <see cref="T:System.IdentityModel.Claims.Claim" />.</summary>
      <returns>true if the specified claim is contained in the <see cref="T:System.IdentityModel.Claims.ClaimSet" />; otherwise false.</returns>
      <param name="claim">The <see cref="T:System.IdentityModel.Claims.Claim" /> for which to search.</param>
    </member>
    <member name="M:System.IdentityModel.Claims.ClaimSet.ContainsClaim(System.IdentityModel.Claims.Claim,System.Collections.Generic.IEqualityComparer{System.IdentityModel.Claims.Claim})">
      <summary>Determines whether the <see cref="T:System.IdentityModel.Claims.ClaimSet" /> contains the specified <see cref="T:System.IdentityModel.Claims.Claim" />, by using the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> object.</summary>
      <returns>true if the specified claim is contained in the <see cref="T:System.IdentityModel.Claims.ClaimSet" />; otherwise false.</returns>
      <param name="claim">The <see cref="T:System.IdentityModel.Claims.Claim" /> for which to search.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> object used to make the comparison.</param>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimSet.Count">
      <summary>When overridden in a derived class, gets the number of claims in this claim set.</summary>
      <returns>The number of claims in this <see cref="T:System.IdentityModel.Claims.ClaimSet" />.</returns>
    </member>
    <member name="M:System.IdentityModel.Claims.ClaimSet.FindClaims(System.String,System.String)">
      <summary>When overridden in a derived class, searches for a <see cref="T:System.IdentityModel.Claims.Claim" /> object that matches the specified claim type and rights in the <see cref="T:System.IdentityModel.Claims.ClaimSet" />.</summary>
      <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1" /> of type <see cref="T:System.IdentityModel.Claims.Claim" /> that enables you to enumerate the claims that matches the specified criteria.</returns>
      <param name="claimType">The uniform resource identifier (URI) of a claim type. Several claim types are available as static properties of the <see cref="T:System.IdentityModel.Claims.ClaimTypes" /> class. </param>
      <param name="right">The URI of the right associated with the new claim. Several rights are available as static properties of the <see cref="T:System.IdentityModel.Claims.Rights" /> class. </param>
    </member>
    <member name="M:System.IdentityModel.Claims.ClaimSet.GetEnumerator">
      <summary>When overridden in a derived class, gets a <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to enumerate the <see cref="T:System.IdentityModel.Claims.Claim" /> object in the <see cref="T:System.IdentityModel.Claims.ClaimSet" />.</summary>
      <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to enumerate the <see cref="T:System.IdentityModel.Claims.Claim" /> object in the <see cref="T:System.IdentityModel.Claims.ClaimSet" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimSet.Issuer">
      <summary>When overridden in a derived class, gets the entity that issued this <see cref="T:System.IdentityModel.Claims.ClaimSet" />.</summary>
      <returns>The <see cref="T:System.IdentityModel.Claims.ClaimSet" /> object that issued this <see cref="T:System.IdentityModel.Claims.ClaimSet" /> object.</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimSet.Item(System.Int32)">
      <summary>When overridden in a derived class, gets the <see cref="T:System.IdentityModel.Claims.Claim" /> for the specified index.</summary>
      <returns>The <see cref="T:System.IdentityModel.Claims.Claim" /> at the specified index.</returns>
      <param name="index">The index of the claim to be retrieved.</param>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimSet.System">
      <summary>Gets a <see cref="T:System.IdentityModel.Claims.ClaimSet" /> object that represents an application trusted issuer.</summary>
      <returns>The system <see cref="T:System.IdentityModel.Claims.ClaimSet" /> object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.ClaimSet.System#Collections#IEnumerable#GetEnumerator">
      <summary>Gets an <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to enumerate the <see cref="T:System.IdentityModel.Claims.Claim" /> object in the <see cref="T:System.IdentityModel.Claims.ClaimSet" />.</summary>
      <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to enumerate the <see cref="T:System.IdentityModel.Claims.Claim" /> object in the <see cref="T:System.IdentityModel.Claims.ClaimSet" />.</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimSet.Windows">
      <summary>Gets a set of claims that contains Windows security identifiers. </summary>
      <returns>A <see cref="T:System.IdentityModel.Claims.ClaimSet" /> that contains at least one claim of type <see cref="P:System.IdentityModel.Claims.ClaimTypes.Sid" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Claims.ClaimTypes">
      <summary>Represents the pre-defined types of claims that an entity can claim. This class cannot be inherited. </summary>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.Anonymous">
      <summary>Gets the URI for a claim that specifies the anonymous user.</summary>
      <returns>The URI for a claim that specifies the anonymous user.</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.Authentication">
      <summary>Gets the URI for a claim that specifies details about whether an identity is authenticated.</summary>
      <returns>The URI for a claim that specifies details about whether an identity is authenticated.</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.AuthorizationDecision">
      <summary>Gets the URI for a claim that specifies an authorization decision on an entity.</summary>
      <returns>The URI for a claim that specifies an authorization decision on an entity.</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.Country">
      <summary>Gets the URI for a claim that specifies the country/region in which an entity resides.</summary>
      <returns>The URI for a claim that specifies a country/region in which an entity resides.</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.DateOfBirth">
      <summary>Gets the URI for a claim that specifies the date of birth of an entity.</summary>
      <returns>The URI for a claim that specifies the date of birth of an entity.</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.DenyOnlySid">
      <summary>Gets the URI for a claim that specifies a deny-only security identifier (SID) for an entity.</summary>
      <returns>The URI for a claim that specifies a deny-only SID for an entity.</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.Dns">
      <summary>Gets the URI for a claim that specifies the DNS name associated with the computer name or with the alternative name of either the subject or issuer of an X.509 certificate.</summary>
      <returns>The URI for a claim that specifies the DNS name associated with the computer name or with the alternative name of either the subject or issuer of an X.509 certificate.</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.Email">
      <summary>Gets the URI for a claim that specifies the email address of an entity.</summary>
      <returns>The URI for a claim that specifies the email address of an entity.</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.Gender">
      <summary>Gets the URI for a claim that specifies the gender of an entity.</summary>
      <returns>The URI for a claim that specifies the gender of an entity.</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.GivenName">
      <summary>Gets the URI for a claim that specifies the given name of an entity.</summary>
      <returns>The URI for a claim that specifies the given name of an entity.</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.Hash">
      <summary>Gets the URI for a claim that specifies a hash value.</summary>
      <returns>The URI for a claim that specifies a hash value.</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.HomePhone">
      <summary>Gets the URI for a claim that specifies the home phone number of an entity.</summary>
      <returns>The URI for a claim that specifies the home phone number of an entity.</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.Locality">
      <summary>Gets the URI for a claim that specifies the locale in which an entity resides.</summary>
      <returns>The URI for a claim that specifies the locale in which an entity resides.</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.MobilePhone">
      <summary>Gets the URI for a claim that specifies the mobile phone number of an entity.</summary>
      <returns>The URI for a claim that specifies the mobile phone number of an entity.</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.Name">
      <summary>Gets the URI for a claim that specifies the name of an entity.</summary>
      <returns>The URI for a claim that specifies the name of an entity.</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.NameIdentifier">
      <summary>Gets the URI for a claim that specifies the name of an entity.</summary>
      <returns>The URI for a claim that specifies the name of an entity.</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.OtherPhone">
      <summary>Gets the URI for a claim that specifies the alternative phone number of an entity.</summary>
      <returns>The URI for a claim that specifies the alternative phone number of an entity.</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.PostalCode">
      <summary>Gets the URI for a claim that specifies the postal code of an entity.</summary>
      <returns>The URI for a claim that specifies the postal code of an entity.</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.PPID">
      <summary>Gets the URI for a claim that specifies the private personal identifier (PPI) of an entity.</summary>
      <returns>The URI for a claim that specifies the private personal identifier (PPI) of an entity.</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.Rsa">
      <summary>Gets the URI for a claim that specifies an RSA key.</summary>
      <returns>The URI for a claim that specifies an RSA key.</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.Sid">
      <summary>Gets the URI for a claim that specifies a security identifier (SID).</summary>
      <returns>The URI for a claim that specifies a security identifier (SID).</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.Spn">
      <summary>Gets the URI for a claim that specifies a service principal name (SPN) claim.</summary>
      <returns>The URI for a claim that specifies a service principal name (SPN) claim.</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.StateOrProvince">
      <summary>Gets the URI for a claim that specifies the state or province in which an entity resides.</summary>
      <returns>The URI for a claim that specifies the state or province in which an entity resides.</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.StreetAddress">
      <summary>Gets the URI for a claim that specifies the street address of an entity.</summary>
      <returns>The URI for a claim that specifies the street address of an entity.</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.Surname">
      <summary>Gets the URI for a claim that specifies the surname of an entity.</summary>
      <returns>The URI for a claim that specifies the surname of an entity.</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.System">
      <summary>Gets the URI for a claim that identifies the system entity.</summary>
      <returns>The URI for a claim that identifies the system entity.</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.Thumbprint">
      <summary>Gets the URI for a claim that specifies a thumbprint.</summary>
      <returns>The URI for a claim that specifies a thumbprint.</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.Upn">
      <summary>Gets the URI for a claim that specifies a user principal name (UPN).</summary>
      <returns>The URI for a claim that specifies UPN.</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.Uri">
      <summary>Gets the URI for a claim that specifies a URI.</summary>
      <returns>The URI for a claim that specifies a URI.</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.Webpage">
      <summary>Gets the URI for a claim that specifies the Web page of an entity.</summary>
      <returns>The URI for a claim that specifies the Web page of an entity.</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.X500DistinguishedName">
      <summary>Gets the string that contains the URI for a distinguished name claim of an X.509 certificate.</summary>
      <returns>The URI for a distinguished name claim of an X.509 certificate.</returns>
    </member>
    <member name="T:System.IdentityModel.Claims.DefaultClaimSet">
      <summary>Provides a default implementation of the <see cref="T:System.IdentityModel.Claims.ClaimSet" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.DefaultClaimSet.#ctor(System.Collections.Generic.IList{System.IdentityModel.Claims.Claim})">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Claims.DefaultClaimSet" /> class, using the specified claims.</summary>
      <param name="claims">An <see cref="T:System.Collections.Generic.IList`1" /> of type <see cref="T:System.IdentityModel.Claims.Claim" /> that contains the claims to add to this claim set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="claims" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.DefaultClaimSet.#ctor(System.IdentityModel.Claims.Claim[])">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Claims.DefaultClaimSet" /> class, using the specified claims.</summary>
      <param name="claims">An array of <see cref="T:System.IdentityModel.Claims.Claim" /> that represents the claims to be added to this claim set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="claims" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.DefaultClaimSet.#ctor(System.IdentityModel.Claims.ClaimSet,System.Collections.Generic.IList{System.IdentityModel.Claims.Claim})">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Claims.DefaultClaimSet" /> class, using the specified claims.</summary>
      <param name="issuer">A <see cref="T:System.IdentityModel.Claims.ClaimSet" /> object that specifies the issuer of the <see cref="T:System.IdentityModel.Claims.ClaimSet" /> specified in the <paramref name="claims" /> parameter.</param>
      <param name="claims">An <see cref="T:System.Collections.Generic.IList`1" /> of type <see cref="T:System.IdentityModel.Claims.Claim" /> that contains the claims to add to this claim set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="claims" /> is null.-or-<paramref name="issuer" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.DefaultClaimSet.#ctor(System.IdentityModel.Claims.ClaimSet,System.IdentityModel.Claims.Claim[])">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Claims.DefaultClaimSet" /> class, using the specified claims.</summary>
      <param name="issuer">A <see cref="T:System.IdentityModel.Claims.ClaimSet" /> object that specifies the issuer of the <see cref="T:System.IdentityModel.Claims.ClaimSet" /> specified in the <paramref name="claims" /> parameter.</param>
      <param name="claims">An array of <see cref="T:System.IdentityModel.Claims.Claim" /> that represents the claims to be added to this claim set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="claims" /> is null.-or-<paramref name="issuer" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.DefaultClaimSet.ContainsClaim(System.IdentityModel.Claims.Claim)">
      <summary>Determines whether the specified claim is contained within this claim set.</summary>
      <returns>true if the claim is contained in this claim set; otherwise false.</returns>
      <param name="claim">The <see cref="T:System.IdentityModel.Claims.Claim" /> to determine whether it exists in this collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="claim" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Claims.DefaultClaimSet.Count">
      <summary>Gets the number of <see cref="T:System.IdentityModel.Claims.Claim" /> objects in this claim set.</summary>
      <returns>The number of <see cref="T:System.IdentityModel.Claims.Claim" /> objects in this claim set.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.DefaultClaimSet.FindClaims(System.String,System.String)">
      <summary>Searches for the <see cref="T:System.IdentityModel.Claims.Claim" /> object that matches the specified claim type and rights in the <see cref="T:System.IdentityModel.Claims.DefaultClaimSet" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of type <see cref="T:System.IdentityModel.Claims.Claim" /> that enables you to enumerate the claims that match the specified criteria.</returns>
      <param name="claimType">The uniform resource identifier (URI) of a claim type. Several claim types are available as static properties of the <see cref="T:System.IdentityModel.Claims.ClaimTypes" /> class.</param>
      <param name="right">The URI of the right associated with the new claim. Several rights are available as static properties of the <see cref="T:System.IdentityModel.Claims.Rights" /> class. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.DefaultClaimSet.GetEnumerator">
      <summary>Gets an <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to enumerate the <see cref="T:System.IdentityModel.Claims.Claim" /> object in the <see cref="T:System.IdentityModel.Claims.DefaultClaimSet" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to enumerate the <see cref="T:System.IdentityModel.Claims.Claim" /> object in the <see cref="T:System.IdentityModel.Claims.DefaultClaimSet" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.DefaultClaimSet.Initialize(System.IdentityModel.Claims.ClaimSet,System.Collections.Generic.IList{System.IdentityModel.Claims.Claim})">
      <summary>Initializes an instance of the <see cref="T:System.IdentityModel.Claims.DefaultClaimSet" /> class, using the specified claims.</summary>
      <param name="issuer">The <see cref="T:System.IdentityModel.Claims.ClaimSet" /> object that issued the <see cref="T:System.IdentityModel.Claims.ClaimSet" /> specified in the <paramref name="claims" /> parameter.</param>
      <param name="claims">The set of <see cref="T:System.IdentityModel.Claims.Claim" /> objects to be included in this claim set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="claims" /> is null.-or-<paramref name="issuer" /> is null.</exception>
    </member>
    <member name="P:System.IdentityModel.Claims.DefaultClaimSet.Issuer">
      <summary>Gets the <see cref="T:System.IdentityModel.Claims.ClaimSet" /> object that issued this claim set.</summary>
      <returns>The <see cref="T:System.IdentityModel.Claims.ClaimSet" /> object that issued this claim set.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Claims.DefaultClaimSet.Item(System.Int32)">
      <summary>Gets the <see cref="T:System.IdentityModel.Claims.Claim" /> for the specified index.</summary>
      <returns>The <see cref="T:System.IdentityModel.Claims.Claim" /> specified by the index.</returns>
      <param name="index">The index of the claim to be retrieved.</param>
    </member>
    <member name="M:System.IdentityModel.Claims.DefaultClaimSet.ToString">
      <summary>Returns this <see cref="T:System.IdentityModel.Claims.ClaimSet" /> object.</summary>
      <returns>This <see cref="T:System.IdentityModel.Claims.ClaimSet" /> object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Claims.Rights">
      <summary>Defines the pre-defined types of rights that can be associated with a <see cref="T:System.IdentityModel.Claims.Claim" /> object.</summary>
    </member>
    <member name="P:System.IdentityModel.Claims.Rights.Identity">
      <summary>Gets a string that specifies that the right represents an identity.</summary>
      <returns>The right that represents an identity.</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.Rights.PossessProperty">
      <summary>Gets a string that specifies that the right represents a property that the entity associated with a claim possesses.</summary>
      <returns>The right that represents a property that the entity associated with a <see cref="T:System.IdentityModel.Claims.Claim" /> object possesses.</returns>
    </member>
    <member name="T:System.IdentityModel.Claims.WindowsClaimSet">
      <summary>Represents a collection of Windows claims that are associated with an entity.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.WindowsClaimSet.#ctor(System.Security.Principal.WindowsIdentity)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Claims.WindowsClaimSet" /> class by using the Windows user identity specified by the <see cref="T:System.Security.Principal.WindowsIdentity" /> object.</summary>
      <param name="windowsIdentity">A <see cref="T:System.Security.Principal.WindowsIdentity" />  that specifies the Windows identity.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.WindowsClaimSet.#ctor(System.Security.Principal.WindowsIdentity,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Claims.WindowsClaimSet" /> class by using the Windows user identity specified by the <see cref="T:System.Security.Principal.WindowsIdentity" /> object.</summary>
      <param name="windowsIdentity">A <see cref="T:System.Security.Principal.WindowsIdentity" />  that specifies the Windows identity.</param>
      <param name="includeWindowsGroups">true to include the claims representing the Windows groups to which this user belongs; otherwise, false. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.WindowsClaimSet.#ctor(System.Security.Principal.WindowsIdentity,System.Boolean,System.DateTime)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Claims.WindowsClaimSet" /> class by using the Windows user identity specified by the <see cref="T:System.Security.Principal.WindowsIdentity" /> object.</summary>
      <param name="windowsIdentity">A <see cref="T:System.Security.Principal.WindowsIdentity" />  that specifies the Windows identity.</param>
      <param name="includeWindowsGroups">true to include the Windows groups to which this user belongs; otherwise, false.</param>
      <param name="expirationTime">A <see cref="T:System.DateTime" /> that specifies the expiration time for the claim set.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.WindowsClaimSet.#ctor(System.Security.Principal.WindowsIdentity,System.DateTime)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Claims.WindowsClaimSet" /> class by using the Windows user identity specified by the <see cref="T:System.Security.Principal.WindowsIdentity" /> object.</summary>
      <param name="windowsIdentity">A <see cref="T:System.Security.Principal.WindowsIdentity" />  that specifies the Windows identity.</param>
      <param name="expirationTime">A <see cref="T:System.DateTime" /> that specifies the expiration time for the claim set.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.WindowsClaimSet.#ctor(System.Security.Principal.WindowsIdentity,System.String,System.Boolean,System.DateTime)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Claims.WindowsClaimSet" /> class by using the Windows user identity specified by the <see cref="T:System.Security.Principal.WindowsIdentity" /> object.</summary>
      <param name="windowsIdentity">A <see cref="T:System.Security.Principal.WindowsIdentity" />  that specifies the Windows identity.</param>
      <param name="authenticationType">The authentication type for the Windows Identity.</param>
      <param name="includeWindowsGroups">true to include the Windows groups to which this user belongs; otherwise, false.</param>
      <param name="expirationTime">A <see cref="T:System.DateTime" /> that specifies the expiration time for the claim set.</param>
    </member>
    <member name="P:System.IdentityModel.Claims.WindowsClaimSet.Count">
      <summary>Gets the number of claims in this collection.</summary>
      <returns>The number of claims in this collection.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.WindowsClaimSet.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.IdentityModel.Claims.WindowsClaimSet" />. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Claims.WindowsClaimSet.ExpirationTime">
      <summary>Gets the expiration time for this <see cref="T:System.IdentityModel.Claims.WindowsClaimSet" />.</summary>
      <returns>The <see cref="T:System.DateTime" /> in which this <see cref="T:System.IdentityModel.Claims.WindowsClaimSet" /> expires.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.WindowsClaimSet.FindClaims(System.String,System.String)">
      <summary>Searches for the claim that matches the specified claim type and rights in the <see cref="T:System.IdentityModel.Claims.WindowsClaimSet" />.</summary>
      <returns>A System.Collections.Generic.IEnumerable&lt;Claim&gt; object that enables you to enumerate the claims that match the specified criteria.</returns>
      <param name="claimType">The uniform resource identifier (URI) of a claim type.</param>
      <param name="right">The URI of the right associated with the new claim.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.WindowsClaimSet.GetEnumerator">
      <summary>Gets an <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to enumerate the Windows claims in the <see cref="T:System.IdentityModel.Claims.WindowsClaimSet" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to enumerate the Windows claims in the <see cref="T:System.IdentityModel.Claims.WindowsClaimSet" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Claims.WindowsClaimSet.Issuer">
      <summary>Gets the issuer for this <see cref="T:System.IdentityModel.Claims.WindowsClaimSet" />.</summary>
      <returns>A <see cref="T:System.IdentityModel.Claims.ClaimSet" /> that represents the issuer of this claim set.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Claims.WindowsClaimSet.Item(System.Int32)">
      <summary>Gets the claim for the specified index.</summary>
      <returns>The claim for the specified index.</returns>
      <param name="index">The index of the Windows claim to be retrieved.</param>
    </member>
    <member name="M:System.IdentityModel.Claims.WindowsClaimSet.ToString">
      <summary>Returns this <see cref="T:System.IdentityModel.Claims.WindowsClaimSet" /> object.</summary>
      <returns>This <see cref="T:System.IdentityModel.Claims.WindowsClaimSet" /> object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Claims.WindowsClaimSet.WindowsIdentity">
      <summary>Gets the Windows identity for this claim set.</summary>
      <returns>The <see cref="T:System.Security.Principal.WindowsIdentity" /> for this claim set. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Claims.X509CertificateClaimSet">
      <summary>Represents a collection of claims extracted from an X.509 certificate that are associated with an entity.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.X509CertificateClaimSet.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Claims.X509CertificateClaimSet" /> class by using the specified X.509 certificate.</summary>
      <param name="certificate">The X.509 certificate that is added to the claim set.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Claims.X509CertificateClaimSet.Count">
      <summary>Gets the number of X.509 certificate claims in this <see cref="T:System.IdentityModel.Claims.X509CertificateClaimSet" /> object.</summary>
      <returns>The number of X.509 certificate claims in this <see cref="T:System.IdentityModel.Claims.X509CertificateClaimSet" /> object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.X509CertificateClaimSet.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.IdentityModel.Claims.X509CertificateClaimSet" />. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Claims.X509CertificateClaimSet.ExpirationTime">
      <summary>Gets the expiration time for this <see cref="T:System.IdentityModel.Claims.X509CertificateClaimSet" />.</summary>
      <returns>The expiration time for this <see cref="T:System.IdentityModel.Claims.X509CertificateClaimSet" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.X509CertificateClaimSet.FindClaims(System.String,System.String)">
      <summary>Searches for the claim that matches the specified claim type and rights in the <see cref="T:System.IdentityModel.Claims.X509CertificateClaimSet" />.</summary>
      <returns>A System.Collections.Generic.IEnumerable&lt;Claim&gt; object that enables you to enumerate the claims that match the specified criteria.</returns>
      <param name="claimType">The uniform resource identifier (URI) of a claim type.</param>
      <param name="right">The URI of the right associated with the new claim.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.X509CertificateClaimSet.GetEnumerator">
      <summary>Gets an <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to enumerate the Windows claims in the <see cref="T:System.IdentityModel.Claims.X509CertificateClaimSet" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to enumerate the Windows claims in the <see cref="T:System.IdentityModel.Claims.X509CertificateClaimSet" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Claims.X509CertificateClaimSet.Issuer">
      <summary>Gets the issuer for this <see cref="T:System.IdentityModel.Claims.X509CertificateClaimSet" />.</summary>
      <returns>The issuer for this <see cref="T:System.IdentityModel.Claims.X509CertificateClaimSet" />. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Claims.X509CertificateClaimSet.Item(System.Int32)">
      <summary>Gets the claim for the specified index.</summary>
      <returns>The claim for the specified index.</returns>
      <param name="index">The index of the claim to be retrieved.</param>
    </member>
    <member name="M:System.IdentityModel.Claims.X509CertificateClaimSet.ToString">
      <summary>Gets the number of X.509 certificate claims in this <see cref="T:System.IdentityModel.Claims.X509CertificateClaimSet" /> object.</summary>
      <returns>The number of X.509 certificate claims in this <see cref="T:System.IdentityModel.Claims.X509CertificateClaimSet" /> object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Claims.X509CertificateClaimSet.X509Certificate">
      <summary>Gets the X.509 certificate associated with this claim set.</summary>
      <returns>The X.509 certificate associated with this claim set.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Configuration.AudienceUriElement">
      <summary>Represents an audience URI value configured under an &lt;audienceUris&gt; element. </summary>
    </member>
    <member name="M:System.IdentityModel.Configuration.AudienceUriElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Configuration.AudienceUriElement" /> class.</summary>
    </member>
    <member name="P:System.IdentityModel.Configuration.AudienceUriElement.Value">
      <summary>Gets or sets the audience URI.</summary>
      <returns>The audience URI.</returns>
    </member>
    <member name="T:System.IdentityModel.Configuration.AudienceUriElementCollection">
      <summary>Represents an &lt;audienceUris&gt; element in a configuration file. </summary>
    </member>
    <member name="M:System.IdentityModel.Configuration.AudienceUriElementCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Configuration.AudienceUriElementCollection" /> class.</summary>
    </member>
    <member name="P:System.IdentityModel.Configuration.AudienceUriElementCollection.Mode">
      <summary>Gets or sets the audience restriction mode.</summary>
      <returns>The audience restriction mode. The default is <see cref="F:System.IdentityModel.Selectors.AudienceUriMode.Always" />.</returns>
    </member>
    <member name="T:System.IdentityModel.Configuration.ConfigurationElementInterceptor">
      <summary>There are parts of the Windows Identity Foundation (WIF) configuration schema in which users can specify arbitrary elements and attributes; for example, when specifying a custom token handler. The <see cref="T:System.IdentityModel.Configuration.ConfigurationElementInterceptor" /> class is implemented to handle these cases.</summary>
    </member>
    <member name="M:System.IdentityModel.Configuration.ConfigurationElementInterceptor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Configuration.ConfigurationElementInterceptor" /> class.</summary>
    </member>
    <member name="P:System.IdentityModel.Configuration.ConfigurationElementInterceptor.ChildNodes">
      <summary>Gets the child nodes of this element.</summary>
      <returns>The collection of child nodes. null if this element has no child nodes.</returns>
    </member>
    <member name="M:System.IdentityModel.Configuration.ConfigurationElementInterceptor.DeserializeElement(System.Xml.XmlReader,System.Boolean)"></member>
    <member name="P:System.IdentityModel.Configuration.ConfigurationElementInterceptor.ElementAsXml">
      <summary>Gets the XML element represented by this instance.</summary>
      <returns>The XML element.</returns>
    </member>
    <member name="M:System.IdentityModel.Configuration.ConfigurationElementInterceptor.OnDeserializeUnrecognizedAttribute(System.String,System.String)">
      <summary>Gets a value that indicates whether an unknown attribute is encountered during deserialization. Always returns true.</summary>
      <returns>Always returns true, which indicates that an unrecognized attribute has been encountered.</returns>
      <param name="name">The name of the unrecognized attribute.</param>
      <param name="value">The value of the unrecognized attribute.</param>
    </member>
    <member name="M:System.IdentityModel.Configuration.ConfigurationElementInterceptor.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)">
      <summary>Gets a value that indicates whether an unknown element is encountered during deserialization. Always returns true.</summary>
      <returns>Always returns true, which indicates that an unrecognized element has been encountered.</returns>
      <param name="elementName">The name of the unknown subelement.</param>
      <param name="reader">The XML reader that is being used for deserialization.</param>
    </member>
    <member name="M:System.IdentityModel.Configuration.ConfigurationElementInterceptor.Reset(System.Configuration.ConfigurationElement)"></member>
    <member name="T:System.IdentityModel.Configuration.CustomTypeElement">
      <summary>Represents an element or attribute that specifies a custom <see cref="T:System.Type" /> in a configuration file. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.IdentityModel.Configuration.CustomTypeElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Configuration.CustomTypeElement" /> class.</summary>
    </member>
    <member name="P:System.IdentityModel.Configuration.CustomTypeElement.IsConfigured">
      <summary>Gets a value that indicates whether the element has been configured with non-default values.</summary>
      <returns>true if the element has been configured with non-default values; otherwise, false.</returns>
    </member>
    <member name="M:System.IdentityModel.Configuration.CustomTypeElement.Resolve``1(System.IdentityModel.Configuration.CustomTypeElement)">
      <summary>Attempts to resolve the custom type element to an object of the specified <see cref="T:System.Type" />.</summary>
      <returns>An object of <see cref="T:System.Type" /><paramref name="T" />.</returns>
      <param name="customTypeElement">The custom type element to resolve.</param>
      <typeparam name="T">The <see cref="T:System.Type" /> to which to resolve the custom type element.</typeparam>
    </member>
    <member name="P:System.IdentityModel.Configuration.CustomTypeElement.Type">
      <summary>The <see cref="T:System.Type" /> represented by the current instance.</summary>
      <returns>The type represented by this instance.</returns>
    </member>
    <member name="T:System.IdentityModel.Configuration.ICustomIdentityConfiguration">
      <summary>Defines methods that enable a class to load custom configuration.</summary>
    </member>
    <member name="M:System.IdentityModel.Configuration.ICustomIdentityConfiguration.LoadCustomConfiguration(System.Xml.XmlNodeList)">
      <summary>Loads custom configuration from XML. Override this method to provide custom handling of configuration elements.</summary>
      <param name="nodeList">The XML nodes that contain the custom configuration. Each node in the list is of type <see cref="T:System.Xml.XmlElement" />.</param>
    </member>
    <member name="T:System.IdentityModel.Configuration.IdentityConfiguration">
      <summary>Defines the collection of configurable properties controlling the behavior of the Windows Identity Foundation.</summary>
    </member>
    <member name="M:System.IdentityModel.Configuration.IdentityConfiguration.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Configuration.IdentityConfiguration" /> class. Settings are loaded from the default configuration, if it exists.</summary>
    </member>
    <member name="M:System.IdentityModel.Configuration.IdentityConfiguration.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Configuration.IdentityConfiguration" /> class by using a value that specifies whether settings should be loaded from the default configuration.</summary>
      <param name="loadConfig">true to load settings from the configuration file; otherwise false.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="loadConfig" /> is true, but there is no &lt;system.identityModel&gt; configuration element.</exception>
    </member>
    <member name="M:System.IdentityModel.Configuration.IdentityConfiguration.#ctor(System.Boolean,System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Configuration.IdentityConfiguration" /> class that has the specified service certificate. Settings are optionally loading the default configuration.</summary>
      <param name="loadConfig">true to load settings from the configuration file; otherwise false.</param>
      <param name="serviceCertificate">The service certificate. Sets the <see cref="P:System.IdentityModel.Configuration.IdentityConfiguration.ServiceCertificate" /> property.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="loadConfig" /> is true, but there is no &lt;system.identityModel&gt; configuration element.</exception>
    </member>
    <member name="M:System.IdentityModel.Configuration.IdentityConfiguration.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Configuration.IdentityConfiguration" /> class that has the specified service certificate.</summary>
      <param name="serviceCertificate">The service certificate. Sets the <see cref="P:System.IdentityModel.Configuration.IdentityConfiguration.ServiceCertificate" /> property.</param>
    </member>
    <member name="M:System.IdentityModel.Configuration.IdentityConfiguration.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Configuration.IdentityConfiguration" /> class. Settings are loaded from the named configuration.</summary>
      <param name="identityConfigurationName">The name of the &lt;identityConfiguration&gt; element from which settings are to be loaded.</param>
      <exception cref="T:System.InvalidOperationException">There is no &lt;system.identityModel&gt; configuration element.</exception>
    </member>
    <member name="M:System.IdentityModel.Configuration.IdentityConfiguration.#ctor(System.String,System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Configuration.IdentityConfiguration" /> class that has the specified service certificate, loading the named configuration.</summary>
      <param name="identityConfigurationName">The name of the &lt;service&gt; element from which configuration is to be loaded</param>
      <param name="serviceCertificate">The service certificate. Sets the <see cref="P:System.IdentityModel.Configuration.IdentityConfiguration.ServiceCertificate" /> property.</param>
      <exception cref="T:System.InvalidOperationException">There is no &lt;System.IdentityModel&gt; configuration element</exception>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfiguration.AudienceRestriction">
      <summary>Gets or sets the configured <see cref="T:System.IdentityModel.Tokens.AudienceRestriction" />.</summary>
      <returns>The configured <see cref="T:System.IdentityModel.Tokens.AudienceRestriction" />.</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfiguration.Caches">
      <summary>Gets or sets the configured <see cref="T:System.IdentityModel.Configuration.IdentityModelCaches" />.</summary>
      <returns>The configured caches.</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfiguration.CertificateValidationMode">
      <summary>Gets or sets the certificate validation mode used by handlers to validate issuer certificates.</summary>
      <returns>The certificate validation mode.</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfiguration.CertificateValidator">
      <summary>Gets or sets the certificate validator used by handlers to validate issuer certificates.</summary>
      <returns>The certificate validator.</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfiguration.ClaimsAuthenticationManager">
      <summary>Gets or sets the claims authentication manager. The default is an instance of the <see cref="T:System.Security.Claims.ClaimsAuthenticationManager" /> class.</summary>
      <returns>The claims authentication manager.</returns>
      <exception cref="T:System.ArgumentNullException">An attempt to set the property to null occurs.</exception>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfiguration.ClaimsAuthorizationManager">
      <summary>Gets or sets the claims authorization manager.</summary>
      <returns>The claims authorization manager.</returns>
      <exception cref="T:System.ArgumentNullException">An attempt to set the property to null occurs.</exception>
    </member>
    <member name="F:System.IdentityModel.Configuration.IdentityConfiguration.DefaultCertificateValidationMode">
      <summary>The default X.509 certificate validation mode, <see cref="F:System.ServiceModel.Security.X509CertificateValidationMode.PeerOrChainTrust" />.</summary>
    </member>
    <member name="F:System.IdentityModel.Configuration.IdentityConfiguration.DefaultIssuerNameRegistryType">
      <summary>The default issuer name registry type; the <see cref="T:System.Type" /> of the <see cref="T:System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry" /> class.</summary>
    </member>
    <member name="F:System.IdentityModel.Configuration.IdentityConfiguration.DefaultMaxClockSkew">
      <summary>The default maximum clock skew; 5 minutes.</summary>
    </member>
    <member name="F:System.IdentityModel.Configuration.IdentityConfiguration.DefaultRevocationMode">
      <summary>The default X.509 revocation mode; <see cref="F:System.Security.Cryptography.X509Certificates.X509RevocationMode.Online" />.</summary>
    </member>
    <member name="F:System.IdentityModel.Configuration.IdentityConfiguration.DefaultServiceName">
      <summary>The default service name; an empty string.</summary>
    </member>
    <member name="F:System.IdentityModel.Configuration.IdentityConfiguration.DefaultTrustedStoreLocation">
      <summary>The default trusted store location for certificates; <see cref="F:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine" />.</summary>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfiguration.DetectReplayedTokens">
      <summary>Gets or sets a value in the default handler configuration that indicates whether handlers should detect replayed tokens.</summary>
      <returns>true if handlers should detect replayed tokens; otherwise false.</returns>
    </member>
    <member name="M:System.IdentityModel.Configuration.IdentityConfiguration.Initialize">
      <summary>Updates properties in the <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration" /> objects for the <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerCollection" /> objects contained in the <see cref="P:System.IdentityModel.Configuration.IdentityConfiguration.SecurityTokenHandlerCollectionManager" /> to be consistent with the property values on this <see cref="T:System.IdentityModel.Configuration.IdentityConfiguration" /> instance.</summary>
      <exception cref="T:System.InvalidOperationException">This method is invoked more than once.</exception>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfiguration.IsInitialized">
      <summary>Gets or sets a value that indicates whether the <see cref="M:System.IdentityModel.Configuration.IdentityConfiguration.Initialize" /> method has been called.</summary>
      <returns>true if the <see cref="M:System.IdentityModel.Configuration.IdentityConfiguration.Initialize" /> method has been called; otherwise false.</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfiguration.IssuerNameRegistry">
      <summary>Gets or sets the issuer name registry used to resolve issuer names.</summary>
      <returns>The issuer name registry.</returns>
      <exception cref="T:System.ArgumentNullException">An attempt to set the property to null occurs.</exception>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfiguration.IssuerTokenResolver">
      <summary>Gets or sets the issuer token resolver.</summary>
      <returns>The issuer token resolver.</returns>
      <exception cref="T:System.ArgumentNullException">An attempt to set the property to null occurs.</exception>
    </member>
    <member name="M:System.IdentityModel.Configuration.IdentityConfiguration.LoadConfiguration(System.IdentityModel.Configuration.IdentityConfigurationElement)">
      <summary>Loads the settings for this <see cref="T:System.IdentityModel.Configuration.IdentityConfiguration" /> instance from the application or Web configuration file.</summary>
      <param name="element">The <see cref="T:System.IdentityModel.Configuration.IdentityConfigurationElement" /> from the configuration file.</param>
    </member>
    <member name="M:System.IdentityModel.Configuration.IdentityConfiguration.LoadHandlerConfiguration(System.IdentityModel.Configuration.IdentityConfigurationElement)">
      <summary>Loads a <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration" /> by using the elements directly under the specified <see cref="T:System.IdentityModel.Configuration.IdentityConfigurationElement" />.</summary>
      <returns>The <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration" /> loaded from the elements in the configuration file.</returns>
      <param name="element">The &lt;identityConfiguration&gt; element from the configuration file from which to load settings.</param>
    </member>
    <member name="M:System.IdentityModel.Configuration.IdentityConfiguration.LoadHandlerConfiguration(System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration,System.IdentityModel.Configuration.SecurityTokenHandlerConfigurationElement)">
      <summary>Loads configuration elements pertaining to the <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerCollection" />.</summary>
      <returns>The <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration" /> loaded from the elements in the configuration file and the <paramref name="baseConfiguration" />.</returns>
      <param name="baseConfiguration">The base <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration" /> from which to inherit default values.</param>
      <param name="element">The <see cref="T:System.IdentityModel.Configuration.SecurityTokenHandlerConfigurationElement" /> from the configuration file.</param>
    </member>
    <member name="M:System.IdentityModel.Configuration.IdentityConfiguration.LoadHandlers(System.IdentityModel.Configuration.IdentityConfigurationElement)">
      <summary>Loads the <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager" /> defined for the specified service.</summary>
      <returns>The handler collection manager.</returns>
      <param name="serviceElement">The &lt;identityConfiguration&gt; element used to configure this instance.</param>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfiguration.MaxClockSkew">
      <summary>Gets or sets the maximum allowable time difference between the system clocks of the two parties that are communicating.</summary>
      <returns>The maximum clock skew.</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfiguration.Name">
      <summary>Gets the service name of this configuration.</summary>
      <returns>The service name.</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfiguration.RevocationMode">
      <summary>Gets or sets the revocation mode used by handlers to validate issuer certificates.</summary>
      <returns>The revocation mode.</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfiguration.SaveBootstrapContext">
      <summary>Gets or sets a value that indicates whether the <see cref="T:System.IdentityModel.Tokens.BootstrapContext" /> object is saved in the <see cref="T:System.Security.Claims.ClaimsIdentity" /> and Sessions after token validation.</summary>
      <returns>true if bootstrap context is saved; otherwise, false.</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfiguration.SecurityTokenHandlerCollectionManager">
      <summary>Gets the <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager" /> containing the set of <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" /> objects that are used to serialize and validate tokens found in WS-Trust messages.</summary>
      <returns>The handler collection manager.</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfiguration.SecurityTokenHandlers">
      <summary>Gets the collection of <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" /> objects used to serialize and validate tokens found in WS-Trust messages.</summary>
      <returns>The collection of token handlers.</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfiguration.ServiceCertificate">
      <summary>Gets or sets the service certificate.</summary>
      <returns>The X.509 certificate to use as the service certificate.</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfiguration.ServiceTokenResolver">
      <summary>Gets or sets the service token resolver.</summary>
      <returns>The service token resolver.</returns>
      <exception cref="T:System.ArgumentNullException">An attempt to set the property to null occurs.</exception>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfiguration.TokenReplayCacheExpirationPeriod">
      <summary>Gets or sets the expiration period for items placed in the <see cref="T:System.IdentityModel.Tokens.TokenReplayCache" />.</summary>
      <returns>The expiration period for items placed in the token replay cache.</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfiguration.TrustedStoreLocation">
      <summary>Gets or sets the trusted store location used by handlers to validate issuer certificates.</summary>
      <returns>The trusted store location.</returns>
    </member>
    <member name="T:System.IdentityModel.Configuration.IdentityConfigurationElement">
      <summary>Represents an &lt;identityConfiguration&gt; element in a configuration file. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.IdentityModel.Configuration.IdentityConfigurationElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Configuration.IdentityConfigurationElement" /> class.</summary>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfigurationElement.AudienceUris">
      <summary>Gets the <see cref="T:System.IdentityModel.Configuration.AudienceUriElementCollection" /> that is associated with this identity configuration element.</summary>
      <returns>The collection of audience URIs that are configured for this identity configuration element.</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfigurationElement.Caches">
      <summary>Gets or sets the <see cref="T:System.IdentityModel.Configuration.IdentityModelCachesElement" /> that is associated with this identity configuration element.</summary>
      <returns>The element that configures the token replay cache and the session security token cache for this identity configuration element.</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfigurationElement.CertificateValidation">
      <summary>Gets or sets the <see cref="T:System.IdentityModel.Configuration.X509CertificateValidationElement" /> that is associated with this identity configuration element.</summary>
      <returns>The element that configures the certificate validator and its properties for this identity configuration element.</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfigurationElement.ClaimsAuthenticationManager">
      <summary>Gets or sets the claims authentication manager that is associated with this identity configuration element.</summary>
      <returns>A custom type element that specifies the <see cref="T:System.Type" /> of the claims authentication manager. The type must derive from <see cref="T:System.Security.Claims.ClaimsAuthenticationManager" />.</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfigurationElement.ClaimsAuthorizationManager">
      <summary>Gets or sets the claims authorization manager that is associated with this identity configuration element.</summary>
      <returns>A custom type element that specifies the <see cref="T:System.Type" /> of the claims authorization manager. The type must derive from <see cref="T:System.Security.Claims.ClaimsAuthorizationManager" />.</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfigurationElement.IssuerNameRegistry">
      <summary>Gets or sets the <see cref="T:System.IdentityModel.Configuration.IssuerNameRegistryElement" /> that is associated with this identity configuration element.</summary>
      <returns>The element that configures the issuer name registry for this identity configuration element.</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfigurationElement.IssuerTokenResolver">
      <summary>Gets or sets the issuer token resolver that is associated with this identity configuration element.</summary>
      <returns>A custom type element that specifies the <see cref="T:System.Type" /> of the issuer token resolver. The type must derive from <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />.</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfigurationElement.MaximumClockSkew">
      <summary>Gets or sets the maximum clock skew that is configured for this identity configuration element.</summary>
      <returns>The maximum clock skew.</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfigurationElement.Name">
      <summary>Gets or sets the name of the identity configuration element.</summary>
      <returns>The name of the identity configuration.</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfigurationElement.SaveBootstrapContext">
      <summary>Gets or sets a value that indicates whether to save the bootstrap context in claims identities and session security tokens created by the handlers configured in this identity collection.</summary>
      <returns>true to save the <see cref="T:System.IdentityModel.Tokens.BootstrapContext" />; otherwise, false.</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfigurationElement.SecurityTokenHandlerSets">
      <summary>Gets or sets the <see cref="T:System.IdentityModel.Configuration.SecurityTokenHandlerSetElementCollection" /> that is associated with this identity configuration element.</summary>
      <returns>The security token handler collections configured for this identity configuration element..</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfigurationElement.ServiceTokenResolver">
      <summary>Gets or sets the service token resolver that is associated with this identity configuration element.</summary>
      <returns>A custom type element that specifies the <see cref="T:System.Type" /> of the service token resolver. The type must derive from <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />.</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfigurationElement.TokenReplayDetection">
      <summary>Gets or sets the <see cref="T:System.IdentityModel.Configuration.TokenReplayDetectionElement" /> that is associated with this identity configuration element.</summary>
      <returns>The element that specifies whether token replay detection is enabled and specifies the maximum expiration period for tokens in the token replay cache. </returns>
    </member>
    <member name="T:System.IdentityModel.Configuration.IdentityConfigurationElementCollection">
      <summary>Represents the collection of &lt;identityConfiguration&gt; elements in a configuration file. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.IdentityModel.Configuration.IdentityConfigurationElementCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Configuration.IdentityConfigurationElementCollection" /> class.</summary>
    </member>
    <member name="M:System.IdentityModel.Configuration.IdentityConfigurationElementCollection.GetElement(System.String)">
      <summary>Retrieves the <see cref="T:System.IdentityModel.Configuration.IdentityConfigurationElement" /> that has the specified name.</summary>
      <returns>The &lt;identityConfiguration&gt; element that has the specified name, or null if no matching element is found.</returns>
      <param name="name">The name of the identityConfiguration element to retrieve. This corresponds to the value of the element’s <see cref="P:System.IdentityModel.Configuration.IdentityConfigurationElement.Name" /> property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The default configuration was specified in the name parameter and a matching <see cref="T:System.IdentityModel.Configuration.IdentityConfigurationElement" /> could not be found.</exception>
    </member>
    <member name="T:System.IdentityModel.Configuration.IdentityModelCaches">
      <summary>Defines the caches that are configured to detect replayed tokens and to cache session tokens. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.IdentityModel.Configuration.IdentityModelCaches.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Configuration.IdentityModelCaches" /> class.</summary>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityModelCaches.SessionSecurityTokenCache">
      <summary>Gets or sets the <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenCache" /> that is used to cache the <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />.</summary>
      <returns>The configured session token cache.</returns>
      <exception cref="T:System.ArgumentNullException">An attempt to set the property to null occurs.</exception>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityModelCaches.TokenReplayCache">
      <summary>Gets or sets the <see cref="T:System.IdentityModel.Tokens.TokenReplayCache" /> that is used to determine whether tokens are replayed.</summary>
      <returns>The configured token replay cache.</returns>
      <exception cref="T:System.ArgumentNullException">An attempt to set the property to null occurs.</exception>
    </member>
    <member name="T:System.IdentityModel.Configuration.IdentityModelCachesElement">
      <summary>Represents a &lt;caches&gt; element in a configuration file. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.IdentityModel.Configuration.IdentityModelCachesElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Configuration.IdentityModelCachesElement" /> class.</summary>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityModelCachesElement.IsConfigured">
      <summary>Gets a value that indicates whether this element has been configured.</summary>
      <returns>true if the element has been configured; otherwise, false.</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityModelCachesElement.SessionSecurityTokenCache">
      <summary>Gets or sets the <see cref="T:System.Type" /> of the session token cache. </summary>
      <returns>The type of the session token cache. The type must derive from <see cref="System.IdentityModel.Tokens.SessionSecurityTokenCache" />.</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityModelCachesElement.TokenReplayCache">
      <summary>Gets or sets the <see cref="T:System.Type" /> of the token replay cache. </summary>
      <returns>The type of the token replay cache. The type must derive from <see cref="System.IdentityModel.Tokens.TokenReplayCache" />.</returns>
    </member>
    <member name="T:System.IdentityModel.Configuration.IssuerNameRegistryElement">
      <summary>Represents an &lt;issuerNameRegistry&gt; element in a configuration file. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.IdentityModel.Configuration.IssuerNameRegistryElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Configuration.IssuerNameRegistryElement" /> class.</summary>
    </member>
    <member name="P:System.IdentityModel.Configuration.IssuerNameRegistryElement.Type">
      <summary>Gets or sets a string representation of the <see cref="T:System.Type" /> of the issuer name registry.</summary>
      <returns>The string representation of the <see cref="T:System.Type" /> of the issuer name registry. The type must derive from the <see cref="T:System.IdentityModel.Tokens.IssuerNameRegistry" /> class.</returns>
    </member>
    <member name="T:System.IdentityModel.Configuration.SecurityTokenHandlerConfigurationElement">
      <summary>Represents a &lt;securityTokenHandlerConfiguration&gt; element in a configuration file.</summary>
    </member>
    <member name="M:System.IdentityModel.Configuration.SecurityTokenHandlerConfigurationElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Configuration.SecurityTokenHandlerConfigurationElement" /> class.</summary>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenHandlerConfigurationElement.AudienceUris">
      <summary>Gets the <see cref="T:System.IdentityModel.Configuration.AudienceUriElementCollection" /> that is associated with this token handler configuration element.</summary>
      <returns>The collection of audience URIs that are configured for this token handler configuration element.</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenHandlerConfigurationElement.Caches">
      <summary>Gets or sets the <see cref="T:System.IdentityModel.Configuration.IdentityModelCachesElement" /> that is associated with this token handler configuration element.</summary>
      <returns>The element that configures the token replay cache and the session security token cache for this token handler configuration element.</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenHandlerConfigurationElement.CertificateValidation">
      <summary>Gets or sets the <see cref="T:System.IdentityModel.Configuration.X509CertificateValidationElement" /> that is associated with this token handler configuration element.</summary>
      <returns>The element that configures the certificate validator and its properties for this token handler configuration element.</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenHandlerConfigurationElement.IssuerNameRegistry">
      <summary>Gets or sets the <see cref="T:System.IdentityModel.Configuration.IssuerNameRegistryElement" /> that is associated with this token handler configuration element.</summary>
      <returns>The element that configures the issuer name registry for this token handler configuration element.</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenHandlerConfigurationElement.IssuerTokenResolver">
      <summary>Gets or sets the issuer token resolver that is associated with this token handler configuration element.</summary>
      <returns>A custom type element that specifies the <see cref="T:System.Type" /> of the issuer token resolver. The type must derive from <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />.</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenHandlerConfigurationElement.MaximumClockSkew">
      <summary>Gets or sets the maximum clock skew that is configured for this token handler configuration element.</summary>
      <returns>The maximum clock skew.</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenHandlerConfigurationElement.Name">
      <summary>Gets or sets the name of the token handler configuration element.</summary>
      <returns>The name of the identity configuration.</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenHandlerConfigurationElement.SaveBootstrapContext">
      <summary>Gets or sets a value that indicates whether to save the bootstrap context in claims identities and session security tokens created by the handlers configured in this identity collection.</summary>
      <returns>true to save the <see cref="T:System.IdentityModel.Tokens.BootstrapContext" />; otherwise, false.</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenHandlerConfigurationElement.ServiceTokenResolver">
      <summary>Gets or sets the service token resolver that is associated with this token handler configuration element.</summary>
      <returns>A custom type element that specifies the <see cref="T:System.Type" /> of the service token resolver. The type must derive from <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />.</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenHandlerConfigurationElement.TokenReplayDetection">
      <summary>Gets or sets the <see cref="T:System.IdentityModel.Configuration.TokenReplayDetectionElement" /> that is associated with this token handler configuration element.</summary>
      <returns>The element that specifies whether token replay detection is enabled and specifies the maximum expiration period for tokens in the token replay cache. </returns>
    </member>
    <member name="T:System.IdentityModel.Configuration.SecurityTokenHandlerElementCollection">
      <summary>Represents a &lt;securityTokenHandlers&gt; element in a configuration file. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.IdentityModel.Configuration.SecurityTokenHandlerElementCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Configuration.SecurityTokenHandlerElementCollection" /> class.</summary>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenHandlerElementCollection.Name">
      <summary>Gets or sets the name of the collection.</summary>
      <returns>The name of the collection.</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenHandlerElementCollection.SecurityTokenHandlerConfiguration">
      <summary>Gets or sets the default settings for the handlers in the collection.</summary>
      <returns>The default settings for the handlers in the collection.</returns>
    </member>
    <member name="T:System.IdentityModel.Configuration.SecurityTokenHandlerSetElementCollection">
      <summary>Represents the set of all of the &lt;securityTokenHandlers&gt; elements under an &lt;identityConfiguration&gt; element in a configuration file. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.IdentityModel.Configuration.SecurityTokenHandlerSetElementCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Configuration.SecurityTokenHandlerSetElementCollection" /> class.</summary>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenHandlerSetElementCollection.IsConfigured">
      <summary>Gets a value that indicates whether this element has been configured with non-default values.</summary>
      <returns>true if the element has been configured with non-default values; otherwise, false.</returns>
    </member>
    <member name="T:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration">
      <summary>Defines the configuration for a security token service (STS). Classes that implement STSs derive from the <see cref="T:System.IdentityModel.SecurityTokenService" /> class.</summary>
    </member>
    <member name="M:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration" /> class.</summary>
    </member>
    <member name="M:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration" /> class. Optionally loads settings from the current configuration.</summary>
      <param name="loadConfig">true to load settings from the configuration file; otherwise false.</param>
    </member>
    <member name="M:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration" /> class that has the specified issuer name.</summary>
      <param name="issuerName">The issuer name. Sets the <see cref="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.TokenIssuerName" /> property.</param>
    </member>
    <member name="M:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.#ctor(System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration" /> class that has the specified issuer name. Optionally loads settings from the current configuration.</summary>
      <param name="issuerName">The issuer name. Sets the <see cref="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.TokenIssuerName" /> property.</param>
      <param name="loadConfig">true to load settings from the configuration file; otherwise false.</param>
    </member>
    <member name="M:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.#ctor(System.String,System.IdentityModel.Tokens.SigningCredentials)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration" /> class that has the specified issuer name and signing credentials.</summary>
      <param name="issuerName">The issuer name. Sets the <see cref="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.TokenIssuerName" /> property.</param>
      <param name="signingCredentials">The signing credentials for the STS. Sets the <see cref="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.SigningCredentials" /> property.ImportantThe <see cref="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.SigningCredentials" /> property is ignored when implementing an active security token service (STS). Instead you must set the service certificate through the <see cref="P:System.ServiceModel.ServiceHostBase.Credentials" /> property on the service host  that is hosting your STS. The service host used for an active STS is represented by the <see cref="T:System.ServiceModel.Security.WSTrustServiceHost" /> class.</param>
    </member>
    <member name="M:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.#ctor(System.String,System.IdentityModel.Tokens.SigningCredentials,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration" /> class that has the specified issuer name and signing credentials. Optionally loads settings from the current configuration.</summary>
      <param name="issuerName">The issuer name. Sets the <see cref="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.TokenIssuerName" /> property.</param>
      <param name="signingCredentials">The signing credentials for the STS. Sets the <see cref="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.SigningCredentials" /> property.ImportantThe <see cref="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.SigningCredentials" /> property is ignored when implementing an active security token service (STS). Instead you must set the service certificate through the <see cref="P:System.ServiceModel.ServiceHostBase.Credentials" /> property on the service host  that is hosting your STS. The service host used for an active STS is represented by the <see cref="T:System.ServiceModel.Security.WSTrustServiceHost" /> class.</param>
      <param name="loadConfig">true to load settings from the configuration file; otherwise false.</param>
    </member>
    <member name="M:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.#ctor(System.String,System.IdentityModel.Tokens.SigningCredentials,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration" /> class that has the specified issuer name and signing credentials. Settings are loaded from the specified named configuration.</summary>
      <param name="issuerName">The issuer name. Sets the <see cref="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.TokenIssuerName" /> property.</param>
      <param name="signingCredentials">The signing credentials for the STS. Sets the <see cref="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.SigningCredentials" /> property.ImportantThe <see cref="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.SigningCredentials" /> property is ignored when implementing an active security token service (STS). Instead you must set the service certificate through the <see cref="P:System.ServiceModel.ServiceHostBase.Credentials" /> property on the service host  that is hosting your STS. The service host used for an active STS is represented by the <see cref="T:System.ServiceModel.Security.WSTrustServiceHost" /> class.</param>
      <param name="serviceName">The name of the &lt;identityConfiguration&gt; element from which the configuration is to be loaded.</param>
    </member>
    <member name="M:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.CreateSecurityTokenService">
      <summary>Creates an security token service (STS) instance from the <see cref="T:System.Type" /> specified in the <see cref="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.SecurityTokenService" /> property.</summary>
      <returns>An instance of the <see cref="T:System.Type" /> specified in the <see cref="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.SecurityTokenService" /> property.</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.DefaultMaxSymmetricKeySizeInBits">
      <summary>Gets or sets the default key size limit in bits used check if the KeySize specified in the request is within this limit.</summary>
      <returns>The default key size limit, in bits. The default is 1024.</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.DefaultSymmetricKeySizeInBits">
      <summary>Gets or sets the default key size in bits used in the issued token.</summary>
      <returns>The key size used in the issued token, in bits. The default is 256.</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.DefaultTokenLifetime">
      <summary>Gets or sets the default lifetime used in the issued tokens.</summary>
      <returns>The default lifetime to use in issued tokens. The default is 1 day.</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.DefaultTokenType">
      <summary>Gets or sets the default token type that is used in token issuance.</summary>
      <returns>Returns a string that contains the default token type.</returns>
      <exception cref="T:System.ArgumentNullException">The specified value is null or empty.</exception>
      <exception cref="T:System.ArgumentException">The specified value is not defined in the token handlers.</exception>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.DisableWsdl">
      <summary>Gets or sets a value that specifies whether WSDL generation should be enabled for the security token service (STS).</summary>
      <returns>true to enable WSDL generation for the STS; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.MaximumTokenLifetime">
      <summary>Gets or sets the maximum token lifetime for issued tokens.</summary>
      <returns>The maximum token lifetime for issued tokens. The default is 1 day.</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.SecurityTokenService">
      <summary>Gets or sets the <see cref="T:System.Type" /> of the security token service (STS).</summary>
      <returns>The type of the security token service. The type must derive from the <see cref="T:System.IdentityModel.SecurityTokenService" /> class.</returns>
      <exception cref="T:System.ArgumentException">The specified value is not assignable as <see cref="T:System.IdentityModel.SecurityTokenService" />.</exception>
      <exception cref="T:System.ArgumentNullException">The specified value is null.</exception>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.SigningCredentials">
      <summary>Gets or sets the signing credentials.</summary>
      <returns>The signing credentials.</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.TokenIssuerName">
      <summary>Gets or sets the issuer name so that it can be set in the issued token.</summary>
      <returns>The issuer name.</returns>
      <exception cref="T:System.ArgumentNullException">An attempt to set the property to null or an empty string occurs.</exception>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.WSTrust13RequestSerializer">
      <summary>Gets or sets the WS-Trust 1.3 Request (RST) serializer.</summary>
      <returns>The WS-Trust 1.3 Request (RST) serializer.</returns>
      <exception cref="T:System.ArgumentNullException">The specified value is null.</exception>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.WSTrust13ResponseSerializer">
      <summary>Gets or sets the WS-Trust 1.3 Response (RSTR) serializer.</summary>
      <returns>The WS-Trust 1.3 Response (RSTR) serializer.</returns>
      <exception cref="T:System.ArgumentNullException">The specified value is null.</exception>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.WSTrustFeb2005RequestSerializer">
      <summary>Gets or sets the WS-Trust Feb 2005 Request (RST) serializer.</summary>
      <returns>The WS-Trust Feb 2005 Request (RST) serializer.</returns>
      <exception cref="T:System.ArgumentNullException">The specified value is null.</exception>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.WSTrustFeb2005ResponseSerializer">
      <summary>Gets or sets the WS-Trust Feb 2005 Response (RSTR) serializer.</summary>
      <returns>The WS-Trust Feb 2005 Response (RSTR) serializer.</returns>
      <exception cref="T:System.ArgumentNullException">The specified value is null.</exception>
    </member>
    <member name="T:System.IdentityModel.Configuration.SystemIdentityModelSection">
      <summary>Represents the &lt;system.identityModel&gt; section in a configuration file. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.IdentityModel.Configuration.SystemIdentityModelSection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Configuration.SystemIdentityModelSection" /> class.</summary>
    </member>
    <member name="P:System.IdentityModel.Configuration.SystemIdentityModelSection.Current">
      <summary>Gets the current <see cref="T:System.IdentityModel.Configuration.SystemIdentityModelSection" /> reference.</summary>
      <returns>The current <see cref="T:System.IdentityModel.Configuration.SystemIdentityModelSection" /> reference.</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.SystemIdentityModelSection.DefaultIdentityConfigurationElement">
      <summary>Gets the default (unnamed) <see cref="T:System.IdentityModel.Configuration.IdentityConfigurationElement" /> from the configuration file.</summary>
      <returns>The default (unnamed) &lt;identityConfiguration&gt; element.</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.SystemIdentityModelSection.IdentityConfigurationElements">
      <summary>Gets the <see cref="T:System.IdentityModel.Configuration.IdentityConfigurationElementCollection" /> from the configuration file.</summary>
      <returns>A collection that contains all of the &lt;identityConfiguration&gt; elements in the &lt;system.identityModel&gt; section.</returns>
    </member>
    <member name="F:System.IdentityModel.Configuration.SystemIdentityModelSection.SectionName">
      <summary>The name of the configuration section as defined by Windows Identity Foundation (WIF); system.identityModel.</summary>
    </member>
    <member name="T:System.IdentityModel.Configuration.TokenReplayDetectionElement">
      <summary>Represents a &lt;tokenReplayDetection&gt; element in a configuration file. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.IdentityModel.Configuration.TokenReplayDetectionElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Configuration.TokenReplayDetectionElement" /> class</summary>
    </member>
    <member name="P:System.IdentityModel.Configuration.TokenReplayDetectionElement.Enabled">
      <summary>Gets or sets a value that indicates if replay detection should be performed.</summary>
      <returns>true to perform replay detection; otherwise, false.</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.TokenReplayDetectionElement.ExpirationPeriod">
      <summary>Gets or sets the maximum amount of time before an item is considered expired and removed from the cache.</summary>
      <returns>The maximum amount of time before an item is considered expired and removed from the cache.</returns>
    </member>
    <member name="T:System.IdentityModel.Configuration.X509CertificateValidationElement">
      <summary>Represents the &lt;certificateValidation&gt; element in a configuration file. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.IdentityModel.Configuration.X509CertificateValidationElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Configuration.X509CertificateValidationElement" /> class.</summary>
    </member>
    <member name="P:System.IdentityModel.Configuration.X509CertificateValidationElement.CertificateValidationMode">
      <summary>Gets or sets the certificate validation mode.</summary>
      <returns>The certificate validation mode. The default is <see cref="F:System.ServiceModel.Security.X509CertificateValidationMode.PeerOrChainTrust" />.</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.X509CertificateValidationElement.CertificateValidator">
      <summary>Gets or sets the <see cref="" /> of the X.509 certificate validator.</summary>
      <returns>An element that wraps the type of the X.509 certificate validator.</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.X509CertificateValidationElement.RevocationMode">
      <summary>Gets or sets the revocation mode.</summary>
      <returns>The revocation mode. The default is <see cref="F:System.Security.Cryptography.X509Certificates.X509RevocationMode.OnLine" />.</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.X509CertificateValidationElement.TrustedStoreLocation">
      <summary>Gets or sets the trusted store location for X.509 certificates.</summary>
      <returns>The store location for X.509 certificates. The default is <see cref="F:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine" />.</returns>
    </member>
    <member name="T:System.IdentityModel.Metadata.ApplicationServiceDescriptor">
      <summary>Defines the application service descriptor and its endpoints.</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.ApplicationServiceDescriptor.#ctor">
      <summary>Initializes an instance of the <see cref="T:System.IdentityModel.Metadata.ApplicationServiceDescriptor" /> class.</summary>
    </member>
    <member name="P:System.IdentityModel.Metadata.ApplicationServiceDescriptor.Endpoints">
      <summary>Gets the endpoints of this application service.</summary>
      <returns>The collection of endpoints for the application service.</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.ApplicationServiceDescriptor.PassiveRequestorEndpoints">
      <summary>Gets the passive requestor endpoints of this application service.</summary>
      <returns>The collection of passive requestor endpoints for the application service.</returns>
    </member>
    <member name="T:System.IdentityModel.Metadata.ContactPerson">
      <summary>Represents a contact person in SAML 2.0 metadata.</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.ContactPerson.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Metadata.ContactPerson" /> class.</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.ContactPerson.#ctor(System.IdentityModel.Metadata.ContactType)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Metadata.ContactPerson" /> class with the specified contact type.</summary>
      <param name="contactType">The contact type.</param>
    </member>
    <member name="P:System.IdentityModel.Metadata.ContactPerson.Company">
      <summary>Gets or sets the company name.</summary>
      <returns>The company name.</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.ContactPerson.EmailAddresses">
      <summary>Gets the collection of email addresses.</summary>
      <returns>The collection of email addresses.</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.ContactPerson.GivenName">
      <summary>Gets or sets the given name.</summary>
      <returns>The given name.</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.ContactPerson.Surname">
      <summary>Gets or sets the surname.</summary>
      <returns>The surname.</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.ContactPerson.TelephoneNumbers">
      <summary>Gets or sets the collection of telephone numbers.</summary>
      <returns>The collection of telephone numbers.</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.ContactPerson.Type">
      <summary>Gets or sets the contact type.</summary>
      <returns>One of the enumeration values that specify the contact type.</returns>
    </member>
    <member name="T:System.IdentityModel.Metadata.ContactType">
      <summary>Specifies the type of a contact.</summary>
    </member>
    <member name="F:System.IdentityModel.Metadata.ContactType.Administrative">
      <summary>An administrative contact.</summary>
    </member>
    <member name="F:System.IdentityModel.Metadata.ContactType.Billing">
      <summary>A billing contact.</summary>
    </member>
    <member name="F:System.IdentityModel.Metadata.ContactType.Other">
      <summary>A contact with a type other than administrative, billing, support, technical, or unspecified.</summary>
    </member>
    <member name="F:System.IdentityModel.Metadata.ContactType.Support">
      <summary>A support contact.</summary>
    </member>
    <member name="F:System.IdentityModel.Metadata.ContactType.Technical">
      <summary>A technical contact.</summary>
    </member>
    <member name="F:System.IdentityModel.Metadata.ContactType.Unspecified">
      <summary>A contact with a type that is not specified.</summary>
    </member>
    <member name="T:System.IdentityModel.Metadata.DisplayClaim">
      <summary>Represents the displayable claim object.</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.DisplayClaim.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Metadata.DisplayClaim" /> class that has the specified claim type.</summary>
      <param name="claimType">The claim type for the display claim. Initializes the <see cref="P:System.IdentityModel.Metadata.DisplayClaim.ClaimType" /> property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="claimType" /> is null or an empty string.</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.DisplayClaim.#ctor(System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Metadata.DisplayClaim" /> class that has the specified claim type, display name, and description.</summary>
      <param name="claimType">The claim type for the display claim. Initializes the <see cref="P:System.IdentityModel.Metadata.DisplayClaim.ClaimType" /> property.</param>
      <param name="displayTag">The display name (or friendly name) for the display claim. Initializes the <see cref="P:System.IdentityModel.Metadata.DisplayClaim.DisplayTag" /> property.</param>
      <param name="description">The description for the display claim. Initializes the <see cref="P:System.IdentityModel.Metadata.DisplayClaim.Description" /> property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="claimType" /> is null or an empty string.</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.DisplayClaim.#ctor(System.String,System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Metadata.DisplayClaim" /> class that has the specified claim type, display name, display value, and description. The claim is required.</summary>
      <param name="claimType">The claim type for the display claim. Initializes the <see cref="P:System.IdentityModel.Metadata.DisplayClaim.ClaimType" /> property.</param>
      <param name="displayTag">The display name (or friendly name) for the display claim. Initializes the <see cref="P:System.IdentityModel.Metadata.DisplayClaim.DisplayTag" /> property.</param>
      <param name="description">The description for the display claim. Initializes the <see cref="P:System.IdentityModel.Metadata.DisplayClaim.Description" /> property.</param>
      <param name="displayValue">The display value for the display claim. Initializes the <see cref="P:System.IdentityModel.Metadata.DisplayClaim.DisplayValue" /> property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="claimType" /> is null or an empty string.</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.DisplayClaim.#ctor(System.String,System.String,System.String,System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Metadata.DisplayClaim" /> class that has the specified claim type, display name, display value, description, and optional attribute.</summary>
      <param name="claimType">The claim type for the display claim. Initializes the <see cref="P:System.IdentityModel.Metadata.DisplayClaim.ClaimType" /> property.</param>
      <param name="displayTag">The display name (or friendly name) for the display claim. Initializes the <see cref="P:System.IdentityModel.Metadata.DisplayClaim.DisplayTag" /> property.</param>
      <param name="description">The description for the display claim. Initializes the <see cref="P:System.IdentityModel.Metadata.DisplayClaim.Description" /> property.</param>
      <param name="displayValue">The display value for the display claim. Initializes the <see cref="P:System.IdentityModel.Metadata.DisplayClaim.DisplayValue" /> property.</param>
      <param name="optional">true if the claim is optional; otherwise, false. Initializes the <see cref="P:System.IdentityModel.Metadata.DisplayClaim.Optional" /> property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="claimType" /> is null or an empty string.</exception>
    </member>
    <member name="P:System.IdentityModel.Metadata.DisplayClaim.ClaimType">
      <summary>Gets the claim type associated with the display claim.</summary>
      <returns>A URI that represents the claim type.</returns>
    </member>
    <member name="M:System.IdentityModel.Metadata.DisplayClaim.CreateDisplayClaimFromClaimType(System.String)">
      <summary>Creates a display claim from the specified claim type.</summary>
      <returns>Returns <see cref="T:System.IdentityModel.Metadata.DisplayClaim" />.</returns>
      <param name="claimType">The URI that represents the claim type.</param>
    </member>
    <member name="P:System.IdentityModel.Metadata.DisplayClaim.Description">
      <summary>Gets or sets a description for the display claim.</summary>
      <returns>The description for the display claim.</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.DisplayClaim.DisplayTag">
      <summary>Gets or sets the friendly name for the display claim.</summary>
      <returns>The friendly name for the display claim.</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.DisplayClaim.DisplayValue">
      <summary>Gets or sets a displayable value for the display claim.</summary>
      <returns>The displayable value for the display claim.</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.DisplayClaim.Optional">
      <summary>Gets or sets the optional attribute for the display claim</summary>
      <returns>true if the display claim is optional; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.DisplayClaim.WriteOptionalAttribute">
      <summary>Gets or sets a value that indicates whether the optional attribute will be serialized.</summary>
      <returns>true to serialize the optional attribute; otherwise, false. The default value is false.</returns>
    </member>
    <member name="T:System.IdentityModel.Metadata.EncryptionMethod">
      <summary>Defines the encryption method.</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.EncryptionMethod.#ctor(System.Uri)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Metadata.EncryptionMethod" /> class that has the specified encryption algorithm.</summary>
      <param name="algorithm">The encryption algorithm URI.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithm" /> is null.</exception>
    </member>
    <member name="P:System.IdentityModel.Metadata.EncryptionMethod.Algorithm">
      <summary>Gets or sets the encryption method algorithm attribute.</summary>
      <returns>The encryption algorithm URI.</returns>
    </member>
    <member name="T:System.IdentityModel.Metadata.EntitiesDescriptor">
      <summary>Represents a collection of entities.</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.EntitiesDescriptor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Metadata.EntitiesDescriptor" /> class.</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.EntitiesDescriptor.#ctor(System.Collections.ObjectModel.Collection{System.IdentityModel.Metadata.EntitiesDescriptor})">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Metadata.EntitiesDescriptor" /> class with the specified collection of child <see cref="T:System.IdentityModel.Metadata.EntitiesDescriptor" />.</summary>
      <param name="entityGroupList">The entities descriptor collection. Initializes the <see cref="P:System.IdentityModel.Metadata.EntitiesDescriptor.ChildEntityGroups" /> property.</param>
    </member>
    <member name="M:System.IdentityModel.Metadata.EntitiesDescriptor.#ctor(System.Collections.ObjectModel.Collection{System.IdentityModel.Metadata.EntityDescriptor})">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Metadata.EntitiesDescriptor" /> class with the specified collection of child <see cref="T:System.IdentityModel.Metadata.EntityDescriptor" />.</summary>
      <param name="entityList">The entity descriptor collection. Initializes the <see cref="P:System.IdentityModel.Metadata.EntitiesDescriptor.ChildEntities" /> property.</param>
    </member>
    <member name="M:System.IdentityModel.Metadata.EntitiesDescriptor.#ctor(System.Collections.ObjectModel.Collection{System.IdentityModel.Metadata.EntityDescriptor},System.Collections.ObjectModel.Collection{System.IdentityModel.Metadata.EntitiesDescriptor})">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Metadata.EntitiesDescriptor" /> class with the specified collection of child <see cref="T:System.IdentityModel.Metadata.EntityDescriptor" /> and the specified collection of child <see cref="T:System.IdentityModel.Metadata.EntitiesDescriptor" />.</summary>
      <param name="entityList">The entity descriptor collection. Initializes the <see cref="P:System.IdentityModel.Metadata.EntitiesDescriptor.ChildEntities" /> property.</param>
      <param name="entityGroupList">The entities descriptor collection. Initializes the <see cref="P:System.IdentityModel.Metadata.EntitiesDescriptor.ChildEntityGroups" /> property.</param>
    </member>
    <member name="P:System.IdentityModel.Metadata.EntitiesDescriptor.ChildEntities">
      <summary>Gets the child <see cref="T:System.IdentityModel.Metadata.EntityDescriptor" /> for this entities collection.</summary>
      <returns>The collection of child <see cref="T:System.IdentityModel.Metadata.EntityDescriptor" />. The default is an empty collection.</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.EntitiesDescriptor.ChildEntityGroups">
      <summary>Gets the child <see cref="T:System.IdentityModel.Metadata.EntitiesDescriptor" /> for this entities collection.</summary>
      <returns>The collection of child <see cref="T:System.IdentityModel.Metadata.EntitiesDescriptor" /> for this entity. The default is an empty collection.</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.EntitiesDescriptor.Name">
      <summary>Gets or sets the name of this entities collection.</summary>
      <returns>The name of the entities collection. The default is null.</returns>
    </member>
    <member name="T:System.IdentityModel.Metadata.EntityDescriptor">
      <summary>Represents an entity descriptor.</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.EntityDescriptor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Metadata.EntityDescriptor" /> class.</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.EntityDescriptor.#ctor(System.IdentityModel.Metadata.EntityId)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Metadata.EntityDescriptor" /> class that has the specified entity ID.</summary>
      <param name="entityId">The entity ID. Initializes the <see cref="P:System.IdentityModel.Metadata.EntityDescriptor.EntityId" /> property.</param>
    </member>
    <member name="P:System.IdentityModel.Metadata.EntityDescriptor.Contacts">
      <summary>Gets the collection of <see cref="T:System.IdentityModel.Metadata.ContactPerson" /> for this descriptor.</summary>
      <returns>The collection of contact person objects. The default is an empty collection.</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.EntityDescriptor.EntityId">
      <summary>Gets or sets the entity ID for this descriptor.</summary>
      <returns>The entity ID. The default is null.</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.EntityDescriptor.FederationId">
      <summary>Gets or sets the federation ID for this descriptor.</summary>
      <returns>The federation ID. The default is null.</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.EntityDescriptor.Organization">
      <summary>Gets or sets the organization for this descriptor.</summary>
      <returns>The organization. The default is null.</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.EntityDescriptor.RoleDescriptors">
      <summary>Gets the collection of role descriptors for this descriptor.</summary>
      <returns>The collection of role descriptors. The default is an empty collection.</returns>
    </member>
    <member name="T:System.IdentityModel.Metadata.EntityId">
      <summary>Represents an entity ID.</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.EntityId.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Metadata.EntityId" /> class.</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.EntityId.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Metadata.EntityId" /> class that has the specified ID.</summary>
      <param name="id">The ID with which to initialize the new instance. Initializes the <see cref="P:System.IdentityModel.Metadata.EntityId.Id" /> property.</param>
    </member>
    <member name="P:System.IdentityModel.Metadata.EntityId.Id">
      <summary>Gets or sets the entity ID.</summary>
      <returns>The entity ID.</returns>
      <exception cref="T:System.ArgumentException">An attempt to set an entity ID longer than 1024 characters occurs.</exception>
    </member>
    <member name="T:System.IdentityModel.Metadata.IdentityProviderSingleSignOnDescriptor">
      <summary>The identity provider single sign-on descriptor (IDPSSODescriptor) class.</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.IdentityProviderSingleSignOnDescriptor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Metadata.IdentityProviderSingleSignOnDescriptor" /> class.</summary>
    </member>
    <member name="P:System.IdentityModel.Metadata.IdentityProviderSingleSignOnDescriptor.SingleSignOnServices">
      <summary>Gets the collection of <see cref="T:System.IdentityModel.Metadata.ProtocolEndpoint" /> representing single sign-on services.</summary>
      <returns>The collection of protocol endpoints that represent single sign-on services. The default is an empty collection.</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.IdentityProviderSingleSignOnDescriptor.SupportedAttributes">
      <summary>Gets the supported <see cref="T:Microsoft.IdentityModel.Tokens.Saml2Attribute" /> collection.</summary>
      <returns>The collection of supported attributes. The default is an empty collection.</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.IdentityProviderSingleSignOnDescriptor.WantAuthenticationRequestsSigned">
      <summary>Gets or sets a value that indicates whether authentication requests should be signed.</summary>
      <returns>true if authentication requests should be signed; otherwise, false. The default is false.</returns>
    </member>
    <member name="T:System.IdentityModel.Metadata.IndexedProtocolEndpoint">
      <summary>Defines an indexed <see cref="T:System.IdentityModel.Metadata.ProtocolEndpoint" />.</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.IndexedProtocolEndpoint.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Metadata.IndexedProtocolEndpoint" /> class.</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.IndexedProtocolEndpoint.#ctor(System.Int32,System.Uri,System.Uri)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Metadata.IndexedProtocolEndpoint" /> class that has the specified index, binding, and location.</summary>
      <param name="index">The index.</param>
      <param name="binding">The binding.</param>
      <param name="location">The location.</param>
    </member>
    <member name="P:System.IdentityModel.Metadata.IndexedProtocolEndpoint.Index">
      <summary>Gets or sets the index. This is a required element.</summary>
      <returns>The index.</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.IndexedProtocolEndpoint.IsDefault">
      <summary>Gets or sets a value that indicates whether this is the default endpoint. This is optional.</summary>
      <returns>true if this is the default endpoint; otherwise, false. Can be null. The default is null.</returns>
    </member>
    <member name="T:System.IdentityModel.Metadata.IndexedProtocolEndpointDictionary">
      <summary>A sorted list of <see cref="T:System.IdentityModel.Metadata.IndexedProtocolEndpoint" />.</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.IndexedProtocolEndpointDictionary.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Metadata.IndexedProtocolEndpointDictionary" /> class.</summary>
    </member>
    <member name="P:System.IdentityModel.Metadata.IndexedProtocolEndpointDictionary.Default">
      <summary>Gets the default <see cref="T:System.IdentityModel.Metadata.IndexedProtocolEndpoint" />.</summary>
      <returns>The default <see cref="T:System.IdentityModel.Metadata.IndexedProtocolEndpoint" />. null if no default exists.</returns>
    </member>
    <member name="T:System.IdentityModel.Metadata.KeyDescriptor">
      <summary>Defines the key descriptor.</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.KeyDescriptor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Metadata.KeyDescriptor" /> class with default values.</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.KeyDescriptor.#ctor(System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Metadata.KeyDescriptor" /> class by using the specified key identifier.</summary>
      <param name="ski">The key identifier for this instance.</param>
    </member>
    <member name="P:System.IdentityModel.Metadata.KeyDescriptor.EncryptionMethods">
      <summary>Gets the collection of <see cref="T:System.IdentityModel.Metadata.EncryptionMethod" /> for this key descriptor.</summary>
      <returns>The collection of encryption methods. The default is an empty collection.</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.KeyDescriptor.KeyInfo">
      <summary>Gets or sets the key identifier for this key descriptor.</summary>
      <returns>The key identifier. The default is null.</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.KeyDescriptor.Use">
      <summary>Gets or sets the <see cref="T:System.IdentityModel.Metadata.KeyType" /> for this key descriptor.</summary>
      <returns>One of the enumeration values that specifies the key type. The default is <see cref="F:System.IdentityModel.Metadata.KeyType.Unspecified" />.</returns>
    </member>
    <member name="T:System.IdentityModel.Metadata.KeyType">
      <summary>Defines the key types for the <see cref="P:System.IdentityModel.Metadata.KeyDescriptor.Use" /> property.</summary>
    </member>
    <member name="F:System.IdentityModel.Metadata.KeyType.Encryption">
      <summary>The key is used for encryption.</summary>
    </member>
    <member name="F:System.IdentityModel.Metadata.KeyType.Signing">
      <summary>The key is used for signing.</summary>
    </member>
    <member name="F:System.IdentityModel.Metadata.KeyType.Unspecified">
      <summary>The key type is not specified.</summary>
    </member>
    <member name="T:System.IdentityModel.Metadata.LocalizedEntry">
      <summary>The abstract base class that defines a localized entry.</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.LocalizedEntry.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Metadata.LocalizedEntry" /> class.</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.LocalizedEntry.#ctor(System.Globalization.CultureInfo)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Metadata.LocalizedEntry" /> class for the specified culture.</summary>
      <param name="language">The culture information. Initializes the <see cref="P:System.IdentityModel.Metadata.LocalizedEntry.Language" /> property.</param>
    </member>
    <member name="P:System.IdentityModel.Metadata.LocalizedEntry.Language">
      <summary>Gets or sets the culture information.</summary>
      <returns>The culture information.</returns>
      <exception cref="T:System.ArgumentNullException">An attempt to set the property to null occurs.</exception>
    </member>
    <member name="T:System.IdentityModel.Metadata.LocalizedEntryCollection`1">
      <summary>A collection of <see cref="T:System.IdentityModel.Metadata.LocalizedEntry" /> objects.</summary>
      <typeparam name="T">The <see cref="T:System.Type" /> of the objects in the collection. Must derive from the <see cref="T:System.IdentityModel.Metadata.LocalizedEntry" /> class.</typeparam>
    </member>
    <member name="M:System.IdentityModel.Metadata.LocalizedEntryCollection`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Metadata.LocalizedEntryCollection`1" /> class.</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.LocalizedEntryCollection`1.GetKeyForItem(`0)">
      <summary>Gets the key for the specified item.</summary>
      <returns>A <see cref="T:System.Globalization.CultureInfo" /> that represents the key.</returns>
      <param name="item">The entry for which the key is to be returned.</param>
    </member>
    <member name="T:System.IdentityModel.Metadata.LocalizedName">
      <summary>Defines a localized name.</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.LocalizedName.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Metadata.LocalizedName" /> class.</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.LocalizedName.#ctor(System.String,System.Globalization.CultureInfo)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Metadata.LocalizedName" /> class that has the specified name and culture (language).</summary>
      <param name="name">The name for this instance. Initializes the <see cref="P:System.IdentityModel.Metadata.LocalizedName.Name" /> property.</param>
      <param name="language">The <see cref="T:System.Globalization.CultureInfo" /> that defines the language for this instance. Initializes the <see cref="P:System.IdentityModel.Metadata.LocalizedEntry.Language" /> property.</param>
    </member>
    <member name="P:System.IdentityModel.Metadata.LocalizedName.Name">
      <summary>Gets or sets the name.</summary>
      <returns>The name.</returns>
    </member>
    <member name="T:System.IdentityModel.Metadata.LocalizedUri">
      <summary>Defines a localized URI.</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.LocalizedUri.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Metadata.LocalizedUri" /> class.</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.LocalizedUri.#ctor(System.Uri,System.Globalization.CultureInfo)">
      <summary>Constructs a <see cref="T:System.IdentityModel.Metadata.LocalizedUri" /> with the <paramref name="uri" /> and <paramref name="language" />.</summary>
      <param name="uri">The URI for this instance. Initializes the  <see cref="P:System.IdentityModel.Metadata.LocalizedUri.Uri" /> property.</param>
      <param name="language">The <see cref="T:System.Globalization.CultureInfo" /> that defines the language for this instance. Initializes the <see cref="P:System.IdentityModel.Metadata.LocalizedEntry.Language" /> property.</param>
    </member>
    <member name="P:System.IdentityModel.Metadata.LocalizedUri.Uri">
      <summary>Gets or sets the URI.</summary>
      <returns>The URI.</returns>
    </member>
    <member name="T:System.IdentityModel.Metadata.MetadataBase">
      <summary>Defines the SAML metadata base class.</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataBase.#ctor">
      <summary>Called from constructors in derived classes to initialize the <see cref="T:System.IdentityModel.Metadata.MetadataBase" /> class.</summary>
    </member>
    <member name="P:System.IdentityModel.Metadata.MetadataBase.SigningCredentials">
      <summary>Gets or sets the signing credentials.</summary>
      <returns>The signing credentials. The default is null.</returns>
    </member>
    <member name="T:System.IdentityModel.Metadata.MetadataSerializationException">
      <summary>The exception that is thrown when an error occurs while serializing or deserializing SAML metadata.</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Metadata.MetadataSerializationException" /> class.</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Metadata.MetadataSerializationException" /> class with serialized data.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains the contextual information about the source or destination.</param>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Metadata.MetadataSerializationException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Metadata.MetadataSerializationException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The <see cref="T:System.Exception" /> that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="T:System.IdentityModel.Metadata.MetadataSerializer">
      <summary>Provides support for Metadata Serialization</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Metadata.MetadataSerializer" /> class with a default token serializer.</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.#ctor(System.IdentityModel.Selectors.SecurityTokenSerializer)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Metadata.MetadataSerializer" /> class that uses the specified token serializer.</summary>
      <param name="tokenSerializer">The token serializer that will be used to serialize security tokens.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tokenSerializer" /> is null.</exception>
    </member>
    <member name="P:System.IdentityModel.Metadata.MetadataSerializer.CertificateValidationMode">
      <summary>Gets or sets the validation mode of the X.509 certificate that is used to sign the metadata document.</summary>
      <returns>One of the enumeration values that specifies the X.509 certificate validation mode. The default is specified by <see cref="F:System.IdentityModel.Configuration.IdentityConfiguration.DefaultCertificateValidationMode" />.</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.MetadataSerializer.CertificateValidator">
      <summary>Gets or sets the certificate validator for the X.509 certificate that is used to sign the metadata document.</summary>
      <returns>The certificate validator for the X.509 certificate.</returns>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.CreateApplicationServiceInstance">
      <summary>Creates an application service descriptor.</summary>
      <returns>The application service descriptor.</returns>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.CreateContactPersonInstance">
      <summary>Creates a contact person.</summary>
      <returns>The contact person.</returns>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.CreateEntitiesDescriptorInstance">
      <summary>Creates an entities descriptor.</summary>
      <returns>The entities descriptor.</returns>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.CreateEntityDescriptorInstance">
      <summary>Creates an entity descriptor.</summary>
      <returns>The entity descriptor.</returns>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.CreateIdentityProviderSingleSignOnDescriptorInstance">
      <summary>Creates an IDPSSO descriptor.</summary>
      <returns>The IDPSSO descriptor.</returns>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.CreateIndexedProtocolEndpointInstance">
      <summary>Creates an indexed enpoint.</summary>
      <returns>The indexed endpoint.</returns>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.CreateKeyDescriptorInstance">
      <summary>Creates a key descriptor.</summary>
      <returns>The key descriptor.</returns>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.CreateLocalizedNameInstance">
      <summary>Creates a localized name.</summary>
      <returns>The localized name.</returns>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.CreateLocalizedUriInstance">
      <summary>Creates a localized URI.</summary>
      <returns>The localized URI.</returns>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.CreateOrganizationInstance">
      <summary>Creates an organization.</summary>
      <returns>The organization.</returns>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.CreateProtocolEndpointInstance">
      <summary>Creates an endpoint.</summary>
      <returns>The endpoint.</returns>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.CreateSecurityTokenServiceDescriptorInstance">
      <summary>Creates a security token service descriptor.</summary>
      <returns>The security token service descriptor.</returns>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.CreateServiceProviderSingleSignOnDescriptorInstance">
      <summary>Creates an SPSSO descriptor.</summary>
      <returns>The SPSSO descriptor.</returns>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.GetMetadataSigningCertificate(System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>Gets the X.509 certificate created from the specified key identifier.</summary>
      <returns>The X.509 certificate that was created from the specified key identifier.</returns>
      <param name="ski">The key identifier from which to create the X.509 certificate.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ski" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">Cannot find a key identifier clause of type <see cref="T:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause" /> in <paramref name="ski" />. Enforces the default behavior, you can override this method to support other key identifier clauses.</exception>
    </member>
    <member name="F:System.IdentityModel.Metadata.MetadataSerializer.LanguageAttribute">
      <summary>A string constant that defines the language attribute, “xml:lang”.</summary>
    </member>
    <member name="F:System.IdentityModel.Metadata.MetadataSerializer.LanguageLocalName">
      <summary>A string constant that defines the language local name, “lang”.</summary>
    </member>
    <member name="F:System.IdentityModel.Metadata.MetadataSerializer.LanguageNamespaceUri">
      <summary>A string constant that defines the language namespace URI, “http://www.w3.org/XML/1998/namespace”.</summary>
    </member>
    <member name="F:System.IdentityModel.Metadata.MetadataSerializer.LanguagePrefix">
      <summary>A string constant that defines the language prefix, “xml”.</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadApplicationServiceDescriptor(System.Xml.XmlReader)">
      <summary>Reads an application service descriptor.</summary>
      <returns>The application service descriptor.</returns>
      <param name="reader">The XML reader.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadAttribute(System.Xml.XmlReader)">
      <summary>Reads the &lt;saml:Attribute&gt; element.</summary>
      <returns>The Saml2 attribute.</returns>
      <param name="reader">The XML reader.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadContactPerson(System.Xml.XmlReader)">
      <summary>Reads a contact person.</summary>
      <returns>A contact person.</returns>
      <param name="reader">The XML reader.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadCustomAttributes``1(System.Xml.XmlReader,``0)">
      <summary>Extensibility point for reading custom attributes.</summary>
      <param name="reader">The XML reader.</param>
      <param name="target">An object of type <paramref name="T" />.</param>
      <typeparam name="T">The type that represents the metadata element that is being read; for example, <see cref="T:System.IdentityModel.Metadata.ContactPerson" />.</typeparam>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadCustomElement``1(System.Xml.XmlReader,``0)">
      <summary>Extensibility point for reading custom elements. By default, returns false.</summary>
      <returns>true if an element of type <paramref name="T" /> is read; otherwise, false.</returns>
      <param name="reader">The XML reader.</param>
      <param name="target">An object of type <paramref name="T" />.</param>
      <typeparam name="T">The type that represents the metadata element that is being read; for example, <see cref="T:System.IdentityModel.Metadata.ContactPerson" />.</typeparam>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadCustomRoleDescriptor(System.String,System.Xml.XmlReader,System.IdentityModel.Metadata.EntityDescriptor)">
      <summary>Extensibility point for reading custom RoleDescriptors.</summary>
      <param name="xsiType">The xsi type</param>
      <param name="reader">The XML reader.</param>
      <param name="entityDescriptor">The entity descriptor for adding the Role Descriptors</param>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadDisplayClaim(System.Xml.XmlReader)">
      <summary>Reads a display claim.</summary>
      <returns>The display claim.</returns>
      <param name="reader">The XML reader.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
      <exception cref="T:System.IdentityModel.Metadata.MetadataSerializationException">Thrown if the XML is not well-formed.</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadEntitiesDescriptor(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>Reads an entities descriptor.</summary>
      <returns>The entities descriptor.</returns>
      <param name="reader">The XML reader.</param>
      <param name="tokenResolver">The security token resolver.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
      <exception cref="T:System.IdentityModel.Metadata.MetadataSerializationException">Thrown if the XML is not well-formed.</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadEntityDescriptor(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>Reads an entity descriptor.</summary>
      <returns>An entity descriptor.</returns>
      <param name="inputReader">The XML reader.</param>
      <param name="tokenResolver">The security token resolver.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputReader" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadIdentityProviderSingleSignOnDescriptor(System.Xml.XmlReader)">
      <summary>Reads an IDPSSO descriptor.</summary>
      <returns>The IDPSSO descriptor.</returns>
      <param name="reader">The XML reader.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadIndexedProtocolEndpoint(System.Xml.XmlReader)">
      <summary>Reads an indexed endpoint.</summary>
      <returns>An indexed endpoint.</returns>
      <param name="reader">The XML reader.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadKeyDescriptor(System.Xml.XmlReader)">
      <summary>Reads a key descriptor.</summary>
      <returns>The key descriptor.</returns>
      <param name="reader">The XML reader.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadLocalizedName(System.Xml.XmlReader)">
      <summary>Reads a localized name.</summary>
      <returns>A localized name.</returns>
      <param name="reader">The XML reader.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadLocalizedUri(System.Xml.XmlReader)">
      <summary>Reads a localized URI.</summary>
      <returns>A localized URI.</returns>
      <param name="reader">The XML reader.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadMetadata(System.IO.Stream)">
      <summary>Reads the specified stream to deserialize an entity descriptor or an entities descriptor.</summary>
      <returns>The descriptor. An instance of the <see cref="T:System.IdentityModel.Metadata.EntityDescriptor" /> or <see cref="T:System.IdentityModel.Metadata.EntitiesDescriptor" /> class.</returns>
      <param name="stream">The stream to read.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadMetadata(System.Xml.XmlReader)">
      <summary>Reads the specified XML reader to deserialize an entity descriptor or an entities descriptor.</summary>
      <returns>The descriptor. An instance of the <see cref="T:System.IdentityModel.Metadata.EntityDescriptor" /> or <see cref="T:System.IdentityModel.Metadata.EntitiesDescriptor" /> class.</returns>
      <param name="reader">The XML reader to be read.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadMetadata(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>Read the given XmlReader to deserialize an entity descriptor or an entities descriptor.</summary>
      <returns>The descriptor. An instance of the <see cref="T:System.IdentityModel.Metadata.EntityDescriptor" /> or <see cref="T:System.IdentityModel.Metadata.EntitiesDescriptor" /> class.</returns>
      <param name="reader">The XML reader to be read.</param>
      <param name="tokenResolver">The token resolver to use to resolve the signature token.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.-or-<paramref name="tokenResolver" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadMetadataCore(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>Reads an entity descriptor or an entities descriptor.</summary>
      <returns>The descriptor. An instance of the <see cref="T:System.IdentityModel.Metadata.EntityDescriptor" /> or <see cref="T:System.IdentityModel.Metadata.EntitiesDescriptor" /> class.</returns>
      <param name="reader">The XML reader.</param>
      <param name="tokenResolver">The security token resolver.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.-or-<paramref name="tokenResolver" /> is null.</exception>
      <exception cref="T:System.IdentityModel.Metadata.MetadataSerializationException">The reader is not positioned on an &lt;EntityDescriptor&gt; or an &lt;EntitiesDescriptor&gt; element.</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadOrganization(System.Xml.XmlReader)">
      <summary>Reads an organization.</summary>
      <returns>An organization.</returns>
      <param name="reader">The XML reader.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadProtocolEndpoint(System.Xml.XmlReader)">
      <summary>Reads an endpoint.</summary>
      <returns>An endpoint.</returns>
      <param name="reader">The XML reader.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadRoleDescriptorAttributes(System.Xml.XmlReader,System.IdentityModel.Metadata.RoleDescriptor)">
      <summary>Reads role descriptor attributes.</summary>
      <param name="reader">The XML reader.</param>
      <param name="roleDescriptor">The role descriptor.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.-or-<paramref name="roleDescriptor" /> is .null-or-The <see cref="P:System.IdentityModel.Metadata.RoleDescriptor.ProtocolsSupported" /> property of <paramref name="roleDescriptor" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadRoleDescriptorElement(System.Xml.XmlReader,System.IdentityModel.Metadata.RoleDescriptor)">
      <summary>Reads role descriptor elements.</summary>
      <returns>true if an element is read; otherwise, false.</returns>
      <param name="reader">The XML reader.</param>
      <param name="roleDescriptor">The role descriptor.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.-or-<paramref name="roleDescriptor" /> is .null-or-The <see cref="P:System.IdentityModel.Metadata.RoleDescriptor.Contacts" /> property of <paramref name="roleDescriptor" /> is null.The <see cref="P:System.IdentityModel.Metadata.RoleDescriptor.Keys" /> property of <paramref name="roleDescriptor" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadSecurityTokenServiceDescriptor(System.Xml.XmlReader)">
      <summary>Reads a security token service descriptor.</summary>
      <returns>A security token service descriptor.</returns>
      <param name="reader">The XML reader.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadServiceProviderSingleSignOnDescriptor(System.Xml.XmlReader)">
      <summary>Reads an SPSSO descriptor.</summary>
      <returns>An SPSSO descriptor.</returns>
      <param name="reader">The XML reader.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
      <exception cref="T:System.IdentityModel.Metadata.MetadataSerializationException">The XML was not valid.</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadSingleSignOnDescriptorAttributes(System.Xml.XmlReader,System.IdentityModel.Metadata.SingleSignOnDescriptor)">
      <summary>Reads SSO descriptor attributes.</summary>
      <param name="reader">The XML reader.</param>
      <param name="roleDescriptor">The SSO role descriptor.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.-or-<paramref name="roleDescriptor" /> is .null</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadSingleSignOnDescriptorElement(System.Xml.XmlReader,System.IdentityModel.Metadata.SingleSignOnDescriptor)">
      <summary>Reads SSO descriptor elements.</summary>
      <returns>true if an element is read; otherwise, false.</returns>
      <param name="reader">The XML reader.</param>
      <param name="singleSignOnDescriptor">The SSO descriptor.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.-or-<paramref name="singleSignOnDescriptor" /> is .null</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadWebServiceDescriptorAttributes(System.Xml.XmlReader,System.IdentityModel.Metadata.WebServiceDescriptor)">
      <summary>Reads web service descriptor attributes.</summary>
      <param name="reader">The XML reader.</param>
      <param name="roleDescriptor">The web service descriptor.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.-or-<paramref name="roleDescriptor" /> is .null</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadWebServiceDescriptorElement(System.Xml.XmlReader,System.IdentityModel.Metadata.WebServiceDescriptor)">
      <summary>Reads web service descriptor elements.</summary>
      <returns>true if an element is read; otherwise, false.</returns>
      <param name="reader">The XML reader.</param>
      <param name="roleDescriptor">The web service descriptor.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.-or-<paramref name="roleDescriptor" /> is .null-or-The <see cref="P:System.IdentityModel.Metadata.WebServiceDescriptor.TargetScopes" /> property of <paramref name="roleDescriptor" /> is null.-or-The <see cref="P:System.IdentityModel.Metadata.WebServiceDescriptor.ClaimTypesOffered" /> property of <paramref name="roleDescriptor" /> is null.-or-The <see cref="P:System.IdentityModel.Metadata.WebServiceDescriptor.TokenTypesOffered" /> property of <paramref name="roleDescriptor" /> is null.The parameter reader/roleDescriptor/roleDescriptor.TargetScopes/roleDescriptor.TargetScopes/roleDescriptor.TokenTypesOffered is null.</exception>
    </member>
    <member name="P:System.IdentityModel.Metadata.MetadataSerializer.RevocationMode">
      <summary>Gets or sets the revocation mode of the X.509 certificate that is used to sign the metadata document.</summary>
      <returns>One of the enumeration values that specifies the X.509 certificate revocation mode. The default is specified by <see cref="F:System.IdentityModel.Configuration.IdentityConfiguration.DefaultRevocationMode" />.</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.MetadataSerializer.SecurityTokenSerializer">
      <summary>Gets the token serializer that is used by the current instance to serialize security tokens.</summary>
      <returns>The token serializer that is used by the current instance.</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.MetadataSerializer.TrustedIssuers">
      <summary>Gets the list of trusted issuers that are trusted to sign the metadata document by the current instance.</summary>
      <returns>The list of trusted issuers.</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.MetadataSerializer.TrustedStoreLocation">
      <summary>Gets or sets the trusted store location of the X.509 certificate that is used to sign the metadata document.</summary>
      <returns>One of the enumeration values that specify the X.509 certificate store location. The default is specified by <see cref="F:System.IdentityModel.Configuration.IdentityConfiguration.DefaultTrustedStoreLocation" />.</returns>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ValidateIssuer(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>Validates the X.509 certificate that signed the metadata document against the trusted issuers list specified by the <see cref="P:System.IdentityModel.Metadata.MetadataSerializer.TrustedIssuers" /> property. This method is invoked by the <see cref="M:System.IdentityModel.Metadata.MetadataSerializer.ValidateSigningCredential(System.IdentityModel.Tokens.SigningCredentials)" /> method.</summary>
      <param name="signingCertificate">The signing certificate.</param>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ValidateSigningCredential(System.IdentityModel.Tokens.SigningCredentials)">
      <summary>Validates the signing credentials of the metadata document.</summary>
      <param name="signingCredentials">The credentials that were used to sign the metadata document.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="signingCredentials" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteApplicationServiceDescriptor(System.Xml.XmlWriter,System.IdentityModel.Metadata.ApplicationServiceDescriptor)">
      <summary>Writes an application service descriptor.</summary>
      <param name="writer">The XML writer.</param>
      <param name="appService">The application service descriptor.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null.-or-<paramref name="appService" /> is null.-or-The <see cref="P:System.IdentityModel.Metadata.ApplicationServiceDescriptor.Endpoints" /> property of <paramref name="appService" /> is null.-or-The <see cref="P:System.IdentityModel.Metadata.ApplicationServiceDescriptor.PassiveRequestorEndpoints" /> property of <paramref name="appService" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteAttribute(System.Xml.XmlWriter,System.IdentityModel.Tokens.Saml2Attribute)">
      <summary>Writes the &lt;saml:Attribute&gt; element.</summary>
      <param name="writer">The XML writer.</param>
      <param name="data">The Saml2 attribute.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null.-or-<paramref name="data" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteContactPerson(System.Xml.XmlWriter,System.IdentityModel.Metadata.ContactPerson)">
      <summary>Writes a contact person.</summary>
      <param name="writer">The XML writer.</param>
      <param name="contactPerson">The contact person.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null.-or-<paramref name="contactPerson" /> is null.-or-The <see cref="P:System.IdentityModel.Metadata.ContactPerson.EmailAddresses" /> property of <paramref name="contactPerson" /> is null.-or-The <see cref="P:System.IdentityModel.Metadata.ContactPerson.TelephoneNumbers" /> property of <paramref name="contactPerson" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteCustomAttributes``1(System.Xml.XmlWriter,``0)">
      <summary>Extensible point to write custom attributes.</summary>
      <param name="writer">The XML writer.</param>
      <param name="source">The source element of type <paramref name="T" />.</param>
      <typeparam name="T">The type that represents the element whose attribute is being written. For example <see cref="T:System.IdentityModel.Metadata.ContactPerson" />.</typeparam>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteCustomElements``1(System.Xml.XmlWriter,``0)">
      <summary>Extensible point to write custom elements.</summary>
      <param name="writer">The XML writer.</param>
      <param name="source">The source element of type <paramref name="T" />.</param>
      <typeparam name="T">The type that represents the element that is being written.</typeparam>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteDisplayClaim(System.Xml.XmlWriter,System.IdentityModel.Metadata.DisplayClaim)">
      <summary>Writes a display claim.</summary>
      <param name="writer">The XML writer.</param>
      <param name="claim">The display claim to write.</param>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteEntitiesDescriptor(System.Xml.XmlWriter,System.IdentityModel.Metadata.EntitiesDescriptor)">
      <summary>Writes an entities descriptor.</summary>
      <param name="inputWriter">The XML writer.</param>
      <param name="entitiesDescriptor">The entities descriptor.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputWriter" /> is null.-or-<paramref name="entitiesDescriptor" /> is null.-or-The <see cref="P:System.IdentityModel.Metadata.EntitiesDescriptor.ChildEntities" /> property of <paramref name="entitiesDescriptor" /> is null.-or-The <see cref="P:System.IdentityModel.Metadata.EntitiesDescriptor.ChildEntityGroups" /> property of <paramref name="entitiesDescriptor" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteEntityDescriptor(System.Xml.XmlWriter,System.IdentityModel.Metadata.EntityDescriptor)">
      <summary>Writes an entity descriptor.</summary>
      <param name="inputWriter">The XML writer.</param>
      <param name="entityDescriptor">The entity descriptor.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputWriter" /> is null.-or-<paramref name="entityDescriptor" /> is null.-or-The <see cref="P:System.IdentityModel.Metadata.EntityDescriptor.Contacts" /> property of <paramref name="entityDescriptor" /> is null.-or-The <see cref="P:System.IdentityModel.Metadata.EntityDescriptor.RoleDescriptors" /> property of <paramref name="entityDescriptor" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteIdentityProviderSingleSignOnDescriptor(System.Xml.XmlWriter,System.IdentityModel.Metadata.IdentityProviderSingleSignOnDescriptor)">
      <summary>Writes an IDPSSO descriptor.</summary>
      <param name="writer">The XML writer.</param>
      <param name="identityProviderSingleSignOnDescriptor">The IDPSSO descriptor.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null.-or-<paramref name="identityProviderSingleSignOnDescriptor" /> is null.-or-The <see cref="P:System.IdentityModel.Metadata.IdentityProviderSingleSignOnDescriptor.SupportedAttributes" /> property of <paramref name="identityProviderSingleSignOnDescriptor" /> is null.-or-The <see cref="P:System.IdentityModel.Metadata.IdentityProviderSingleSignOnDescriptor.SingleSignOnServices" /> property of <paramref name="identityProviderSingleSignOnDescriptor" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteIndexedProtocolEndpoint(System.Xml.XmlWriter,System.IdentityModel.Metadata.IndexedProtocolEndpoint,System.Xml.XmlQualifiedName)">
      <summary>Writes an indexed endpoint.</summary>
      <param name="writer">The XML writer.</param>
      <param name="indexedEP">The indexed endpoint.</param>
      <param name="element">The XML qualified element.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null.-or-<paramref name="indexedEP" /> is null.-or-<paramref name="element" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteKeyDescriptor(System.Xml.XmlWriter,System.IdentityModel.Metadata.KeyDescriptor)">
      <summary>Writes a key descriptor.</summary>
      <param name="writer">The XML writer.</param>
      <param name="keyDescriptor">The key descriptor.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null.-or-<paramref name="keyDescriptor" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteLocalizedName(System.Xml.XmlWriter,System.IdentityModel.Metadata.LocalizedName,System.Xml.XmlQualifiedName)">
      <summary>Writes a localized name.</summary>
      <param name="writer">The XML writer.</param>
      <param name="name">The localized name.</param>
      <param name="element">The xml qualified name.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null.-or-<paramref name="name" /> is null.-or-<paramref name="element" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteLocalizedUri(System.Xml.XmlWriter,System.IdentityModel.Metadata.LocalizedUri,System.Xml.XmlQualifiedName)">
      <summary>Writes a localized URI</summary>
      <param name="writer">The XML writer.</param>
      <param name="uri">The localized URI.</param>
      <param name="element">The xml qualified name.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null.-or-<paramref name="uri" /> is null.-or-<paramref name="element" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteMetadata(System.IO.Stream,System.IdentityModel.Metadata.MetadataBase)">
      <summary>Writes the federation metadata to the specified stream.</summary>
      <param name="stream">The stream to which to write the federation metadata.</param>
      <param name="metadata">The metadata to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null.-or-<paramref name="metadata" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteMetadata(System.Xml.XmlWriter,System.IdentityModel.Metadata.MetadataBase)">
      <summary>Writes the federation metadata to the specified XML writer.</summary>
      <param name="writer">The XML writer to which to write the federation Metadata</param>
      <param name="metadata">The metadata to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null.-or-<paramref name="metadata" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteMetadataCore(System.Xml.XmlWriter,System.IdentityModel.Metadata.MetadataBase)">
      <summary>Writes the metadata.</summary>
      <param name="writer">The XML writer.</param>
      <param name="metadataBase">The SAML metadata base. An instance of the <see cref="T:System.IdentityModel.Metadata.EntityDescriptor" /> or <see cref="T:System.IdentityModel.Metadata.EntitiesDescriptor" /> class.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null.-or-<paramref name="metadataBase" /> is null.</exception>
      <exception cref="T:System.IdentityModel.Metadata.MetadataSerializationException">
        <paramref name="metadataBase" /> is not assignable from <see cref="T:System.IdentityModel.Metadata.EntityDescriptor" /> or <see cref="T:System.IdentityModel.Metadata.EntitiesDescriptor" />.</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteOrganization(System.Xml.XmlWriter,System.IdentityModel.Metadata.Organization)">
      <summary>Writes an organization.</summary>
      <param name="writer">The XML writer.</param>
      <param name="organization">The organization.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null.-or-<paramref name="organization" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteProtocolEndpoint(System.Xml.XmlWriter,System.IdentityModel.Metadata.ProtocolEndpoint,System.Xml.XmlQualifiedName)">
      <summary>Writes an endpoint.</summary>
      <param name="writer">The XML writer.</param>
      <param name="endpoint">The endpoint.</param>
      <param name="element">The xml qualified name element.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null.-or-<paramref name="endpoint" /> is null.-or-<paramref name="element" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteRoleDescriptorAttributes(System.Xml.XmlWriter,System.IdentityModel.Metadata.RoleDescriptor)">
      <summary>Writes role descriptor attributes.</summary>
      <param name="writer">The XML writer.</param>
      <param name="roleDescriptor">The role descriptor.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null.-or-<paramref name="roleDescriptor" /> is .null-or-The <see cref="P:System.IdentityModel.Metadata.RoleDescriptor.ProtocolsSupported" /> property of <paramref name="roleDescriptor" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteRoleDescriptorElements(System.Xml.XmlWriter,System.IdentityModel.Metadata.RoleDescriptor)">
      <summary>Writes the role descriptor element.</summary>
      <param name="writer">The XML writer.</param>
      <param name="roleDescriptor">The role descriptor.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null.-or-<paramref name="roleDescriptor" /> is .null-or-The <see cref="P:System.IdentityModel.Metadata.RoleDescriptor.Contacts" /> property of <paramref name="roleDescriptor" /> is null.The <see cref="P:System.IdentityModel.Metadata.RoleDescriptor.Keys" /> property of <paramref name="roleDescriptor" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteSecurityTokenServiceDescriptor(System.Xml.XmlWriter,System.IdentityModel.Metadata.SecurityTokenServiceDescriptor)">
      <summary>Writes a security token service descriptor.</summary>
      <param name="writer">The XML writer.</param>
      <param name="securityTokenServiceDescriptor">The security token service descriptor.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null.-or-<paramref name="securityTokenServiceDescriptor" /> is null.-or-The <see cref="P:System.IdentityModel.Metadata.SecurityTokenServiceDescriptor.SecurityTokenServiceEndpoints" /> property of <paramref name="securityTokenServiceDescriptor" /> is null.-or-The <see cref="P:System.IdentityModel.Metadata.SecurityTokenServiceDescriptor.PassiveRequestorEndpoints" /> property of <paramref name="securityTokenServiceDescriptor" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteServiceProviderSingleSignOnDescriptor(System.Xml.XmlWriter,System.IdentityModel.Metadata.ServiceProviderSingleSignOnDescriptor)">
      <summary>Writes an SPSSO descriptor.</summary>
      <param name="writer">The XML writer.</param>
      <param name="serviceProviderSingleSignOnDescriptor">The SPSSO descriptor.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null.-or-<paramref name="serviceProviderSingleSignOnDescriptor" /> is null.-or-The <see cref="P:System.IdentityModel.Metadata.ServiceProviderSingleSignOnDescriptor.AssertionConsumerServices" /> property of <paramref name="serviceProviderSingleSignOnDescriptor" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteSingleSignOnDescriptorAttributes(System.Xml.XmlWriter,System.IdentityModel.Metadata.SingleSignOnDescriptor)">
      <summary>Writes the SSO descriptor attributes.</summary>
      <param name="writer">The XML writer.</param>
      <param name="singleSignOnDescriptor">The SSO descriptor.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null.-or-<paramref name="singleSignOnDescriptor" /> is .null</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteSingleSignOnDescriptorElements(System.Xml.XmlWriter,System.IdentityModel.Metadata.SingleSignOnDescriptor)">
      <summary>Writes the SSO descriptor element.</summary>
      <param name="writer">The XML writer.</param>
      <param name="singleSignOnDescriptor">The SSO descriptor.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null.-or-<paramref name="singleSignOnDescriptor" /> is .null</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteWebServiceDescriptorAttributes(System.Xml.XmlWriter,System.IdentityModel.Metadata.WebServiceDescriptor)">
      <summary>Writes the web service descriptor attributes.</summary>
      <param name="writer">The XML writer.</param>
      <param name="wsDescriptor">The web service descriptor.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null.-or-<paramref name="wsDescriptor" /> is .null</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteWebServiceDescriptorElements(System.Xml.XmlWriter,System.IdentityModel.Metadata.WebServiceDescriptor)">
      <summary>Writes a web service descriptor element.</summary>
      <param name="writer">The XML writer.</param>
      <param name="wsDescriptor">The web service descriptor.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.-or-<paramref name="wsDescriptor" /> is .null-or-The <see cref="P:System.IdentityModel.Metadata.WebServiceDescriptor.TargetScopes" /> property of <paramref name="wsDescriptor" /> is null.-or-The <see cref="P:System.IdentityModel.Metadata.WebServiceDescriptor.ClaimTypesOffered" /> property of <paramref name="wsDescriptor" /> is null.-or-The <see cref="P:System.IdentityModel.Metadata.WebServiceDescriptor.TokenTypesOffered" /> property of <paramref name="wsDescriptor" /> is null.The parameter reader/roleDescriptor/roleDescriptor.TargetScopes/roleDescriptor.TargetScopes/roleDescriptor.TokenTypesOffered is null.</exception>
    </member>
    <member name="T:System.IdentityModel.Metadata.Organization">
      <summary>Defines an organization.</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.Organization.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Metadata.Organization" /> class.</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.Organization.#ctor(System.IdentityModel.Metadata.LocalizedEntryCollection{System.IdentityModel.Metadata.LocalizedName},System.IdentityModel.Metadata.LocalizedEntryCollection{System.IdentityModel.Metadata.LocalizedName},System.IdentityModel.Metadata.LocalizedEntryCollection{System.IdentityModel.Metadata.LocalizedUri})">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Metadata.Organization" /> class that has the specified collection of names, display names, and URIs.</summary>
      <param name="names">A collection of <see cref="T:System.IdentityModel.Metadata.LocalizedName" /> that contains the names for this instance.</param>
      <param name="displayNames">A collection of <see cref="T:System.IdentityModel.Metadata.LocalizedName" /> that contains the display names for this instance.</param>
      <param name="urls">A collection of <see cref="T:System.IdentityModel.Metadata.LocalizedUri" /> that contains the URLs for this instance.</param>
      <exception cref="T:System.ArgumentNullException">If any of the input parameters is null.</exception>
    </member>
    <member name="P:System.IdentityModel.Metadata.Organization.DisplayNames">
      <summary>Gets the collection of display names associated with the organization. This is a required element.</summary>
      <returns>The collection of display names.</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.Organization.Names">
      <summary>Gets the collection of names associated with the organization. This is a required element.</summary>
      <returns>The collection of names.</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.Organization.Urls">
      <summary>Gets the collection of URLs associated with the organization. This is required element.</summary>
      <returns>The collection of URL entries.</returns>
    </member>
    <member name="T:System.IdentityModel.Metadata.ProtocolEndpoint">
      <summary>This class defines a protocol endpoint.</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.ProtocolEndpoint.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Metadata.ProtocolEndpoint" /> class.</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.ProtocolEndpoint.#ctor(System.Uri,System.Uri)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Metadata.ProtocolEndpoint" /> class that has the specified binding and location.</summary>
      <param name="binding">The URI that represents the binding for the new instance. Initializes the <see cref="P:System.IdentityModel.Metadata.ProtocolEndpoint.Binding" /> property.</param>
      <param name="location">The URI that represents the location for the new instance. Initializes the <see cref="P:System.IdentityModel.Metadata.ProtocolEndpoint.Location" /> property.</param>
    </member>
    <member name="P:System.IdentityModel.Metadata.ProtocolEndpoint.Binding">
      <summary>Gets or sets the binding. This is a required element.</summary>
      <returns>The URI that represents the binding for the current instance.</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.ProtocolEndpoint.Location">
      <summary>Gets or sets the location. This is a required element.</summary>
      <returns>The URI that represents the location for the current instance.</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.ProtocolEndpoint.ResponseLocation">
      <summary>Gets or sets the response location. This is an optional element.</summary>
      <returns>The URI that represents the response location for the current instance. The default is null.</returns>
    </member>
    <member name="T:System.IdentityModel.Metadata.RoleDescriptor">
      <summary>Defines a role descriptor.</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.RoleDescriptor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Metadata.RoleDescriptor" /> class.</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.RoleDescriptor.#ctor(System.Collections.ObjectModel.Collection{System.Uri})">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Metadata.RoleDescriptor" /> class that has the collection of supported protocols.</summary>
      <param name="protocolsSupported">The supported protocol collection. Initializes the <see cref="P:System.IdentityModel.Metadata.RoleDescriptor.ProtocolsSupported" /> property.</param>
    </member>
    <member name="P:System.IdentityModel.Metadata.RoleDescriptor.Contacts">
      <summary>Gets the collection of <see cref="T:System.IdentityModel.Metadata.ContactPerson" />.</summary>
      <returns>The collection of contact persons for this role descriptor.</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.RoleDescriptor.ErrorUrl">
      <summary>Gets or sets the error URL.</summary>
      <returns>The error URL for this role descriptor.</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.RoleDescriptor.Keys">
      <summary>Gets the collection of <see cref="T:System.IdentityModel.Metadata.KeyDescriptor" />.</summary>
      <returns>The collection of key descriptors for this role descriptor.</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.RoleDescriptor.Organization">
      <summary>Gets or sets the <see cref="P:System.IdentityModel.Metadata.RoleDescriptor.Organization" />.</summary>
      <returns>The organization for this role descriptor.</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.RoleDescriptor.ProtocolsSupported">
      <summary>Gets the collection of protocols supported.</summary>
      <returns>The collection of supported protocols for this role descriptor.</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.RoleDescriptor.ValidUntil">
      <summary>Gets or sets the expiration time.</summary>
      <returns>The expiration time for this role descriptor.</returns>
    </member>
    <member name="T:System.IdentityModel.Metadata.SecurityTokenServiceDescriptor">
      <summary>Defines a Service Descriptor for a security token service.</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.SecurityTokenServiceDescriptor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Metadata.SecurityTokenServiceDescriptor" /> class.</summary>
    </member>
    <member name="P:System.IdentityModel.Metadata.SecurityTokenServiceDescriptor.PassiveRequestorEndpoints">
      <summary>Gets the collection of <see cref="T:System.ServiceModel.EndpointAddress" /> that represents the passive requestor endpoints.</summary>
      <returns>The collection of passive requestor endpoints.</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.SecurityTokenServiceDescriptor.SecurityTokenServiceEndpoints">
      <summary>Gets the collection of <see cref="T:System.ServiceModel.EndpointAddress" /> that represents the endpoints of the security token service.</summary>
      <returns>The collection of endpoints.</returns>
    </member>
    <member name="T:System.IdentityModel.Metadata.ServiceProviderSingleSignOnDescriptor">
      <summary>Defines a descriptor for a Service Provider SSO (SPSSO).</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.ServiceProviderSingleSignOnDescriptor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Metadata.ServiceProviderSingleSignOnDescriptor" /> class.</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.ServiceProviderSingleSignOnDescriptor.#ctor(System.IdentityModel.Metadata.IndexedProtocolEndpointDictionary)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Metadata.ServiceProviderSingleSignOnDescriptor" /> class that has the specified dictionary of indexed endpoints.</summary>
      <param name="collection">An <see cref="T:System.IdentityModel.Metadata.IndexedProtocolEndpointDictionary" /> object for this instance. Initializes the <see cref="P:System.IdentityModel.Metadata.ServiceProviderSingleSignOnDescriptor.AssertionConsumerServices" /> property.</param>
    </member>
    <member name="P:System.IdentityModel.Metadata.ServiceProviderSingleSignOnDescriptor.AssertionConsumerServices">
      <summary>Gets the <see cref="T:System.IdentityModel.Metadata.IndexedProtocolEndpointDictionary" /> that contains the indexed endpoints that support the profiles of the Authentication Request protocol that is defined in [SAMLProf].</summary>
      <returns>The <see cref="T:System.IdentityModel.Metadata.IndexedProtocolEndpointDictionary" /> for this instance.</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.ServiceProviderSingleSignOnDescriptor.AuthenticationRequestsSigned">
      <summary>Gets or sets a value that indicates whether requests sent by the service provider will be signed.</summary>
      <returns>true if authentication requests sent by the service provider will be signed; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.ServiceProviderSingleSignOnDescriptor.WantAssertionsSigned">
      <summary>Gets or sets a value that indicates whether assertions received by the service provider should be signed.</summary>
      <returns>true if assertions received by the service provider should be signed; otherwise, false. The default is false.</returns>
    </member>
    <member name="T:System.IdentityModel.Metadata.SingleSignOnDescriptor">
      <summary>Defines an SSO descriptor.</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.SingleSignOnDescriptor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Metadata.SingleSignOnDescriptor" /> class.</summary>
    </member>
    <member name="P:System.IdentityModel.Metadata.SingleSignOnDescriptor.ArtifactResolutionServices">
      <summary>Gets an <see cref="T:System.IdentityModel.Metadata.IndexedProtocolEndpointDictionary" /> object that contains the indexed endpoints for the artifact resolution services.</summary>
      <returns>The <see cref="T:System.IdentityModel.Metadata.IndexedProtocolEndpointDictionary" /> that contains the indexed endpoints for the artifact resolution services.</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.SingleSignOnDescriptor.NameIdentifierFormats">
      <summary>Gets the collection of URIs that represent the supported name identifier formats.</summary>
      <returns>The collection of URIs that represent the supported name identifier formats.</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.SingleSignOnDescriptor.SingleLogoutServices">
      <summary>Gets a collection of single logout service endpoints.</summary>
      <returns>The collection of single logout service endpoints.</returns>
    </member>
    <member name="T:System.IdentityModel.Metadata.WebServiceDescriptor">
      <summary>Defines a web service descriptor.</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.WebServiceDescriptor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Metadata.WebServiceDescriptor" /> class.</summary>
    </member>
    <member name="P:System.IdentityModel.Metadata.WebServiceDescriptor.ClaimTypesOffered">
      <summary>Gets a collection of <see cref="T:System.IdentityModel.Metadata.DisplayClaim" /> that represents the claim types offered.</summary>
      <returns>The collection of offered claim types.</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.WebServiceDescriptor.ClaimTypesRequested">
      <summary>Gets a collection of <see cref="T:System.IdentityModel.Metadata.DisplayClaim" /> that represents the claim types requested.</summary>
      <returns>The collection of requested claim types.</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.WebServiceDescriptor.ServiceDescription">
      <summary>Gets or sets the service description.</summary>
      <returns>The service description.</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.WebServiceDescriptor.ServiceDisplayName">
      <summary>Gets or sets the service display name.</summary>
      <returns>The service display name.</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.WebServiceDescriptor.TargetScopes">
      <summary>Gets a collection of <see cref="T:System.ServiceModel.EndpointAddress" /> that represents the target scopes.</summary>
      <returns>The collection of target scopes.</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.WebServiceDescriptor.TokenTypesOffered">
      <summary>Gets the collection of token types offered.</summary>
      <returns>The collection of token types offered.</returns>
    </member>
    <member name="T:System.IdentityModel.Policy.AuthorizationContext">
      <summary>The result of evaluating all authorization policies available from the tokens in the sent message and by calling the <see cref="M:System.ServiceModel.ServiceAuthorizationManager.GetAuthorizationPolicies(System.ServiceModel.OperationContext)" /> method.</summary>
    </member>
    <member name="M:System.IdentityModel.Policy.AuthorizationContext.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Policy.AuthorizationContext" /> class.  </summary>
    </member>
    <member name="P:System.IdentityModel.Policy.AuthorizationContext.ClaimSets">
      <summary>Gets the set of claims associated with an authorization policy.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of type <see cref="T:System.IdentityModel.Claims.ClaimSet" /> that contains the set of claims. </returns>
    </member>
    <member name="M:System.IdentityModel.Policy.AuthorizationContext.CreateDefaultAuthorizationContext(System.Collections.Generic.IList{System.IdentityModel.Policy.IAuthorizationPolicy})">
      <summary>Evaluate all of the specified authorization policies and create an <see cref="T:System.IdentityModel.Policy.AuthorizationContext" />.</summary>
      <returns>An <see cref="T:System.IdentityModel.Policy.AuthorizationContext" /> that contains the result of evaluating all the specified authorization policies.</returns>
      <param name="authorizationPolicies">An <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" /> that contains the set of authorization policies.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Policy.AuthorizationContext.ExpirationTime">
      <summary>Gets the date and time at which this <see cref="T:System.IdentityModel.Policy.AuthorizationContext" /> object is no longer valid. </summary>
      <returns>A <see cref="T:System.DateTime" /> value that indicates the date and time when this <see cref="T:System.IdentityModel.Policy.AuthorizationContext" /> object is no longer valid.</returns>
    </member>
    <member name="P:System.IdentityModel.Policy.AuthorizationContext.Id">
      <summary>Gets a unique identifier for this <see cref="T:System.IdentityModel.Policy.AuthorizationContext" /> object. </summary>
      <returns>A <see cref="T:System.IdentityModel.Policy.AuthorizationContext" /> object.</returns>
    </member>
    <member name="P:System.IdentityModel.Policy.AuthorizationContext.Properties">
      <summary>Gets a collection of non-claim properties associated with this <see cref="T:System.IdentityModel.Policy.AuthorizationContext" /> object.</summary>
      <returns>A <see cref="T:System.Collections.Generic.Dictionary`2" /> that specifies a collection of non-claim properties.</returns>
    </member>
    <member name="T:System.IdentityModel.Policy.EvaluationContext">
      <summary>When overridden in a derived class, represents the results of the authorization policies that have been evaluated. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Policy.EvaluationContext.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Policy.EvaluationContext" /> class.  </summary>
    </member>
    <member name="M:System.IdentityModel.Policy.EvaluationContext.AddClaimSet(System.IdentityModel.Policy.IAuthorizationPolicy,System.IdentityModel.Claims.ClaimSet)">
      <summary>Adds a set of claims to the evaluation context.</summary>
      <param name="policy">An <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" /> that represents the authorization policy that is adding claims to the evaluation context.</param>
      <param name="claimSet">A <see cref="T:System.IdentityModel.Claims.ClaimSet" /> that contains a set of claims.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Policy.EvaluationContext.ClaimSets">
      <summary>Gets a read-only collection of <see cref="T:System.IdentityModel.Claims.ClaimSet" /> objects that contains the claims added by authorization policies that have been evaluated.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> objects that contains the claims added by authorization policies that have been evaluated.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Policy.EvaluationContext.Generation">
      <summary>Gets the number of times that claims have been added to the evaluation context.</summary>
      <returns>The number of times that claims have been added to the evaluation context.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Policy.EvaluationContext.Properties">
      <summary>Gets a collection of non-claim properties associated with this <see cref="T:System.IdentityModel.Policy.EvaluationContext" />.</summary>
      <returns>A <see cref="T:System.Collections.Generic.Dictionary`2" /> that specifies a collection of non-claim properties. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Policy.EvaluationContext.RecordExpirationTime(System.DateTime)">
      <summary>Sets the date and time at which this <see cref="T:System.IdentityModel.Policy.EvaluationContext" /> is no longer valid. </summary>
      <param name="expirationTime">A <see cref="T:System.DateTime" /> value that indicates the date and time when this <see cref="T:System.IdentityModel.Policy.AuthorizationContext" /> object is no longer valid.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Policy.IAuthorizationComponent">
      <summary>Represents a component that is used to authorize users.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Policy.IAuthorizationComponent.Id">
      <summary>Gets a string that identifies this authorization component. </summary>
      <returns>A string that identifies this authorization component.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Policy.IAuthorizationPolicy">
      <summary>Defines a set of rules for authorizing a user, given a set of claims.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate(System.IdentityModel.Policy.EvaluationContext,System.Object@)">
      <summary>Evaluates whether a user meets the requirements for this authorization policy.</summary>
      <returns>false if the <see cref="M:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate(System.IdentityModel.Policy.EvaluationContext,System.Object@)" /> method for this authorization policy must be called if additional claims are added by other authorization policies to <paramref name="evaluationContext" />; otherwise, true to state no additional evaluation is required by this authorization policy. </returns>
      <param name="evaluationContext">An <see cref="T:System.IdentityModel.Policy.EvaluationContext" /> that contains the claim set that the authorization policy evaluates.</param>
      <param name="state">A <see cref="T:System.Object" />, passed by reference that represents the custom state for this authorization policy. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Policy.IAuthorizationPolicy.Issuer">
      <summary>Gets a claim set that represents the issuer of the authorization policy.</summary>
      <returns>A <see cref="T:System.IdentityModel.Claims.ClaimSet" /> that represents the issuer of the authorization policy.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.AdditionalContext">
      <summary>Represents the auth:AdditionalContext element defined in the authorization extensions to WS-Trust. These extensions are defined in the WS-Federation specification.</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.AdditionalContext.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Protocols.WSTrust.AdditionalContext" /> class.</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.AdditionalContext.#ctor(System.Collections.Generic.IEnumerable{System.IdentityModel.Protocols.WSTrust.ContextItem})">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Protocols.WSTrust.AdditionalContext" /> class with the specified context items.</summary>
      <param name="items">An <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:System.IdentityModel.Protocols.WSTrust.ContextItem" /> objects. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="items" /> is null.</exception>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.AdditionalContext.Items">
      <summary>Gets the collection of context items for this instance.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:System.IdentityModel.Protocols.WSTrust.ContextItem" /> objects that provide context for the request (RST) as a collection of name-value pairs. The default is an empty list.</returns>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.BinaryExchange">
      <summary>Represents the contents of a WS-Trust BinaryExchange element.</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.BinaryExchange.#ctor(System.Byte[],System.Uri)">
      <summary>Creates a new instance of the <see cref="T:System.IdentityModel.Protocols.WSTrust.BinaryExchange" /> class with the specified data and ValueType URI.</summary>
      <param name="binaryData">The binary data exchanged.</param>
      <param name="valueType">A <see cref="T:System.Uri" /> that represents the value type of the binary data.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="binaryData" /> is null.-or-<paramref name="valueType" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="valueType" /> is not an absolute URI.</exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.BinaryExchange.#ctor(System.Byte[],System.Uri,System.Uri)">
      <summary>Creates a new instance of the <see cref="T:System.IdentityModel.Protocols.WSTrust.BinaryExchange" /> with the specified data, ValueType URI, and EncodingType URI.</summary>
      <param name="binaryData">The binary data exchanged.</param>
      <param name="valueType">A <see cref="T:System.Uri" /> that represents the value type of the binary data.</param>
      <param name="encodingType">A <see cref="T:System.Uri" /> that specifies the encoding type to be used for encoding the binary data.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="binaryData" /> is null.-or-<paramref name="encodingType" /> is null.-or-<paramref name="valueType" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="encodingType" /> is not an absolute URI.-or-<paramref name="valueType" /> is not an absolute URI.</exception>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.BinaryExchange.BinaryData">
      <summary>Gets the binary data associated with the BinaryExchange element.</summary>
      <returns>An array of <see cref="T:System.Byte" /> that contains the binary data.</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.BinaryExchange.EncodingType">
      <summary>Gets the EncodingType URI.</summary>
      <returns>A <see cref="T:System.Uri" /> that contains the encoding type. This is the value of the EncodingType attribute of the BinaryExchange element.</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.BinaryExchange.ValueType">
      <summary>Gets the ValueType URI.</summary>
      <returns>A <see cref="T:System.Uri" /> that contains the value type. This is the value of the ValueType attribute of the BinaryExchange element.</returns>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.ContextItem">
      <summary>Represents the auth:ContextItem element defined in the authorization extensions to WS-Trust. These extensions are defined in the WS-Federation specification.</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.ContextItem.#ctor(System.Uri)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Protocols.WSTrust.ContextItem" /> class with the specified Name URI.</summary>
      <param name="name">A <see cref="T:System.Uri" /> that indicates the context item name.</param>
      <exception cref="T:System.ArgumentNull">
        <paramref name="name" /> is null.</exception>
      <exception cref="T:System.Argument">
        <paramref name="name" /> is not an absolute URI.</exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.ContextItem.#ctor(System.Uri,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Protocols.WSTrust.ContextItem" /> class with the specified Name URI and value.</summary>
      <param name="name">A <see cref="T:System.Uri" /> that indicates the context item name.</param>
      <param name="value">The context item value. Can be null.</param>
      <exception cref="T:System.ArgumentNull">
        <paramref name="name" /> is null.</exception>
      <exception cref="T:System.Argument">
        <paramref name="name" /> is not an absolute URI.</exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.ContextItem.#ctor(System.Uri,System.String,System.Uri)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Protocols.WSTrust.ContextItem" /> class with the specified Name URI, value, and Scope URI.</summary>
      <param name="name">A <see cref="T:System.Uri" /> that indicates the context item name.</param>
      <param name="value">The context item value. Can be null.</param>
      <param name="scope">The context item scope. Can be null.</param>
      <exception cref="T:System.ArgumentNull">
        <paramref name="name" /> is null.</exception>
      <exception cref="T:System.Argument">
        <paramref name="name" /> is not an absolute URI.-or-<paramref name="scope" /> is not null and is not an absolute URI.</exception>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.ContextItem.Name">
      <summary>Gets or sets the Name URI.</summary>
      <returns>A <see cref="T:System.Uri" /> that contains the value of the Name attribute.</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.ContextItem.Scope">
      <summary>Gets or sets the Scope URI.</summary>
      <returns>A <see cref="T:System.Uri" /> that contains the value of the Scope attribute. Can be null.</returns>
      <exception cref="T:System.ArgumentException">An attempt is made to set a value that is not null and is not an absolute URI.</exception>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.ContextItem.Value">
      <summary>Gets or sets the value of the context item.</summary>
      <returns>The value of the ContextItem element. Can be null.</returns>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.EndpointReference">
      <summary>Represents a wsa:EndpointReference element.</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.EndpointReference.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Protocols.WSTrust.EndpointReference" /> class with the specified URI.</summary>
      <param name="uri">An absolute URI that specifies the address of the endpoint reference. Initializes the <see cref="P:System.IdentityModel.Protocols.WSTrust.EndpointReference.Uri" /> property.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="uri" /> is not an absolute URI.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> is null.</exception>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.EndpointReference.Details">
      <summary>Gets a collection of the XML elements that are contained in the endpoint reference. The wsa:Address element is not included in the collection.</summary>
      <returns>A collection of the XML elements that are contained in the endpoint reference.</returns>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.EndpointReference.ReadFrom(System.Xml.XmlDictionaryReader)">
      <summary>Reads a wsa:EndpointReference element from the specified XML dictionary reader. </summary>
      <returns>The endpoint reference read from the XML dictionary reader or null if the wsa:EndpointReference element cannot be read.</returns>
      <param name="reader">The XML dictionary reader from which to read the endpoint reference.</param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.EndpointReference.ReadFrom(System.Xml.XmlReader)">
      <summary>Reads a wsa:EndpointReference element from the specified XML reader. </summary>
      <returns>The endpoint reference read from the XML dictionary reader or null if the wsa:EndpointReference element cannot be read.</returns>
      <param name="reader">The XML reader from which to read the endpoint reference.</param>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.EndpointReference.Uri">
      <summary>Gets the URI that specifies the address of the endpoint reference.</summary>
      <returns>The address of the endpoint reference.</returns>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.EndpointReference.WriteTo(System.Xml.XmlWriter)">
      <summary>Writes the <see cref="T:System.IdentityModel.Protocols.WSTrust.EndpointReference" /> as a &lt;wsa:EndpointReference&gt; element to the specified XML writer.</summary>
      <param name="writer">The XML writer to which to write the endpoint reference.</param>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.Entropy">
      <summary>Represents the entropy used in both token request messages and token response messages.</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.Entropy.#ctor(System.Byte[])">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Protocols.WSTrust.Entropy" /> class for sending entropy in binary secret format.</summary>
      <param name="secret">An array of bytes that contains the key material.</param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.Entropy.#ctor(System.Byte[],System.IdentityModel.Tokens.EncryptingCredentials)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Protocols.WSTrust.Entropy" /> class for sending entropy in encrypted key format.</summary>
      <param name="secret">An array of bytes that contains the key material.</param>
      <param name="wrappingCredentials">An <see cref="T:System.IdentityModel.Tokens.EncryptingCredentials" /> that represents the credentials used to encrypt the key material.</param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.Entropy.#ctor(System.IdentityModel.Protocols.WSTrust.ProtectedKey)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Protocols.WSTrust.Entropy" /> class with the specified protected key.</summary>
      <param name="protectedKey">A <see cref="T:System.IdentityModel.Protocols.WSTrust.ProtectedKey" /> that represents the protected key which can be either a binary secret or an encrypted key.</param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.Entropy.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Protocols.WSTrust.Entropy" /> class with randomly generated bytes.</summary>
      <param name="entropySizeInBits">The entropySizeInBits of the key material inside the entropy.</param>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.InvalidRequestException">
      <summary>The exception that is thrown when the request (RST) is invalid or malformed.</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.InvalidRequestException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Protocols.WSTrust.InvalidRequestException" /> class.</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.InvalidRequestException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Protocols.WSTrust.InvalidRequestException" /> class with serialized data.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains the contextual information about the source or destination.</param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.InvalidRequestException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Protocols.WSTrust.InvalidRequestException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.InvalidRequestException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Protocols.WSTrust.InvalidRequestException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The <see cref="T:System.Exception" /> that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.KeyTypes">
      <summary>Defines protocol-agnostic URIs that are used in the token request (RST) or response (RSTR) to indicate the desired or required key type.</summary>
    </member>
    <member name="F:System.IdentityModel.Protocols.WSTrust.KeyTypes.Asymmetric">
      <summary>A URI that represents the asymmetric key type; http://schemas.System.com/idfx/keytype/asymmetric.</summary>
    </member>
    <member name="F:System.IdentityModel.Protocols.WSTrust.KeyTypes.Bearer">
      <summary>A URI that represents the bearer key type; http://schemas.System.com/idfx/keytype/bearer.</summary>
    </member>
    <member name="F:System.IdentityModel.Protocols.WSTrust.KeyTypes.Symmetric">
      <summary>A URI that represents the symmetric key type; http://schemas.System.com/idfx/keytype/symmetric.</summary>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.Lifetime">
      <summary>Represents the &lt;wst:Lifetime&gt; element.</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.Lifetime.#ctor(System.DateTime,System.DateTime)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Protocols.WSTrust.Lifetime" /> class with the specified creation and expiration time.</summary>
      <param name="created">A <see cref="T:System.DateTime" /> that represents the token creation time in UTC.</param>
      <param name="expires">A <see cref="T:System.DateTime" /> that represents the token expiration time in UTC.</param>
      <exception cref="T:System.ArgumentException">The time specified by <paramref name="created" /> occurs before the time specified by <paramref name="expires" />.</exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.Lifetime.#ctor(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Protocols.WSTrust.Lifetime" /> class with the specified creation and expiration time.</summary>
      <param name="created">A <see cref="T:System.DateTime" /> that specifies the token creation time in UTC. Can be null.</param>
      <param name="expires">A <see cref="T:System.DateTime" /> that specifies the token expiration time in UTC. Can be null.</param>
      <exception cref="T:System.ArgumentException">The time specified by <paramref name="created" /> occurs before the time specified by <paramref name="expires" />.</exception>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.Lifetime.Created">
      <summary>Gets the token creation time in UTC time.</summary>
      <returns>A <see cref="T:System.DateTime" /> that represents the UTC time at which the token is created. Can be null.</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.Lifetime.Expires">
      <summary>Gets the token expiration time in UTC time.</summary>
      <returns>A <see cref="T:System.DateTime" /> that represents the UTC time at which the token expires. Can be null.</returns>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.Participants">
      <summary>Represents a WS-Trust Participants element. The wst:Participants element is an extension to the wst:RequestSecurityToken element and is used to pass information about which parties are authorized to participate in the use of the token.</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.Participants.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Protocols.WSTrust.Participants" /> class.</summary>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.Participants.Participant">
      <summary>Gets the list of participants that are allowed to use the token.</summary>
      <returns>The list of participants. Each item in the list contains the contents of a wst:Participant element.</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.Participants.Primary">
      <summary>Gets or sets the primary user of the issued token.</summary>
      <returns>An <see cref="T:System.ServiceModel.Protocols.WSTrust.EndpointReference" /> that contains the address of the primary user of the token. This is the contents of the wst:Primary element.</returns>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.ProtectedKey">
      <summary>Represents the contents of a wst:Entropy or a wst:RequestedProofToken element inside the RequestSecurityToken and RequestSecurityTokenResponse.</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.ProtectedKey.#ctor(System.Byte[])">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Protocols.WSTrust.ProtectedKey" /> class with no encryption.</summary>
      <param name="secret">An array of <see cref="T:System.Byte" /> that contains the key material to be protected.</param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.ProtectedKey.#ctor(System.Byte[],System.IdentityModel.Tokens.EncryptingCredentials)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Protocols.WSTrust.ProtectedKey" /> class using the specified encrypting credentials.</summary>
      <param name="secret">An array of <see cref="T:System.Byte" /> that contains the key material to be protected.</param>
      <param name="wrappingCredentials">An <see cref="T:System.IdentityModel.Tokens.EncryptingCredentials" /> that contains the credentials used to encrypt the key material.</param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.ProtectedKey.GetKeyBytes">
      <summary>Gets the key material.</summary>
      <returns>An array of <see cref="T:System.Byte" /> that contains the key material.</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.ProtectedKey.WrappingCredentials">
      <summary>Gets the encrypting credentials for the key.</summary>
      <returns>A <see cref="T:System.IdentityModel.SecurityTokenService.EncryptingCredentials" /> that represents the credentials used to encrypt the key. null indicates that the key is not encrypted.</returns>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.Renewing">
      <summary>Represents the wst:Renewing element in a WS-Trust renew request.</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.Renewing.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Protocols.WSTrust.Renewing" /><see cref="T:System.IdentityModel.Protocols.WSTrust.Renewing" /> class with default property values.</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.Renewing.#ctor(System.Boolean,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Protocols.WSTrust.Renewing" /><see cref="T:System.IdentityModel.Protocols.WSTrust.Renewing" /> class with the specified values.</summary>
      <param name="allowRenewal">true if renewal is permitted; otherwise, false.</param>
      <param name="okForRenewalAfterExpiration">true if the requested token can be renewed after it has expired; otherwise, false.</param>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.Renewing.AllowRenewal">
      <summary>Gets or sets a value that indicates whether the token can be renewed.</summary>
      <returns>true if renewal is permitted; otherwise, false.</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.Renewing.OkForRenewalAfterExpiration">
      <summary>Gets or sets a value that indicates whether the token can be renewed after it has expired.</summary>
      <returns>true if the requested token can be renewed after it has expired; otherwise, false.</returns>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.RequestClaim">
      <summary>Represents a single requested claim in a security token request (RST).</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.RequestClaim.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestClaim" /> class with the specified claim type.</summary>
      <param name="claimType">The URI that represents the claim type.</param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.RequestClaim.#ctor(System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestClaim" /> class with the specified claim type and a value that indicates whether the claim is optional.</summary>
      <param name="claimType">The URI that represents the claim type.</param>
      <param name="isOptional">true if the claim is optional in the response; otherwise false.</param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.RequestClaim.#ctor(System.String,System.Boolean,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestClaim" /> class with the specified claim type, claim value, and a value that indicates whether the claim is optional.</summary>
      <param name="claimType">The URI that represents the claim type.</param>
      <param name="isOptional">true if the claim is optional in the response; otherwise false.</param>
      <param name="value">The value of the claim.</param>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestClaim.ClaimType">
      <summary>Gets the type of the requested claim.</summary>
      <returns>The URI that represents the claim type.</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestClaim.IsOptional">
      <summary>Gets or sets a value that indicates whether the request claim is optional in the response.</summary>
      <returns>true if the claim is optional in the response; otherwise false.</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestClaim.Value">
      <summary>Gets or sets the requested claim value.</summary>
      <returns>The value of the claim.</returns>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.RequestClaimCollection">
      <summary>Represents a collection of the <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestClaim" /> objects inside <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />.</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.RequestClaimCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestClaimCollection" /> class.</summary>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestClaimCollection.Dialect">
      <summary>Gets or sets the Dialect attribute.</summary>
      <returns>A string that contains the URI that identifies the dialect. The default value is <see cref="F:System.IdentityModel.Protocols.WSIdentity.WSIdentityConstants.Dialect" />, which indicates that <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestClaim" /> objects in the collection correspond to the Information Card profile.</returns>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.RequestedProofToken">
      <summary>Represents the contents of a wst:RequestedProofToken element.</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.RequestedProofToken.#ctor(System.Byte[])">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestedProofToken" /> class using the specified key material.</summary>
      <param name="secret">An array of <see cref="T:System.Byte" /> that contains the key material.</param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.RequestedProofToken.#ctor(System.Byte[],System.IdentityModel.Tokens.EncryptingCredentials)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestedProofToken" /> class using the specified key material and encrypting credentials.</summary>
      <param name="secret">An array of <see cref="T:System.Byte" /> that contains the key material.</param>
      <param name="wrappingCredentials">A <see cref="T:System.IdentityModel.SecurityTokenService.EncryptingCredentials" /> that represents the credentials used to encrypt the key material.</param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.RequestedProofToken.#ctor(System.IdentityModel.Protocols.WSTrust.ProtectedKey)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestedProofToken" /> class using the specified <see cref="T:System.IdentityModel.Protocols.WSTrust.ProtectedKey" /> object.</summary>
      <param name="protectedKey">A <see cref="T:System.IdentityModel.Protocols.WSTrust.ProtectedKey" /> that represents the key, which can be either a binary secret or an encrypted key.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="protectedKey" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.RequestedProofToken.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestedProofToken" /> class using the specified computed key algorithm.</summary>
      <param name="computedKeyAlgorithm">A string that contains a URI that indicates the algorithm used to compute the session key in the combined entropy case.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="computedKeyAlgorithm" /> is null.</exception>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestedProofToken.ComputedKeyAlgorithm">
      <summary>Gets the computed key algorithm used to calculate the session key in the combined entropy case.</summary>
      <returns>A string that contains a URI that indicates the computed key algorithm.</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestedProofToken.ProtectedKey">
      <summary>Gets the key in the case when the wst:RequestedProofToken element contains a key.</summary>
      <returns>A <see cref="T:System.IdentityModel.Protocols.WSTrust.ProtectedKey" /> that represents the key, which can be either encrypted or clear text.</returns>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.RequestedSecurityToken">
      <summary>Represents the requested (issued) security token.</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.RequestedSecurityToken.#ctor(System.IdentityModel.Tokens.SecurityToken)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestedSecurityToken" /> class using the issued token.</summary>
      <param name="token">A <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> that represents the requested security token.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.RequestedSecurityToken.#ctor(System.Xml.XmlElement)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestedSecurityToken" /> class using the token XML.</summary>
      <param name="tokenAsXml">An <see cref="T:System.Xml.XmlElement" /> that contains the XML representation of the requested security token.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tokenAsXml" /> is null.</exception>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestedSecurityToken.SecurityToken">
      <summary>Gets the issued security token when the <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestedSecurityToken" /> instance was created using the token itself.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> that represents the issued security token. null if the <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestedSecurityToken" /> instance was created using the token XML.</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestedSecurityToken.SecurityTokenXml">
      <summary>Gets the XML representation of the issued security token when the <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestedSecurityToken" /> instance was created using the token XML.</summary>
      <returns>An <see cref="T:System.Xml.XmlElement" /> that contains the XML representation of the security token. null if the <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestedSecurityToken" /> instance was created using a <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> object.</returns>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken">
      <summary>Represents the wst:RequestSecurityToken element (RST), which is used to request a security token.</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> class.</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> class with the specified request type.</summary>
      <param name="requestType">A string that contains the request type URI.</param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> class with the specified request type.</summary>
      <param name="requestType">A string that contains the request type URI.</param>
      <param name="keyType">A string that contains the key type URI. This should be one of the constants defined by the <see cref="T:System.IdentityModel.Protocols.WSTrust.KeyTypes" /> class.</param>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.ActAs">
      <summary>Gets or sets the security token for the identity that the requestor is attempting to act as. </summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityTokenElement" /> that represents the identity the requestor is attempting to act as. Can be null.</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.AdditionalContext">
      <summary>Gets or sets the additional context information for the request.</summary>
      <returns>An <see cref="T:System.IdentityModel.Protocols.WSTrust.AdditionalContext" /> that contains the additional context information for the request. Can be null.</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.CancelTarget">
      <summary>Gets or sets the token to be canceled in a WS-Trust cancel request.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityTokenElement" /> that contains the token to be cancelled.</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.Claims">
      <summary>Gets the claim types requested by the client (requestor).</summary>
      <returns>A <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestClaimCollection" /> that contains the requested claims. The default is an empty collection.</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.ComputedKeyAlgorithm">
      <summary>Gets a URI that represents the desired algorithm to use when computed keys are used for issued tokens.</summary>
      <returns>A string that contains the URI that represents the computed key algorithm.</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.Delegatable">
      <summary>Gets or sets a value that specifies if the issued token should be marked as delegatable.</summary>
      <returns>true if the issued token is delegatable; otherwise, false. Can be null.</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.DelegateTo">
      <summary>Gets or sets the identity to which the issued token should be delegated.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityTokenElement" /> that represents the identity to which the issued token should be delegated. Can be null.</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.Encryption">
      <summary>Gets or sets information on the token and key to use when encrypting.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityTokenElement" /> that contains the encrypting information.</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.Forwardable">
      <summary>Gets or sets a value that specifies if the issued token should be marked forwardable.</summary>
      <returns>true if the issued token is forwardable; otherwise, false. Can be null.</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.Issuer">
      <summary>Gets or sets the issuer of the wst:OnBehalfOf token.</summary>
      <returns>A <see cref="T:System.ServiceModel.EndpointAddress" /> that contains the address of the issuer.</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.OnBehalfOf">
      <summary>Gets or sets the token for the identity on behalf of which the request is being made.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityTokenElement" /> that contains the token of the identity for which the request is being made.</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.Participants">
      <summary>Gets or sets the participants that are authorized to use the issued token.</summary>
      <returns>A <see cref="T:System.IdentityModel.Protocols.WSTrust.Participants" /> that contains the participants that are authorized to use the issued token.</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.ProofEncryption">
      <summary>Gets or sets the token to be used to encrypt the proof token.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityTokenElement" /> that contains the token.</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.Renewing">
      <summary>Gets or sets the renew semantics for a WS-Trust renew request.</summary>
      <returns>Returns <see cref="T:System.IdentityModel.Protocols.WSTrust.Renewing" /> that contains the renew semantics.</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.RenewTarget">
      <summary>Gets or sets the token to be renewed in a WS-Trust renew request.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityTokenElement" /> that contains the token to be renewed.</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.SecondaryParameters">
      <summary>Gets or sets parameters for which the requestor is not the originator.</summary>
      <returns>A <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> that contains secondary parameters for the request; that is, parameters for which the requestor is not the originator.</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.ValidateTarget">
      <summary>Gets or sets the token to be validated in a WS-Trust validate request.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityTokenElement" /> that contains the token to be validated.</returns>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse">
      <summary>Represents the wst:RequestSecurityTokenResponse element, which is used to return a security token.</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> class.</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse.#ctor(System.IdentityModel.Protocols.WSTrust.WSTrustMessage)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> class based on the specified request message (RST) .</summary>
      <param name="message">A <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustMessage" /> that represents the request (RST).</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> is null.</exception>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse.IsFinal">
      <summary>Gets or sets the flag that determines if the RSTR is the final message and should be serialized as such.</summary>
      <returns>true if the RSTR is the final message; otherwise false.</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse.RequestedAttachedReference">
      <summary>Gets or sets the security token reference when the requested token is attached to the message.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> that contains the reference.</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse.RequestedProofToken">
      <summary>Gets or sets the optional element used to return the proof of possession token.</summary>
      <returns>A <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestedProofToken" /> that represents the proof token.</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse.RequestedSecurityToken">
      <summary>Gets or sets the optional element used to return the requested security token.</summary>
      <returns>A <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestedSecurityToken" /> that represents the security token.</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse.RequestedTokenCancelled">
      <summary>Gets or sets the wst:RequestedTokenCancelled element.</summary>
      <returns>true if the token was cancelled; otherwise false.</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse.RequestedUnattachedReference">
      <summary>Gets or sets the security token reference when the requested token is not attached to the message.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> that contains the reference.</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse.Status">
      <summary>Gets or sets the wst:Status element in the RSTR.</summary>
      <returns>A <see cref="T:System.IdentityModel.Protocols.WSTrust.Status" /> that contains status information for a WS-Trust Validation request.</returns>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.RequestTypes">
      <summary>Defines protocol-agnostic RequestType URI strings.</summary>
    </member>
    <member name="F:System.IdentityModel.Protocols.WSTrust.RequestTypes.Cancel">
      <summary>A string constant that represents a protocol-agnostic URI for a WS-Trust Cancel request; http://schemas.System.com/idfx/requesttype/cancel.</summary>
    </member>
    <member name="F:System.IdentityModel.Protocols.WSTrust.RequestTypes.GetMetadata">
      <summary>A string constant that represents a protocol-agnostic URI for a WS-Trust GetMetadata request; http://schemas.System.com/idfx/requesttype/getMetadata.</summary>
    </member>
    <member name="F:System.IdentityModel.Protocols.WSTrust.RequestTypes.Issue">
      <summary>A string constant that represents a protocol-agnostic URI for a WS-Trust Issue request; http://schemas.System.com/idfx/requesttype/issue.</summary>
    </member>
    <member name="F:System.IdentityModel.Protocols.WSTrust.RequestTypes.IssueCard">
      <summary>A string constant that represents a protocol-agnostic WS-Trust IssueCard request; http://schemas.System.com/idfx/requesttype/issueCard.</summary>
    </member>
    <member name="F:System.IdentityModel.Protocols.WSTrust.RequestTypes.Renew">
      <summary>A string constant that represents a protocol-agnostic URI for a WS-Trust Renew request; http://schemas.System.com/idfx/requesttype/renew.</summary>
    </member>
    <member name="F:System.IdentityModel.Protocols.WSTrust.RequestTypes.Validate">
      <summary>A string constant that represents a protocol-agnostic URI for a WS-Trust Validate request; http://schemas.System.com/idfx/requesttype/validate.</summary>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.Status">
      <summary>Represents the result of a WS-Trust Validation request.</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.Status.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Protocols.WSTrust.Status" /> class with the specified status code and reason.</summary>
      <param name="code">A string that contains the status code URI.</param>
      <param name="reason">A string that contains a human-readable reason. The reason is optional; can be null.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="code" /> is null.</exception>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.Status.Code">
      <summary>Gets or sets the status code for the WS-Trust Validation binding in the RSTR.</summary>
      <returns>A string that contains a status code URI.</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.Status.Reason">
      <summary>Gets or sets the optional status reason for the WS-Trust Validation binding in the RSTR.</summary>
      <returns>Returns a string that contains the reason.</returns>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.UseKey">
      <summary>Represents the contents of the wst:UseKey element.</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.UseKey.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Protocols.WSTrust.UseKey" /> class.</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.UseKey.#ctor(System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Protocols.WSTrust.UseKey" /> class using the specified security key identifier.</summary>
      <param name="ski">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> that represents the existing key that should be used.</param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.UseKey.#ctor(System.IdentityModel.Tokens.SecurityKeyIdentifier,System.IdentityModel.Tokens.SecurityToken)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Protocols.WSTrust.UseKey" /> class using the specified security key identifier and security token.</summary>
      <param name="ski">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> that represents the existing key that should be used.</param>
      <param name="token">A <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> that represents the existing key that should be used.</param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.UseKey.#ctor(System.IdentityModel.Tokens.SecurityToken)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Protocols.WSTrust.UseKey" /> class using the specified security token.</summary>
      <param name="token">A <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> that represents the existing key that should be used.</param>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.UseKey.SecurityKeyIdentifier">
      <summary>Gets the security key identifier</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> that represents the security key identifier.</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.UseKey.Token">
      <summary>Gets the security token if the serializer cannot convert it to the security key identifier.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> that represents the token.</returns>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.WSTrust13RequestSerializer">
      <summary>Class for serializing and deserializing  WS-Trust 1.3 RequestSecurityToken (RST) messages.</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrust13RequestSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrust13RequestSerializer" /> class.</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrust13RequestSerializer.CanRead(System.Xml.XmlReader)">
      <summary>Checks if the given reader is positioned at a RequestSecurityToken element with the namespace “http://docs.oasis-open.org/ws-sx/ws-trust/200512”.</summary>
      <returns>true if the reader is positioned at a RequestSecurityToken element with namespace “http://docs.oasis-open.org/ws-sx/ws-trust/200512”; otherwise, false.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> object from which to read.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrust13RequestSerializer.ReadSecondaryParameters(System.Xml.XmlReader,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>Special case for reading SecondaryParameters inside a WS-Trust 1.3 RST.</summary>
      <returns>A <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> that  contains the SecondaryParameters found in the RST.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> object pointing at the SecondaryParameters element inside the RST.</param>
      <param name="context">A <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> that contains the current serialization context.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.- or -<paramref name="context" /> is null.</exception>
      <exception cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationException">An inner SecondaryParameter element was found while processing the outer SecondaryParameter element.</exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrust13RequestSerializer.ReadXml(System.Xml.XmlReader,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>Deserializes the RST from an <see cref="T:System.Xml.XmlReader" /> object to a <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> object.</summary>
      <returns>A <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> object if the deserialization was successful.</returns>
      <param name="reader">An XML reader over the RST.</param>
      <param name="context">A <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> that contains the current serialization context.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.- or -<paramref name="context" /> is null.</exception>
      <exception cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationException">There was an error parsing the RST.</exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrust13RequestSerializer.ReadXmlElement(System.Xml.XmlReader,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>Reads a child element inside the RST. Override of the base class method.</summary>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> object positioned at an element to read inside the RST.</param>
      <param name="rst">The <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> object that is  being populated from the reader.</param>
      <param name="context">A <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> that contains the current serialization context.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null. -or-<paramref name="rst" /> is null. -or-<paramref name="context" /> is null.</exception>
      <exception cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationException">Unable to deserialize the current parameter.</exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrust13RequestSerializer.WriteKnownRequestElement(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.Xml.XmlWriter,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>Writes the supported elements on the <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> object to the stream.</summary>
      <param name="rst">The <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> object being serialized.</param>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> object to write to.</param>
      <param name="context">A <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> that contains the current serialization context.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rst" /> is null. -or-<paramref name="writer" /> is null. -or-<paramref name="context" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrust13RequestSerializer.WriteXml(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.Xml.XmlWriter,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>Serializes the specified <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> object into the <see cref="T:System.Xml.XmlWriter" /> object.</summary>
      <param name="request">The <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> object to be serialized.</param>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> object to write to.</param>
      <param name="context">A <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> that contains the current serialization context.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="request" /> is null.-or- <paramref name="writer" /> is null. -or- <paramref name="context" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrust13RequestSerializer.WriteXmlElement(System.Xml.XmlWriter,System.String,System.Object,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>Writes the specified RST parameter to the outgoing stream. Override of the base class method.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> object to which the RST is being serialized.</param>
      <param name="elementName">The local name of the element to be written.</param>
      <param name="elementValue">The value of the element.</param>
      <param name="rst">The <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> object that is being serialized.</param>
      <param name="context">A <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> that contains the current serialization context.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rst" /> is null.-or- <paramref name="writer" /> is null. -or- <paramref name="context" /> is null.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementName" /> is null or an empty string.</exception>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.WSTrust13ResponseSerializer">
      <summary>Class for serializing and deserializing WS-Trust 1.3 RequestSecurityTokenResponse (RSTR) messages.</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrust13ResponseSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrust13ResponseSerializer" /> class.</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrust13ResponseSerializer.CanRead(System.Xml.XmlReader)">
      <summary>Checks if the specified XML reader is positioned at a RequestSecurityTokenResponse or a RequestSecurityTokenResponseCollection element with namespace ”http://docs.oasis-open.org/ws-sx/ws-trust/200512”.</summary>
      <returns>true if the reader is positioned at a RequestSecurityTokenResponse or a RequestSecurityTokenResponseCollection element with namespace “http://docs.oasis-open.org/ws-sx/ws-trust/200512”; otherwise, false.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> object from which to read.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrust13ResponseSerializer.ReadXml(System.Xml.XmlReader,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>Deserializes the RSTR from an <see cref="T:System.Xml.XmlReader" /> object to a <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> object.</summary>
      <returns>A <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> object if the deserialization was successful.</returns>
      <param name="reader">The XML reader over the RSTR.</param>
      <param name="context">A <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> that contains the current serialization context.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.-or-<paramref name="context" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrust13ResponseSerializer.ReadXmlElement(System.Xml.XmlReader,System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>Reads a specific child element inside the RSTR.</summary>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> object positioned at an element to read inside the RSTR.</param>
      <param name="rstr">The <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> element that is being populated from the reader.</param>
      <param name="context">A <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> that contains the current serialization context.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null. -or- <paramref name="rstr" /> is null. -or-<paramref name="context" /> is null.</exception>
      <exception cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationException">Unable to deserialize the current parameter.</exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrust13ResponseSerializer.WriteKnownResponseElement(System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse,System.Xml.XmlWriter,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>Writes the supported elements on the <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> object to the outgoing stream.</summary>
      <param name="rstr">The <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> object to serialize.</param>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> object to write to.</param>
      <param name="context">A <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> that contains the current serialization context.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rstr" /> is null. -or-<paramref name="writer" /> is null. -or-<paramref name="context" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrust13ResponseSerializer.WriteXml(System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse,System.Xml.XmlWriter,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>Serializes the specified <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> object into the <see cref="T:System.Xml.XmlWriter" /> object.</summary>
      <param name="response">The <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> object to serialize.</param>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> object to write to.</param>
      <param name="context">A <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> that contains the current serialization context.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="request" /> is null.-or- <paramref name="writer" /> is null. -or- <paramref name="context" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrust13ResponseSerializer.WriteXmlElement(System.Xml.XmlWriter,System.String,System.Object,System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>Writes the specified RSTR element to the outgoing stream. Override of the base class method.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> object to which the RSTR is being serialized.</param>
      <param name="elementName">The local name of the element to be written.</param>
      <param name="elementValue">The value of the element.</param>
      <param name="rstr">The <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> object that is being serialized.</param>
      <param name="context">A <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> that contains the current serialization context.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rstr" /> is null.-or- <paramref name="writer" /> is null. -or- <paramref name="context" /> is null.</exception>
      <exception cref="T:System.ArgumentException">elementName is null or an empty string.</exception>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005RequestSerializer">
      <summary>Class for serializing and deserializing WS-Trust Feb 2005 RequestSecurityToken (RST) messages.</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005RequestSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005RequestSerializer" /> class.</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005RequestSerializer.CanRead(System.Xml.XmlReader)">
      <summary>Checks if the given reader is positioned at a RequestSecurityToken element with the namespace “http://schemas.xmlsoap.org/ws/2005/02/trust”.</summary>
      <returns>true if the reader is positioned at a RequestSecurityToken element with namespace ”http://schemas.xmlsoap.org/ws/2005/02/trust”; otherwise, false.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> object from which to read.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005RequestSerializer.ReadXml(System.Xml.XmlReader,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>Deserializes the RST from an <see cref="T:System.Xml.XmlReader" /> object to a <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> object.</summary>
      <returns>A <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> object if the deserialization was successful.</returns>
      <param name="reader">An XML reader over the RST.</param>
      <param name="context">A <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> that contains the current serialization context.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.- or -<paramref name="context" /> is null.</exception>
      <exception cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationException">There was an error parsing the RST.</exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005RequestSerializer.ReadXmlElement(System.Xml.XmlReader,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>Reads a child element inside the RST. Override of the base class method.</summary>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> object positioned at an element to read inside the RST.</param>
      <param name="rst">The <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> object that is being populated from the reader.</param>
      <param name="context">A <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> that contains the current serialization context.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null. -or-<paramref name="rst" /> is null. -or-<paramref name="context" /> is null.</exception>
      <exception cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationException">Unable to deserialize the current parameter.</exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005RequestSerializer.WriteKnownRequestElement(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.Xml.XmlWriter,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>Writes the supported elements on the <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> object to the stream.</summary>
      <param name="rst">The <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> object being serialized.</param>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> object to write to.</param>
      <param name="context">A <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> that contains the current serialization context.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rst" /> is null. -or-<paramref name="writer" /> is null. -or-<paramref name="context" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005RequestSerializer.WriteXml(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.Xml.XmlWriter,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>Serializes the specified <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> object into the <see cref="T:System.Xml.XmlWriter" /> object.</summary>
      <param name="request">The <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> object to be serialized.</param>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> object to write to.</param>
      <param name="context">A <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> that contains the current serialization context.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="request" /> is null.-or- <paramref name="writer" /> is null. -or- <paramref name="context" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005RequestSerializer.WriteXmlElement(System.Xml.XmlWriter,System.String,System.Object,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>Writes the specified RST parameter to the outgoing stream. Override of the base class method.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> object to which the RST is being serialized.</param>
      <param name="elementName">The local name of the element to be written.</param>
      <param name="elementValue">The value of the element.</param>
      <param name="rst">The <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> object that is being serialized.</param>
      <param name="context">A <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> that contains the current serialization context.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rst" /> is null.-or- <paramref name="writer" /> is null. -or- <paramref name="context" /> is null.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementName" /> is null or an empty string.</exception>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005ResponseSerializer">
      <summary>Class for serializing and deserializing WS-Trust Feb 2005 RequestSecurityTokenResponse (RSTR) messages.</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005ResponseSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005ResponseSerializer" /> class.</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005ResponseSerializer.CanRead(System.Xml.XmlReader)">
      <summary>Checks if the specified XML reader is positioned at a RequestSecurityTokenResponse element with namespace “http://schemas.xmlsoap.org/ws/2005/02/trust”.</summary>
      <returns>true if the reader is positioned at a RequestSecurityTokenResponse element with namespace “http://schemas.xmlsoap.org/ws/2005/02/trust”; otherwise, false.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> object from which to read.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005ResponseSerializer.ReadXml(System.Xml.XmlReader,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>Deserializes the RSTR from an <see cref="T:System.Xml.XmlReader" /> object to a <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> object.</summary>
      <returns>A <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> object if the deserialization was successful.</returns>
      <param name="reader">The XML reader over the RSTR.</param>
      <param name="context">A <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> that contains the current serialization context.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.-or-<paramref name="context" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005ResponseSerializer.ReadXmlElement(System.Xml.XmlReader,System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>Override of the base class that Reads a specific child element inside the RSTR.</summary>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> object positioned at an element to read inside the RSTR.</param>
      <param name="rstr">The <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> element that is being populated from the reader.</param>
      <param name="context">A <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> that contains the current serialization context.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null. -or- <paramref name="rstr" /> is null. -or-<paramref name="context" /> is null.</exception>
      <exception cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationException">Unable to deserialize the current parameter.</exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005ResponseSerializer.WriteKnownResponseElement(System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse,System.Xml.XmlWriter,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>Writes the supported elements on the <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> object to the outgoing stream.</summary>
      <param name="rstr">The <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> object to serialize.</param>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> object to write to.</param>
      <param name="context">A <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> that contains the current serialization context.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rstr" /> is null. -or-<paramref name="writer" /> is null. -or-<paramref name="context" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005ResponseSerializer.WriteXml(System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse,System.Xml.XmlWriter,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>Serializes the specified <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> object into the <see cref="T:System.Xml.XmlWriter" /> object.</summary>
      <param name="response">The <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> object to serialize.</param>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> object to write to.</param>
      <param name="context">A <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> that contains the current serialization context.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="request" /> is null.-or- <paramref name="writer" /> is null. -or- <paramref name="context" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005ResponseSerializer.WriteXmlElement(System.Xml.XmlWriter,System.String,System.Object,System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>Writes the specified RSTR element to the outgoing stream. Override of the base class method.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> object to which the RSTR is being serialized.</param>
      <param name="elementName">The local name of the element to be written.</param>
      <param name="elementValue">The value of the element.</param>
      <param name="rstr">The <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> object that is being serialized.</param>
      <param name="context">A <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> that contains the current serialization context.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rstr" /> is null.-or- <paramref name="writer" /> is null. -or- <paramref name="context" /> is null.</exception>
      <exception cref="T:System.ArgumentException">elementName is null or an empty string.</exception>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.WSTrustMessage">
      <summary>The Base class for RST and RSTR.</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustMessage" /> class.</summary>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.AllowPostdating">
      <summary>Gets or sets the contents of the wst:AllowPostdating element.</summary>
      <returns>true if returned tokens should allow requests for postdated tokens; otherwise, false.</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.AppliesTo">
      <summary>Gets or sets the contents of the wsp:AppliesTo element.</summary>
      <returns>An <see cref="T:System.ServiceModel.EndpointAddress" /> that represents the endpoint address for which the security token is desired.</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.AuthenticationType">
      <summary>Gets or sets the contents of the wst:AuthenticationType element.</summary>
      <returns>A string that contains a URI that indicates the type of authentication desired.</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.BinaryExchange">
      <summary>Gets or sets the contents of the wst:BinaryExchange element.</summary>
      <returns>A <see cref="T:System.IdentityModel.Protocols.WSTrust.BinaryExchange" /> that contains the binary data exchanged. This includes the contents of the ValueType and EncodingType attributes as well as the actual data. </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.CanonicalizationAlgorithm">
      <summary>Gets or sets the contents of the wst:CanonicalizationAlgorithm element.</summary>
      <returns>A string that contains a URI that indicates the canonicalization algorithm.</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.Context">
      <summary>Gets or sets the contents of the Context attribute on the RST or RSTR.</summary>
      <returns>A string that contains a URI that identifies the context of a request or response message.</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.EncryptionAlgorithm">
      <summary>Gets or sets the contents of the wst:EncryptionAlgorithm element.</summary>
      <returns>A string that contains a URI that indicates the encryption algorithm.</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.EncryptWith">
      <summary>Gets or sets the contents of the wst:EncryptWith element.</summary>
      <returns>A string that contains a URI that indicates the desired encryption algoritm to be used with the issued security token.</returns>
      <exception cref="T:System.ArgumentNullException">An attempt to set the property to null or an empty string occurs.</exception>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.Entropy">
      <summary>Gets or sets the contents of the wst:Entropy element.</summary>
      <returns>A <see cref="T:System.IdentityModel.Protocols.WSTrust.Entropy" /> that represents the contents of the entropy element.</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.KeySizeInBits">
      <summary>Gets or sets the contents of the wst:KeySize element inside a RequestSecurityToken (RST) message.</summary>
      <returns>The key size in bits.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">An attempt to set a value less than or equal to zero occurs.</exception>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.KeyType">
      <summary>Gets or sets the contents of the wst:KeyType element inside a RequestSecurityToken (RST) message.</summary>
      <returns>A string that contains the URI that identifies the type of key desired.</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.KeyWrapAlgorithm">
      <summary>Gets or sets the contents of the wst:KeyWrapAlgorithm element.</summary>
      <returns>A string that contains the URI that identifies the key wrap algorithm.</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.Lifetime">
      <summary>Gets or sets the contents of the wst:Lifetime element inside a RequestSecurityToken (RST) message.</summary>
      <returns>A <see cref="T:System.IdentityModel.Protocols.WSTrust.Lifetime" /> that represents the desired time during which the returned token will be valid.</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.ReplyTo">
      <summary>Gets or sets the address to be used for replying to the Relying Party.</summary>
      <returns>A string that contains the address.</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.RequestType">
      <summary>Gets or sets the wst:RequestType element. </summary>
      <returns>A string that contains a URI that indicates the request type; for example, one of the constants defined in the <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestTypes" /> class.</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.SignatureAlgorithm">
      <summary>Gets or sets the contents of the wst:SignatureAlgorithm element.</summary>
      <returns>A string that contains a URI that indicates the signature algorithm.</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.SignWith">
      <summary>Gets or sets the contents of the wst:SignWith element.</summary>
      <returns>A string that contains a URI that identifies the desired signature algorithm.</returns>
      <exception cref="T:System.ArgumentNullException">An attempt to set the value to null or an empty string occurs.</exception>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.TokenType">
      <summary>Gets or sets the contents of the wst:TokenType element.</summary>
      <returns>A string that contains a URI that indicates the token type.</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.UseKey">
      <summary>Gets or sets the contents of the wst:UseKey element.</summary>
      <returns>A <see cref="T:System.IdentityModel.Protocols.WSTrust.UseKey" /> that contains the key.</returns>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer">
      <summary>The abstract base class that defines methods for serializing and deserializing versions of WS-Trust request (RST) messages.</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer" /> class.</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer.CanRead(System.Xml.XmlReader)">
      <summary>When overridden in a derived class, checks if the specified XML reader is positioned at a WS-Trust RequestSecurityToken element.</summary>
      <returns>true if the reader is positioned at an RST element that the serializer can read; otherwise, false.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> object from which to read.</param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer.CreateRequestSecurityToken">
      <summary>Creates an instance of the <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> class that this class can serialize or deserialize.</summary>
      <returns>A <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> object.</returns>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer.ReadCustomElement(System.Xml.XmlReader,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>When overridden in a derived class, reads a custom element.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> object positioned on the current element.</param>
      <param name="context">A <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> that contains the current serialization context.</param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer.ReadXml(System.Xml.XmlReader,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>When overridden in a derived class, deserializes the RST from an <see cref="T:System.Xml.XmlReader" /> object to a <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> object.</summary>
      <returns>A <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> object if the deserialization was successful.</returns>
      <param name="reader">The XML reader over the RST.</param>
      <param name="context">A <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> that contains the current serialization context.</param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer.ReadXmlElement(System.Xml.XmlReader,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>When overridden in a derived class, reads a child element inside the RST.</summary>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> object positioned at an element to read inside the RST.</param>
      <param name="requestSecurityToken">The <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> object that is  being populated from the reader.</param>
      <param name="context">A <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> that contains the current serialization context.</param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer.Validate(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)">
      <summary>Validates the <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> object that has been deserialized.</summary>
      <param name="requestSecurityToken">The <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> object to validate.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestSecurityToken" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">A WS-Trust  Issue request for an asymmetric key did not specify the UseKey element.</exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer.WriteKnownRequestElement(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.Xml.XmlWriter,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>When overridden in a derived class, writes the supported elements on the <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> object to the stream.</summary>
      <param name="requestSecurityToken">The <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> object being serialized.</param>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> object to write to.</param>
      <param name="context">A <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> that contains the current serialization context.</param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer.WriteXml(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.Xml.XmlWriter,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>When overridden in a derived class, serializes the specified <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> object into the <see cref="T:System.Xml.XmlWriter" /> object.</summary>
      <param name="request">The <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> object to be serialized.</param>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> object to write to.</param>
      <param name="context">A <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> that contains the current serialization context.</param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer.WriteXmlElement(System.Xml.XmlWriter,System.String,System.Object,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>When overridden in a derived class, writes a child element inside the RST.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> object to which the RST is being serialized.</param>
      <param name="elementName">The local name of the element to be written.</param>
      <param name="elementValue">The value of the element.</param>
      <param name="requestSecurityToken">The <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> object that is being serialized.</param>
      <param name="context">A <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> that contains the current serialization context.</param>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.WSTrustResponseSerializer">
      <summary>The abstract base class that defines methods for serializing and deserializing versions of WS-Trust response (RSTR) messages.</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustResponseSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustResponseSerializer" /> class.</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustResponseSerializer.CanRead(System.Xml.XmlReader)">
      <summary>When overridden in a derived class, checks if the specified XML reader is positioned at a WS-Trust RequestSecurityTokenResponse element.</summary>
      <returns>true if the reader is positioned at an RSTR element that this serializer can read; otherwise, false.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> object from which to read.</param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustResponseSerializer.CreateInstance">
      <summary>Creates an instance of the <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> class that this class can serialize or deserialize.</summary>
      <returns>A <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> object.</returns>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustResponseSerializer.ReadXml(System.Xml.XmlReader,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>When overridden in a derived class, deserializes the RSTR from an <see cref="T:System.Xml.XmlReader" /> object to a <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> object.</summary>
      <returns>A <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> object if the deserialization was successful.</returns>
      <param name="reader">The XML reader over the RSTR.</param>
      <param name="context">A <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> that contains the current serialization context.</param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustResponseSerializer.ReadXmlElement(System.Xml.XmlReader,System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>When overridden in the derived class reads a child element inside the RSTR.</summary>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> object positioned at an element to read inside the RSTR.</param>
      <param name="requestSecurityTokenResponse">The <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> element that is being populated from the reader.</param>
      <param name="context">A <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> that contains the current serialization context.</param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustResponseSerializer.Validate(System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse)">
      <summary>Validates the <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> object that has been deserialized.</summary>
      <param name="requestSecurityTokenResponse">The <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> object to validate.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestSecurityTokenResponse" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustResponseSerializer.WriteKnownResponseElement(System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse,System.Xml.XmlWriter,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>When overridden in a derived class, writes the supported elements on the <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> object to the outgoing stream.</summary>
      <param name="requestSecurityTokenResponse">The <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> object to serialize.</param>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
      <param name="context">A <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> that contains the current serialization context.</param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustResponseSerializer.WriteXml(System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse,System.Xml.XmlWriter,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>When overridden in a derived class, serializes the specified <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> object into the <see cref="T:System.Xml.XmlWriter" /> object.</summary>
      <param name="response">The <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> object to serialize.</param>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
      <param name="context">A <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> that contains the current serialization context.</param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustResponseSerializer.WriteXmlElement(System.Xml.XmlWriter,System.String,System.Object,System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>When overridden in a derived class, writes a child element inside the RSTR.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> object to which the RSTR is being serialized.</param>
      <param name="elementName">The local name of the element to be written.</param>
      <param name="elementValue">The value of the element.</param>
      <param name="requestSecurityTokenResponse">The <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> object that is being serialized.</param>
      <param name="context">A <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> that contains the current serialization context.</param>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext">
      <summary>Defines the serialization context for WS-Trust messages.</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> class.</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext.#ctor(System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> class with the specified <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager" /> object.</summary>
      <param name="securityTokenHandlerCollectionManager">The <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager" /> object that contains the set of <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" /> objects to use for serializing and validating tokens found in WS-Trust messages.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="securityTokenHandlerCollectionManager" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext.#ctor(System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager,System.IdentityModel.Selectors.SecurityTokenResolver,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> class with the specified <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager" />, <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />, and <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> objects.</summary>
      <param name="securityTokenHandlerCollectionManager">The <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager" /> object that contains the set of <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" /> objects to use for serializing and validating tokens found in WS-Trust messages.</param>
      <param name="securityTokenResolver">The <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> object to use to resolve security token references found in most elements of WS-Trust messages.</param>
      <param name="useKeyTokenResolver">The <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> object to use to resolve security token references found in the wst:UseKey element of RST messages as well as the wst:RenewTarget element found in RST messages.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="securityTokenHandlerCollectionManager" /> is null.-or-<paramref name="securityTokenResolver" /> is null.-or-<paramref name="useKeyTokenResolver" /> is null.</exception>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext.SecurityTokenHandlerCollectionManager">
      <summary>Gets the <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager" /> that contains the set of <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" /> objects used for serializing and validating tokens found in WS-Trust messages.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager" /> object.</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext.SecurityTokenHandlers">
      <summary>Gets or sets the collection of <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" /> objects used to serialize and validate security tokens found in WS-Trust messages.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerCollection" /> object.</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext.TokenResolver">
      <summary>Gets or sets the <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> object  used to resolve security token references found in most elements of WS-Trust messages.</summary>
      <returns>A <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> object.</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext.UseKeyTokenResolver">
      <summary>Gets or sets the <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> object used to resolve security token references found in the wst:UseKey element of RST messages as well as the wst:RenewTarget element found in RST messages.</summary>
      <returns>A <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> object.</returns>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationException">
      <summary>The exception that is thrown when an error occurs while serializing or deserializing a WS-Trust message.</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationException.#ctor">
      <summary>Initializes a new instance of <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationException" />.</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationException" /> class with serialized data.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains the contextual information about the source or destination.</param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The <see cref="T:System.Exception" /> that is the cause of the current exception. If the <paramref name="inner" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="T:System.IdentityModel.Selectors.AudienceUriMode">
      <summary>Specifies whether the <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> security token's <see cref="T:System.IdentityModel.Tokens.SamlAudienceRestrictionCondition" /> should be validated.</summary>
    </member>
    <member name="F:System.IdentityModel.Selectors.AudienceUriMode.Always">
      <summary>Always.</summary>
    </member>
    <member name="F:System.IdentityModel.Selectors.AudienceUriMode.BearerKeyOnly">
      <summary>Only when the security token's key is of type BearerKey and there are no proof of possession keys in the security token.</summary>
    </member>
    <member name="F:System.IdentityModel.Selectors.AudienceUriMode.Never">
      <summary>Never.</summary>
    </member>
    <member name="T:System.IdentityModel.Selectors.AudienceUriModeValidationHelper">
      <summary>A helper class for the <see cref="T:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator" /> class that verifies that the <see cref="P:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator.AudienceUriMode" /> property is set to a valid value.</summary>
    </member>
    <member name="M:System.IdentityModel.Selectors.AudienceUriModeValidationHelper.IsDefined(System.IdentityModel.Selectors.AudienceUriMode)">
      <summary>Gets a value that indicates whether the value of the specified <see cref="T:System.IdentityModel.Selectors.AudienceUriMode" /> is valid.</summary>
      <returns>true when the <paramref name="validationMode" /> is <see cref="F:System.IdentityModel.Selectors.AudienceUriMode.Always" />, <see cref="F:System.IdentityModel.Selectors.AudienceUriMode.BearerKeyOnly" />, or <see cref="F:System.IdentityModel.Selectors.AudienceUriMode.Never" />; otherwise, false. </returns>
      <param name="validationMode">The <see cref="T:System.IdentityModel.Selectors.AudienceUriMode" /> to verify its validity.</param>
    </member>
    <member name="T:System.IdentityModel.Selectors.CustomUserNameSecurityTokenAuthenticator">
      <summary>Authenticates a <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" /> security token using a custom authentication scheme.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.CustomUserNameSecurityTokenAuthenticator.#ctor(System.IdentityModel.Selectors.UserNamePasswordValidator)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Selectors.CustomUserNameSecurityTokenAuthenticator" /> class using the specified validator.</summary>
      <param name="validator">A <see cref="T:System.IdentityModel.Selectors.UserNamePasswordValidator" />  that authenticates the user name and password using a custom authentication scheme.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="validator" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.CustomUserNameSecurityTokenAuthenticator.ValidateUserNamePasswordCore(System.String,System.String)">
      <summary>Authenticates the specified user name and password and returns the set of authorization policies for <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" /> security tokens.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of type <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" /> that contains the set of authorization policies in effect for this application.</returns>
      <param name="userName">The user name associated with the security token.</param>
      <param name="password">The password associated with the security token.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="userName" /> is null.</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenValidationException">
        <paramref name="userName" /> and <paramref name="password" /> combination are not valid.</exception>
    </member>
    <member name="T:System.IdentityModel.Selectors.KerberosSecurityTokenAuthenticator">
      <summary>Authenticates a <see cref="T:System.IdentityModel.Tokens.KerberosReceiverSecurityToken" /> security token.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.KerberosSecurityTokenAuthenticator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Selectors.KerberosSecurityTokenAuthenticator" /> class.  </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.KerberosSecurityTokenAuthenticator.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Selectors.KerberosSecurityTokenAuthenticator" /> class by specifying whether the groups that the Windows user belongs to are obtained when the user is authenticated.</summary>
      <param name="includeWindowsGroups">true to get the groups the Windows user belongs to; otherwise, false.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.KerberosSecurityTokenAuthenticator.CanValidateTokenCore(System.IdentityModel.Tokens.SecurityToken)">
      <summary>Gets a value that indicates whether the specified security token can be validated by this security token authenticator.</summary>
      <returns>true when <paramref name="token" /> is a <see cref="T:System.IdentityModel.Tokens.KerberosReceiverSecurityToken" /> security token; otherwise, false.</returns>
      <param name="token">The <see cref="T:System.IdentityModel.Tokens.SecurityToken" />  to authenticate.</param>
    </member>
    <member name="T:System.IdentityModel.Selectors.KerberosSecurityTokenProvider">
      <summary>Represents a security token provider that provides <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> security tokens for a SOAP message sender.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.KerberosSecurityTokenProvider.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Selectors.KerberosSecurityTokenProvider" /> class using the specified service principal name.</summary>
      <param name="servicePrincipalName">The service principal name to get a <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> security token for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="servicePrincipalName" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.KerberosSecurityTokenProvider.#ctor(System.String,System.Security.Principal.TokenImpersonationLevel)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Selectors.KerberosSecurityTokenProvider" /> class using the specified service principal name and whether a client allows a recipient of the <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> security token to impersonate the client's credentials. </summary>
      <param name="servicePrincipalName">The service principal name to get a <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> security token for.</param>
      <param name="tokenImpersonationLevel">A <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> that specifies the degree to which a recipient of the <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> security token can act on behalf of the client.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="tokenImpersonationLevel" /> is not Identification or Impersonation.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="servicePrincipalName" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.KerberosSecurityTokenProvider.#ctor(System.String,System.Security.Principal.TokenImpersonationLevel,System.Net.NetworkCredential)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Selectors.KerberosSecurityTokenProvider" /> class using the specified service principal name, client identity, and whether a client allows a recipient of the <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> security token to impersonate the client's credentials. </summary>
      <param name="servicePrincipalName">The service principal name to get a <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> security token for.</param>
      <param name="tokenImpersonationLevel">A <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> that specifies the degree to which a recipient of the <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> security token can act on behalf of the client process.</param>
      <param name="networkCredential">A <see cref="T:System.Net.NetworkCredential" /> that represents the identity of the <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="tokenImpersonationLevel" /> is not Identification or Impersonation.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="servicePrincipalName" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.KerberosSecurityTokenProvider.GetTokenCore(System.TimeSpan)">
      <summary>Gets a <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> security token.</summary>
      <returns>The <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> that represents the security token to get.</returns>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that specifies the timeout value for the message that gets the security token.</param>
    </member>
    <member name="P:System.IdentityModel.Selectors.KerberosSecurityTokenProvider.NetworkCredential">
      <summary>Gets the identity of the <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> security token.</summary>
      <returns>A <see cref="T:System.Net.NetworkCredential" /> that represents the identity of the <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Selectors.KerberosSecurityTokenProvider.ServicePrincipalName">
      <summary>Gets the service principal name of the <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> security token to get.</summary>
      <returns>The service principal name of the <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> security token to get.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Selectors.KerberosSecurityTokenProvider.TokenImpersonationLevel">
      <summary>Gets a value that specifies the degree to which a recipient of the <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> security token can act on behalf of the client.</summary>
      <returns>A <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> that specifies the degree to which a recipient of the <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> security token can act on behalf of the client.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Selectors.RsaSecurityTokenAuthenticator">
      <summary>Authenticates a <see cref="T:System.IdentityModel.Tokens.RsaSecurityToken" /> security token.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.RsaSecurityTokenAuthenticator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Selectors.RsaSecurityTokenAuthenticator" /> class.  </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.RsaSecurityTokenAuthenticator.CanValidateTokenCore(System.IdentityModel.Tokens.SecurityToken)">
      <summary>Gets a value indicating whether the specified security token can be validated by this security token authenticator.</summary>
      <returns>true when <paramref name="token" /> is a <see cref="T:System.IdentityModel.Tokens.RsaSecurityToken" /> security token; otherwise, false.</returns>
      <param name="token">The <see cref="T:System.IdentityModel.Tokens.SecurityToken" />  to be validated. </param>
    </member>
    <member name="M:System.IdentityModel.Selectors.RsaSecurityTokenAuthenticator.ValidateTokenCore(System.IdentityModel.Tokens.SecurityToken)">
      <summary>Authenticates the specified security token and returns the set of authorization policies for the security token.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of type <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" /> that contains the set of authorization policies in effect for this application.</returns>
      <param name="token">The <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> to be validated.</param>
    </member>
    <member name="T:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator">
      <summary>Authenticates a <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> security token.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator.#ctor(System.Collections.Generic.IList{System.IdentityModel.Selectors.SecurityTokenAuthenticator})">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator" /> class using the specified set of authenticators. </summary>
      <param name="supportingAuthenticators">An <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:System.IdentityModel.Selectors.SecurityTokenAuthenticator" /> that contains the authenticators to authenticate the issuer's <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> security tokens.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator.#ctor(System.Collections.Generic.IList{System.IdentityModel.Selectors.SecurityTokenAuthenticator},System.TimeSpan)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator" /> class using the specified set of authenticators and the maximum allowable difference between the sender's and receiver's clocks.</summary>
      <param name="supportingAuthenticators">An <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:System.IdentityModel.Selectors.SecurityTokenAuthenticator" /> that contains the authenticators to authenticate the issuer's <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> security tokens.</param>
      <param name="maxClockSkew">A <see cref="T:System.TimeSpan" /> that represents the maximum allowable difference between the sender's and receiver's clocks. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator.AllowedAudienceUris">
      <summary>Gets the set of target URIs for which the <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> security token can be targeted for to be considered valid by this <see cref="T:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator" /> instance.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> of type <see cref="T:System.String" /> that contains the target URIs for which the <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> security token can be targeted for to be considered valid by this security token authenticator.</returns>
    </member>
    <member name="P:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator.AudienceUriMode">
      <summary>Gets or sets an <see cref="T:System.IdentityModel.Selectors.AudienceUriMode" /> that specifies whether the <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> security token's <see cref="T:System.IdentityModel.Tokens.SamlAudienceRestrictionCondition" /> should be validated. </summary>
      <returns>An <see cref="T:System.IdentityModel.Selectors.AudienceUriMode" /> that specifies whether the <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> security token's <see cref="T:System.IdentityModel.Tokens.SamlAudienceRestrictionCondition" /> should be validated.</returns>
    </member>
    <member name="M:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator.CanValidateTokenCore(System.IdentityModel.Tokens.SecurityToken)">
      <summary>Gets a value that indicates whether the specified security token can be validated by this security token authenticator.</summary>
      <returns>true when <paramref name="token" /> is a <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> security token; otherwise, false.</returns>
      <param name="token">The <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> to be validated.</param>
    </member>
    <member name="M:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator.ResolveClaimSet(System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>Resolves the identity associated with the specified key identifier using the supporting security authenticators provided when the <see cref="T:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator" /> instance was created and returns it as a <see cref="T:System.IdentityModel.Claims.ClaimSet" />.</summary>
      <returns>A <see cref="T:System.IdentityModel.Claims.ClaimSet" /> that represents the identity of the specified key identifier.</returns>
      <param name="keyIdentifier">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> to get the identity of.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator.ResolveClaimSet(System.IdentityModel.Tokens.SecurityToken)">
      <summary>Resolves the identity associated with the specified security token using the supporting token authenticators provided when the <see cref="T:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator" /> instance was created and returns it as a <see cref="T:System.IdentityModel.Claims.ClaimSet" />.</summary>
      <returns>A <see cref="T:System.IdentityModel.Claims.ClaimSet" /> that represents the identity of the specified security token.</returns>
      <param name="token">The <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> to get the identity of.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator.ResolveIdentity(System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>Resolves the identity associated with the specified key identifier using the supporting security token authenticators provided when the <see cref="T:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator" /> instance was created and returns it as an <see cref="T:System.Security.Principal.IIdentity" />.</summary>
      <returns>An <see cref="T:System.Security.Principal.IIdentity" /> that represents the identity of the specified key identifier.</returns>
      <param name="keyIdentifier">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> to get the identity of.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator.ResolveIdentity(System.IdentityModel.Tokens.SecurityToken)">
      <summary>Resolves the identity associated with the specified security token using the supporting security token authenticators provided when the <see cref="T:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator" /> instance was created and returns it as an <see cref="T:System.Security.Principal.IIdentity" />.</summary>
      <returns>An <see cref="T:System.Security.Principal.IIdentity" /> that represents the identity of the specified security token.</returns>
      <param name="token">The <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> to get the identity of.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator.ValidateAudienceRestriction(System.IdentityModel.Tokens.SamlAudienceRestrictionCondition)">
      <summary>Validates that the <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> security token was intended for this Web service.</summary>
      <returns>true if the <see cref="P:System.IdentityModel.Tokens.SamlAudienceRestrictionCondition.Audiences" /> property of the <paramref name="audienceRestrictionCondition" /> parameter is in the <see cref="P:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator.AllowedAudienceUris" /> collection; otherwise, false. </returns>
      <param name="audienceRestrictionCondition">A <see cref="T:System.IdentityModel.Tokens.SamlAudienceRestrictionCondition" /> that specifies the set of target Web services for which the <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> security token is intended.</param>
    </member>
    <member name="M:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator.ValidateTokenCore(System.IdentityModel.Tokens.SecurityToken)">
      <summary>Authenticates the specified security token and returns the set of authorization policies for the security token.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of type <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" /> that contains the set of authorization policies that result from the security token authentication.</returns>
      <param name="token">The <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> to be validated.</param>
    </member>
    <member name="T:System.IdentityModel.Selectors.SecurityTokenAuthenticator">
      <summary>Authenticates a security token.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenAuthenticator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Selectors.SecurityTokenAuthenticator" /> class.  </summary>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenAuthenticator.CanValidateToken(System.IdentityModel.Tokens.SecurityToken)">
      <summary>Gets a value indicating whether the specified security token can be validated by this security token authenticator. </summary>
      <returns>true when token can be validated; otherwise, false. </returns>
      <param name="token">The <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> to be validated.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenAuthenticator.CanValidateTokenCore(System.IdentityModel.Tokens.SecurityToken)">
      <summary>When overridden in a derived class, gets a value indicating whether the specified security token can be validated by this security token authenticator. </summary>
      <returns>true when <paramref name="token" /> can be validated; otherwise, false.</returns>
      <param name="token">The <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> to be validated.</param>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenAuthenticator.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
      <summary>Authenticates the specified security token and returns the set of authorization policies for the security token. </summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of type <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" /> that contains the set of authorization policies in effect for this application.</returns>
      <param name="token">The <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> to be validated.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" /> is null.</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenValidationException">
        <paramref name="token" /> cannot be authenticated by this security token authenticator-or-<paramref name="token" /> is not authenticated.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenAuthenticator.ValidateTokenCore(System.IdentityModel.Tokens.SecurityToken)">
      <summary>When overridden in a derived class, authenticates the specified security token and returns the set of authorization policies for the security token. </summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of type <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" /> that contains the set of authorization policies in effect for this application.</returns>
      <param name="token">The <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> to be validated.</param>
    </member>
    <member name="T:System.IdentityModel.Selectors.SecurityTokenManager">
      <summary>Represents a security token manager that specifies how security tokens are provided, authenticated, and serialized. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenManager.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Selectors.SecurityTokenManager" /> class.  </summary>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenManager.CreateSecurityTokenAuthenticator(System.IdentityModel.Selectors.SecurityTokenRequirement,System.IdentityModel.Selectors.SecurityTokenResolver@)">
      <summary>Gets a security token authenticator that meets the specified security token requirements. </summary>
      <returns>A <see cref="T:System.IdentityModel.Selectors.SecurityTokenAuthenticator" /> that authenticates security tokens in incoming SOAP messages that meet the specified requirements.</returns>
      <param name="tokenRequirement">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenRequirement" /> that specifies the security token requirements.</param>
      <param name="outOfBandTokenResolver">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> that determines the security token that matches the specified security token requirements.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenManager.CreateSecurityTokenProvider(System.IdentityModel.Selectors.SecurityTokenRequirement)">
      <summary>Gets a security token provider that meets the specified security token requirements.</summary>
      <returns>A <see cref="T:System.IdentityModel.Selectors.SecurityTokenProvider" /> that provides security tokens that meet the specified requirements for outgoing SOAP messages.</returns>
      <param name="tokenRequirement">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenRequirement" /> that specifies the security token requirements.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenManager.CreateSecurityTokenSerializer(System.IdentityModel.Selectors.SecurityTokenVersion)">
      <summary>Gets an XML serializer that can serialize security tokens in the specified version of the WS-* specifications.</summary>
      <returns>A <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" /> to serialize the security tokens.</returns>
      <param name="version">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenVersion" /> that specifies the WS-* specification versions that security tokens adhere to. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Selectors.SecurityTokenProvider">
      <summary>Represents a security token provider that handles security tokens for a SOAP message sender.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Selectors.SecurityTokenProvider" /> class.  </summary>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenProvider.BeginCancelToken(System.TimeSpan,System.IdentityModel.Tokens.SecurityToken,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to cancel a security token.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous cancel operation.</returns>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that specifies the timeout value for the message that cancels the security token.</param>
      <param name="token">The <see cref="T:System.IdentityModel.Tokens.SecurityToken" />  to cancel.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives notification of the completion of the asynchronous close operation.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous close operation.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenProvider.BeginCancelTokenCore(System.TimeSpan,System.IdentityModel.Tokens.SecurityToken,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to cancel a security token.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous cancel operation.</returns>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that specifies the timeout value for the message that cancels the security token.</param>
      <param name="token">The <see cref="T:System.IdentityModel.Tokens.SecurityToken" />  to cancel.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives notification of the completion of the asynchronous close operation.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous close operation.</param>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenProvider.BeginGetToken(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to get a security token.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous close operation.</returns>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that specifies the timeout value for the message that gets the security token.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives notification of the completion of the asynchronous close operation.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous close operation.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenProvider.BeginGetTokenCore(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to get a security token.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that specifies the timeout value for the message that gets the security token.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives notification of the completion of the asynchronous close operation.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous close operation.</param>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenProvider.BeginRenewToken(System.TimeSpan,System.IdentityModel.Tokens.SecurityToken,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation that renews a security token.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that specifies the timeout value for the message that renews the security token.</param>
      <param name="tokenToBeRenewed">The <see cref="T:System.IdentityModel.Tokens.SecurityToken" />  to renew.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives notification of the completion of the asynchronous close operation.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous close operation.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenProvider.BeginRenewTokenCore(System.TimeSpan,System.IdentityModel.Tokens.SecurityToken,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation that renews a security token. </summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that specifies the timeout value for the message that renews the security token.</param>
      <param name="tokenToBeRenewed">The <see cref="T:System.IdentityModel.Tokens.SecurityToken" />  to renew.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives notification of the completion of the asynchronous close operation.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous close operation.</param>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenProvider.CancelToken(System.TimeSpan,System.IdentityModel.Tokens.SecurityToken)">
      <summary>Cancels a security token.</summary>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that specifies the timeout value for the message that cancels the security token.</param>
      <param name="token">The <see cref="T:System.IdentityModel.Tokens.SecurityToken" />  to cancel.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenProvider.CancelTokenCore(System.TimeSpan,System.IdentityModel.Tokens.SecurityToken)">
      <summary>Cancels a security token.</summary>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that specifies the timeout value for the message that cancels the security token.</param>
      <param name="token">The <see cref="T:System.IdentityModel.Tokens.SecurityToken" />  to cancel.</param>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenProvider.EndCancelToken(System.IAsyncResult)">
      <summary>Completes an asynchronous operation to cancel a security token.</summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> that is returned by a call to the <see cref="M:System.IdentityModel.Selectors.SecurityTokenProvider.BeginCancelToken(System.TimeSpan,System.IdentityModel.Tokens.SecurityToken,System.AsyncCallback,System.Object)" /> method.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenProvider.EndCancelTokenCore(System.IAsyncResult)">
      <summary>Completes an asynchronous operation to cancel a security token.</summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> that is returned by a call to the <see cref="M:System.IdentityModel.Selectors.SecurityTokenProvider.BeginCancelTokenCore(System.TimeSpan,System.IdentityModel.Tokens.SecurityToken,System.AsyncCallback,System.Object)" /> method.</param>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenProvider.EndGetToken(System.IAsyncResult)">
      <summary>Completes an asynchronous operation to get a security token.</summary>
      <returns>The <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> that represents the security token.</returns>
      <param name="result">The <see cref="T:System.IAsyncResult" /> that is returned by a call to the <see cref="M:System.IdentityModel.Selectors.SecurityTokenProvider.BeginGetToken(System.TimeSpan,System.AsyncCallback,System.Object)" /> method.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenProvider.EndGetTokenCore(System.IAsyncResult)">
      <summary>Completes an asynchronous operation to get a security token.</summary>
      <returns>The <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> that represents the security token.</returns>
      <param name="result">The <see cref="T:System.IAsyncResult" /> that is returned by a call to the <see cref="M:System.IdentityModel.Selectors.SecurityTokenProvider.BeginGetTokenCore(System.TimeSpan,System.AsyncCallback,System.Object)" /> method.</param>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenProvider.EndRenewToken(System.IAsyncResult)">
      <summary>Completes an asynchronous operation to renew a security token.</summary>
      <returns>The <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> that represents the security token that is renewed.</returns>
      <param name="result">The <see cref="T:System.IAsyncResult" /> that is returned by a call to the <see cref="M:System.IdentityModel.Selectors.SecurityTokenProvider.BeginRenewToken(System.TimeSpan,System.IdentityModel.Tokens.SecurityToken,System.AsyncCallback,System.Object)" /> method.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenProvider.EndRenewTokenCore(System.IAsyncResult)">
      <summary>Completes an asynchronous operation to renew the security token.</summary>
      <returns>The <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> that represents the security token that is renewed.</returns>
      <param name="result">The <see cref="T:System.IAsyncResult" /> that is returned by a call to the <see cref="M:System.IdentityModel.Selectors.SecurityTokenProvider.BeginRenewTokenCore(System.TimeSpan,System.IdentityModel.Tokens.SecurityToken,System.AsyncCallback,System.Object)" /> method.</param>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenProvider.GetToken(System.TimeSpan)">
      <summary>Gets a security token.</summary>
      <returns>The <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> that represents the security token to get.</returns>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that specifies the timeout value for the message that gets the security token.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenProvider.GetTokenCore(System.TimeSpan)">
      <summary>Gets a security token.</summary>
      <returns>The <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> that represents the security token to get.</returns>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that specifies the timeout value for the message that gets the security token.</param>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenProvider.RenewToken(System.TimeSpan,System.IdentityModel.Tokens.SecurityToken)">
      <summary>Renews a security token.</summary>
      <returns>The <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> that represents the security token that is renewed.</returns>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that specifies the timeout value for the message that renews the security token.</param>
      <param name="tokenToBeRenewed">The <see cref="T:System.IdentityModel.Tokens.SecurityToken" />  to renew.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenProvider.RenewTokenCore(System.TimeSpan,System.IdentityModel.Tokens.SecurityToken)">
      <summary>Renews a security token.</summary>
      <returns>The <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> that represents the security token that is renewed.</returns>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that specifies the timeout value for the message that renews the security token.</param>
      <param name="tokenToBeRenewed">The <see cref="T:System.IdentityModel.Tokens.SecurityToken" />  to renew.</param>
    </member>
    <member name="P:System.IdentityModel.Selectors.SecurityTokenProvider.SupportsTokenCancellation">
      <summary>Gets a value that indicates whether the security token can be cancelled. </summary>
      <returns>true if the security token can be cancelled; otherwise, false. The default is false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Selectors.SecurityTokenProvider.SupportsTokenRenewal">
      <summary>Gets a value that indicates whether the security token is renewable. </summary>
      <returns>true if the security token can be renewed; otherwise, false. The default is false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Selectors.SecurityTokenProvider.SecurityTokenAsyncResult">
      <summary>Encapsulates the results of an asynchronous operation on a delegate.</summary>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenProvider.SecurityTokenAsyncResult.#ctor(System.IdentityModel.Tokens.SecurityToken,System.AsyncCallback,System.Object)">
      <summary>Creates a new instance of <see cref="T:System.IdentityModel.Selectors.SecurityTokenProvider.SecurityTokenAsyncResult" />. </summary>
      <param name="token">A security token with which to instantiate the <see cref="T:System.IdentityModel.Selectors.SecurityTokenProvider.SecurityTokenAsyncResult" /></param>
      <param name="callback">The callback method to be called when the asynchronous operation completes.</param>
      <param name="state">The object provided as the last parameter of the asynchronous method call.</param>
    </member>
    <member name="P:System.IdentityModel.Selectors.SecurityTokenProvider.SecurityTokenAsyncResult.AsyncState">
      <summary>Gets the object passed as the last parameter of the asynchronous method call.</summary>
      <returns>Returns <see cref="T:System.Object" />.</returns>
    </member>
    <member name="P:System.IdentityModel.Selectors.SecurityTokenProvider.SecurityTokenAsyncResult.AsyncWaitHandle">
      <summary>Gets a <see cref="T:System.Threading.WaitHandle" /> that encapsulates Win32 synchronization handles.</summary>
      <returns>Returns <see cref="T:System.Threading.WaitHandle" />.</returns>
    </member>
    <member name="P:System.IdentityModel.Selectors.SecurityTokenProvider.SecurityTokenAsyncResult.CompletedSynchronously">
      <summary>Returns true if the call completed asynchronously; otherwise, false.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenProvider.SecurityTokenAsyncResult.End(System.IAsyncResult)">
      <summary>Complete the asynchronous operation with the specified result.</summary>
      <returns>Returns <see cref="T:System.IdentityModel.Tokens.SecurityToken" />.</returns>
      <param name="result">The result of the asynchronous operation.</param>
    </member>
    <member name="P:System.IdentityModel.Selectors.SecurityTokenProvider.SecurityTokenAsyncResult.IsCompleted">
      <summary>Returns true if the asynchronous call is completed; otherwise, false.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="T:System.IdentityModel.Selectors.SecurityTokenRequirement">
      <summary>Specifies security token requirements.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenRequirement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Selectors.SecurityTokenRequirement" /> class.  </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenRequirement.GetProperty``1(System.String)">
      <summary>Gets the specified property for the current <see cref="T:System.IdentityModel.Selectors.SecurityTokenRequirement" /> instance.</summary>
      <returns>The value of the property to get.</returns>
      <param name="propertyName">The name of the property to get.</param>
      <typeparam name="TValue">The type of the property to get.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Selectors.SecurityTokenRequirement.IsOptionalTokenProperty">
      <summary>Gets a value of the token property if it is optional.</summary>
      <returns>A value of the token property.</returns>
    </member>
    <member name="P:System.IdentityModel.Selectors.SecurityTokenRequirement.KeySize">
      <summary>Gets or sets the required size of the key associated with a security token.</summary>
      <returns>The size of the key, in bits, associated with a security token. The default value is 0.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.KeySize" /> property is set to a value less than 0.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Selectors.SecurityTokenRequirement.KeySizeProperty">
      <summary>Gets a value that specifies the name of the index in the <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.Properties" /> collection for the <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.KeySize" /> property. </summary>
      <returns>The name of the index in the <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.Properties" /> collection for the <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.KeySize" /> property.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Selectors.SecurityTokenRequirement.KeyType">
      <summary>Gets or sets the type of key (asymmetric or symmetric) associated with a security token.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityKeyType" /> that specifies the type of key (asymmetric or symmetric) associated with a security token. The default value is SymmetricKey.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Selectors.SecurityTokenRequirement.KeyTypeProperty">
      <summary>Gets a value that specifies the name of the index in the <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.Properties" /> collection for the <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.KeyType" /> property.</summary>
      <returns>The name of the index in the <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.Properties" /> collection for the <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.KeyType" /> property.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Selectors.SecurityTokenRequirement.KeyUsage">
      <summary>Gets or sets a value that specifies how the key associated with a security token can be used.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityKeyUsage" /> that specifies how the key associated with a security token can be used. The default value is <see cref="F:System.IdentityModel.Tokens.SecurityKeyUsage.Signature" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Selectors.SecurityTokenRequirement.KeyUsageProperty">
      <summary>Gets a value that specifies the name of the index in the <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.Properties" /> collection for the <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.KeyUsage" /> property.</summary>
      <returns>The name of the index in the <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.Properties" /> collection for the <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.KeyUsage" /> property.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Selectors.SecurityTokenRequirement.PeerAuthenticationMode">
      <summary>Gets the name of the index in the <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.Properties" /> collection for a property that specifies the peer authentication method.</summary>
      <returns>The name of the index in the <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.Properties" /> collection for a property that specifies the peer authentication method.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Selectors.SecurityTokenRequirement.Properties">
      <summary>Gets a collection of the non-static properties for the current <see cref="T:System.IdentityModel.Selectors.SecurityTokenRequirement" /> instance.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IDictionary`2" /> that contains a collection of the non-static properties for the current <see cref="T:System.IdentityModel.Selectors.SecurityTokenRequirement" /> instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Selectors.SecurityTokenRequirement.RequireCryptographicToken">
      <summary>Gets or sets a value that indicates whether the security token must be capable of performing cryptographic operations, such as encryption.</summary>
      <returns>true if the security token must be capable of performing cryptographic operations; otherwise, false. The default is false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Selectors.SecurityTokenRequirement.RequireCryptographicTokenProperty">
      <summary>Gets the name of the index in the <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.Properties" /> collection for the <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.RequireCryptographicToken" /> property.</summary>
      <returns>The name of the index in the <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.Properties" /> collection for the <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.RequireCryptographicToken" /> property.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Selectors.SecurityTokenRequirement.TokenType">
      <summary>Gets or sets the required security token type.</summary>
      <returns>The required security token type.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Selectors.SecurityTokenRequirement.TokenTypeProperty">
      <summary>Gets a value that specifies the name of the index in the <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.Properties" /> collection for the <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.TokenType" /> property.</summary>
      <returns>The name of the index in the <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.Properties" /> collection for the <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.TokenType" /> property.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenRequirement.TryGetProperty``1(System.String,``0@)">
      <summary>Gets the specified property for the current <see cref="T:System.IdentityModel.Selectors.SecurityTokenRequirement" /> instance.</summary>
      <returns>true if the <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.Properties" /> property contains a property value for the property specified in the <paramref name="propertyName" /> property; otherwise, false.</returns>
      <param name="propertyName">The name of the property to get.</param>
      <param name="result">The value of the property specified in the <paramref name="propertyName" /> property.</param>
      <typeparam name="TValue">The type of property to return in the <paramref name="result" /> parameter.</typeparam>
      <exception cref="T:System.ArgumentException">A properties exists with the name specified in the <paramref name="propertyName" /> parameter, but it is not of the same type that is specified in the <paramref name="TValue" /> parameter.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Selectors.SecurityTokenResolver">
      <summary>Represents a utility class that can retrieve security tokens or keys when you have a key identifier or key identifier clause.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenResolver.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> class.  </summary>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenResolver.CreateDefaultSecurityTokenResolver(System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Tokens.SecurityToken},System.Boolean)">
      <summary>Creates a default security token resolver for the specified security tokens.</summary>
      <returns>A <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> that resolves key identifiers and clauses that match the security tokens specified in the <paramref name="tokens" /> parameter. </returns>
      <param name="tokens">A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of type <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> that contains the set of security tokens for which this security token resolver can resolve key identifiers and key identifier clauses to.</param>
      <param name="canMatchLocalId">true to resolve the &lt;SecurityTokenReference&gt; key identifier clauses that reference a security key that is located somewhere else in the SOAP message; otherwise, false. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenResolver.LoadCustomConfiguration(System.Xml.XmlNodeList)">
      <summary>When overridden in a derived class, loads custom configuration from XML.</summary>
      <param name="nodelist">The custom configuration elements.</param>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenResolver.ResolveSecurityKey(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>Obtains the key that is referenced in the specified key identifier clause.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> that is the key referenced in the specified key identifier clause.</returns>
      <param name="keyIdentifierClause">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />  to retrieve the key for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyIdentifierClause" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">A key could not be retrieved for the key identifier clause specified in the <paramref name="keyIdentifierClause" /> parameter.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>Retrieves a security token that matches one of the security key identifier clauses contained within the specified key identifier.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> that represents the specified key identifier.</returns>
      <param name="keyIdentifier">The <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" />  to create a security token for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyIdentifier" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">A security token cannot be created for the specified key identifier.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>Retrieves the security token that matches the specified key identifier clause.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> that represents the specified key identifier clause.</returns>
      <param name="keyIdentifierClause">The <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />  to create a security token for.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKey(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityKey@)">
      <summary>Attempts to retrieve the key that is referenced in the specified key identifier clause.</summary>
      <returns>true when a key can be retrieved for the specified key identifier clause; otherwise, false. </returns>
      <param name="keyIdentifierClause">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />  to retrieve the key for.</param>
      <param name="key">When this method returns, contains a <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> that contains the key that is referenced in the specified key identifier clause. This parameter is passed uninitialized. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyIdentifierClause" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKeyCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityKey@)">
      <summary>Attempts to retrieve the key that is referenced in the specified key identifier clause.</summary>
      <returns>true when a key can be retrieved for the specified key identifier clause; otherwise, false. </returns>
      <param name="keyIdentifierClause">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />  to retrieve the key for.</param>
      <param name="key">When this method returns, contains a <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> that contains the key that is referenced in the specified key identifier clause. This parameter is passed uninitialized. </param>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(System.IdentityModel.Tokens.SecurityKeyIdentifier,System.IdentityModel.Tokens.SecurityToken@)">
      <summary>Attempts to retrieve the security token that matches one of the key identifier clauses contained within the specified key identifier.</summary>
      <returns>true when a security token can be retrieved for the specified key identifier; otherwise, false. </returns>
      <param name="keyIdentifier">The <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" />  to create a security token for.</param>
      <param name="token">When this method returns, contains a <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> that represents the specified key identifier. This parameter is passed uninitialized. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyIdentifier" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityToken@)">
      <summary>Attempts to retrieve the security token that matches the specified key identifier clause.</summary>
      <returns>true when a security token can be retrieved for the specified key identifier clause; otherwise, false.</returns>
      <param name="keyIdentifierClause">The <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />  to create a security token for.</param>
      <param name="token">When this method returns, contains a <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> that represents the specified key identifier clause. This parameter is passed uninitialized. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyIdentifierClause" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifier,System.IdentityModel.Tokens.SecurityToken@)">
      <summary>When overridden in a derived class, attempts to retrieve the security token that matches at least one of the key identifier clauses contained within the specified key identifier.</summary>
      <returns>true when a security token can be retrieved for the specified key identifier; otherwise, false. </returns>
      <param name="keyIdentifier">The <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" />  to create a security token for.</param>
      <param name="token">When this method returns, contains a <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> that represents the specified key identifier. This parameter is passed uninitialized. </param>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityToken@)">
      <summary>When overridden in a derived class, attempts to resolve the security token that matches the specified key identifier clause.</summary>
      <returns>true when a security token can be retrieved for the specified key identifier clause; otherwise, false.</returns>
      <param name="keyIdentifierClause">The <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />  to create a security token for.</param>
      <param name="token">When this method returns, contains a <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> that represents the specified key identifier clause. This parameter is passed uninitialized. </param>
    </member>
    <member name="T:System.IdentityModel.Selectors.SecurityTokenSerializer">
      <summary>Represents a class that can read and write key identifiers, key identifier clauses, and security tokens.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" /> class.  </summary>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.CanReadKeyIdentifier(System.Xml.XmlReader)">
      <summary>Determines whether this serializer can read the &lt;KeyIdentifier&gt; element referred to by the specified XML reader. </summary>
      <returns>true when the specified &lt;KeyIdentifier&gt; XML element can be read; otherwise, false. </returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> to read the key identifier.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.CanReadKeyIdentifierClause(System.Xml.XmlReader)">
      <summary>Determines whether this serializer can read a clause in a &lt;KeyIdentifier&gt; element referred to by the specified XML reader. </summary>
      <returns>true when the specified key identifier clause can be read; otherwise, false.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> to read the key identifier clause.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.CanReadKeyIdentifierClauseCore(System.Xml.XmlReader)">
      <summary>Determines whether this serializer can read the &lt;KeyIdentifier&gt; element referred to by the specified XML reader. Called by the base class. </summary>
      <returns>true when the specified &lt;KeyIdentifier&gt; element can be read; otherwise, false.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> to read the key identifier clause.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.CanReadKeyIdentifierCore(System.Xml.XmlReader)">
      <summary>Determines whether this serializer can read the &lt;KeyIdentifier&gt; element referred to by the specified XML reader. Called by the base class. </summary>
      <returns>true when the specified key identifier clause can be read; otherwise, false.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> to read the key identifier.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.CanReadToken(System.Xml.XmlReader)">
      <summary>Determines whether this serializer can read the security token pointed at by the specified XML reader.</summary>
      <returns>true when the security token can be read; otherwise, false.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> to read the security token.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.CanReadTokenCore(System.Xml.XmlReader)">
      <summary>Determines whether this serializer can read the security token pointed at by the specified XML reader. Called by the base class. </summary>
      <returns>true when the security token can be read; otherwise, false.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> to read the security token.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.CanWriteKeyIdentifier(System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>Determines whether this serializer can write the specified key identifier. </summary>
      <returns>true when this serializer can write the specified key identifier; otherwise, false. </returns>
      <param name="keyIdentifier">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> that represents the key identifier to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyIdentifier" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.CanWriteKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>Determines whether this serializer can write the specified key identifier clause.</summary>
      <returns>true when this serializer can write the specified key identifier clause; otherwise, false.</returns>
      <param name="keyIdentifierClause">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> that represents the key identifier clause to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyIdentifierClause" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.CanWriteKeyIdentifierClauseCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>Determines whether this serializer can write the specified key identifier clause. Called by the base class.</summary>
      <returns>true when this serializer can write the specified key identifier clause; otherwise, false.</returns>
      <param name="keyIdentifierClause">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> that represents the key identifier clause to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyIdentifierClause" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.CanWriteKeyIdentifierCore(System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>Determines whether this serializer can write the specified key identifier. Called by the base class. </summary>
      <returns>true when this serializer can write the specified key identifier; otherwise, false. </returns>
      <param name="keyIdentifier">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> that represents the key identifier to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyIdentifier" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.CanWriteToken(System.IdentityModel.Tokens.SecurityToken)">
      <summary>Determines whether this serializer can write the specified security token to XML.</summary>
      <returns>true when the security token can be written; otherwise, false.</returns>
      <param name="token">The <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> to convert to XML.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.CanWriteTokenCore(System.IdentityModel.Tokens.SecurityToken)">
      <summary>Determines whether this serializer can write the specified security token to XML. Called by the base class. </summary>
      <returns>true when the security token can be written; otherwise, false.</returns>
      <param name="token">The <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> to convert to XML.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.ReadKeyIdentifier(System.Xml.XmlReader)">
      <summary>Reads the key identifier using specified XML reader.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> that represents the key identifier that is read.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> to read the key identifier.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.ReadKeyIdentifierClause(System.Xml.XmlReader)">
      <summary>Reads the key identifier clause using specified XML reader.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> that represents the key identifier that is read.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> to read the key identifier.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.ReadKeyIdentifierClauseCore(System.Xml.XmlReader)">
      <summary>Reads the key identifier clause using specified XML reader. Called by the base class. </summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> that represents the key identifier that is read.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> to read the key identifier.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.ReadKeyIdentifierCore(System.Xml.XmlReader)">
      <summary>Reads the key identifier clause using specified XML reader. Called by the base class. </summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> that represents the key identifier that is read.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> to read the key identifier.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>Reads the security token pointed at by the specified XML reader.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> that represents the security token that is read.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> to read the security token.</param>
      <param name="tokenResolver">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> that determines the security token type.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.-or-<paramref name="tokenResolver" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.ReadTokenCore(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>Reads the security token pointed at by the specified XML reader. Called by the base class. </summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> that represents the security token that is read.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> to read the security token.</param>
      <param name="tokenResolver">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> that determines the security token type.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.-or-<paramref name="tokenResolver" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.WriteKeyIdentifier(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>Writes the specified key identifier using the specified XML writer.</summary>
      <param name="writer">A <see cref="T:System.Xml.XmlWriter" /> to write the key identifier.</param>
      <param name="keyIdentifier">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> that represents the key identifier to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyIdentifier" /> is null.-or-<paramref name="writer" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.WriteKeyIdentifierClause(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>Writes the specified key identifier clause using the specified XML writer.</summary>
      <param name="writer">A <see cref="T:System.Xml.XmlWriter" /> to write the key identifier clause.</param>
      <param name="keyIdentifierClause">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> that represents the key identifier clause to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyIdentifierClause" /> is null.-or-<paramref name="writer" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.WriteKeyIdentifierClauseCore(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>Writes the specified key identifier clause using the specified XML writer. Called by the base class. </summary>
      <param name="writer">A <see cref="T:System.Xml.XmlWriter" /> to write the key identifier clause.</param>
      <param name="keyIdentifierClause">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> that represents the key identifier clause to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyIdentifierClause" /> is null.-or-<paramref name="writer" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.WriteKeyIdentifierCore(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>Writes the specified key identifier using the specified XML writer. Called by the base class. </summary>
      <param name="writer">A <see cref="T:System.Xml.XmlWriter" /> to write the key identifier.</param>
      <param name="keyIdentifier">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> that represents the key identifier to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyIdentifier" /> is null.-or-<paramref name="writer" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
      <summary>Writes the specified security token using the specified XML writer. </summary>
      <param name="writer">A <see cref="T:System.Xml.XmlWriter" /> to write the security token.</param>
      <param name="token">A <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> that represents the security token to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" /> is null.-or-<paramref name="writer" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.WriteTokenCore(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
      <summary>Writes the specified security token using the specified XML writer. Called by the base class. </summary>
      <param name="writer">A <see cref="T:System.Xml.XmlWriter" /> to write the security token.</param>
      <param name="token">A <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> that represents the security token to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" /> is null.-or-<paramref name="writer" /> is null.</exception>
    </member>
    <member name="T:System.IdentityModel.Selectors.SecurityTokenVersion">
      <summary>Represents the specifications, such as the WS-*specifications, that security tokens are defined in.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenVersion.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Selectors.SecurityTokenVersion" /> class. </summary>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenVersion.GetSecuritySpecifications">
      <summary>Gets the collection of supported security specifications.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of type <see cref="T:System.String" /> that contains the set of supported security specifications.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Selectors.UserNamePasswordValidator">
      <summary>Validates a username and password.</summary>
    </member>
    <member name="M:System.IdentityModel.Selectors.UserNamePasswordValidator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Selectors.UserNamePasswordValidator" /> class.  </summary>
    </member>
    <member name="M:System.IdentityModel.Selectors.UserNamePasswordValidator.CreateMembershipProviderValidator(System.Web.Security.MembershipProvider)">
      <summary>Gets an instance of a <see cref="T:System.IdentityModel.Selectors.UserNamePasswordValidator" /> that validates a username and password using the specified membership provider.</summary>
      <returns>An <see cref="T:System.IdentityModel.Selectors.UserNamePasswordValidator" /> that validates a username and password using <paramref name="provider" />. </returns>
      <param name="provider">A <see cref="T:System.Web.Security.MembershipProvider" /> to validate the username and password.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Selectors.UserNamePasswordValidator.None">
      <summary>Gets a validator that performs no validation on the username and password. As a result, the username and password are always deemed valid.</summary>
      <returns>An <see cref="T:System.IdentityModel.Selectors.UserNamePasswordValidator" /> that performs no validation on the username and password.</returns>
    </member>
    <member name="M:System.IdentityModel.Selectors.UserNamePasswordValidator.Validate(System.String,System.String)">
      <summary>When overridden in a derived class, validates the specified username and password.</summary>
      <param name="userName">The username to validate.</param>
      <param name="password">The password to validate.</param>
    </member>
    <member name="T:System.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator">
      <summary>Authenticates a <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" /> security token.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator" /> class.  </summary>
    </member>
    <member name="M:System.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator.CanValidateTokenCore(System.IdentityModel.Tokens.SecurityToken)">
      <summary>Gets a value indicating whether the specified security token can be validated by this security token authenticator.</summary>
      <returns>true when <paramref name="token" /> is a <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" /> security token; otherwise, false.</returns>
      <param name="token">The <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> to be validated.</param>
    </member>
    <member name="M:System.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator.ValidateTokenCore(System.IdentityModel.Tokens.SecurityToken)">
      <summary>Authenticates the specified security token and returns the set of authorization policies for the security token.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of type <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" /> that contains the set of authorization policies in effect for this application.</returns>
      <param name="token">The <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> to be validated. </param>
    </member>
    <member name="M:System.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator.ValidateUserNamePasswordCore(System.String,System.String)">
      <summary>When overridden in a derived class, authenticates the specified user name and password and returns the set of authorization policies for <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" /> security tokens. </summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of type <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" /> that contains the set of authorization policies in effect for this application.</returns>
      <param name="userName">The user name associated with the security token.</param>
      <param name="password">The password associated with the security token.</param>
    </member>
    <member name="T:System.IdentityModel.Selectors.UserNameSecurityTokenProvider">
      <summary>Represents a security token provider that provides <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" /> security tokens for a SOAP message sender.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.UserNameSecurityTokenProvider.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Selectors.UserNameSecurityTokenProvider" /> class using the specified username and password. </summary>
      <param name="userName">The username to get <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" /> security token for.</param>
      <param name="password">The password of the user to get a <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" /> security token for.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.UserNameSecurityTokenProvider.GetTokenCore(System.TimeSpan)">
      <summary>Gets a security token based on the username and password specified in the constructor. </summary>
      <returns>The <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> that represents the security token to get.</returns>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that specifies the timeout value for the message that gets the security token.</param>
    </member>
    <member name="T:System.IdentityModel.Selectors.WindowsSecurityTokenAuthenticator">
      <summary>Uses Windows authentication to authenticate the <see cref="T:System.IdentityModel.Tokens.WindowsSecurityToken" /> security token.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.WindowsSecurityTokenAuthenticator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Selectors.WindowsSecurityTokenAuthenticator" /> class.  </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.WindowsSecurityTokenAuthenticator.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Selectors.WindowsSecurityTokenAuthenticator" /> class by specifying whether the groups that the Windows user belongs to are added to the <see cref="P:System.IdentityModel.Policy.AuthorizationContext.ClaimSets" /> property when the user is authenticated.</summary>
      <param name="includeWindowsGroups">true to get the groups the Windows user belongs to; otherwise, false. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.WindowsSecurityTokenAuthenticator.CanValidateTokenCore(System.IdentityModel.Tokens.SecurityToken)">
      <summary>Gets a value indicating whether the specified security token can be validated by this security token authenticator.</summary>
      <returns>true when <paramref name="token" /> is a <see cref="T:System.IdentityModel.Tokens.WindowsSecurityToken" /> security token; otherwise, false.</returns>
      <param name="token">The <see cref="T:System.IdentityModel.Tokens.SecurityToken" />  to be validated.</param>
    </member>
    <member name="M:System.IdentityModel.Selectors.WindowsSecurityTokenAuthenticator.ValidateTokenCore(System.IdentityModel.Tokens.SecurityToken)">
      <summary>Authenticates the specified security token and returns the set of authorization policies for the security token.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of type <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" /> that contains the set of authorization policies in effect for this application.</returns>
      <param name="token">The <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> to be validated.</param>
    </member>
    <member name="T:System.IdentityModel.Selectors.WindowsUserNameSecurityTokenAuthenticator">
      <summary>Uses Windows authentication to authenticate the user name and password in a <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" /> security token.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.WindowsUserNameSecurityTokenAuthenticator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Selectors.WindowsUserNameSecurityTokenAuthenticator" /> class </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.WindowsUserNameSecurityTokenAuthenticator.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Selectors.WindowsUserNameSecurityTokenAuthenticator" /> class by specifying whether the claims that identify the Windows groups that a user belongs to are initially added to the <see cref="P:System.IdentityModel.Policy.AuthorizationContext.ClaimSets" /> property when the user is authenticated.</summary>
      <param name="includeWindowsGroups">true to get the groups the Windows user belongs to; otherwise, false. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.WindowsUserNameSecurityTokenAuthenticator.ValidateUserNamePasswordCore(System.String,System.String)">
      <summary>Authenticates the specified user name and password and returns the set of authorization policies for <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" /> security tokens.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of type <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" /> that contains the set of authorization policies in effect for this application.</returns>
      <param name="userName">The user name associated with the security token.</param>
      <param name="password">The password associated with the security token.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="userName" /> contains more than one backslash (\) character.</exception>
    </member>
    <member name="T:System.IdentityModel.Selectors.X509CertificateValidator">
      <summary>Validates an X.509 certificate.</summary>
    </member>
    <member name="M:System.IdentityModel.Selectors.X509CertificateValidator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Selectors.X509CertificateValidator" /> class.  </summary>
    </member>
    <member name="P:System.IdentityModel.Selectors.X509CertificateValidator.ChainTrust">
      <summary>Gets a validator that validates the X.509 certificate using a trust chain. </summary>
      <returns>A <see cref="T:System.IdentityModel.Selectors.X509CertificateValidator" /> that validates the X.509 certificate using a trust chain.</returns>
    </member>
    <member name="M:System.IdentityModel.Selectors.X509CertificateValidator.CreateChainTrustValidator(System.Boolean,System.Security.Cryptography.X509Certificates.X509ChainPolicy)">
      <summary>Gets a validator that verifies the X.509 certificate by specifying the context and chain policy that is used to build and verify a trust chain. </summary>
      <returns>A <see cref="T:System.IdentityModel.Selectors.X509CertificateValidator" /> that validates the X.509 certificate using a trust chain.</returns>
      <param name="useMachineContext">true to use the machine context; false to use the current user context. </param>
      <param name="chainPolicy">An <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainPolicy" /> that specifies the policy used to build and verify the trust chain.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.X509CertificateValidator.CreatePeerOrChainTrustValidator(System.Boolean,System.Security.Cryptography.X509Certificates.X509ChainPolicy)">
      <summary>Gets a validator that verifies the certificate is in the TrustedPeople certificate store or by specifying the context and chain policy that is used to build a certificate trust chain. The certificate is trusted if it passes either verification method.</summary>
      <returns>A <see cref="T:System.IdentityModel.Selectors.X509CertificateValidator" /> that verifies the certificate is in the TrustedPeople certificate store or by building a certificate trust chain.</returns>
      <param name="useMachineContext">true to use the machine context; false to use the current user context.</param>
      <param name="chainPolicy">An <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainPolicy" /> that specifies the policy used to build the trust chain.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.X509CertificateValidator.LoadCustomConfiguration(System.Xml.XmlNodeList)">
      <summary>When overridden in a derived class, loads custom configuration from XML.</summary>
      <param name="nodelist">The custom configuration elements.</param>
    </member>
    <member name="P:System.IdentityModel.Selectors.X509CertificateValidator.None">
      <summary>Gets a validator that performs no validation on an X.509 certificate. As a result, an X.509 certificate is always considered to be valid.</summary>
      <returns>A <see cref="T:System.IdentityModel.Selectors.X509CertificateValidator" /> that performs no validation on the X.509 certificate.</returns>
    </member>
    <member name="P:System.IdentityModel.Selectors.X509CertificateValidator.PeerOrChainTrust">
      <summary>Gets a validator that verifies the certificate is in the TrustedPeople certificate store or by building a certificate trust chain. The certificate is trusted if it passes either verification method.</summary>
      <returns>A <see cref="T:System.IdentityModel.Selectors.X509CertificateValidator" /> that verifies the certificate is in the TrustedPeople certificate store or by building a certificate trust chain.</returns>
    </member>
    <member name="P:System.IdentityModel.Selectors.X509CertificateValidator.PeerTrust">
      <summary>Gets a validator that verifies the certificate is in the TrustedPeople certificate store</summary>
      <returns>A <see cref="T:System.IdentityModel.Selectors.X509CertificateValidator" /> that verifies the certificate is in the TrustedPeople certificate store.</returns>
    </member>
    <member name="M:System.IdentityModel.Selectors.X509CertificateValidator.Validate(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>When overridden in a derived class, validates the X.509 certificate. </summary>
      <param name="certificate">The <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> that represents the X.509 certificate to validate.</param>
    </member>
    <member name="T:System.IdentityModel.Selectors.X509SecurityTokenAuthenticator">
      <summary>Authenticates an <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.X509SecurityTokenAuthenticator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Selectors.X509SecurityTokenAuthenticator" /> class.  </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.X509SecurityTokenAuthenticator.#ctor(System.IdentityModel.Selectors.X509CertificateValidator)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Selectors.X509SecurityTokenAuthenticator" /> class using the specified certificate validator. </summary>
      <param name="validator">A <see cref="T:System.IdentityModel.Selectors.X509CertificateValidator" /> that verifies that the certificate is valid.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.X509SecurityTokenAuthenticator.#ctor(System.IdentityModel.Selectors.X509CertificateValidator,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Selectors.X509SecurityTokenAuthenticator" /> class using the specified certificate validation method and indicates whether the identity of the certificate is mapped to a Windows identity.</summary>
      <param name="validator">A <see cref="T:System.IdentityModel.Selectors.X509CertificateValidator" /> that verifies that the certificate is valid.</param>
      <param name="mapToWindows">true to map the identity of the certificate to a Windows identity; otherwise, false. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.X509SecurityTokenAuthenticator.#ctor(System.IdentityModel.Selectors.X509CertificateValidator,System.Boolean,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Selectors.X509SecurityTokenAuthenticator" /> class using the specified certificate validation method and indicates whether the identity of the certificate is mapped to a Windows identity and the Windows groups the user belongs to. </summary>
      <param name="validator">A <see cref="T:System.IdentityModel.Selectors.X509CertificateValidator" /> that verifies that the certificate is valid.</param>
      <param name="mapToWindows">true to map the identity of the certificate to a Windows identity; otherwise, false. </param>
      <param name="includeWindowsGroups">true to include the groups the Windows user belongs to in the <see cref="P:System.IdentityModel.Policy.AuthorizationContext.ClaimSets" /> property that is constructed throughout the authentication process; otherwise, false.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.X509SecurityTokenAuthenticator.CanValidateTokenCore(System.IdentityModel.Tokens.SecurityToken)">
      <summary>Gets a value that indicates whether the specified security token can be validated by this security token authenticator.</summary>
      <returns>true when <paramref name="token" /> is a <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" /> security token or a class that derives from <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" />; otherwise, false.</returns>
      <param name="token">The <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> to be validated.</param>
    </member>
    <member name="P:System.IdentityModel.Selectors.X509SecurityTokenAuthenticator.MapCertificateToWindowsAccount">
      <summary>Gets a value that indicates whether to map the X.509 certificate to a Windows account.</summary>
      <returns>true to map the X.509 certificate to a Windows account; otherwise, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.X509SecurityTokenAuthenticator.ValidateTokenCore(System.IdentityModel.Tokens.SecurityToken)">
      <summary>Authenticates the specified security token and returns the set of authorization policies for the security token.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of type <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" /> that contains the set of authorization policies in effect for this application.</returns>
      <param name="token">The <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> to be validated.</param>
    </member>
    <member name="T:System.IdentityModel.Selectors.X509SecurityTokenProvider">
      <summary>Represents a security token provider that provides <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" /> security tokens for a SOAP message sender.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.X509SecurityTokenProvider.#ctor(System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.X509FindType,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Selectors.X509SecurityTokenProvider" /> class by getting an X.509 certificate from the specified certificate store criteria. </summary>
      <param name="storeLocation">One of the <see cref="T:System.Security.Cryptography.X509Certificates.StoreLocation" /> values that specifies the certificate store location.</param>
      <param name="storeName">One of the <see cref="T:System.Security.Cryptography.X509Certificates.StoreName" /> values that specifies the certificate store name.</param>
      <param name="findType">One of the<see cref="T:System.Security.Cryptography.X509Certificates.X509FindType" /> values that specifies how to search the certificate store.</param>
      <param name="findValue">The value used to find the X.509 certificate in the certificate store.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="findValue" /> is null.</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">No certificates match the specified criteria.-or-More than one certificate matches the specified criteria.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.X509SecurityTokenProvider.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Selectors.X509SecurityTokenProvider" /> class using the specified X.509 certificate.</summary>
      <param name="certificate">The <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> to get a security token for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Selectors.X509SecurityTokenProvider.Certificate">
      <summary>Gets the X.509 certificate associated with the <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" /> security token.</summary>
      <returns>Gets an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> that represents the X.509 certificate of a security token.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.X509SecurityTokenProvider.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.IdentityModel.Selectors.X509SecurityTokenProvider" />. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.X509SecurityTokenProvider.GetTokenCore(System.TimeSpan)">
      <summary>Gets a security token using the X.509 certificate specified in the constructor.</summary>
      <returns>The <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> that represents the security token to get.</returns>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that specifies the timeout value for the message that gets the security token.</param>
    </member>
    <member name="T:System.IdentityModel.Tokens.AggregateTokenResolver">
      <summary>Represents a security token resolver that can wrap multiple token resolvers and resolve tokens across all of the wrapped resolvers.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.AggregateTokenResolver.#ctor(System.Collections.Generic.IEnumerable{System.IdentityModel.Selectors.SecurityTokenResolver})">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.AggregateTokenResolver" /> class by using the specified list of token resolvers.</summary>
      <param name="tokenResolvers">A list of the security token resolvers to be wrapped by this instance.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tokenResolvers" /> is null.</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.AggregateTokenResolver.TokenResolvers">
      <summary>Gets the security token resolvers that are wrapped by this instance.</summary>
      <returns>A read-only collection that contains the token resolvers that are wrapped by this instance.</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.AggregateTokenResolver.TryResolveSecurityKeyCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityKey@)">
      <summary>Attempts to retrieve the key that is referenced in the specified key identifier clause.</summary>
      <returns>true when a key can be retrieved for the specified key identifier clause; otherwise, false.</returns>
      <param name="keyIdentifierClause">The key identifier clause to retrieve the key for.</param>
      <param name="key">When this method returns, contains the key that is referenced in the specified key identifier clause. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyIdentifierClause" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.AggregateTokenResolver.TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifier,System.IdentityModel.Tokens.SecurityToken@)">
      <summary>Attempts to retrieve the security token that matches at least one of the key identifier clauses contained within the specified key identifier.</summary>
      <returns>true when a token can be retrieved for the specified key identifier; otherwise, false.</returns>
      <param name="keyIdentifier">The security key identifier to retrieve the token for.</param>
      <param name="token">When this method returns, contains a token that represents the specified key identifier. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyIdentifier" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.AggregateTokenResolver.TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityToken@)">
      <summary>Attempts to resolve the security token that matches the specified key identifier clause.</summary>
      <returns>true when a security token can be retrieved for the specified key identifier clause; otherwise, false.</returns>
      <param name="keyIdentifierClause">The key identifier clause to create a security token for.</param>
      <param name="token">When this method returns, contains a security token that represents the specified key identifier clause. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyIdentifierClause" /> is null.</exception>
    </member>
    <member name="T:System.IdentityModel.Tokens.AsymmetricProofDescriptor">
      <summary>This class can be used for issuing the asymmetric key based token.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.AsymmetricProofDescriptor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.AsymmetricProofDescriptor" /> class.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.AsymmetricProofDescriptor.#ctor(System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.AsymmetricProofDescriptor" /> class based on a key identifier.</summary>
      <param name="keyIdentifier">The key identifier on which to construct the proof token.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.AsymmetricProofDescriptor.#ctor(System.Security.Cryptography.RSA)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.AsymmetricProofDescriptor" /> class based on an RSA algorithm.</summary>
      <param name="rsaAlgorithm">The RSA algorithm on which to construct the proof token.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.AsymmetricProofDescriptor.ApplyTo(System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse)">
      <summary>Applies the proof descriptor to the RSTR's requested proof token.</summary>
      <param name="response">The RSTR on which to apply the descriptor.</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.AsymmetricProofDescriptor.KeyIdentifier">
      <summary>Gets the key identifier that the requestor has provided from the use key. It can be echoed back inside the SAML token if it is needed.</summary>
      <returns>The key identifier that the requestor has provided from the use key.</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.AsymmetricSecurityKey">
      <summary>Base class for asymmetric keys.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.AsymmetricSecurityKey.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.AsymmetricSecurityKey" /> class.  </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.AsymmetricSecurityKey.GetAsymmetricAlgorithm(System.String,System.Boolean)">
      <summary>When overridden in a derived class, gets the specified asymmetric cryptographic algorithm. </summary>
      <returns>An <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> that represents the specified asymmetric cryptographic algorithm.Typically, true is passed into the <paramref name="privateKey" /> parameter, as a private key is typically required for decryption.</returns>
      <param name="algorithm">The asymmetric algorithm to create.</param>
      <param name="privateKey">true when a private key is required to create the algorithm; otherwise, false. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.AsymmetricSecurityKey.GetHashAlgorithmForSignature(System.String)">
      <summary>When overridden in a derived class, gets a cryptographic algorithm that generates a hash for a digital signature.</summary>
      <returns>A <see cref="T:System.Security.Cryptography.HashAlgorithm" /> that generates hashes for digital signatures.</returns>
      <param name="algorithm">The hash algorithm.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureDeformatter(System.String)">
      <summary>When overridden in a derived class, gets the deformatter algorithm for the digital signature.</summary>
      <returns>An <see cref="T:System.Security.Cryptography.AsymmetricSignatureDeformatter" /> that represents the deformatter algorithm for the digital signature.</returns>
      <param name="algorithm">The deformatter algorithm for the digital signature.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureFormatter(System.String)">
      <summary>When overridden in a derived class, gets the formatter algorithm for the digital signature.</summary>
      <returns>An <see cref="T:System.Security.Cryptography.AsymmetricSignatureFormatter" /> that represents the formatter algorithm for the digital signature.</returns>
      <param name="algorithm">The formatter algorithm for the digital signature.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.AsymmetricSecurityKey.HasPrivateKey">
      <summary>When overridden in a derived class, gets a value that indicates whether the private key is available.</summary>
      <returns>true when the private key is available; otherwise, false. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.AudienceRestriction">
      <summary>Defines settings for an AudienceRestriction verification.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.AudienceRestriction.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.AudienceRestriction" /> class.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.AudienceRestriction.#ctor(System.IdentityModel.Selectors.AudienceUriMode)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.AudienceRestriction" /> class with the specified mode.</summary>
      <param name="audienceMode">One of the enumeration values that specifies the mode in which the Audience URI restriction is applied.</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.AudienceRestriction.AllowedAudienceUris">
      <summary>Gets the list of allowed Audience URIs.</summary>
      <returns>The list of allowed Audience URIs.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.AudienceRestriction.AudienceMode">
      <summary>Gets or sets the mode in which Audience URI restriction is applied.</summary>
      <returns>One of the enumeration values that specifies the mode in which the Audience URI restriction is applied.</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.AudienceUriValidationFailedException">
      <summary>The exception that is thrown when an incoming security token fails Audience URI validation.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.AudienceUriValidationFailedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.AudienceUriValidationFailedException" /> class.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.AudienceUriValidationFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.AudienceUriValidationFailedException" /> class using the specified XML serialization data and contextual data about the source and destination of the serialization stream. </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that contains values that are used during serialization and deserialization.</param>
      <param name="context">A <see cref="T:System.IdentityModel.Tokens.SecurityTokenValidationException" /> that contains data about the source and destination of the serialization stream.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.AudienceUriValidationFailedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.AudienceUriValidationFailedException" /> class using the specified error message. </summary>
      <param name="message">A message that identifies the reason the exception occurred.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.AudienceUriValidationFailedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SecurityTokenException" /> class using the specified error message and root cause of the error. </summary>
      <param name="message">A message that identifies the reason the exception occurred.</param>
      <param name="inner">A <see cref="T:System.Exception" /> that represents the root cause of the exception.</param>
    </member>
    <member name="T:System.IdentityModel.Tokens.AuthenticationContext">
      <summary>This class is used to specify the context of an authentication event.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.AuthenticationContext.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.AuthenticationContext" /> class.</summary>
    </member>
    <member name="P:System.IdentityModel.Tokens.AuthenticationContext.Authorities">
      <summary>Gets the collection of authorities to use for resolving an authentication event.</summary>
      <returns>The collection of authorities to use for resolving an authentication event.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.AuthenticationContext.ContextClass">
      <summary>Gets or sets the context class to use for resolving an authentication event.</summary>
      <returns>The context class to use for resolving an authentication event.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.AuthenticationContext.ContextDeclaration">
      <summary>Gets or sets the context declaration to use for resolving an authentication event.</summary>
      <returns>The context declaration to use for resolving an authentication event.</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.AuthenticationMethods">
      <summary>Defines constants for supported well-known authentication methods. Defines constants for SAML authentication methods.</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.AuthenticationMethods.HardwareToken">
      <summary>Authentication by using a hardware token, http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/hardwaretoken.</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.AuthenticationMethods.Kerberos">
      <summary>Authentication by using the Kerberos protocol, http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/kerberos.</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.AuthenticationMethods.Namespace">
      <summary>The namespace for the well-known authentication methods, http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/.</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.AuthenticationMethods.Password">
      <summary>Authentication by using a password, http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/password.</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.AuthenticationMethods.Pgp">
      <summary>Authentication by using a key authenticated by a PGP web of trust, http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/pgp.</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.AuthenticationMethods.SecureRemotePassword">
      <summary>Authentication by using the Secure Remote Password protocol, http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/secureremotepassword.</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.AuthenticationMethods.Signature">
      <summary>Authentication by using an XML digital signature, http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/signature.</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.AuthenticationMethods.Smartcard">
      <summary>Authentication by using a smartcard, http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/smartcard.</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.AuthenticationMethods.SmartcardPki">
      <summary>Authentication by using a smartcard PKI, http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/smartcardpki.</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.AuthenticationMethods.Spki">
      <summary>Authentication on a key authenticated using an SPKI PKI, http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/spki.</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.AuthenticationMethods.TlsClient">
      <summary>Authentication by using either the SSL or TLS protocol with certificate-based client authentication, http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/tlsclient.</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.AuthenticationMethods.Unspecified">
      <summary>Authentication by using an unspecified method, http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/unspecified.</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.AuthenticationMethods.Windows">
      <summary>Windows authentication, http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/windows.</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.AuthenticationMethods.X509">
      <summary>Authentication on a key authenticated using an X.509 PKI, http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/x509.</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.AuthenticationMethods.Xkms">
      <summary>Authentication on a key authenticated using an XKMS trust service, http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/xkms.</summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.BinaryKeyIdentifierClause">
      <summary>Represents a base class for key identifier clauses that are based upon binary data.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.BinaryKeyIdentifierClause.#ctor(System.String,System.Byte[],System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.BinaryKeyIdentifierClause" /> class using the specified key identifier clause type, binary data and a value that indicates whether the binary data must be cloned. </summary>
      <param name="clauseType">The key identifier clause type. Sets the value of the <see cref="P:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.ClauseType" /> property.</param>
      <param name="identificationData">An array of <see cref="T:System.Byte" /> that contains the binary data that represents the key identifier.</param>
      <param name="cloneBuffer">true to clone the array passed into the <paramref name="identificationData" /> parameter; otherwise, false. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="identificationData" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="identificationData" /> is zero length.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.BinaryKeyIdentifierClause.#ctor(System.String,System.Byte[],System.Boolean,System.Byte[],System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.BinaryKeyIdentifierClause" /> class using the specified key identifier clause type, binary data, a value that indicates whether the binary data must be cloned, a nonce and the key length.</summary>
      <param name="clauseType">The key identifier clause type. Sets the value of the <see cref="P:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.ClauseType" /> property.</param>
      <param name="identificationData">An array of <see cref="T:System.Byte" /> that contains the binary data that represents the key identifier. Sets the binary data that is returned by the <see cref="M:System.IdentityModel.Tokens.BinaryKeyIdentifierClause.GetBuffer" /> method.</param>
      <param name="cloneBuffer">true to clone the array passed into the <paramref name="identificationData" /> parameter; otherwise, false. </param>
      <param name="derivationNonce">An array of <see cref="T:System.Byte" /> that contains the nonce that was used to create a derived key. Sets the value that is returned by the <see cref="M:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.GetDerivationNonce" /> method.</param>
      <param name="derivationLength">The size of the derived key. Sets the value of the <see cref="P:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.DerivationLength" /> property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="identificationData" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="identificationData" /> is zero length.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.BinaryKeyIdentifierClause.GetBuffer">
      <summary>Gets the binary data that represents the key identifier.</summary>
      <returns>An array of <see cref="T:System.Byte" /> that contains the binary data that represents the key identifier.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.BinaryKeyIdentifierClause.GetRawBuffer">
      <summary>Gets the binary data that represents the key identifier.</summary>
      <returns>An array of <see cref="T:System.Byte" /> that contains the binary data that represents the key identifier.</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.BinaryKeyIdentifierClause.Matches(System.Byte[])">
      <summary>Returns a value that indicates whether the binary data for the current instance matches the specified binary data.</summary>
      <returns>true if <paramref name="data " />is equivalent to the binary data returned by the <see cref="M:System.IdentityModel.Tokens.BinaryKeyIdentifierClause.GetBuffer" /> method; otherwise, false.</returns>
      <param name="data">An array of <see cref="T:System.Byte" /> to compare to.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.BinaryKeyIdentifierClause.Matches(System.Byte[],System.Int32)">
      <summary>Returns a value that indicates whether the binary data for the current instance is equivalent to the specified binary data at the specified offset.</summary>
      <returns>true if the binary data in the <paramref name="data " />parameter starting at the index specified in the <paramref name="offset" /> parameter is equivalent to the binary data returned by the <see cref="M:System.IdentityModel.Tokens.BinaryKeyIdentifierClause.GetBuffer" /> method (starting at index zero); otherwise, false.</returns>
      <param name="data">An array of <see cref="T:System.Byte" /> to compare to.</param>
      <param name="offset">The index in the array at which the comparison starts.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.BinaryKeyIdentifierClause.Matches(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>Returns a value that indicates whether the key identifier for this instance is equivalent to the specified key identifier clause.</summary>
      <returns>true if <paramref name="keyIdentifierClause" /> is of type <see cref="T:System.IdentityModel.Tokens.BinaryKeyIdentifierClause" /> and the binary data returned by the <see cref="M:System.IdentityModel.Tokens.BinaryKeyIdentifierClause.GetBuffer" /> method is identical for the <paramref name="keyIdentifierClause" /> parameter and the current instance; otherwise, false.</returns>
      <param name="keyIdentifierClause">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> to compare to.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.BootstrapContext">
      <summary>Contains a serialized version of the original token that was used at sign-in time.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.BootstrapContext.#ctor(System.Byte[])">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.BootstrapContext" /> class by using the specified array.</summary>
      <param name="token">An array that represents the token.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.BootstrapContext.#ctor(System.IdentityModel.Tokens.SecurityToken,System.IdentityModel.Tokens.SecurityTokenHandler)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.BootstrapContext" /> class by using the specified security token and token handler.</summary>
      <param name="token">The security token to serialize.</param>
      <param name="tokenHandler">The handler with which to serialize the token.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" /> is null.-or-<paramref name="tokenHandler" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.BootstrapContext.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.BootstrapContext" /> class from a stream.</summary>
      <param name="info">The serialized data.</param>
      <param name="context">The context for serialization.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.BootstrapContext.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.BootstrapContext" /> class by using the specified string.</summary>
      <param name="token">A string that represents the token.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.BootstrapContext.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with data needed to serialize the current <see cref="T:System.IdentityModel.Tokens.BootstrapContext" /> object.</summary>
      <param name="info">The object to populate with data.</param>
      <param name="context">The destination for this serialization. Can be null.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is null.</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.BootstrapContext.SecurityToken">
      <summary>Gets the security token that was used to initialize the context.</summary>
      <returns>The security token or null.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.BootstrapContext.SecurityTokenHandler">
      <summary>Gets the token handler that was used to initialize the context.</summary>
      <returns>The token handler or null.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.BootstrapContext.Token">
      <summary>Gets the string that was used to initialize the context.</summary>
      <returns>The string that was used to initialize the context or null.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.BootstrapContext.TokenBytes">
      <summary>Gets the array that was used to initialize the context.</summary>
      <returns>The array that was used to initialize the context or null.</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.ComputedKeyAlgorithms">
      <summary>Used in the RST to indicate the desired algorithm with which to compute a key based on the combined entropies from both the token requestor and the token issuer.</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.ComputedKeyAlgorithms.Psha1">
      <summary>The URI for the P-SHA1 hash algorithm; http://schemas.microsoft.com/idfx/computedkeyalgorithm/psha1.</summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry">
      <summary>Represents an issuer name registry that maintains a list of trusted issuers loaded from elements in the application configuration file that associate each issuer name to the X.509 certificate that is needed to verify the signature of tokens produced by the issuer.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry" /> class.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry.AddTrustedIssuer(System.String,System.String)">
      <summary>Adds an issuer to the dictionary of trusted issuers.</summary>
      <param name="certificateThumbprint">ASN.1 encoded form of the issuer's certificate thumbprint.</param>
      <param name="name">The name of the issuer.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="certificateThumbprint" /> is null or empty.-or-<paramref name="name" /> is null or empty.</exception>
      <exception cref="T:System.InvalidOperationException">The issuer specified by <paramref name="certificateThumbprint" /> has already been configured. (The issuer already exists in the <see cref="P:System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry.ConfiguredTrustedIssuers" /> dictionary.)</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry.ConfiguredTrustedIssuers">
      <summary>Gets the dictionary of trusted issuers that have been configured for this instance. </summary>
      <returns>A dictionary that contains the trusted issuers.</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry.GetIssuerName(System.IdentityModel.Tokens.SecurityToken)">
      <summary>Returns the issuer name associated with the specified <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" /> by mapping the certificate thumbprint to a name in the trusted issuers dictionary.</summary>
      <returns>The issuer name if an entry for the certificate thumbprint of the token exists in the <see cref="P:System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry.ConfiguredTrustedIssuers" /> dictionary; otherwise, null.</returns>
      <param name="securityToken">The security token for which the issuer name is requested. Should be assignable as <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="securityToken" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry.LoadCustomConfiguration(System.Xml.XmlNodeList)">
      <summary>Loads the trusted issuers from configuration.</summary>
      <param name="customConfiguration">The XML that represents the map of trusted issuers that is specified in the configuration file.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="customConfiguration" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The configuration contains one or more elements that are not recognized.</exception>
    </member>
    <member name="T:System.IdentityModel.Tokens.EmptySecurityKeyIdentifierClause">
      <summary>Represents an empty key identifier clause. This class is used when an &lt;EncryptedData&gt; or a &lt;Signature&gt; element does not contain a &lt;KeyInfo&gt; element, which is used to describe the key required to decrypt the data or check the signature.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.EmptySecurityKeyIdentifierClause.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.EmptySecurityKeyIdentifierClause" /> class.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.EmptySecurityKeyIdentifierClause.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.EmptySecurityKeyIdentifierClause" /> class with the specified context.</summary>
      <param name="context">Used to provide a hint when there is a need resolve an empty clause to a particular key. In the case of SAML11 and SAML2 tokens that have signatures without a &lt;KeyInfo&gt; element, this property will contain the assertion that is currently being processed.</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.EmptySecurityKeyIdentifierClause.Context">
      <summary>Gets an object that is used to provide a hint when there is a need to resolve to a particular key.</summary>
      <returns>An object that provides a hint when there is a need to resolve to a particular key.</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials">
      <summary>Represents the encrypted key encrypting credentials. These are usually used as data encrypting credentials to encrypt things like tokens.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials.#ctor(System.IdentityModel.Tokens.EncryptingCredentials,System.Int32,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials" /> class based on the specified <see cref="T:System.IdentityModel.Tokens.EncryptingCredentials" /> object, key size, and encryption algorithm.</summary>
      <param name="wrappingCredentials">The key wrapping credentials used to encrypt the session key.</param>
      <param name="keySizeInBits">The key size of the wrapped session key.</param>
      <param name="encryptionAlgorithm">A URI that represents the encryption algorithm when the session key is used. This should be a symmetric key algorithm.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wrappingCredentials" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials" /> class based on the specified X.509 certificate. </summary>
      <param name="certificate">The certificate used to encrypt the key.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.String,System.Int32,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials" /> class based on the specified X.509 certificate, wrapping algorithm, key size, and encryption algorithm.</summary>
      <param name="certificate">The certificate used to encrypt the key.</param>
      <param name="keyWrappingAlgorithm">A URI that represents the key wrapping algorithm. This should be an asymmetric algorithm.</param>
      <param name="keySizeInBits">The key size of the wrapped session key.</param>
      <param name="encryptionAlgorithm">A URI that represents the encryption algorithm when the session key is used. This should be a symmetric key algorithm.</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials.WrappingCredentials">
      <summary>Gets the key wrapping credentials used to encrypt the session key; for example, <see cref="T:System.IdentityModel.Tokens.X509EncryptingCredentials" />.</summary>
      <returns>An <see cref="T:System.IdentityModel.Tokens.EncryptingCredentials" /> that represents the credentials used to encrypt the session key.</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause">
      <summary>Represents a key identifier clause that identifies an encrypted key.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.#ctor(System.Byte[],System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause" /> class using the specified key that is encrypted and the cryptographic algorithm used to encrypt the key.</summary>
      <param name="encryptedKey">An array of <see cref="T:System.Byte" /> that contains a key that is encrypted. Sets the value that is returned from the <see cref="M:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.GetEncryptedKey" /> method.</param>
      <param name="encryptionMethod">The cryptographic algorithm that is used to encrypt the key. Sets the value of the <see cref="P:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptionMethod" /> property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="encryptionMethod" /> is null.-or-<paramref name="encryptedKey" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="encryptedKey" /> is zero length.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.#ctor(System.Byte[],System.String,System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause" /> class using the specified key that is encrypted, the cryptographic algorithm used to encrypt the key, and a key identifier for the encrypting key.</summary>
      <param name="encryptedKey">An array of <see cref="T:System.Byte" /> that contains a key that is encrypted. Sets the value that is returned from the <see cref="M:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.GetEncryptedKey" /> method.</param>
      <param name="encryptionMethod">The cryptographic algorithm that is used to encrypt the key. Sets the value of the <see cref="P:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptionMethod" /> property.</param>
      <param name="encryptingKeyIdentifier">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> that represents the key identifier for the encrypting key that is specified in the <paramref name="encryptedKey" /> parameter. Sets the value of the <see cref="P:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptingKeyIdentifier" /> property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="encryptionMethod" /> is null.-or-<paramref name="encryptedKey" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="encryptedKey" /> is zero length.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.#ctor(System.Byte[],System.String,System.IdentityModel.Tokens.SecurityKeyIdentifier,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause" /> class using the specified key that is encrypted, the cryptographic algorithm used to encrypt the key, a key identifier for the encrypting key and a user-readable name.</summary>
      <param name="encryptedKey">An array of <see cref="T:System.Byte" /> that contains a key that is encrypted. Sets the value that is returned from the <see cref="M:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.GetEncryptedKey" /> method.</param>
      <param name="encryptionMethod">The cryptographic algorithm that is used to encrypt the key. Sets the value of the <see cref="P:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptionMethod" /> property.</param>
      <param name="encryptingKeyIdentifier">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> that represents the key identifier for the encrypting key specified in the <paramref name="encryptedKey" /> parameter. Sets the value of the <see cref="P:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptingKeyIdentifier" /> property.</param>
      <param name="carriedKeyName">A user-readable name that is associated with the key specified in the <paramref name="encryptedKey" /> parameter. Sets the value of the <see cref="P:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.CarriedKeyName" /> property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="encryptionMethod" /> is null.-or-<paramref name="encryptedKey" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="encryptedKey" /> is zero length.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.#ctor(System.Byte[],System.String,System.IdentityModel.Tokens.SecurityKeyIdentifier,System.String,System.Byte[],System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause" /> class using the specified key that is encrypted, the cryptographic algorithm used to encrypt the key, a key identifier for the key and a user-readable name.</summary>
      <param name="encryptedKey">An array of <see cref="T:System.Byte" /> that contains a key that is encrypted. Sets the value that is returned from the <see cref="M:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.GetEncryptedKey" /> method.</param>
      <param name="encryptionMethod">The cryptographic algorithm that is used to encrypt the key. Sets the value of the <see cref="P:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptionMethod" /> property.</param>
      <param name="encryptingKeyIdentifier">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> that represents the key identifier for the key specified in the <paramref name="encryptedKey" /> parameter. Sets the value of the <see cref="P:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptingKeyIdentifier" /> property.</param>
      <param name="carriedKeyName">A user-readable name that is associated with the key specified in the <paramref name="encryptedKey" /> parameter. Sets the value of the <see cref="P:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.CarriedKeyName" /> property.</param>
      <param name="derivationNonce">An array of <see cref="T:System.Byte" /> that contains the nonce that was used to create a derived key. Sets the value that is returned by the <see cref="M:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.GetDerivationNonce" /> method.</param>
      <param name="derivationLength">The size of the derived key. Sets the value of the <see cref="P:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.DerivationLength" /> property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="encryptionMethod" /> is null.-or-<paramref name="encryptedKey" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="encryptedKey" /> is zero length.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.CarriedKeyName">
      <summary>Gets a user-readable name that is associated with the encrypted key.</summary>
      <returns>A user-readable name that is associated with the encrypted key.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptingKeyIdentifier">
      <summary>Gets a key identifier for the encrypting key.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> that represents the key identifier for the encrypting key.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptionMethod">
      <summary>Gets the cryptographic algorithm that is used to encrypt the key.</summary>
      <returns>The cryptographic algorithm that is used to encrypt the key.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.GetEncryptedKey">
      <summary>Gets the encrypted key.</summary>
      <returns>An array of <see cref="T:System.Byte" /> that contains the encrypted key.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.Matches(System.Byte[],System.String,System.String)">
      <summary>Returns a value that indicates whether the key identifier for this instance is equivalent to the specified encrypted key, encryption method and user-readable name.</summary>
      <returns>true if the <paramref name="encryptedKey" />, <paramref name="encryptionMethod" /> and <paramref name="carriedKeyName" /> parameters have the same values returned by the <see cref="M:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.GetEncryptedKey" /> method and the <see cref="P:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptionMethod" /> and the <see cref="P:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.CarriedKeyName" /> properties, respectively; otherwise, false.</returns>
      <param name="encryptedKey">An array of <see cref="T:System.Byte" /> that contains a key that is encrypted.</param>
      <param name="encryptionMethod">The cryptographic algorithm that is used to encrypt the key. </param>
      <param name="carriedKeyName">A user-readable name that is associated with the encrypted key.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.Matches(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>Returns a value that indicates whether the key identifier for this instance is equivalent to the specified key identifier clause.</summary>
      <returns>true if <paramref name="keyIdentifierClause" /> is of type <see cref="T:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause" /> and has the same encrypted key, encryption method and user-readable name as the current instance; otherwise, false.</returns>
      <param name="keyIdentifierClause">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> to compare to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyIdentifierClause" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>The current object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.EncryptedSecurityToken">
      <summary>A wrapping-token that handles encryption for a token that does not natively support it.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedSecurityToken.#ctor(System.IdentityModel.Tokens.SecurityToken,System.IdentityModel.Tokens.EncryptingCredentials)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.EncryptedSecurityToken" /> class for the specified token by using the specified encrypting credentials.</summary>
      <param name="token">The token to encrypt.</param>
      <param name="encryptingCredentials">The credentials to use to encrypt the token.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedSecurityToken.CanCreateKeyIdentifierClause``1">
      <summary>Gets a value that indicates whether the token can create a key identifier clause of the specified type.</summary>
      <returns>true if the token can create a key identifier clause of the specified type; otherwise, false.</returns>
      <typeparam name="T">The type of the key identifier clause.</typeparam>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedSecurityToken.CreateKeyIdentifierClause``1">
      <summary>Creates a key identifier clause of the specified type for the token.</summary>
      <returns>A key identifier clause of the specified type.</returns>
      <typeparam name="T">The type of the key identifier clause to create.</typeparam>
    </member>
    <member name="P:System.IdentityModel.Tokens.EncryptedSecurityToken.EncryptingCredentials">
      <summary>Gets the credentials to use for encryption.</summary>
      <returns>The credentials to use for encryption.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.EncryptedSecurityToken.Id">
      <summary>Gets the unique identifier of the security token.</summary>
      <returns>The unique identifier of the security token.</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedSecurityToken.MatchesKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>Returns a value that indicates whether the key identifier for this instance can be resolved to the specified key identifier.</summary>
      <returns>true if the specified key identifier clause can be resolved by this instance; otherwise false.</returns>
      <param name="keyIdentifierClause">A key identifier clause to compare to this instance.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedSecurityToken.ResolveKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>Gets the key for the specified key identifier clause.</summary>
      <returns>The key.</returns>
      <param name="keyIdentifierClause">The key identifier clause to get the key for.</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.EncryptedSecurityToken.SecurityKeys">
      <summary>Gets the cryptographic keys associated with the security token.</summary>
      <returns>The set of keys associated with the security token.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.EncryptedSecurityToken.Token">
      <summary>Gets the encrypted token.</summary>
      <returns>The encrypted token.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.EncryptedSecurityToken.ValidFrom">
      <summary>Gets the first instant in time at which the security token is valid.</summary>
      <returns>The instant in time at which the security token is valid.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.EncryptedSecurityToken.ValidTo">
      <summary>Gets the last instant in time at which the security token is valid.</summary>
      <returns>The last instant in time at which the security token is valid.</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.EncryptedSecurityTokenHandler">
      <summary>A token handler for encrypted security tokens. Handles tokens of type <see cref="T:System.IdentityModel.Tokens.EncryptedSecurityToken" />.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.EncryptedSecurityTokenHandler" /> class.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)">
      <summary>Returns a value that indicates whether the current XML element is pointing to an &lt;xenc:EncryptedKey&gt; element that can be deserialized to a <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> by this instance.</summary>
      <returns>true if the XML reader is positioned at an &lt;xenc:EncryptedKey&gt; element as defined in section 3.5.1 of the XML Encryption Syntax and Processing specification (http://www.w3.org/TR/2002/REC-xmlenc-core-20021210); otherwise, false.</returns>
      <param name="reader">An XML reader positioned at the start element. The reader should not be advanced.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.CanReadToken(System.Xml.XmlReader)">
      <summary>Returns a value that indicates whether the reader is pointing to an &lt;xenc:EncryptedData&gt; element.</summary>
      <returns>true if the reader is positioned at an &lt;xenc:EncryptedData&gt; element; otherwise, false.</returns>
      <param name="reader">The reader positioned at a security token (&lt;xenc:EncryptedData&gt; element.)</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.CanWriteToken">
      <summary>Gets a value that indicates whether the handler provides serialization functionality for tokens.</summary>
      <returns>true if the handler can serialize tokens; otherwise, false. Always true.</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.GetTokenTypeIdentifiers">
      <summary>Gets the type identifier URIs for tokens handled by the current instance.</summary>
      <returns>By default, returns an array with a single null string because there is not a specific token type identifier that is associated with the <see cref="T:System.IdentityModel.Tokens.EncryptedSecurityToken" /> type.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.KeyInfoSerializer">
      <summary>Gets or sets the <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" /> that will be used to serialize and deserialize key identifiers from the &lt;xenc:EncryptedData&gt; element.</summary>
      <returns>The token serializer that will be used to read and write key the key identifiers.</returns>
      <exception cref="T:System.ArgumentNullException">An attempt to set the property to null occurs.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)">
      <summary>Reads an <see cref="T:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause" /> from an XML stream.</summary>
      <returns>A key identifier clause of type <see cref="T:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause" />.</returns>
      <param name="reader">An XML reader positioned at an &lt;xenc:EncryptedKey&gt; element as defined in 'http://www.w3.org/TR/2002/REC-xmlenc-core-20021210'; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="reader" /> is not positioned at an &lt;xenc:EncryptedKey&gt; element.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.ReadToken(System.Xml.XmlReader)">
      <summary>Reads an encrypted security token.</summary>
      <returns>A security token of type <see cref="T:System.IdentityModel.Tokens.EncryptedSecurityToken" />.</returns>
      <param name="reader">The reader from which to read the token.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">There is no configured service token resolver. (Either the <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" /> property or the <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.ServiceTokenResolver" /> property of the referenced token handler configuration is null. A service token resolver is required to obtain keys for decryption.-or-The <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerCollection" />Referenced through the <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection" /> property is unable to find a <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" /> that can read the decrypted XML and return a <see cref="T:System.IdentityModel.Tokens.SecurityToken" />.</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> is not found inside the XML pointed to by the reader.-or-The <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> is not a <see cref="T:System.IdentityModel.Tokens.SymmetricSecurityKey" />.</exception>
      <exception cref="T:System.IdentityModel.Tokens.EncryptedTokenDecryptionFailedException">The <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> found inside the XML cannot be resolved by the configured service token resolver to a <see cref="T:System.IdentityModel.Tokens.SecurityKey" />.</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.TokenType">
      <summary>Gets the type of the token handled by the current instance.</summary>
      <returns>The token type handled by the current instance. The default is typeof<see cref="T:System.IdentityModel.Tokens.EncryptedSecurityToken" />.</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
      <summary>Writes an encrypted security token using the XML writer.</summary>
      <param name="writer">The XML writer to which to write the encrypted token.</param>
      <param name="token">The encrypted security token, must be an instance of <see cref="T:System.IdentityModel.Tokens.EncryptedSecurityToken" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null.-or-<paramref name="token" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="token" /> is not assignable as <see cref="T:System.IdentityModel.Tokens.EncryptedSecurityToken" />.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" /> property is null. This property is required for obtaining keys for encryption.-or-The token handler collection returned by the <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection" /> property was unable to find a <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" /> that can write the <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> returned by the <see cref="P:System.IdentityModel.Tokens.EncryptedSecurityToken.Token" /> property.</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">The <see cref="P:System.IdentityModel.Tokens.EncryptingCredentials.SecurityKey" /> property is not assignable as <see cref="T:System.IdentityModel.Tokens.SymmetricSecurityKey" />.</exception>
    </member>
    <member name="T:System.IdentityModel.Tokens.EncryptedTokenDecryptionFailedException">
      <summary>The exception that is thrown when an error occurs while processing an encrypted security token.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedTokenDecryptionFailedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.EncryptedTokenDecryptionFailedException" /> class.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedTokenDecryptionFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.EncryptedTokenDecryptionFailedException" /> class using the specified XML serialization data and contextual data about the source and destination of the serialization stream.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that contains values that are used during serialization and deserialization.</param>
      <param name="context">A <see cref="T:System.IdentityModel.Tokens.SecurityTokenException" /> that contains data about the source and destination of the serialization stream.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedTokenDecryptionFailedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.EncryptedTokenDecryptionFailedException" /> class using the specified error message. </summary>
      <param name="message">A message that identifies the reason the exception occurred.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedTokenDecryptionFailedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.EncryptedTokenDecryptionFailedException" /> class using the specified error message and root cause of the error. </summary>
      <param name="message">A message that identifies the reason the exception occurred.</param>
      <param name="inner">A <see cref="T:System.Exception" /> that represents the root cause of the exception.</param>
    </member>
    <member name="T:System.IdentityModel.Tokens.EncryptingCredentials">
      <summary>Represents the cryptographic key and encrypting algorithm that are used to encrypt the proof key. </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptingCredentials.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.EncryptingCredentials" /> class.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptingCredentials.#ctor(System.IdentityModel.Tokens.SecurityKey,System.IdentityModel.Tokens.SecurityKeyIdentifier,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.EncryptingCredentials" /> class with the specified cryptographic key, key identifier, and encryption algorithm.</summary>
      <param name="key">A <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> that contains the cryptographic key that is used for encryption.</param>
      <param name="keyIdentifier">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> that specifies the identifier that represents the key that is used for encryption.</param>
      <param name="algorithm">A URI that represents the cryptographic algorithm that is used for encryption.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.-or-<paramref name="keyIdentifier" /> is null.-or-<paramref name="algorithm" /> is null.</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.EncryptingCredentials.Algorithm">
      <summary>Gets or sets the encryption algorithm.</summary>
      <returns>A URI that represents the cryptographic algorithm that is used to encrypt the proof key.</returns>
      <exception cref="T:System.ArgumentException">An attempt is made to set the property to null or to an empty string.</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.EncryptingCredentials.SecurityKey">
      <summary>Gets or sets the encryption key material.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> that contains the cryptographic key that is used to encrypt the proof key.</returns>
      <exception cref="T:System.ArgumentNullException">An attempt is made to set the property to null.</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.EncryptingCredentials.SecurityKeyIdentifier">
      <summary>Gets or sets the identifier that identifies the encrypting credential.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> that identifies the key that is used to encrypt the proof key.</returns>
      <exception cref="T:System.ArgumentNullException">An attempt is made to set the property to null.</exception>
    </member>
    <member name="T:System.IdentityModel.Tokens.GenericXmlSecurityKeyIdentifierClause">
      <summary>Represents a key identifier clause that is based on XML.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.GenericXmlSecurityKeyIdentifierClause.#ctor(System.Xml.XmlElement)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.GenericXmlSecurityKeyIdentifierClause" /> class by using the specified XML element.</summary>
      <param name="referenceXml">The XML element that represents the key identifier clause. Sets the value of the <see cref="P:System.IdentityModel.Tokens.GenericXmlSecurityKeyIdentifierClause.ReferenceXml" /> property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="referenceXML" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.GenericXmlSecurityKeyIdentifierClause.#ctor(System.Xml.XmlElement,System.Byte[],System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.GenericXmlSecurityKeyIdentifierClause" /> class by using the specified XML element, nonce, and derivation length.</summary>
      <param name="referenceXml">The XML element that represents the key identifier clause. Sets the value of the <see cref="P:System.IdentityModel.Tokens.GenericXmlSecurityKeyIdentifierClause.ReferenceXml" /> property.</param>
      <param name="derivationNonce">An array of <see cref="T:System.Byte" /> that contains the nonce that was used to create a derived key. Sets the value that is returned by the <see cref="M:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.GetDerivationNonce" /> method.</param>
      <param name="derivationLength">The size of the derived key. Sets the value of the <see cref="P:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.DerivationLength" /> property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="referenceXML" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.GenericXmlSecurityKeyIdentifierClause.Matches(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>Returns a value that indicates whether specified key identifier clause matches the current instance.</summary>
      <returns>true if the specified key identifier clause matches the current instance; otherwise, false.</returns>
      <param name="keyIdentifierClause">The key identifier clause to which to compare current instance.</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.GenericXmlSecurityKeyIdentifierClause.ReferenceXml">
      <summary>Gets the XML element that represents the key identifier clause.</summary>
      <returns>The XML element that represents the key identifier clause.</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.GenericXmlSecurityToken">
      <summary>Represents a security token that is based upon XML.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.GenericXmlSecurityToken.#ctor(System.Xml.XmlElement,System.IdentityModel.Tokens.SecurityToken,System.DateTime,System.DateTime,System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Policy.IAuthorizationPolicy})">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.GenericXmlSecurityToken" /> class.  </summary>
      <param name="tokenXml">An <see cref="T:System.Xml.XmlElement" /> that represents the XML that is associated with the security token. Sets the <see cref="P:System.IdentityModel.Tokens.GenericXmlSecurityToken.TokenXml" /> property.</param>
      <param name="proofToken">A <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> that represents the proof token for the security token. Sets the <see cref="P:System.IdentityModel.Tokens.GenericXmlSecurityToken.ProofToken" /> property.</param>
      <param name="effectiveTime">A <see cref="T:System.DateTime" /> that represents the first instant in time at which this security token is valid. Sets the <see cref="P:System.IdentityModel.Tokens.GenericXmlSecurityToken.ValidFrom" /> property.</param>
      <param name="expirationTime">A <see cref="T:System.DateTime" /> that represents the last instant in time at which this security token is valid. Sets the <see cref="P:System.IdentityModel.Tokens.GenericXmlSecurityToken.ValidFrom" /> property.</param>
      <param name="internalTokenReference">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> that represents a reference to this security token when it is included in a SOAP message in which it is referenced. Sets the <see cref="P:System.IdentityModel.Tokens.GenericXmlSecurityToken.InternalTokenReference" /> property.</param>
      <param name="externalTokenReference">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> that represents a reference to this security token when it is not included in a SOAP message in which it is referenced. Sets the <see cref="P:System.IdentityModel.Tokens.GenericXmlSecurityToken.ValidFrom" /> property.</param>
      <param name="authorizationPolicies">A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of type <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" /> that contains the set authorization policies for this security token.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tokenXml" /> is null.-or-<paramref name="proofToken" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.GenericXmlSecurityToken.AuthorizationPolicies">
      <summary>Gets the collection of authorization policies for this security token.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of type <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" /> that contains the set authorization policies for this security token.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.GenericXmlSecurityToken.CanCreateKeyIdentifierClause``1">
      <summary>Gets a value that indicates whether this security token is capable of creating the specified key identifier clause.</summary>
      <returns>true when <paramref name="T" /> is not null and the same type as either the <see cref="P:System.IdentityModel.Tokens.GenericXmlSecurityToken.InternalTokenReference" /> or <see cref="P:System.IdentityModel.Tokens.GenericXmlSecurityToken.ExternalTokenReference" /> property values; otherwise, false.</returns>
      <typeparam name="T">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> that specifies the key identifier to create.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.GenericXmlSecurityToken.CreateKeyIdentifierClause``1">
      <summary>Creates the specified key identifier clause.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SamlAssertionKeyIdentifierClause" /> that is a key identifier clause for a <see cref="T:System.IdentityModel.Tokens.GenericXmlSecurityToken" /> security token.</returns>
      <typeparam name="T">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> that specifies the key identifier to create.</typeparam>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">
        <paramref name="T" /> is not null and not the same type as one of the <see cref="P:System.IdentityModel.Tokens.GenericXmlSecurityToken.InternalTokenReference" /> or <see cref="P:System.IdentityModel.Tokens.GenericXmlSecurityToken.ExternalTokenReference" /> property values.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.GenericXmlSecurityToken.ExternalTokenReference">
      <summary>Gets a security key identifier clause that references this security token when this security token is not included in the SOAP message in which it is referenced.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> that represents a reference to this security token when it is not included in a SOAP message in which it is referenced.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.GenericXmlSecurityToken.Id">
      <summary>Gets a unique identifier of the security token.</summary>
      <returns>The unique identifier of the security token.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.GenericXmlSecurityToken.InternalTokenReference">
      <summary>Gets a security key identifier clause that references this security token when this security token is included in the SOAP message in which it is referenced.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> that represents a reference to this security token when it is included in a SOAP message in which it is referenced.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.GenericXmlSecurityToken.MatchesKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>Returns a value that indicates whether the key identifier for this instance is equal to the specified key identifier.</summary>
      <returns>true when <paramref name="keyIdentifierClause" /> is not null and matches either the <see cref="P:System.IdentityModel.Tokens.GenericXmlSecurityToken.InternalTokenReference" /> or <see cref="P:System.IdentityModel.Tokens.GenericXmlSecurityToken.ExternalTokenReference" /> property values; otherwise, false.</returns>
      <param name="keyIdentifierClause">An <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> to compare to this instance.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.GenericXmlSecurityToken.ProofToken">
      <summary>Gets the proof token for the security token.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> that represents the proof token for the security token.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.GenericXmlSecurityToken.SecurityKeys">
      <summary>Gets the cryptographic keys associated with the proof token.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of type <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> that contains the set of keys associated with the proof token.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.GenericXmlSecurityToken.TokenXml">
      <summary>Gets the XML that is associated with the security token. </summary>
      <returns>An <see cref="T:System.Xml.XmlElement" /> that represents the XML that is associated with the security token.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.GenericXmlSecurityToken.ToString">
      <summary>Returns the current object.</summary>
      <returns>The current object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.GenericXmlSecurityToken.ValidFrom">
      <summary>Gets the first instant in time at which this security token is valid.</summary>
      <returns>A <see cref="T:System.DateTime" /> that represents the first instant in time at which this security token is valid.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.GenericXmlSecurityToken.ValidTo">
      <summary>Gets the last instant in time at which this security token is valid.</summary>
      <returns>A <see cref="T:System.DateTime" /> that represents the last instant in time at which this security token is valid.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey">
      <summary>Represents keys that are generated using symmetric algorithms and are only stored in the local computer's random access memory.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor(System.Byte[])">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey" /> class using the specified symmetric key. </summary>
      <param name="symmetricKey">An array of <see cref="T:System.Byte" /> that contains the symmetric key.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="symmetricKey" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="symmetricKey" /> is zero length.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor(System.Byte[],System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey" /> class using the specified symmetric key and a value that indicates whether the binary data must be cloned. </summary>
      <param name="symmetricKey">An array of <see cref="T:System.Byte" /> that contains the symmetric key.</param>
      <param name="cloneBuffer">true to clone the array passed into the <paramref name="symmetricKey" /> parameter; otherwise, false. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="symmetricKey" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="symmetricKey" /> is zero length.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.DecryptKey(System.String,System.Byte[])">
      <summary>Decrypts the specified encrypted key.</summary>
      <returns>An array of <see cref="T:System.Byte" /> that contains the decrypted key.</returns>
      <param name="algorithm">The cryptographic algorithm that was used to encrypt the key.</param>
      <param name="keyData">An array of <see cref="T:System.Byte" /> that contains the encrypted key.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="algorithm" /> is not supported. The supported algorithms are <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap" />, and <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.EncryptKey(System.String,System.Byte[])">
      <summary>Encrypts the specified key.</summary>
      <returns>An array of <see cref="T:System.Byte" /> that contains the encrypted key.</returns>
      <param name="algorithm">The cryptographic algorithm to encrypt the key with.</param>
      <param name="keyData">An array of <see cref="T:System.Byte" /> that contains the key.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="algorithm" /> is not supported. The supported algorithms are <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap" />, or <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GenerateDerivedKey(System.String,System.Byte[],System.Byte[],System.Int32,System.Int32)">
      <summary>Generates a derived key using the specified cryptographic algorithm and parameters for the current key.</summary>
      <returns>An array of <see cref="T:System.Byte" /> that contains the derived key.</returns>
      <param name="algorithm">A URI that represents the cryptographic algorithm to use to generate the derived key.</param>
      <param name="label">An array of <see cref="T:System.Byte" /> that contains the label parameter for the cryptographic algorithm.</param>
      <param name="nonce">An array of <see cref="T:System.Byte" /> that contains the nonce that is used to create a derived key.</param>
      <param name="derivedKeyLength">The size of the derived key.</param>
      <param name="offset">The position at which the derived key is located in the byte array that is returned from this method.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="algorithm" /> is not supported. The supported algorithms is <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetDecryptionTransform(System.String,System.Byte[])">
      <summary>Gets a transform that decrypts cipher text using the specified cryptographic algorithm.</summary>
      <returns>An <see cref="T:System.Security.Cryptography.ICryptoTransform" /> that represents the decryption transform.</returns>
      <param name="algorithm">A cryptographic algorithm that decrypts cipher text, such as encrypted XML.</param>
      <param name="iv">An array of <see cref="T:System.Byte" /> that contains the initialization vector (IV) for the specified algorithm.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="algorithm" /> is not supported. The supported algorithms are <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption" />, and <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetEncryptionTransform(System.String,System.Byte[])">
      <summary>Gets a transform that encrypts XML using the specified cryptographic algorithm.</summary>
      <returns>An <see cref="T:System.Security.Cryptography.ICryptoTransform" /> that represents the encryption transform.</returns>
      <param name="algorithm">A cryptographic algorithm that encrypts XML.</param>
      <param name="iv">An array of <see cref="T:System.Byte" /> that contains the initialization vector (IV) for the specified algorithm.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="algorithm" /> is not supported. The supported algorithms are <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption" />, and <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetIVSize(System.String)">
      <summary>Gets the size, in bits, of the initialization vector (IV) that is required for the specified cryptographic algorithm.</summary>
      <returns>The size, in bits, of the initialization vector (IV) that is required for the cryptographic algorithm specified in the <paramref name="algorithm" /> parameter.</returns>
      <param name="algorithm">The cryptographic algorithm to get the size of the initialization vector (IV).</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="algorithm" /> is not supported. The supported algorithms are <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption" />, and <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm(System.String)">
      <summary>Gets an instance of the specified keyed hash algorithm.</summary>
      <returns>A <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" /> that represents the keyed hash algorithm.</returns>
      <param name="algorithm">The keyed hash algorithm to get an instance of.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="algorithm" /> is not supported. The supported algorithms is <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.HmacSha1Signature" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricAlgorithm(System.String)">
      <summary>Gets an instance of the specified symmetric algorithm.</summary>
      <returns>A <see cref="T:System.Security.Cryptography.SymmetricAlgorithm" /> that represents the symmetric algorithm.</returns>
      <param name="algorithm">The symmetric algorithm to get an instance of.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="algorithm" /> is not supported. The supported algorithms are <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption" />,  <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap" />, and <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap" /></exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricKey">
      <summary>Gets the bytes that represent the symmetric key.</summary>
      <returns>An array of <see cref="T:System.Byte" /> that contains the symmetric key.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm(System.String)">
      <summary>Gets a value that indicates whether the specified algorithm uses asymmetric keys.</summary>
      <returns>true when the specified algorithm uses asymmetric keys; otherwise, false.</returns>
      <param name="algorithm">The cryptographic algorithm.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSupportedAlgorithm(System.String)">
      <summary>Gets a value that indicates whether the specified algorithm is supported by this class. </summary>
      <returns>true when the specified algorithm is supported by this class; otherwise, false.</returns>
      <param name="algorithm">The cryptographic algorithm.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSymmetricAlgorithm(System.String)">
      <summary>Gets a value that indicates whether the specified algorithm uses symmetric keys.</summary>
      <returns>true when the specified algorithm uses symmetric keys; otherwise, false.</returns>
      <param name="algorithm">The cryptographic algorithm.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.KeySize">
      <summary>Gets the size, in bits, of the key.</summary>
      <returns>The size, in bits, of the key.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.IssuerNameRegistry">
      <summary>The abstract base class for an issuer name registry. An issuer name registry is used to associate a mnemonic name to the cryptographic material that is needed to verify the signatures of tokens produced by the corresponding issuer. The issuer name registry maintains a list of issuers that are trusted by a relying party (RP) application.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.IssuerNameRegistry.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.IssuerNameRegistry" /> class.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName(System.IdentityModel.Tokens.SecurityToken)">
      <summary>When overridden in a derived class, returns the name of the issuer of the specified security token.</summary>
      <returns>The issuer name.</returns>
      <param name="securityToken">The security token for which to return the issuer name.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName(System.IdentityModel.Tokens.SecurityToken,System.String)">
      <summary>When overridden in a derived class, returns the name of the issuer of the specified security token. The specified issuer name may be considered in determining the issuer name to return.</summary>
      <returns>The issuer name.</returns>
      <param name="securityToken">The security token for which to return the issuer name.</param>
      <param name="requestedIssuerName">An issuer name to consider in the request.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.IssuerNameRegistry.GetWindowsIssuerName">
      <summary>Returns the default issuer name to be used for Windows claims.</summary>
      <returns>The default issuer name for Windows claims.</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.IssuerNameRegistry.LoadCustomConfiguration(System.Xml.XmlNodeList)">
      <summary>When overridden in a derived class, loads custom configuration from XML.</summary>
      <param name="nodelist">The configuration XML elements. Each node in the list is of type <see cref="T:System.Xml.XmlElement" />.</param>
    </member>
    <member name="T:System.IdentityModel.Tokens.IssuerTokenResolver">
      <summary>Resolves issuer tokens received from service partners.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.IssuerTokenResolver.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.IssuerTokenResolver" /> class.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.IssuerTokenResolver.#ctor(System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.IssuerTokenResolver" /> class by using the specified token resolver.</summary>
      <param name="wrappedTokenResolver">The security token resolver to be wrapped by this instance. Sets the <see cref="P:System.IdentityModel.Tokens.IssuerTokenResolver.WrappedTokenResolver" /> property in the new instance.</param>
    </member>
    <member name="F:System.IdentityModel.Tokens.IssuerTokenResolver.DefaultStoreLocation">
      <summary>The default store location for resolving X.509 certificates.</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.IssuerTokenResolver.DefaultStoreName">
      <summary>The default store for resolving X.509 certificates.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.IssuerTokenResolver.TryResolveSecurityKeyCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityKey@)">
      <summary>Attempts to retrieve the key that is referenced in the specified key identifier clause. (Override of the base class method.)</summary>
      <returns>true when a key can be retrieved for the specified key identifier clause; otherwise, false. </returns>
      <param name="keyIdentifierClause">A key identifier clause to retrieve the key for.</param>
      <param name="key">When this method returns, contains the key that is referenced in the specified key identifier clause. This parameter is passed uninitialized. </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.IssuerTokenResolver.TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifier,System.IdentityModel.Tokens.SecurityToken@)">
      <summary>Attempts to retrieve the security token that matches at least one of the key identifier clauses contained within the specified key identifier. (Override of the base class method.)</summary>
      <returns>true if a security token can be retrieved for the specified key identifier; otherwise, false.</returns>
      <param name="keyIdentifier">The key identifier to create a security token for.</param>
      <param name="token">When this method returns, contains a <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> that represents the specified key identifier. This parameter is passed uninitialized. </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.IssuerTokenResolver.TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityToken@)">
      <summary>When overridden in a derived class, attempts to resolve the security token that matches the specified key identifier clause. (Override of the base class method.)</summary>
      <returns>true if a security token can be retrieved for the specified key identifier clause; otherwise, false.</returns>
      <param name="keyIdentifierClause">The key identifier clause to create a security token for.</param>
      <param name="token">When this method returns, contains a <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> that represents the specified key identifier clause. This parameter is passed uninitialized. </param>
    </member>
    <member name="P:System.IdentityModel.Tokens.IssuerTokenResolver.WrappedTokenResolver">
      <summary>Gets the security token resolver wrapped by this instance.</summary>
      <returns>The wrapped token resolver.</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.KerberosReceiverSecurityToken">
      <summary>Represents a security token that is based upon a Kerberos ticket that is received in a SOAP message.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.KerberosReceiverSecurityToken.#ctor(System.Byte[])">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.KerberosReceiverSecurityToken" /> class using the specified Kerberos ticket. </summary>
      <param name="request">An array of <see cref="T:System.Byte" /> that contains a Kerberos ticket.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.KerberosReceiverSecurityToken.#ctor(System.Byte[],System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.KerberosReceiverSecurityToken" /> class using the specified Kerberos ticket and unique identifier.</summary>
      <param name="request">An array of <see cref="T:System.Byte" /> that contains the Kerberos ticket.</param>
      <param name="id">A unique identifier of the security token. Sets the value of the <see cref="P:System.IdentityModel.Tokens.KerberosRequestorSecurityToken.Id" /> property.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.KerberosReceiverSecurityToken.#ctor(System.Byte[],System.String,System.String)">
      <summary>Creates a new instance of <see cref="T:System.IdentityModel.Tokens.KerberosReceiverSecurityToken" />.</summary>
      <param name="request">An array of bytes that contains the Kerberos ticket.</param>
      <param name="id">A unique identifier for the security token.</param>
      <param name="valueTypeUri">The URI that describes the value type.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.KerberosReceiverSecurityToken.CanCreateKeyIdentifierClause``1">
      <summary>Gets a value that indicates whether this security token is capable of creating the specified key identifier.</summary>
      <returns>true when <paramref name="T" /> is of type <see cref="T:System.IdentityModel.Tokens.KerberosTicketHashKeyIdentifierClause" />; otherwise, false.</returns>
      <typeparam name="T">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> that specifies the type of key identifier to create.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.KerberosReceiverSecurityToken.CreateKeyIdentifierClause``1">
      <summary>Creates the specified key identifier clause.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> that is a key identifier clause for the security token.</returns>
      <typeparam name="T">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> that specifies the type of key identifier to create.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.KerberosReceiverSecurityToken.GetRequest">
      <summary>Gets the Kerberos ticket.</summary>
      <returns>An array of <see cref="T:System.Byte" /> that contains the Kerberos ticket.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.KerberosReceiverSecurityToken.MatchesKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>Returns a value that indicates whether the key identifier for this instance matches the specified key identifier.</summary>
      <returns>true if <paramref name="keyIdentifierClause" /> is of type <see cref="T:System.IdentityModel.Tokens.KerberosTicketHashKeyIdentifierClause" /> and the Kerberos ticket match; otherwise, false.</returns>
      <param name="keyIdentifierClause">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> to compare to this instance.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.KerberosReceiverSecurityToken.SecurityKey">
      <summary>Gets the symmetric session key for the Kerberos ticket that is associated with this security token.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SymmetricSecurityKey" /> that contains the symmetric session key for the Kerberos ticket that is associated with this security token.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.KerberosReceiverSecurityToken.SecurityKeys">
      <summary>Gets the cryptographic keys associated with the security token.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of type <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> that contains the set of keys associated with the security token.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.KerberosReceiverSecurityToken.ValidFrom">
      <summary>Gets the first instant in time at which this security token is valid.</summary>
      <returns>A <see cref="T:System.DateTime" /> that represents the instant in time at which this security token is first valid.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.KerberosReceiverSecurityToken.ValidTo">
      <summary>Gets the last instant in time at which this security token is valid.</summary>
      <returns>A <see cref="T:System.DateTime" /> that represents the last instant in time at which this security token is valid.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.KerberosReceiverSecurityToken.ValueTypeUri">
      <summary>Gets the URI that describes the value type.</summary>
      <returns>Returns <see cref="T:System.String" />.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.KerberosReceiverSecurityToken.WindowsIdentity">
      <summary>Gets the Windows user associated with this security token.</summary>
      <returns>A <see cref="T:System.Security.Principal.WindowsIdentity" /> that represents a Windows user.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken">
      <summary>Represents a security token that is based upon a Kerberos ticket that is sent in an SOAP request.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.KerberosRequestorSecurityToken.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> class using a service that is associated with the specified service principal name. </summary>
      <param name="servicePrincipalName">The service principal name for the <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> security token. Sets the <see cref="P:System.IdentityModel.Tokens.KerberosRequestorSecurityToken.ServicePrincipalName" /> property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="servicePrincipalName" /> is null.</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">A Kerberos ticket cannot be obtained for the current user.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.KerberosRequestorSecurityToken.#ctor(System.String,System.Security.Principal.TokenImpersonationLevel,System.Net.NetworkCredential,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> class.  </summary>
      <param name="servicePrincipalName">The service principal name for the <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> security token. Sets the <see cref="P:System.IdentityModel.Tokens.KerberosRequestorSecurityToken.ServicePrincipalName" /> property.</param>
      <param name="tokenImpersonationLevel">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> values that specifies how the client allows the <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> security token to be impersonated.</param>
      <param name="networkCredential">A <see cref="T:System.Net.NetworkCredential" /> that specifies the user to get a <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> security token for. </param>
      <param name="id">A unique identifier of the security token. Sets the value of the <see cref="P:System.IdentityModel.Tokens.KerberosRequestorSecurityToken.Id" /> property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="servicePrincipalName" /> is null.-or-<paramref name="id" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="networkCredential" /> is not null, not equal to <see cref="P:System.Net.CredentialCache.DefaultNetworkCredentials" /> and the <see cref="P:System.Net.NetworkCredential.UserName" /> property is empty or null.</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">A Kerberos ticket cannot be obtained for the specified user.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="tokenImpersonationLevel" /> is not Impersonation or Identity.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.KerberosRequestorSecurityToken.CanCreateKeyIdentifierClause``1">
      <summary>Gets a value that indicates whether this security token is capable of creating the specified key identifier.</summary>
      <returns>true when <paramref name="T" /> is of type <see cref="T:System.IdentityModel.Tokens.KerberosTicketHashKeyIdentifierClause" />; otherwise, false.</returns>
      <typeparam name="T">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> that specifies the key identifier to create.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.KerberosRequestorSecurityToken.CreateKeyIdentifierClause``1">
      <summary>Creates the specified key identifier clause.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> that is a key identifier clause for the security token.</returns>
      <typeparam name="T">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> that specifies the key identifier to create.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.KerberosRequestorSecurityToken.GetRequest">
      <summary>Gets the Kerberos ticket request.</summary>
      <returns>An array of <see cref="T:System.Byte" /> that contains the result Kerberos ticket request.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.KerberosRequestorSecurityToken.Id">
      <summary>Gets a unique identifier of the security token.</summary>
      <returns>A unique identifier of the security token.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.KerberosRequestorSecurityToken.MatchesKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>Returns a value that indicates whether the key identifier for this instance matches the specified key identifier.</summary>
      <returns>true if <paramref name="keyIdentifierClause" /> is of type <see cref="T:System.IdentityModel.Tokens.KerberosTicketHashKeyIdentifierClause" /> and the results of the Kerberos ticket request match; otherwise, false.</returns>
      <param name="keyIdentifierClause">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> to compare to this instance.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.KerberosRequestorSecurityToken.SecurityKey">
      <summary>Gets the symmetric session key for the Kerberos ticket that is associated with this security token.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SymmetricSecurityKey" /> that contains the symmetric session key for the Kerberos ticket that is associated with this security token.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.KerberosRequestorSecurityToken.SecurityKeys">
      <summary>Gets the cryptographic keys associated with the security token.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of type <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> that contains the set of keys associated with the security token.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.KerberosRequestorSecurityToken.ServicePrincipalName">
      <summary>Gets the service principal name for the <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> security token.</summary>
      <returns>The service principal name for the <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> security token.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.KerberosRequestorSecurityToken.ValidFrom">
      <summary>Gets the first instant in time at which this security token is valid.</summary>
      <returns>A <see cref="T:System.DateTime" /> that represents the instant in time at which this security token is first valid.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.KerberosRequestorSecurityToken.ValidTo">
      <summary>Gets the last instant in time at which this security token is valid.</summary>
      <returns>A <see cref="T:System.DateTime" /> that represents the last instant in time at which this security token is valid.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.KerberosSecurityTokenHandler">
      <summary>Represents a security token handler that processes Kerberos tokens. Handles tokens of type <see cref="T:System.IdentityModel.Tokens.KerberosReceiverSecurityToken" />.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.KerberosSecurityTokenHandler.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.KerberosSecurityTokenHandler" /> class.</summary>
    </member>
    <member name="P:System.IdentityModel.Tokens.KerberosSecurityTokenHandler.CanValidateToken">
      <summary>Gets a value that indicates whether the current instance can validate security tokens.</summary>
      <returns>true if the handler can validate tokens; otherwise, false. The default is true.</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.KerberosSecurityTokenHandler.GetTokenTypeIdentifiers">
      <summary>Gets the Kerberos Security token type defined in WS-Security Kerberos Security Token profile.</summary>
      <returns>The Kerberos Security token type URI. By default, the value of the <see cref="P:System.IdentityModel.Tokens.SecurityTokenTypes.Kerberos" /> property.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.KerberosSecurityTokenHandler.TokenType">
      <summary>Gets the type of the token handled by the current instance.</summary>
      <returns>The type of the token handled by the current instance. By default this is the type of the <see cref="T:System.IdentityModel.Tokens.KerberosReceiverSecurityToken" /> class.</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.KerberosSecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
      <summary>Validates the specified Kerberos security token.</summary>
      <returns>The identities that are contained in the token.</returns>
      <param name="token">The security token to be validated. This must be an instance of the <see cref="T:System.IdentityModel.Tokens.KerberosReceiverSecurityToken" /> class.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The specified token is not assignable as a <see cref="T:System.IdentityModel.Tokens.KerberosReceiverSecurityToken" />.</exception>
    </member>
    <member name="T:System.IdentityModel.Tokens.KerberosTicketHashKeyIdentifierClause">
      <summary>Represents a key identifier clause that identifies a <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> or <see cref="T:System.IdentityModel.Tokens.KerberosReceiverSecurityToken" /> security token.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.KerberosTicketHashKeyIdentifierClause.#ctor(System.Byte[])">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.KerberosTicketHashKeyIdentifierClause" /> class using the specified SHA-1 hash of a Kerberos service ticket. </summary>
      <param name="ticketHash">An array of <see cref="T:System.Byte" /> that contains the SHA-1 hash of a Kerberos service ticket.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ticketHash" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.KerberosTicketHashKeyIdentifierClause.#ctor(System.Byte[],System.Byte[],System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.KerberosTicketHashKeyIdentifierClause" /> class using the specified Kerberos ticket, nonce, and key length.</summary>
      <param name="ticketHash">An array of <see cref="T:System.Byte" /> that contains the SHA-1 hash of a Kerberos service ticket.</param>
      <param name="derivationNonce">An array of <see cref="T:System.Byte" /> that contains the nonce that was used to create a derived key.</param>
      <param name="derivationLength">The size of the derived key.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ticketHash" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ticketHash" /> is zero length.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.KerberosTicketHashKeyIdentifierClause.GetKerberosTicketHash">
      <summary>Gets the SHA-1 hash of a Kerberos service ticket.</summary>
      <returns>An array of <see cref="T:System.Byte" /> that contains the SHA-1 hash of a Kerberos service ticket.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.KerberosTicketHashKeyIdentifierClause.ToString">
      <summary>Returns the current object.</summary>
      <returns>A <see cref="T:System.String" /> that represents the current object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause">
      <summary>Represents a key identifier clause that identifies a security tokens specified in the security header of the SOAP message.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause" /> class using the specified identifier and array of types. </summary>
      <param name="localId">The value of the wsu:Id attribute for an XML element within the current SOAP message. Sets the value of the <see cref="P:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause.LocalId" /> property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="localId" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="localId" /> is empty.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause.#ctor(System.String,System.Byte[],System.Int32,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause" /> class using the specified identifier, nonce, derived key length an owner security token type.</summary>
      <param name="localId">The value of the wsu:Id attribute for an XML element within the current SOAP message. Sets the value of the <see cref="P:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause.LocalId" /> property.</param>
      <param name="derivationNonce">An array of <see cref="T:System.Byte" /> that contains the nonce that was used to create a derived key. Sets the value that is returned by the <see cref="M:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.GetDerivationNonce" /> method.</param>
      <param name="derivationLength">The size of the derived key. Sets the value of the <see cref="P:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.DerivationLength" /> property.</param>
      <param name="ownerType">A <see cref="T:System.Type" /> that is the type of security token that is referred to by the <paramref name="localId" /> parameter. Sets the value of the <see cref="P:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause.OwnerType" /> property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="localId" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="localId" /> is empty.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause.#ctor(System.String,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause" /> class using the specified identifier an owner security token type. </summary>
      <param name="localId">The value of the wsu:Id attribute for an XML element within the current SOAP message. Sets the value of the <see cref="P:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause.LocalId" /> property.</param>
      <param name="ownerType">A <see cref="T:System.Type" /> that is the type of security token that is referred to by the <paramref name="localId" /> parameter. Sets the value of the <see cref="P:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause.OwnerType" /> property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="localId" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="localId" /> is empty.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause.LocalId">
      <summary>Gets the value of the wsu:Id attribute for an XML element within the current SOAP message.</summary>
      <returns>The value of the wsu:Id attribute for an XML element within the current SOAP message.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause.Matches(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>Returns a value that indicates whether the key identifier for this instance is equivalent to the specified key identifier clause.</summary>
      <returns>true if <paramref name="keyIdentifierClause" /> is of type <see cref="T:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause" /> and the values of the <see cref="P:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause.LocalId" /> and <see cref="P:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause.OwnerType" /> properties match the current instance; otherwise, false. See the remarks for more details.</returns>
      <param name="keyIdentifierClause">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> to compare to.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause.Matches(System.String,System.Type)">
      <summary>Returns a value that indicates whether the key identifier for this instance is equivalent to the specified reference and type.</summary>
      <returns>true if the <paramref name="localId" /> and <paramref name="ownerType" /> parameters match the values of the <see cref="P:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause.LocalId" /> and <see cref="P:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause.OwnerType" /> properties; otherwise, false. See the remarks for more details.</returns>
      <param name="localId">The value of the wsu:Id attribute for an XML element within the current SOAP message. </param>
      <param name="ownerType">A <see cref="T:System.Type" /> that is the type of security token that is referred to by the <paramref name="localId" /> parameter. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause.OwnerType">
      <summary>Gets the type of security token that is referred to by the <see cref="P:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause.LocalId" /> property.</summary>
      <returns>A <see cref="T:System.Type" /> that contains the type of security token that is referred to by the <see cref="P:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause.LocalId" /> property.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A <see cref="T:System.String" /> that represents the current object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.ProofDescriptor">
      <summary>The base class for the <see cref="T:System.IdentityModel.Tokens.SymmetricProofDescriptor" /> and <see cref="T:System.IdentityModel.Tokens.AsymmetricProofDescriptor" /> classes.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.ProofDescriptor.#ctor">
      <summary>Called from constructors in derived classes to initialize the <see cref="T:System.IdentityModel.Tokens.ProofDescriptor" /> class.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.ProofDescriptor.ApplyTo(System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse)">
      <summary>Sets the appropriate properties inside the RSTR according to the properties of the current proof descriptor instance.</summary>
      <param name="response">The RSTR object to be modified by this proof descriptor.</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.ProofDescriptor.KeyIdentifier">
      <summary>When implemented in a derived class, gets the key identifier that can be used inside issued tokens to define the key.</summary>
      <returns>The key identifier.</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.RsaKeyIdentifierClause">
      <summary>Represents a key identifier clause that identifies a <see cref="T:System.IdentityModel.Tokens.RsaSecurityToken" /> security token.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaKeyIdentifierClause.#ctor(System.Security.Cryptography.RSA)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.RsaKeyIdentifierClause" /> class using the specified RSA algorithm. </summary>
      <param name="rsa">An <see cref="T:System.Security.Cryptography.RSA" /> that represents an RSA algorithm. Sets the value of the <see cref="P:System.IdentityModel.Tokens.RsaKeyIdentifierClause.Rsa" /> property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rsa" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.RsaKeyIdentifierClause.CanCreateKey">
      <summary>Gets a value that indicates whether a key can be created from the key identifier clause.</summary>
      <returns>true in all cases.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaKeyIdentifierClause.CreateKey">
      <summary>Creates a key using the RSA algorithm.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.RsaSecurityKey" /> that is a key created using the RSA algorithm specified in the constructor.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaKeyIdentifierClause.GetExponent">
      <summary>Gets the Exponent parameter for the RSA algorithm.</summary>
      <returns>An array of <see cref="T:System.Byte" /> that contains the Exponent parameter for the RSA algorithm.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaKeyIdentifierClause.GetModulus">
      <summary>Gets the Modulus parameter for the RSA algorithm.</summary>
      <returns>An array of <see cref="T:System.Byte" /> that contains the Modulus parameter for the RSA algorithm.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaKeyIdentifierClause.Matches(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>Returns a value that indicates whether the key identifier for this instance is equivalent to the specified key identifier clause.</summary>
      <returns>true if <paramref name="keyIdentifierClause" /> is of type <see cref="T:System.IdentityModel.Tokens.RsaKeyIdentifierClause" /> and the arrays returned by the <see cref="M:System.IdentityModel.Tokens.RsaKeyIdentifierClause.GetModulus" /> and <see cref="M:System.IdentityModel.Tokens.RsaKeyIdentifierClause.GetExponent" /> methods for the <paramref name="keyIdentifierClause" /> parameter are identical to the current instance; otherwise, false.</returns>
      <param name="keyIdentifierClause">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> to compare to.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaKeyIdentifierClause.Matches(System.Security.Cryptography.RSA)">
      <summary>Returns a value that indicates whether the key identifier for this instance matches the specified RSA algorithm.</summary>
      <returns>true if the <see cref="F:System.Security.Cryptography.RSAParameters.Exponent" /> and <see cref="F:System.Security.Cryptography.RSAParameters.Modulus" /> fields of the <paramref name="rsa" /> parameter match the values returned by the <see cref="M:System.IdentityModel.Tokens.RsaKeyIdentifierClause.GetModulus" /> and <see cref="M:System.IdentityModel.Tokens.RsaKeyIdentifierClause.GetExponent" /> methods for the current instance; otherwise, false.</returns>
      <param name="rsa">An <see cref="T:System.Security.Cryptography.RSA" /> that represents an RSA algorithm.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.RsaKeyIdentifierClause.Rsa">
      <summary>Gets the RSA algorithm that is associated with the key identifier clause.</summary>
      <returns>An <see cref="T:System.Security.Cryptography.RSA" /> that represents an RSA algorithm.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaKeyIdentifierClause.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A <see cref="T:System.String" /> that represents the current object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaKeyIdentifierClause.WriteExponentAsBase64(System.Xml.XmlWriter)">
      <summary>Writes the Base64 encoded Exponent parameter of the RSA algorithm into the specified XML serializer.</summary>
      <param name="writer">A <see cref="T:System.Xml.XmlWriter" /> to write the Base64 encoded Exponent parameter of the RSA algorithm.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaKeyIdentifierClause.WriteModulusAsBase64(System.Xml.XmlWriter)">
      <summary>Writes the Base64 encoded Modulus parameter of the RSA algorithm into the specified XML serializer.</summary>
      <param name="writer">A <see cref="T:System.Xml.XmlWriter" /> to write the Base64 encoded Modulus parameter of the RSA algorithm.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.RsaSecurityKey">
      <summary>Represents a security key that is generated using the RSA algorithm. This class cannot be inherited. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityKey.#ctor(System.Security.Cryptography.RSA)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.RsaSecurityKey" /> class using the specified RSA algorithm. </summary>
      <param name="rsa">An <see cref="T:System.Security.Cryptography.RSA" /> that represents an RSA algorithm.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rsa" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityKey.DecryptKey(System.String,System.Byte[])">
      <summary>Decrypts the specified encrypted key.</summary>
      <returns>An array of <see cref="T:System.Byte" /> that contains the decrypted key.</returns>
      <param name="algorithm">The cryptographic algorithm that was used to encrypt the key. The supported algorithms are <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaV15KeyWrap" /> and <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaOaepKeyWrap" />.</param>
      <param name="keyData">An array of <see cref="T:System.Byte" /> that contains the encrypted key.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="algorithm" /> is not supported. The supported algorithms are <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaV15KeyWrap" /> and <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaOaepKeyWrap" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyData" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityKey.EncryptKey(System.String,System.Byte[])">
      <summary>Encrypts the specified key using the specified algorithm.</summary>
      <returns>An array of <see cref="T:System.Byte" /> that contains the encrypted key.</returns>
      <param name="algorithm">The cryptographic algorithm to encrypt the key with.</param>
      <param name="keyData">An array of <see cref="T:System.Byte" /> that contains the key.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="algorithm" /> is not supported. The supported algorithms are <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaV15KeyWrap" /> and <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaOaepKeyWrap" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyData" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityKey.GetAsymmetricAlgorithm(System.String,System.Boolean)">
      <summary>Gets the specified asymmetric cryptographic algorithm.</summary>
      <returns>An <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> that represents the specified asymmetric cryptographic algorithm.</returns>
      <param name="algorithm">The asymmetric algorithm to create.</param>
      <param name="requiresPrivateKey">true when a private key is required to create the algorithm; otherwise, false. </param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="requiresPrivateKey " />is true and a private key is not available.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityKey.GetHashAlgorithmForSignature(System.String)">
      <summary>Gets a cryptographic algorithm that generates a hash for a digital signature.</summary>
      <returns>A <see cref="T:System.Security.Cryptography.HashAlgorithm" /> that generates hashes for digital signatures.</returns>
      <param name="algorithm">The hash algorithm. The supported algorithm is <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha1Signature" />.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="algorithm " />is not supported. The supported algorithm is <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha1Signature" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityKey.GetSignatureDeformatter(System.String)">
      <summary>Gets the de-formatter algorithm for the digital signature.</summary>
      <returns>An <see cref="T:System.Security.Cryptography.AsymmetricSignatureDeformatter" /> that represents the de-formatter algorithm for the digital signature.</returns>
      <param name="algorithm">The de-formatter algorithm for the digital signature to get an instance of. The supported algorithm is <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha1Signature" />.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="algorithm " />is not supported. The supported algorithm is <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha1Signature" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityKey.GetSignatureFormatter(System.String)">
      <summary>Gets the formatter algorithm for the digital signature.</summary>
      <returns>An <see cref="T:System.Security.Cryptography.AsymmetricSignatureDeformatter" /> that represents the formatter algorithm for the digital signature.</returns>
      <param name="algorithm">The formatter algorithm for the digital signature to get an instance of. The supported algorithm is <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha1Signature" />.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="algorithm " />is not supported. The supported algorithm is <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha1Signature" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityKey.HasPrivateKey">
      <summary>Gets a value that indicates whether the private key is available.</summary>
      <returns>true when the private key is available; otherwise, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityKey.IsAsymmetricAlgorithm(System.String)">
      <summary>Gets a value that indicates whether the specified algorithm uses asymmetric keys.</summary>
      <returns>true when the specified algorithm uses asymmetric keys; otherwise, false.</returns>
      <param name="algorithm">The cryptographic algorithm.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityKey.IsSupportedAlgorithm(System.String)">
      <summary>Gets a value that indicates whether the specified algorithm is supported by this class. </summary>
      <returns>true when the specified algorithm is <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaV15KeyWrap" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaOaepKeyWrap" />, or <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha1Signature" />; otherwise, false.</returns>
      <param name="algorithm">The cryptographic algorithm.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityKey.IsSymmetricAlgorithm(System.String)">
      <summary>Gets a value that indicates whether the specified algorithm uses symmetric keys.</summary>
      <returns>true when the specified algorithm uses symmetric keys; otherwise, false.</returns>
      <param name="algorithm">The cryptographic algorithm.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.RsaSecurityKey.KeySize">
      <summary>Gets the size, in bits, of the key.</summary>
      <returns>The size, in bits, of the key.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.RsaSecurityToken">
      <summary>Represents a security token that is based upon key that is created using the RSA algorithm.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityToken.#ctor(System.Security.Cryptography.RSA)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.RsaSecurityToken" /> class using the specified RSA algorithm. </summary>
      <param name="rsa">A <see cref="T:System.Security.Cryptography.RSA" /> that represents a RSA algorithm that is capable of creating an asymmetric key. Sets the value of the <see cref="P:System.IdentityModel.Tokens.RsaSecurityToken.Rsa" /> property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rsa" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityToken.#ctor(System.Security.Cryptography.RSA,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.RsaSecurityToken" /> class using the specified RSA algorithm and unique identifier.</summary>
      <param name="rsa">A <see cref="T:System.Security.Cryptography.RSA" /> that represents a RSA algorithm that is capable of creating an asymmetric key. Sets the value of the <see cref="P:System.IdentityModel.Tokens.RsaSecurityToken.Rsa" /> property.</param>
      <param name="id">A unique identifier of the security token. Sets the value of the <see cref="P:System.IdentityModel.Tokens.RsaSecurityToken.Id" /> property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rsa" /> is null.-or-<paramref name="id" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityToken.CanCreateKeyIdentifierClause``1">
      <summary>Gets a value that indicates whether this security token is capable of creating the specified key identifier.</summary>
      <returns>true when <paramref name="T" /> is of type <see cref="T:System.IdentityModel.Tokens.RsaKeyIdentifierClause" />; otherwise, false.</returns>
      <typeparam name="T">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> that specifies the type of key identifier to create.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityToken.CreateKeyIdentifierClause``1">
      <summary>Creates the specified key identifier clause.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.RsaKeyIdentifierClause" /> that is a key identifier clause for the security token.</returns>
      <typeparam name="T">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> that specifies the key identifier to create.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityToken.Finalize">
      <summary>Allows the <see cref="T:System.IdentityModel.Tokens.RsaSecurityToken" /> to free resources before it is destroyed by the garbage collector.</summary>
    </member>
    <member name="P:System.IdentityModel.Tokens.RsaSecurityToken.Id">
      <summary>Gets a unique identifier of the security token.</summary>
      <returns>A unique identifier of the security token.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityToken.MatchesKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>Returns a value that indicates whether the key identifier for this instance matches the specified key identifier.</summary>
      <returns>true if <paramref name="keyIdentifierClause" /> is of type <see cref="T:System.IdentityModel.Tokens.RsaKeyIdentifierClause" /> and the keys match; otherwise, false.</returns>
      <param name="keyIdentifierClause">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> to compare to this instance.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.RsaSecurityToken.Rsa">
      <summary>Gets a RSA algorithm that is capable of creating an asymmetric key.</summary>
      <returns>A <see cref="T:System.Security.Cryptography.RSA" /> that represents a RSA algorithm that is capable of creating an asymmetric key.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.RsaSecurityToken.SecurityKeys">
      <summary>Gets the cryptographic keys associated with the security token.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of type <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> that contains the set of keys associated with the security token.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.RsaSecurityToken.ValidFrom">
      <summary>Gets the first instant in time at which this security token is valid.</summary>
      <returns>A <see cref="T:System.DateTime" /> that represents the instant in time at which this security token is first valid.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.RsaSecurityToken.ValidTo">
      <summary>Gets the last instant in time at which this security token is valid.</summary>
      <returns>A <see cref="T:System.DateTime" /> that represents the last instant in time at which this security token is valid.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.RsaSecurityTokenHandler">
      <summary>Represents a <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" /> that processes tokens of type <see cref="T:System.IdentityModel.Tokens.RsaSecurityToken" />.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityTokenHandler.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.RsaSecurityTokenHandler" /> class.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityTokenHandler.CanReadToken(System.Xml.XmlReader)">
      <summary>Indicates whether the current XML element can be read as a <see cref="T:System.IdentityModel.Tokens.RsaSecurityToken" />.</summary>
      <returns>true if the reader is pointing to a <see cref="T:System.IdentityModel.Tokens.RsaSecurityToken" />; otherwise, false.</returns>
      <param name="reader">An XML reader positioned at a start element. The reader should not be advanced.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.RsaSecurityTokenHandler.CanValidateToken">
      <summary>Gets a value that indicates whether this handler supports validation of tokens of type <see cref="T:System.IdentityModel.Tokens.RsaSecurityToken" />.</summary>
      <returns>true if the handler supports validation of tokens of type <see cref="T:System.IdentityModel.Tokens.RsaSecurityToken" />; otherwise, false. Always true.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.RsaSecurityTokenHandler.CanWriteToken">
      <summary>Gets a value that indicates whether this handler can write tokens of type <see cref="T:System.IdentityModel.Tokens.RsaSecurityToken" />.</summary>
      <returns>true if the handler can write tokens of type <see cref="T:System.IdentityModel.Tokens.RsaSecurityToken" />; otherwise, false. Always true.</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityTokenHandler.GetTokenTypeIdentifiers">
      <summary>Gets the RSA Security Token type (URI) as defined in the WS-Security Token profile.</summary>
      <returns>The RSA Security Token type URI.</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityTokenHandler.ReadToken(System.Xml.XmlReader)">
      <summary>Deserializes an RSA security token from XML.</summary>
      <returns>The RSA security token that was deserialized from the XML.</returns>
      <param name="reader">An XML reader positioned at the start element of the token.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="reader" /> is not positioned at an RSA token. </exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.RsaSecurityTokenHandler.TokenType">
      <summary>Gets the <see cref="T:System.Type" /> of the tokens that this handler processes.</summary>
      <returns>The type of <see cref="T:System.IdentityModel.Tokens.RsaSecurityToken" />.</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
      <summary>Validates the specified security token.</summary>
      <returns>The identities that are contained in the token.</returns>
      <param name="token">The security token to validate; must be an instance of the <see cref="T:System.IdentityModel.Tokens.RsaSecurityToken" /> class.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="token" /> is not assignable from <see cref="T:System.IdentityModel.Tokens.RsaSecurityToken" />.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" /> property for this handler is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
      <summary>Serializes an RSA security token to XML.</summary>
      <param name="writer">The XML writer to use to serialize the token.</param>
      <param name="token">The RSA security token to serialize.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" /> is null.-or-<paramref name="writer" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="token" /> is not assignable from <see cref="T:System.IdentityModel.Tokens.RsaSecurityToken" />.</exception>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2Action">
      <summary>Represents a &lt;saml:Action&gt; element defined by SAML 2.0.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2Action.#ctor(System.String,System.Uri)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.Saml2Action" /> class with the specified namespace and action.</summary>
      <param name="value">The action that is to be performed.</param>
      <param name="actionNamespace">The URI that represents the namespace in which the name of the specified action is to be interpreted.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="actionNamespace" /> is null.-or-<paramref name="value" /> is null or an empty string.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="actionNamespace" /> is not an absolute URI.</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Action.Namespace">
      <summary>Gets or sets the URI reference that represents the XML namespace in which the name of the specified action is to be interpreted.</summary>
      <returns>The <see cref="T:System.Uri" /> that represents the namespace.</returns>
      <exception cref="T:System.ArgumentNullException">An attempt to set the property to null occurs.</exception>
      <exception cref="T:System.ArgumentException">An attempt to set a value that is not an absolute URI occurs.</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Action.Value">
      <summary>Gets or sets the action that the subject of the <see cref="T:System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement" /> can perform on the resource.</summary>
      <returns>The action that the subject of the <see cref="T:System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement" /> can perform on the resource.</returns>
      <exception cref="T:System.ArgumentNullException">An attempt to set a value that is null or an empty string occurs.</exception>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2Advice">
      <summary>Represents the Advice element specified in [Saml2Core, 2.6.1].</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2Advice.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.Saml2Advice" /> class.</summary>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Advice.AssertionIdReferences">
      <summary>Gets the collection of assertions referenced by ID.</summary>
      <returns>A collection of type <see cref="T:System.IdentityModel.Tokens.Saml2Id" /> that contains IDs that reference the assertions.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Advice.Assertions">
      <summary>Gets the collection of assertions specified by value.</summary>
      <returns>A collection of type <see cref="T:System.IdentityModel.Tokens.Saml2Assertion" /> that contains the assertions.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Advice.AssertionUriReferences">
      <summary>Gets the collection of assertions referenced by URI.</summary>
      <returns>A collection of type <see cref="T:System.Uri" /> that contains URIs that reference the assertions.</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2Assertion">
      <summary>Represents the Assertion element specified in [Saml2Core, 2.3.3].</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2Assertion.#ctor(System.IdentityModel.Tokens.Saml2NameIdentifier)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.Saml2Assertion" /> class with the specified issuer.</summary>
      <param name="issuer">A <see cref="T:System.IdentityModel.Tokens.Saml2NameIdentifier" /> that specifies the SAML authority that is making the claim(s) in the assertion. [Saml2Core, 2.3.3].</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="issuer" /> is null.</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Assertion.Advice">
      <summary>Gets or sets additional information related to the assertion that assists processing in certain situations but which may be ignored by applications that do not understand the advice or do not wish to make use of it. [Saml2Core, 2.3.3]</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.Saml2Advice" /> that contains additional information related to the assertion.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Assertion.CanWriteSourceData">
      <summary>Gets a value that indicates whether this assertion was deserialized from XML source and can re-emit the XML data unchanged.</summary>
      <returns>true if this assertion can re-emit the XML source data unchanged; otherwise, false.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Assertion.Conditions">
      <summary>Gets or sets the conditions that must be evaluated when assessing the validity of and/or when using the assertion. [Saml2Core 2.3.3]</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.Saml2Conditions" /> that contains the conditions.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Assertion.EncryptingCredentials">
      <summary>Gets or sets the credentials used for encrypting the assertion. The key identifier in the encrypting credentials is used for the embedded EncryptedKey in the EncryptedData element.</summary>
      <returns>Returns <see cref="T:Microsoft.IdentityModel.Tokens.EncryptingCredentials" /> that represents the credentials.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Assertion.ExternalEncryptedKeys">
      <summary>Gets or sets a collection that contains any additional encrypted keys that are specified external to the EncryptedData element, as children of the EncryptedAssertion element.</summary>
      <returns>A collection of type <see cref="T:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause" /> that contains the keys.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Assertion.Id">
      <summary>Gets or sets the identifier for this assertion. [Saml2Core, 2.3.3]</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.Saml2Id" /> that represents the identifier.</returns>
      <exception cref="T:System.ArgumentNullException">An attempt to set the property to null occurs.</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Assertion.IssueInstant">
      <summary>Gets or sets the time instant of issue in UTC. [Saml2Core, 2.3.3]</summary>
      <returns>A <see cref="T:System.DateTime" /> that represents the time at which this assertion was issued in UTC. The default is <see cref="P:System.DateTime.UtcNow" />.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Assertion.Issuer">
      <summary>Gets or sets the identifier for the SAML authority that is making the claim(s) in the assertion. [Saml2Core, 2.3.3]</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.Saml2NameIdentifier" /> that specifies the issuer.</returns>
      <exception cref="T:System.ArgumentNullException">An attempt to set the property to null occurs.</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Assertion.SigningCredentials">
      <summary>The credentials used by the issuer to protect the integrity of the assertion.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SigningCredentials" /> that represents the credentials.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Assertion.Statements">
      <summary>Gets a collection that contains the statements regarding the subject made in this assertion.</summary>
      <returns>A collection of type <see cref="T:System.IdentityModel.Tokens.Saml2Statement" /> that contains the statements for this assertion.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Assertion.Subject">
      <summary>Gets or sets the subject of the statement(s) in the assertion. [Saml2Core, 2.3.3]</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.Saml2Subject" /> that specifies the subject.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Assertion.Version">
      <summary>Gets the SAML version of this assertion. [Saml2Core, 2.3.3]</summary>
      <returns>A string that contains the version.</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2Assertion.WriteSourceData(System.Xml.XmlWriter)">
      <summary>Writes the source data, if available.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> with which to write the source data.</param>
      <exception cref="T:System.InvalidOperationException">No source data is available</exception>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2AssertionKeyIdentifierClause">
      <summary>Represents a <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> implementation for referencing SAML2-based security tokens.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2AssertionKeyIdentifierClause.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.Saml2AssertionKeyIdentifierClause" /> class for the specified ID.</summary>
      <param name="id">The ID that defines the clause to create.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> is null or an empty string.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2AssertionKeyIdentifierClause.#ctor(System.String,System.Byte[],System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.Saml2AssertionKeyIdentifierClause" /> class for the specified ID, nonce, and key size.</summary>
      <param name="id">The ID that defines the clause to create.</param>
      <param name="derivationNonce">An array of <see cref="T:System.Byte" /> that contains the nonce that was used to create a derived key. Sets the value that is returned by the <see cref="M:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.GetDerivationNonce" /> method.</param>
      <param name="derivationLength">The size of the derived key. Sets the value of the <see cref="P:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.DerivationLength" /> property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> is null or an empty string.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2AssertionKeyIdentifierClause.Matches(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>Returns a value that indicates whether the key identifier for this instance is equivalent to the specified key identifier clause.</summary>
      <returns>true if <paramref name="keyIdentifierClause" /> is the same instance as the current instance; otherwise, false.</returns>
      <param name="keyIdentifierClause">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> to compare to.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2AssertionKeyIdentifierClause.Matches(System.String,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>Returns a value that indicates whether the key identifier for an assertion is equivalent to the specified key identifier clause.</summary>
      <returns>true if <paramref name="assertionId" /> matches the <see cref="P:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.Id" /> property of <paramref name="keyIdentifierClause" />; otherwise, false.</returns>
      <param name="assertionId">The ID of the assertion.</param>
      <param name="keyIdentifierClause">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> to compare to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assertionId" /> is null or an empty string.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2AssertionKeyIdentifierClause.ToString">
      <summary>Returns a string that represents the current instance.</summary>
      <returns>A string representation of the current instance.</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2Attribute">
      <summary>Represents the Attribute element specified in [Saml2Core, 2.7.3.1].</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2Attribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.Saml2Attribute" /> class with the specified name.</summary>
      <param name="name">The name of the attribute.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2Attribute.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.Saml2Attribute" /> class with the specified name and values.</summary>
      <param name="name">The name of the attribute.</param>
      <param name="values">A collection of strings that contains the attribute values.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.-or-<paramref name="values" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2Attribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.Saml2Attribute" /> class with the specified name and value.</summary>
      <param name="name">The name of the attribute.</param>
      <param name="value">The value of the attribute.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.-or-<paramref name="value" /> is null.</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Attribute.AttributeValueXsiType">
      <summary>Gets or sets the xsi:type of the values contained in the SAML Attribute.</summary>
      <returns>A string that contains the xsi:type. The default is <see cref="F:System.Security.Claims.ClaimValueTypes.String" />.</returns>
      <exception cref="T:System.ArgumentException">An attempt to set a value that is null or empty occurs.-or-An attempt to set a value that is malformed occurs.</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Attribute.FriendlyName">
      <summary>Gets or sets a human-readable name for the attribute. [Saml2Core, 2.7.3.1]</summary>
      <returns>A string that contains the friendly name for the attribute.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Attribute.Name">
      <summary>Gets or sets the name of the attribute. [Saml2Core, 2.7.3.1]</summary>
      <returns>A string that contains the attribute name.</returns>
      <exception cref="T:System.ArgumentNullException">An attempt to set a value that is null or an empty string occurs.</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Attribute.NameFormat">
      <summary>Gets or sets a URI that represents the classification of the attribute name for the purposes of interpreting the name. [Saml2Core, 2.7.3.1]</summary>
      <returns>A <see cref="T:System.Uri" /> that represents the classification.</returns>
      <exception cref="T:System.ArgumentException">An attempt to set a value that is not null and is not an absolute URI occurs.</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Attribute.OriginalIssuer">
      <summary>Gets or sets the string that represents the OriginalIssuer of this SAML Attribute.</summary>
      <returns>A string that contains the original issuer of the attribute.</returns>
      <exception cref="T:System.ArgumentException">An attempt to set a value that is an empty string occurs.</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Attribute.Values">
      <summary>Gets the collection that contains the values of the attribute.</summary>
      <returns>A collection of strings that contains the attribute values.</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2AttributeStatement">
      <summary>Represents the AttributeStatement element specified in [Saml2Core, 2.7.3].</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2AttributeStatement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.Saml2AttributeStatement" /> class with no attributes.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2AttributeStatement.#ctor(System.Collections.Generic.IEnumerable{System.IdentityModel.Tokens.Saml2Attribute})">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.Saml2AttributeStatement" /> class.</summary>
      <param name="attributes">A collection of type <see cref="T:System.IdentityModel.Tokens.Saml2Attribute" /> that contains the Attribute elements contained in this statement.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributes" /> is null.-or-One of the elements of the collection specified by <paramref name="attributes" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2AttributeStatement.#ctor(System.IdentityModel.Tokens.Saml2Attribute)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.Saml2AttributeStatement" /> class.</summary>
      <param name="attribute">A <see cref="T:System.IdentityModel.Tokens.Saml2Attribute" /> that represents a single Attribute element contained in this statement.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attribute" /> is null.</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2AttributeStatement.Attributes">
      <summary>Gets the collection of attributes contained in the attribute statement. These attributes are associated with the assertion subject. [Saml2Core, 2.7.3]</summary>
      <returns>A collection of type <see cref="T:System.IdentityModel.Tokens.Saml2Attribute" /> that contains the attributes in the statement.</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2AudienceRestriction">
      <summary>Represents the AudienceRestriction element specified in [Saml2Core, 2.5.1.4].</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2AudienceRestriction.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.Saml2AudienceRestriction" /> class with no Audience elements.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2AudienceRestriction.#ctor(System.Collections.Generic.IEnumerable{System.Uri})">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.Saml2AudienceRestriction" /> class with the specified URIs.</summary>
      <param name="audiences">The collection of <see cref="T:System.Uri" /> that contains the Audience elements contained in this restriction.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2AudienceRestriction.#ctor(System.Uri)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.Saml2AudienceRestriction" /> class.</summary>
      <param name="audience">A <see cref="T:System.Uri" /> that represents the contents of the Audience element contained in this restriction.</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2AudienceRestriction.Audiences">
      <summary>Gets a collection of URIs that specifies the audiences to which the assertion is addressed. The condition is valid if the relying party is a member of any of the specified audiences.</summary>
      <returns>A collection of type <see cref="T:System.Uri" /> that specifies the audiences.</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2AuthenticationContext">
      <summary>Represents the AuthnContext element specified in [Saml2Core, 2.7.2.2].</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2AuthenticationContext.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.Saml2AuthenticationContext" /> class.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2AuthenticationContext.#ctor(System.Uri)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.Saml2AuthenticationContext" /> class with the specified class reference.</summary>
      <param name="classReference">The class reference of the authentication context.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="classReference" /> is not null and is not an absolute URI.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2AuthenticationContext.#ctor(System.Uri,System.Uri)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.Saml2AuthenticationContext" /> class with the specified class reference and declaration reference.</summary>
      <param name="classReference">The class reference of the authentication context.</param>
      <param name="declarationReference">The declaration reference of the authentication context</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="classReference" /> is not null and is not an absolute URI.-or-<paramref name="declarationReference" /> is not null and is not an absolute URI.</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2AuthenticationContext.AuthenticatingAuthorities">
      <summary>Gets a collection of zero or more unique identifiers (URIs) of authentication authorities that were involved in the authentication of the principal (not including the assertion issuer, who is presumed to have been involved without being explicitly included in the collection). [Saml2Core, 2.7.2.2]</summary>
      <returns>Returns a collection of type <see cref="T:System.Uri" /> that identifies the authenticating authorities that were involved in the authentication of the principal.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2AuthenticationContext.ClassReference">
      <summary>Gets or sets the URI reference that identifies an authentication context class that describes the authentication context declaration that follows. [Saml2Core, 2.7.2.2]</summary>
      <returns>A <see cref="T:System.Uri" /> that identifies the context class.</returns>
      <exception cref="T:System.ArgumentException">An attempt to set a value that is not null and is not an absolute URI occurs.</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2AuthenticationContext.DeclarationReference">
      <summary>Gets or sets a URI reference that identifies an authentication context declaration. [Saml2Core, 2.7.2.2]</summary>
      <returns>A <see cref="T:System.Uri" /> that identifies an authentication context declaration.</returns>
      <exception cref="T:System.ArgumentException">An attempt to set a value that is not null and is not an absolute URI occurs.</exception>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2AuthenticationStatement">
      <summary>Represents the AuthnStatement element specified in [Saml2Core, 2.7.2].</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2AuthenticationStatement.#ctor(System.IdentityModel.Tokens.Saml2AuthenticationContext)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.Saml2AuthenticationStatement" /> class with the specified authentication context and the current time as the authentication instant.</summary>
      <param name="authenticationContext">The authentication context of this statement.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="authenticationContext" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2AuthenticationStatement.#ctor(System.IdentityModel.Tokens.Saml2AuthenticationContext,System.DateTime)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.Saml2AuthenticationStatement" /> class with the specified authentication context and authentication time.</summary>
      <param name="authenticationContext">The authentication context of this statement.</param>
      <param name="authenticationInstant">The time of the authentication.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="authenticationContext" /> is null.</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2AuthenticationStatement.AuthenticationContext">
      <summary>Gets or sets the context used by the authenticating authority up to and including the authentication event that yielded this statement. [Saml2Core, 2.7.2]</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.Saml2AuthenticationContext" /> that represents the context.</returns>
      <exception cref="T:System.ArgumentNullException">An attempt to set a value that is null occurs.</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2AuthenticationStatement.AuthenticationInstant">
      <summary>Gets or sets the time at which the authentication took place. [Saml2Core, 2.7.2]</summary>
      <returns>A <see cref="T:System.DateTime" /> that represents the time of authentication in UTC.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2AuthenticationStatement.SessionIndex">
      <summary>Gets or sets the index of a particular session between the principal identified by the subject and the authenticating authority. [Saml2Core, 2.7.2]</summary>
      <returns>A string that contains the session index.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2AuthenticationStatement.SessionNotOnOrAfter">
      <summary>Gets or sets the time instant at which the session between the principal identified by the subject and the SAML authority issuing this statement must be considered ended. [Saml2Core, 2.7.2]</summary>
      <returns>Returns a nullable <see cref="T:System.DateTime" /> that represents the session expiration time in UTC. A null value indicates that the attribute is not specified.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2AuthenticationStatement.SubjectLocality">
      <summary>Gets or sets the DNS domain name and IP address for the system from which the assertion subject was apparently authenticated. [Saml2Core, 2.7.2]</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.Saml2SubjectLocality" /> that specifies the DNS domain name and IP address.</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement">
      <summary>Represents the &lt;saml:AuthzDecisionStatement&gt; element defined by SAML 2.0.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement.#ctor(System.Uri,System.IdentityModel.Tokens.SamlAccessDecision)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement" /> class with the specified decision for the specified resource.</summary>
      <param name="resource">The <see cref="T:System.Uri" /> of the resource about which the authorization decision applies. Sets the <see cref="P:System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement.Resource" /> property.</param>
      <param name="decision">A <see cref="T:System.IdentityModel.Tokens.SamlAccessDecision" /> value that indicates the decision. Sets the <see cref="P:System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement.Decision" /> property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="resource" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="resource" /> is not an absolute URI or an empty relative URI.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="decision" /> is not a valid <see cref="T:System.IdentityModel.Tokens.SamlAccessDecision" /> value.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement.#ctor(System.Uri,System.IdentityModel.Tokens.SamlAccessDecision,System.Collections.Generic.IEnumerable{System.IdentityModel.Tokens.Saml2Action})">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement" /> class with the specified decision for the specified actions on the specified resource.</summary>
      <param name="resource">The <see cref="T:System.Uri" /> of the resource about which the authorization decision applies. Sets the <see cref="P:System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement.Resource" /> property.</param>
      <param name="decision">A <see cref="T:System.IdentityModel.Tokens.SamlAccessDecision" /> value that indicates the decision. Sets the <see cref="P:System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement.Decision" /> property.</param>
      <param name="actions">A collection of <see cref="T:System.IdentityModel.Tokens.Saml2Action" /> that specifies the actions to be authorized on the resource. Sets the <see cref="P:System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement.Actions" /> property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="resource" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="resource" /> is not an absolute URI or an empty relative URI.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="decision" /> is not a valid <see cref="T:System.IdentityModel.Tokens.SamlAccessDecision" /> value.</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement.Actions">
      <summary>Gets or sets the set of actions authorized to be performed on the specified resource.</summary>
      <returns>A collection of type <see cref="T:System.IdentityModel.Tokens.Saml2Action" /> that specifies the authorized actions.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement.Decision">
      <summary>Gets or sets the decision rendered by the SAML authority with respect to the specified resource. </summary>
      <returns>One of the <see cref="T:System.IdentityModel.Tokens.SamlAccessDecision" /> values that specify the authorization decision rendered by the SAML authority with respect to access by the subject to the specified resource.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">An attempt to set a value that is not a valid <see cref="T:System.IdentityModel.Tokens.SamlAccessDecision" /> value occurs.</exception>
    </member>
    <member name="F:System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement.EmptyResource">
      <summary>Gets an empty URI reference. The reference may be used to set the <see cref="P:System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement.Resource" /> property. When used, it specifies the start of the current document.</summary>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement.Evidence">
      <summary>Gets or sets the set of assertions that the SAML authority relied on in making the decision. [Saml2Core, 2.7.4]</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.Saml2Evidence" /> that contains the assertions.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement.Resource">
      <summary>Gets or sets the URI reference that identifies the resource to which access authorization is sought.</summary>
      <returns>A <see cref="T:System.Uri" /> that identifies the resource.</returns>
      <exception cref="T:System.ArgumentNullException">An attempt to set a value that is null occurs.</exception>
      <exception cref="T:System.ArgumentException">An attempt to set a value that is not an absolute URI or is not an empty relative URI occurs.</exception>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2Conditions">
      <summary>Represents the Conditions element specified in [Saml2Core, 2.5.1].</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2Conditions.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.Saml2Conditions" /> class.</summary>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Conditions.AudienceRestrictions">
      <summary>Gets a collection that specifies the audience to which the assertion is addressed. [Saml2Core, 2.5.1]</summary>
      <returns>A collection of type <see cref="T:System.IdentityModel.Tokens.Saml2AudienceRestriction" /> that specifies the audience for the assertion. If the collection is empty no restrictions on the audience apply.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Conditions.NotBefore">
      <summary>Gets or sets the earliest time instant at which the assertion is valid. [Saml2Core, 2.5.1]</summary>
      <returns>A nullable <see cref="T:System.DateTime" /> that contains the time instant in UTC. A null value indicates that the attribute is not present.</returns>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.IdentityModel.Tokens.Saml2Conditions.NotOnOrAfter" /> property is not null and an attempt to set a value that occurs on or after the time instant specified by the <see cref="P:System.IdentityModel.Tokens.Saml2Conditions.NotOnOrAfter" /> property occurs.</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Conditions.NotOnOrAfter">
      <summary>Gets or sets the time instant at which the assertion has expired. [Saml2Core, 2.5.1]</summary>
      <returns>A nullable <see cref="T:System.DateTime" /> that contains the time instant in UTC. A null value indicates that the attribute is not present.</returns>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.IdentityModel.Tokens.Saml2Conditions.NotBefore" /> property is not null and an attempt to set a value that occurs before the time instant specified by the <see cref="P:System.IdentityModel.Tokens.Saml2Conditions.NotBefore" /> property occurs.</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Conditions.OneTimeUse">
      <summary>Gets a value that specifies whether the assertion should be used immediately and must not be retained for future use. [Saml2Core, 2.5.1]</summary>
      <returns>true if the assertion should be used immediately; otherwise, false.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Conditions.ProxyRestriction">
      <summary>Gets or sets the limitations that the asserting party imposes on relying parties that wish to subsequently act as asserting parties themselves and issue assertions of their own on the basis of the information contained in the original assertion. [Saml2Core, 2.5.1]</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.Saml2ProxyRestriction" /> that contains the restrictions placed on subsequent asserting parties.</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2Evidence">
      <summary>Represents the Evidence element specified in [Saml2Core, 2.7.4.3].</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2Evidence.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.Saml2Evidence" /> class.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2Evidence.#ctor(System.IdentityModel.Tokens.Saml2Assertion)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.Saml2Evidence" /> class with the specified assertion.</summary>
      <param name="assertion">A <see cref="T:System.IdentityModel.Tokens.Saml2Assertion" /> that contains the evidence.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assertion" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2Evidence.#ctor(System.IdentityModel.Tokens.Saml2Id)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.Saml2Evidence" /> class with an ID that references an assertion.</summary>
      <param name="idReference">A <see cref="T:System.IdentityModel.Tokens.Saml2Id" /> that references the assertion.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="idReference" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2Evidence.#ctor(System.Uri)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.Saml2Evidence" /> class with a URI that references an assertion.</summary>
      <param name="uriReference">A <see cref="T:System.Uri" /> that references an assertion.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriReference" /> is null.</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Evidence.AssertionIdReferences">
      <summary>Gets the collection of assertions referenced by ID.</summary>
      <returns>A collection of type <see cref="T:System.IdentityModel.Tokens.Saml2Id" /> that contains IDs that reference the assertions.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Evidence.Assertions">
      <summary>Gets the collection of assertions specified by value.</summary>
      <returns>A collection of type <see cref="T:System.IdentityModel.Tokens.Saml2Assertion" /> that contains the assertions.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Evidence.AssertionUriReferences">
      <summary>Gets the collection of assertions referenced by URI.</summary>
      <returns>A collection of type <see cref="T:System.Uri" /> that contains URIs that reference the assertions.</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2Id">
      <summary>Represents the identifier used for SAML assertions.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2Id.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.Saml2Id" /> class with a system-generated value.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2Id.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.Saml2Id" /> class with the specified value.</summary>
      <param name="value">The ID value.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a valid NCName.</exception>
      <exception cref="T:System.ArgumentNUllException">
        <paramref name="value" /> is null or an empty string.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2Id.Equals(System.Object)">
      <summary>Determines whether this instance is equal to the specified object.</summary>
      <returns>true if the objects are equal; otherwise false.</returns>
      <param name="obj">The object with which to compare this instance.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2Id.GetHashCode">
      <summary>Returns a hash code for this instance.</summary>
      <returns>An integer that contains the hash code.</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2Id.ToString">
      <summary>Returns a string representation of this instance.</summary>
      <returns>The string representation of the <see cref="T:System.IdentityModel.Tokens.Saml2Id" />.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Id.Value">
      <summary>Gets the identifier string.</summary>
      <returns>The ID string.</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2NameIdentifier">
      <summary>Represents the NameID element as specified in [Saml2Core, 2.2.3] or the EncryptedID element as specified in [Saml2Core, 2.2.4].</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2NameIdentifier.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.Saml2NameIdentifier" /> class with the specified name.</summary>
      <param name="name">The name identifier.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2NameIdentifier.#ctor(System.String,System.Uri)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.Saml2NameIdentifier" /> class with the specified name and format URI.</summary>
      <param name="name">The name identifier.</param>
      <param name="format">A <see cref="T:System.Uri" /> that specifies the identifier format.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.</exception>
      <exception cref="T:System.ArgumentException">An attempt to set <paramref name="format" /> to a value that is not null and is not an absolute URI occurs.</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2NameIdentifier.EncryptingCredentials">
      <summary>Get or sets the credentials used for encrypting the name identifier in an EncryptedID element.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.EncryptingCredentials" /> that represents the credentials used to encrypt the name identifier.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2NameIdentifier.ExternalEncryptedKeys">
      <summary>Gets a collection that contains additional encrypted keys that are specified external to the xenc:EncryptedData element, as child elements of the EncryptedID element.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.Collection`1" /> that contains the keys.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2NameIdentifier.Format">
      <summary>Gets or sets a URI reference that represents the classification of string-based identifier information. [Saml2Core, 2.2.2]</summary>
      <returns>A <see cref="T:System.Uri" />.</returns>
      <exception cref="T:System.ArgumentException">An attempt to set a value that is not null and is not an absolute URI occurs.</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2NameIdentifier.NameQualifier">
      <summary>Gets or sets the security or administrative domain that qualifies the name. [Saml2Core, 2.2.2]</summary>
      <returns>The name qualifier.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2NameIdentifier.SPNameQualifier">
      <summary>Gets or sets the name of a service provider or affiliation of providers that is used to further qualify a name [Saml2Core, 2.2.2].</summary>
      <returns>The service provider name qualifier.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2NameIdentifier.SPProvidedId">
      <summary>Gets or sets a name identifier established by a service provider or affiliation of providers for the entity, if different from the primary name identifier. [Saml2Core, 2.2.2]</summary>
      <returns>A string that contains the name identifier.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2NameIdentifier.Value">
      <summary>Gets or sets the value of the name identifier.</summary>
      <returns>A string that contains the name identifier value.</returns>
      <exception cref="T:System.ArgumentNullException">An attempt to set a value that is null occurs.</exception>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2ProxyRestriction">
      <summary>Represents the ProxyRestriction element specified in [Saml2Core, 2.5.1.6].</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2ProxyRestriction.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.Saml2ProxyRestriction" /> class.</summary>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2ProxyRestriction.Audiences">
      <summary>Gets or sets the set of audiences to whom the asserting party permits new assertions to be issued on the basis of this assertion.</summary>
      <returns>A collection of type <see cref="T:System.Uri" /> that contains the addresses of the entities about which new assertions can be issued.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2ProxyRestriction.Count">
      <summary>Gets or sets the maximum number of indirections that the asserting party permits to exist between this assertion and an assertion which has ultimately been issued on the basis of it.</summary>
      <returns>A nullable integer. null indicates that the attribute is not set and no limitation is set on the number of indirections.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">An attempt to set a value that is not null and is less than zero occurs.</exception>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2SecurityKeyIdentifierClause">
      <summary>This class is used when a Saml2Assertion is received without a &lt;ds:KeyInfo&gt; element inside the signature element. The KeyInfo describes the key required to check the signature. When the key is needed this clause will be presented to the current <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />. It will contain the Saml2Assertion fully read which can be queried to determine the key required.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityKeyIdentifierClause.#ctor(System.IdentityModel.Tokens.Saml2Assertion)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.Saml2SecurityKeyIdentifierClause" /> class.</summary>
      <param name="assertion">The assertion that is currently being processed. Sets the value of the <see cref="P:System.IdentityModel.Tokens.Saml2SecurityKeyIdentifierClause.Assertion" /> property.</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SecurityKeyIdentifierClause.Assertion">
      <summary>Gets the Saml2Assertion that is currently associated with this instance.</summary>
      <returns>The Saml2Assertion that is currently associated with this instance. Can be null.</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2SecurityToken">
      <summary>Represents a security token that is based upon a SAML assertion.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityToken.#ctor(System.IdentityModel.Tokens.Saml2Assertion)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.Saml2SecurityToken" /> class using the specified SAML assertion.</summary>
      <param name="assertion">A <see cref="T:System.IdentityModel.Tokens.Saml2Assertion" /> that represents the SAML assertion for this security token.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityToken.#ctor(System.IdentityModel.Tokens.Saml2Assertion,System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Tokens.SecurityKey},System.IdentityModel.Tokens.SecurityToken)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.Saml2SecurityToken" /> class using the specified SAML assertion, cryptographic keys and issuer token.</summary>
      <param name="assertion">A <see cref="T:System.IdentityModel.Tokens.Saml2Assertion" /> that represents the SAML assertion for this security token.</param>
      <param name="keys">The set of keys associated with this security token.</param>
      <param name="issuerToken">The token of the issuer for this security token.</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SecurityToken.Assertion">
      <summary>Gets the SAML assertion for this security token.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.Saml2Assertion" /> that represents the SAML assertion for this security token.</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityToken.CanCreateKeyIdentifierClause``1">
      <summary>Gets a value indicating whether this security token is capable of creating the specified key identifier. </summary>
      <returns>true when <paramref name="T" /> is of type <see cref="T:System.IdentityModel.Tokens.Saml2AssertionKeyIdentifierClause" />; otherwise, false. </returns>
      <typeparam name="T">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> that specifies the key identifier to create.</typeparam>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityToken.CreateKeyIdentifierClause``1">
      <summary>Creates the specified key identifier clause.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.Saml2AssertionKeyIdentifierClause" /> that is a key identifier clause for a SAML security token.</returns>
      <typeparam name="T">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> that specifies the key identifier to create.</typeparam>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="T" /> is not of type <see cref="T:System.IdentityModel.Tokens.Saml2AssertionKeyIdentifierClause" />.</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SecurityToken.Id">
      <summary>Gets a unique identifier of the security token. </summary>
      <returns>The unique identifier of the security token.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SecurityToken.IssuerToken">
      <summary>Gets the security token of the issuer.</summary>
      <returns>The security token of the issuer.</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityToken.MatchesKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>Returns a value indicating whether the key identifier for this instance is equal to the specified key identifier. </summary>
      <returns>true if <paramref name="keyIdentifierClause" /> is a <see cref="T:System.IdentityModel.Tokens.Saml2AssertionKeyIdentifierClause" /> and it has the same unique identifier as the <see cref="P:System.IdentityModel.Tokens.Saml2SecurityToken.Id" /> property; otherwise, false.</returns>
      <param name="keyIdentifierClause">An <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> to compare to this instance.</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SecurityToken.SecurityKeys">
      <summary>Gets the cryptographic keys associated with the security token.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of type <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> that contains the set of keys associated with the security token.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SecurityToken.ValidFrom">
      <summary>Gets the first instant in time at which this security token is valid.</summary>
      <returns>A <see cref="T:System.DateTime" /> that represents the first instant in time at which this security token is valid.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SecurityToken.ValidTo">
      <summary>Gets the last instant in time at which this security token is valid.</summary>
      <returns>A <see cref="T:System.DateTime" /> that represents the last instant in time at which this security token is valid.</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2SecurityTokenHandler">
      <summary>Represents a security token handler that creates security tokens from SAML 2.0 Assertions.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.Saml2SecurityTokenHandler" /> class with default security token requirements.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.#ctor(System.IdentityModel.Tokens.SamlSecurityTokenRequirement)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.Saml2SecurityTokenHandler" /> class with the specified security token requirements.</summary>
      <param name="samlSecurityTokenRequirement">The <see cref="T:System.IdentityModel.Tokens.SamlSecurityTokenRequirement" /> to be used by this instance when validating tokens. Sets the <see cref="P:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.SamlSecurityTokenRequirement" /> property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="samlSecurityTokenRequirement" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.AddDelegateToAttributes(System.Security.Claims.ClaimsIdentity,System.Collections.Generic.ICollection{System.IdentityModel.Tokens.Saml2Attribute},System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>Adds all of the delegates associated with the subject into the attribute collection.</summary>
      <param name="subject">The delegate of this <see cref="T:System.Security.Claims.ClaimsIdentity" /> object will be serialized into a <see cref="T:System.IdentityModel.Tokens.Saml2Attribute" />.</param>
      <param name="attributes">A collection of type <see cref="T:System.IdentityModel.Tokens.Saml2Attribute" />.</param>
      <param name="tokenDescriptor">The token descriptor.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="subject" /> is null.-or-<paramref name="tokenDescriptor" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)">
      <summary>Indicates if the current XML element is pointing to a key identifier clause that can be serialized by this instance.</summary>
      <returns>true if the <see cref="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)" /> method can read the element; otherwise, false.</returns>
      <param name="reader">An XML reader positioned at the start element.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)">
      <summary>Indicates whether the current XML element can be read as a token of the type handled by this instance.</summary>
      <returns>true if the <see cref="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadToken(System.Xml.XmlReader)" /> method can read the element; otherwise, false.</returns>
      <param name="reader">An XML reader positioned at a start element. The reader should not be advanced.</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.CanValidateToken">
      <summary>Gets a value that indicates if this handler can validate tokens of type <see cref="T:System.IdentityModel.Tokens.Saml2SecurityToken" />.</summary>
      <returns>true, which indicates that the handler can validate tokens of type <see cref="T:System.IdentityModel.Tokens.Saml2SecurityToken" />.</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.CanWriteKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>Indicates if the specified key identifier clause can be serialized by this instance.</summary>
      <returns>true if the specified key identifier clause can be serialized; otherwise, false.</returns>
      <param name="securityKeyIdentifierClause">The <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> to be serialized.</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.CanWriteToken">
      <summary>Gets a value that indicates whether this handler can serialize tokens of type <see cref="T:System.IdentityModel.Tokens.Saml2SecurityToken" />.</summary>
      <returns>true; which indicates that the handler can serialize tokens of type <see cref="T:System.IdentityModel.Tokens.Saml2SecurityToken" />.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.CertificateValidator">
      <summary>Gets or sets the X.509 certificate validator that is used by the current instance to validate X.509 certificates.</summary>
      <returns>An <see cref="T:System.IdentityModel.Selectors.X509CertificateValidator" /> that represents the validator.</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.CollectAttributeValues(System.Collections.Generic.ICollection{System.IdentityModel.Tokens.Saml2Attribute})">
      <summary>Collects attributes with a common claim type, claim value type, and original issuer into a single attribute with multiple values.</summary>
      <returns>A collection of <see cref="T:System.IdentityModel.Tokens.Saml2Attribute" /> that contains attributes derived from the input collection. Attributes in the input collection that share a common claim type, claim value, and original issuer with other attributes are consolidated into a single attribute with multiple values in the output collection. Attributes in the input collection that do not share claim type, claim value, or original issuer with other attributes appear unaltered in the output collection.</returns>
      <param name="attributes">A collection of type <see cref="T:System.IdentityModel.Tokens.Saml2Attribute" /> that contains the attributes generated from claims.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.CreateAdvice(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>Creates a <see cref="T:System.IdentityModel.Tokens.Saml2Advice" /> object for the assertion.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.Saml2Advice" /> object. The default is null.</returns>
      <param name="tokenDescriptor">The token descriptor.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.CreateAttribute(System.Security.Claims.Claim,System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>Creates a <see cref="T:System.IdentityModel.Tokens.Saml2Attribute" /> object from a claim.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.Saml2Attribute" /> that contains the converted claim.</returns>
      <param name="claim">The <see cref="T:System.Security.Claims.Claim" /> from which to generate the SAML Attribute.</param>
      <param name="tokenDescriptor">The token descriptor.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="claim" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.CreateAttributeStatement(System.Security.Claims.ClaimsIdentity,System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>Creates a <see cref="T:System.IdentityModel.Tokens.Saml2AttributeStatement" /> object from a token descriptor.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.Saml2AttributeStatement" /> that contains the converted claims.</returns>
      <param name="subject">The <see cref="T:System.Security.Claims.ClaimsIdentity" /> object that contains claims which will be converted to SAML Attributes.</param>
      <param name="tokenDescriptor">The token descriptor.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.CreateAuthenticationStatement(System.Security.Claims.AuthenticationInformation,System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>Creates a SAML 2.0 authentication statement from the specified authentication information.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.Saml2AuthenticationStatement" /> to add to the assertion being created or null to ignore the <see cref="T:System.Security.Claims.AuthenticationInformation" /> object (and not create a SAML 2.0 authentication statement).</returns>
      <param name="authInfo">An <see cref="T:System.Security.Claims.AuthenticationInformation" /> object that contains the state to be wrapped as a <see cref="T:System.IdentityModel.Tokens.Saml2AuthenticationStatement" /> object.</param>
      <param name="tokenDescriptor">The token descriptor.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tokenDescriptor" /> is null.-or-The <see cref="P:System.IdentityModel.Tokens.SecurityTokenDescriptor.Subject" /> property of <paramref name="tokenDescriptor" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The subject of the <paramref name="tokenDescriptor" /> (the <see cref="P:System.IdentityModel.Tokens.SecurityTokenDescriptor.Subject" /> property) contains claims with a claim type of either <see cref="F:System.Security.Claims.ClaimTypes.AuthenticationInstant" /> or  <see cref="F:System.Security.Claims.ClaimTypes.AuthenticationMethod" /> but does not contain at least one claim of each type.-or-The authentication method specified by the subject of the <paramref name="tokenDescriptor" /> cannot be resolved to an absolute URI.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.CreateClaims(System.IdentityModel.Tokens.Saml2SecurityToken)">
      <summary>Creates claims from a SAML 2.0 token.</summary>
      <returns>An <see cref="T:System.Security.Claims.ClaimsIdentity" /> that contains the claims extracted from the token.</returns>
      <param name="samlToken">A <see cref="T:System.IdentityModel.Tokens.Saml2SecurityToken" /> that represents the security token from which to create the claims.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="samlToken" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.IdentityModel.Tokens.Saml2SecurityToken.Assertion" /> property of <paramref name="samlToken" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The handler is not configured or an issuer name registry is not configured for the handler. (The <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" /> property is null or is set to a <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration" /> with an <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.IssuerNameRegistry" /> property that is null.</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">The issuer name returned by the configured issuer name registry for the security token (<paramref name="samlToken" />) is null or empty.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.CreateConditions(System.IdentityModel.Protocols.WSTrust.Lifetime,System.String,System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>Creates the conditions for the assertion.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.Saml2Conditions" /> object that contains the conditions for the assertion.</returns>
      <param name="tokenLifetime">The lifetime of the token.</param>
      <param name="relyingPartyAddress">The endpoint address for which the token is created. The address is modeled as an AudienceRestriction condition.</param>
      <param name="tokenDescriptor">The token descriptor.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.CreateIssuerNameIdentifier(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>Creates a name identifier that identifies the assertion issuer.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.Saml2NameIdentifier" /> that represents the name identifier.</returns>
      <param name="tokenDescriptor">The token descriptor from which to create the name identifier.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tokenDescriptor" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.CreateSamlSubject(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>Creates a SAML 2.0 subject for the assertion.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.Saml2Subject" /> that represents the subject of the assertion.</returns>
      <param name="tokenDescriptor">The security token descriptor from which to create the subject.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tokenDescriptor" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)">
      <summary>Creates the security token reference when the token is not attached to the message.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> that represents the token reference. (An instance of <see cref="T:System.IdentityModel.Tokens.Saml2AssertionKeyIdentifierClause" /> is actually returned.)</returns>
      <param name="token">The SAML token.</param>
      <param name="attached">A value that indicates whether an attached or unattached reference should be created.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.CreateStatements(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>Creates SAML 2.0 statements to be included in the assertion.</summary>
      <returns>An enumeration of <see cref="T:System.IdentityModel.Tokens.Saml2Statement" /> that contains the statements.</returns>
      <param name="tokenDescriptor">The token descriptor from which to create the statements.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tokenDescriptor" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>Creates a security token based on a token descriptor.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> that represents the SAML 2.0 security token. (The token returned is actually an instance of <see cref="T:System.IdentityModel.Tokens.Saml2SecurityToken" />.)</returns>
      <param name="tokenDescriptor">The token descriptor from which to create the security token.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tokenDescriptor" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.CreateWindowsIdentity(System.String)">
      <summary>Creates a <see cref="T:System.Security.Principal.WindowsIdentity" /> object using the specified User Principal Name (UPN).</summary>
      <returns>The Windows identity that was created.</returns>
      <param name="upn">The UPN to use to create the identity.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="upn" /> is null or an empty string.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.CreateXmlStringFromAttributes(System.Collections.Generic.IEnumerable{System.IdentityModel.Tokens.Saml2Attribute})">
      <summary>Builds an XML formatted string from a collection of SAML 2.0 attributes that represent the Actor.</summary>
      <returns>A well-formed XML string constructed using the attributes.</returns>
      <param name="attributes">An enumeration of type <see cref="T:System.IdentityModel.Tokens.Saml2Attribute" /> that contains the attributes.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.DenormalizeAuthenticationType(System.String)">
      <summary>Returns the <see cref="T:System.IdentityModel.Tokens.Saml2Constants.AuthenticationContextClasses" /> value matching a normalized value for a SAML authentication context class reference.</summary>
      <returns>A string that contains one of the <see cref="T:System.IdentityModel.Tokens.Saml2Constants.AuthenticationContextClasses" /> constants.</returns>
      <param name="normalizedAuthenticationType">The normalized value.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.DetectReplayedToken(System.IdentityModel.Tokens.SecurityToken)">
      <summary>Throws an exception if the specified token already exists in the token replay cache; otherwise the token is added to the cache.</summary>
      <param name="token">A <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> that represents the SAML 2.0 security token (the token should be of type <see cref="T:System.IdentityModel.Tokens.Saml2SecurityToken" />) to be checked.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" /> property is null. -or-There is no <see cref="T:System.IdentityModel.Tokens.TokenReplayCache" /> configured under the <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.Caches" /> property of the handler configuration (accessed through the <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" /> property).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="token" /> cannot be cast as an instance of <see cref="T:System.IdentityModel.Tokens.Saml2SecurityToken" />.</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenValidationException">The ID of the assertion associated with the token is null or empty. (The <see cref="P:System.IdentityModel.Tokens.Saml2SecurityToken.Assertion" /> property of the token references a <see cref="T:System.IdentityModel.Tokens.Saml2Assertion" /> that has an <see cref="P:System.IdentityModel.Tokens.Saml2Assertion.Id" /> property that references a <see cref="T:System.IdentityModel.Tokens.Saml2Id" /> with a <see cref="P:System.IdentityModel.Tokens.Saml2Id.Value" /> property that is null or empty.)</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenReplayDetectedException">The token already exists in the <see cref="T:System.IdentityModel.Tokens.TokenReplayCache" />.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.FindUpn(System.Security.Claims.ClaimsIdentity)">
      <summary>Finds the UPN claim value in the specified <see cref="T:System.Security.Claims.ClaimsIdentity" /> object for the purpose of mapping the identity to a <see cref="T:System.Security.Principal.WindowsIdentity" /> object.</summary>
      <returns>A string that contains the UPN claim value found.</returns>
      <param name="claimsIdentity">The claims identity object containing the desired UPN claim.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.GetEncryptingCredentials(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>Gets the token encrypting credentials. Override this method to change the token encrypting credentials.</summary>
      <returns>An <see cref="T:System.IdentityModel.Tokens.EncryptingCredentials" /> that represents the token encrypting credentials.</returns>
      <param name="tokenDescriptor">Retrieves some scope encrypting credentials from the Scope object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tokenDescriptor" /> is null.</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">The encrypting credentials retrieved from the token descriptor are asymmetric.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.GetSigningCredentials(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>Gets the credentials for signing the assertion.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SigningCredentials" /> that represents the credentials for signing the assertion.</returns>
      <param name="tokenDescriptor">The token descriptor.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tokenDescriptor" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.GetTokenReplayCacheEntryExpirationTime(System.IdentityModel.Tokens.Saml2SecurityToken)">
      <summary>Returns the time until which the token should be held in the token replay cache.</summary>
      <returns>A <see cref="T:System.DateTime" /> that represents the expiration time.</returns>
      <param name="token">The token for which to return the expiration time.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.GetTokenTypeIdentifiers">
      <summary>Gets the token type identifier(s) supported by this handler.</summary>
      <returns>An array of strings that contains the token type identifier(s) supported by this handler.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.KeyInfoSerializer">
      <summary>Gets or sets the security token serializer that is used to serialize and deserialize key identifiers.</summary>
      <returns>A <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" /> that represents the serializer.</returns>
      <exception cref="T:System.ArgumentNullException">An attempt to set the value to null occurs.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)">
      <summary>Loads custom configuration from XML.</summary>
      <param name="customConfigElements">An <see cref="T:System.Xml.XmlNodeList" /> that specifies the SAML token authentication requirements.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="customConfigElements" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The configuration specified in <paramref name="customConfigElements" /> is not valid.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.NormalizeAuthenticationContextClassReference(System.String)">
      <summary>Returns the normalized value matching a SAML authentication context class reference.</summary>
      <returns>A string that contains the normalized value.</returns>
      <param name="saml2AuthenticationContextClassReference">One of the <see cref="T:System.IdentityModel.Tokens.Saml2Constants.AuthenticationContextClasses" /> constants.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ProcessAttributeStatement(System.IdentityModel.Tokens.Saml2AttributeStatement,System.Security.Claims.ClaimsIdentity,System.String)">
      <summary>Creates claims from a SAML 2.0 attribute statement and adds them to the specified subject.</summary>
      <param name="statement">The <see cref="T:System.IdentityModel.Tokens.Saml2AttributeStatement" /> from which the claims are created.</param>
      <param name="subject">The subject to which the claims are added.</param>
      <param name="issuer">The issuer.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="statement" /> is null.-or-<paramref name="subject" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ProcessAuthenticationStatement(System.IdentityModel.Tokens.Saml2AuthenticationStatement,System.Security.Claims.ClaimsIdentity,System.String)">
      <summary>Creates claims from a SAML 2.0 authentication statement and adds them to the specified subject.</summary>
      <param name="statement">The <see cref="T:System.IdentityModel.Tokens.Saml2AuthenticationStatement" /> from which the claims are created.</param>
      <param name="subject">The subject to which the claims are added.</param>
      <param name="issuer">The issuer.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="statement" /> is null.-or-<paramref name="subject" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ProcessAuthorizationDecisionStatement(System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement,System.Security.Claims.ClaimsIdentity,System.String)">
      <summary>Creates claims from a SAML 2.0 authorization decision statement and adds them to the specified subject.</summary>
      <param name="statement">The <see cref="T:System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement" /> from which the claims are created.</param>
      <param name="subject">The subject to which the claims are added.</param>
      <param name="issuer">The issuer.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ProcessSamlSubject(System.IdentityModel.Tokens.Saml2Subject,System.Security.Claims.ClaimsIdentity,System.String)">
      <summary>Creates claims from the SAML 2.0 subject and adds them to the specified subject.</summary>
      <param name="assertionSubject">The <see cref="T:System.IdentityModel.Tokens.Saml2Subject" /> from which the claims are created.</param>
      <param name="subject">The subject to which the claims are added.</param>
      <param name="issuer">The issuer.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="statement" /> is null.-or-<paramref name="assertionSubject" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ProcessStatement(System.Collections.ObjectModel.Collection{System.IdentityModel.Tokens.Saml2Statement},System.Security.Claims.ClaimsIdentity,System.String)">
      <summary>Creates claims from a collection of SAML 2.0 statements and adds them to the specified subject.</summary>
      <param name="statements">A collection of <see cref="T:System.IdentityModel.Tokens.Saml2Statement" /> from which the claims are created.</param>
      <param name="subject">The subject to which the claims are added.</param>
      <param name="issuer">The issuer.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="subject" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadAction(System.Xml.XmlReader)">
      <summary>Reads the &lt;saml:Action&gt; element.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.Saml2Action" /> that represents the Action element that is read.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> positioned at the element to read.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadAdvice(System.Xml.XmlReader)">
      <summary>Reads the &lt;saml:Advice&gt; element.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.Saml2Advice" /> that represents the Advice element that is read.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> positioned at the element to read.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadAssertion(System.Xml.XmlReader)">
      <summary>Reads the &lt;saml:Assertion&gt; element.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.Saml2Assertion" /> that represents the Assertion element that is read.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> positioned at the element to read.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadAttribute(System.Xml.XmlReader)">
      <summary>Reads the &lt;saml:Attribute&gt; element.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.Saml2Assertion" /> that represents the Assertion element that is read.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> positioned at the element to read.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadAttributeStatement(System.Xml.XmlReader)">
      <summary>Reads the &lt;saml:AttributeStatement&gt; element, or a &lt;saml:Statement&gt; element that specifies an xsi:type of saml:AttributeStatementType.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.Saml2AttributeStatement" /> that represents the element that is read.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> positioned at the element to read.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadAttributeValue(System.Xml.XmlReader,System.IdentityModel.Tokens.Saml2Attribute)">
      <summary>Reads an attribute value.</summary>
      <returns>A string that contains the attribute value.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> positioned at the element to read.</param>
      <param name="attribute">The attribute being read.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadAudienceRestriction(System.Xml.XmlReader)">
      <summary>Reads the &lt;saml:AudienceRestriction&gt; element or a &lt;saml:Condition&gt; element that specifies an xsi:type of saml:AudienceRestrictionType.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.Saml2AudienceRestriction" /> that represents the element that was read.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> positioned at the element to read.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadAuthenticationContext(System.Xml.XmlReader)">
      <summary>Reads the &lt;saml:AuthnContext&gt; element.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.Saml2AuthenticationContext" /> that represents the AuthnContext element that is read.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> positioned at the element to read.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadAuthenticationStatement(System.Xml.XmlReader)">
      <summary>Reads the &lt;saml:AuthnStatement&gt; element or a &lt;saml:Statement&gt; element that specifies an xsi:type of saml:AuthnStatementType.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.Saml2AuthenticationStatement" /> that represents the element that is read.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> positioned at the element to read.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadAuthorizationDecisionStatement(System.Xml.XmlReader)">
      <summary>Reads the &lt;saml:AuthzDecisionStatement&gt; element or a &lt;saml:Statement&gt; element that specifies an xsi:type of saml:AuthzDecisionStatementType.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement" /> that represents the element that is read.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> positioned at the element to read.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadConditions(System.Xml.XmlReader)">
      <summary>Reads the &lt;saml:Conditions&gt; element.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.Saml2Conditions" /> that represents the Conditions element that is read.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> positioned at the element to read.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="reader" /> is not positioned at a Conditions element.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadEncryptedId(System.Xml.XmlReader)">
      <summary>Reads the &lt;saml:EncryptedId&gt; element.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.Saml2NameIdentifier" /> that represents the EncryptedId element that was read.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> pointing at the EncryptedId element.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="reader" /> is not positioned at an EncryptedID element.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadEvidence(System.Xml.XmlReader)">
      <summary>Reads the &lt;saml:Evidence&gt; element.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.Saml2Evidence" /> that represents the Evidence element that is read.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> positioned at the element to read.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadIssuer(System.Xml.XmlReader)">
      <summary>Reads the &lt;saml:Issuer&gt; element.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.Saml2NameIdentifier" /> that represents the Issuer element that is read.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> positioned at the element to read.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)">
      <summary>Reads a SecurityKeyIdentifierClause.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> that represents the security key identifier clause.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> with which to read.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadNameId(System.Xml.XmlReader)">
      <summary>Reads the &lt;saml:NameID&gt; element.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.Saml2NameIdentifier" /> that represents the NameID element that was read.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> positioned at a NameID element.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadNameIdType(System.Xml.XmlReader)">
      <summary>Both &lt;Issuer&gt; and &lt;NameID&gt; are of NameIDType. This method reads the content of either one of those elements.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.Saml2NameIdentifier" /> constructed from the XML.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> positioned at NameID type.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadProxyRestriction(System.Xml.XmlReader)">
      <summary>Reads the &lt;saml:ProxyRestriction&gt; element, or a &lt;saml:Condition&gt; element that specifies an xsi:type of saml:ProxyRestrictionType.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.Saml2ProxyRestriction" /> that represents the element that was read.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> positioned at the element to read.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadSigningKeyInfo(System.Xml.XmlReader,System.IdentityModel.Tokens.Saml2Assertion)">
      <summary>Deserializes the SAML Signing KeyInfo.</summary>
      <returns>The <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> that represents the key to use to check the signature.</returns>
      <param name="reader">An XmlReader that can be positioned at a ds:KeyInfo element.</param>
      <param name="assertion">The assertion that is having the signature checked.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadStatement(System.Xml.XmlReader)">
      <summary>Reads the &lt;saml:Statement&gt; element.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.Saml2Statement" /> that represents the Statement element that was read.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> positioned at the element to read.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadSubject(System.Xml.XmlReader)">
      <summary>Reads the &lt;saml:Subject&gt; element.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.Saml2Subject" /> that represents the Subject element that was read.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> positioned at the element to read.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadSubjectConfirmation(System.Xml.XmlReader)">
      <summary>Reads the &lt;SubjectConfirmation&gt; element.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.Saml2SubjectConfirmation" /> that represents the SubjectConfirmation element that was read.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> positioned at the element to read.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadSubjectConfirmationData(System.Xml.XmlReader)">
      <summary>Reads the &lt;saml:SubjectConfirmationData&gt; element.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.Saml2SubjectConfirmationData" /> that represents the SubjectConfirmationData element that was read.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> positioned at the element to read.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadSubjectId(System.Xml.XmlReader,System.String)">
      <summary>This method handles the construct used in the &lt;Subject&gt; and &lt;SubjectConfirmation&gt; elements for ID.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.Saml2NameIdentifier" /> constructed from the XML.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> positioned at the Subject ID XML.</param>
      <param name="parentElement">The parent element that contains this Subject ID.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadSubjectKeyInfo(System.Xml.XmlReader)">
      <summary>Deserializes the SAML Subject &lt;ds:KeyInfo&gt; element.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> that represents the contents of the &lt;ds:KeyInfo&gt; element.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> positioned at a &lt;ds:KeyInfo&gt; element.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadSubjectLocality(System.Xml.XmlReader)">
      <summary>Reads the &lt;saml:SubjectLocality&gt; element.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.Saml2SubjectLocality" /> that represents the SubjectLocality element that was read.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> positioned at the element to read.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadToken(System.Xml.XmlReader)">
      <summary>Reads a SAML 2.0 token from the specified stream.</summary>
      <returns>An instance of <see cref="T:System.IdentityModel.Tokens.Saml2SecurityToken" />.</returns>
      <param name="reader">A <see cref="T:System.Xml.XmlReader" /> stream to a SAML 2.0 Security Token.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" /> property is null. -or- The <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.IssuerTokenResolver" /> property of the configuration specified by the <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" /> property is null. -or- The <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.ServiceTokenResolver" /> property of the configuration specified by the <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" /> property is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ResolveIssuerToken(System.IdentityModel.Tokens.Saml2Assertion,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>Resolves the Signing Key Identifier to a <see cref="T:System.IdentityModel.Tokens.SecurityToken" />.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> that represents the resolved token.</returns>
      <param name="assertion">The <see cref="T:System.IdentityModel.Tokens.Saml2Assertion" /> for which the Issuer token is to be resolved.</param>
      <param name="issuerResolver">The current <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> associated with this handler.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assertion" /> is null.</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">The handler is unable to resolve the token.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ResolveSecurityKeys(System.IdentityModel.Tokens.Saml2Assertion,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>Resolves the collection of <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> referenced in a <see cref="T:System.IdentityModel.Tokens.Saml2Assertion" />.</summary>
      <returns>A collection of type <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> that contains the keys.</returns>
      <param name="assertion">The <see cref="T:System.IdentityModel.Tokens.Saml2Assertion" /> to process.</param>
      <param name="resolver">The <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> to use in resolving the <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> objects.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assertion" /> is null.</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">The handler is unable to resolve the keys.</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.SamlSecurityTokenRequirement">
      <summary>Gets or sets the security token requirements for this instance.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SamlSecurityTokenRequirement" /> that specifies the requirements.</returns>
      <exception cref="T:System.ArgumentNullException">An attempt to set the value to null occurs.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.SetDelegateFromAttribute(System.IdentityModel.Tokens.Saml2Attribute,System.Security.Claims.ClaimsIdentity,System.String)">
      <summary>This method gets called when a special type of <see cref="T:System.IdentityModel.Tokens.Saml2Attribute" /> is detected. The <see cref="T:System.IdentityModel.Tokens.Saml2Attribute" /> passed in wraps a <see cref="T:System.IdentityModel.Tokens.Saml2Attribute" /> that contains a collection of attribute values (in the <see cref="P:System.IdentityModel.Tokens.Saml2Attribute.Values" /> property), each of which will get mapped to a claim. All of the claims will be returned in an <see cref="T:System.Security.Claims.ClaimsIdentity" /> with the specified issuer.</summary>
      <param name="attribute">The <see cref="T:System.IdentityModel.Tokens.Saml2Attribute" /> to use.</param>
      <param name="subject">The <see cref="T:System.Security.Claims.ClaimsIdentity" /> that is the subject of this token.</param>
      <param name="issuer">The issuer of the claim.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.IdentityModel.Tokens.Saml2Attribute" /> does not contain any valid attribute values.</exception>
    </member>
    <member name="F:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.TokenProfile11ValueType">
      <summary>The key identifier value type for SAML 2.0 assertion IDs, as defined by the OASIS Web Services Security SAML Token Profile 1.1. This is a URI.</summary>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.TokenType">
      <summary>Gets the token type supported by this handler.</summary>
      <returns>The <see cref="T:System.Type" /> of the <see cref="T:System.IdentityModel.Tokens.Saml2SecurityToken" /> class.</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.TryResolveIssuerToken(System.IdentityModel.Tokens.Saml2Assertion,System.IdentityModel.Selectors.SecurityTokenResolver,System.IdentityModel.Tokens.SecurityToken@)">
      <summary>Resolves the Signing Key Identifier to a SecurityToken.</summary>
      <returns>true if the token is resolved.</returns>
      <param name="assertion">The <see cref="T:System.IdentityModel.Tokens.Saml2Assertion" /> for which the Issuer token is to be resolved.</param>
      <param name="issuerResolver">The current <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> associated with this handler.</param>
      <param name="token">When this method returns, contains the resolved security token if a token was successfully resolved.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ValidateConditions(System.IdentityModel.Tokens.Saml2Conditions,System.Boolean)">
      <summary>Validates the specified <see cref="T:System.IdentityModel.Tokens.Saml2Conditions" /> object.</summary>
      <param name="conditions">The SAML 2.0 condition to be validated.</param>
      <param name="enforceAudienceRestriction">true to check for Audience Restriction condition.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ValidateConfirmationData(System.IdentityModel.Tokens.Saml2SubjectConfirmationData)">
      <summary>Validates the specified <see cref="T:System.IdentityModel.Tokens.Saml2SubjectConfirmationData" /> object.</summary>
      <param name="confirmationData">The SAML 2.0 subject confirmation data.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
      <summary>Validates the token data and returns its claims.</summary>
      <returns>The identities contained in the token.</returns>
      <param name="token">The SAML 2.0 token to be validated.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteAction(System.Xml.XmlWriter,System.IdentityModel.Tokens.Saml2Action)">
      <summary>Writes the &lt;saml:Action&gt; element.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> with which to write the data.</param>
      <param name="data">The data to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> is null.-or-<paramref name="writer" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteAdvice(System.Xml.XmlWriter,System.IdentityModel.Tokens.Saml2Advice)">
      <summary>Writes the &lt;saml:Advice&gt; element.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> with which to write the data.</param>
      <param name="data">The data to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> is null.-or-<paramref name="writer" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteAssertion(System.Xml.XmlWriter,System.IdentityModel.Tokens.Saml2Assertion)">
      <summary>Serializes the specified SAML assertion to the specified XML writer.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to use for the serialization.</param>
      <param name="data">A <see cref="T:System.IdentityModel.Tokens.Saml2Assertion" /> that represents the assertion to serialize.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null.-or-<paramref name="data" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The assertion specified by <paramref name="data" /> has both the <see cref="P:System.IdentityModel.Tokens.Saml2Assertion.EncryptingCredentials" /> and <see cref="T:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReceivedEncryptingCredentials" /> properties set to null.-or-There are no statements and no subject in the assertion specified by <paramref name="data" />. (Both the <see cref="P:System.IdentityModel.Tokens.Saml2Assertion.Subject" /> property and the <see cref="P:System.IdentityModel.Tokens.Saml2Assertion.Statements" /> property are null.) If an assertion does not contain statements, it must contain a subject.-or-The assertion specified by <paramref name="data" /> contains an authentication, attribute, or authorization decision statement and no subject—these statements require a subject. (The <see cref="P:System.IdentityModel.Tokens.Saml2Assertion.Statements" /> property contains a statement of type <see cref="T:System.IdentityModel.Tokens.Saml2AttributeStatement" />, <see cref="T:System.IdentityModel.Tokens.Saml2AuthenticationStatement" />, or <see cref="T:System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement" /> and the <see cref="P:System.IdentityModel.Tokens.Saml2Assertion.Subject" /> property is null).</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The token encrypting credentials do not have a Symmetric Key specified.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteAttribute(System.Xml.XmlWriter,System.IdentityModel.Tokens.Saml2Attribute)">
      <summary>Writes the &lt;saml:Attribute&gt; element.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> with which to write the data.</param>
      <param name="data">The data to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> is null.-or-<paramref name="writer" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteAttributeStatement(System.Xml.XmlWriter,System.IdentityModel.Tokens.Saml2AttributeStatement)">
      <summary>Writes the &lt;saml:AttributeStatement&gt; element.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> with which to write the data.</param>
      <param name="data">The data to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> is null.-or-<paramref name="writer" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteAttributeValue(System.Xml.XmlWriter,System.String,System.IdentityModel.Tokens.Saml2Attribute)">
      <summary>Writes the saml:Attribute value.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> with which to write.</param>
      <param name="value">A string that contains the attribute value to be written.</param>
      <param name="attribute">A <see cref="T:System.IdentityModel.Tokens.Saml2Attribute" /> that represents the attribute whose value is being written.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteAudienceRestriction(System.Xml.XmlWriter,System.IdentityModel.Tokens.Saml2AudienceRestriction)">
      <summary>Writes the &lt;saml:AudienceRestriction&gt; element.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> with which to write the data.</param>
      <param name="data">The data to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> is null.-or-<paramref name="writer" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteAuthenticationContext(System.Xml.XmlWriter,System.IdentityModel.Tokens.Saml2AuthenticationContext)">
      <summary>Writes the &lt;saml:AuthnContext&gt; element.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> with which to write the data.</param>
      <param name="data">The data to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> is null.-or-<paramref name="writer" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteAuthenticationStatement(System.Xml.XmlWriter,System.IdentityModel.Tokens.Saml2AuthenticationStatement)">
      <summary>Writes the &lt;saml:AuthnStatement&gt; element.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> with which to write the data.</param>
      <param name="data">The data to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> is null.-or-<paramref name="writer" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteAuthorizationDecisionStatement(System.Xml.XmlWriter,System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement)">
      <summary>Writes the &lt;saml:AuthzDecisionStatement&gt; element.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> with which to write the data.</param>
      <param name="data">The data to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> is null.-or-<paramref name="writer" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteConditions(System.Xml.XmlWriter,System.IdentityModel.Tokens.Saml2Conditions)">
      <summary>Writes the &lt;saml:Conditions&gt; element.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> with which to write the data.</param>
      <param name="data">The data to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> is null.-or-<paramref name="writer" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteEvidence(System.Xml.XmlWriter,System.IdentityModel.Tokens.Saml2Evidence)">
      <summary>Writes the &lt;saml:Evidence&gt; element.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> with which to write the data.</param>
      <param name="data">The data to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> is null.-or-<paramref name="writer" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteIssuer(System.Xml.XmlWriter,System.IdentityModel.Tokens.Saml2NameIdentifier)">
      <summary>Writes the &lt;saml:Issuer&gt; element.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> with which to write the data.</param>
      <param name="data">The data to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> is null.-or-<paramref name="writer" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteKeyIdentifierClause(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>Serializes a <see cref="T:System.IdentityModel.Tokens.Saml2AssertionKeyIdentifierClause" /> to the specified XML writer.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to serialize the key identifier clause.</param>
      <param name="securityKeyIdentifierClause">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> that represents the key identifier clause to be serialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> is null.-or-<paramref name="securityKeyIdentifierClause" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteNameId(System.Xml.XmlWriter,System.IdentityModel.Tokens.Saml2NameIdentifier)">
      <summary>Writes the &lt;saml:NameID&gt; element.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> with which to serialize the <see cref="T:System.IdentityModel.Tokens.Saml2NameIdentifier" />.</param>
      <param name="data">The <see cref="T:System.IdentityModel.Tokens.Saml2NameIdentifier" /> to be serialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> is null.-or-<paramref name="writer" /> is null.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The Saml2NameIdentifier encrypting credentials must have a Symmetric Key specified.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteNameIdType(System.Xml.XmlWriter,System.IdentityModel.Tokens.Saml2NameIdentifier)">
      <summary>Both &lt;Issuer&gt; and &lt;NameID&gt; are of NameIDType. This method writes the content of either one of those elements.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> with which to serialize the NameID type.</param>
      <param name="data">The <see cref="T:System.IdentityModel.Tokens.Saml2NameIdentifier" /> to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> is null.-or-<paramref name="writer" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteProxyRestriction(System.Xml.XmlWriter,System.IdentityModel.Tokens.Saml2ProxyRestriction)">
      <summary>Writes the &lt;saml:ProxyRestriction&gt; element.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> with which to write the data.</param>
      <param name="data">The data to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> is null.-or-<paramref name="writer" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteSigningKeyInfo(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>Writes the Signing &lt;ds:KeyInfo&gt; element using the specified XML writer.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> with which to serialize the key identifier.</param>
      <param name="data">The <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> that represents the key identifier to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="signingKeyIdentifier" /> is null.-or-<paramref name="writer" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The handler cannot serialize the key identifier specified by <paramref name="signingKeyIdentifier" />.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteStatement(System.Xml.XmlWriter,System.IdentityModel.Tokens.Saml2Statement)">
      <summary>Writes a Saml2Statement.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> with which to write the data.</param>
      <param name="data">The data to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> is null.-or-<paramref name="writer" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteSubject(System.Xml.XmlWriter,System.IdentityModel.Tokens.Saml2Subject)">
      <summary>Writes the &lt;saml:Subject&gt; element.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> with which to write the data.</param>
      <param name="data">The data to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> is null.-or-<paramref name="writer" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteSubjectConfirmation(System.Xml.XmlWriter,System.IdentityModel.Tokens.Saml2SubjectConfirmation)">
      <summary>Writes the &lt;saml:SubjectConfirmation&gt; element.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> with which to write the data.</param>
      <param name="data">The data to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> is null.-or-<paramref name="writer" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteSubjectConfirmationData(System.Xml.XmlWriter,System.IdentityModel.Tokens.Saml2SubjectConfirmationData)">
      <summary>Writes the &lt;saml:SubjectConfirmationData&gt; element.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> with which to write the data.</param>
      <param name="data">The data to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> is null.-or-<paramref name="writer" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteSubjectKeyInfo(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>Serializes the Subject &lt;ds:KeyInfo&gt; element using the specified XML writer.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> with which to serialize the key identifier.</param>
      <param name="data">The <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> that represents the key identifier to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> is null.-or-<paramref name="writer" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteSubjectLocality(System.Xml.XmlWriter,System.IdentityModel.Tokens.Saml2SubjectLocality)">
      <summary>Writes the &lt;saml:SubjectLocality&gt; element.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> with which to write the data.</param>
      <param name="data">The data to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> is null.-or-<paramref name="writer" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
      <summary>Writes a Saml2 Token to the specified XML writer.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> with which to write the data.</param>
      <param name="token">The token to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> is null.-or-<paramref name="writer" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="token" /> is not a <see cref="T:System.IdentityModel.Tokens.Saml2SecurityToken" /> object.</exception>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2Statement">
      <summary>Represents the StatementAbstractType specified in [Saml2Core, 2.7.1].</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2Statement.#ctor">
      <summary>Called from constructors in derived classes to initialize the <see cref="T:System.IdentityModel.Tokens.Saml2Statement" /> class.</summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2Subject">
      <summary>Represents the Subject element specified in [Saml2Core, 2.4.1].</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2Subject.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.Saml2Subject" /> class.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2Subject.#ctor(System.IdentityModel.Tokens.Saml2NameIdentifier)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.Saml2Subject" /> class with the specified <see cref="T:System.IdentityModel.Tokens.Saml2NameIdentifier" /> object.</summary>
      <param name="nameId">A <see cref="T:System.IdentityModel.Tokens.Saml2NameIdentifier" /> that represents the name identifier.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2Subject.#ctor(System.IdentityModel.Tokens.Saml2SubjectConfirmation)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.Saml2Subject" /> class with the specified <see cref="T:System.IdentityModel.Tokens.Saml2SubjectConfirmation" /> object.</summary>
      <param name="subjectConfirmation">A <see cref="T:System.IdentityModel.Tokens.Saml2SubjectConfirmation" /> that contains confirmation information.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="subjectConfirmation" /> is null.</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Subject.NameId">
      <summary>Gets or sets the identifier for the subject. [Saml2Core, 2.4.1]</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.Saml2NameIdentifier" /> that contains the identifier.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Subject.SubjectConfirmations">
      <summary>Gets a collection that contains information that allows the subject to be confirmed. [Saml2Core, 2.4.1]</summary>
      <returns>A collection of type <see cref="T:System.IdentityModel.Tokens.Saml2SubjectConfirmation" />.</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2SubjectConfirmation">
      <summary>Represents the SubjectConfirmation element specified in [Saml2Core, 2.4.1.1].</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SubjectConfirmation.#ctor(System.Uri)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.Saml2SubjectConfirmation" /> class with the specified confirmation method.</summary>
      <param name="method">The <see cref="T:System.Uri" /> that indicates the confirmation method.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not an absolute URI.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SubjectConfirmation.#ctor(System.Uri,System.IdentityModel.Tokens.Saml2SubjectConfirmationData)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.Saml2SubjectConfirmation" /> class with the specified confirmation method and additional confirmation information.</summary>
      <param name="method">The <see cref="T:System.Uri" /> that indicates the confirmation method.</param>
      <param name="data">The <see cref="T:System.IdentityModel.Tokens.Saml2SubjectConfirmationData" /> that contains the additional confirmation information.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not an absolute URI.</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SubjectConfirmation.Method">
      <summary>Gets or sets a URI reference that identifies a protocol or mechanism to be used to confirm the subject. [Saml2Core, 2.4.1.1]</summary>
      <returns>A <see cref="T:System.Uri" /> that represents the reference.</returns>
      <exception cref="T:System.ArgumentNullException">An attempt to set the property to null occurs.</exception>
      <exception cref="T:System.ArgumentException">An attempt to set a value that is not an absolute URI occurs.</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SubjectConfirmation.NameIdentifier">
      <summary>Gets or sets the identifier for the entity expected to satisfy the enclosing subject confirmation requirements. [Saml2Core, 2.4.1.1]</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.Saml2NameIdentifier" /> that specifies the entity.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SubjectConfirmation.SubjectConfirmationData">
      <summary>Gets or sets additional confirmation information to be used by a specific confirmation method. [Saml2Core, 2.4.1.1]</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.Saml2SubjectConfirmationData" /> that contains information to be used with the confirmation method.</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2SubjectConfirmationData">
      <summary>Represents the SubjectConfirmationData element and the associated KeyInfoConfirmationDataType defined in [Saml2Core, 2.4.1.2-2.4.1.3].</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SubjectConfirmationData.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.Saml2SubjectConfirmationData" /> class.</summary>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SubjectConfirmationData.Address">
      <summary>Gets or sets the network address/location from which an attesting entity can present the assertion. [Saml2Core, 2.4.1.2]</summary>
      <returns>A string that contains the address.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SubjectConfirmationData.InResponseTo">
      <summary>Gets or sets the ID of a SAML protocol message in response to which an attesting entity can present the assertion. [Saml2Core, 2.4.1.2]</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.Saml2Id" /> that represents the ID.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SubjectConfirmationData.KeyIdentifiers">
      <summary>Gets the collection of cryptographic keys that are used in some way to authenticate an attesting entity. [Saml2Core, 2.4.1.3]</summary>
      <returns>Returns a collection of type <see cref="T:Microsoft.IdentityModel.Tokens.SecurityKeyIdentifier" /> that contains the keys.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SubjectConfirmationData.NotBefore">
      <summary>Gets or sets a time instant before which the subject cannot be confirmed. [Saml2Core, 2.4.1.2]</summary>
      <returns>A nullable <see cref="T:System.DateTime" /> that contains the time instant in UTC.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SubjectConfirmationData.NotOnOrAfter">
      <summary>Gets or sets the time instant at which the subject can no longer be confirmed. [Saml2Core, 2.4.1.2]</summary>
      <returns>A nullable <see cref="T:System.DateTime" /> that contains the time instant in UTC.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SubjectConfirmationData.Recipient">
      <summary>Gets or sets a URI that specifies the entity or location to which an attesting entity can present the assertion. [Saml2Core, 2.4.1.2]</summary>
      <returns>A <see cref="T:System.Uri" /> that specifies the entity or location.</returns>
      <exception cref="T:System.ArgumentException">An attempt to set a value that is not null and is not an absolute URI occurs.</exception>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2SubjectLocality">
      <summary>Represents the SubjectLocality element specified in [Saml2Core, 2.7.2.1].</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SubjectLocality.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.Saml2SubjectLocality" /> class.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SubjectLocality.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.Saml2SubjectLocality" /> class from an address and DNS name.</summary>
      <param name="address">A string that contains the address.</param>
      <param name="dnsName">A string that contains the DNS name.</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SubjectLocality.Address">
      <summary>Gets or sets the network address of the system from which the principal identified by the subject was authenticated. [Saml2Core, 2.7.2.1]</summary>
      <returns>A string that contains the address.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SubjectLocality.DnsName">
      <summary>Gets or sets the DNS name of the system from which the principal identified by the subject was authenticated. [Saml2Core, 2.7.2.1]</summary>
      <returns>A string that contains the DNS name.</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlAccessDecision">
      <summary>Specifies whether the subject of a <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> security token is granted access to a given resource.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.IdentityModel.Tokens.SamlAccessDecision.Deny">
      <summary>Specifies that access to a resource is denied.</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SamlAccessDecision.Indeterminate">
      <summary>Specifies that the security token service that issued the <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> security token does not have enough information to determine the access permissions for a particular resource. A recipient of the <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> security token must use other means to determine the user's access permissions.</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SamlAccessDecision.Permit">
      <summary>Specifies that access to a resource is granted.</summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlAction">
      <summary>Represents the &lt;saml:Action&gt; element within a SAML assertion that contains an action on a specified resource.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAction.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SamlAction" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAction.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SamlAction" /> class using the specified action. </summary>
      <param name="action">The action that the subject of the <see cref="T:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement" /> security token seeks to perform on the specified resource.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.-or-<paramref name="action" /> is <see cref="F:System.String.Empty" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAction.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SamlAction" /> class using the specified action.</summary>
      <param name="action">The action that the subject of the <see cref="T:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement" /> security token seeks to perform on the specified resource.</param>
      <param name="ns">The XML namespace in which the <paramref name="action" /> parameter is defined.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.-or-<paramref name="action" /> is <see cref="F:System.String.Empty" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAction.Action">
      <summary>Gets or sets the action that the subject of the <see cref="T:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement" /> can perform on the specified resource.</summary>
      <returns>Gets or sets the action that the subject of the <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> security token seeks to perform on the specified resource.</returns>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.IdentityModel.Tokens.SamlAction.Action" /> property is set to null.-or-The <see cref="P:System.IdentityModel.Tokens.SamlAction.Action" /> property is set to <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.InvalidOperationException">The value of the <see cref="P:System.IdentityModel.Tokens.SamlAction.IsReadOnly" /> property is true and the <see cref="P:System.IdentityModel.Tokens.SamlAction.Action" /> property is set.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAction.IsReadOnly">
      <summary>Gets a value that indicates whether the properties of this instance are read-only.</summary>
      <returns>true if the properties of this instance are read-only; otherwise, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAction.MakeReadOnly">
      <summary>Causes this instance to be read-only.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAction.Namespace">
      <summary>Gets or sets the XML namespace in which the <see cref="P:System.IdentityModel.Tokens.SamlAction.Action" /> property is defined.</summary>
      <returns>The XML namespace in which the <see cref="P:System.IdentityModel.Tokens.SamlAction.Action" /> property is defined.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.IdentityModel.Tokens.SamlAction.IsReadOnly" /> property is true and the <see cref="P:System.IdentityModel.Tokens.SamlAction.Namespace" /> property is set.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAction.ReadXml(System.Xml.XmlDictionaryReader,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>Reads the &lt;saml:Action&gt; element using the specified XML reader.</summary>
      <param name="reader">A <see cref="T:System.Xml.XmlDictionaryReader" /> to read the &lt;saml:Action&gt; XML element.</param>
      <param name="samlSerializer">A <see cref="T:System.IdentityModel.Tokens.SamlSerializer" /> that is capable of reading XML elements in the SAML assertion that are defined in the SAML specification.</param>
      <param name="keyInfoSerializer">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" /> that can read a KeyInfo clause.</param>
      <param name="outOfBandTokenResolver">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> that determines the security token that created the digital signature for SAML assertions referenced by the &lt;saml:Advice&gt; XML element.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.-or-<paramref name="samlSerializer" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAction.WriteXml(System.Xml.XmlDictionaryWriter,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer)">
      <summary>Writes the <see cref="T:System.IdentityModel.Tokens.SamlAction" /> into the specified XML writer as a &lt;saml:Action&gt; element.</summary>
      <param name="writer">A <see cref="T:System.Xml.XmlDictionaryWriter" /> to write the &lt;saml:Action&gt; element.</param>
      <param name="samlSerializer">A <see cref="T:System.IdentityModel.Tokens.SamlSerializer" /> that is capable of writing the &lt;saml:Action&gt; element and its child elements and attributes that are defined in the SAML specification.</param>
      <param name="keyInfoSerializer">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" /> that is capable of writing KeyInfo clauses.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null.-or-<paramref name="samlSerializer" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlAdvice">
      <summary>Represents the &lt;saml:Advice&gt; element within a SAML assertion that contains additional information provided by the SAML authority.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAdvice.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SamlAdvice" /> class.  </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAdvice.#ctor(System.Collections.Generic.IEnumerable{System.IdentityModel.Tokens.SamlAssertion})">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SamlAdvice" /> class using the specified collection of SAML assertions. </summary>
      <param name="assertions">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of type <see cref="T:System.IdentityModel.Tokens.SamlAssertion" /> that contains SAML assertions that provides additional information for a SAML assertion.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="assertions" /> contains a null element.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAdvice.#ctor(System.Collections.Generic.IEnumerable{System.String})">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SamlAdvice" /> class.  </summary>
      <param name="references">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of type <see cref="T:System.String" /> that contains a collection of references to SAML assertions that provide additional information on a SAML assertion.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="references" /> contains a null element.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAdvice.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.IdentityModel.Tokens.SamlAssertion})">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SamlAdvice" /> class using the specified collections of SAML assertions and SAML assertion references. </summary>
      <param name="references">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of type <see cref="T:System.String" /> that contains a collection of references to SAML assertions that provide additional information on a SAML assertion.</param>
      <param name="assertions">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of type <see cref="T:System.IdentityModel.Tokens.SamlAssertion" /> that contains SAML assertions that provide additional information for a SAML assertion.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="references" /> contains a null element.-or-<paramref name="assertions" /> contains a null element.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAdvice.AssertionIdReferences">
      <summary>Gets a collection of references to SAML assertions.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> of type <see cref="T:System.String" /> that contains a collection of references to SAML assertions that provide additional information on a SAML assertion.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAdvice.Assertions">
      <summary>Gets a collection of SAML assertions.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> of type <see cref="T:System.IdentityModel.Tokens.SamlAssertion" /> that contains SAML assertions that provides additional information for a SAML assertion.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAdvice.IsReadOnly">
      <summary>Gets a value indicating whether the properties of this instance are read-only.</summary>
      <returns>true if the properties of this instance are read-only; otherwise, false. The default is false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAdvice.MakeReadOnly">
      <summary>Causes this instance to be read-only.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAdvice.ReadXml(System.Xml.XmlDictionaryReader,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>Reads the &lt;saml:Advice&gt; XML element using the specified XML reader.</summary>
      <param name="reader">An <see cref="T:System.Xml.XmlDictionaryReader" /> to read the &lt;saml:Advice&gt; XML element.</param>
      <param name="samlSerializer">A <see cref="T:System.IdentityModel.Tokens.SamlSerializer" /> that is capable of reading XML elements in the SAML assertion that are defined in the SAML specification.</param>
      <param name="keyInfoSerializer">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" /> that can read a KeyInfo clause.</param>
      <param name="outOfBandTokenResolver">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> that determines the security token that created the digital signature for SAML assertions that contain this &lt;saml:Advice&gt; XML element.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null-or-<paramref name="samlSerializer" /> is null</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">The &lt;saml:Advice&gt; element does not conform to the XML schema for the &lt;saml:Advice&gt; element.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAdvice.WriteXml(System.Xml.XmlDictionaryWriter,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer)">
      <summary>Writes this <see cref="T:System.IdentityModel.Tokens.SamlAdvice" /> into the specified XML writer as an &lt;saml:Advice&gt; element.</summary>
      <param name="writer">A <see cref="T:System.Xml.XmlDictionaryWriter" /> to write the &lt;saml:Advice&gt; element.</param>
      <param name="samlSerializer">A <see cref="T:System.IdentityModel.Tokens.SamlSerializer" /> that is capable of writing the &lt;saml:Advice&gt; element and its child elements and attributes that are defined in the SAML specification.</param>
      <param name="keyInfoSerializer">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" /> that is capable of writing KeyInfo clauses.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null-or-<paramref name="samlSerializer" /> is null</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlAssertion">
      <summary>Represents a Security Assertion Markup Language 1.1 (SAML 1.1) assertion.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAssertion.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SamlAssertion" /> class.  </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAssertion.#ctor(System.String,System.String,System.DateTime,System.IdentityModel.Tokens.SamlConditions,System.IdentityModel.Tokens.SamlAdvice,System.Collections.Generic.IEnumerable{System.IdentityModel.Tokens.SamlStatement})">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SamlAssertion" /> class using the specified SAML assertion identifier, issuer of the assertion, the date and time when the assertion was issued, a set of processing conditions, additional information, and a collection of SAML statements.</summary>
      <param name="assertionId">The identifier for the assertion.</param>
      <param name="issuer">The SAML authority that issued this SAML assertion.</param>
      <param name="issueInstant">A <see cref="T:System.DateTime" /> that specifies when the SAML assertion was issued.</param>
      <param name="samlConditions">A <see cref="T:System.IdentityModel.Tokens.SamlConditions" /> that specifies a set of conditions that may be taken into account when assessing the validity of the SAML assertion.</param>
      <param name="samlAdvice">A <see cref="T:System.IdentityModel.Tokens.SamlAdvice" /> that specifies additional information supplied by the SAML authority that can aide in the processing of the SAML assertion.</param>
      <param name="samlStatements">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of type <see cref="T:System.IdentityModel.Tokens.SamlStatement" /> that contain SAML statements.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="assertionId" /> is null-or-<paramref name="assertionId" /> is <see cref="F:System.String.Empty" />-or-<paramref name="assertionId" /> does not start with a letter or the "_" character.-or-<paramref name="issuer" /> is null-or-<paramref name="issuer" /> is <see cref="F:System.String.Empty" />-or-<paramref name="samlStatements" /> is null-or-<paramref name="samlStatements" /> does not contain any elements-or-<paramref name="samlStatements" /> contains a null element</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAssertion.Advice">
      <summary>Gets or sets additional information related to the <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> that is supplied by the SAML authority that can aide in the processing of the SAML assertion.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SamlAdvice" /> that specifies additional information that is supplied by the SAML authority that can aide in the processing of the SAML assertion.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.IdentityModel.Tokens.SamlAssertion.Advice" /> property is set and the <see cref="P:System.IdentityModel.Tokens.SamlAssertion.IsReadOnly" /> property is true.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAssertion.AssertionId">
      <summary>Gets or sets the identifier for this assertion.</summary>
      <returns>The identifier for this assertion.</returns>
      <exception cref="T:System.InvalidOperationException">The value of the <see cref="P:System.IdentityModel.Tokens.SamlAssertion.IsReadOnly" /> property is true and an attempt is made to set the <see cref="P:System.IdentityModel.Tokens.SamlAssertion.AssertionId" /> property.</exception>
      <exception cref="T:System.ArgumentException">An attempt is made to set the <see cref="P:System.IdentityModel.Tokens.SamlAssertion.AssertionId" /> property to null or an empty string.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAssertion.CanWriteSourceData">
      <summary>Gets a value that indicates whether this assertion was deserialized from XML source and can re-emit the XML data unchanged.</summary>
      <returns>true if this assertion can re-emit the XML source data unchanged; otherwise, false.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAssertion.Conditions">
      <summary>Gets or sets a set of conditions that may be taken into account when assessing the validity of the SAML assertion.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SamlConditions" /> that specifies a set of conditions that may be taken into account when assessing the validity of the SAML assertion.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.IdentityModel.Tokens.SamlAssertion.IsReadOnly" /> property is true and an attempt is made to set the <see cref="P:System.IdentityModel.Tokens.SamlAssertion.Conditions" /> property.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAssertion.IsReadOnly">
      <summary>Gets a value indicating whether the properties of this instance are read-only. </summary>
      <returns>true if the properties of this instance are read-only; otherwise, false. The default is false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAssertion.IssueInstant">
      <summary>Gets or sets the date and time when the SAML assertion was issued.</summary>
      <returns>A <see cref="T:System.DateTime" /> expressed in the Coordinated Universal Time (UTC) that specifies when the SAML assertion was issued. </returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.IdentityModel.Tokens.SamlAssertion.IsReadOnly" /> property is true and an attempt is made to set the <see cref="P:System.IdentityModel.Tokens.SamlAssertion.IssueInstant" /> property. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAssertion.Issuer">
      <summary>Gets or sets the name of the SAML authority that issued this SAML assertion.</summary>
      <returns>The SAML authority that issued this SAML assertion.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.IdentityModel.Tokens.SamlAssertion.IsReadOnly" /> property is true and an attempt is made to set the <see cref="P:System.IdentityModel.Tokens.SamlAssertion.Issuer" /> property.</exception>
      <exception cref="T:System.ArgumentException">An attempt is made to set the <see cref="P:System.IdentityModel.Tokens.SamlAssertion.Issuer" /> property to null or an empty string.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAssertion.MajorVersion">
      <summary>Gets the major version of the SAML specification to which this SAML assertion conforms.</summary>
      <returns>The major version of the SAML specification to which this SAML assertion conforms. The default value is the value of the <see cref="P:System.IdentityModel.Tokens.SamlConstants.MajorVersionValue" /> property.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAssertion.MakeReadOnly">
      <summary>Causes this instance to be read-only.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAssertion.MinorVersion">
      <summary>Gets the minor version of the SAML specification to which this SAML assertion conforms.</summary>
      <returns>The minor version of the SAML specification to which this SAML assertion conforms. The default value is the value of the <see cref="P:System.IdentityModel.Tokens.SamlConstants.MinorVersionValue" /> property.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAssertion.ReadSignature(System.Xml.XmlDictionaryReader,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver,System.IdentityModel.Tokens.SamlSerializer)">
      <summary>Reads the digital signature for a SAML assertion from an XML reader.</summary>
      <param name="reader">A <see cref="T:System.Xml.XmlDictionaryReader" /> to read the digital signature.</param>
      <param name="keyInfoSerializer">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" /> that reads the KeyInfo clause of the digital signature.</param>
      <param name="outOfBandTokenResolver">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> that determines the security token that created the digital signature.</param>
      <param name="samlSerializer">A <see cref="T:System.IdentityModel.Tokens.SamlSerializer" /> that is capable of reading XML elements that are defined in the SAML specification.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null-or-<paramref name="samlSerializer" /> is null-or-the digital signature has not been read from the SAML assertion yet.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAssertion.ReadXml(System.Xml.XmlDictionaryReader,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>Reads a SAML assertion from the specified XML reader.</summary>
      <param name="reader">A <see cref="T:System.Xml.XmlDictionaryReader" /> to read the SAML assertion.</param>
      <param name="samlSerializer">A <see cref="T:System.IdentityModel.Tokens.SamlSerializer" /> that is capable of reading XML elements in the SAML assertion that are defined in the SAML specification.</param>
      <param name="keyInfoSerializer">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" /> that reads the KeyInfo clause of the digital signature.</param>
      <param name="outOfBandTokenResolver">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> that determines the security token that created the digital signature.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null-or-<paramref name="samlSerializer" /> is null</exception>
      <exception cref="T:System.InvalidOperationException">the <see cref="M:System.IdentityModel.Tokens.SamlAssertion.ReadXml(System.Xml.XmlDictionaryReader,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)" /> method had been previously called and that SAML assertion was digitally signed.</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">
        <paramref name="reader" /> does not refer to a SAML assertion that is compliant with the SAML 1.1 specification.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAssertion.SigningCredentials">
      <summary>Gets or sets the security credentials that are used to digitally sign the SAML assertion.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SigningCredentials" /> that is used to digitally sign the SAML assertion.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.IdentityModel.Tokens.SamlAssertion.IsReadOnly" /> property is true and an attempt is made to set the <see cref="P:System.IdentityModel.Tokens.SamlAssertion.SigningCredentials" />  property.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAssertion.SigningToken">
      <summary>Gets the security token contained in or referenced by a digitally signed SAML assertion.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> contained in or referenced by a digitally signed SAML assertion.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAssertion.Statements">
      <summary>Gets the set of SAML statements associated with the SAML assertion.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> of type <see cref="T:System.IdentityModel.Tokens.SamlStatement" /> that contains the SAML statements associated with the SAML assertion.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAssertion.WriteSourceData(System.Xml.XmlWriter)">
      <summary>Writes the source data, if available.</summary>
      <param name="writer">The XML writer with which to write the source data.</param>
      <exception cref="T:System.InvalidOperationException">No source data is available</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAssertion.WriteXml(System.Xml.XmlDictionaryWriter,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer)">
      <summary>Writes the SAML assertion into the specified XML writer as a &lt;saml:Assertion&gt; element.</summary>
      <param name="writer">A <see cref="T:System.Xml.XmlDictionaryWriter" /> to write the SAML assertion.</param>
      <param name="samlSerializer">A <see cref="T:System.IdentityModel.Tokens.SamlSerializer" /> that is capable of writing the objects in the <see cref="T:System.IdentityModel.Tokens.SamlAssertion" /> to XML.</param>
      <param name="keyInfoSerializer">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" /> that is capable of writing KeyInfo clauses.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null-or-<paramref name="samlSerializer" /> is null</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">the <see cref="T:System.IdentityModel.Tokens.SamlAssertion" />  is configured such that serializing it into XML would result non-compliance with the SAML v1.1 specification.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlAssertionKeyIdentifierClause">
      <summary>Represents a &lt;KeyIndentifier&gt; element that references a &lt;saml:Assertion&gt; element in a SOAP message.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAssertionKeyIdentifierClause.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SamlAssertionKeyIdentifierClause" /> class using the specified SAML assertion identifier. </summary>
      <param name="assertionId">The identifier of the <see cref="T:System.IdentityModel.Tokens.SamlAssertion" /> that contains the key identifier</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assertionId" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAssertionKeyIdentifierClause.#ctor(System.String,System.Byte[],System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SamlAssertionKeyIdentifierClause" /> class using the specified SAML assertion identifier, nonce, and key length. </summary>
      <param name="assertionId">The identifier of the <see cref="T:System.IdentityModel.Tokens.SamlAssertion" /> that contains the key identifier.</param>
      <param name="derivationNonce">An array of <see cref="T:System.Byte" /> that contains the nonce that was used to create a derived key. </param>
      <param name="derivationLength">The size of the derived key. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assertionId" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAssertionKeyIdentifierClause.AssertionId">
      <summary>Gets the identifier for the <see cref="T:System.IdentityModel.Tokens.SamlAssertion" /> that contains the key identifier.</summary>
      <returns>The identifier for the <see cref="T:System.IdentityModel.Tokens.SamlAssertion" /> that contains the key identifier.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAssertionKeyIdentifierClause.Matches(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>Determines whether the specified key identifier is the same as the current instance.</summary>
      <returns>true when the specified key identifier is the same as the current instance; otherwise, false. </returns>
      <param name="keyIdentifierClause">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> to be compared.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAssertionKeyIdentifierClause.Matches(System.String)">
      <summary>Determines whether the specified SAML assertion identifier is the same as the current instance.</summary>
      <returns>true when <paramref name="assertionId" /> has the same value as the current instance's <see cref="P:System.IdentityModel.Tokens.SamlAssertionKeyIdentifierClause.AssertionId" /> property; otherwise, false. </returns>
      <param name="assertionId">The SAML assertion identifier to be compared.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAssertionKeyIdentifierClause.ToString">
      <summary>Returns a <see cref="T:System.String" /> that includes the SAML assertion identifier that represents the current key identifier clause.</summary>
      <returns>A <see cref="T:System.String" /> that includes the SAML assertion identifier that represents the current <see cref="T:System.IdentityModel.Tokens.SamlAssertionKeyIdentifierClause" /> instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlAttribute">
      <summary>Represents an attribute that is associated with the subject of a <see cref="T:System.IdentityModel.Tokens.SamlAttributeStatement" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SamlAttribute" /> class.  </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAttribute.#ctor(System.IdentityModel.Claims.Claim)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SamlAttribute" /> class using the specified claim. </summary>
      <param name="claim">A <see cref="T:System.IdentityModel.Claims.Claim" /> that represents an attribute of the subject for a <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> security token. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="claim" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.IdentityModel.Claims.Claim.Resource" /> property of <paramref name="claim" /> is not of type <see cref="T:System.String" />.-or-The <see cref="P:System.IdentityModel.Claims.Claim.Right" /> property of <paramref name="claim" /> is not <see cref="P:System.IdentityModel.Claims.Rights.PossessProperty" />.-or-The <see cref="P:System.IdentityModel.Claims.Claim.ClaimType" /> property of <paramref name="claim" /> does not have a '/' character or it is in the first or last index positions. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAttribute.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SamlAttribute" /> class using the specified attribute name, XML namespace, and attribute values. </summary>
      <param name="attributeNamespace">The XML namespace in which the <paramref name="attributeName" /> parameter is defined.</param>
      <param name="attributeName">The name of the SAML attribute.</param>
      <param name="attributeValues">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the values of the SAML attribute.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeNamespace" /> is null.-or- <paramref name="attributeName" /> is null.-or-<paramref name="attributeValues" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.IdentityModel.Claims.Claim.Resource" /> property of <paramref name="claim" /> is not of type <see cref="T:System.String" />.-or-The <see cref="P:System.IdentityModel.Claims.Claim.Right" /> property of <paramref name="claim" /> is not <see cref="P:System.IdentityModel.Claims.Rights.PossessProperty" />.-or-The <see cref="P:System.IdentityModel.Claims.Claim.ClaimType" /> property of <paramref name="claim" /> does not have a '/' character or it is in the first or last index positions. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAttribute.AttributeValues">
      <summary>Gets a collection of attribute values for the SAML attribute.</summary>
      <returns>A <see cref="T:System.Collections.Generic.IList`1" /> that contains the set of attribute values for the SAML attribute.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAttribute.AttributeValueXsiType">
      <summary>Gets or sets the xsi:type of the values contained in the SAML Attribute.</summary>
      <returns>A string that contains the xsi:type. The default is <see cref="F:System.Security.Claims.ClaimValueTypes.String" />.</returns>
      <exception cref="T:System.ArgumentException">An attempt to set a value that is null or empty occurs.-or-An attempt to set a value that is malformed occurs.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAttribute.ExtractClaims">
      <summary>Gets a collection of claims that this SAML attribute represents.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of type <see cref="T:System.IdentityModel.Claims.Claim" /> that contains the set of claims that this SAML attribute represents.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAttribute.IsReadOnly">
      <summary>Gets a value that indicates whether the properties of this instance are read-only.</summary>
      <returns>true if the properties of this instance are read-only; otherwise, false. The default is false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAttribute.MakeReadOnly">
      <summary>Causes this instance to be read-only.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAttribute.Name">
      <summary>Gets or sets the name of the SAML attribute.</summary>
      <returns>The name of the SAML attribute.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.IdentityModel.Tokens.SamlAttribute.Name" /> property is set and the <see cref="P:System.IdentityModel.Tokens.SamlAttribute.IsReadOnly" /> property is true.</exception>
      <exception cref="T:System.ArgumentNullException">The <see cref="P:System.IdentityModel.Tokens.SamlAttribute.Name" /> property is set to null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAttribute.Namespace">
      <summary>Gets or sets the XML namespace in which the name of the SAML attribute is defined.</summary>
      <returns>The XML namespace in which the name of the SAML attribute is defined.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAttribute.OriginalIssuer">
      <summary>Gets or sets the string that represents the OriginalIssuer of the SAML attribute.</summary>
      <returns>The original issuer of the SAML attribute.</returns>
      <exception cref="T:System.ArgumentException">An attempt to set a value that is an empty string occurs.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAttribute.ReadXml(System.Xml.XmlDictionaryReader,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>Reads the SAML attribute from the specified XML reader.</summary>
      <param name="reader">A <see cref="T:System.Xml.XmlDictionaryReader" /> to read the SAML attribute.</param>
      <param name="samlSerializer">A <see cref="T:System.IdentityModel.Tokens.SamlSerializer" /> that is capable of reading XML elements in the SAML specification.</param>
      <param name="keyInfoSerializer">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" /> that reads the KeyInfo clause of the digital signature.</param>
      <param name="outOfBandTokenResolver">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> that determines the security token that created the digital signature.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.-or-<paramref name="samlSerializer" /> is null.</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">
        <paramref name="reader" /> refers to an XML element that does not have the AttributeName and AttributeNamespace attributes. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAttribute.WriteXml(System.Xml.XmlDictionaryWriter,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer)">
      <summary>Writes the SAML attribute into the specified XML serializer.</summary>
      <param name="writer">A <see cref="T:System.Xml.XmlDictionaryWriter" /> to write the SAML attribute.</param>
      <param name="samlSerializer">A <see cref="T:System.IdentityModel.Tokens.SamlSerializer" /> that is capable of writing XML elements in a SAML assertion.</param>
      <param name="keyInfoSerializer">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" /> that is capable of writing KeyInfo clauses.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null.-or-<paramref name="samlSerializer" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlAttributeStatement">
      <summary>Contains a set of attributes associated with a particular <see cref="P:System.IdentityModel.Tokens.SamlSubjectStatement.SamlSubject" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAttributeStatement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SamlAttributeStatement" /> class.  </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAttributeStatement.#ctor(System.IdentityModel.Tokens.SamlSubject,System.Collections.Generic.IEnumerable{System.IdentityModel.Tokens.SamlAttribute})">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SamlAttributeStatement" /> class using the specified subject and set of attributes associated with the subject.</summary>
      <param name="samlSubject">A <see cref="T:System.IdentityModel.Tokens.SamlSubject" /> that specifies the subject of the claim.</param>
      <param name="attributes">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of type <see cref="T:System.IdentityModel.Tokens.SamlAttribute" /> that contains a set of attributes associated with the subject.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="samlSubject" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributes" /> contains a member that is null.-or-<paramref name="attributes" /> contains zero members. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAttributeStatement.AddClaimsToList(System.Collections.Generic.IList{System.IdentityModel.Claims.Claim})">
      <summary>Adds the specified set of claims as attributes to this SAML statement.</summary>
      <param name="claims">An <see cref="T:System.Collections.Generic.IList`1" /> of type <see cref="T:System.IdentityModel.Claims.Claim" /> that contains the set of claims to add to the SAML statement.</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAttributeStatement.Attributes">
      <summary>Gets a collection of attributes associated with the subject of the SAML assertion.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> of type <see cref="T:System.IdentityModel.Tokens.SamlAttribute" /> that contains a set of attributes associated with the subject.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAttributeStatement.IsReadOnly">
      <summary>Gets a value indicating whether the properties of this instance are read-only.</summary>
      <returns>true if the properties of this instance are read-only; otherwise, false. The default is false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAttributeStatement.MakeReadOnly">
      <summary>Causes this instance to be read-only.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAttributeStatement.ReadXml(System.Xml.XmlDictionaryReader,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>Reads the SAML attribute statement from the specified XML reader.</summary>
      <param name="reader">An <see cref="T:System.Xml.XmlDictionaryReader" /> to read the SAML attribute statement.</param>
      <param name="samlSerializer">A <see cref="T:System.IdentityModel.Tokens.SamlSerializer" /> that is capable of reading XML elements in the SAML attribute statement that is defined in the SAML specification.</param>
      <param name="keyInfoSerializer">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" /> that reads the KeyInfo clause of the digital signature.</param>
      <param name="outOfBandTokenResolver">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> that determines the security token that created the digital signature.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null-or-<paramref name="samlSerializer" /> is null</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">
        <paramref name="reader" /> refers to an XML element that does not contain a &lt;saml:Subject&gt; element-or-<paramref name="reader" /> refers to an XML element that contains a &lt;saml:Attribute&gt; element that does not have an attribute value. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAttributeStatement.WriteXml(System.Xml.XmlDictionaryWriter,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer)">
      <summary>Writes the SAML attribute statement into the specified XML serializer.</summary>
      <param name="writer">An <see cref="T:System.Xml.XmlDictionaryWriter" /> to write the SAML attribute statement.</param>
      <param name="samlSerializer">A <see cref="T:System.IdentityModel.Tokens.SamlSerializer" /> that is capable of writing XML elements in a SAML assertion.</param>
      <param name="keyInfoSerializer">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" /> that is capable of writing KeyInfo clauses.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null-or-<paramref name="samlSerializer" /> is null</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlAudienceRestrictionCondition">
      <summary>Specifies that a SAML assertion is addressed to a particular audience.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAudienceRestrictionCondition.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SamlAudienceRestrictionCondition" /> class.  </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAudienceRestrictionCondition.#ctor(System.Collections.Generic.IEnumerable{System.Uri})">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SamlAudienceRestrictionCondition" /> class with the specified set of audiences a SAML assertion is intended for. </summary>
      <param name="audiences">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of type <see cref="T:System.Uri" /> that contain a set of intended audiences.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="audiences" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAudienceRestrictionCondition.Audiences">
      <summary>Gets the set of audiences a SAML assertion is intended for.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> of type <see cref="T:System.Uri" /> that contain a set of intended audiences.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAudienceRestrictionCondition.IsReadOnly">
      <summary>Gets a value that indicates whether the properties of this instance are read-only.</summary>
      <returns>true if the properties of this instance are read-only; otherwise, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAudienceRestrictionCondition.MakeReadOnly">
      <summary>Causes this instance to be read-only.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAudienceRestrictionCondition.ReadXml(System.Xml.XmlDictionaryReader,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>Reads the &lt;AudienceRestrictionCondition&gt; element from the specified XML reader.</summary>
      <param name="reader">A <see cref="T:System.Xml.XmlDictionaryReader" /> to read the &lt;AudienceRestrictionCondition&gt; element.</param>
      <param name="samlSerializer">A <see cref="T:System.IdentityModel.Tokens.SamlSerializer" /> that is capable of reading XML elements in the SAML assertion that are defined in the SAML specification.</param>
      <param name="keyInfoSerializer">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" /> that reads the KeyInfo clause of the digital signature.</param>
      <param name="outOfBandTokenResolver">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> that determines the security token that created the digital signature.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.-or-<paramref name="samlSerializer" /> is null.</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">The &lt;AudienceRestrictionCondition&gt; element has a child &lt;Audience&gt; element does not have a value.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAudienceRestrictionCondition.WriteXml(System.Xml.XmlDictionaryWriter,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer)">
      <summary>Writes the &lt;AudienceRestrictionCondition&gt; element into the specified XML serializer.</summary>
      <param name="writer">A <see cref="T:System.Xml.XmlDictionaryWriter" /> to write the &lt;AudienceRestrictionCondition&gt; element.</param>
      <param name="samlSerializer">A <see cref="T:System.IdentityModel.Tokens.SamlSerializer" /> that is capable of writing XML elements in the SAML assertion that is defined in the SAML specification.</param>
      <param name="keyInfoSerializer">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" /> that is capable of writing KeyInfo clauses.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null.-or-<paramref name="samlSerializer" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlAuthenticationClaimResource">
      <summary>Represents the resource type for a claim that is created from a <see cref="T:System.IdentityModel.Tokens.SamlAuthenticationStatement" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthenticationClaimResource.#ctor(System.DateTime,System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SamlAuthenticationClaimResource" /> class using the specified instant in time, authentication method, DNS domain name, and IP address. </summary>
      <param name="authenticationInstant">A <see cref="T:System.DateTime" /> that specifies the instant in time at which the subject was authenticated.</param>
      <param name="authenticationMethod">A URI reference that specifies how the subject was authenticated.</param>
      <param name="dnsAddress">The DNS domain name in which the computer that authenticated the subject resides.</param>
      <param name="ipAddress">The IP address of the computer that authenticated the subject.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthenticationClaimResource.#ctor(System.DateTime,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.IdentityModel.Tokens.SamlAuthorityBinding})">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SamlAuthenticationClaimResource" /> class using the specified instant in time, authentication method, DNS domain name, IP address, and reference to additional information.</summary>
      <param name="authenticationInstant">A <see cref="T:System.DateTime" /> that specifies the instant in time at which the subject was authenticated.</param>
      <param name="authenticationMethod">A URI reference that specifies how the subject was authenticated.</param>
      <param name="dnsAddress">The DNS domain name in which the computer that authenticated the subject resides.</param>
      <param name="ipAddress">The IP address of the computer that authenticated the subject.</param>
      <param name="authorityBindings">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of type <see cref="T:System.IdentityModel.Tokens.SamlAuthorityBinding" /> that contains additional information about the subject.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="authorityBindings" /> contains a member that is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthenticationClaimResource.#ctor(System.DateTime,System.String,System.String,System.String,System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Tokens.SamlAuthorityBinding})">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SamlAuthenticationClaimResource" /> class using the specified instant in time, authentication method, DNS domain name, IP address, and reference to additional information.</summary>
      <param name="authenticationInstant">A <see cref="T:System.DateTime" /> that specifies the instant in time at which the subject was authenticated.</param>
      <param name="authenticationMethod">A URI reference that specifies how the subject was authenticated.</param>
      <param name="dnsAddress">The DNS domain name in which the computer that authenticated the subject resides.</param>
      <param name="ipAddress">The IP address of the computer that authenticated the subject.</param>
      <param name="authorityBindings">An <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of type <see cref="T:System.IdentityModel.Tokens.SamlAuthorityBinding" /> that contains additional information about the subject.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="authorityBindings" /> contains a member that is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthenticationClaimResource.AuthenticationInstant">
      <summary>Gets the instant in time at which the subject was authenticated.</summary>
      <returns>A <see cref="T:System.DateTime" /> that specifies the instant in time at which the subject was authenticated.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthenticationClaimResource.AuthenticationMethod">
      <summary>Gets or sets the method that was used to authenticate the subject.</summary>
      <returns>The method that was used to authenticate the subject. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthenticationClaimResource.AuthorityBindings">
      <summary>Gets additional information about the subject.</summary>
      <returns>An <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of type <see cref="T:System.IdentityModel.Tokens.SamlAuthorityBinding" /> that contains additional information about the subject.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthenticationClaimResource.DnsAddress">
      <summary>Gets the DNS domain name in which the computer that authenticated the subject resides.</summary>
      <returns>The DNS domain name in which the computer that authenticated the subject resides.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthenticationClaimResource.Equals(System.Object)">
      <summary>Returns a value that indicates whether the instance is equal to the specified object.</summary>
      <returns>true if <paramref name="obj" /> is a <see cref="T:System.IdentityModel.Tokens.SamlAuthenticationClaimResource" /> and has the same value as this instance; otherwise, false.</returns>
      <param name="obj">An object to compare to this instance.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthenticationClaimResource.GetHashCode">
      <summary>Returns the hash code for the <see cref="T:System.IdentityModel.Tokens.SamlAuthenticationClaimResource" />.</summary>
      <returns>A hash code for the <see cref="T:System.IdentityModel.Tokens.SamlAuthenticationClaimResource" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthenticationClaimResource.IPAddress">
      <summary>Gets or sets the IP address of the computer that authenticated the subject.</summary>
      <returns>The IP address of the computer that authenticated the subject.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlAuthenticationStatement">
      <summary>Represents a claim for a <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> security token that asserts that the subject was authenticated by a particular means at a particular time.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthenticationStatement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SamlAuthenticationStatement" /> class.  </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthenticationStatement.#ctor(System.IdentityModel.Tokens.SamlSubject,System.String,System.DateTime,System.String,System.String,System.Collections.Generic.IEnumerable{System.IdentityModel.Tokens.SamlAuthorityBinding})">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SamlAuthenticationStatement" /> class using the specified authentication details. </summary>
      <param name="samlSubject">A <see cref="T:System.IdentityModel.Tokens.SamlSubject" /> that represents the subject of the claim.</param>
      <param name="authenticationMethod">A URI reference that specifies how the subject was authenticated.</param>
      <param name="authenticationInstant">A <see cref="T:System.DateTime" /> that specifies the instant in time at which the subject was authenticated.</param>
      <param name="dnsAddress">The DNS domain name in which the computer that authenticated the subject resides.</param>
      <param name="ipAddress">The IP address of the computer that authenticated the subject.</param>
      <param name="authorityBindings">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of type <see cref="T:System.IdentityModel.Tokens.SamlAuthorityBinding" /> that contains additional information about the subject.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="authorityBindings" /> contains a member that is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthenticationStatement.AddClaimsToList(System.Collections.Generic.IList{System.IdentityModel.Claims.Claim})">
      <summary>Adds a claim based on the properties of this instance to the specified collection of claims.</summary>
      <param name="claims">An <see cref="T:System.Collections.Generic.IList`1" /> of type <see cref="T:System.IdentityModel.Claims.Claim" /> that contains the set of claims to add to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="claims" /> is null.</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthenticationStatement.AuthenticationInstant">
      <summary>Gets or sets the instant in time at which the subject was authenticated.</summary>
      <returns>A <see cref="T:System.DateTime" /> that specifies the instant in time at which the subject was authenticated.Exception typeCondition<see cref="T:System.InvalidOperationException" />The <see cref="P:System.IdentityModel.Tokens.SamlAuthenticationStatement.AuthenticationInstant" /> property is set and the <see cref="P:System.IdentityModel.Tokens.SamlAuthenticationStatement.IsReadOnly" /> property is true.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthenticationStatement.AuthenticationMethod">
      <summary>Gets or sets the method used to authenticate the subject.</summary>
      <returns>The method used to authenticate the subject. The default value is urn:oasis:names:tc:SAML:1.0:am:unspecified.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.IdentityModel.Tokens.SamlAuthenticationStatement.AuthenticationMethod" />  property is set and the <see cref="P:System.IdentityModel.Tokens.SamlAuthenticationStatement.IsReadOnly" /> property is true.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthenticationStatement.AuthorityBindings">
      <summary>Gets additional information about the subject.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> of type <see cref="T:System.IdentityModel.Tokens.SamlAuthorityBinding" /> that contains additional information about the subject.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthenticationStatement.ClaimType">
      <summary>Gets the type of security claim.</summary>
      <returns>A <see cref="T:System.IdentityModel.Claims.ClaimTypes" /> that specifies the type of security claim. Always http://schemas.microsoft.com/mb/2005/09/ClaimType/SamlAuthentication.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthenticationStatement.DnsAddress">
      <summary>Gets or sets the DNS domain name in which the computer that authenticated the subject resides.</summary>
      <returns>The DNS domain name in which the computer that authenticated the subject resides.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.IdentityModel.Tokens.SamlAuthenticationStatement.DnsAddress" /> property is set and the <see cref="P:System.IdentityModel.Tokens.SamlAuthenticationStatement.IsReadOnly" /> property is true.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthenticationStatement.IPAddress">
      <summary>Gets or sets the IP address of the computer that authenticated the subject.</summary>
      <returns>The IP address of the computer that authenticated the subject.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthenticationStatement.IsReadOnly">
      <summary>Gets a value that indicates whether the properties of this instance are read-only.</summary>
      <returns>true if the properties of this instance are read-only; otherwise, false. The default is false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthenticationStatement.MakeReadOnly">
      <summary>Causes this instance to be read-only.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthenticationStatement.ReadXml(System.Xml.XmlDictionaryReader,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>Reads the SAML authentication statement from the specified XML reader.</summary>
      <param name="reader">A <see cref="T:System.Xml.XmlDictionaryReader" /> to read the SAML authentication statement.</param>
      <param name="samlSerializer">A <see cref="T:System.IdentityModel.Tokens.SamlSerializer" /> that is capable of reading XML elements in the SAML authentication statement that is defined in the SAML specification.</param>
      <param name="keyInfoSerializer">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" /> that reads the KeyInfo clause of the digital signature.</param>
      <param name="outOfBandTokenResolver">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> that determines the security token that created the digital signature.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null-or-<paramref name="samlSerializer" /> is null</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">
        <paramref name="reader" /> refers to an XML element that does not contain the AuthenticationInstant and AuthenticationMethod attributes.-or-<paramref name="reader" /> refers to an XML element that does not have a &lt;saml:Subject&gt; child element. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthenticationStatement.WriteXml(System.Xml.XmlDictionaryWriter,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer)">
      <summary>Writes the SAML authentication statement into the specified XML serializer.</summary>
      <param name="writer">A <see cref="T:System.Xml.XmlDictionaryWriter" /> to write the SAML authentication statement.</param>
      <param name="samlSerializer">A <see cref="T:System.IdentityModel.Tokens.SamlSerializer" /> that is capable of writing XML elements in a SAML assertion.</param>
      <param name="keyInfoSerializer">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" /> that is capable of writing KeyInfo clauses.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null-or-<paramref name="samlSerializer" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlAuthorityBinding">
      <summary>Specifies how to retrieve additional information about the subject of a <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> security token.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthorityBinding.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SamlAuthorityBinding" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthorityBinding.#ctor(System.Xml.XmlQualifiedName,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SamlAuthorityBinding" /> class using the specified query types, protocol binding, and SAML authority location.</summary>
      <param name="authorityKind">An <see cref="T:System.Xml.XmlQualifiedName" /> that represents the type of queries that the SAML authority that has additional information about the subject responds to.</param>
      <param name="binding">A URI reference that identifies the SAML protocol binding to use when communicating with the SAML authority that has additional information about the subject.</param>
      <param name="location">A URI reference that describes how to locate and communicate with the SAML authority that has additional information about the subject.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthorityBinding.AuthorityKind">
      <summary>Gets or sets the type of queries that the SAML authority that has additional information about the subject, responds to.</summary>
      <returns>An <see cref="T:System.Xml.XmlQualifiedName" /> that represents the type of queries that the SAML authority that has additional information about the subject, responds to.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.IdentityModel.Tokens.SamlAuthorityBinding.AuthorityKind" />  property is set and the <see cref="P:System.IdentityModel.Tokens.SamlAuthorityBinding.IsReadOnly" /> property is true.</exception>
      <exception cref="T:System.ArgumentNullException">The <see cref="P:System.IdentityModel.Tokens.SamlAuthorityBinding.AuthorityKind" />  property is set to null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthorityBinding.Binding">
      <summary>Gets or sets the SAML protocol binding to use when communicating with the SAML authority that has additional information that has additional information about the subject.</summary>
      <returns>A URI reference that identifies the SAML protocol binding to use when communicating with the SAML authority that has additional information that has additional information about the subject.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.IdentityModel.Tokens.SamlAuthorityBinding.Binding" /> property is set and the <see cref="P:System.IdentityModel.Tokens.SamlAuthorityBinding.IsReadOnly" /> property is true.</exception>
      <exception cref="T:System.ArgumentNullException">The <see cref="P:System.IdentityModel.Tokens.SamlAuthorityBinding.Binding" /> property is set to null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthorityBinding.IsReadOnly">
      <summary>Gets a value indicating whether the properties of this instance are read-only.</summary>
      <returns>true if the properties of this instance are read-only; otherwise, false. The default is false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthorityBinding.Location">
      <summary>Gets or sets how to locate and communicate with the SAML authority that has additional information that has additional information about the subject.</summary>
      <returns>A URI reference that describes how to locate and communicate with the SAML authority that has additional information about the subject.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.IdentityModel.Tokens.SamlAuthorityBinding.Location" /> property is set and the <see cref="P:System.IdentityModel.Tokens.SamlAuthorityBinding.IsReadOnly" /> property is true.</exception>
      <exception cref="T:System.ArgumentNullException">The <see cref="P:System.IdentityModel.Tokens.SamlAuthorityBinding.Location" /> property is set to null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthorityBinding.MakeReadOnly">
      <summary>Causes this instance to be read-only.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthorityBinding.ReadXml(System.Xml.XmlDictionaryReader,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>Reads the &lt;AuthorityBinding&gt; element from the specified XML reader.</summary>
      <param name="reader">A <see cref="T:System.Xml.XmlDictionaryReader" /> to read the &lt;AuthorityBinding&gt; element.</param>
      <param name="samlSerializer">A <see cref="T:System.IdentityModel.Tokens.SamlSerializer" /> that is capable of reading XML elements in the SAML assertion that are defined in the SAML specification.</param>
      <param name="keyInfoSerializer">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" /> that reads the KeyInfo clause of the digital signature.</param>
      <param name="outOfBandTokenResolver">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> that determines the security token that created the digital signature.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null-or-<paramref name="samlSerializer" /> is null</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">
        <paramref name="reader" /> does not refer to a SAML assertion</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">The &lt;AuthorityBinding&gt; element does not have one of the AuthorityKind, Location, or Binding attributes.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthorityBinding.WriteXml(System.Xml.XmlDictionaryWriter,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer)">
      <summary>Writes the &lt;AuthorityBinding&gt; element into the specified XML serializer.</summary>
      <param name="writer">A <see cref="T:System.Xml.XmlDictionaryWriter" /> to write the &lt;AuthorityBinding&gt; element.</param>
      <param name="samlSerializer">A <see cref="T:System.IdentityModel.Tokens.SamlSerializer" /> that is capable of writing XML elements in the SAML assertion that is defined in the SAML specification.</param>
      <param name="keyInfoSerializer">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" /> that is capable of writing KeyInfo clauses.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null-or-<paramref name="samlSerializer" /> is null</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlAuthorizationDecisionClaimResource">
      <summary>Represents a claim for a <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> security token that asserts an authorization decision regarding access to a specific resource.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthorizationDecisionClaimResource.#ctor(System.String,System.IdentityModel.Tokens.SamlAccessDecision,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SamlAuthorizationDecisionClaimResource" /> class using the specified resource the subject is seeking access to, the authorization decision regarding the resource, the action sought on the resource, and the XML namespace in which the action is defined. </summary>
      <param name="resource">The resource the subject is seeking access to.</param>
      <param name="accessDecision">The authorization decision rendered by the SAML authority regarding the access to the resource by the subject.</param>
      <param name="actionNamespace">The XML namespace in which the action specified in the <paramref name="action" /> parameter is defined.</param>
      <param name="actionName">The action sought by the subject on the resource specified in the <paramref name="resource" /> parameter.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="resource" /> is null.-or-<paramref name="actionName" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionClaimResource.AccessDecision">
      <summary>Gets the authorization decision rendered by the SAML authority regarding the access to the resource by the subject.</summary>
      <returns>The authorization decision rendered by the SAML authority regarding the access to the resource by the subject.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionClaimResource.ActionName">
      <summary>Gets the action sought by the subject on the resource specified in the <see cref="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionClaimResource.Resource" /> property.</summary>
      <returns>The action sought by the subject on the resource specified in the <see cref="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionClaimResource.Resource" /> property.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionClaimResource.ActionNamespace">
      <summary>Gets the XML namespace in which the action specified in the <see cref="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionClaimResource.ActionName" /> property is defined.</summary>
      <returns>The XML namespace in which the action specified in the <see cref="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionClaimResource.ActionName" /> property is defined.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthorizationDecisionClaimResource.Equals(System.Object)">
      <summary>Returns a value that indicates whether the instance is equal to the specified object.</summary>
      <returns>true if <paramref name="obj" /> is a <see cref="T:System.IdentityModel.Tokens.SamlAuthorizationDecisionClaimResource" /> and has the same value as this instance; otherwise, false.</returns>
      <param name="obj">An object to compare to this instance.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthorizationDecisionClaimResource.GetHashCode">
      <summary>Returns the hash code for the <see cref="T:System.IdentityModel.Tokens.SamlAuthorizationDecisionClaimResource" />.</summary>
      <returns>A hash code for the <see cref="T:System.IdentityModel.Tokens.SamlAuthorizationDecisionClaimResource" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionClaimResource.Resource">
      <summary>Gets the resource the subject is seeking access to.</summary>
      <returns>A URI that represents the resource the subject is seeking access to.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement">
      <summary>Represents a claim for a <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> security token that asserts that an authorization decision regarding access by the subject to the specified resource has been made.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement" /> class.  </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement.#ctor(System.IdentityModel.Tokens.SamlSubject,System.String,System.IdentityModel.Tokens.SamlAccessDecision,System.Collections.Generic.IEnumerable{System.IdentityModel.Tokens.SamlAction})">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement" /> class.  using the specified subject, resource, authorization decision, and the actions sought by the subject on the resource. </summary>
      <param name="samlSubject">A <see cref="T:System.IdentityModel.Tokens.SamlSubject" /> that represents the subject of the claim. Sets the <see cref="P:System.IdentityModel.Tokens.SamlSubjectStatement.SamlSubject" /> property.</param>
      <param name="resource">A URI reference that identifies the resource to which access is sought. Sets the <see cref="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement.Resource" /> property.</param>
      <param name="accessDecision">A <see cref="T:System.IdentityModel.Tokens.SamlAccessDecision" /> that specifies the authorization decision rendered by the SAML authority with respect to access by the subject to the specified resource. Sets the <see cref="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement.AccessDecision" /> property.</param>
      <param name="samlActions">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of type <see cref="T:System.IdentityModel.Tokens.SamlAction" /> that specifies the set of actions that the subject is authorized to perform on the resource. Sets the <see cref="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement.SamlActions" /> property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="samlActions" /> is null.-or-<paramref name="samlActions" /> contains a member that is null.-or-<paramref name="samlSubject" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="authorityBindings" /> contains a member that is null.-or-<paramref name="resource" /> is null or empty.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement.#ctor(System.IdentityModel.Tokens.SamlSubject,System.String,System.IdentityModel.Tokens.SamlAccessDecision,System.Collections.Generic.IEnumerable{System.IdentityModel.Tokens.SamlAction},System.IdentityModel.Tokens.SamlEvidence)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement" /> class.  using the specified subject, resource, authorization decision, and the actions sought by the subject on the resource.</summary>
      <param name="samlSubject">A <see cref="T:System.IdentityModel.Tokens.SamlSubject" /> that represents the subject of the claim. Sets the <see cref="P:System.IdentityModel.Tokens.SamlSubjectStatement.SamlSubject" /> property.</param>
      <param name="resource">A URI reference that identifies the resource to which access is sought. Sets the <see cref="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement.Resource" /> property.</param>
      <param name="accessDecision">A <see cref="T:System.IdentityModel.Tokens.SamlAccessDecision" /> that specifies the authorization decision rendered by the SAML authority with respect to access by the subject to the specified resource. Sets the <see cref="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement.AccessDecision" /> property.</param>
      <param name="samlActions">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of type <see cref="T:System.IdentityModel.Tokens.SamlAction" /> that specifies the set of actions that the subject is authorized to perform on the resource. Sets the <see cref="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement.SamlActions" /> property.</param>
      <param name="samlEvidence">A <see cref="T:System.IdentityModel.Tokens.SamlEvidence" /> that contains a set of SAML assertions that the SAML authority relied on to render the authorization decision. Sets the <see cref="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement.Evidence" /> property.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement.AccessDecision">
      <summary>Gets or sets the authorization decision rendered by the SAML authority with respect to access by the subject to the specified resource.</summary>
      <returns>One of the <see cref="T:System.IdentityModel.Tokens.SamlAccessDecision" /> values that specify the authorization decision rendered by the SAML authority with respect to access by the subject to the specified resource.Exception typeCondition<see cref="T:System.InvalidOperationException" />The <see cref="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement.AccessDecision" />   property is set and the <see cref="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement.IsReadOnly" /> property is true.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement.AddClaimsToList(System.Collections.Generic.IList{System.IdentityModel.Claims.Claim})">
      <summary>Adds claims based on the properties of this instance to the specified collection of claims.</summary>
      <param name="claims">An <see cref="T:System.Collections.Generic.IList`1" /> of type <see cref="T:System.IdentityModel.Claims.Claim" /> that contains the set of claims to add to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="claims" /> is null.</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement.ClaimType">
      <summary>Gets the type of security claim.</summary>
      <returns>The type of security claim. Always http://schemas.microsoft.com/mb/2005/09/ClaimType/SamlAuthorizationDecision.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement.Evidence">
      <summary>Gets or sets the evidence that the SAML authority relied on to render the authorization decision.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SamlEvidence" /> that contains a set of SAML assertions that the SAML authority relied on to render the authorization decision.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement.IsReadOnly">
      <summary>Gets a value that indicates whether the properties of this instance are read-only.</summary>
      <returns>true if the properties of this instance are read-only; otherwise, false. The default is false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement.MakeReadOnly">
      <summary>Causes this instance to be read-only.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement.ReadXml(System.Xml.XmlDictionaryReader,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>Reads the SAML authorization statement from the specified XML reader.</summary>
      <param name="reader">A <see cref="T:System.Xml.XmlDictionaryReader" /> to read the SAML authorization statement.</param>
      <param name="samlSerializer">A <see cref="T:System.IdentityModel.Tokens.SamlSerializer" /> that is capable of reading XML elements in the SAML authorization statement that is defined in the SAML specification.</param>
      <param name="keyInfoSerializer">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" /> that reads the KeyInfo clause of the digital signature.</param>
      <param name="outOfBandTokenResolver">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> that determines the security token that created the digital signature.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.-or-<paramref name="samlSerializer" /> is null.</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">
        <paramref name="reader" /> refers to an XML element that does not contain the Resource and Decision attributes.-or-<paramref name="reader" /> refers to an XML element that does not have &lt;saml:Subject&gt;, &lt;saml:Evidence&gt;, and &lt;saml:Action&gt; child elements. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement.Resource">
      <summary>The resource to which access is sought by the subject of the <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> security token.</summary>
      <returns>A URI reference that identifies the resource to which access is sought. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement.SamlActions">
      <summary>Gets the set of actions that the subject is authorized to perform on the resource.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> of type <see cref="T:System.IdentityModel.Tokens.SamlAction" /> that specifies the set of actions that the subject is authorized to perform on the resource.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement.WriteXml(System.Xml.XmlDictionaryWriter,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer)">
      <summary>Writes the SAML authorization statement into the specified XML serializer.</summary>
      <param name="writer">A <see cref="T:System.Xml.XmlDictionaryWriter" /> to write the SAML authorization statement.</param>
      <param name="samlSerializer">A <see cref="T:System.IdentityModel.Tokens.SamlSerializer" /> that is capable of writing XML elements in a SAML assertion.</param>
      <param name="keyInfoSerializer">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" /> that is capable of writing KeyInfo clauses.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null.-or-<paramref name="samlSerializer" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlCondition">
      <summary>Represents a condition that must be taken into account when assessing the validity of a SAML assertion.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlCondition.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SamlCondition" /> class.  </summary>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlCondition.IsReadOnly">
      <summary>When overridden in a derived class, gets a value indicating whether the properties of this instance are read-only.</summary>
      <returns>true if the properties of this instance are read-only; otherwise, false. The default is false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlCondition.MakeReadOnly">
      <summary>When overridden in a derived class, causes this instance to be read-only.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlCondition.ReadXml(System.Xml.XmlDictionaryReader,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>When overridden in a derived class, reads the condition from the specified XML reader.</summary>
      <param name="reader">A <see cref="T:System.Xml.XmlDictionaryReader" /> to read the condition.</param>
      <param name="samlSerializer">A <see cref="T:System.IdentityModel.Tokens.SamlSerializer" /> that is capable of reading XML elements in the SAML authorization statement that is defined in the SAML specification.</param>
      <param name="keyInfoSerializer">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" /> that reads the KeyInfo clause of the digital signature.</param>
      <param name="outOfBandTokenResolver">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> that determines the security token that created the digital signature.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlCondition.WriteXml(System.Xml.XmlDictionaryWriter,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer)">
      <summary>When overridden in a derived class, writes the condition into the specified XML serializer.</summary>
      <param name="writer">A <see cref="T:System.Xml.XmlDictionaryWriter" /> to write the condition.</param>
      <param name="samlSerializer">A <see cref="T:System.IdentityModel.Tokens.SamlSerializer" /> that is capable of writing XML elements in a SAML assertion.</param>
      <param name="keyInfoSerializer">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" /> that is capable of writing KeyInfo clauses.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlConditions">
      <summary>Represents a set of conditions that must be taken into account when assessing the validity of a SAML assertion.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlConditions.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SamlConditions" /> class.  </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlConditions.#ctor(System.DateTime,System.DateTime)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SamlConditions" /> class using the specified timeframe that the SAML assertion is valid.</summary>
      <param name="notBefore">A <see cref="T:System.DateTime" /> that specifies the earliest instant in time when the SAML assertion is valid. Sets the <see cref="P:System.IdentityModel.Tokens.SamlConditions.NotBefore" /> property.</param>
      <param name="notOnOrAfter">A <see cref="T:System.DateTime" /> that specifies the instant in time when the SAML assertion expires. Sets the <see cref="P:System.IdentityModel.Tokens.SamlConditions.NotOnOrAfter" /> property.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlConditions.#ctor(System.DateTime,System.DateTime,System.Collections.Generic.IEnumerable{System.IdentityModel.Tokens.SamlCondition})">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SamlConditions" /> class using the specified timeframe and conditions when the SAML assertion is valid.</summary>
      <param name="notBefore">A <see cref="T:System.DateTime" /> that specifies the earliest instant in time when the SAML assertion is valid. Sets the <see cref="P:System.IdentityModel.Tokens.SamlConditions.NotBefore" /> property.</param>
      <param name="notOnOrAfter">A <see cref="T:System.DateTime" /> that specifies the instant in time when the SAML assertion expires. Sets the <see cref="P:System.IdentityModel.Tokens.SamlConditions.NotOnOrAfter" /> property.</param>
      <param name="conditions">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of type <see cref="T:System.IdentityModel.Tokens.SamlCondition" /> that specifies a set of conditions that a recipient of a SAML assertion must take into account in assessing the validity of the assertion. Sets the <see cref="P:System.IdentityModel.Tokens.SamlConditions.Conditions" /> property.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="conditions" /> contains a member that is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlConditions.Conditions">
      <summary>Gets the set of conditions that must be taken into consideration when assessing the validity of a SAML assertion.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of type <see cref="T:System.IdentityModel.Tokens.SamlCondition" /> that specifies a set of conditions that a recipient of a SAML assertion must take into account when assessing the validity of the assertion.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlConditions.IsReadOnly">
      <summary>Gets a value that indicates whether the properties of this instance are read-only.</summary>
      <returns>true if the properties of this instance are read-only; otherwise, false. The default is false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlConditions.MakeReadOnly">
      <summary>Causes this instance to be read-only.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlConditions.NotBefore">
      <summary>Gets the earliest instant in time when the SAML assertion is valid. </summary>
      <returns>A <see cref="T:System.DateTime" /> that specifies the earliest instant in time when the SAML assertion is valid. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlConditions.NotOnOrAfter">
      <summary>Gets the instant in time when the SAML assertion expires.</summary>
      <returns>A <see cref="T:System.DateTime" /> that specifies the instant in time when the SAML assertion expires. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlConditions.ReadXml(System.Xml.XmlDictionaryReader,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>Reads the &lt;saml:Conditions&gt; element from the specified XML reader.</summary>
      <param name="reader">An <see cref="T:System.Xml.XmlDictionaryReader" /> to read the &lt;saml:Conditions&gt; element.</param>
      <param name="samlSerializer">A <see cref="T:System.IdentityModel.Tokens.SamlSerializer" /> that is capable of reading XML elements in the SAML authorization statement that is defined in the SAML specification.</param>
      <param name="keyInfoSerializer">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" /> that reads the KeyInfo clause of the digital signature.</param>
      <param name="outOfBandTokenResolver">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> that determines the security token that created the digital signature.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null-or-<paramref name="samlSerializer" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlConditions.WriteXml(System.Xml.XmlDictionaryWriter,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer)">
      <summary>Writes the &lt;saml:Conditions&gt; element into the specified XML serializer.</summary>
      <param name="writer">A <see cref="T:System.Xml.XmlDictionaryWriter" /> to write the &lt;saml:Conditions&gt; element.</param>
      <param name="samlSerializer">A <see cref="T:System.IdentityModel.Tokens.SamlSerializer" /> that is capable of writing XML elements in a SAML assertion.</param>
      <param name="keyInfoSerializer">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" /> that is capable of writing KeyInfo clauses.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null-or-<paramref name="samlSerializer" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlConstants">
      <summary>Represents a set of constants that are used to set properties of a <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> security token. This class cannot be inherited. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlConstants.EmailName">
      <summary>Gets the name of the attribute used to specify that the subject of a SAML assertion is specified as an e-mail address. This field is constant.</summary>
      <returns>The name of the attribute used to specify that the subject of a SAML assertion is specified as an e-mail address. This field is constant.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlConstants.EmailNamespace">
      <summary>Gets a URI that states the subject of a SAML assertion is specified as an e-mail address. This field is constant.</summary>
      <returns>A URI that states the subject of a SAML assertion is specified as an e-mail address.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlConstants.HolderOfKey">
      <summary>Gets a URI that specifies that the recipient of a SAML security token should use the &lt;ds:KeyInfo&gt; element to confirm that the SOAP message was sent by the SAML assertion's subject. This field is constant.</summary>
      <returns>A URI that specifies that the recipient of a <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> security token should use the &lt;ds:KeyInfo&gt; element to confirm that the SOAP message was sent by the SAML assertion's subject.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlConstants.MajorVersionValue">
      <summary>Gets the major version of the SAML specification that <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> security tokens conform to. This field is constant.</summary>
      <returns>The major version of the SAML specification that <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> security tokens conform to. Always 1.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlConstants.MinorVersionValue">
      <summary>Gets the minor version of the SAML specification used by <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> security tokens. This field is constant.</summary>
      <returns>The minor version of the SAML specification. Always 1.The combination of the <see cref="P:System.IdentityModel.Tokens.SamlConstants.MajorVersionValue" /> and <see cref="P:System.IdentityModel.Tokens.SamlConstants.MinorVersionValue" /> properties comprises the version of the SAML specification that <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> security tokens conform to.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlConstants.Namespace">
      <summary>Gets the XML namespace in which SAML assertions are defined. This field is constant.</summary>
      <returns>The XML namespace in which SAML assertions are defined.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.IdentityModel.Tokens.SamlConstants.Prefix">
      <summary>The SAML namespace prefix. This field is constant.</summary>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlConstants.SenderVouches">
      <summary>Gets a URI that specifies that additional information is not available for a recipient of a SAML security token to confirm that the SOAP message was sent by the SAML assertion's subject. This field is constant.</summary>
      <returns>A URI that specifies that additional information is not available for a recipient of a SAML security token to confirm that the SOAP message was sent by the SAML assertion's subject.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlConstants.UserName">
      <summary>Gets the name of the attribute used to specify that the subject of a SAML assertion is specified as a Windows domain account. This field is constant.</summary>
      <returns>The name of the attribute used to specify that the subject of a SAML assertion is specified as a Windows domain account. This field is constant.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlConstants.UserNameNamespace">
      <summary>Gets a URI that states the subject of a SAML assertion is specified using a Windows domain account. This field is constant.</summary>
      <returns>A URI that states the subject of a SAML assertion is specified using a Windows domain account.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlDoNotCacheCondition">
      <summary>Represents a condition that must be taken into account when assessing the validity of a SAML assertion.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlDoNotCacheCondition.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SamlDoNotCacheCondition" /> class.  </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlDoNotCacheCondition.IsReadOnly">
      <summary>Gets a value indicating whether the properties of this instance are read-only.</summary>
      <returns>true if the properties of this instance are read-only; otherwise, false. The default is false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlDoNotCacheCondition.MakeReadOnly">
      <summary>Causes this instance to be read-only.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlDoNotCacheCondition.ReadXml(System.Xml.XmlDictionaryReader,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>Reads the &lt;saml:DoNotCacheCondition&gt; element from the specified XML reader.</summary>
      <param name="reader">A <see cref="T:System.Xml.XmlDictionaryReader" /> to read the &lt;saml:DoNotCacheCondition&gt;.</param>
      <param name="samlSerializer">A <see cref="T:System.IdentityModel.Tokens.SamlSerializer" /> that is capable of reading XML elements in the SAML authorization statement that is defined in the SAML specification.</param>
      <param name="keyInfoSerializer">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" /> that reads the KeyInfo clause of the digital signature.</param>
      <param name="outOfBandTokenResolver">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> that determines the security token that created the digital signature.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null-or-<paramref name="samlSerializer" /> is null</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">
        <paramref name="reader" /> does not point to a &lt;saml:DoNotCacheCondition&gt; element.  </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlDoNotCacheCondition.WriteXml(System.Xml.XmlDictionaryWriter,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer)">
      <summary>Writes the &lt;saml:DoNotCacheCondition&gt; element into the specified XML serializer.</summary>
      <param name="writer">A <see cref="T:System.Xml.XmlDictionaryWriter" /> to write the &lt;saml:DoNotCacheCondition&gt; element.</param>
      <param name="samlSerializer">A <see cref="T:System.IdentityModel.Tokens.SamlSerializer" /> that is capable of writing XML elements in a SAML assertion.</param>
      <param name="keyInfoSerializer">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" /> that is capable of writing KeyInfo clauses.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null-or-<paramref name="samlSerializer" /> is null</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlEvidence">
      <summary>Represents the evidence used to render an authorization decision for a <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> security token.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlEvidence.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SamlEvidence" /> class.  </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlEvidence.#ctor(System.Collections.Generic.IEnumerable{System.IdentityModel.Tokens.SamlAssertion})">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SamlEvidence" /> class using the specified set of SAML assertions. </summary>
      <param name="assertions">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of type <see cref="T:System.IdentityModel.Tokens.SamlAssertion" /> that contains the evidence that the SAML authority relied on to render the authorization decision. Sets the <see cref="P:System.IdentityModel.Tokens.SamlEvidence.Assertions" /> property.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="assertions" /> contains a member that is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlEvidence.#ctor(System.Collections.Generic.IEnumerable{System.String})">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SamlEvidence" /> class using the specified set of SAML assertion references. </summary>
      <param name="assertionIdReferences">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of type <see cref="T:System.String" /> that contains an identifier for a SAML assertion that specifies the evidence that the SAML authority relied on to render the authorization decision. Sets the <see cref="P:System.IdentityModel.Tokens.SamlEvidence.AssertionIdReferences" /> property.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="assertionIdReferences" /> contains a member that is null or empty.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlEvidence.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.IdentityModel.Tokens.SamlAssertion})">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SamlEvidence" /> class using the specified set of SAML assertion references and SAML assertions. </summary>
      <param name="assertionIdReferences">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of type <see cref="T:System.String" /> that contains an identifier for a SAML assertion that specifies the evidence that the SAML authority relied on to render the authorization decision. Sets the <see cref="P:System.IdentityModel.Tokens.SamlEvidence.AssertionIdReferences" /> property.</param>
      <param name="assertions">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of type <see cref="T:System.IdentityModel.Tokens.SamlAssertion" /> that contains the evidence that the SAML authority relied on to render the authorization decision. Sets the <see cref="P:System.IdentityModel.Tokens.SamlEvidence.Assertions" /> property.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="assertionIdReferences" /> contains a member that is null or empty.-or-<paramref name="assertions" /> contains a member that is null.-or-<paramref name="assertionIdReferences" /> and <paramref name="assertions" /> are both null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlEvidence.AssertionIdReferences">
      <summary>Gets a collection of identifiers for SAML assertions that specify the evidence that the SAML authority relied on to render the authorization decision.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> of type <see cref="T:System.String" /> that contains identifiers for SAML assertions that specify the evidence that the SAML authority relied on to render the authorization decision.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlEvidence.Assertions">
      <summary>Gets the collection of SAML assertions that comprise the evidence that the SAML authority relied on to render the authorization decision.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> of type <see cref="T:System.IdentityModel.Tokens.SamlAssertion" /> that contains the evidence that the SAML authority relied on to render the authorization decision.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlEvidence.IsReadOnly">
      <summary>Gets a value that indicates whether the properties of this instance are read-only.</summary>
      <returns>true if the properties of this instance are read-only; otherwise, false. The default is false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlEvidence.MakeReadOnly">
      <summary>Causes this instance to be read-only.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlEvidence.ReadXml(System.Xml.XmlDictionaryReader,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>Reads the evidence from the specified XML reader.</summary>
      <param name="reader">A <see cref="T:System.Xml.XmlDictionaryReader" /> to read the evidence.</param>
      <param name="samlSerializer">A <see cref="T:System.IdentityModel.Tokens.SamlSerializer" /> that is capable of reading XML elements in the SAML authorization statement that is defined in the SAML specification.</param>
      <param name="keyInfoSerializer">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" /> that reads the KeyInfo clause of the digital signature.</param>
      <param name="outOfBandTokenResolver">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> that determines the security token that created the digital signature.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.-or-<paramref name="samlSerializer" /> is null.</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">
        <paramref name="reader" /> refers to an XML element that does not have at least one &lt;saml:AssertionIDReference&gt; or &lt;saml:Assertion&gt; child element. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlEvidence.WriteXml(System.Xml.XmlDictionaryWriter,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer)">
      <summary>Writes the evidence into the specified XML serializer.</summary>
      <param name="writer">A <see cref="T:System.Xml.XmlDictionaryWriter" /> to write the evidence.</param>
      <param name="samlSerializer">A <see cref="T:System.IdentityModel.Tokens.SamlSerializer" /> that is capable of writing XML elements in a SAML assertion.</param>
      <param name="keyInfoSerializer">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" /> that is capable of writing KeyInfo clauses.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null.-or-<paramref name="samlSerializer" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlNameIdentifierClaimResource">
      <summary>Represents a claim for a SAML security token that asserts the subject's name.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlNameIdentifierClaimResource.#ctor(System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SamlNameIdentifierClaimResource" /> class using the specified name, the domain in which the name resides, and the format the name is in.</summary>
      <param name="name">The subject name. Sets the <see cref="P:System.IdentityModel.Tokens.SamlSubject.Name" /> property.</param>
      <param name="nameQualifier">The domain in which the <paramref name="name" /> parameter resides. Sets the <see cref="P:System.IdentityModel.Tokens.SamlNameIdentifierClaimResource.NameQualifier" /> property.</param>
      <param name="format">A URI reference that represents the format that the <paramref name="name" /> parameter is in. Sets the <see cref="P:System.IdentityModel.Tokens.SamlNameIdentifierClaimResource.Format" /> property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null or is <see cref="F:System.String.Empty" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlNameIdentifierClaimResource.Equals(System.Object)">
      <summary>Returns a value that indicates whether the instance is equal to the specified object.</summary>
      <returns>true if <paramref name="obj" /> is a <see cref="T:System.IdentityModel.Tokens.SamlNameIdentifierClaimResource" /> and has the same value as this instance; otherwise, false.</returns>
      <param name="obj">An object to compare to this instance.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlNameIdentifierClaimResource.Format">
      <summary>Gets a URI reference that represents the format that the subject name of a SAML security token is in.</summary>
      <returns>A URI reference that represents the format that the subject name of a SAML security token is in.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlNameIdentifierClaimResource.GetHashCode">
      <summary>Returns the hash code for the <see cref="T:System.IdentityModel.Tokens.SamlNameIdentifierClaimResource" />.</summary>
      <returns>A hash code for the <see cref="T:System.IdentityModel.Tokens.SamlNameIdentifierClaimResource" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlNameIdentifierClaimResource.Name">
      <summary>Gets the subject name of a SAML security token.</summary>
      <returns>The subject name of a <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> security token.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlNameIdentifierClaimResource.NameQualifier">
      <summary>Gets the domain in which the subject name of a SAML security token resides in.</summary>
      <returns>The domain in which the subject name of a SAML security token resides in.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlSecurityKeyIdentifierClause">
      <summary>This class is used when a SamlAssertion is received without a &lt;ds:KeyInfo&gt; element inside the signature element. The KeyInfo describes the key required to check the signature. When the key is needed this clause will be presented to the current <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />. It will contain the SamlAssertion fully read which can be queried to determine the key required.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityKeyIdentifierClause.#ctor(System.IdentityModel.Tokens.SamlAssertion)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SamlSecurityKeyIdentifierClause" /> class.</summary>
      <param name="assertion">The assertion that is currently being processed. Sets the value of the <see cref="P:System.IdentityModel.Tokens.SamlSecurityKeyIdentifierClause.Assertion" /> property.</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSecurityKeyIdentifierClause.Assertion">
      <summary>Gets the SamlAssertion that is currently associated with this instance.</summary>
      <returns>The SamlAssertion that is currently associated with this instance. Can be null.</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlSecurityToken">
      <summary>Represents a security token that is based upon a SAML assertion.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityToken.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> class.  </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityToken.#ctor(System.IdentityModel.Tokens.SamlAssertion)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> class using the specified SAML assertion.</summary>
      <param name="assertion">A <see cref="T:System.IdentityModel.Tokens.SamlAssertion" /> that represents the SAML assertion for this security token.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSecurityToken.Assertion">
      <summary>Gets the SAML assertion for this security token.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SamlAssertion" /> that represents the SAML assertion for this security token.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityToken.CanCreateKeyIdentifierClause``1">
      <summary>Gets a value indicating whether this security token is capable of creating the specified key identifier. </summary>
      <returns>true when <paramref name="T" /> is of type <see cref="T:System.IdentityModel.Tokens.SamlAssertionKeyIdentifierClause" />; otherwise, false. </returns>
      <typeparam name="T">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> that specifies the key identifier to create.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityToken.CreateKeyIdentifierClause``1">
      <summary>Creates the specified key identifier clause.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SamlAssertionKeyIdentifierClause" /> that is a key identifier clause for a SAML security token.</returns>
      <typeparam name="T">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> that specifies the key identifier to create.</typeparam>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="T" /> is not of type <see cref="T:System.IdentityModel.Tokens.SamlAssertionKeyIdentifierClause" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSecurityToken.Id">
      <summary>Gets a unique identifier of the security token. </summary>
      <returns>The unique identifier of the security token.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityToken.Initialize(System.IdentityModel.Tokens.SamlAssertion)">
      <summary>Initializes the properties of the <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> class using the specified SAML assertion.</summary>
      <param name="assertion">A <see cref="T:System.IdentityModel.Tokens.SamlAssertion" /> that represents the SAML assertion for this security token.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assertion" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityToken.MatchesKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>Returns a value indicating whether the key identifier for this instance is equal to the specified key identifier. </summary>
      <returns>true if <paramref name="keyIdentifierClause" /> is a <see cref="T:System.IdentityModel.Tokens.SamlAssertionKeyIdentifierClause" /> and it has the same unique identifier as the <see cref="P:System.IdentityModel.Tokens.SamlSecurityToken.Id" /> property; otherwise, false.</returns>
      <param name="keyIdentifierClause">An <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> to compare to this instance.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSecurityToken.SecurityKeys">
      <summary>Gets the cryptographic keys associated with the security token.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of type <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> that contains the set of keys associated with the security token.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSecurityToken.ValidFrom">
      <summary>Gets the first instant in time at which this security token is valid.</summary>
      <returns>A <see cref="T:System.DateTime" /> that represents the first instant in time at which this security token is valid.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSecurityToken.ValidTo">
      <summary>Gets the last instant in time at which this security token is valid.</summary>
      <returns>A <see cref="T:System.DateTime" /> that represents the last instant in time at which this security token is valid.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlSecurityTokenHandler">
      <summary>Represents a security token handler that creates security tokens from SAML 1.1 Assertions.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SamlSecurityTokenHandler" /> class with default security token requirements.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.#ctor(System.IdentityModel.Tokens.SamlSecurityTokenRequirement)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SamlSecurityTokenHandler" /> class with the specified security token requirements.</summary>
      <param name="samlSecurityTokenRequirement">The <see cref="T:System.IdentityModel.Tokens.SamlSecurityTokenRequirement" /> to be used by this instance when validating tokens. Sets the <see cref="P:System.IdentityModel.Tokens.SamlSecurityTokenHandler.SamlSecurityTokenRequirement" /> property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="samlSecurityTokenRequirement" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.AddDelegateToAttributes(System.Security.Claims.ClaimsIdentity,System.Collections.Generic.ICollection{System.IdentityModel.Tokens.SamlAttribute},System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>Adds all of the delegates associated with the ActAs subject into the attribute collection.</summary>
      <param name="subject">The delegate of this <see cref="T:System.Security.Claims.ClaimsIdentity" /> object will be serialized into a <see cref="T:System.IdentityModel.Tokens.SamlAttribute" />. The delegate is specified by the <see cref="P:System.Security.Claims.ClaimsIdentity.Actor" /> property.</param>
      <param name="attributes">The attribute collection to which the ActAs token will be serialized.</param>
      <param name="tokenDescriptor">The token descriptor.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="subject" /> is null.-or-<paramref name="tokenDescriptor" /> is null.</exception>
    </member>
    <member name="F:System.IdentityModel.Tokens.SamlSecurityTokenHandler.Assertion">
      <summary>urn:oasis:names:tc:SAML:1.0:assertion</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SamlSecurityTokenHandler.BearerConfirmationMethod">
      <summary>urn:oasis:names:tc:SAML:1.0:cm:bearer</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.CanReadToken(System.Xml.XmlReader)">
      <summary>Indicates whether the current XML element can be read as a token of the type handled by this instance.</summary>
      <returns>true if the <see cref="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ReadToken(System.Xml.XmlReader)" /> method can read the element; otherwise, false.</returns>
      <param name="reader">An XML reader positioned at a start element. The reader should not be advanced.</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSecurityTokenHandler.CanValidateToken">
      <summary>Gets a value that indicates if this handler can validate tokens of type <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" />.</summary>
      <returns>true, which indicates that the handler can validate tokens of type <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" />.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSecurityTokenHandler.CanWriteToken">
      <summary>Gets a value that indicates whether this handler can serialize tokens of type <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" />.</summary>
      <returns>true; which indicates that the handler can serialize tokens of type <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" />.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSecurityTokenHandler.CertificateValidator">
      <summary>Gets or sets the X.509 certificate validator that is used by the current instance to validate X.509 certificates.</summary>
      <returns>An <see cref="T:System.IdentityModel.Selectors.X509CertificateValidator" /> that represents the validator.</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.CollectAttributeValues(System.Collections.Generic.ICollection{System.IdentityModel.Tokens.SamlAttribute})">
      <summary>Collects attributes with a common claim type, claim value type, and original issuer into a single attribute with multiple values.</summary>
      <returns>A collection of <see cref="T:System.IdentityModel.Tokens.SamlAttribute" /> that contains attributes derived from the input collection. Attributes in the input collection that share a common claim type, claim value, and original issuer with other attributes are consolidated into a single attribute with multiple values in the output collection. Attributes in the input collection that do not share claim type, claim value, or original issuer with other attributes appear unaltered in the output collection.</returns>
      <param name="attributes">A collection of type <see cref="T:System.IdentityModel.Tokens.SamlAttribute" /> that contains the attributes generated from claims.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.CreateAdvice(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>When overridden in a derived class, creates a <see cref="T:System.IdentityModel.Tokens.SamlAdvice" /> object for the assertion.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SamlAdvice" /> object. The default is null.</returns>
      <param name="tokenDescriptor">The token descriptor.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.CreateAssertion(System.String,System.IdentityModel.Tokens.SamlConditions,System.IdentityModel.Tokens.SamlAdvice,System.Collections.Generic.IEnumerable{System.IdentityModel.Tokens.SamlStatement})">
      <summary>Creates a <see cref="T:System.IdentityModel.Tokens.SamlAssertion" /> object by using the specified issuer, conditions, advice and statements. You can override this method to customize the parameters used to create the assertion.</summary>
      <returns>The SAML assertion that was created.</returns>
      <param name="issuer">The issuer of the assertion.</param>
      <param name="conditions">The <see cref="T:System.IdentityModel.Tokens.SamlConditions" /> to add to the assertion.</param>
      <param name="advice">The <see cref="T:System.IdentityModel.Tokens.SamlAdvice" /> to add to the assertion.</param>
      <param name="statements">The collection of <see cref="T:System.IdentityModel.Tokens.SamlStatement" /> to add to the assertion.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.CreateAttribute(System.Security.Claims.Claim,System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>Creates a <see cref="T:System.IdentityModel.Tokens.SamlAttribute" /> object from a claim.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SamlAttribute" /> that contains the converted claim.</returns>
      <param name="claim">The <see cref="T:System.Security.Claims.Claim" /> from which to generate the SAML Attribute.</param>
      <param name="tokenDescriptor">The token descriptor.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="claim" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.CreateAttributeStatement(System.IdentityModel.Tokens.SamlSubject,System.Security.Claims.ClaimsIdentity,System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>Creates a <see cref="T:System.IdentityModel.Tokens.SamlAttributeStatement" /> object from a token descriptor.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SamlAttributeStatement" /> that contains the converted claims.</returns>
      <param name="samlSubject">The <see cref="T:System.IdentityModel.Tokens.SamlSubject" /> to use in the <see cref="T:System.IdentityModel.Tokens.SamlAttributeStatement" /> that is created.</param>
      <param name="subject">The <see cref="T:System.Security.Claims.ClaimsIdentity" /> object that contains claims which will be converted to SAML Attributes.</param>
      <param name="tokenDescriptor">The token descriptor.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.CreateAuthenticationStatement(System.IdentityModel.Tokens.SamlSubject,System.Security.Claims.AuthenticationInformation,System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>Creates a SAML 1.1 authentication statement from the specified authentication information.</summary>
      <returns>The SAML authentication statement that was created.</returns>
      <param name="samlSubject">The SamlSubject of the statement.</param>
      <param name="authInfo">The <see cref="T:System.Security.Claims.AuthenticationInformation" /> from which to generate the SAML authentication statement.</param>
      <param name="tokenDescriptor">Contains all the other information that is used in token issuance.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="samlSubject" /> is null.-or-<paramref name="tokenDescriptor" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.CreateClaims(System.IdentityModel.Tokens.SamlSecurityToken)">
      <summary>Creates claims from a SAML 1.1 token.</summary>
      <returns>A <see cref="T:System.Security.Claims.ClaimsIdentity" /> that contains the claims extracted from the token.</returns>
      <param name="samlSecurityToken">A <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> that represents the security token from which to create the claims.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="samlSecurityToken" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.IdentityModel.Tokens.SamlSecurityToken.Assertion" /> property of <paramref name="samlSecurityToken" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The handler is not configured or an issuer name registry is not configured for the handler. (The <see cref="P:System.IdentityModel.Tokens.SamlSecurityTokenHandler.Configuration" /> property is null or is set to a <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration" /> with an <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.IssuerNameRegistry" /> property that is null.</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">The issuer name returned by the configured issuer name registry for the security token (<paramref name="samlSecurityToken" />) is null or empty.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.CreateConditions(System.IdentityModel.Protocols.WSTrust.Lifetime,System.String,System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>Creates the conditions for the assertion.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SamlConditions" /> object that contains the conditions for the assertion.</returns>
      <param name="tokenLifetime">The lifetime of the token.</param>
      <param name="relyingPartyAddress">The endpoint address for which the token is created. The address is modeled as an AudienceRestriction condition.</param>
      <param name="tokenDescriptor">The token descriptor.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.CreateSamlSubject(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>Creates a SAML 1.1 subject for the assertion.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SamlSubject" /> that represents the subject of the assertion.</returns>
      <param name="tokenDescriptor">The security token descriptor from which to create the subject.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tokenDescriptor" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)">
      <summary>Creates the security token reference when the token is not attached to the message.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> that represents the token reference. (An instance of <see cref="T:System.IdentityModel.Tokens.SamlAssertionKeyIdentifierClause" /> is actually returned.)</returns>
      <param name="token">The SAML token.</param>
      <param name="attached">A value that indicates whether an attached or unattached reference should be created.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.CreateStatements(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>Creates SAML 1.1 statements to be included in the assertion.</summary>
      <returns>An enumeration of <see cref="T:System.IdentityModel.Tokens.SamlStatement" /> that contains the statements.</returns>
      <param name="tokenDescriptor">The token descriptor from which to create the statements.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tokenDescriptor" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>Creates a security token based on a token descriptor.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> that represents the SAML 1.1 security token. (The token returned is actually an instance of <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" />.)</returns>
      <param name="tokenDescriptor">The token descriptor from which to create the security token.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tokenDescriptor" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.CreateWindowsIdentity(System.String)">
      <summary>Creates a <see cref="T:System.Security.Principal.WindowsIdentity" /> object using the specified User Principal Name (UPN).</summary>
      <returns>The Windows identity that was created.</returns>
      <param name="upn">The UPN to use to create the identity.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="upn" /> is null or an empty string.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.CreateXmlStringFromAttributes(System.Collections.Generic.IEnumerable{System.IdentityModel.Tokens.SamlAttribute})">
      <summary>Builds an XML formatted string from a collection of SAML 1.1 attributes that represent the Actor.</summary>
      <returns>A well-formed XML string constructed using the attributes.</returns>
      <param name="attributes">An enumeration of type <see cref="T:System.IdentityModel.Tokens.SamlAttribute" /> that contains the attributes.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.DenormalizeAuthenticationType(System.String)">
      <summary>Returns the SAML11 authentication method identifier that matches the specified normalized value for a SAML authentication method.</summary>
      <returns>The SAML11 authentication method identifier (URI) that matches the specified normalized identifier. If no matching SAML11 authentication method is found, the <paramref name="normalizedAuthenticationType" /> URI is returned unaltered.</returns>
      <param name="normalizedAuthenticationType">The normalized value. One of the <see cref="T:System.IdentityModel.Tokens.AuthenticationMethods" /> values.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.DetectReplayedToken(System.IdentityModel.Tokens.SecurityToken)">
      <summary>Throws an exception if the specified token already exists in the token replay cache; otherwise the token is added to the cache.</summary>
      <param name="token">A <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> that represents the SAML 1.1 security token (the token should be of type <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" />) to be checked.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" /> property is null. -or-The <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.TokenReplayCache" /> property of the handler configuration (accessed through the <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" /> property) is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="token" /> cannot be cast as an instance of <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" />.</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenValidationException">The ID of the assertion associated with the token is null or empty. (The <see cref="P:System.IdentityModel.Tokens.SamlSecurityToken.Assertion" /> property of the token references a <see cref="T:System.IdentityModel.Tokens.SamlAssertion" /> that has an <see cref="P:System.IdentityModel.Tokens.SamlAssertion.Id" /> property that references a <see cref="T:System.IdentityModel.Tokens.SamlId" /> with a <see cref="P:System.IdentityModel.Tokens.SamlId.Value" /> property that is null or empty.)</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenReplayDetectedException">The token already exists in the <see cref="T:System.IdentityModel.Tokens.TokenReplayCache" />.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.FindUpn(System.Security.Claims.ClaimsIdentity)">
      <summary>Finds the UPN claim value in the specified <see cref="T:System.Security.Claims.ClaimsIdentity" /> object for the purpose of mapping the identity to a <see cref="T:System.Security.Claims.WindowsClaimsIdentity" /> object.</summary>
      <returns>A string that contains the UPN claim value found.</returns>
      <param name="claimsIdentity">The claims identity object containing the desired UPN claim.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.GetEncryptingCredentials(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>Gets the token encrypting credentials. Override this method to change the token encrypting credentials.</summary>
      <returns>An <see cref="T:System.IdentityModel.SecurityTokenService.EncryptingCredentials" /> that represents the token encrypting credentials.</returns>
      <param name="tokenDescriptor">Retrieves some scope encrypting credentials from the Scope object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tokenDescriptor" /> is null.</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">The encrypting credentials retrieved from the token descriptor are asymmetric.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.GetSigningCredentials(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>Gets the credentials for signing the assertion.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SigningCredentials" /> that represents the credentials for signing the assertion.</returns>
      <param name="tokenDescriptor">The token descriptor.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tokenDescriptor" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.GetTokenReplayCacheEntryExpirationTime(System.IdentityModel.Tokens.SamlSecurityToken)">
      <summary>Returns the time until which the token should be held in the token replay cache.</summary>
      <returns>A <see cref="T:System.DateTime" /> that represents the expiration time.</returns>
      <param name="token">The token for which to return the expiration time.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.GetTokenTypeIdentifiers">
      <summary>Gets the token type identifier(s) supported by this handler.</summary>
      <returns>An array of strings that contains the token type identifier(s) supported by this handler.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSecurityTokenHandler.KeyInfoSerializer">
      <summary>Gets or sets the security token serializer that is used to serialize and deserialize key identifiers.</summary>
      <returns>A <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" /> that represents the serializer.</returns>
      <exception cref="T:System.ArgumentNullException">An attempt to set the value to null occurs.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)">
      <summary>Loads custom configuration from XML.</summary>
      <param name="customConfigElements">An <see cref="T:System.Xml.XmlNodeList" /> that specifies the SAML token authentication requirements.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="customConfigElements" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The configuration specified in <paramref name="customConfigElements" /> is not valid.</exception>
    </member>
    <member name="F:System.IdentityModel.Tokens.SamlSecurityTokenHandler.Namespace">
      <summary>urn:oasis:names:tc:SAML:1.0</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.NormalizeAuthenticationType(System.String)">
      <summary>Returns the normalized value that matches a SAML 1.1 authentication method identifier.</summary>
      <returns>The normalized value, which is one of the <see cref="T:System.IdentityModel.Tokens.AuthenticationMethods" /> values. If no matching value exists, <paramref name="saml11AuthenticationMethod" /> is returned, unaltered.</returns>
      <param name="saml11AuthenticationMethod">The SAML 1.1 authentication method identifier (URI) to normalize.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ProcessAttributeStatement(System.IdentityModel.Tokens.SamlAttributeStatement,System.Security.Claims.ClaimsIdentity,System.String)">
      <summary>Creates claims from a SAML 1.1 attribute statement and adds them to the specified subject.</summary>
      <param name="samlStatement">The <see cref="T:System.IdentityModel.Tokens.SamlAttributeStatement" /> from which the claims are created.</param>
      <param name="subject">The subject to which the claims are added.</param>
      <param name="issuer">The issuer.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="samlStatement" /> is null.-or-<paramref name="subject" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ProcessAuthenticationStatement(System.IdentityModel.Tokens.SamlAuthenticationStatement,System.Security.Claims.ClaimsIdentity,System.String)">
      <summary>Creates claims from a SAML 1.1 authentication statement and adds them to the specified subject.</summary>
      <param name="samlStatement">The <see cref="T:System.IdentityModel.Tokens.SamlAuthenticationStatement" /> from which the claims are created.</param>
      <param name="subject">The subject to which the claims are added.</param>
      <param name="issuer">The issuer.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="samlStatement" /> is null.-or-<paramref name="subject" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ProcessAuthorizationDecisionStatement(System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement,System.Security.Claims.ClaimsIdentity,System.String)">
      <summary>Creates claims from a SAML 1.1 authorization decision statement and adds them to the specified subject.</summary>
      <param name="samlStatement">The <see cref="T:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement" /> from which the claims are created.</param>
      <param name="subject">The subject to which the claims are added.</param>
      <param name="issuer">The issuer.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ProcessSamlSubject(System.IdentityModel.Tokens.SamlSubject,System.Security.Claims.ClaimsIdentity,System.String)">
      <summary>Creates claims from the SAML 1.1 subject and adds them to the specified subject.</summary>
      <param name="samlSubject">The <see cref="T:System.IdentityModel.Tokens.SamlSubject" /> from which the claims are created.</param>
      <param name="subject">The subject to which the claims are added.</param>
      <param name="issuer">The issuer.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="samlSubject" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ProcessStatement(System.Collections.Generic.IList{System.IdentityModel.Tokens.SamlStatement},System.Security.Claims.ClaimsIdentity,System.String)">
      <summary>Creates claims from a collection of SAML 1.1 statements and adds them to the specified subject.</summary>
      <param name="statements">The SAML statements from which the claims are created.</param>
      <param name="subject">The subject to which the claims are added.</param>
      <param name="issuer">The issuer.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="statements" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ReadAction(System.Xml.XmlReader)">
      <summary>Reads the &lt;saml:Action&gt; element.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SamlAction" /> that represents the Action element that is read.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> positioned at the element to read.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ReadAdvice(System.Xml.XmlReader)">
      <summary>Reads the &lt;saml:Advice&gt; element.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SamlAdvice" /> that represents the Advice element that is read.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> positioned at the element to read.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ReadAssertion(System.Xml.XmlReader)">
      <summary>Reads the &lt;saml:Assertion&gt; element.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SamlAssertion" /> that represents the Assertion element that is read.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> positioned at the element to read.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ReadAttribute(System.Xml.XmlReader)">
      <summary>Reads the &lt;saml:Attribute&gt; element.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SamlAssertion" /> that represents the Assertion element that is read.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> positioned at the element to read.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ReadAttributeStatement(System.Xml.XmlReader)">
      <summary>Reads the &lt;saml:AttributeStatement&gt; element, or a &lt;saml:Statement&gt; element that specifies an xsi:type of saml:AttributeStatementType.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SamlAttributeStatement" /> that represents the element that is read.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> positioned at the element to read.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ReadAttributeValue(System.Xml.XmlReader,System.IdentityModel.Tokens.SamlAttribute)">
      <summary>Reads an attribute value.</summary>
      <returns>A string that contains the attribute value.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> positioned at the element to read.</param>
      <param name="attribute">The attribute being read.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ReadAudienceRestrictionCondition(System.Xml.XmlReader)">
      <summary>Reads the &lt;saml:AudienceRestrictionCondition&gt; element from the specified XML reader.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SamlAudienceRestrictionCondition" /> that represents the element that was read.</returns>
      <param name="reader">An XML reader positioned at the &lt;saml:AudienceRestrictionCondition&gt; element to read.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ReadAuthenticationStatement(System.Xml.XmlReader)">
      <summary>Reads the &lt;saml:AuthnStatement&gt; element or a &lt;saml:Statement&gt; element that specifies an xsi:type of saml:AuthnStatementType.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SamlAuthenticationStatement" /> that represents the element that is read.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> positioned at the element to read.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ReadAuthorityBinding(System.Xml.XmlReader)">
      <summary>Read the &lt;saml:AuthorityBinding&gt; element.</summary>
      <returns>The <see cref="T:System.IdentityModel.Tokens.SamlAuthorityBinding" /> that was read.</returns>
      <param name="reader">An XML reader positioned at the &lt;saml:AuthorityBinding&gt; element</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="reader" /> is not positioned at a saml:AuthorityBinding element or contains an unrecognized child element or a child element that is not valid.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ReadAuthorizationDecisionStatement(System.Xml.XmlReader)">
      <summary>Reads the &lt;saml:AuthzDecisionStatement&gt; element or a &lt;saml:Statement&gt; element that specifies an xsi:type of saml:AuthzDecisionStatementType.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SamlAuthorizationStatement" /> that represents the element that is read.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> positioned at the element to read.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ReadCondition(System.Xml.XmlReader)">
      <summary>Reads a saml:AudienceRestrictionCondition or a saml:DoNotCacheCondition from the specified reader</summary>
      <returns>The <see cref="T:System.IdentityModel.Tokens.SamlCondition" /> that was read from the XML.</returns>
      <param name="reader">The reader from which to read the element.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="reader" /> is positioned at an unknown element.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ReadConditions(System.Xml.XmlReader)">
      <summary>Reads the &lt;saml:Conditions&gt; element.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SamlConditions" /> that represents the Conditions element that is read.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> positioned at the element to read.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="reader" /> is not positioned at a Conditions element.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ReadDoNotCacheCondition(System.Xml.XmlReader)">
      <summary>Reads a  saml:DoNotCacheCondition element from the specified XML reader.</summary>
      <returns>The <see cref="T:System.IdentityModel.Tokens.SamlDoNotCacheCondition" /> that was read.</returns>
      <param name="reader">An XML reader positioned at a saml:DoNotCacheCondition element</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="reader" /> is not positioned at a saml:DoNotCacheCondition element.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ReadEvidence(System.Xml.XmlReader)">
      <summary>Reads the &lt;saml:Evidence&gt; element.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SamlEvidence" /> that represents the Evidence element that is read.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> positioned at the element to read.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ReadSigningKeyInfo(System.Xml.XmlReader,System.IdentityModel.Tokens.SamlAssertion)">
      <summary>Deserializes the SAML Signing KeyInfo.</summary>
      <returns>The <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> that represents the key to use to check the signature.</returns>
      <param name="reader">An XmlReader that can be positioned at a ds:KeyInfo element.</param>
      <param name="assertion">The assertion that is having the signature checked.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ReadStatement(System.Xml.XmlReader)">
      <summary>Reads the &lt;saml:Statement&gt; element.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SamlStatement" /> that represents the Statement element that was read.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> positioned at the element to read.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ReadSubject(System.Xml.XmlReader)">
      <summary>Reads the &lt;saml:Subject&gt; element.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SamlSubject" /> that represents the Subject element that was read.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> positioned at the element to read.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ReadSubjectKeyInfo(System.Xml.XmlReader)">
      <summary>Deserializes the SAML Subject &lt;ds:KeyInfo&gt; element.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> that represents the contents of the &lt;ds:KeyInfo&gt; element.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> positioned at a &lt;ds:KeyInfo&gt; element.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ReadToken(System.Xml.XmlReader)">
      <summary>Reads a SAML 1.1 token from the specified stream.</summary>
      <returns>An instance of <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" />.</returns>
      <param name="reader">A <see cref="T:System.Xml.XmlReader" /> stream to a SAML 1.1 Security Token.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" /> property is null. -or- The <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.IssuerTokenResolver" /> property of the configuration specified by the <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" /> property is null. -or- The <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.ServiceTokenResolver" /> property of the configuration specified by the <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" /> property is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ResolveIssuerToken(System.IdentityModel.Tokens.SamlAssertion,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>Resolves the Signing Key Identifier to a <see cref="T:System.IdentityModel.Tokens.SecurityToken" />.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> that represents the resolved token.</returns>
      <param name="assertion">The <see cref="T:System.IdentityModel.Tokens.SamlAssertion" /> for which the Issuer token is to be resolved.</param>
      <param name="issuerResolver">The current <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> associated with this handler.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assertion" /> is null.</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">The handler is unable to resolve the token.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ResolveSubjectKeyIdentifier(System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>Resolves the <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> specified in a saml:Subject element.</summary>
      <returns>The key resolved from the key identifier.</returns>
      <param name="subjectKeyIdentifier">The key identifier to resolve into a key.</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSecurityTokenHandler.SamlSecurityTokenRequirement">
      <summary>Gets or sets the security token requirements for this instance.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SamlSecurityTokenRequirement" /> that specifies the requirements.</returns>
      <exception cref="T:System.ArgumentNullException">An attempt to set the value to null occurs.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.SetDelegateFromAttribute(System.IdentityModel.Tokens.SamlAttribute,System.Security.Claims.ClaimsIdentity,System.String)">
      <summary>This method gets called when a special type of <see cref="T:System.IdentityModel.Tokens.SamlAttribute" /> is detected. The <see cref="T:System.IdentityModel.Tokens.SamlAttribute" /> passed in wraps a <see cref="T:System.IdentityModel.Tokens.SamlAttribute" /> that contains a collection of attribute values (in the <see cref="P:System.IdentityModel.Tokens.SamlAttribute.Values" /> property), each of which will get mapped to a claim. All of the claims will be returned in an <see cref="T:System.Security.Claims.ClaimsIdentity" /> with the specified issuer.</summary>
      <param name="attribute">The <see cref="T:System.IdentityModel.Tokens.SamlAttribute" /> to use.</param>
      <param name="subject">The <see cref="T:System.Security.Claims.ClaimsIdentity" /> that is the subject of this token.</param>
      <param name="issuer">The issuer of the claim.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.IdentityModel.Tokens.SamlAttribute" /> does not contain any valid attribute values.</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSecurityTokenHandler.TokenType">
      <summary>Gets the token type supported by this handler.</summary>
      <returns>The <see cref="T:System.Type" /> of the <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> class.</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.TryResolveIssuerToken(System.IdentityModel.Tokens.SamlAssertion,System.IdentityModel.Selectors.SecurityTokenResolver,System.IdentityModel.Tokens.SecurityToken@)">
      <summary>Resolves the Signing Key Identifier to a SecurityToken.</summary>
      <returns>true if the token is resolved.</returns>
      <param name="assertion">The <see cref="T:System.IdentityModel.Tokens.SamlAssertion" /> for which the Issuer token is to be resolved.</param>
      <param name="issuerResolver">The current <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> associated with this handler.</param>
      <param name="token">When this method returns, contains the resolved security token if a token was successfully resolved.</param>
    </member>
    <member name="F:System.IdentityModel.Tokens.SamlSecurityTokenHandler.UnspecifiedAuthenticationMethod">
      <summary>urn:oasis:names:tc:SAML:1.0:am:unspecified</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ValidateConditions(System.IdentityModel.Tokens.SamlConditions,System.Boolean)">
      <summary>Validates the specified <see cref="T:System.IdentityModel.Tokens.SamlConditions" /> object.</summary>
      <param name="conditions">The SAML 1.1 condition to be validated.</param>
      <param name="enforceAudienceRestriction">true to check for Audience Restriction condition.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
      <summary>Validates the token data and returns its claims.</summary>
      <returns>The identities contained in the token.</returns>
      <param name="token">The SAML 1.1 token to be validated.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.WriteAction(System.Xml.XmlWriter,System.IdentityModel.Tokens.SamlAction)">
      <summary>Writes the &lt;saml:Action&gt; element.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> with which to write the data.</param>
      <param name="action">The data to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.-or-<paramref name="writer" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.WriteAdvice(System.Xml.XmlWriter,System.IdentityModel.Tokens.SamlAdvice)">
      <summary>Writes the &lt;saml:Advice&gt; element.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> with which to write the data.</param>
      <param name="advice">The data to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="advice" /> is null.-or-<paramref name="writer" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.WriteAssertion(System.Xml.XmlWriter,System.IdentityModel.Tokens.SamlAssertion)">
      <summary>Serializes the specified SAML assertion to the specified XML writer.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to use for the serialization.</param>
      <param name="assertion">A <see cref="T:System.IdentityModel.Tokens.SamlAssertion" /> that represents the assertion to serialize.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null.-or-<paramref name="assertion" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The assertion specified by <paramref name="assertion" /> has both the <see cref="T:System.IdentityModel.SecurityTokenService.EncryptingCredentials" /> and <see cref="T:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ReceivedEncryptingCredentials" /> properties set to null.-or-There are no statements and no subject in the assertion specified by <paramref name="data" />. (Both the <see cref="P:System.IdentityModel.Tokens.SamlAssertion.Subject" /> property and the <see cref="P:System.IdentityModel.Tokens.SamlAssertion.Statements" /> property are null.) If an assertion does not contain statements, it must contain a subject.-or-The assertion specified by <paramref name="assertion" /> contains an authentication, attribute, or authorization decision statement and no subject—these statements require a subject. (The <see cref="P:System.IdentityModel.Tokens.SamlAssertion.Statements" /> property contains a statement of type <see cref="T:System.IdentityModel.Tokens.SamlAttributeStatement" />, <see cref="T:System.IdentityModel.Tokens.SamlAuthenticationStatement" />, or <see cref="T:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement" /> and the <see cref="P:System.IdentityModel.Tokens.SamlAssertion.Subject" /> property is null).</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The token encrypting credentials do not have a Symmetric Key specified.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.WriteAttribute(System.Xml.XmlWriter,System.IdentityModel.Tokens.SamlAttribute)">
      <summary>Writes the &lt;saml:Attribute&gt; element.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> with which to write the data.</param>
      <param name="attribute">The data to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attribute" /> is null.-or-<paramref name="writer" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.WriteAttributeStatement(System.Xml.XmlWriter,System.IdentityModel.Tokens.SamlAttributeStatement)">
      <summary>Writes the &lt;saml:AttributeStatement&gt; element.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> with which to write the data.</param>
      <param name="statement">The data to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="statement" /> is null.-or-<paramref name="writer" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.WriteAttributeValue(System.Xml.XmlWriter,System.String,System.IdentityModel.Tokens.SamlAttribute)">
      <summary>Writes the saml:Attribute value.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> with which to write.</param>
      <param name="value">A string that contains the attribute value to be written.</param>
      <param name="attribute">A <see cref="T:System.IdentityModel.Tokens.SamlAttribute" /> that represents the attribute whose value is being written.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.WriteAudienceRestrictionCondition(System.Xml.XmlWriter,System.IdentityModel.Tokens.SamlAudienceRestrictionCondition)">
      <summary>Writes the &lt;saml:AudienceRestriction&gt; element.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> with which to write the data.</param>
      <param name="condition">The data to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> is null.-or-<paramref name="writer" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.IdentityModel.Tokens.SamlConditions.Conditions" /> property of the <see cref="T:System.IdentityModel.Tokens.SamlAudienceRestrictionCondition" /> specified in <paramref name="condition" /> is null or an empty collection.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.WriteAuthenticationStatement(System.Xml.XmlWriter,System.IdentityModel.Tokens.SamlAuthenticationStatement)">
      <summary>Writes the &lt;saml:AuthnStatement&gt; element.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> with which to write the data.</param>
      <param name="statement">The data to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="statement" /> is null.-or-<paramref name="writer" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.WriteAuthorityBinding(System.Xml.XmlWriter,System.IdentityModel.Tokens.SamlAuthorityBinding)">
      <summary>Writes the &lt;saml:AuthorityBinding&gt; element.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> with which to write the data.</param>
      <param name="authorityBinding">The data to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="authorityBinding" /> is null.-or-<paramref name="writer" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.WriteAuthorizationDecisionStatement(System.Xml.XmlWriter,System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement)">
      <summary>Writes the &lt;saml:AuthzDecisionStatement&gt; element.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> with which to write the data.</param>
      <param name="statement">The data to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="statement" /> is null.-or-<paramref name="writer" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.WriteCondition(System.Xml.XmlWriter,System.IdentityModel.Tokens.SamlCondition)">
      <summary>Serializes the specified <see cref="T:System.IdentityModel.Tokens.SamlCondition" /> object.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> with which to write the data.</param>
      <param name="condition">The data to write. By default, only <see cref="T:System.IdentityModel.Tokens.SamlAudienceRestrictionCondition" /> and <see cref="T:System.IdentityModel.Tokens.SamlDoNotCacheCondition" /> are supported.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="condition" /> is null.-or-<paramref name="writer" /> is null.</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">
        <paramref name="condition" /> is not supported. . By default, only <see cref="T:System.IdentityModel.Tokens.SamlAudienceRestrictionCondition" /> and <see cref="T:System.IdentityModel.Tokens.SamlDoNotCacheCondition" /> are supported.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.WriteConditions(System.Xml.XmlWriter,System.IdentityModel.Tokens.SamlConditions)">
      <summary>Writes the &lt;saml:Conditions&gt; element.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> with which to write the data.</param>
      <param name="conditions">The data to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="conditions" /> is null.-or-<paramref name="writer" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.WriteDoNotCacheCondition(System.Xml.XmlWriter,System.IdentityModel.Tokens.SamlDoNotCacheCondition)">
      <summary>Writes the &lt;saml:DoNotCacheCondition&gt; element.</summary>
      <param name="writer">The XML writer with which to write the data.</param>
      <param name="condition">The data to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null.-or-<paramref name="condition" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.WriteEvidence(System.Xml.XmlWriter,System.IdentityModel.Tokens.SamlEvidence)">
      <summary>Writes the &lt;saml:Evidence&gt; element.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> with which to write the data.</param>
      <param name="evidence">The data to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="evidence" /> is null.-or-<paramref name="writer" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.WriteSigningKeyInfo(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>Writes the Signing &lt;ds:KeyInfo&gt; element using the specified XML writer.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> with which to serialize the key identifier.</param>
      <param name="signingKeyIdentifier">The <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> that represents the key identifier to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="signingKeyIdentifier" /> is null.-or-<paramref name="writer" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The handler cannot serialize the key identifier specified by <paramref name="signingKeyIdentifier" />.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.WriteStatement(System.Xml.XmlWriter,System.IdentityModel.Tokens.SamlStatement)">
      <summary>Writes a SamlStatement.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> with which to write the data.</param>
      <param name="statement">The data to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="statement" /> is null.-or-<paramref name="writer" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.WriteSubject(System.Xml.XmlWriter,System.IdentityModel.Tokens.SamlSubject)">
      <summary>Writes the &lt;saml:Subject&gt; element.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> with which to write the data.</param>
      <param name="subject">The data to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="subject" /> is null.-or-<paramref name="writer" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.WriteSubjectKeyInfo(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>Serializes the Subject &lt;ds:KeyInfo&gt; element using the specified XML writer.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> with which to serialize the key identifier.</param>
      <param name="subjectSki">The <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> that represents the key identifier to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="subjectSki" /> is null.-or-<paramref name="writer" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
      <summary>Writes a Saml Token to the specified XML writer.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> with which to write the data.</param>
      <param name="token">The token to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> is null.-or-<paramref name="writer" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="token" /> is not a <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> object.</exception>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlSecurityTokenRequirement">
      <summary>Extends the <see cref="T:System.IdentityModel.Selectors.SecurityTokenRequirement" /> class by adding new properties that are useful for issued tokens.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenRequirement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SamlSecurityTokenRequirement" /> class to default values.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenRequirement.#ctor(System.Xml.XmlElement)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SamlSecurityTokenRequirement" /> class from the specified XML. </summary>
      <param name="element">The XML element from which the instance is to be loaded.</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSecurityTokenRequirement.CertificateValidator">
      <summary>Gets or sets the <see cref="T:System.IdentityModel.Selectors.X509CertificateValidator" /> that is associated with this token requirement.</summary>
      <returns>The X.509 certificate validator that is associated with this token requirement. The default is null.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSecurityTokenRequirement.MapToWindows">
      <summary>Gets or sets a value that indicates whether the token handler will attempt to map the SAML identity to a Windows identity by using the unique principal name (UPN) claim.</summary>
      <returns>true to attempt to map the SAML identity to a Windows identity; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSecurityTokenRequirement.NameClaimType">
      <summary>Gets or sets the claim type that will be used to generate the FederatedIdentity.Name property.</summary>
      <returns>The claim type. The default is the value of the <see cref="F:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType" /> field.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSecurityTokenRequirement.RoleClaimType">
      <summary>Gets or sets the claim type that is used to generate the FederatedIdentity.Roles property.</summary>
      <returns>The role claim type. The default is the value of the <see cref="F:System.Security.Claims.ClaimTypes.Role" /> field.</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenRequirement.ShouldEnforceAudienceRestriction(System.IdentityModel.Selectors.AudienceUriMode,System.IdentityModel.Tokens.SecurityToken)">
      <summary>Returns a value that indicates whether Audience Enforcement checks are required for the specified token based on the settings of this <see cref="T:System.IdentityModel.Tokens.SamlSecurityTokenRequirement" />.</summary>
      <returns>true if Audience Enforcement should be applied; otherwise, false.</returns>
      <param name="audienceUriMode">One of the enumeration values that defines the audience requirement.</param>
      <param name="token">The security token to be tested for Audience Enforcement.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenRequirement.ValidateAudienceRestriction(System.Collections.Generic.IList{System.Uri},System.Collections.Generic.IList{System.Uri})">
      <summary>Checks the specified list of Audience URIs with the AllowedAudienceUri list.</summary>
      <param name="allowedAudienceUris">Collection of AudienceUris.</param>
      <param name="tokenAudiences">Collection of audience URIs the token applies to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="allowedAudienceUris" /> is null.-or-<paramref name="tokenAudiences" /> is null.</exception>
      <exception cref="T:System.IdentityModel.Tokens.AudienceUriValidationFailedException">
        <paramref name="tokenAudiences" /> is an empty collection. -or-<paramref name="allowedAudienceUris" /> is an empty collection.-or-Validation fails.</exception>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlSerializer">
      <summary>Serializes and deserializes <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> objects into and from XML documents. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SamlSerializer" /> class.  </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSerializer.LoadAdvice(System.Xml.XmlDictionaryReader,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>Reads the additional information provided by the SAML authority within a &lt;saml:Advice&gt; element of a SAML assertion using the specified XML reader.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SamlAdvice" /> that contains additional information provided by the SAML authority within a &lt;saml:Advice&gt; element of a SAML assertion.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlDictionaryReader" /> to read the additional information provided by the SAML authority.</param>
      <param name="keyInfoSerializer">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" /> that reads the KeyInfo clause of the digital signature.</param>
      <param name="outOfBandTokenResolver">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> that determines the security token that created the digital signature.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSerializer.LoadAssertion(System.Xml.XmlDictionaryReader,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>Reads a SAML assertion from the specified XML reader.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SamlAssertion" /> that represents the SAML assertion.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlDictionaryReader" /> to read the SAML assertion.</param>
      <param name="keyInfoSerializer">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" /> that reads the KeyInfo clause of the digital signature.</param>
      <param name="outOfBandTokenResolver">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> that determines the security token that created the digital signature.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSerializer.LoadAttribute(System.Xml.XmlDictionaryReader,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>Reads an attribute of the subject of a SAML security token using the specified XML reader.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SamlAttribute" /> that represents a claim that is an attribute of the subject of a SAML security token.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlDictionaryReader" /> to read the attributes.</param>
      <param name="keyInfoSerializer">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" /> that reads the KeyInfo clause of the digital signature.</param>
      <param name="outOfBandTokenResolver">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> that determines the security token that created the digital signature.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSerializer.LoadCondition(System.Xml.XmlDictionaryReader,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>Reads a condition that must be taken into account when assessing the validity of a SAML assertion using the specified XML reader.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SamlCondition" /> that specifies a condition that must be taken into account when assessing the validity of a SAML assertion.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlDictionaryReader" /> to read the SAML condition.</param>
      <param name="keyInfoSerializer">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" /> that reads the KeyInfo clause of the digital signature.</param>
      <param name="outOfBandTokenResolver">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> that determines the security token that created the digital signature.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSerializer.LoadConditions(System.Xml.XmlDictionaryReader,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>Reads a set of conditions that must be taken into account when assessing the validity of a SAML assertion using the specified XML reader.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SamlConditions" /> that specifies a set of conditions that must be taken into account when assessing the validity of a SAML assertion.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlDictionaryReader" /> to read the SAML conditions.</param>
      <param name="keyInfoSerializer">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" /> that reads the KeyInfo clause of the digital signature.</param>
      <param name="outOfBandTokenResolver">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> that determines the security token that created the digital signature.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSerializer.LoadStatement(System.Xml.XmlDictionaryReader,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>Reads a SAML statement using the specified XML reader.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SamlStatement" /> that represents the SAML statement.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlDictionaryReader" /> to read the SAML statement.</param>
      <param name="keyInfoSerializer">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" /> that reads the KeyInfo clause of the digital signature.</param>
      <param name="outOfBandTokenResolver">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> that determines the security token that created the digital signature.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSerializer.PopulateDictionary(System.Xml.IXmlDictionary)">
      <summary>Replaces the default set of XML elements and attributes that are recognized by this serializer with the specified dictionary of elements and attributes. </summary>
      <param name="dictionary">An <see cref="T:System.Xml.IXmlDictionary" /> that contains the set of XML elements and attributes.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSerializer.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>Reads a SAML security token from the specified XML reader.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> security token.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlDictionaryReader" /> to read the <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> security token.</param>
      <param name="keyInfoSerializer">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" /> that reads the KeyInfo clause of the digital signature.</param>
      <param name="outOfBandTokenResolver">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> that determines the security token that created the digital signature.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null</exception>
      <exception cref="T:System.Security.SecurityException">
        <paramref name="reader" /> refers to an XML element that does not contain a digital signature. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSerializer.WriteToken(System.IdentityModel.Tokens.SamlSecurityToken,System.Xml.XmlWriter,System.IdentityModel.Selectors.SecurityTokenSerializer)">
      <summary>Writes the specified SAML security token into the specified XML serializer.</summary>
      <param name="token">The <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> to write.</param>
      <param name="writer">An <see cref="T:System.Xml.XmlDictionaryWriter" /> to write the SAML authorization statement.</param>
      <param name="keyInfoSerializer">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" /> that is capable of writing KeyInfo clauses.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null-or-<paramref name="token" /> is null</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlStatement">
      <summary>Represents a claim for a <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> security token.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlStatement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SamlStatement" /> class.  </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlStatement.CreatePolicy(System.IdentityModel.Claims.ClaimSet,System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator)">
      <summary>Creates an authorization policy for a <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> security token.</summary>
      <returns>An <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" /> that represents an authorization policy for the <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> security token.</returns>
      <param name="issuer">A <see cref="T:System.IdentityModel.Claims.ClaimSet" /> that represents the issuer of the <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> security token.</param>
      <param name="samlAuthenticator">A <see cref="T:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator" /> to authenticate the <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> security token.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlStatement.IsReadOnly">
      <summary>When overridden in a derived class, gets a value that indicates whether the properties of this instance are read-only.</summary>
      <returns>true if the properties of this instance are read-only; otherwise, false. The default is false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlStatement.MakeReadOnly">
      <summary>Causes this instance to be read-only.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlStatement.ReadXml(System.Xml.XmlDictionaryReader,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>When overridden in a derived class, reads the SAML statement from the specified XML reader.</summary>
      <param name="reader">A <see cref="T:System.Xml.XmlDictionaryReader" /> to read the SAML statement.</param>
      <param name="samlSerializer">A <see cref="T:System.IdentityModel.Tokens.SamlSerializer" /> that is capable of reading XML elements in the SAML statement that is defined in the SAML specification.</param>
      <param name="keyInfoSerializer">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" /> that reads the KeyInfo clause of the digital signature.</param>
      <param name="outOfBandTokenResolver">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> that determines the security token that created the digital signature.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlStatement.WriteXml(System.Xml.XmlDictionaryWriter,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer)">
      <summary>Writes the SAML statement into the specified XML serializer.</summary>
      <param name="writer">A <see cref="T:System.Xml.XmlDictionaryWriter" /> to write the SAML statement.</param>
      <param name="samlSerializer">A <see cref="T:System.IdentityModel.Tokens.SamlSerializer" /> that is capable of writing XML elements in a SAML assertion.</param>
      <param name="keyInfoSerializer">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" /> that is capable of writing KeyInfo clauses.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlSubject">
      <summary>Represents the subject of a SAML security token.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSubject.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SamlSubject" /> class.  </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSubject.#ctor(System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SamlSubject" /> class using the specified name, the domain in which the name resides, and the format the name is in.</summary>
      <param name="nameFormat">A URI reference that represents the format that the <paramref name="name" /> parameter is in. Sets the <see cref="P:System.IdentityModel.Tokens.SamlSubject.NameFormat" /> property.</param>
      <param name="nameQualifier">The domain in which the <paramref name="name" /> parameter resides. Sets the <see cref="P:System.IdentityModel.Tokens.SamlSubject.NameQualifier" /> property.</param>
      <param name="name">The subject name. Sets the <see cref="P:System.IdentityModel.Tokens.SamlSubject.Name" /> property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null or is <see cref="F:System.String.Empty" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSubject.#ctor(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SamlSubject" /> class using the specified name, the domain in which the name resides, the format the name is in, authentication protocols, additional authentication information, and a key identifier.</summary>
      <param name="nameFormat">A URI reference that represents the format that the <paramref name="name" /> parameter is in. Sets the <see cref="P:System.IdentityModel.Tokens.SamlSubject.NameFormat" /> property.</param>
      <param name="nameQualifier">The domain in which the <paramref name="name" /> parameter resides. Sets the <see cref="P:System.IdentityModel.Tokens.SamlSubject.NameQualifier" /> property.</param>
      <param name="name">The subject name. Sets the <see cref="P:System.IdentityModel.Tokens.SamlSubject.Name" /> property.</param>
      <param name="confirmations">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of type <see cref="T:System.String" /> that contains URI references that identify the protocols to authenticate the subject. Sets the <see cref="P:System.IdentityModel.Tokens.SamlSubject.ConfirmationMethods" /> property.</param>
      <param name="confirmationData">Additional authentication information that can be used by authentication protocols. Sets the <see cref="P:System.IdentityModel.Tokens.SamlSubject.SubjectConfirmationData" /> property.</param>
      <param name="securityKeyIdentifier">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> that provides access to a cryptographic key held by the subject of the <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> security token. Sets the <see cref="P:System.IdentityModel.Tokens.SamlSubject.KeyIdentifier" /> property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null or is <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="confirmations" /> contains a null or <see cref="F:System.String.Empty" /> member.-or-<paramref name="confirmations" /> does not contain any members and <paramref name="name" /> is null or is <see cref="F:System.String.Empty" />.-or-<paramref name="confirmations" /> does not contain any members and <paramref name="confirmationData" /> or <paramref name="securityKeyIdentifier" /> are not null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSubject.ConfirmationMethods">
      <summary>Gets a set of URI references that identify the protocols that should be used to authenticate the subject.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> of type <see cref="T:System.String" /> that contains a set of URI references that identify the protocols that should be used to authenticate the subject.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSubject.Crypto">
      <summary>Gets or sets the cryptographic key that is used to verify the digital signature that is identified by this SAML subject statement.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> that contains the cryptographic key that is used to verify the digital signature for a SAML security token.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSubject.ExtractClaims">
      <summary>Gets a set of claims using the properties of this class. </summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of type <see cref="T:System.IdentityModel.Claims.Claim" /> that contains the set of claims represented by this <see cref="T:System.IdentityModel.Tokens.SamlSubject" /> instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSubject.ExtractSubjectKeyClaimSet(System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator)">
      <summary>Gets a set of claims using the properties of this class and the specified SAML security token authenticator.</summary>
      <returns>A <see cref="T:System.IdentityModel.Claims.ClaimSet" /> that contains the set of claims represented by this <see cref="T:System.IdentityModel.Tokens.SamlSubject" /> instance.</returns>
      <param name="samlAuthenticator">A <see cref="T:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator" /> that authenticates the portion of a <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> security token that corresponds to the &lt;saml:Subject&gt; element.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="samlAuthenticator" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSubject.IsReadOnly">
      <summary>Gets a value that indicates whether the properties of this instance are read-only.</summary>
      <returns>true if the properties of this instance are read-only; otherwise, false. The default is false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSubject.KeyIdentifier">
      <summary>Gets or sets a key identifier that provides access to a cryptographic key held by the subject of the SAML security token.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> that provides access to a cryptographic key held by the subject of the <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> security token.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSubject.MakeReadOnly">
      <summary>Causes this instance to be read-only.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSubject.Name">
      <summary>Gets or sets the subject name of a SAML security token.</summary>
      <returns>The subject name of a <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> security token.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSubject.NameClaimType">
      <summary>Gets the claim type that is used to represent the subject name of a SAML security token. </summary>
      <returns>The claim type that is used to represent the subject name of a SAML security token (<see cref="P:System.IdentityModel.Claims.ClaimTypes.NameIdentifier" />).</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSubject.NameFormat">
      <summary>Gets or sets a URI reference that represents the format that the subject name of a SAML security token is in.</summary>
      <returns>A URI reference that represents the format that the subject name of a SAML security token is in.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSubject.NameQualifier">
      <summary>Gets or sets the domain in which the subject name of a SAML security token resides in.</summary>
      <returns>The domain in which the subject name of a SAML security token resides in.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSubject.ReadXml(System.Xml.XmlDictionaryReader,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>Reads the &lt;saml:Subject&gt; element from the specified XML reader.</summary>
      <param name="reader">A <see cref="T:System.Xml.XmlDictionaryReader" /> to read the &lt;saml:Subject&gt; element.</param>
      <param name="samlSerializer">A <see cref="T:System.IdentityModel.Tokens.SamlSerializer" /> that is capable of reading XML elements in a SAML assertion.</param>
      <param name="keyInfoSerializer">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" /> that reads the KeyInfo clause of the digital signature.</param>
      <param name="outOfBandTokenResolver">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> that determines the security token that created the digital signature.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.-or-<paramref name="samlSerializer" /> is null.</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">
        <paramref name="reader" /> refers to an XML element in which one of the following is true:Contains an &lt;saml:NameIdentifier&gt; element without a value.-or-Contains an &lt;saml:ConfirmationMehtod&gt; element without a value.-or-Contains a &lt;saml:SubjectConfirmation&gt; element that does not have at least one &lt;saml:ConfirmationMethod&gt; child element.-or-Does not contain at least one &lt;saml:ConfirmationMethod&gt; or &lt;saml:NameIdentifier&gt; element. </exception>
      <exception cref="T:System.Security.SecurityException">
        <paramref name="reader" /> refers to an XML element that contains a &lt;ds:KeyInfo&gt; element that does not have a key that can be retrieved.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSubject.SubjectConfirmationData">
      <summary>Gets or sets additional authentication information that can be used by authentication protocols. </summary>
      <returns>Additional authentication information that can be used by authentication protocols.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSubject.WriteXml(System.Xml.XmlDictionaryWriter,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer)">
      <summary>Writes the &lt;saml:Subject&gt; element into the specified XML serializer.</summary>
      <param name="writer">A <see cref="T:System.Xml.XmlDictionaryWriter" /> to write the &lt;saml:Subject&gt; element.</param>
      <param name="samlSerializer">A <see cref="T:System.IdentityModel.Tokens.SamlSerializer" /> that is capable of writing XML elements in a SAML assertion.</param>
      <param name="keyInfoSerializer">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" /> that is capable of writing KeyInfo clauses.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlSubjectStatement">
      <summary>Represents a claim for a <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> security token.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSubjectStatement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SamlSubjectStatement" /> class.  </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSubjectStatement.#ctor(System.IdentityModel.Tokens.SamlSubject)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SamlSubjectStatement" /> class using the specified subject. </summary>
      <param name="samlSubject">A <see cref="T:System.IdentityModel.Tokens.SamlSubject" /> that identifies the subject of a <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> security token. Sets the <see cref="P:System.IdentityModel.Tokens.SamlSubjectStatement.SamlSubject" /> property.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSubjectStatement.AddClaimsToList(System.Collections.Generic.IList{System.IdentityModel.Claims.Claim})">
      <summary>Adds a claim based on the properties of this instance to the specified collection of claims.</summary>
      <param name="claims">An <see cref="T:System.Collections.Generic.IList`1" /> of type <see cref="T:System.IdentityModel.Claims.Claim" /> that contains the set of claims to add to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="claims" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSubjectStatement.CreatePolicy(System.IdentityModel.Claims.ClaimSet,System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator)">
      <summary>Creates an authorization policy for a <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> security token.</summary>
      <returns>An <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" /> that represents an authorization policy for the <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> security token.</returns>
      <param name="issuer">A <see cref="T:System.IdentityModel.Claims.ClaimSet" /> that represents the issuer of the <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> security token.</param>
      <param name="samlAuthenticator">A <see cref="T:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator" /> to authenticate the <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> security token.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSubjectStatement.IsReadOnly">
      <summary>Gets a value indicating whether the properties of this instance are read-only.</summary>
      <returns>true if the properties of this instance are read-only; otherwise, false. The default is false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSubjectStatement.MakeReadOnly">
      <summary>Causes this instance to be read-only.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSubjectStatement.SamlSubject">
      <summary>Gets or sets the subject of a <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> security token.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SamlSubject" /> that identifies the subject of a <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> security token.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.IdentityModel.Tokens.SamlSubjectStatement.SamlSubject" /> property is set and the <see cref="P:System.IdentityModel.Tokens.SamlSubjectStatement.IsReadOnly" /> property is true.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSubjectStatement.SetSubject(System.IdentityModel.Tokens.SamlSubject)">
      <summary>Sets the subject of a <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> security token.</summary>
      <param name="samlSubject">A <see cref="T:System.IdentityModel.Tokens.SamlSubject" /> that identifies the subject of a <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> security token.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="samlSubject" /> is null.</exception>
    </member>
    <member name="T:System.IdentityModel.Tokens.SecurityAlgorithms">
      <summary>Defines constants for the URIs that represent the cryptographic algorithms that are used to encrypt XML and compute digital signatures for SOAP messages.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption">
      <summary>Specifies a URI that points to the 128-bit AES cryptographic algorithm for encrypting XML. This field is constant. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap">
      <summary>Specifies a URI that points to the 128-bit AES cryptographic algorithm for encrypting and decrypting symmetric keys (key wrap). This field is constant.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption">
      <summary>Specifies a URI that points to the 192-bit AES cryptographic algorithm for encrypting XML. This field is constant. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap">
      <summary>Specifies a URI that points to the 192-bit AES cryptographic algorithm for encrypting and decrypting symmetric keys (key wrap). This field is constant.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption">
      <summary>Specifies a URI that points to the 256-bit AES cryptographic algorithm for encrypting XML. This field is constant. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap">
      <summary>Specifies a URI that points to the 256-bit AES cryptographic algorithm for encrypting and decrypting symmetric keys (key wrap). This field is constant.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.DesEncryption">
      <summary>Specifies a URI that points to the DES cryptographic algorithm for encrypting XML. This field is constant.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.DsaSha1Signature">
      <summary>Specifies a URI that points to the DSA cryptographic algorithm for digitally signing XML. This field is constant.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.ExclusiveC14n">
      <summary>Represents the Exclusive XML Without Comments Canonicalization algorithm. This field is constant.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.ExclusiveC14nWithComments">
      <summary>Represents the Exclusive XML With Comments Canonicalization algorithm. This field is constant.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.HmacSha1Signature">
      <summary>Specifies a URI that points to the HMAC cryptographic algorithm for digitally signing XML. This field is constant.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.HmacSha256Signature">
      <summary>Specifies a URI that points to the 256-bit HMAC cryptographic algorithm for digitally signing XML. This field is constant.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation">
      <summary>Represents the P-SHA1 key generation algorithm. This field is constant.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivationDec2005">
      <summary>Represents the December 2007 version of the P-SHA1 key generation algorithm. This field is constant.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.Ripemd160Digest">
      <summary>Specifies a URI that points to the RIPEMD-160 cryptographic digest algorithm. This field is constant.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaOaepKeyWrap">
      <summary>Specifies a URI that points to the RSAES-OAEP-ENCRYPT cryptographic algorithm for encrypting and decrypting asymmetric keys (key wrap). This field is constant.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha1Signature">
      <summary>Specifies a URI that points to the RSA-SHA1 cryptographic algorithm for digitally signing XML. This field is constant.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256Signature">
      <summary>Specifies a URI that points to the RSA-SHA256 cryptographic algorithm for digitally signing XML. This field is constant.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaV15KeyWrap">
      <summary>Specifies a URI that points to the RSAES-PKCS1-v1_5 cryptographic algorithm for encrypting and decrypting asymmetric keys (key wrap). This field is constant.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.Sha1Digest">
      <summary>Specifies a URI that points to the 160-bit SHA-1 digest algorithm. This field is constant.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.Sha256Digest">
      <summary>Specifies a URI that points to the 256-bit SHA-256 digest algorithm. This field is constant.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.Sha512Digest">
      <summary>Specifies a URI that points to the 512-bit SHA-512 digest algorithm. This field is constant.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.StrTransform">
      <summary>Represents the Security Token Reference-Transform (STR-Transform) algorithm. This field is constant.</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.TlsSspiKeyWrap">
      <summary>Specifies a URI that points to the Transport Layer Security (TLS) algorithm for encrypting and decrypting symmetric keys (key wrap). This field is constant.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption">
      <summary>Specifies a URI that points to the Triple DES cryptographic algorithm for encrypting XML. This field is constant.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap">
      <summary>Specifies a URI that points to the Triple DES cryptographic algorithm for encrypting and decrypting symmetric keys (key wrap). This field is constant.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.WindowsSspiKeyWrap">
      <summary>Specifies a URI that points to the GSS-API cryptographic algorithm for encrypting and decrypting Kerberos ticket session keys (key wrap). This field is constant.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.SecurityKey">
      <summary>Base class for security keys.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKey.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> class.  </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKey.DecryptKey(System.String,System.Byte[])">
      <summary>When overridden in a derived class, decrypts the specified encrypted key.</summary>
      <returns>An array of <see cref="T:System.Byte" /> that contains the decrypted key.</returns>
      <param name="algorithm">The cryptographic algorithm that was used to encrypt the key.</param>
      <param name="keyData">An array of <see cref="T:System.Byte" /> that contains the encrypted key.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKey.EncryptKey(System.String,System.Byte[])">
      <summary>When overridden in a derived class, encrypts the specified key.</summary>
      <returns>An array of <see cref="T:System.Byte" /> that contains the encrypted key.</returns>
      <param name="algorithm">The cryptographic algorithm to encrypt the key with.</param>
      <param name="keyData">An array of <see cref="T:System.Byte" /> that contains the key.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKey.IsAsymmetricAlgorithm(System.String)">
      <summary>When overridden in a derived class, gets a value that indicates whether the specified algorithm uses asymmetric keys. </summary>
      <returns>true when the specified algorithm uses asymmetric keys; otherwise, false. </returns>
      <param name="algorithm">The cryptographic algorithm.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKey.IsSupportedAlgorithm(System.String)">
      <summary>When overridden in a derived class, gets a value that indicates whether the specified algorithm is supported by this class. </summary>
      <returns>true when the specified algorithm is supported by this class; otherwise, false.</returns>
      <param name="algorithm">The cryptographic algorithm.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKey.IsSymmetricAlgorithm(System.String)">
      <summary>When overridden in a derived class, gets a value that indicates whether the specified algorithm uses symmetric keys.</summary>
      <returns>true when the specified algorithm uses symmetric keys; otherwise, false.</returns>
      <param name="algorithm">The cryptographic algorithm.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityKey.KeySize">
      <summary>When overridden in a derived class, gets the size, in bits, of the key.</summary>
      <returns>The size, in bits, of the key.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.SecurityKeyElement">
      <summary>Provides delayed resolution of security keys by resolving the <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> or <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> only when cryptographic functions are needed. This allows a key identifier clause or key identifier that is never used by an application to be serialized and deserialzied on and off the wire without issues.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyElement.#ctor(System.IdentityModel.Tokens.SecurityKeyIdentifier,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SecurityKeyElement" /> class from the specified key identifier.</summary>
      <param name="securityKeyIdentifier">A key identifier that represents a <see cref="T:System.IdentityModel.Tokens.SecurityKey" />.</param>
      <param name="securityTokenResolver">A token resolver that can be resolved to a <see cref="T:System.IdentityModel.Tokens.SecurityKey" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="securityKeyIdentifier" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyElement.#ctor(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SecurityKeyElement" /> class from the specified key identifier clause.</summary>
      <param name="securityKeyIdentifierClause">A key identifier clause that represents a <see cref="T:System.IdentityModel.Tokens.SecurityKey" />.</param>
      <param name="securityTokenResolver">A token resolver that can be resolved to a <see cref="T:System.IdentityModel.Tokens.SecurityKey" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="securityKeyIdentifierClause" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyElement.DecryptKey(System.String,System.Byte[])">
      <summary>Decrypts the specified key by using the specified algorithm.</summary>
      <returns>An array that contains the decrypted key.</returns>
      <param name="algorithm">The algorithm to use to decrypt the key.</param>
      <param name="keyData">An array that contains the encrypted key.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyElement.EncryptKey(System.String,System.Byte[])">
      <summary>Encrypts the specified key by using the specified algorithm.</summary>
      <returns>An array that contains the encrypted key.</returns>
      <param name="algorithm">The algorithm to use to decrypt the key.</param>
      <param name="keyData">An array that contains the key to encrypt.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyElement.IsAsymmetricAlgorithm(System.String)">
      <summary>Returns a value that indicates whether the specified algorithm is asymmetric.</summary>
      <returns>true if the algorithm will be processed by the runtime as asymmetric; otherwise, false.</returns>
      <param name="algorithm">The algorithm to check.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyElement.IsSupportedAlgorithm(System.String)">
      <summary>Returns a value that indicates whether the specified algorithm is supported by this key.</summary>
      <returns>true if the algorithm is supported by this key; otherwise, false.</returns>
      <param name="algorithm">The algorithm to check.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyElement.IsSymmetricAlgorithm(System.String)">
      <summary>Returns a value that indicates whether the specified algorithm is symmetric.</summary>
      <returns>true if the algorithm will be processed by the runtime as symmetric; otherwise, false.</returns>
      <param name="algorithm">The algorithm to check.</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityKeyElement.KeySize">
      <summary>Gets the key size, in bits.</summary>
      <returns>The key size, in bits.</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.SecurityKeyIdentifier">
      <summary>Represents a key identifier.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyIdentifier.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> class.  </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyIdentifier.#ctor(System.IdentityModel.Tokens.SecurityKeyIdentifierClause[])">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> class using the specified key identifier clauses. </summary>
      <param name="clauses">An array of <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> that contains the key identifier clauses.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="clauses" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyIdentifier.Add(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>Adds a key identifier clause to the end of the list.</summary>
      <param name="clause">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> to be added to the end of the list.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="clause" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The value of the <see cref="P:System.IdentityModel.Tokens.SecurityKeyIdentifier.IsReadOnly" /> property is true.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityKeyIdentifier.CanCreateKey">
      <summary>Gets a value that indicates whether a key can be created for at least one of the key identifier clauses. </summary>
      <returns>true if a key can be created for at least one of the key identifier clauses; otherwise, false. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityKeyIdentifier.Count">
      <summary>Gets the number of key identifier clauses.</summary>
      <returns>The number of key identifier clauses.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyIdentifier.CreateKey">
      <summary>Creates a key for one of the key identifier clauses.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> that represents the created key.</returns>
      <exception cref="T:System.InvalidOperationException">A key could not be created for any of the key identifier clauses.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyIdentifier.Find``1">
      <summary>Searches for a key identifier clause of the specified type and returns the first occurrence within the entire collection. </summary>
      <returns>The first <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> in the collection that is of the type specified in the <paramref name="TClause" /> parameter.</returns>
      <typeparam name="TClause">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> that represents the type of key identifier clause to search the collection for.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="TClause" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The collection does not contain a key identifier clause of the type specified in the <paramref name="TClause" /> parameter.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyIdentifier.GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection of key identifier clauses.</summary>
      <returns>A <see cref="T:System.Collections.Generic.List`1.Enumerator" /> of type <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> for the collection.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityKeyIdentifier.IsReadOnly">
      <summary>Gets a value that indicates whether the properties of this instance are read-only.</summary>
      <returns>true if the properties of this instance are read-only; otherwise, false. The default is false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityKeyIdentifier.Item(System.Int32)">
      <summary>Gets the key identifier clause at the specified index.</summary>
      <returns>The <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> at the specified index.</returns>
      <param name="index">The zero-based index of the key identifier clause in the collection of key identifier clauses.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0.-or-<paramref name="index" /> is equal to or greater than <see cref="P:System.IdentityModel.Tokens.SecurityKeyIdentifier.Count" />.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyIdentifier.MakeReadOnly">
      <summary>Causes this instance to be read-only.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyIdentifier.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection of key identifier clauses.</summary>
      <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyIdentifier.ToString">
      <summary>Returns the current object.</summary>
      <returns>The current object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyIdentifier.TryFind``1(``0@)">
      <summary>Searches for a key identifier clause of the specified type and returns a value that indicates whether a clause of that type could be found. When a type is found it is returned in the out parameter. </summary>
      <returns>true when a key identifier clause of the type specified in the <paramref name="TClause" /> parameter exists in the collection; otherwise, false. </returns>
      <param name="clause">When this method returns, contains a <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> that is of the type specified in the <paramref name="TClause" /> parameter when a clause of that type could be found in the collection. This parameter is passed un-initialized. </param>
      <typeparam name="TClause">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> that represents the type of key identifier clause to search the collection for.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause">
      <summary>Represents an abstract base class for a key identifier clause.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> class using the specified key identifier clause type. </summary>
      <param name="clauseType">The key identifier clause type. Sets the value of the <see cref="P:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.ClauseType" /> property.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.#ctor(System.String,System.Byte[],System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> class using the specified key identifier clause type, nonce, and the derived key length. </summary>
      <param name="clauseType">The key identifier clause type. Sets the value of the <see cref="P:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.ClauseType" /> property.</param>
      <param name="nonce">An array of <see cref="T:System.Byte" /> that contains the nonce that was used to create a derived key. Sets the value that is returned by the <see cref="M:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.GetDerivationNonce" /> method.</param>
      <param name="length">The size of the derived key. Sets the value of the <see cref="P:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.DerivationLength" /> property.</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.CanCreateKey">
      <summary>Gets a value that indicates whether a key can be created. </summary>
      <returns>true if a key can be created; otherwise, false. The default is false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.ClauseType">
      <summary>Gets the key identifier clause type.</summary>
      <returns>The key identifier clause type.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.CreateKey">
      <summary>Creates a key based on the parameters passed into the constructor.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> that contains the created key.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.DerivationLength">
      <summary>Gets the size of the derived key.</summary>
      <returns>The size of the derived key.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.GetDerivationNonce">
      <summary>Gets the nonce that was used to generate the derived key.</summary>
      <returns>An array of <see cref="T:System.Byte" /> that contains the nonce that was used to generate the derived key.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.Id">
      <summary>Gets or sets the key identifier clause ID.</summary>
      <returns>The key identifier clause ID. The default is null.</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.Matches(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>Returns a value that indicates whether the key identifier for this instance is equivalent to the specified key identifier clause.</summary>
      <returns>true if <paramref name="keyIdentifierClause" /> is the same instance as the current instance; otherwise, false.</returns>
      <param name="keyIdentifierClause">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> to compare to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyIdentifierClause" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClauseSerializer">
      <summary>Abstract base class for a serializer that can serialize and deserialize key identifier clauses.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyIdentifierClauseSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClauseSerializer" /> class.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyIdentifierClauseSerializer.CanReadKeyIdentifierClause(System.Xml.XmlReader)">
      <summary>When overridden in a derived class, returns a value that indicates whether the element where the specified reader is positioned can be read as a key identifier clause by the handler.</summary>
      <returns>true if the XML can be deserialized to a key identifier clause by the handler; otherwise false. </returns>
      <param name="reader">An XML reader positioned at the start element of the key identifier clause.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyIdentifierClauseSerializer.CanWriteKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>When overridden in a derived class, returns a value that indicates whether the specified key identifier clause can be serialized by the handler.</summary>
      <returns>true if the key identifier clause can be serialized by the handler, otherwise, false.</returns>
      <param name="securityKeyIdentifierClause">The key identifier clause to check.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyIdentifierClauseSerializer.ReadKeyIdentifierClause(System.Xml.XmlReader)">
      <summary>When overridden in a derived class, deserializes a key identifier clause from by using the specified XML reader.</summary>
      <returns>The key identifier clause that was deserialized from the XML.</returns>
      <param name="reader">An XML reader positioned at the start element of the key identifier clause to read.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyIdentifierClauseSerializer.WriteKeyIdentifierClause(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>When overridden in a derived class, serializes the specified key identifier clause.</summary>
      <param name="writer">The XML Writer to use to serialized the key identifier clause.</param>
      <param name="securityKeyIdentifierClause">The key identifier clause to serialize.</param>
    </member>
    <member name="T:System.IdentityModel.Tokens.SecurityKeyType">
      <summary>Specifies the type of key that is associated with a security token.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityKeyType.AsymmetricKey">
      <summary>Specifies that the key is an asymmetric key.</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityKeyType.BearerKey">
      <summary>Specifies that the security token does not contain a proof-of-possession key. </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityKeyType.SymmetricKey">
      <summary>Specifies that the key is a symmetric key.</summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.SecurityKeyUsage">
      <summary>Specifies how a key that is associated with a security token can be used.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityKeyUsage.Exchange">
      <summary>Specifies that the key can be used to exchange keys between a sender and a receiver.</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityKeyUsage.Signature">
      <summary>Specifies that the key can be used to generate a digital signature.</summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.SecurityToken">
      <summary>Represents a base class used to implement all security tokens.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityToken.#ctor">
      <summary>Called by constructors in derived classes to initialize the <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> class.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityToken.CanCreateKeyIdentifierClause``1">
      <summary>Gets a value that indicates whether this security token is capable of creating the specified key identifier. </summary>
      <returns>true when <paramref name="T" /> is of type <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />; otherwise, false. </returns>
      <typeparam name="T">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> that specifies the key identifier to create.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityToken.CreateKeyIdentifierClause``1">
      <summary>Creates the specified key identifier clause.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> that is a key identifier clause for the security token.</returns>
      <typeparam name="T">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> that specifies the key identifier to create.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityToken.Id">
      <summary>Gets a unique identifier of the security token.</summary>
      <returns>The unique identifier of the security token.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityToken.MatchesKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>Returns a value that indicates whether the key identifier for this instance can be resolved to the specified key identifier.</summary>
      <returns>true if <paramref name="keyIdentifierClause" /> is a <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> and it has the same unique identifier as the <see cref="P:System.IdentityModel.Tokens.SecurityToken.Id" /> property; otherwise, false.</returns>
      <param name="keyIdentifierClause">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> to compare to this instance.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityToken.ResolveKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>Gets the key for the specified key identifier clause.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> that represents the key.</returns>
      <param name="keyIdentifierClause">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> to get the key for.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityToken.SecurityKeys">
      <summary>Gets the cryptographic keys associated with the security token.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of type <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> that contains the set of keys associated with the security token.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityToken.ValidFrom">
      <summary>Gets the first instant in time at which this security token is valid.</summary>
      <returns>A <see cref="T:System.DateTime" /> that represents the instant in time at which this security token is first valid.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityToken.ValidTo">
      <summary>Gets the last instant in time at which this security token is valid.</summary>
      <returns>A <see cref="T:System.DateTime" /> that represents the last instant in time at which this security token is valid.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.SecurityTokenDescriptor">
      <summary>This is a place holder for all the attributes related to the issued token</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenDescriptor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SecurityTokenDescriptor" /> class.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenDescriptor.AddAuthenticationClaims(System.String)">
      <summary>Adds a claim for the specified authentication method to the subject of the current instance. The authentication instant is set to the current time.</summary>
      <param name="authType">A URI that specifies the authentication method.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenDescriptor.AddAuthenticationClaims(System.String,System.DateTime)">
      <summary>Adds claims for the specified authentication type and authentication instant to the subject of the current instance.</summary>
      <param name="authType">A URI that specifies the authentication method.</param>
      <param name="time">The authentication instant in UTC. If the time is not in UTC, it is converted to UTC.</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenDescriptor.AppliesToAddress">
      <summary>Gets or sets the address for the AppliesTo property in the <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" />.</summary>
      <returns>An absolute URI that represents the address.</returns>
      <exception cref="T:System.InvalidOperationException">An attempt to set the property to a value that is not an absolute URI occurs.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenDescriptor.ApplyTo(System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse)">
      <summary>Sets the appropriate properties of the specified RSTR based on the properties of the current instance.</summary>
      <param name="response">The RSTR to which to apply the settings of the current instance.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="response" /> is null.</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenDescriptor.AttachedReference">
      <summary>Gets or sets the key identifier clause when the token is attached to the message</summary>
      <returns>The key identifier clause.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenDescriptor.AuthenticationInfo">
      <summary>Gets or sets the authentication information for the token.</summary>
      <returns>The authentication information for the token.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenDescriptor.EncryptingCredentials">
      <summary>Gets or sets the credentials that are used to encrypt the token.</summary>
      <returns>The credentials that are used to encrypt the token.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenDescriptor.Lifetime">
      <summary>Gets or sets the lifetime information for the issued token.</summary>
      <returns>The lifetime information for the issued token.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenDescriptor.Proof">
      <summary>Gets or sets the proof descriptor for the issued token, which can be used to modify some fields inside the RSTR, such as requested proof token.</summary>
      <returns>The proof descriptor.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenDescriptor.Properties">
      <summary>Gets the properties bag for the issued token.</summary>
      <returns>The dictionary that represents the properties bag.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenDescriptor.ReplyToAddress">
      <summary>Gets or sets the address for the ReplyToAddress property in the <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" />.</summary>
      <returns>A URI that represents the address.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenDescriptor.SigningCredentials">
      <summary>Gets or sets the credentials that are used to sign the token.</summary>
      <returns>The credentials that are used to sign the token.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenDescriptor.Subject">
      <summary>Gets or sets the output claims to be included in the issued token.</summary>
      <returns>The claims identity that contains the output claims.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenDescriptor.Token">
      <summary>Gets or sets the issued security token.</summary>
      <returns>The issued security token.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenDescriptor.TokenIssuerName">
      <summary>Gets or sets the issuer name, which may be used inside the issued token also.</summary>
      <returns>The issuer name.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenDescriptor.TokenType">
      <summary>Gets or sets the token type of the issued token</summary>
      <returns>The token type.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenDescriptor.UnattachedReference">
      <summary>The key identifier clause when the issued token is not attached to the message.</summary>
      <returns>The key identifier clause.</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.SecurityTokenElement">
      <summary>Represents a number elements found in a <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> which represent security tokens.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenElement.#ctor(System.IdentityModel.Tokens.SecurityToken)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SecurityTokenElement" /> class by using a <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> object.</summary>
      <param name="securityToken">The security token that the new instance represents.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenElement.#ctor(System.Xml.XmlElement,System.IdentityModel.Tokens.SecurityTokenHandlerCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SecurityTokenElement" /> class by using the specified XML representation of a security token.</summary>
      <param name="securityTokenXml">The XML representation of the security token.</param>
      <param name="securityTokenHandlers">The default token handler collection that is used to read and validate the security token wrapped by the new instance.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenElement.GetIdentities">
      <summary>Gets the identities that are contained in the wrapped token.</summary>
      <returns>The identities that are contained in the token.</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenElement.GetSecurityToken">
      <summary>Gets the security token that is represented by the current instance.</summary>
      <returns>The security token that the current instance represents.</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenElement.ReadSecurityToken(System.Xml.XmlElement,System.IdentityModel.Tokens.SecurityTokenHandlerCollection)">
      <summary>Deserializes a <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> from the specified XML representation.</summary>
      <returns>The security token that was deserialized from the XML.</returns>
      <param name="securityTokenXml">The XML representation of the security token.</param>
      <param name="securityTokenHandlers">The token handler collection to use to read the token.</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenElement.SecurityTokenXml">
      <summary>Gets the XML representation of the wrapped token.</summary>
      <returns>The XML representation of the token.</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenElement.ValidateToken(System.Xml.XmlElement,System.IdentityModel.Tokens.SecurityTokenHandlerCollection)">
      <summary>Creates the identities that are contained in the specified XML representation of a security token.</summary>
      <returns>The identities that are contained in the token.</returns>
      <param name="securityTokenXml">The XML representation of the security token.</param>
      <param name="securityTokenHandlers">The token handler collection to use to read the token.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="securityTokenXml" /> is null.-or-<paramref name="securityTokenHandlers" /> is null.</exception>
    </member>
    <member name="T:System.IdentityModel.Tokens.SecurityTokenException">
      <summary>The exception that is thrown when a problem occurs while processing a security token.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SecurityTokenException" /> class.  </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SecurityTokenException" /> class using the specified XML serialization data and contextual data about the source and destination of the serialization stream.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that contains values that are used during serialization and deserialization.</param>
      <param name="context">A <see cref="T:System.IdentityModel.Tokens.SecurityTokenException" /> that contains data about the source and destination of the serialization stream.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SecurityTokenException" /> class using the specified error message. </summary>
      <param name="message">A message that identifies the reason the exception occurred.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SecurityTokenException" /> class using the specified error message and root cause of the error. </summary>
      <param name="message">A message that identifies the reason the exception occurred.</param>
      <param name="innerException">A <see cref="T:System.Exception" /> that represents the root cause of the exception.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.SecurityTokenExpiredException">
      <summary>The exception that is thrown when a security token that has an expiration time in the past is received.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenExpiredException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SecurityTokenExpiredException" /> class.  </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenExpiredException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SecurityTokenExpiredException" /> class using the specified XML serialization data and contextual data about the source and destination of the serialization stream.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that contains values that are used during serialization and deserialization.</param>
      <param name="context">A <see cref="T:System.IdentityModel.Tokens.SecurityTokenExpiredException" /> that contains data about the source and destination of the serialization stream.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenExpiredException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SecurityTokenExpiredException" /> class using the specified error message. </summary>
      <param name="message">A message that identifies the reason the exception occurred.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenExpiredException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SecurityTokenExpiredException" /> class using the specified error message and root cause of the error. </summary>
      <param name="message">A message that identifies the reason the exception occurred.</param>
      <param name="inner">A <see cref="T:System.Exception" /> that represents the root cause of the exception.</param>
    </member>
    <member name="T:System.IdentityModel.Tokens.SecurityTokenHandler">
      <summary>The abstract base class for security token handlers.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandler.#ctor">
      <summary>Called from constructors in derived classes to initialize the <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" /> class.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)">
      <summary>Returns a value that indicates whether the XML element referred to by the specified XML reader is a key identifier clause that can be deserialized by this instance.</summary>
      <returns>true if the <see cref="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)" /> method can read the element; otherwise, false. The default is false.</returns>
      <param name="reader">An XML reader positioned at the start element. The reader should not be advanced by this method.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.String)">
      <summary>Returns a value that indicates whether the specified string can be deserialized as a token of the type processed by this instance.</summary>
      <returns>true if the <see cref="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)" /> method can read the element; otherwise, false. The default is false.</returns>
      <param name="tokenString">The token string to read.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)">
      <summary>Returns a value that indicates whether the XML element referenced by the specified XML reader can be read as a token of the type processed by this instance.</summary>
      <returns>true if the <see cref="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)" /> method can read the element; otherwise, false. The default is false.</returns>
      <param name="reader">An XML reader positioned at a start element. The reader should not be advanced by this method.</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken">
      <summary>Gets a value that indicates whether the handler supports validation of security tokens.</summary>
      <returns>true if the class is capable of validating security tokens; otherwise, false. The default is false.</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>Returns a value that indicates whether the specified key identifier clause can be serialized by this instance.</summary>
      <returns>true if the key identifier clause can be serialized; otherwise, false. The default is false.</returns>
      <param name="securityKeyIdentifierClause">The key identifier clause to be checked.</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken">
      <summary>Gets a value that indicates whether the handler can serialize security tokens.</summary>
      <returns>true if the class is capable of serializing tokens; otherwise false. The default is false.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration">
      <summary>Gets or sets the <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration" /> object that provides configuration for the current instance.</summary>
      <returns>The configuration object for the current instance.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection">
      <summary>Gets the token handler collection that contains the current instance.</summary>
      <returns>The token handler collection that contains the current instance.</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)">
      <summary>When overridden in a derived class, creates the security token reference for tokens processed by that class. This method is typically called by a security token service (STS).</summary>
      <returns>A key identifier clause that references the specified token.</returns>
      <param name="token">The token for which the reference is to be created.</param>
      <param name="attached">true if an attached reference should be created; false if an unattached reference should be created.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>When overridden in a derived class, creates a security token using the specified token descriptor. This method is called by a security token service (STS). </summary>
      <returns>A security token that matches the properties of the token descriptor.</returns>
      <param name="tokenDescriptor">The security token descriptor from which the token is to be created. Properties of the token descriptor are set before this method is called.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken(System.IdentityModel.Tokens.SecurityToken)">
      <summary>When overridden in a derived class, throws an exception if the specified token is detected as being replayed.</summary>
      <param name="token">The token to check for replay.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers">
      <summary>When overridden in a derived class, returns the set of URIs that are used in requests to identify a token of the type processed by the derived class.</summary>
      <returns>The set of URIs that identify the token type that this handler supports.</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)">
      <summary>When overridden in a derived class, loads custom configuration from XML.</summary>
      <param name="nodelist">The configuration XML elements. Each node in the list is of type <see cref="T:System.Xml.XmlElement" />.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)">
      <summary>When overridden in a derived class, deserializes the XML referenced by the specified XML reader to a key identifier clause that references a token processed by the derived class.</summary>
      <returns>The key identifier clause that was deserialized from the XML.</returns>
      <param name="reader">An XML reader positioned at the start element of the XML to be deserialized into the key identifier clause.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)">
      <summary>When overridden in a derived class, deserializes the specified string to a token of the type processed by the derived class.</summary>
      <returns>The security token that was deserialized from the specified string.</returns>
      <param name="tokenString">The string to be deserialized.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)">
      <summary>When overridden in a derived class, deserializes the XML referenced by the specified XML reader to a token of the type processed by the derived class.</summary>
      <returns>The security token that was deserialized from the XML.</returns>
      <param name="reader">An XML reader positioned at the start element of the token.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>When overridden in a derived class, deserializes the XML referenced by the specified XML reader to a token of the type processed by the derived class by using the specified token resolver.</summary>
      <returns>The security token that was deserialized from the XML.</returns>
      <param name="reader">An XML reader positioned at the start element of the token.</param>
      <param name="tokenResolver">A token resolver that contains out-of-band and cached tokens.</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType">
      <summary>When overridden in a derived class, gets the type of the security token that is processed by this instance.</summary>
      <returns>The type of the security token that is processed by this instance.</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationFailure(System.IdentityModel.Tokens.SecurityToken,System.String)">
      <summary>Traces the failure event during the validation of security tokens when tracing is enabled.</summary>
      <param name="token">The security token that is being validated.</param>
      <param name="errorMessage">The message to write to the trace.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationSuccess(System.IdentityModel.Tokens.SecurityToken)">
      <summary>Traces the successful validation of security tokens event when tracing is enabled.</summary>
      <param name="token">The token that was validated.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
      <summary>When overridden in a derived class, validates the specified security token. The token must be of the type processed by the derived class.</summary>
      <returns>The identities contained in the token.</returns>
      <param name="token">The token to validate.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>When overridden in a derived class, serializes the specified key identifier clause to XML. The key identifier clause must be of the type supported by the derived class.</summary>
      <param name="writer">The XML writer.</param>
      <param name="securityKeyIdentifierClause">The key identifier clause to serialize.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken)">
      <summary>When overridden in a derived class, serializes the specified security token to a string. The token must be of the type processed by the derived class.</summary>
      <returns>The serialized token.</returns>
      <param name="token">The token to serialize.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
      <summary>When overridden in a derived class, serializes the specified security token to XML. The token must be of the type processed by the derived class.</summary>
      <param name="writer">The XML writer.</param>
      <param name="token">The token to serialize.</param>
    </member>
    <member name="T:System.IdentityModel.Tokens.SecurityTokenHandlerCollection">
      <summary>Represents a collection of security token handlers.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerCollection" /> class.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.#ctor(System.Collections.Generic.IEnumerable{System.IdentityModel.Tokens.SecurityTokenHandler})">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerCollection" /> class with the specified token handlers.</summary>
      <param name="handlers">The token handlers with which to initialize the new instance.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.#ctor(System.Collections.Generic.IEnumerable{System.IdentityModel.Tokens.SecurityTokenHandler},System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerCollection" /> class with the specified token handlers and configuration.</summary>
      <param name="handlers">The token handlers with which to initialize the new instance.</param>
      <param name="configuration">The base configuration to associate with the collection.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.#ctor(System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerCollection" /> class with the specified configuration.</summary>
      <param name="configuration">The base configuration to associate with the collection.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.AddOrReplace(System.IdentityModel.Tokens.SecurityTokenHandler)">
      <summary>Adds the specified token handler to this collection. If a handler with the same token type identifier as the specified handler already exists in the collection, it is replaced with the specified handler.</summary>
      <param name="handler">The token handler to add to the collection.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.CanReadKeyIdentifierClause(System.Xml.XmlReader)">
      <summary>Returns a value that indicates whether the specified key identifier clause can be read by one of the handlers in this collection or by the base <see cref="T:System.ServiceModel.Security.WSSecurityTokenSerializer" />.</summary>
      <returns>true if the key identifier clause can be read; otherwise false.</returns>
      <param name="reader">An XML reader positioned at the start element. The reader should not be advanced.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.CanReadKeyIdentifierClauseCore(System.Xml.XmlReader)">
      <summary>Returns a value that indicates whether the specified key identifier clause can be read by one of the handlers in the collection or by the base <see cref="T:System.ServiceModel.Security.WSSecurityTokenSerializer" />.</summary>
      <returns>true if the key identifier clause can be read; otherwise false.</returns>
      <param name="reader">An XML reader positioned at the start element. The reader should not be advanced.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.CanReadToken(System.String)">
      <summary>Returns a value that indicates whether the specified string representation of a token can be read by one of the handlers in this collection.</summary>
      <returns>true if the collection contains a token handler that can read the specified token; otherwise false.</returns>
      <param name="tokenString">The token represented as a string.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tokenString" /> is null or an empty string.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.CanReadToken(System.Xml.XmlReader)">
      <summary>Returns a value that indicates whether the specified token can be read by one of the handlers in this collection.</summary>
      <returns>true if the token can be read; otherwise false.</returns>
      <param name="reader">An XML reader positioned at the start element. The reader should not be advanced.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.CanWriteToken(System.IdentityModel.Tokens.SecurityToken)">
      <summary>Returns a value that indicates whether the specified token can be serialized by one of the handlers in this collection.</summary>
      <returns>true if the token can be serialized by one of the handlers; otherwise false.</returns>
      <param name="token">The security token to be serialized.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.ClearItems">
      <summary>Clears all of the handlers from this collection. (Override of the base class method.)</summary>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.Configuration">
      <summary>Gets and sets the base configuration for this security token handler collection.</summary>
      <returns>The configuration for the token handler collection.</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.CreateDefaultSecurityTokenHandlerCollection">
      <summary>Creates a system default collection of basic security token handlers, each of which has the system default configuration. The token handlers in this collection must be configured with service specific data before they can be used.</summary>
      <returns>A security token handler collection that contains the default, basic security token handlers.</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.CreateDefaultSecurityTokenHandlerCollection(System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration)">
      <summary>Creates a system default collection of basic security token handlers and associates the specified configuration with the new collection. Each of the handlers has the system default configuration. The token handlers in this collection must be configured with service specific data before they can be used.</summary>
      <returns>A security token handler collection that contains the default, basic security token handlers.</returns>
      <param name="configuration">The configuration to associate with the handler collection.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>Creates a token from the specified token descriptor.</summary>
      <returns>A security token that matches the properties of the token descriptor.</returns>
      <param name="tokenDescriptor">The token descriptor from which the token is to be created. Properties of the token descriptor are set before this method is called.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.InsertItem(System.Int32,System.IdentityModel.Tokens.SecurityTokenHandler)">
      <summary>Inserts the specified token handler in this collection at the specified index. (Override of the base class method.)</summary>
      <param name="index">The zero-based index at which the handler should be inserted.</param>
      <param name="item">The token handler to insert.</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.Item(System.IdentityModel.Tokens.SecurityToken)">
      <summary>Gets a token handler from this collection that can handle the specified security token.</summary>
      <returns>A token handler that can handle the specified token.</returns>
      <param name="token">The token for which the handler should be returned.</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.Item(System.String)">
      <summary>Gets a token handler from this collection that can handle the specified type identifier.</summary>
      <returns>A token handler that can handle tokens that correspond to the specified type identifier.</returns>
      <param name="tokenTypeIdentifier">A URI that identifies the token type.</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.Item(System.Type)">
      <summary>Gets the handler from this collection that can handle the specified token type.</summary>
      <returns>A token handler that can handle tokens of the specified type.</returns>
      <param name="tokenType">The type of the token to be handled.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.ReadKeyIdentifierClause(System.Xml.XmlReader)">
      <summary>Deserializes a key identifier clause from the specified XML reader.</summary>
      <returns>The key identifier clause deserialized from the XML.</returns>
      <param name="reader">An XML reader positioned at the start element of the XML to be deserialized into the key identifier clause.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.ReadKeyIdentifierClauseCore(System.Xml.XmlReader)">
      <summary>Deserializes a key identifier clause from the specified XML reader.</summary>
      <returns>The key identifier clause deserialized from the XML.</returns>
      <param name="reader">An XML reader positioned at the start element of the XML to be deserialized into the key identifier clause.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.ReadToken(System.String)">
      <summary>Deserializes a security token from the specified string.</summary>
      <returns>The token that was deserialized from the specified string.</returns>
      <param name="tokenString">The string from which to deserialize the token.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.ReadToken(System.Xml.XmlReader)">
      <summary>Deserializes a security token from the specified XML reader.</summary>
      <returns>The security token deserialized from the XML.</returns>
      <param name="reader">An XML reader positioned at the start element of the token.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.RemoveItem(System.Int32)">
      <summary>Removes the handler at the specified index from this collection. (Override of the base class method.)</summary>
      <param name="index">The zero-based index of the handler to remove.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.SetItem(System.Int32,System.IdentityModel.Tokens.SecurityTokenHandler)">
      <summary>Replaces the token handler at the specified index in the collection with the specified handler. </summary>
      <param name="index">The zero-based index of the element to replace.</param>
      <param name="item">The new token handler for the element at the specified index.</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.TokenTypeIdentifiers">
      <summary>Gets a list of the type identifiers of the tokens handled by the handlers in this collection.</summary>
      <returns>The list of type identifier URIs.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.TokenTypes">
      <summary>Gets a list of the types of the tokens handled by handlers in this collection.</summary>
      <returns>The list of types.</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
      <summary>Validates the specified security token.</summary>
      <returns>The identities that are contained in the token.</returns>
      <param name="token">The token to validate.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.WriteKeyIdentifierClause(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>Serializes the specified key identifier clause to XML.</summary>
      <param name="writer">The XML writer.</param>
      <param name="keyIdentifierClause">The key identifier clause to serialize.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.WriteKeyIdentifierClauseCore(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>Serializes the specified key identifier clause to XML.</summary>
      <param name="writer">The XML writer.</param>
      <param name="keyIdentifierClause">The key identifier clause to serialize.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.WriteToken(System.IdentityModel.Tokens.SecurityToken)">
      <summary>Serializes the specified security token to a string.</summary>
      <returns>The string serialized from the token.</returns>
      <param name="token">The token to serialize.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The collection does not contain a handler capable of serializing the specified token.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
      <summary>Serializes the specified security token to XML.</summary>
      <param name="writer">The XML writer.</param>
      <param name="token">The token to serialize.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" /> is null.-or-<paramref name="writer" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The collection does not contain a handler capable of serializing the specified token.</exception>
    </member>
    <member name="T:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager">
      <summary>A class that manages multiple, named security token handler collections.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager" /> class for the specified named service.</summary>
      <param name="serviceName">The name of the associated service. The <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager.ServiceName" /> property is set to this name.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager.ContainsKey(System.String)">
      <summary>Determines whether this instance contains a security token handler collection for the specified usage.</summary>
      <returns>true if this instance contains a token handler collection for the specified usage; otherwise, false.</returns>
      <param name="usage">The usage for which to find a token handler collection.</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager.Count">
      <summary>Gets the number of security token handler collections managed by this instance.</summary>
      <returns>The number of token handler collections managed by this instance.</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager.CreateDefaultSecurityTokenHandlerCollectionManager">
      <summary>Creates a token handler collection manager with a handler collection that contains the default set of token handlers.</summary>
      <returns>A manager that contains a collection with the default token handlers.</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager.CreateEmptySecurityTokenHandlerCollectionManager">
      <summary>Creates an empty token handler collection manager.</summary>
      <returns>A collection manager that contains no handlers.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager.Item(System.String)">
      <summary>Returns the security token handler collection for the specified usage.</summary>
      <returns>The token handler collection associated with the specified usage.</returns>
      <param name="usage">The usage name for the token handler collection.</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager.SecurityTokenHandlerCollections">
      <summary>Gets the security token handler collections managed by this instance.</summary>
      <returns>The token handler collections managed by this instance.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager.ServiceName">
      <summary>Gets the service name.</summary>
      <returns>The name of the service associated with this instance.</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager.Usage">
      <summary>Defines standard collection names used by the framework.</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager.Usage.ActAs">
      <summary>Used to reference a collection of handlers for ActAs element processing.</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager.Usage.Default">
      <summary>Used to reference the default collection of handlers.</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager.Usage.OnBehalfOf">
      <summary>Used to reference a collection of handlers for OnBehalfOf element processing.</summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration">
      <summary>Configuration common to all security token handlers.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration" /> class.</summary>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.AudienceRestriction">
      <summary>Gets or sets the audience restriction.</summary>
      <returns>The audience restriction.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.Caches">
      <summary>Gets or sets the caches that are used for this configuration.</summary>
      <returns>The caches.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.CertificateValidationMode">
      <summary>Gets or sets the X.509 certificate validation mode used by handlers to validate issuer certificates.</summary>
      <returns>The certificate validation mode.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.CertificateValidator">
      <summary>Gets or sets the X.509 certificate validator used by handlers to validate issuer certificates</summary>
      <returns>The certificate validator.</returns>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.DefaultCertificateValidationMode">
      <summary>Specifies the default X.509 certificate validation mode.</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.DefaultCertificateValidator">
      <summary>Specifies the default X.509 certificate validator instance.</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.DefaultDetectReplayedTokens">
      <summary>Specifies a value that determines whether to detect replayed tokens; false, do not detect replayed tokens.</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.DefaultIssuerNameRegistry">
      <summary>Specifies the default issuer name registry instance; an instance of the configuration-based issuer name registry.</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.DefaultIssuerTokenResolver">
      <summary>Specifies the default issuer token resolver instance.</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.DefaultMaxClockSkew">
      <summary>Specifies the default maximum clock skew.</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.DefaultRevocationMode">
      <summary>Specifies the default X.509 certificate revocation mode.</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.DefaultSaveBootstrapContext">
      <summary>Specifies whether to save bootstrap tokens; false, bootstrap tokens are not saved.</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.DefaultTokenReplayCacheExpirationPeriod">
      <summary>Specifies the default token replay cache expiration period.</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.DefaultTrustedStoreLocation">
      <summary>Specifies the default X.509 certificate trusted store location.</summary>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.DetectReplayedTokens">
      <summary>Gets or sets a value that indicates whether replayed tokens should be detected by handlers in this configuration.</summary>
      <returns>true if replayed tokens should be detected; otherwise, false.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.IssuerNameRegistry">
      <summary>Gets or sets the issuer name registry for this configuration.</summary>
      <returns>The issuer name registry.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.IssuerTokenResolver">
      <summary>Gets or sets the issuer token resolver for this configuration.</summary>
      <returns>The issuer token resolver.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.MaxClockSkew">
      <summary>Gets or sets the maximum clock skew for handlers using this configuration.</summary>
      <returns>The maximum clock skew.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.RevocationMode">
      <summary>Gets or sets the X.509 revocation mode for this configuration.</summary>
      <returns>The X.509 revocation mode.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.SaveBootstrapContext">
      <summary>Gets or sets a value that indicates whether the bootstrap context (token) is saved in the <see cref="T:System.Security.Claims.ClaimsIdentity" /> and Sessions after token validation.</summary>
      <returns>true to save the bootstrap token; otherwise, false.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.ServiceTokenResolver">
      <summary>Gets or sets the security token resolver to use to resolve service tokens.</summary>
      <returns>The token resolver.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.TokenReplayCacheExpirationPeriod">
      <summary>Gets or sets the expiration period for items put in the token replay cache.</summary>
      <returns>The expiration period.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.TrustedStoreLocation">
      <summary>Gets or sets the X.509 trusted store location used by handlers to validate issuer certificates.</summary>
      <returns>The trusted store location.</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.SecurityTokenNotYetValidException">
      <summary>The exception that is thrown when a security token that has an effective time in the future is received.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenNotYetValidException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SecurityTokenNotYetValidException" /> class.  </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenNotYetValidException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SecurityTokenNotYetValidException" /> class using the specified XML serialization data and contextual data about the source and destination of the serialization stream.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that contains values that are used during serialization and deserialization.</param>
      <param name="context">A <see cref="T:System.IdentityModel.Tokens.SecurityTokenNotYetValidException" /> that contains data about the source and destination of the serialization stream.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenNotYetValidException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SecurityTokenNotYetValidException" /> class using the specified error message. </summary>
      <param name="message">A message that identifies the reason the exception occurred.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenNotYetValidException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SecurityTokenNotYetValidException" /> class using the specified error message and root cause of the error. </summary>
      <param name="message">A message that identifies the reason the exception occurred.</param>
      <param name="inner">A <see cref="T:System.Exception" /> that represents the root cause of the exception.</param>
    </member>
    <member name="T:System.IdentityModel.Tokens.SecurityTokenReplayDetectedException">
      <summary>The exception that is thrown when a security token that has been replayed is received.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenReplayDetectedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SecurityTokenReplayDetectedException" /> class.  </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenReplayDetectedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SecurityTokenReplayDetectedException" /> class using the specified XML serialization data and contextual data about the source and destination of the serialization stream.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that contains values that are used during serialization and deserialization.</param>
      <param name="context">A <see cref="T:System.IdentityModel.Tokens.SecurityTokenReplayDetectedException" /> that contains data about the source and destination of the serialization stream.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenReplayDetectedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SecurityTokenReplayDetectedException" /> class using the specified error message. </summary>
      <param name="message">A message that identifies the reason the exception occurred.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenReplayDetectedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SecurityTokenReplayDetectedException" /> class using the specified error message and root cause of the error. </summary>
      <param name="message">A message that identifies the reason the exception occurred.</param>
      <param name="inner">A <see cref="T:System.Exception" /> that represents the root cause of the exception.</param>
    </member>
    <member name="T:System.IdentityModel.Tokens.SecurityTokenTypes">
      <summary>Contains a set of static properties that returns strings that represent security token types.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenTypes.Kerberos">
      <summary>Gets a string that represents a security token based upon a Kerberos ticket.</summary>
      <returns>A string that represents a security token based upon a Kerberos ticket.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenTypes.Rsa">
      <summary>Gets a string that represents a security token based upon an RSA key.</summary>
      <returns>A string that represents a security token based upon an RSA key.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenTypes.Saml">
      <summary>Gets a string that represents a security token based upon a SAML assertion.</summary>
      <returns>A string that represents a security token based upon a SAML assertion.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenTypes.UserName">
      <summary>Gets a string that represents a security token based upon a user name and password.</summary>
      <returns>A string that represents a security token based upon a user name and password.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenTypes.X509Certificate">
      <summary>Gets a string that represents a security token based upon an X.509 certificate.</summary>
      <returns>A string that represents a security token based upon an X.509 certificate.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.SecurityTokenValidationException">
      <summary>The exception that is thrown when a received security token is invalid. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenValidationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SecurityTokenValidationException" /> class.  </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SecurityTokenValidationException" /> class using the specified XML serialization data and contextual data about the source and destination of the serialization stream. </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that contains values that are used during serialization and deserialization.</param>
      <param name="context">A <see cref="T:System.IdentityModel.Tokens.SecurityTokenValidationException" /> that contains data about the source and destination of the serialization stream.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenValidationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SecurityTokenValidationException" /> class using the specified error message. </summary>
      <param name="message">A message that identifies the reason the exception occurred.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenValidationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SecurityTokenValidationException" /> class using the specified error message and root cause of the error. </summary>
      <param name="message">A message that identifies the reason the exception occurred.</param>
      <param name="innerException">A <see cref="T:System.Exception" /> that represents the root cause of the exception.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.SessionSecurityToken">
      <summary>Defines a security token that contains data associated with a session.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityToken.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> class with serialized data.</summary>
      <param name="info">The serialized object data.</param>
      <param name="context">Contextual information about the source.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityToken.#ctor(System.Security.Claims.ClaimsPrincipal)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> class from the specified principal.</summary>
      <param name="claimsPrincipal">The claims principal from which to initialize the token.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="claimsPrincipal" /> is null.-or-The <see cref="P:System.Security.Claims.ClaimsPrincipal.Identities" /> property of <paramref name="claimsPrincipal" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityToken.#ctor(System.Security.Claims.ClaimsPrincipal,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> class from the specified principal and bootstrap token.</summary>
      <param name="claimsPrincipal">The claims principal that was generated from the bootstrap token.</param>
      <param name="context">An optional, application-specific context string.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="claimsPrincipal" /> is null.-or-The <see cref="P:System.Security.Claims.ClaimsPrincipal.Identities" /> property of <paramref name="claimsPrincipal" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityToken.#ctor(System.Security.Claims.ClaimsPrincipal,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> class from the specified principal and bootstrap token; and with the specified start time and expiration time.</summary>
      <param name="claimsPrincipal">The claims principal that was generated from the bootstrap token.</param>
      <param name="context">An optional, application-specific context string.</param>
      <param name="validFrom">The time instant at which the token becomes valid. null to specify <see cref="P:System.DateTime.UtcNow" /></param>
      <param name="validTo">The time instant after which the token is no longer valid. null to specify that the value should be determined by adding the value of the <see cref="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultTokenLifetime" /> property to the time specified by the <paramref name="validFrom" /> parameter.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="claimsPrincipal" /> is null.-or-The <see cref="P:System.Security.Claims.ClaimsPrincipal.Identities" /> property of <paramref name="claimsPrincipal" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="validFrom" /> and <paramref name="validTo" /> parameters cannot be validated; for example, <paramref name="validTo" /> specifies a time that occurs earlier than <paramref name="validFrom" />.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityToken.#ctor(System.Security.Claims.ClaimsPrincipal,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> class from the specified principal and bootstrap token; and with the specified start time and expiration time. The new token is scoped to the specified endpoint.</summary>
      <param name="claimsPrincipal">The claims principal that was generated from the bootstrap token.</param>
      <param name="context">An optional, application-specific context string.</param>
      <param name="endpointId">The endpoint to which this token is bound. An empty string creates an unscoped token.</param>
      <param name="validFrom">The time instant at which the token becomes valid. null to specify <see cref="P:System.DateTime.UtcNow" />.</param>
      <param name="validTo">The time instant after which the token is no longer valid. null to specify that the value should be determined by adding the value of the <see cref="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultTokenLifetime" /> property to the time specified by the  <paramref name="validFrom" /> parameter.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="claimsPrincipal" /> is null.-or-The <see cref="P:System.Security.Claims.ClaimsPrincipal.Identities" /> property of <paramref name="claimsPrincipal" /> is null.-or-<paramref name="endpointId" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="validFrom" /> and <paramref name="validTo" /> parameters cannot be validated; for example, <paramref name="validTo" /> specifies a time that occurs earlier than <paramref name="validFrom" />.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityToken.#ctor(System.Security.Claims.ClaimsPrincipal,System.TimeSpan)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> class from the specified principal. The new token is valid from <see cref="P:System.DateTime.UtcNow" /> through the specified lifetime.</summary>
      <param name="claimsPrincipal">The claims principal from which to initialize the token.</param>
      <param name="lifetime">The period from the current time during which the token is valid. The <see cref="P:System.IdentityModel.Tokens.SessionSecurityToken.ValidFrom" /> property will be set to <see cref="P:System.DateTime.UtcNow" /> and the <see cref="P:System.IdentityModel.Tokens.SessionSecurityToken.ValidTo" /> property will be set to <see cref="P:System.IdentityModel.Tokens.SessionSecurityToken.ValidFrom" /> plus the period specified by this parameter.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="claimsPrincipal" /> is null.-or-The <see cref="P:System.Security.Claims.ClaimsPrincipal.Identities" /> property of <paramref name="claimsPrincipal" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="lifetime" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityToken.#ctor(System.Security.Claims.ClaimsPrincipal,System.Xml.UniqueId,System.String,System.String,System.DateTime,System.TimeSpan,System.IdentityModel.Tokens.SymmetricSecurityKey)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> class by using the specified principal, context ID, context, endpoint, valid timestamp, lifetime, and key.</summary>
      <param name="claimsPrincipal">The claims principal that is associated with this session.</param>
      <param name="contextId">The context identifier associated with this token.</param>
      <param name="context">An optional, application-specific context string.</param>
      <param name="endpointId">The endpoint to which this token is bound. An empty string creates an unscoped token.</param>
      <param name="validFrom">The time at which the token becomes valid.</param>
      <param name="lifetime">The lifetime of the session token. The <see cref="P:System.IdentityModel.Tokens.SessionSecurityToken.ValidTo" /> property will be set to <see cref="P:System.IdentityModel.Tokens.SessionSecurityToken.ValidFrom" /> plus the period specified by this parameter.</param>
      <param name="key">An optional symmetric session key.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="claimsPrincipal" /> is null.-or-The <see cref="P:System.Security.Claims.ClaimsPrincipal.Identities" /> property of <paramref name="claimsPrincipal" /> is null.-or-<paramref name="contextId" /> is null.-or-<paramref name="endpointId" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="lifetime" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityToken.#ctor(System.Security.Claims.ClaimsPrincipal,System.Xml.UniqueId,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.IdentityModel.Tokens.SymmetricSecurityKey)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> class by using the specified principal, context ID, context, endpoint, start time, expiration time, and key.</summary>
      <param name="claimsPrincipal">The claims principal that is associated with this session.</param>
      <param name="contextId">The context identifier associated with this token.</param>
      <param name="context">An optional, application-specific context string.</param>
      <param name="endpointId">The endpoint to which this token is bound. An empty string creates an unscoped token.</param>
      <param name="validFrom">The time instant at which the token becomes valid. null to specify <see cref="P:System.DateTime.UtcNow" /></param>
      <param name="validTo">The time instant after which the token is no longer valid. null to specify that the value should be determined by adding the value of the <see cref="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultTokenLifetime" /> property to the time specified by the <paramref name="validFrom" /> parameter.</param>
      <param name="key">An optional symmetric session key.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="claimsPrincipal" /> is null.-or-The <see cref="P:System.Security.Claims.ClaimsPrincipal.Identities" /> property of <paramref name="claimsPrincipal" /> is null.-or-<paramref name="contextId" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="validFrom" /> is greater than or equal to <paramref name="validTo" />.-or-<paramref name="validTo" /> is less than the current time.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityToken.#ctor(System.Security.Claims.ClaimsPrincipal,System.Xml.UniqueId,System.String,System.String,System.TimeSpan,System.IdentityModel.Tokens.SymmetricSecurityKey)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> class by using the specified principal, context ID, context, endpoint, lifetime, and key.</summary>
      <param name="claimsPrincipal">The claims principal that is associated with this session.</param>
      <param name="contextId">The context identifier associated with this token.</param>
      <param name="context">An optional, application-specific context string.</param>
      <param name="endpointId">The endpoint to which this token is bound. An empty string creates an unscoped token.</param>
      <param name="lifetime">The lifetime of the session token. The <see cref="P:System.IdentityModel.Tokens.SessionSecurityToken.ValidFrom" /> property will be set to <see cref="P:System.DateTime.UtcNow" /> and the <see cref="P:System.IdentityModel.Tokens.SessionSecurityToken.ValidTo" /> property will be set to <see cref="P:System.IdentityModel.Tokens.SessionSecurityToken.ValidFrom" /> plus the period specified by this parameter.</param>
      <param name="key">An optional symmetric session key.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="claimsPrincipal" /> is null.-or-The <see cref="P:System.Security.Claims.ClaimsPrincipal.Identities" /> property of <paramref name="claimsPrincipal" /> is null.-or-<paramref name="contextId" /> is null.-or-<paramref name="endpointId" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="lifetime" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityToken.ClaimsPrincipal">
      <summary>Gets the claims principal associated with the session.</summary>
      <returns>The claims principal.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityToken.Context">
      <summary>Gets a user specified context value.</summary>
      <returns>The user specified context value.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityToken.ContextId">
      <summary>Gets the session context identifier</summary>
      <returns>The session context identifier.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityToken.EndpointId">
      <summary>Gets the ID of the endpoint to which this token is scoped.</summary>
      <returns>The ID of the endpoint.</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityToken.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information necessary to serialize the session security token.</summary>
      <param name="info">The serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityToken.Id">
      <summary>Gets the unique identifier of this token.</summary>
      <returns>The token ID.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityToken.IsPersistent">
      <summary>Gets or sets a value that indicates whether the cookie represented by this token is persistent.</summary>
      <returns>true if the cookie is persistent; otherwise, false.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityToken.IsReferenceMode">
      <summary>Gets or sets a value that indicates whether the session security token is operating in reference mode.</summary>
      <returns>true if the token is operating in session mode; otherwise, false.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityToken.KeyEffectiveTime">
      <summary>Gets the time instant from which the key in this token is valid.</summary>
      <returns>The time instant from which the key is effective.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityToken.KeyExpirationTime">
      <summary>Gets the time instant after which the key in this token is no longer valid.</summary>
      <returns>The time instant at which the key expires.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityToken.KeyGeneration">
      <summary>Gets the identifier for the key generation in this token</summary>
      <returns>The unique identifier for the key generation in this token.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityToken.SecureConversationVersion">
      <summary>Gets a URI that identifies the version of WS-Secure Conversation that is used to serialize this session security token.</summary>
      <returns>The URI that identifies the version of WS-Secure Conversation that is used to serialize this token.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityToken.SecurityKeys">
      <summary>Gets the keys associated with this session. This is usually a single key.</summary>
      <returns>The keys associated with the session. There is usually a single key.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityToken.ValidFrom">
      <summary>Gets the time instant from which the token is valid.</summary>
      <returns>The time from which the token is valid.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityToken.ValidTo">
      <summary>Gets the time instant after which the token is no longer valid.</summary>
      <returns>The time after which the token is no longer valid.</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.SessionSecurityTokenCache">
      <summary>Defines an abstract class for a cache of session security tokens.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenCache.#ctor">
      <summary>Called from constructors in derived classes to initialize the <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenCache" /> class.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenCache.AddOrUpdate(System.IdentityModel.Tokens.SessionSecurityTokenCacheKey,System.IdentityModel.Tokens.SessionSecurityToken,System.DateTime)">
      <summary>When overridden in a derived class, attempts to add an entry to the cache or update an existing one.</summary>
      <param name="key">The key of the entry to be added or updated.</param>
      <param name="value">The token associated with the entry.</param>
      <param name="expiryTime">The expiration time of the entry.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenCache.Get(System.IdentityModel.Tokens.SessionSecurityTokenCacheKey)">
      <summary>When overridden in a derived class, attempts to retrieve an entry from the cache.</summary>
      <returns>The session token associated with the key or null, if no match is found.</returns>
      <param name="key">The key of the entry to retrieve.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenCache.GetAll(System.String,System.Xml.UniqueId)">
      <summary>When overridden in a derived class, retrieves all of the tokens associated with a key.</summary>
      <returns>The collection of session tokens associated with the key.</returns>
      <param name="endpointId">The endpoint ID to search for.</param>
      <param name="contextId">The context ID to search for.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenCache.LoadCustomConfiguration(System.Xml.XmlNodeList)">
      <summary>When overridden in a derived class, loads custom configuration from XML.</summary>
      <param name="nodelist">The custom configuration elements.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenCache.Remove(System.IdentityModel.Tokens.SessionSecurityTokenCacheKey)">
      <summary>When implemented in a derived class, attempts to remove an entry from the cache.</summary>
      <param name="key">The key of the entry to remove.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenCache.RemoveAll(System.String)">
      <summary>When implemented in a derived class, attempts to remove all entries with a matching endpoint ID from the cache.</summary>
      <param name="endpointId">The endpoint ID for which to remove entries.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenCache.RemoveAll(System.String,System.Xml.UniqueId)">
      <summary>When implemented in a derived class, attempts to remove all matching entries from the cache.</summary>
      <param name="endpointId">The endpoint ID for which to remove entries.</param>
      <param name="contextId">The context ID for which to remove entries.</param>
    </member>
    <member name="T:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey">
      <summary>Represents the key for an entry in a <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenCache" />.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.#ctor(System.String,System.Xml.UniqueId,System.Xml.UniqueId)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey" /> class.</summary>
      <param name="endpointId">The endpoint ID to which the cache entry is scoped. This is should be the value of the <see cref="P:System.IdentityModel.Tokens.SessionSecurityToken.EndpointId" /> property of the cached token.</param>
      <param name="contextId">The context ID of the cache entry. This is should be the value of the <see cref="P:System.IdentityModel.Tokens.SessionSecurityToken.ContextId" /> property of the cached token.</param>
      <param name="keyGeneration">The key generation of the cache entry. This is should be the value of the <see cref="P:System.IdentityModel.Tokens.SessionSecurityToken.KeyGeneration" /> property of the cached token. This value is available when the token is renewed. It will be null when caching a new token.</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.ContextId">
      <summary>Gets the context ID for the cache key.</summary>
      <returns>The context ID for the cache key.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.EndpointId">
      <summary>Gets the Endpoint ID to which this cache entry is scoped.</summary>
      <returns>The Endpoint ID to which this cache entry is scoped.</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.Equals(System.Object)">
      <summary>Determines whether the specified object is the same as the current cache key.</summary>
      <returns>true if the specified object is the same as the current cache key; otherwise, false.</returns>
      <param name="obj">The object to be compared to the current cache key. Should be assignable from <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey" />.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.GetHashCode">
      <summary>Returns a hash code for the current cache key.</summary>
      <returns>The hash code for the current cache key.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.IgnoreKeyGeneration">
      <summary>Gets or sets a value that indicates whether key generation can be ignored when doing index comparison.</summary>
      <returns>true to ignore key generation; otherwise, false.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.KeyGeneration">
      <summary>Gets the key generation for the cache key</summary>
      <returns>The key generation for the cache key</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.op_Equality(System.IdentityModel.Tokens.SessionSecurityTokenCacheKey,System.IdentityModel.Tokens.SessionSecurityTokenCacheKey)">
      <summary>Implements the equality operator for the <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey" /> class.</summary>
      <returns>true if the cache keys are equal; otherwise, false.</returns>
      <param name="first">The first cache key to compare.</param>
      <param name="second">The second cache key to compare.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.op_Inequality(System.IdentityModel.Tokens.SessionSecurityTokenCacheKey,System.IdentityModel.Tokens.SessionSecurityTokenCacheKey)">
      <summary>Implements the equality operator for the <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey" /> class.</summary>
      <returns>true if the cache keys are not equal; otherwise, false.</returns>
      <param name="first">The first cache key to compare.</param>
      <param name="second">The second cache key to compare.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.ToString">
      <summary>Overrides <see cref="M:System.Object.ToString" /> to provide a unique identifier.</summary>
      <returns>The key in string form.</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.SessionSecurityTokenHandler">
      <summary>A <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" /> that processes security tokens of type <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenHandler" /> class that uses the default cookie transforms and token lifetime.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.CookieTransform})">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenHandler" /> class that uses the specified cookie transforms.</summary>
      <param name="transforms">The transforms to apply when encoding or decoding the cookie. Sets the <see cref="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms" /> property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="transforms" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.CookieTransform},System.TimeSpan)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenHandler" /> class that uses the specified cookie transforms and token lifetime.</summary>
      <param name="transforms">The transforms to apply when encoding or decoding the cookie. Sets the <see cref="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms" /> property.</param>
      <param name="tokenLifetime">The default lifetime for a token. Sets the <see cref="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime" /> property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="transforms" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="tokenLifetime" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms(System.Byte[],System.Boolean)">
      <summary>Applies the transforms specified by the <see cref="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms" /> property to either encode or decode the specified cookie.</summary>
      <returns>The encoded or decoded cookie.</returns>
      <param name="cookie">The cookie that will be transformed.</param>
      <param name="outbound">true if the cookie should be encoded; false if the cookie should be decoded. </param>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms" /> property is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanReadToken(System.Xml.XmlReader)">
      <summary>Returns a value that indicates whether the reader is positioned at a &lt;wsc:SecurityContextToken&gt; element.</summary>
      <returns>true if the reader points to a &lt;wsc:SecurityContextToken&gt; element; otherwise, false.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> over the incoming <see cref="T:System.IdentityModel.Tokens.SecurityToken" />. The reader should be positioned at a &lt;wsc:SecurityContextToken&gt; element.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanValidateToken">
      <summary>Gets a value that indicates whether this handler supports validation of tokens of type <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />.</summary>
      <returns>true if the handler supports validation of tokens of type <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />; otherwise, false. Always true.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanWriteToken">
      <summary>Gets a value that indicates whether this handler can write tokens of type <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />.</summary>
      <returns>true if the handler can write tokens of type <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />; otherwise, false. Always true.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieElementName">
      <summary>Gets the name for the cookie element.</summary>
      <returns>The name for the cookie element. The default element name is “Cookie”.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieNamespace">
      <summary>Gets the namespace for the cookie element.</summary>
      <returns>The namespace for the cookie element. The default namespace is “http://schemas.microsoft.com/ws/2006/05/security”.</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CreateSessionSecurityToken(System.Security.Claims.ClaimsPrincipal,System.String,System.String,System.DateTime,System.DateTime)">
      <summary>Creates a <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> based on the specified claims principal and time range during which the token is valid.</summary>
      <returns>The session security token that was created. The properties on the new session token are set according to the specified parameters.</returns>
      <param name="principal">The claims principal.</param>
      <param name="context">A caller-defined context string.</param>
      <param name="endpointId">The identifier of the endpoint to which the token is scoped.</param>
      <param name="validFrom">The time instant at which the token becomes valid.</param>
      <param name="validTo">The time instant after which the token is no longer valid. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="principal" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" /> property is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>Creates a security token based on the specified token descriptor.</summary>
      <returns>The security token that was created. This will be an instance of <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />.</returns>
      <param name="tokenDescriptor">The token descriptor from which to create the token.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tokenDescriptor" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" /> property is null.</exception>
    </member>
    <member name="F:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultCookieTransforms">
      <summary>A read only collection that contains the list of default transforms to be applied to cookies, the <see cref="T:System.IdentityModel.DeflateCookieTransform" /> and the <see cref="T:System.IdentityModel.ProtectedDataCookieTransform" />.</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultLifetime">
      <summary>A constant that specifies the default lifetime for cookies, ten hours.</summary>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultTokenLifetime">
      <summary>Gets the default token lifetime.</summary>
      <returns>The default token lifetime. Always <see cref="F:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultLifetime" />.</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.GetTokenTypeIdentifiers">
      <summary>Gets the token type URIs for the token types that can be processed by this handler.</summary>
      <returns>The token type identifier URIs for token types that can be processed by this handler.</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)">
      <summary>Loads custom configuration from XML.</summary>
      <param name="customConfigElements">The custom configuration elements.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="customConfigElements" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The configuration specified by <paramref name="customConfigElements" /> is not valid. For example, it does not contain a &lt;sessionTokenRequirement&gt; element, it contains more than one &lt;sessionTokenRequirement&gt; element, a valid <see cref="T:System.TimeSpan" /> value cannot be read from the lifetime attribute, or the lifetime attribute specifies a value that is less than <see cref="F:System.TimeSpan.Zero" />.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(System.Byte[],System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>Reads the <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> from a stream of bytes by using the specified token resolver.</summary>
      <returns>The <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> that was read.</returns>
      <param name="token">The stream of bytes that contains the token.</param>
      <param name="tokenResolver">The token resolver to use.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(System.Xml.XmlReader)">
      <summary>Reads the <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> using the specified XML reader.</summary>
      <returns>The session security token that was read, an instance of <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> over the incoming <see cref="T:System.IdentityModel.Tokens.SecurityToken" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">The reader is not positioned at a <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> or the <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> cannot be read.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>Reads the <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> using the specified XML reader and token resolver.</summary>
      <returns>The session security token that was read, an instance of <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> over the incoming <see cref="T:System.IdentityModel.Tokens.SecurityToken" />.</param>
      <param name="tokenResolver">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> that can used to resolve the <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.-or-<paramref name="tokenResolver" /> is null.</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">The reader is not positioned at a <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> or the <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> cannot be read.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.SetTransforms(System.Collections.Generic.IEnumerable{System.IdentityModel.CookieTransform})">
      <summary>Sets the transforms that will be applied to cookies.</summary>
      <param name="transforms">The transforms to use.</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime">
      <summary>Gets or sets the token lifetime.</summary>
      <returns>The token lifetime. The default is <see cref="F:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultLifetime" />.</returns>
      <exception cref="T:System.ArgumentException">An attempt to set a time span that is less than or equal to zero occurs.</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenType">
      <summary>Gets the type of the tokens that this handler processes.</summary>
      <returns>The <see cref="T:System.Type" /> of <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms">
      <summary>Gets the transforms that will be applied to the cookie.</summary>
      <returns>The list of transforms that will be applied to the cookie.</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateSession(System.IdentityModel.Tokens.SessionSecurityToken)">
      <summary>Determines whether the session associated with the specified token is still valid. Validity is determined by checking the <see cref="P:System.IdentityModel.Tokens.SecurityToken.ValidFrom" /> and <see cref="P:System.IdentityModel.Tokens.SecurityToken.ValidTo" /> properties of the specified token. An exception is thrown if the session is no longer valid.</summary>
      <param name="securityToken">The token to be checked.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="securityToken" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" /> property is null.</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenNotYetValidException">The <see cref="P:System.IdentityModel.Tokens.SecurityToken.ValidFrom" /> property of the token is later than <see cref="P:System.DateTime.UtcNow" />.</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenExpiredException">The <see cref="P:System.IdentityModel.Tokens.SecurityToken.ValidTo" /> property of the token is earlier than <see cref="P:System.DateTime.UtcNow" />.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
      <summary>Validates the specified token and returns its claims.</summary>
      <returns>The identities that are contained in the token.</returns>
      <param name="token">The token to be validated. Must be assignable from <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" />null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="token" /> is not assignable from <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SessionSecurityToken,System.String)">
      <summary>Validates the specified session token and returns its claims.</summary>
      <returns>The identities that are contained in the token.</returns>
      <param name="token">The token to be validated. Must be assignable from <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />.</param>
      <param name="endpointId">The identifier of the endpoint to which the token is scoped.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" /> is null.-or-<paramref name="endpointId" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="token" /> is not assignable from <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />.</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">The <see cref="P:System.IdentityModel.Tokens.SessionSecurityToken.EndpointId" /> property of the specified token is not null or empty and its value is different than that specified by the <paramref name="endpointId" /> parameter. </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken(System.IdentityModel.Tokens.SessionSecurityToken)">
      <summary>Serializes the specified token into a byte array.</summary>
      <returns>An encoded byte array.</returns>
      <param name="sessionToken">The token to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sessiontoken" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
      <summary>Serializes the specified token by using the specified XML writer.</summary>
      <param name="writer">The XML writer with which to serialize the token.</param>
      <param name="token">The token to serialize. An instance of <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null.-or-<paramref name="token" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="token" /> is not assignable from <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />.-or-The <see cref="P:System.IdentityModel.Tokens.SessionSecurityToken.SecureConversationVersion" /> of the token specifies a version of WS-Secure Conversation that is not supported by the handler.</exception>
    </member>
    <member name="T:System.IdentityModel.Tokens.SigningCredentials">
      <summary>Represents the cryptographic key and security algorithms that are used to generate a digital signature.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SigningCredentials.#ctor(System.IdentityModel.Tokens.SecurityKey,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SigningCredentials" /> class.  </summary>
      <param name="signingKey">A <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> that contains the cryptographic key that is used to generate the digital signature. </param>
      <param name="signatureAlgorithm">A URI that represents the cryptographic algorithm that is used to generate the digital signature.</param>
      <param name="digestAlgorithm">A URI that represents the cryptographic algorithm that is used to compute the digest for the portion of the SOAP message that is to be digitally signed.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SigningCredentials.#ctor(System.IdentityModel.Tokens.SecurityKey,System.String,System.String,System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SigningCredentials" /> class. </summary>
      <param name="signingKey">A <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> that contains the cryptographic key that is used to generate the digital signature.</param>
      <param name="signatureAlgorithm">A URI that represents the cryptographic algorithm that is used to generate the digital signature.</param>
      <param name="digestAlgorithm">A URI that represents the cryptographic algorithm that is used to compute the digest for the portion of the SOAP message that is to be digitally signed.</param>
      <param name="signingKeyIdentifier">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> that specifies the identifier that represents the key that is used to create a digital signature.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SigningCredentials.DigestAlgorithm">
      <summary>Gets the cryptographic algorithm that is used to compute the digest for the portion of the SOAP message that is to be digitally signed.</summary>
      <returns>A URI that represents the cryptographic algorithm that is used to compute the digest for the portion of the SOAP message that is to be digitally signed.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SigningCredentials.SignatureAlgorithm">
      <summary>Gets the cryptographic algorithm that is used to generate the digital signature.</summary>
      <returns>A URI that represents the cryptographic algorithm that is used to generate the digital signature.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SigningCredentials.SigningKey">
      <summary>Gets the cryptographic key that is used to generate the digital signature.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> that contains the cryptographic key that is used to generate the digital signature.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SigningCredentials.SigningKeyIdentifier">
      <summary>Gets the identifier that represents the key that is used to create a digital signature.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> that specifies the identifier that represents the key that is used to create a digital signature.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.SymmetricProofDescriptor">
      <summary>This class can be used for issuing the symmetric key based token.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.Byte[],System.IdentityModel.Tokens.EncryptingCredentials)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SymmetricProofDescriptor" /> class with the specified key material.</summary>
      <param name="key">The symmetric key that is used inside the issued token.</param>
      <param name="targetWrappingCredentials">The key encrypting credentials for the relying party.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.IdentityModel.Tokens.EncryptingCredentials)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SymmetricProofDescriptor" /> class with the specified encrypting credentials.</summary>
      <param name="targetWrappingCredentials">The <see cref="T:System.IdentityModel.Tokens.EncryptingCredentials" /> to be used.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.Int32,System.IdentityModel.Tokens.EncryptingCredentials)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SymmetricProofDescriptor" /> class with an auto-generated key.</summary>
      <param name="keySizeInBits">The size of the symmetric key.</param>
      <param name="targetWrappingCredentials">The key encrypting credentials for the target of the request.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.Int32,System.IdentityModel.Tokens.EncryptingCredentials,System.IdentityModel.Tokens.EncryptingCredentials)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SymmetricProofDescriptor" /> class with an auto-generated key.</summary>
      <param name="keySizeInBits">The size of the symmetric key.</param>
      <param name="targetWrappingCredentials">The key encrypting credentials for the target of the request.</param>
      <param name="requestorWrappingCredentials">The key encrypting credentials for the requestor.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="keySizeInBits" /> is less than or equal to zero.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.Int32,System.IdentityModel.Tokens.EncryptingCredentials,System.IdentityModel.Tokens.EncryptingCredentials,System.Byte[])">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SymmetricProofDescriptor" /> class to use for sending combined entropy.</summary>
      <param name="keySizeInBits">The size of the symmetric key.</param>
      <param name="targetWrappingCredentials">The key encrypting credentials for the target of the request.</param>
      <param name="requestorWrappingCredentials">The encrypting credentials for the requestor used to encrypt the entropy or the proof token.</param>
      <param name="sourceEntropy">The requestor's entropy.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceEntropy" /> is null or an empty array.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="keySize" /> is less than zero.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.Int32,System.IdentityModel.Tokens.EncryptingCredentials,System.IdentityModel.Tokens.EncryptingCredentials,System.Byte[],System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SymmetricProofDescriptor" /> class to use for sending combined entropy.</summary>
      <param name="keySizeInBits">The size of the symmetric key.</param>
      <param name="targetWrappingCredentials">The encrypting credentials for the relying party used to encrypt the key in the SecurityKeyIdentifier property.</param>
      <param name="requestorWrappingCredentials">The encrypting credentials for the requestor used to encrypt the entropy or the proof token.</param>
      <param name="sourceEntropy">The requestor's entropy.</param>
      <param name="encryptWith">The URI of the algorithm to use to encrypt the proof key.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="keySizeInBits" /> is less than or equal to zero.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceEntropy" /> is null or an empty array.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.Int32,System.IdentityModel.Tokens.EncryptingCredentials,System.IdentityModel.Tokens.EncryptingCredentials,System.String)">
      <summary>Use this constructor to have the STS autogenerate a key and send it in the proof token as encrypted key. Two cases are covered here 1. client sends the entropy, but server rejects it 2. client did not send a entropy, so just use server's entropy</summary>
      <param name="keySizeInBits">The size of the symmetric key.</param>
      <param name="targetWrappingCredentials">The key encrypting credentials for the relying party.</param>
      <param name="requestorWrappingCredentials">The key encrypting credentials for the requestor.</param>
      <param name="encryptWith">The algorithm (URI) specified in the &lt;EncryptWith&gt; element of the RST.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="keySizeInBits" /> is less than or equal to zero.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SymmetricProofDescriptor.ApplyTo(System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse)">
      <summary>Modifies the specified RSTR based on the settings in this proof descriptor.</summary>
      <param name="response">The RSTR to which to apply the proof descriptor.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="response" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SymmetricProofDescriptor.GetKeyBytes">
      <summary>Gets the key material.</summary>
      <returns>A byte array that contains the key material.</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SymmetricProofDescriptor.GetSourceEntropy">
      <summary>Gets the source entropy in plain bytes.</summary>
      <returns>A byte array that contains the source entropy.</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SymmetricProofDescriptor.GetTargetEntropy">
      <summary>Gets the target entropy in plain bytes</summary>
      <returns>A byte array that contains the target entropy.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SymmetricProofDescriptor.KeyIdentifier">
      <summary>Gets the key identifier that can be used inside the issued token to define the key. It is usually the binary secret or the encrypted key;</summary>
      <returns>The key identifier.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SymmetricProofDescriptor.RequestorEncryptingCredentials">
      <summary>Gets the requestor's encrypting credentials, which may be used to encrypt the requested proof token or the entropy in the response.</summary>
      <returns>The requestor’s encrypting credentials.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SymmetricProofDescriptor.TargetEncryptingCredentials">
      <summary>Gets the relying party encrypting credentials, which may be used to encrypt the requested security token in the response.</summary>
      <returns>The relying party encrypting credentials.</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.SymmetricSecurityKey">
      <summary>Represents the abstract base class for all keys that are generated using symmetric algorithms.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SymmetricSecurityKey.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SymmetricSecurityKey" /> class.  </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SymmetricSecurityKey.GenerateDerivedKey(System.String,System.Byte[],System.Byte[],System.Int32,System.Int32)">
      <summary>When overridden in a derived class, generates a derived key using the specified cryptographic algorithm and parameters for the current key. </summary>
      <returns>An array of <see cref="T:System.Byte" /> that contains the derived key.</returns>
      <param name="algorithm">A URI that represents the cryptographic algorithm to use to generate the derived key.</param>
      <param name="label">An array of <see cref="T:System.Byte" /> that contains the label parameter for the cryptographic algorithm.</param>
      <param name="nonce">An array of <see cref="T:System.Byte" /> that contains the nonce that is used to create a derived key.</param>
      <param name="derivedKeyLength">The size of the derived key.</param>
      <param name="offset">The position at which the derived key is located in the byte array that is returned from this method.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SymmetricSecurityKey.GetDecryptionTransform(System.String,System.Byte[])">
      <summary>When overridden in a derived class, gets a transform that decrypts cipher text using the specified cryptographic algorithm. </summary>
      <returns>An <see cref="T:System.Security.Cryptography.ICryptoTransform" /> that represents the decryption transform.</returns>
      <param name="algorithm">A cryptographic algorithm that decrypts cipher text, such as encrypted XML.</param>
      <param name="iv">An array of <see cref="T:System.Byte" /> that contains the initialization vector (IV) for the specified algorithm.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SymmetricSecurityKey.GetEncryptionTransform(System.String,System.Byte[])">
      <summary>When overridden in a derived class, gets a transform that encrypts XML using the specified cryptographic algorithm. </summary>
      <returns>An <see cref="T:System.Security.Cryptography.ICryptoTransform" /> that represents the encryption transform.</returns>
      <param name="algorithm">A cryptographic algorithm that encrypts XML.</param>
      <param name="iv">An array of <see cref="T:System.Byte" /> that contains the initialization vector (IV) for the specified algorithm.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SymmetricSecurityKey.GetIVSize(System.String)">
      <summary>When overridden in a derived class, gets the size, in bits, of the initialization vector (IV) that is required for the specified cryptographic algorithm. </summary>
      <returns>The size, in bits, of the initialization vector (IV) that is required for the cryptographic algorithm specified in the <paramref name="algorithm" /> parameter.</returns>
      <param name="algorithm">The cryptographic algorithm to get the size of the initialization vector (IV).</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SymmetricSecurityKey.GetKeyedHashAlgorithm(System.String)">
      <summary>When overridden in a derived class, gets an instance of the specified keyed hash algorithm.</summary>
      <returns>A <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" /> that represents the keyed hash algorithm.</returns>
      <param name="algorithm">The keyed hash algorithm to get an instance of.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricAlgorithm(System.String)">
      <summary>When overridden in a derived class, gets an instance of the specified symmetric algorithm.</summary>
      <returns>A <see cref="T:System.Security.Cryptography.SymmetricAlgorithm" /> that represents the symmetric algorithm.</returns>
      <param name="algorithm">The symmetric algorithm to get an instance of.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricKey">
      <summary>When overridden in a derived class, gets the bytes that represent the symmetric key.</summary>
      <returns>An array of <see cref="T:System.Byte" /> that contains the symmetric key.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.TokenReplayCache">
      <summary>The abstract base class that defines methods for a cache used to detect replayed tokens.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.TokenReplayCache.#ctor">
      <summary>Called from constructors in derived classes to initialize the <see cref="T:System.IdentityModel.Tokens.TokenReplayCache" />class.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.TokenReplayCache.AddOrUpdate(System.String,System.IdentityModel.Tokens.SecurityToken,System.DateTime)">
      <summary>When overridden in a derived class, attempts to add a new entry or update and existing entry.</summary>
      <param name="key">The key to use when adding the item.</param>
      <param name="securityToken">The token to add to the cache, can be null.</param>
      <param name="expirationTime">The time at which the entry expires.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.TokenReplayCache.Contains(System.String)">
      <summary>When overridden in a derived class, returns a value that indicates whether a matching entry exists in the cache.</summary>
      <returns>true if a matching entry is is found in the cache; otherwise, false.</returns>
      <param name="key">The key for which to search.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.TokenReplayCache.Get(System.String)">
      <summary>When overridden in a derived class, attempts to get the specified entry.</summary>
      <returns>The token that matches the key or null if no token is found.</returns>
      <param name="key">The key for which to search.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.TokenReplayCache.LoadCustomConfiguration(System.Xml.XmlNodeList)">
      <summary>When overridden in a derived class, loads custom configuration from the specified XML.</summary>
      <param name="nodelist">The custom configuration XML elements.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.TokenReplayCache.Remove(System.String)">
      <summary>When overridden in a derived class, attempts to remove an entry from the cache.</summary>
      <param name="key">The key that identifies the entry to remove.</param>
    </member>
    <member name="T:System.IdentityModel.Tokens.UserNameSecurityToken">
      <summary>Represents a security token that is based upon a user name and password.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.UserNameSecurityToken.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" /> class using the specified user name and password. </summary>
      <param name="userName">A user name. Sets the <see cref="P:System.IdentityModel.Tokens.UserNameSecurityToken.UserName" /> property.</param>
      <param name="password">A password for the user name. Sets the <see cref="P:System.IdentityModel.Tokens.UserNameSecurityToken.Password" /> property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="userName" /> is null.-or-<paramref name="password" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.UserNameSecurityToken.#ctor(System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" /> class using the specified user name, password, and unique identifier.</summary>
      <param name="userName">A user name. Sets the <see cref="P:System.IdentityModel.Tokens.UserNameSecurityToken.UserName" /> property.</param>
      <param name="password">A password for the user name. Sets the <see cref="P:System.IdentityModel.Tokens.UserNameSecurityToken.Password" /> property.</param>
      <param name="id">A unique identifier of the security token. Sets the <see cref="P:System.IdentityModel.Tokens.UserNameSecurityToken.Id" /> property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="userName" /> is null.-or-<paramref name="password" /> is null.-or-<paramref name="id" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.UserNameSecurityToken.Id">
      <summary>Gets a unique identifier of the security token.</summary>
      <returns>A unique identifier of the security token.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.UserNameSecurityToken.Password">
      <summary>Gets the password for the user name associated with the security token.</summary>
      <returns>The password for the user name associated with the security token.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.UserNameSecurityToken.SecurityKeys">
      <summary>Gets the cryptographic keys associated with the security token.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of type <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> that contains the set of keys associated with the security token.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.UserNameSecurityToken.UserName">
      <summary>Gets the user name that is associated with the security token.</summary>
      <returns>The user name that is associated with the security token.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.UserNameSecurityToken.ValidFrom">
      <summary>Gets the first instant in time at which this security token is valid.</summary>
      <returns>A <see cref="T:System.DateTime" /> that represents the instant in time at which this security token is first valid.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.UserNameSecurityToken.ValidTo">
      <summary>Gets the last instant in time at which this security token is valid.</summary>
      <returns>A <see cref="T:System.DateTime" /> that represents the last instant in time at which this security token is valid.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.UserNameSecurityTokenHandler">
      <summary>Defines an abstract base class for a <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" /> that processes security tokens of type <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" />.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.UserNameSecurityTokenHandler.#ctor">
      <summary>Called from constructors in derived classes to initialize the <see cref="T:System.IdentityModel.Tokens.UserNameSecurityTokenHandler" /> class.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.UserNameSecurityTokenHandler.CanReadToken(System.Xml.XmlReader)">
      <summary>Indicates whether the current XML element can be read as a <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" />.</summary>
      <returns>true if the reader is pointing to a <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" />; otherwise, false.</returns>
      <param name="reader">An XML reader positioned at a start element. The reader should not be advanced.</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.UserNameSecurityTokenHandler.CanWriteToken">
      <summary>Gets a value that indicates whether this handler can write tokens of type <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" />.</summary>
      <returns>true if the handler can write tokens of type <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" />; otherwise, false. Always true.</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.UserNameSecurityTokenHandler.GetTokenTypeIdentifiers">
      <summary>Returns the URIs used in requests to identify a token of the type that can be processed by this handler.</summary>
      <returns>The set of URIs that identify the token type that this handler supports.</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.UserNameSecurityTokenHandler.ReadToken(System.Xml.XmlReader)">
      <summary>Reads a <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" /> from the specified reader.</summary>
      <returns>The username security token that was deserialized from the XML.</returns>
      <param name="reader">An XML reader positioned at the start element of the token.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
      <exception cref="T:System.Xml.XmlException">The token cannot be read.</exception>
      <exception cref="T:System.NotSupportedException">The password was not in plain text format.</exception>
      <exception cref="T:System.InvalidOperationException">An unknown element was found in the security token or the username was not specified.</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.UserNameSecurityTokenHandler.RetainPassword">
      <summary>Gets or sets a value that specifies whether the password will be retained in the bootstrap token that is attached to the <see cref="T:System.Security.Claims.ClaimsIdentity" /> that is returned by the <see cref="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)" /> method.</summary>
      <returns>true if the password should be retained in the bootstrap token; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.UserNameSecurityTokenHandler.TokenType">
      <summary>Gets the <see cref="T:System.Type" /> of the tokens that this handler processes.</summary>
      <returns>The type of <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" />.</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.UserNameSecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
      <summary>Serializes the specified <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" /> to XML.</summary>
      <param name="writer">The XML writer to use to serialize the token.</param>
      <param name="token">The token to serialize.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null.-or-<paramref name="token" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="token" /> is not assignable from <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" />.</exception>
    </member>
    <member name="T:System.IdentityModel.Tokens.WindowsSecurityToken">
      <summary>Represents a security token that is based on the identity of a Windows domain or user account.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.WindowsSecurityToken.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.WindowsSecurityToken" /> class.  </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.WindowsSecurityToken.#ctor(System.Security.Principal.WindowsIdentity)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.WindowsSecurityToken" /> class using the Windows user. </summary>
      <param name="windowsIdentity">A <see cref="T:System.Security.Principal.WindowsIdentity" /> that represents a Windows user.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="windowsIdentity" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.WindowsSecurityToken.#ctor(System.Security.Principal.WindowsIdentity,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.WindowsSecurityToken" /> class using the Windows user. </summary>
      <param name="windowsIdentity">A <see cref="T:System.Security.Principal.WindowsIdentity" /> that represents a Windows user.</param>
      <param name="id">A unique identifier for the security token.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="windowsIdentity" /> is null.-or-<paramref name="id" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.WindowsSecurityToken.#ctor(System.Security.Principal.WindowsIdentity,System.String,System.String)">
      <summary>Creates a new instance of <see cref="T:System.IdentityModel.Tokens.WindowsSecurityToken" />.</summary>
      <param name="windowsIdentity">A <see cref="T:System.Security.Principal.WindowsIdentity" /> that represents a Windows user.</param>
      <param name="id">A unique identifier for the security token.</param>
      <param name="authenticationType">The authentication type for the security token.</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.WindowsSecurityToken.AuthenticationType">
      <summary>Gets the authentication type for the token.</summary>
      <returns>Returns <see cref="T:System.String" />.</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.WindowsSecurityToken.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.IdentityModel.Tokens.WindowsSecurityToken" />. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.WindowsSecurityToken.Id">
      <summary>Gets the unique identifier for the security token.</summary>
      <returns>A unique identifier for the security token.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.WindowsSecurityToken.Initialize(System.String,System.DateTime,System.DateTime,System.Security.Principal.WindowsIdentity,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.WindowsSecurityToken" /> class using the specified unique identifier, Windows user, and the first and last instants in time when the security token is valid.</summary>
      <param name="id">A unique identifier for the security token. Sets the value of the <see cref="P:System.IdentityModel.Tokens.WindowsSecurityToken.Id" /> property.</param>
      <param name="effectiveTime">A <see cref="T:System.DateTime" /> that represents the instant in time at which this security token is first valid. Set the value of the <see cref="P:System.IdentityModel.Tokens.WindowsSecurityToken.ValidFrom" /> property.</param>
      <param name="expirationTime">A <see cref="T:System.DateTime" /> that represents the last instant in time at which this security token is valid. Sets the value of the <see cref="P:System.IdentityModel.Tokens.WindowsSecurityToken.ValidTo" /> property.</param>
      <param name="windowsIdentity">A <see cref="T:System.Security.Principal.WindowsIdentity" /> that represents a Windows user. Sets the value of the <see cref="P:System.IdentityModel.Tokens.WindowsSecurityToken.WindowsIdentity" /> property.</param>
      <param name="clone">true to create a <see cref="T:System.Security.Principal.WindowsIdentity" /> object that is identical to the <paramref name="windowsIdentity" /> parameter and assign that to the <see cref="P:System.IdentityModel.Tokens.WindowsSecurityToken.WindowsIdentity" /> property; otherwise, assign the value of the <paramref name="windowsIdentity" /> parameter to the <see cref="P:System.IdentityModel.Tokens.WindowsSecurityToken.WindowsIdentity" /> property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="windowsIdentity" /> is null.-or-<paramref name="id" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.WindowsSecurityToken.Initialize(System.String,System.String,System.DateTime,System.DateTime,System.Security.Principal.WindowsIdentity,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.WindowsSecurityToken" /> class. </summary>
      <param name="id">A unique identifier for the security token.</param>
      <param name="authenticationType">The authentication type for the security token.</param>
      <param name="effectiveTime">A <see cref="T:System.DateTime" /> that represents the instant in time at which this security token is first valid.</param>
      <param name="expirationTime">A <see cref="T:System.DateTime" /> that represents the last instant in time at which this security token is valid.</param>
      <param name="windowsIdentity">Represents a Windows user.</param>
      <param name="clone">true to create a <see cref="T:System.Security.Principal.WindowsIdentity" /> object that is identical to the <paramref name="windowsIdentity" /> parameter and assign that to the <paramref name="WindowsIdentity" /> property; otherwise, assign the value of the <paramref name="windowsIdentity" /> parameter to the <paramref name="WindowsIdentity" /> property.</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.WindowsSecurityToken.SecurityKeys">
      <summary>Gets the cryptographic keys associated with the security token.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of type <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> that contains the set of keys associated with the security token.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.WindowsSecurityToken.ThrowIfDisposed">
      <summary>Throws an exception if the <see cref="M:System.IdentityModel.Tokens.WindowsSecurityToken.Dispose" /> method has been called for this instance.</summary>
      <exception cref="T:System.ObjectDisposedException">the <see cref="M:System.IdentityModel.Tokens.WindowsSecurityToken.Dispose" /> method has been called for this instance.</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.WindowsSecurityToken.ValidFrom">
      <summary>Gets the first instant in time at which this security token is valid.</summary>
      <returns>A <see cref="T:System.DateTime" /> that represents the instant in time at which this security token is first valid.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.WindowsSecurityToken.ValidTo">
      <summary>Gets the last instant in time at which this security token is valid.</summary>
      <returns>A <see cref="T:System.DateTime" /> that represents the last instant in time at which this security token is valid.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.WindowsSecurityToken.WindowsIdentity">
      <summary>Gets the Windows user associated with this security token.</summary>
      <returns>A <see cref="T:System.Security.Principal.WindowsIdentity" /> that represents a Windows user.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.WindowsUserNameSecurityTokenHandler">
      <summary>Defines a <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" /> that processes Windows Username tokens.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.WindowsUserNameSecurityTokenHandler.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.WindowsUserNameSecurityTokenHandler" /> class.</summary>
    </member>
    <member name="P:System.IdentityModel.Tokens.WindowsUserNameSecurityTokenHandler.CanValidateToken">
      <summary>Gets a value that indicates whether this handler supports validation of tokens of type <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" />.</summary>
      <returns>true if the handler supports validation of tokens of type <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" />; otherwise, false. Always true.</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.WindowsUserNameSecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
      <summary>Validates the specified token and returns its claims.</summary>
      <returns>The identities that are contained in the token.</returns>
      <param name="token">The token to validate. An instance of <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="token" /> is not assignable from <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" />.-or-The <see cref="P:System.IdentityModel.Tokens.UserNameSecurityToken.UserName" /> property of the specified token is not of the form user\domain.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" /> property is null.</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenValidationException">LogonUser using the specified token failed.</exception>
    </member>
    <member name="T:System.IdentityModel.Tokens.X509AsymmetricSecurityKey">
      <summary>Represents an asymmetric key for X.509 certificates.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509AsymmetricSecurityKey.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.X509AsymmetricSecurityKey" /> class using the specified X.509 certificate. </summary>
      <param name="certificate">The <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> that represents the X.509 certificate.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509AsymmetricSecurityKey.DecryptKey(System.String,System.Byte[])">
      <summary>Decrypts the specified encrypted key using the specified cryptographic algorithm.</summary>
      <returns>An array of <see cref="T:System.Byte" /> that contains the decrypted key.</returns>
      <param name="algorithm">The cryptographic algorithm to decrypt the key.</param>
      <param name="keyData">An array of <see cref="T:System.Byte" /> that contains the encrypted key.</param>
      <exception cref="T:System.NotSupportedException">The X.509 certificate specified in the constructor does not have a private key.-or-The X.509 certificate has a private key, but it was not generated using the <see cref="T:System.Security.Cryptography.RSA" /> algorithm.-or-The X.509 certificate has a private key, it was generated using the <see cref="T:System.Security.Cryptography.RSA" /> algorithm, but the <see cref="P:System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm" /> property is null.-or-The <paramref name="algorithm" /> parameter is not supported. The supported algorithms are <see cref="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSA15Url" /> and <see cref="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSAOAEPUrl" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509AsymmetricSecurityKey.EncryptKey(System.String,System.Byte[])">
      <summary>Encrypts the specified encrypted key using the specified cryptographic algorithm.</summary>
      <returns>An array of <see cref="T:System.Byte" /> that contains the encrypted key.</returns>
      <param name="algorithm">The cryptographic algorithm to encrypt the key.</param>
      <param name="keyData">An array of <see cref="T:System.Byte" /> that contains the key to encrypt.</param>
      <exception cref="T:System.NotSupportedException">The X.509 certificate specified in the constructor has a public key that was not generated using the <see cref="T:System.Security.Cryptography.RSA" /> algorithm.-or-The <paramref name="algorithm" /> parameter is not supported. The supported algorithms are <see cref="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSA15Url" /> and <see cref="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSAOAEPUrl" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509AsymmetricSecurityKey.GetAsymmetricAlgorithm(System.String,System.Boolean)">
      <summary>Gets the specified asymmetric cryptographic algorithm.</summary>
      <returns>An <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> that represents the specified asymmetric cryptographic algorithm.</returns>
      <param name="algorithm">The asymmetric algorithm to create.</param>
      <param name="privateKey">true when a private key is required to create the algorithm; otherwise, false. </param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="privateKey" /> is true and the X.509 certificate specified in the constructor does not have a private key.-or-<paramref name="algorithm" /> is <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl" /> and the public or private key for the X.509 certificate specified in the constructor is not of type <see cref="T:System.Security.Cryptography.DSA" />. -or-<paramref name="algorithm" /> is <see cref="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSA15Url" />, <see cref="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSAOAEPUrl" />, <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url" /> or <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256Signature" /> and the public or private key for the X.509 certificate specified in the constructor is not of type <see cref="T:System.Security.Cryptography.RSA" />. -or-<paramref name="algorithm" /> is not supported. The supported algorithms are <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl" />, <see cref="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSA15Url" />, <see cref="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSAOAEPUrl" />, <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url" />, and <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256Signature" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509AsymmetricSecurityKey.GetHashAlgorithmForSignature(System.String)">
      <summary>Gets a cryptographic algorithm that generates a hash for a digital signature.</summary>
      <returns>A <see cref="T:System.Security.Cryptography.HashAlgorithm" /> that generates hashes for digital signatures.</returns>
      <param name="algorithm">The hash algorithm.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="algorithm" /> is not supported. The supported algorithms are <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl" />, <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url" />, and <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256Signature" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509AsymmetricSecurityKey.GetSignatureDeformatter(System.String)">
      <summary>Gets the de-formatter algorithm for the digital signature.</summary>
      <returns>An <see cref="T:System.Security.Cryptography.AsymmetricSignatureDeformatter" /> that represents the de-formatter algorithm for the digital signature.</returns>
      <param name="algorithm">The de-formatter algorithm for the digital signature to get an instance of.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="algorithm" /> is <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl" /> and the public key for the X.509 certificate specified in the constructor is not of type <see cref="T:System.Security.Cryptography.DSA" />.-or-<paramref name="algorithm" /> is <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url" /> or <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256Signature" /> and the public key for the X.509 certificate specified in the constructor is not of type <see cref="T:System.Security.Cryptography.RSA" />.-or-<paramref name="algorithm" /> is not supported. The supported algorithms are <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl" />,<see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url" />, and <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256Signature" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509AsymmetricSecurityKey.GetSignatureFormatter(System.String)">
      <summary>Gets the formatter algorithm for the digital signature.</summary>
      <returns>An <see cref="T:System.Security.Cryptography.AsymmetricSignatureDeformatter" /> that represents the formatter algorithm for the digital signature.</returns>
      <param name="algorithm">The formatter algorithm for the digital signature to get an instance of.</param>
      <exception cref="T:System.NotSupportedException">The X.509 certificate specified in the constructor does not have a private key.-or-<paramref name="algorithm" /> is <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl" /> and the private key for the X.509 certificate specified in the constructor is not of type <see cref="T:System.Security.Cryptography.DSA" />.-or-<paramref name="algorithm" /> is <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url" /> or <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256Signature" /> and the private key for the X.509 certificate specified in the constructor is not of type <see cref="T:System.Security.Cryptography.RSA" />.-or-<paramref name="algorithm" /> is not supported. The supported algorithms are <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl" />,<see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url" />, and <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256Signature" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509AsymmetricSecurityKey.HasPrivateKey">
      <summary>Gets a value that indicates whether the private key is a available. </summary>
      <returns>true when the private key is available; otherwise, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509AsymmetricSecurityKey.IsAsymmetricAlgorithm(System.String)">
      <summary>Gets a value that indicates whether the specified algorithm uses asymmetric keys.</summary>
      <returns>true when the specified algorithm is <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.DsaSha1Signature" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha1Signature" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256Signature" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaOaepKeyWrap" />, or <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaV15KeyWrap" />; otherwise, false.</returns>
      <param name="algorithm">The cryptographic algorithm.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509AsymmetricSecurityKey.IsSupportedAlgorithm(System.String)">
      <summary>Gets a value that indicates whether the specified algorithm is supported by this class. </summary>
      <returns>true when the specified algorithm is <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl" />, <see cref="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSA15Url" />, <see cref="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSAOAEPUrl" />, <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url" />, or <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256Signature" /> and the public key is of the right type; otherwise, false. See the remarks for details.</returns>
      <param name="algorithm">The cryptographic algorithm.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509AsymmetricSecurityKey.IsSymmetricAlgorithm(System.String)">
      <summary>Gets a value that indicates whether the specified algorithm uses symmetric keys.</summary>
      <returns>true when the specified algorithm is <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.HmacSha1Signature" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap" />, or <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation" />; otherwise, false.</returns>
      <param name="algorithm">The cryptographic algorithm.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.X509AsymmetricSecurityKey.KeySize">
      <summary>Gets the size, in bits, of the public key associated with the X.509 certificate.</summary>
      <returns>The size, in bits, of the public key associated with the X.509 certificate.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.X509CertificateStoreTokenResolver">
      <summary>Represents a token resolver that can resolve tokens of type <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" /> against a specified X.509 certificate store.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509CertificateStoreTokenResolver.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.X509CertificateStoreTokenResolver" /> class with a default X.509 certificate store.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509CertificateStoreTokenResolver.#ctor(System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.StoreLocation)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.X509CertificateStoreTokenResolver" /> class that uses the X.509 certificate store with the specified location and name to resolve tokens.</summary>
      <param name="storeName">One of the enumeration values that specify the name of the X.509 certificate store.</param>
      <param name="storeLocation">One of the enumeration values that specify the location of the X.509 certificate store.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509CertificateStoreTokenResolver.#ctor(System.String,System.Security.Cryptography.X509Certificates.StoreLocation)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.X509CertificateStoreTokenResolver" /> class that uses the X.509 certificate store with the specified location and name to resolve tokens.</summary>
      <param name="storeName">The name of the X.509 certificate store.</param>
      <param name="storeLocation">One of the enumeration values that specify the location of an X.509 certificate store.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="storeLocation" /> is null or an empty string.</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.X509CertificateStoreTokenResolver.StoreLocation">
      <summary>Gets the location of the X.509 certificate store that is used by this token resolver.</summary>
      <returns>One of the enumeration values that specify the location of an X.509 certificate store.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.X509CertificateStoreTokenResolver.StoreName">
      <summary>Gets the name of the X.509 certificate store that is used by this token resolver.</summary>
      <returns>The name of the X.509 certificate store that is used by this token resolver.</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509CertificateStoreTokenResolver.TryResolveSecurityKeyCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityKey@)">
      <summary>Attempts to resolve the specified key identifier clause to a security key.</summary>
      <returns>true if the key identifier clause is successfully resolved; otherwise, false.</returns>
      <param name="keyIdentifierClause">The key identifier clause from which to resolve the security key.</param>
      <param name="key">When this method returns, contains the security key that was resolved from the key identifier clause. This parameter is treated as uninitialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyIdentifierClause" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509CertificateStoreTokenResolver.TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifier,System.IdentityModel.Tokens.SecurityToken@)">
      <summary>Resolves the specified key identifier to a security token.</summary>
      <returns>true if the key identifier is successfully resolved; otherwise, false.</returns>
      <param name="keyIdentifier">The key identifier to resolve.</param>
      <param name="token">When this method returns, contains the security token that was resolved from the key identifier. This parameter is treated as uninitialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyIdentifier" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509CertificateStoreTokenResolver.TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityToken@)">
      <summary>Resolves the specified key identifier clause to a security token.</summary>
      <returns>true if the key identifier clause is successfully resolved; otherwise, false.</returns>
      <param name="keyIdentifierClause">The key identifier clause to resolve.</param>
      <param name="token">When this method returns, contains the security token that was resolved from the key identifier clause. This parameter is treated as uninitialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyIdentifierClause" /> is null.</exception>
    </member>
    <member name="T:System.IdentityModel.Tokens.X509DataSecurityKeyIdentifierClauseSerializer">
      <summary>Represents a <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClauseSerializer" /> that can process X.509 certificate reference types.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509DataSecurityKeyIdentifierClauseSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.X509DataSecurityKeyIdentifierClauseSerializer" /> class.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509DataSecurityKeyIdentifierClauseSerializer.CanReadKeyIdentifierClause(System.Xml.XmlReader)">
      <summary>Returns a value that indicates whether the specified reader is positioned at an &lt;ds:X509Data&gt; element.</summary>
      <returns>true if the reader is referring to an &lt;ds:X509Data&gt; element; otherwise, false.</returns>
      <param name="reader">An XML reader positioned at the start element of the key identifier clause.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509DataSecurityKeyIdentifierClauseSerializer.CanWriteKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>Returns a value that indicates whether the specified key identifier clause can be serialized by this handler.</summary>
      <returns>true if the key identifier clause is supported by this handler; otherwise, false.</returns>
      <param name="securityKeyIdentifierClause">The key identifier clause to check.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="securityKeyIdentifierClause" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509DataSecurityKeyIdentifierClauseSerializer.ReadKeyIdentifierClause(System.Xml.XmlReader)">
      <summary>Deserializes a key identifier clause from XML by using the specified XML reader.</summary>
      <returns>The key identifier clause that was deserialized from the XML or null if a key identifier clause could not be read.</returns>
      <param name="reader">An XML reader positioned at the start element of the key identifier clause to read.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="reader" /> is not positioned at a &lt;ds:X509Data&gt; element. (The <see cref="M:System.IdentityModel.Tokens.X509DataSecurityKeyIdentifierClauseSerializer.CanReadKeyIdentifierClause(System.Xml.XmlReader)" /> method returns false.)</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509DataSecurityKeyIdentifierClauseSerializer.WriteKeyIdentifierClause(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>Serializes the specified key identifier clause.</summary>
      <param name="writer">The XML writer to use to serialize the key identifier clause.</param>
      <param name="securityKeyIdentifierClause">The key identifier clause to serialize.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.-or-<paramref name="securityKeyIdentifierClause" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="securityKeyIdentifierClause" /> is not a supported clause type.</exception>
    </member>
    <member name="T:System.IdentityModel.Tokens.X509EncryptingCredentials">
      <summary>Represents an X.509 token used as the encrypting credential. This class is usually used as key wrapping credentials.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509EncryptingCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.X509EncryptingCredentials" /> class based on the specified X.509 certificate.</summary>
      <param name="certificate">The X.509 certificate.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509EncryptingCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.X509EncryptingCredentials" /> class based on the specified X.509 certificate and security key identifier.</summary>
      <param name="certificate">The X.509 certificate.</param>
      <param name="ski">The security key identifier.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509EncryptingCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.IdentityModel.Tokens.SecurityKeyIdentifier,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.X509EncryptingCredentials" /> class based on the specified X.509 certificate, key wrapping algorithm, and security key identifier.</summary>
      <param name="certificate">The X.509 certificate.</param>
      <param name="ski">The security key identifier.</param>
      <param name="keyWrappingAlgorithm">The key wrapping algorithm.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509EncryptingCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.X509EncryptingCredentials" /> class based on the specified X.509 certificate and key wrapping algorithm.</summary>
      <param name="certificate">The X.509 certificate.</param>
      <param name="keyWrappingAlgorithm">The key wrapping algorithm.</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.X509EncryptingCredentials.Certificate">
      <summary>Gets the X.509 certificate.</summary>
      <returns>The X.509 certificate.</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause">
      <summary>Represents a key identifier clause that identifies a <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" /> security tokens using the distinguished name of the certificate issuer and the X.509 certificate's serial number.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause" /> class using the specified X.509 certificate. </summary>
      <param name="certificate">An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> that contains the X.509 certificate.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause" /> class using the specified distinguished name of the certificate issuer and the serial number of the X.509 certificate. </summary>
      <param name="issuerName">The distinguished name of the certificate authority that issued the X.509 certificate. Sets the value of the <see cref="P:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause.IssuerName" /> property.</param>
      <param name="issuerSerialNumber">The serial number of the X.509 certificate. Sets the value of the <see cref="P:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause.IssuerSerialNumber" /> property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="issuerName" /> is null.-or-<paramref name="issuerSerialNumber" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause.IssuerName">
      <summary>Gets the distinguished name of the certificate authority that issued the X.509 certificate.</summary>
      <returns>The distinguished name of the certificate authority that issued the X.509 certificate.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause.IssuerSerialNumber">
      <summary>Gets the serial number of the X.509 certificate.</summary>
      <returns>The serial number of the X.509 certificate.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause.Matches(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>Returns a value that indicates whether the key identifier for this instance matches the specified key identifier.</summary>
      <returns>true if <paramref name="keyIdentifierClause" /> is a <see cref="T:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause" /> type and the key identifier clauses match; otherwise, false.</returns>
      <param name="keyIdentifierClause">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> to compare to this instance.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause.Matches(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>Returns a value that indicates whether the key identifier for this instance matches the specified X.509 certificate.</summary>
      <returns>true if <paramref name="certificate" /> has the same issuer name and issuer serial number as the current instance; otherwise, false.</returns>
      <param name="certificate">An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> that contains the X.509 certificate to compare.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause.Matches(System.String,System.String)">
      <summary>Returns a value that indicates whether the key identifier for this instance is equivalent to the specified issuer name and issuer serial number.</summary>
      <returns>true if the <paramref name="issuerName " />and <paramref name="issuerSerialNumber" /> parameters match the <see cref="P:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause.IssuerName" /> and <see cref="P:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause.IssuerSerialNumber" /> properties; otherwise, false.</returns>
      <param name="issuerName">The distinguished name of the certificate authority that issued the X.509 certificate.</param>
      <param name="issuerSerialNumber">The serial number of the X.509 certificate.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause.ToString">
      <summary>Returns the current object.</summary>
      <returns>A <see cref="T:System.String" /> that represents the current object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.X509NTAuthChainTrustValidator">
      <summary>Represents an X.509 certificate validator that will validate a specified X.509 certificate and verify whether the certificate can be mapped to a Windows account and whether the certificate chain is trusted.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509NTAuthChainTrustValidator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.X509NTAuthChainTrustValidator" /> class.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509NTAuthChainTrustValidator.#ctor(System.Boolean,System.Security.Cryptography.X509Certificates.X509ChainPolicy)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.X509NTAuthChainTrustValidator" /> class.</summary>
      <param name="useMachineContext">true to use the local machine context to build the certificate chain; otherwise, false.</param>
      <param name="chainPolicy">The chain policy to use when building the X.509 certificate chain.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509NTAuthChainTrustValidator.Validate(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>Validates the specified X.509 certificate.</summary>
      <param name="certificate">The X.509 certificate to validate.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> is null.</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenValidationException">Validation of the X.509 certificate failed.</exception>
    </member>
    <member name="T:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause">
      <summary>Represents a key identifier clause that identifies a <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" /> security token using the X.509 certificate's raw data.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause.#ctor(System.Byte[])">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause" /> class using the specified raw data of an X.509 certificate. </summary>
      <param name="certificateRawData">An array of <see cref="T:System.Byte" /> that contains the raw data of an X.509 certificate.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificateRawData" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="certificateRawData" /> is zero length.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause" /> class using the specified X.509 certificate. </summary>
      <param name="certificate">An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> that contains the X.509 certificate.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause.CanCreateKey">
      <summary>Gets a value that indicates whether a key can be created from the raw data of the X.509 certificate or byte array that is specified in the constructor. </summary>
      <returns>true in all cases.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause.CreateKey">
      <summary>Creates a key from the raw data of the X.509 certificate or byte array that is specified in the constructor.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.X509AsymmetricSecurityKey" /> that contains the key(s) associated with the X.509 certificate.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause.GetX509RawData">
      <summary>Gets the raw data associated with the X.509 certificate.</summary>
      <returns>An array of <see cref="T:System.Byte" /> that contains the raw data associated with the X.509 certificate.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause.Matches(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>Returns a value that indicates whether the key identifier for this instance is equivalent to the specified X.509 certificate.</summary>
      <returns>true if <paramref name="certificate" /> has the raw data that matches the current instance; otherwise, false.</returns>
      <param name="certificate">An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> that contains the X.509 certificate to compare.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause.ToString">
      <summary>Returns the current object.</summary>
      <returns>A <see cref="T:System.String" /> that represents the current object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.X509SecurityToken">
      <summary>Represents a security token that is based upon an X.509 certificate.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SecurityToken.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" /> class using the specified X.509 certificate. </summary>
      <param name="certificate">An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> that contains the X.509 certificate. Sets the <see cref="P:System.IdentityModel.Tokens.X509SecurityToken.Certificate" /> property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SecurityToken.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" /> class using the specified X.509 certificate and unique identifier. </summary>
      <param name="certificate">An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> that contains the X.509 certificate. Sets the <see cref="P:System.IdentityModel.Tokens.X509SecurityToken.Certificate" /> property.</param>
      <param name="id">A unique identifier of the security token. Sets the <see cref="P:System.IdentityModel.Tokens.X509SecurityToken.Id" /> property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> is null.-or-<paramref name="id" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SecurityToken.CanCreateKeyIdentifierClause``1">
      <summary>Gets a value indicating whether this security token is capable of creating the specified key identifier.</summary>
      <returns>true when <paramref name="T" /> is of type <see cref="T:System.IdentityModel.Tokens.X509SubjectKeyIdentifierClause" />, <see cref="T:System.IdentityModel.Tokens.X509ThumbprintKeyIdentifierClause" />, <see cref="T:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause" />, or <see cref="T:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause" />; otherwise, false.</returns>
      <typeparam name="T">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> that specifies the key identifier to create.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.X509SecurityToken.Certificate">
      <summary>Gets the X.509 certificate associated with the security token.</summary>
      <returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> that contains the X.509 certificate.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SecurityToken.CreateKeyIdentifierClause``1">
      <summary>Creates the specified key identifier clause.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> that is a key identifier clause for the security token.</returns>
      <typeparam name="T">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> that specifies the key identifier to create.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SecurityToken.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" />. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.X509SecurityToken.Id">
      <summary>Gets a unique identifier of the security token.</summary>
      <returns>A unique identifier of the security token.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SecurityToken.MatchesKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>Returns a value indicating whether the key identifier for this instance is equal to the specified key identifier.</summary>
      <returns>true if <paramref name="keyIdentifierClause" /> is one of the <see cref="T:System.IdentityModel.Tokens.X509SubjectKeyIdentifierClause" />, <see cref="T:System.IdentityModel.Tokens.X509ThumbprintKeyIdentifierClause" />, <see cref="T:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause" />, or <see cref="T:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause" /> types and the key identifier clauses match; otherwise, false.</returns>
      <param name="keyIdentifierClause">An <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> to compare to this instance.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.X509SecurityToken.SecurityKeys">
      <summary>Gets the cryptographic keys associated with the security token.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of type <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> that contains the set of keys associated with the security token.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SecurityToken.ThrowIfDisposed">
      <summary>Throws an exception if the <see cref="M:System.IdentityModel.Tokens.X509SecurityToken.ThrowIfDisposed" /> method has been called for this instance.</summary>
      <exception cref="T:System.ObjectDisposedException">the <see cref="M:System.IdentityModel.Tokens.X509SecurityToken.ThrowIfDisposed" />  method has been called for this instance.</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.X509SecurityToken.ValidFrom">
      <summary>Gets the first instant in time at which this security token is valid.</summary>
      <returns>A <see cref="T:System.DateTime" /> that represents the instant in time at which this security token is first valid.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.X509SecurityToken.ValidTo">
      <summary>Gets the last instant in time at which this security token is valid.</summary>
      <returns>A <see cref="T:System.DateTime" /> that represents the last instant in time at which this security token is valid.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.X509SecurityTokenHandler">
      <summary>Represents a security token handler that processes tokens of type <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" />. By default, the handler will perform chain-trust validation of the X.509 certificate.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SecurityTokenHandler.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.X509SecurityTokenHandler" /> class with default values.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SecurityTokenHandler.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.X509SecurityTokenHandler" /> class by using a value that indicates whether the certificate should be mapped to a Windows account.</summary>
      <param name="mapToWindows">true if the certificate should be mapped to a Windows account; otherwise, false. Sets the <see cref="P:System.IdentityModel.Tokens.X509SecurityTokenHandler.MapToWindows" /> property.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SecurityTokenHandler.#ctor(System.Boolean,System.IdentityModel.Selectors.X509CertificateValidator)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.X509SecurityTokenHandler" /> class by using a value that indicates whether the certificate should be mapped to a Windows account and the specified certificate validator.</summary>
      <param name="mapToWindows">true if the certificate should be mapped to a Windows account; otherwise, false. Sets the <see cref="P:System.IdentityModel.Tokens.X509SecurityTokenHandler.MapToWindows" /> property.</param>
      <param name="certificateValidator">The certificate validator to use. Sets the <see cref="P:System.IdentityModel.Tokens.X509SecurityTokenHandler.CertificateValidator" /> property.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SecurityTokenHandler.#ctor(System.IdentityModel.Selectors.X509CertificateValidator)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.X509SecurityTokenHandler" /> class by using the specified certificate validator.</summary>
      <param name="certificateValidator">The certificate validator to use. Sets the <see cref="P:System.IdentityModel.Tokens.X509SecurityTokenHandler.CertificateValidator" /> property.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)">
      <summary>Returns a value that indicates whether the specified reader is referring to an &lt;ds:X509Data&gt; element.</summary>
      <returns>true if the reader is referring to an &lt;ds:X509Data&gt; element; otherwise, false.</returns>
      <param name="reader">An XML reader positioned at the start element of the key identifier clause. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)">
      <summary>Returns a value that indicates whether the reader points to an X.509 security token as defined in the WS-Security specification.</summary>
      <returns>true if the reader is pointing to an X.509 security token; otherwise, false.</returns>
      <param name="reader">A reader pointing to the token XML.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.X509SecurityTokenHandler.CanValidateToken">
      <summary>Gets a value that indicates whether this handler supports validation of tokens of type <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" />.</summary>
      <returns>true if the handler supports validation of tokens of type <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" />; otherwise, false. Always true.</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SecurityTokenHandler.CanWriteKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>Returns a value that indicates whether the specified key identifier clause can be serialized by this handler.</summary>
      <returns>true if the <paramref name="securityKeyIdentifierClause" /> is supported and if the <see cref="P:System.IdentityModel.Tokens.X509SecurityTokenHandler.WriteXmlDSigDefinedClauseTypes" /> property is set to true; otherwise, false.</returns>
      <param name="securityKeyIdentifierClause">The key identifier clause to be serialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="securityKeyIdentifierClause" /> is null.</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.X509SecurityTokenHandler.CanWriteToken">
      <summary>Gets a value that indicates whether this handler can write tokens of type <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" />.</summary>
      <returns>true if the handler can write tokens of type <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" />; otherwise, false. Always true.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.X509SecurityTokenHandler.CertificateValidator">
      <summary>Gets or sets the <see cref="T:System.IdentityModel.Selectors.X509CertificateValidator" /> that is used by the current instance.</summary>
      <returns>The X.509 certificate validator that is used by the current instance.</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SecurityTokenHandler.GetTokenTypeIdentifiers">
      <summary>Gets the X.509 security token type defined in the WS-Security X.509 Token Profile.</summary>
      <returns>The X.509 token type URI. By default, the value of the <see cref="P:System.IdentityModel.Tokens.SecurityTokenTypes.X509Certificate" /> property.</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)">
      <summary>Loads custom configuration from XML.</summary>
      <param name="customConfigElements">The XML elements that contain the custom configuration.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="customConfigElements" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The custom configuration specified is not valid.</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.X509SecurityTokenHandler.MapToWindows">
      <summary>Gets or sets a value that indicates whether the validating token should be mapped to a Windows account.</summary>
      <returns>true if the validating token should be mapped to a Windows account; otherwise, false.</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)">
      <summary>Deserializes a key identifier clause referenced by the specified XML reader.</summary>
      <returns>The key identifier clause that was deserialized from the XML.</returns>
      <param name="reader">The XML reader referencing the key identifier clause.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SecurityTokenHandler.ReadToken(System.Xml.XmlReader)">
      <summary>Deserializes the X.509 security token referenced by the specified XML reader.</summary>
      <returns>The security token deserialized from the XML. An instance of <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" />.</returns>
      <param name="reader">An XML reader that is pointing to an X.509 security token.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="reader" /> is not pointing to a valid X.509 security token as defined in the WS-Security X.509 Token Profile. Or the encodingType specified is other than Base64 or HexBinary.</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.X509SecurityTokenHandler.TokenType">
      <summary>Gets the <see cref="T:System.Type" /> of the tokens that this handler processes.</summary>
      <returns>By default, the type of the <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" /> class.</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
      <summary>Validates the specified X.509 security token.</summary>
      <returns>The identities contained in the token.</returns>
      <param name="token">The token to be validated.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="token" /> is not assignable from <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" /> property is null.-or-There is no issuer name registry (<see cref="T:System.IdentityModel.Tokens.IssuerNameRegistry" />) configured. (The <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.IssuerNameRegistry" /> property of the <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration" /> referenced by the <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" /> property is null.)</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenValidationException">The current <see cref="T:System.IdentityModel.Selectors.X509CertificateValidator" /> was unable to validate the certificate in the token.</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">The current <see cref="T:System.IdentityModel.Tokens.IssuerNameRegistry" /> returned null when trying to resolve the issuer of the certificate in the token.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SecurityTokenHandler.WriteKeyIdentifierClause(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>Serializes the specified key identifier clause to the XML writer.</summary>
      <param name="writer">The XML writer to which the key identifier clause should be serialized.</param>
      <param name="securityKeyIdentifierClause">The key identifier clause to serialize.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="securityKeyIdentifierClause" /> is null.-or-<paramref name="writer" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.IdentityModel.Tokens.X509SecurityTokenHandler.WriteXmlDSigDefinedClauseTypes" /> property is false.</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
      <summary>Serializes the specified X.509 security token to the specified XML writer.</summary>
      <param name="writer">The XML writer to which the token should be serialized.</param>
      <param name="token">The X.509 security token to serialize. An instance of <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" /> is null.-or-<paramref name="writer" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="token" /> is not assignable from <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" />.</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.X509SecurityTokenHandler.WriteXmlDSigDefinedClauseTypes">
      <summary>Gets or Sets the value that specifies whether XmlDsig-defined clause types are preferred.</summary>
      <returns>true if XmlDsig-defined clause types are preferred; otherwise, false.</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.X509SecurityTokenHandler.X509NTAuthChainTrustValidator">
      <summary>Gets or sets the <see cref="T:System.IdentityModel.Tokens.X509NTAuthChainTrustValidator" /> that is used by the current instance during certificate validation when the incoming X.509 certificate is mapped to a Windows account.</summary>
      <returns>An X.509 certificate validator that will validate a specified X.509 certificate and verify whether the certificate can be mapped to a Windows account and whether the certificate chain is trusted.</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.X509SigningCredentials">
      <summary>Represents an X.509 token used as the signing credential.</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SigningCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.X509SigningCredentials" /> class based on the specified X.509 certificate.</summary>
      <param name="certificate">The X.509 certificate.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SigningCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.X509SigningCredentials" /> class based on the specified X.509 certificate and security key identifier. </summary>
      <param name="certificate">The X.509 certificate.</param>
      <param name="ski">The security key identifier.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SigningCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.IdentityModel.Tokens.SecurityKeyIdentifier,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.X509SigningCredentials" /> class based on the specified X.509 certificate, security key identifier, signature algorithm, and digest algorithm. </summary>
      <param name="certificate">The X.509 certificate.</param>
      <param name="ski">The security key identifier.</param>
      <param name="signatureAlgorithm">The signature algorithm.</param>
      <param name="digestAlgorithm">The digest algorithm.</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SigningCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.X509SigningCredentials" /> class based on the specified X.509 certificate, signature algorithm, and digest algorithm. </summary>
      <param name="certificate">The X.509 certificate.</param>
      <param name="signatureAlgorithm">The signature algorithm.</param>
      <param name="digestAlgorithm">The digest algorithm.</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.X509SigningCredentials.Certificate">
      <summary>Gets the X.509 certificate.</summary>
      <returns>The X.509 certificate.</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.X509SubjectKeyIdentifierClause">
      <summary>Represents a key identifier clause that identifies a <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" /> security token using the X.509 certificate's subject key identifier extension.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SubjectKeyIdentifierClause.#ctor(System.Byte[])">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.X509SubjectKeyIdentifierClause" /> class using the specified subject key identifier. </summary>
      <param name="ski">An array of <see cref="T:System.Byte" /> that contains the subject key identifier.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ski" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SubjectKeyIdentifierClause.CanCreateFrom(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>Gets a value that indicates whether a key identifier clause can be created for the specified X.509 certificate. </summary>
      <returns>true if a key identifier clause can be created for <paramref name="certificate" />; otherwise, false.</returns>
      <param name="certificate">An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> that contains the X.509 certificate.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SubjectKeyIdentifierClause.GetX509SubjectKeyIdentifier">
      <summary>Gets the subject key identifier.</summary>
      <returns>An array of <see cref="T:System.Byte" /> that contains the subject key identifier.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SubjectKeyIdentifierClause.Matches(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>Returns a value that indicates whether the key identifier for this instance is equivalent to the key identifier of the specified X.509 certificate.</summary>
      <returns>true if <paramref name="certificate" /> has the same subject key identifier as the current instance; otherwise, false.</returns>
      <param name="certificate">An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> that contains the X.509 certificate to compare.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SubjectKeyIdentifierClause.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A <see cref="T:System.String" /> that represents the current object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SubjectKeyIdentifierClause.TryCreateFrom(System.Security.Cryptography.X509Certificates.X509Certificate2,System.IdentityModel.Tokens.X509SubjectKeyIdentifierClause@)">
      <summary>Creates a key identifier clause using the specified X.509 certificate.</summary>
      <returns>true when a key identifier clause can be created for the specified X.509 certificate; otherwise, false. </returns>
      <param name="certificate">An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> to create the key identifier clause for.</param>
      <param name="keyIdentifierClause">When this method returns, contains a <see cref="T:System.IdentityModel.Tokens.X509SubjectKeyIdentifierClause" /> that represents the key identifier clause. This parameter is passed uninitialized. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.X509ThumbprintKeyIdentifierClause">
      <summary>Represents a key identifier clause that identifies a <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" /> security tokens using the X.509 certificate's thumbprint.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509ThumbprintKeyIdentifierClause.#ctor(System.Byte[])">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.X509ThumbprintKeyIdentifierClause" /> class using the specified thumbprint for an X.509 certificate. </summary>
      <param name="thumbprint">An array of <see cref="T:System.Byte" /> that contains the thumbprint of the X.509 certificate.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="thumbprint" /> is null.-or-<paramref name="thumbprint" /> is zero length.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509ThumbprintKeyIdentifierClause.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.X509ThumbprintKeyIdentifierClause" /> class using the specified X.509 certificate. </summary>
      <param name="certificate">An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> that contains the X.509 certificate.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509ThumbprintKeyIdentifierClause.GetX509Thumbprint">
      <summary>Returns the thumbprint for the X.509 certificate.</summary>
      <returns>An array of <see cref="T:System.Byte" /> that contains the thumbprint of the X.509 certificate.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509ThumbprintKeyIdentifierClause.Matches(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>Returns a value that indicates whether the key identifier for this instance is equivalent to the specified X.509 certificate's thumbprint.</summary>
      <returns>true if <paramref name="certificate" /> has the same thumbprint as the current instance; otherwise, false.</returns>
      <param name="certificate">An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> that contains the X.509 certificate to compare.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509ThumbprintKeyIdentifierClause.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A <see cref="T:System.String" /> that represents the current object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.X509WindowsSecurityToken">
      <summary>Represents a security token that is based upon an X.509 certificate and that the certificate is mapped to a Windows domain user or local computer user account.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509WindowsSecurityToken.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Principal.WindowsIdentity)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.X509WindowsSecurityToken" /> class using the specified X.509 certificate and Windows domain or computer account. </summary>
      <param name="certificate">An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> that contains the X.509 certificate.</param>
      <param name="windowsIdentity">A <see cref="T:System.Security.Principal.WindowsIdentity" /> that represents the identity of a Windows domain or computer account.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509WindowsSecurityToken.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Principal.WindowsIdentity,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.X509WindowsSecurityToken" /> class using the specified X.509 certificate, Windows domain or computer account, and unique identifier.</summary>
      <param name="certificate">An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> that contains the X.509 certificate.</param>
      <param name="windowsIdentity">A <see cref="T:System.Security.Principal.WindowsIdentity" /> that represents the identity of a Windows domain or computer account.</param>
      <param name="id">A unique identifier of the security token.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509WindowsSecurityToken.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Principal.WindowsIdentity,System.String,System.String)">
      <summary>Creates a new instance of <see cref="T:System.IdentityModel.Tokens.X509WindowsSecurityToken" />.</summary>
      <param name="certificate">A <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> that contains the X.509 certificate.</param>
      <param name="windowsIdentity">Represents the identity of a Windows domain or computer account.</param>
      <param name="authenticationType">The authentication type for the token.</param>
      <param name="id">A unique identifier for the security token.</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.X509WindowsSecurityToken.AuthenticationType">
      <summary>Gets the authentication type for the token.</summary>
      <returns>Returns <see cref="T:System.String" />.</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509WindowsSecurityToken.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.IdentityModel.Tokens.X509WindowsSecurityToken" />. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.X509WindowsSecurityToken.WindowsIdentity">
      <summary>Gets the identity of a Windows domain or computer account.</summary>
      <returns>A <see cref="T:System.Security.Principal.WindowsIdentity" /> that represents the identity of a Windows domain or computer account.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Security.Claims.AuthenticationInformation">
      <summary>Contains the authentication information that an authority asserted when creating a token for a subject.</summary>
    </member>
    <member name="M:System.Security.Claims.AuthenticationInformation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Claims.AuthenticationInformation" /> class.</summary>
    </member>
    <member name="P:System.Security.Claims.AuthenticationInformation.Address">
      <summary>Gets or sets the address of the authority that created the token.</summary>
      <returns>The address.</returns>
    </member>
    <member name="P:System.Security.Claims.AuthenticationInformation.AuthorizationContexts">
      <summary>Gets the <see cref="T:System.Security.Claims.AuthorizationContext" /> used by the authenticating authority when issuing tokens.</summary>
      <returns>A collection of <see cref="T:System.IdentityModel.Tokens.AuthenticationContext" /> that represents the authorization context.</returns>
    </member>
    <member name="P:System.Security.Claims.AuthenticationInformation.DnsName">
      <summary>Gets or sets the DNS name of the authority that created the token.</summary>
      <returns>The DNS name of the authority.</returns>
    </member>
    <member name="P:System.Security.Claims.AuthenticationInformation.NotOnOrAfter">
      <summary>Gets or sets the time that the session referred to in the session index must be considered ended.</summary>
      <returns>The time that the session must be considered ended.</returns>
    </member>
    <member name="P:System.Security.Claims.AuthenticationInformation.Session">
      <summary>Gets or sets the session index that describes the session between the authority and the client.</summary>
      <returns>The session index.</returns>
    </member>
    <member name="T:System.Security.Claims.AuthenticationTypes">
      <summary>Defines authentication types for the <see cref="P:System.Security.Principal.WindowsIdentity.AuthenticationType" /> property.</summary>
    </member>
    <member name="F:System.Security.Claims.AuthenticationTypes.Basic">
      <summary>Basic Authentication.</summary>
    </member>
    <member name="F:System.Security.Claims.AuthenticationTypes.Federation">
      <summary>Federated Authentication.</summary>
    </member>
    <member name="F:System.Security.Claims.AuthenticationTypes.Kerberos">
      <summary>Kerberos authentication.</summary>
    </member>
    <member name="F:System.Security.Claims.AuthenticationTypes.Negotiate">
      <summary>Negotiated authentication.</summary>
    </member>
    <member name="F:System.Security.Claims.AuthenticationTypes.Password">
      <summary>Username and password authenticiation.</summary>
    </member>
    <member name="F:System.Security.Claims.AuthenticationTypes.Signature">
      <summary>Authentication using a digital signature.</summary>
    </member>
    <member name="F:System.Security.Claims.AuthenticationTypes.Windows">
      <summary>Windows authentication.</summary>
    </member>
    <member name="F:System.Security.Claims.AuthenticationTypes.X509">
      <summary>Authentication using an X.509 certificate.</summary>
    </member>
    <member name="T:System.Security.Claims.AuthorizationContext">
      <summary>Provides context information of an authorization event. This includes the principal that represents the caller, the resource that is being requested, and the action that is being performed. </summary>
    </member>
    <member name="M:System.Security.Claims.AuthorizationContext.#ctor(System.Security.Claims.ClaimsPrincipal,System.Collections.ObjectModel.Collection{System.Security.Claims.Claim},System.Collections.ObjectModel.Collection{System.Security.Claims.Claim})">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Claims.AuthorizationContext" /> class with the specified principal, resource claim, and action claim.</summary>
      <param name="principal">The principal for which authorization is to be checked.</param>
      <param name="resource">A collection of claims that represents the resource for which the principal is to be authorized. The collection typically contains a single element.</param>
      <param name="action">A collection of claims that represents the action to be performed on the resource. The collection typically contains a single element.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="principal" /> is null.-or-<paramref name="resource" /> is null. -or-<paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Security.Claims.AuthorizationContext.#ctor(System.Security.Claims.ClaimsPrincipal,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Claims.AuthorizationContext" /> class with the specified principal, resource name, and action name.</summary>
      <param name="principal">The principal for which authorization is to be checked.</param>
      <param name="resource">The resource for which the principal is to be authorized. The resource is specified as the value of a name claim.</param>
      <param name="action">The action to be performed on the resource. The action is specified as the value of a name claim.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="principal" /> is null.-or-<paramref name="resource" /> is null. -or-<paramref name="action" /> is null.</exception>
    </member>
    <member name="P:System.Security.Claims.AuthorizationContext.Action">
      <summary>Gets the action for which the principal is to be authorized.</summary>
      <returns>A collection of claims that represents the actions relevant to the request.</returns>
    </member>
    <member name="P:System.Security.Claims.AuthorizationContext.Principal">
      <summary>Gets the principal (subject) for which authorization is being requested.</summary>
      <returns>The principal for which authorization is being requested.</returns>
    </member>
    <member name="P:System.Security.Claims.AuthorizationContext.Resource">
      <summary>Gets the resource on which the principal is to be authorized.</summary>
      <returns>A collection of claims that represents the resource.</returns>
    </member>
    <member name="T:System.Security.Claims.ClaimProperties">
      <summary>Defines the keys for properties contained in the <see cref="P:System.Security.Claims.Claim.Properties" /> property.</summary>
    </member>
    <member name="F:System.Security.Claims.ClaimProperties.Namespace">
      <summary>The claim properties namespace.</summary>
    </member>
    <member name="F:System.Security.Claims.ClaimProperties.SamlAttributeDisplayName">
      <summary>The SAML display name attribute.</summary>
    </member>
    <member name="F:System.Security.Claims.ClaimProperties.SamlAttributeNameFormat">
      <summary>The SAML name format attribute.</summary>
    </member>
    <member name="F:System.Security.Claims.ClaimProperties.SamlNameIdentifierFormat">
      <summary>The SAML name identifier format.</summary>
    </member>
    <member name="F:System.Security.Claims.ClaimProperties.SamlNameIdentifierNameQualifier">
      <summary>A constant that defines the key for the SAML NameQualifier attribute of the SAML &lt;NameID&gt; element. The NameQualifier attribute specifies the security or administrative domain that qualifies the name.</summary>
    </member>
    <member name="F:System.Security.Claims.ClaimProperties.SamlNameIdentifierSPNameQualifier">
      <summary>A constant that defines the key for the SPNameQualifier attribute of the SAML &lt;NameID&gt; element. The SPNameQualifier attribute specifies the name of a service provider or affiliation of providers that is used to further qualify a name.</summary>
    </member>
    <member name="F:System.Security.Claims.ClaimProperties.SamlNameIdentifierSPProvidedId">
      <summary>A constant that defines the key for the SPProvidedId attribute of the SAML &lt;NameID&gt; element. The SPProvidedId attribute specifies a name identifier established by a service provider or affiliation of providers for the entity, if different from the primary name identifier.</summary>
    </member>
    <member name="T:System.Security.Claims.ClaimsAuthenticationManager">
      <summary>Defines the base implementation for a claims authentication manager. The claims authentication manager provides a place in the claims processing pipeline for applying processing logic (filtering, validation, extension) to the claims collection in the incoming principal before execution reaches your application code.</summary>
    </member>
    <member name="M:System.Security.Claims.ClaimsAuthenticationManager.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Claims.ClaimsAuthenticationManager" /> class.</summary>
    </member>
    <member name="M:System.Security.Claims.ClaimsAuthenticationManager.Authenticate(System.String,System.Security.Claims.ClaimsPrincipal)">
      <summary>When overridden in a derived class, returns a <see cref="T:System.Security.Claims.ClaimsPrincipal" /> object consistent with the requirements of the RP application. The default implementation does not modify the incoming <see cref="T:System.Security.Claims.ClaimsPrincipal" />.</summary>
      <returns>A claims principal that contains any modifications necessary for the RP application. The default implementation returns the incoming claims principal unmodified.</returns>
      <param name="resourceName">The address of the resource that is being requested.</param>
      <param name="incomingPrincipal">The claims principal that represents the authenticated user that is attempting to access the resource.</param>
    </member>
    <member name="M:System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration(System.Xml.XmlNodeList)">
      <summary>When overridden in a derived class, loads custom configuration from XML.</summary>
      <param name="nodelist">The custom configuration elements. Each node in the list is of type <see cref="T:System.Xml.XmlElement" />.</param>
    </member>
    <member name="T:System.Security.Claims.ClaimsAuthorizationManager">
      <summary>Defines the base implementation for a claims authorization manager.</summary>
    </member>
    <member name="M:System.Security.Claims.ClaimsAuthorizationManager.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Claims.ClaimsAuthorizationManager" /> class.</summary>
    </member>
    <member name="M:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess(System.Security.Claims.AuthorizationContext)">
      <summary>When implemented in a derived class, checks authorization for the subject in the specified context to perform the specified action on the specified resource.</summary>
      <returns>true if the subject is authorized to perform the specified action on the specified resource; otherwise, false.</returns>
      <param name="context">The authorization context that contains the subject, resource, and action for which authorization is to be checked.</param>
    </member>
    <member name="M:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration(System.Xml.XmlNodeList)">
      <summary>When overridden in a derived class, loads custom configuration from XML.</summary>
      <param name="nodelist">The custom configuration elements. Each node in the list is of type <see cref="T:System.Xml.XmlElement" />.</param>
    </member>
    <member name="T:System.ServiceModel.Security.BinarySecretKeyIdentifierClause">
      <summary>Represents the key identifier clause in a binary secret security token.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.BinarySecretKeyIdentifierClause.#ctor(System.Byte[])">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.BinarySecretKeyIdentifierClause" /> class using the specified key.</summary>
      <param name="key">A <see cref="T:System.Byte" /> array that represents the key.</param>
    </member>
    <member name="M:System.ServiceModel.Security.BinarySecretKeyIdentifierClause.#ctor(System.Byte[],System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.BinarySecretKeyIdentifierClause" /> class using the specified values.</summary>
      <param name="key">A <see cref="T:System.Byte" /> array that represents the key.</param>
      <param name="cloneBuffer">true to clone the buffer; otherwise, false.</param>
    </member>
    <member name="M:System.ServiceModel.Security.BinarySecretKeyIdentifierClause.#ctor(System.Byte[],System.Boolean,System.Byte[],System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.BinarySecretKeyIdentifierClause" /> class using the specified values.</summary>
      <param name="key">A <see cref="T:System.Byte" /> array that represents the key.</param>
      <param name="cloneBuffer">true to clone the buffer; otherwise, false.</param>
      <param name="derivationNonce">The "number used once" (nonce) used to derive the key.</param>
      <param name="derivationLength">The length of the key to be derived.</param>
    </member>
    <member name="P:System.ServiceModel.Security.BinarySecretKeyIdentifierClause.CanCreateKey">
      <summary>Gets a value that indicates whether this instance of the class can create a security key.</summary>
      <returns>Always true.</returns>
    </member>
    <member name="M:System.ServiceModel.Security.BinarySecretKeyIdentifierClause.CreateKey">
      <summary>Creates a security key.</summary>
      <returns>The newly created security key.</returns>
    </member>
    <member name="M:System.ServiceModel.Security.BinarySecretKeyIdentifierClause.GetKeyBytes">
      <summary>Gets an array of bytes that represents the key.</summary>
      <returns>An array of bytes that represents the key.</returns>
    </member>
    <member name="M:System.ServiceModel.Security.BinarySecretKeyIdentifierClause.Matches(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>Compares whether the key of a specified clause matches this instance's key.</summary>
      <returns>true if there is a match; otherwise, false.</returns>
      <param name="keyIdentifierClause">The <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> to match.</param>
    </member>
    <member name="T:System.ServiceModel.Security.KeyNameIdentifierClause">
      <summary>Represents the key name identifier clause in a security token.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.KeyNameIdentifierClause.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.KeyNameIdentifierClause" /> class.  </summary>
      <param name="keyName">The key name.</param>
    </member>
    <member name="P:System.ServiceModel.Security.KeyNameIdentifierClause.KeyName">
      <summary>Gets the key name.</summary>
      <returns>The key name.</returns>
    </member>
    <member name="M:System.ServiceModel.Security.KeyNameIdentifierClause.Matches(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>Checks whether a <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> matches the current instance of this class. </summary>
      <returns>true if there is a match; otherwise, false. </returns>
      <param name="keyIdentifierClause">The <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />  that is to be compared.</param>
    </member>
    <member name="M:System.ServiceModel.Security.KeyNameIdentifierClause.Matches(System.String)">
      <summary>Checks whether the specified key name matches the current instance's key name.</summary>
      <returns>true if there is a match; otherwise, false. </returns>
      <param name="keyName">The security key name clause.</param>
    </member>
    <member name="M:System.ServiceModel.Security.KeyNameIdentifierClause.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents the current Object. (Inherited from <see cref="T:System.Object" />)</summary>
      <returns>The current Object.</returns>
    </member>
    <member name="T:System.ServiceModel.Security.SecurityContextKeyIdentifierClause">
      <summary>Represents the key identifier clause for a security context token.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityContextKeyIdentifierClause.#ctor(System.Xml.UniqueId)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.SecurityContextKeyIdentifierClause" /> class using the specified context identifier.</summary>
      <param name="contextId">The unique ID of the security context.</param>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityContextKeyIdentifierClause.#ctor(System.Xml.UniqueId,System.Xml.UniqueId)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.SecurityContextKeyIdentifierClause" /> class using the specified context identifier and generation.</summary>
      <param name="contextId">A <see cref="T:System.Xml.UniqueId" /> that represents the Context ID of the security context.</param>
      <param name="generation">A <see cref="T:System.Xml.UniqueId" /> that refers to the Key generation of the Security Context Token.</param>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityContextKeyIdentifierClause.#ctor(System.Xml.UniqueId,System.Xml.UniqueId,System.Byte[],System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.SecurityContextKeyIdentifierClause" /> class with the specified values.</summary>
      <param name="contextId">The context ID part of the identifier clause.</param>
      <param name="generation">The generation part of the identifier clause.</param>
      <param name="derivationNonce">The nonce ("number used once") used to derive the token.</param>
      <param name="derivationLength">The length of the key being derived.</param>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityContextKeyIdentifierClause.ContextId">
      <summary>Gets the ID of the security context.</summary>
      <returns>The unique ID of the security context.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityContextKeyIdentifierClause.Generation">
      <summary>Gets the generation.</summary>
      <returns>The generation.</returns>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityContextKeyIdentifierClause.Matches(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>Compares a specified <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> to the current instance of the <see cref="T:System.ServiceModel.Security.SecurityContextKeyIdentifierClause" /> class.</summary>
      <returns>true if the two instances are equal; otherwise, false.</returns>
      <param name="keyIdentifierClause">The <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> to be compared.</param>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityContextKeyIdentifierClause.Matches(System.Xml.UniqueId,System.Xml.UniqueId)">
      <summary>Compares a specified <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> to the current instance of the <see cref="T:System.ServiceModel.Security.SecurityContextKeyIdentifierClause" /> class with the specified context identifier and generation.</summary>
      <returns>true if the two instances are equal; otherwise, false.</returns>
      <param name="contextId">The context ID part of the identifier clause.</param>
      <param name="generation">The generation part of the identifier clause.</param>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityContextKeyIdentifierClause.ToString">
      <summary>Provides a text representation of this instance of the class.</summary>
      <returns>A text representation of this instance of the class.</returns>
    </member>
    <member name="T:System.ServiceModel.Security.X509CertificateValidationMode">
      <summary>An enumeration that lists the ways of validating a certificate.</summary>
    </member>
    <member name="F:System.ServiceModel.Security.X509CertificateValidationMode.ChainTrust">
      <summary>The certificate is valid if the chain builds to a certification authority in the trusted root store.</summary>
    </member>
    <member name="F:System.ServiceModel.Security.X509CertificateValidationMode.Custom">
      <summary>The user must plug in a custom <see cref="T:System.IdentityModel.Selectors.X509CertificateValidator" /> to validate the certificate.</summary>
    </member>
    <member name="F:System.ServiceModel.Security.X509CertificateValidationMode.None">
      <summary>No validation of the certificate is done. </summary>
    </member>
    <member name="F:System.ServiceModel.Security.X509CertificateValidationMode.PeerOrChainTrust">
      <summary>The certificate is valid if it is in the trusted people store, or if the chain builds to a certification authority in the trusted root store.</summary>
    </member>
    <member name="F:System.ServiceModel.Security.X509CertificateValidationMode.PeerTrust">
      <summary>The certificate is valid if it is in the trusted people store.</summary>
    </member>
    <member name="T:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken">
      <summary>Represents a binary secret security token.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken.#ctor(System.Byte[])">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken" /> class.  </summary>
      <param name="key">A byte-array that represents the key.</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken" /> class.  </summary>
      <param name="keySizeInBits">The key size in bits.</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken.#ctor(System.String,System.Byte[])">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken" /> class.  </summary>
      <param name="id">The token ID.</param>
      <param name="key">A byte-array that represents the key.</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken.#ctor(System.String,System.Byte[],System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken" /> class.  </summary>
      <param name="id">The token ID.</param>
      <param name="key">A byte-array that represents the key.</param>
      <param name="allowCrypto">A <see cref="T:System.Boolean" /> that indicates whether to allow cryptography.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken.#ctor(System.String,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken" /> class.  </summary>
      <param name="id">The token ID.</param>
      <param name="keySizeInBits">The key size in bits.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Either <paramref name="keySizeInBits" /> is less than or equal to zero, or it is greater than or equal to 512, or it is not a multiple of 8.</exception>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken.#ctor(System.String,System.Int32,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken" /> class.  </summary>
      <param name="id">The token ID.</param>
      <param name="keySizeInBits">The key size in bits.</param>
      <param name="allowCrypto">A <see cref="T:System.Boolean" /> that indicates whether to allow cryptography.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Either <paramref name="keySizeInBits" /> is less than or equal to zero, or it is greater than or equal to 512, or it is not a multiple of 8.</exception>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken.GetKeyBytes">
      <summary>Gets the bytes that represent the key.</summary>
      <returns>The key.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken.Id">
      <summary>Gets the token ID.</summary>
      <returns>The token ID.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken.KeySize">
      <summary>Gets the token key size.</summary>
      <returns>The token key size.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken.SecurityKeys">
      <summary>Gets a collection of security keys.</summary>
      <returns>A collection of  <see cref="T:System.IdentityModel.Tokens.SecurityKey" />s.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken.ValidFrom">
      <summary>Gets the token effective start time.</summary>
      <returns>A <see cref="T:System.DateTime" /> that represents the token effective start time. </returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken.ValidTo">
      <summary>Gets the token effective start time.</summary>
      <returns>A <see cref="T:System.DateTime" /> that represents the token effective start time.</returns>
    </member>
    <member name="T:System.ServiceModel.Security.Tokens.WrappedKeySecurityToken">
      <summary>Represents a security token whose key is wrapped inside another token.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.WrappedKeySecurityToken.#ctor(System.String,System.Byte[],System.String,System.IdentityModel.Tokens.SecurityToken,System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.Tokens.WrappedKeySecurityToken" /> class.  </summary>
      <param name="id">The ID of the key token.</param>
      <param name="keyToWrap">The key to be wrapped.</param>
      <param name="wrappingAlgorithm">The algorithm used to do the wrapping.</param>
      <param name="wrappingToken">A <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> that represents the wrapping token.</param>
      <param name="wrappingTokenReference">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> that represents a reference to the wrapping token.</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.WrappedKeySecurityToken.CanCreateKeyIdentifierClause``1">
      <summary>Gets a value that indicates whether the token can create a key identifier clause.</summary>
      <returns>true if the token can create a key identifier clause; otherwise, false. The default is false.</returns>
      <typeparam name="T">The type of the <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.WrappedKeySecurityToken.CreateKeyIdentifierClause``1">
      <summary>Create a key identifier clause.</summary>
      <returns>The type of the <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />.</returns>
      <typeparam name="T">The type of the <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.WrappedKeySecurityToken.GetWrappedKey">
      <summary>Gets the wrapped key.</summary>
      <returns>The wrapped key.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.WrappedKeySecurityToken.Id">
      <summary>Gets the token ID.</summary>
      <returns>The token ID.</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.WrappedKeySecurityToken.MatchesKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>Compares the current security key identifier clause to a specified one for equality.</summary>
      <returns>true if the current security key identifier clause equals the specified one; otherwise, false. The default is false.</returns>
      <param name="keyIdentifierClause">The specified security key identifier clause.</param>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.WrappedKeySecurityToken.SecurityKeys">
      <summary>Gets a collection of security keys.</summary>
      <returns>A collection of <see cref="T:System.IdentityModel.Tokens.SecurityKey" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.WrappedKeySecurityToken.ValidFrom">
      <summary>Gets the token effective start date.</summary>
      <returns>A <see cref="T:System.DateTime" /> that represents the token effective start date.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.WrappedKeySecurityToken.ValidTo">
      <summary>Gets the token expiration date.</summary>
      <returns>A <see cref="T:System.DateTime" /> that represents the token expiration date.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.WrappedKeySecurityToken.WrappingAlgorithm">
      <summary>Gets the wrapping algorithm.</summary>
      <returns>A <see cref="T:System.String" /> that specifies the wrapping algorithm or the algorithm used to encrypt the symmetric key.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.WrappedKeySecurityToken.WrappingToken">
      <summary>Gets the wrapping token.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> that represents the wrapping token.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.WrappedKeySecurityToken.WrappingTokenReference">
      <summary>Gets the wrapping token reference.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> that represents a reference to the wrapping token.</returns>
    </member>
  </members>
</doc>