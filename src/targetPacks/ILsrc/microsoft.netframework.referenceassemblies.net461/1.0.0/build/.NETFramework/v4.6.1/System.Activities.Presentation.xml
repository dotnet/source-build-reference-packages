<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Activities.Presentation</name>
  </assembly>
  <members>
    <member name="T:System.Activities.Presentation.ActivityDesigner">
      <summary>Provides a base class for all activity designer components.</summary>
    </member>
    <member name="M:System.Activities.Presentation.ActivityDesigner.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Presentation.ActivityDesigner" /> class.</summary>
    </member>
    <member name="M:System.Activities.Presentation.ActivityDesigner.GetAutomationIdMemberName">
      <summary>Returns the string “DisplayName” in this overridden method implementation. </summary>
      <returns>The string “DisplayName” in this overridden method implementation.</returns>
    </member>
    <member name="M:System.Activities.Presentation.ActivityDesigner.GetAutomationItemStatus">
      <summary>Returns the status of the automation item.</summary>
      <returns>The status of the automation item.</returns>
    </member>
    <member name="P:System.Activities.Presentation.ActivityDesigner.Icon">
      <summary>Gets or sets the icon associated with this <see cref="T:System.Activities.Presentation.ActivityDesigner" />. </summary>
      <returns>Returns a <see cref="T:System.Windows.Media.DrawingBrush" /> that represents the icon associated with this <see cref="T:System.Activities.Presentation.ActivityDesigner" />.</returns>
    </member>
    <member name="F:System.Activities.Presentation.ActivityDesigner.IconProperty">
      <summary>Identifies the <see cref="F:System.Activities.Presentation.ActivityDesigner.IconProperty" /> dependency property. </summary>
    </member>
    <member name="M:System.Activities.Presentation.ActivityDesigner.OnApplyTemplate">
      <summary>Begins the process of applying a template to create an <see cref="T:System.Activities.Presentation.ActivityDesigner" />.</summary>
    </member>
    <member name="M:System.Activities.Presentation.ActivityDesigner.OnEditAnnotation">
      <summary>Begins the processing that occurs when editing annotation.</summary>
    </member>
    <member name="M:System.Activities.Presentation.ActivityDesigner.OnModelItemChanged(System.Object)">
      <summary>Begins the processing that occurs when the model item is changed..</summary>
      <param name="newItem">The new item.</param>
    </member>
    <member name="M:System.Activities.Presentation.ActivityDesigner.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Begins the processing that occurs when any mouse button is released.</summary>
      <param name="e">A <see cref="T:System.Windows.Forms.DragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Activities.Presentation.ActivityDesigner.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Begins the processing that occurs when an unhandled <see cref="T:System.Windows.Input.Mouse.PreviewMouseDown" /> attached routed event reaches an element in its route that is derived from this class.</summary>
      <param name="e">A <see cref="T:System.Windows.Forms.DragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:System.Activities.Presentation.ActivityDesignerOptionsAttribute">
      <summary>Specifies drill-down and node viewing mode for an <see cref="T:system.Activities.Presentation.ActivityDesigner" />, such as Flowcharts, that are used to compose activities.</summary>
    </member>
    <member name="M:System.Activities.Presentation.ActivityDesignerOptionsAttribute.#ctor">
      <summary>Creates an instance of the <see cref="M:System.Activities.Presentation.ActivityDesignerOptionsAttribute" /> class.</summary>
    </member>
    <member name="P:System.Activities.Presentation.ActivityDesignerOptionsAttribute.AllowDrillIn">
      <summary>Gets or sets a value that indicates whether drilling down one level into an <see cref="T:system.Activities.Presentation.ActivityDesigner" /> is allowed.</summary>
      <returns>true if drilling into the UI elements is allowed; otherwise, false. The default value is true.</returns>
    </member>
    <member name="P:System.Activities.Presentation.ActivityDesignerOptionsAttribute.AlwaysCollapseChildren">
      <summary>Gets or sets a value that indicates whether the child nodes are always collapsed.</summary>
      <returns>true if the child nodes are always collapsed; otherwise, false. The default value is false.</returns>
    </member>
    <member name="P:System.Activities.Presentation.ActivityDesignerOptionsAttribute.OutlineViewIconProvider">
      <summary>Gets or sets the function of outline view icon provider.</summary>
      <returns>The function of outline view icon provider.</returns>
    </member>
    <member name="T:System.Activities.Presentation.ArgumentAccessor">
      <summary> A class containing a get/set delegate pair to access an argument in an activity instance. </summary>
    </member>
    <member name="M:System.Activities.Presentation.ArgumentAccessor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Presentation.ArgumentAccessor" /> class.</summary>
    </member>
    <member name="P:System.Activities.Presentation.ArgumentAccessor.Getter">
      <summary>Gets or sets the method to retrieve an argument from an activity instance.</summary>
      <returns>The method to retrieve an argument from an activity instance.</returns>
    </member>
    <member name="P:System.Activities.Presentation.ArgumentAccessor.Setter">
      <summary>Gets or sets the method to set an argument into an activity instance.</summary>
      <returns>The method to set an argument into an activity instance.</returns>
    </member>
    <member name="T:System.Activities.Presentation.CachedResourceDictionaryExtension">
      <summary>Provides a cached dictionary that associates resource dictionaries with their URIs. </summary>
    </member>
    <member name="M:System.Activities.Presentation.CachedResourceDictionaryExtension.#ctor">
      <summary>Creates an instance of the <see cref="T:System.Activities.Presentation.CachedResourceDictionaryExtension" /> class.</summary>
    </member>
    <member name="M:System.Activities.Presentation.CachedResourceDictionaryExtension.ProvideValue(System.IServiceProvider)">
      <summary>Returns an object that is set as the value of the target property for this markup extension.</summary>
      <returns>The <see cref="T:System.Object" /> value to set on the property where the extension is applied.</returns>
      <param name="serviceProvider">An <see cref="T:System.IServiceProvider" /> object that can provide services for the markup extension.</param>
    </member>
    <member name="P:System.Activities.Presentation.CachedResourceDictionaryExtension.Source">
      <summary>Gets or sets the URI associated with this cached resource dictionary extension.</summary>
      <returns>The  <see cref="T:System.Uri" /> associated with this cached resource dictionary extension.</returns>
    </member>
    <member name="T:System.Activities.Presentation.ClipboardData">
      <summary>Represents the data passed around with the clipboard.</summary>
    </member>
    <member name="M:System.Activities.Presentation.ClipboardData.#ctor">
      <summary>Creates an instance of the <see cref="T:System.Activities.Presentation.ClipboardData" /> class.</summary>
    </member>
    <member name="P:System.Activities.Presentation.ClipboardData.Data">
      <summary>Gets or sets the data passed around on the clipboard.</summary>
      <returns>A <see cref="T:System.Collections.Generic.List`1" /> of type <see cref="T:System.Object" /> that contains the data passed around on the clipboard.</returns>
    </member>
    <member name="P:System.Activities.Presentation.ClipboardData.Metadata">
      <summary>Gets or sets the metadata passed around on the clipboard.</summary>
      <returns>A <see cref="T:System.Collections.Generic.List`1" /> of type <see cref="T:System.Object" /> that contains the metadata passed around on the clipboard.</returns>
    </member>
    <member name="P:System.Activities.Presentation.ClipboardData.Version">
      <summary>Gets or sets the version information passed around on the clipboard.</summary>
      <returns>The version information passed around on the clipboard.</returns>
    </member>
    <member name="T:System.Activities.Presentation.ContextItem">
      <summary>Represents a base class from which all context items must derive. This class is abstract.</summary>
    </member>
    <member name="M:System.Activities.Presentation.ContextItem.#ctor">
      <summary>Initiates a new instance of the <see cref="T:System.Activities.Presentation.ContextItem" /> class.</summary>
    </member>
    <member name="P:System.Activities.Presentation.ContextItem.ItemType">
      <summary>When implemented in a derived class, gets the type of item derived from the editing context class.</summary>
      <returns>The item <see cref="T:System.Type" />.</returns>
    </member>
    <member name="M:System.Activities.Presentation.ContextItem.OnItemChanged(System.Activities.Presentation.EditingContext,System.Activities.Presentation.ContextItem)">
      <summary>Represents a method that is called on the context item before it is stored in the context item manager. The previous item in the context item manager is passed as a parameter.</summary>
      <param name="context">The <see cref="T:System.Activities.Presentation.EditingContext" /> within which the change is being made.</param>
      <param name="previousItem">The previously active <see cref="T:System.Activities.Presentation.ContextItem" />.</param>
    </member>
    <member name="T:System.Activities.Presentation.ContextItemManager">
      <summary>Represents a class that maintains a set of context items published into the designer editing context. This class is abstract. </summary>
    </member>
    <member name="M:System.Activities.Presentation.ContextItemManager.#ctor">
      <summary>Initiates a new instance of the <see cref="T:System.Activities.Presentation.ContextItemManager" /> class.</summary>
    </member>
    <member name="M:System.Activities.Presentation.ContextItemManager.Contains``1">
      <summary>Returns a value that indicates whether the item manager contains an item of the specified type.</summary>
      <returns>true if the context contains an instance of the specified item type; otherwise, false.</returns>
      <typeparam name="TItemType">The type of item to check for.</typeparam>
    </member>
    <member name="M:System.Activities.Presentation.ContextItemManager.Contains(System.Type)">
      <summary>When overridden in a derived class, returns a value that indicates whether the item manager contains an item of the specified type.</summary>
      <returns>true if the context contains an instance of the specified item type; otherwise, false.</returns>
      <param name="itemType">The type of item to check for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="itemType" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Presentation.ContextItemManager.GetEnumerator">
      <summary>When overridden in a derived class, enumerates the context items in the editing context. This enumeration includes prior layers unless the enumerator hits an isolated layer.</summary>
      <returns>Returns <see cref="T:System.Collections.Generic.IEnumerator`1" />, which contains an enumeration of context items.</returns>
    </member>
    <member name="M:System.Activities.Presentation.ContextItemManager.GetTarget(System.Delegate)">
      <summary>Represents a helper method that returns the target object for a delegate. If the delegate was created to proxy a generic delegate, this method returns the original object, not the proxy.</summary>
      <returns>Returns <see cref="T:System.Object" />, which contains the target object of the callback.</returns>
      <param name="callback">The callback for the desired target.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Presentation.ContextItemManager.GetValue``1">
      <summary>Returns an instance of the requested item type. If there is no context item with the given type, an empty item will be created.</summary>
      <returns>Returns <see cref="T:System.Activities.Presentation.ContextItem" />, which contains a context item of the requested type. If there is no item in the context for this type, a default one is created.</returns>
      <typeparam name="TItemType">The type of item to return.</typeparam>
    </member>
    <member name="M:System.Activities.Presentation.ContextItemManager.GetValue(System.Type)">
      <summary>When overridden in a derived class, returns an instance of the requested item type. If there is no context item with the given type, an empty item will be created.</summary>
      <returns>Returns <see cref="T:System.Activities.Presentation.ContextItem" />, which contains a context item of the requested type. If there is no item in the context for this type, a default one is created.</returns>
      <param name="itemType">The type of item to return.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="itemType" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Presentation.ContextItemManager.NotifyItemChanged(System.Activities.Presentation.EditingContext,System.Activities.Presentation.ContextItem,System.Activities.Presentation.ContextItem)">
      <summary>Represents a helper method that invokes the protected <see cref="M:System.Activities.Presentation.ContextItem.OnItemChanged(System.Activities.Presentation.EditingContext,System.Activities.Presentation.ContextItem)" /> method. </summary>
      <param name="context">The <see cref="T:System.Activities.Presentation.EditingContext" /> in use.</param>
      <param name="item">The new <see cref="T:System.Activities.Presentation.ContextItem" />.</param>
      <param name="previousItem">The previous <see cref="T:System.Activities.Presentation.ContextItem" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" />, <paramref name="item" />, or <paramref name="previousItem" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Presentation.ContextItemManager.RemoveCallback(System.Delegate,System.Delegate)">
      <summary>Represents a helper method that performs delegate removals and that unwraps delegates that are proxies to generic callbacks. </summary>
      <returns>Returns <see cref="T:System.Delegate" />, which contains the new delegate that should be assigned to <paramref name="existing" />.</returns>
      <param name="existing">The existing delegate.</param>
      <param name="toRemove">The delegate to be removed from <paramref name="existing" />.</param>
    </member>
    <member name="M:System.Activities.Presentation.ContextItemManager.SetValue(System.Activities.Presentation.ContextItem)">
      <summary>When overridden in a derived class, sets a context item to the specified value. </summary>
      <param name="value">The value to set into the <see cref="T:System.Activities.Presentation.ContextItem)" />.</param>
    </member>
    <member name="M:System.Activities.Presentation.ContextItemManager.Subscribe``1(System.Activities.Presentation.SubscribeContextCallback{``0})">
      <summary>Adds an event callback that is invoked when a context item of the specified item type changes.</summary>
      <param name="callback">A <see cref="T:System.Activities.Presentation.SubscribeContextCallback`1" /> that is invoked when <paramref name="contextItemType" /> changes.</param>
      <typeparam name="TContextItemType">The type of item you want to subscribe to.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contextItemType" /> or <paramref name="callback" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Presentation.ContextItemManager.Subscribe(System.Type,System.Activities.Presentation.SubscribeContextCallback)">
      <summary>When overridden in a derived class, adds an event callback that is invoked when a context item of the specified item type changes.</summary>
      <param name="contextItemType">The type of item you want to subscribe to.</param>
      <param name="callback">The <see cref="T:System.Activities.Presentation.SubscribeContextCallback" /> that is invoked when <paramref name="contextItemType" /> changes.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contextItemType" /> or <paramref name="callback" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Presentation.ContextItemManager.System#Collections#IEnumerable#GetEnumerator">
      <summary>Enumerates the context items in the editing context.</summary>
      <returns>Returns <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="M:System.Activities.Presentation.ContextItemManager.Unsubscribe``1(System.Activities.Presentation.SubscribeContextCallback{``0})">
      <summary>Removes a subscription.</summary>
      <param name="callback">The <see cref="T:System.Activities.Presentation.SubscribeContextCallback`1" /> to remove.</param>
      <typeparam name="TContextItemType">The type of context item to remove the callback from.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Presentation.ContextItemManager.Unsubscribe(System.Type,System.Activities.Presentation.SubscribeContextCallback)">
      <summary>When overridden in a derived class, removes a subscription.</summary>
      <param name="contextItemType"> The type of context item to remove the callback from.</param>
      <param name="callback">The <see cref="T:System.Activities.Presentation.SubscribeContextCallback" />  to remove.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> is null.</exception>
    </member>
    <member name="T:System.Activities.Presentation.CutCopyPasteHelper">
      <summary>Provides functions to cut, copy, and paste items.</summary>
    </member>
    <member name="M:System.Activities.Presentation.CutCopyPasteHelper.CanCopy(System.Activities.Presentation.EditingContext)">
      <summary>Verifies whether items can be copied from the specified editing context.</summary>
      <returns>true if the number of the selected objects is more than 0 and <paramref name="context" /> is not null; otherwise, false.</returns>
      <param name="context">The editing context to be verified.</param>
    </member>
    <member name="M:System.Activities.Presentation.CutCopyPasteHelper.CanCut(System.Activities.Presentation.EditingContext)">
      <summary>Verifies whether items can be cut from the specified editing context.</summary>
      <returns>true if the number of the selected objects is more than 0 and <paramref name="context" /> is not null; otherwise, false.</returns>
      <param name="context">The editing context to be verified.</param>
    </member>
    <member name="M:System.Activities.Presentation.CutCopyPasteHelper.CanPaste(System.Activities.Presentation.EditingContext)">
      <summary>Returns a Boolean that indicates whether the specified objects can be pasted. </summary>
      <returns>true if the number of the specified objects is more than 0 and not null; otherwise, false.</returns>
      <param name="context">The editing context for the paste operation.</param>
    </member>
    <member name="M:System.Activities.Presentation.CutCopyPasteHelper.DoCopy(System.Activities.Presentation.EditingContext)">
      <summary>Copies the currently selected items from the specified editing context to the clipboard.</summary>
      <param name="context">The editing context from which items are copied.</param>
    </member>
    <member name="M:System.Activities.Presentation.CutCopyPasteHelper.DoCut(System.Activities.Presentation.EditingContext)">
      <summary>Deletes the currently selected items from an editing context.</summary>
      <param name="context">The editing context from which items are removed.</param>
    </member>
    <member name="M:System.Activities.Presentation.CutCopyPasteHelper.DoPaste(System.Activities.Presentation.EditingContext)">
      <summary>Pastes items in the clipboard in a default location in the specified editing context. </summary>
      <param name="context">The editing context to which items are pasted.</param>
    </member>
    <member name="T:System.Activities.Presentation.DefaultTypeArgumentAttribute">
      <summary>Specifies the default type for a generic type activity. </summary>
    </member>
    <member name="M:System.Activities.Presentation.DefaultTypeArgumentAttribute.#ctor(System.Type)">
      <summary>Creates an instance of the <see cref="T:System.Activities.Presentation.DefaultTypeArgumentAttribute" /> class with a specified default type.</summary>
      <param name="type">The default <see cref="T:System.Type" /> for generic parameters.</param>
    </member>
    <member name="P:System.Activities.Presentation.DefaultTypeArgumentAttribute.Type">
      <summary>Gets the type stored by the <see cref="T:System.Activities.Presentation.DefaultTypeArgumentAttribute" />.</summary>
      <returns>The <see cref="T:System.Type" /> stored as a default for generic parameters.</returns>
    </member>
    <member name="T:System.Activities.Presentation.DesignerConfigurationService">
      <summary>Provides configuration options for the workflow designer.</summary>
    </member>
    <member name="P:System.Activities.Presentation.DesignerConfigurationService.AnnotationEnabled">
      <summary>Gets or sets a value that indicates whether the annotation is enabled for the Flowchart designer and the StateMachine designer.</summary>
      <returns>true if the annotation is enabled; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Presentation.DesignerConfigurationService.AutoConnectEnabled">
      <summary>Gets or sets a value that indicates whether auto-connect is enabled for the Flowchart designer and the StateMachine designer.</summary>
      <returns>true if auto-connect is enabled for the Flowchart designer and the StateMachine designer; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Presentation.DesignerConfigurationService.AutoSplitEnabled">
      <summary>Gets or sets a value that indicates whether auto-split is enabled for the Flowchart designer and the StateMachine designer.</summary>
      <returns>true if auto-split is enabled for the Flowchart designer and the StateMachine designer; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Presentation.DesignerConfigurationService.AutoSurroundWithSequenceEnabled">
      <summary>Gets or sets a value that indicates whether auto-surround with sequence is enabled.</summary>
      <returns>true if auto-surround with sequence is enabled; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Presentation.DesignerConfigurationService.BackgroundValidationEnabled">
      <summary>Gets or sets a value that indicates whether background validation is enabled.</summary>
      <returns>true if background validation is enabled; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Presentation.DesignerConfigurationService.LoadingFromUntrustedSourceEnabled">
      <summary>Gets or sets a value that indicates whether loading from untrusted source is enabled.</summary>
      <returns>true if loading from untrusted source is enabled; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Presentation.DesignerConfigurationService.MultipleItemsContextMenuEnabled">
      <summary>Gets or sets a value that indicates whether multiple items context menu is enabled.</summary>
      <returns>true if multiple items context menu is enabled; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Presentation.DesignerConfigurationService.MultipleItemsDragDropEnabled">
      <summary>Gets or sets a value that indicates whether multiple items drag-and-drop operation is enabled.</summary>
      <returns>true if multiple items drag-and-drop operation is enabled; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Presentation.DesignerConfigurationService.NamespaceConversionEnabled">
      <summary>Gets or sets a value that indicates whether namespace conversion is enabled.</summary>
      <returns>true if namespace conversion is enabled; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Presentation.DesignerConfigurationService.PanModeEnabled">
      <summary>Gets or sets a value that indicates whether pan mode is enabled.</summary>
      <returns>true if pan mode is enabled; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Presentation.DesignerConfigurationService.RubberBandSelectionEnabled">
      <summary>Gets or sets a value that indicates whether rubber band selection is enabled.</summary>
      <returns>true if rubber band selection is enabled; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Presentation.DesignerConfigurationService.TargetFrameworkName">
      <summary>Gets or sets the name of the target .NET Framework.</summary>
      <returns>The name of the target .NET Framework.</returns>
    </member>
    <member name="T:System.Activities.Presentation.DragDropHelper">
      <summary>Represents a helper class to assist dragging and dropping inside the Windows Workflow Designer.</summary>
    </member>
    <member name="M:System.Activities.Presentation.DragDropHelper.AllowDrop(System.Windows.IDataObject,System.Activities.Presentation.EditingContext,System.Type[])">
      <summary>Indicates whether the designer can accept data that the user drags onto it.</summary>
      <returns>true if drag-and-drop operations are allowed in the designer; otherwise, false.</returns>
      <param name="draggedDataObject">The data object that is being dragged.</param>
      <param name="context">The <see cref="T:System.Activities.Presentation.EditingContext" /> for the DragDropHelper.</param>
      <param name="allowedItemTypes">The types that are allowed to be dragged.</param>
    </member>
    <member name="F:System.Activities.Presentation.DragDropHelper.CompletedEffectsFormat">
      <summary>Specifies the desired effects of the completion of a drag-and-drop operation.</summary>
    </member>
    <member name="F:System.Activities.Presentation.DragDropHelper.CompositeViewFormat">
      <summary>Contains a unique data format name for a composite view.</summary>
    </member>
    <member name="M:System.Activities.Presentation.DragDropHelper.DoDragMove(System.Activities.Presentation.WorkflowViewElement,System.Windows.Point)">
      <summary>Allows a UI element to be dragged by a mouse with its left button down over an exposed area of the UI element’s client area.
</summary>
      <returns>A value from the <see cref="T:System.Windows.DragDropEffects" /> enumeration that represents the final effect that was performed during the drag-and-drop operation.</returns>
      <param name="draggedViewElement">The UI element on which the operation happens.</param>
      <param name="referencePoint">The location of the drag point.</param>
    </member>
    <member name="F:System.Activities.Presentation.DragDropHelper.DragAnchorPointFormat">
      <summary>Specifies the format for a drag operation anchor point.</summary>
    </member>
    <member name="F:System.Activities.Presentation.DragDropHelper.DragSourceProperty">
      <summary>Specifies the drag source.</summary>
    </member>
    <member name="M:System.Activities.Presentation.DragDropHelper.GetCompositeView(System.Activities.Presentation.WorkflowViewElement)">
      <summary>Retrieves the composite view information from the specified workflow view element.</summary>
      <returns>An element that contains user interface data.</returns>
      <param name="workflowViewElement">The <see cref="T:System.Activities.Presentation.WorkflowViewElement" /> that supplies the composite view data.</param>
    </member>
    <member name="M:System.Activities.Presentation.DragDropHelper.GetCompositeView(System.Windows.DragEventArgs)">
      <summary>Retrieves the composite view information from the specified drag event arguments.</summary>
      <returns>The composite view information.</returns>
      <param name="e">An event raised when the user performs a drag operation.</param>
    </member>
    <member name="M:System.Activities.Presentation.DragDropHelper.GetDragDropAnchorPoint(System.Windows.DragEventArgs)">
      <summary>Retrieves the anchor point for a drag-and-drop operation.</summary>
      <returns>The anchor point.</returns>
      <param name="e">The drag event data.</param>
    </member>
    <member name="M:System.Activities.Presentation.DragDropHelper.GetDragDropCompletedEffects(System.Windows.DataObject)">
      <summary>Returns the outcome of the drag-and-drop operation whose behavior is determined by the specified <see cref="T:System.Windows.DataObject" />.</summary>
      <returns>An enumerated process.</returns>
      <param name="data">An object that contains data that contains effects of a drag-and-drop operation.</param>
    </member>
    <member name="M:System.Activities.Presentation.DragDropHelper.GetDraggedModelItem(System.Windows.DragEventArgs)">
      <summary>Retrieves the object that is being dragged in a drag-and-drop operation.</summary>
      <returns>The model item that was dragged.</returns>
      <param name="e">The drag event data.</param>
    </member>
    <member name="M:System.Activities.Presentation.DragDropHelper.GetDraggedModelItems(System.Windows.DragEventArgs)">
      <summary>Retrieves the model items that are being dragged in a drag-and-drop operation.</summary>
      <returns>The model items that were dragged.</returns>
      <param name="e">The drag event data.</param>
    </member>
    <member name="M:System.Activities.Presentation.DragDropHelper.GetDroppedObject(System.Windows.DependencyObject,System.Windows.DragEventArgs,System.Activities.Presentation.EditingContext)">
      <summary>Retrieves the object that is being dropped in a drag-and-drop operation.</summary>
      <returns>The object that was dropped.</returns>
      <param name="dropTarget">The location for the drag.</param>
      <param name="e">The drag event data.</param>
      <param name="context">The editing context.</param>
    </member>
    <member name="M:System.Activities.Presentation.DragDropHelper.GetDroppedObjects(System.Windows.DependencyObject,System.Windows.DragEventArgs,System.Activities.Presentation.EditingContext)">
      <summary>Retrieves the objects that are being dropped in a drag-and-drop operation.</summary>
      <returns>The objects that were dropped.</returns>
      <param name="dropTarget">The location for the drag.</param>
      <param name="e">The drag event data.</param>
      <param name="context">The editing context.</param>
    </member>
    <member name="F:System.Activities.Presentation.DragDropHelper.ModelItemDataFormat">
      <summary>Specifies the format for model item data.</summary>
    </member>
    <member name="M:System.Activities.Presentation.DragDropHelper.SetCompositeView(System.Activities.Presentation.WorkflowViewElement,System.Windows.UIElement)">
      <summary>Sets the composite view from the specified workflow view element and drag source.</summary>
      <param name="workflowViewElement">The <see cref="T:System.Activities.Presentation.WorkflowViewElement" /> that supplies the composite view data.</param>
      <param name="dragSource">A user interface type of element that indicates the drag source.</param>
    </member>
    <member name="M:System.Activities.Presentation.DragDropHelper.SetDragDropCompletedEffects(System.Windows.DragEventArgs,System.Windows.DragDropEffects)">
      <summary>Sets the final effect that is to be performed during the drag-and-drop operation.
</summary>
      <param name="e">The drag event data.</param>
      <param name="completedEffects">The desired effects of a drag-and-drop operation.</param>
    </member>
    <member name="F:System.Activities.Presentation.DragDropHelper.WorkflowItemTypeNameFormat">
      <summary>Specifies the format for the type name of a workflow item.</summary>
    </member>
    <member name="T:System.Activities.Presentation.EditingContext">
      <summary>Contains contextual state information for a designer, such as the <see cref="T:System.Activities.Presentation.WorkflowDesigner" />. This includes permanent state information, such as the list of services running in the designer. It also includes transient state consisting of context items including the set of currently selected objects as well as the editing tool being used to manipulate objects on the design surface.</summary>
    </member>
    <member name="M:System.Activities.Presentation.EditingContext.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Presentation.EditingContext" /> class.</summary>
    </member>
    <member name="M:System.Activities.Presentation.EditingContext.CreateContextItemManager">
      <summary>Creates an instance of the context item manager that is returned by the <see cref="P:System.Activities.Presentation.EditingContext.Items" /> property.</summary>
      <returns>
        <see cref="T:System.Activites.Design.ContextItemManager" />.
</returns>
    </member>
    <member name="M:System.Activities.Presentation.EditingContext.CreateServiceManager">
      <summary>Creates an instance of the service manager to be returned from the <see cref="P:System.Activities.Presentation.EditingContext.Services" /> property.</summary>
      <returns> A <see cref="T:System.WorkflowModel.Design.ServiceManager" /> object.</returns>
    </member>
    <member name="M:System.Activities.Presentation.EditingContext.Dispose">
      <summary>Immediately releases any unmanaged resources used by the object.</summary>
    </member>
    <member name="M:System.Activities.Presentation.EditingContext.Dispose(System.Boolean)">
      <summary>Immediately releases the unmanaged resources used by the current <see cref="T:System.Activities.Presentation.EditingContext" /> object.</summary>
      <param name="disposing">true if this object is being disposed of; false if the object is finalizing.</param>
    </member>
    <member name="E:System.Activities.Presentation.EditingContext.Disposing">
      <summary>Occurs when the <see cref="T:System.IDisposable.Dispose" /> method is called or when the <see cref="T:System.Activities.Presentation.EditingContext" /> object is finalized and collected by the garbage collector of the Microsoft .NET common language runtime.</summary>
    </member>
    <member name="P:System.Activities.Presentation.EditingContext.Items">
      <summary>Returns the local collection of context items stored by the current editing context.</summary>
      <returns>The <see cref="T:System.Activities.Presentation.ContextItemManager" /> collection of <see cref="T:System.Activities.Presentation.ContextItem" /> objects used in this editing context.</returns>
    </member>
    <member name="P:System.Activities.Presentation.EditingContext.Services">
      <summary>Returns the service manager used in the current editing context.</summary>
      <returns>The <see cref="T:System.Activities.Presentation.ServiceManager" /> used in this editing context.</returns>
    </member>
    <member name="T:System.Activities.Presentation.IActivityTemplateFactory">
      <summary>Defines the factory method that a class implements to create a template that encapsulates "placeholder" <see cref="T:System.Activities.Activity" /> objects.</summary>
    </member>
    <member name="M:System.Activities.Presentation.IActivityTemplateFactory.Create(System.Windows.DependencyObject)">
      <summary>Creates an instance of the <see cref="T:System.Activities.Activity" /> class that represents a predefined design pattern for the specified target object.</summary>
      <returns>A workflow   <see cref="T:System.Activities.Activity" />.</returns>
      <param name="target">The dependency object used by this instance of an <see cref="T:System.Activities.Presentation.IActivityTemplateFactory" />.</param>
    </member>
    <member name="T:System.Activities.Presentation.IActivityTemplateFactory`1">
      <summary>Represents the generic IActivityTemplateFactory.</summary>
      <typeparam name="T">The type this factory is created.</typeparam>
    </member>
    <member name="M:System.Activities.Presentation.IActivityTemplateFactory`1.Create(System.Windows.DependencyObject,System.Windows.IDataObject)">
      <summary>Creates an instance of the activity class that represents a predefined design pattern for the specified target object.</summary>
      <returns>An instance of the activity class.</returns>
      <param name="target">The dependency object used by this instance of an <see cref="T:System.Activities.Presentation.IActivityTemplateFactory" />.</param>
      <param name="dataObject">The data object in the activity.</param>
    </member>
    <member name="T:System.Activities.Presentation.IActivityToolboxService">
      <summary>Represents a service used to update Toolbox contents from a Designer. </summary>
    </member>
    <member name="M:System.Activities.Presentation.IActivityToolboxService.AddCategory(System.String)">
      <summary>Adds a category to the toolbox.</summary>
      <param name="categoryName">A string that contains the name of the category to be added.</param>
    </member>
    <member name="M:System.Activities.Presentation.IActivityToolboxService.AddItem(System.String,System.String)">
      <summary>Adds an item to a specific category in the toolbox.</summary>
      <param name="qualifiedTypeName">A string that contains the qualified name of the item to be added.</param>
      <param name="categoryName">A string that contains the name of the category to which the new item is added.</param>
    </member>
    <member name="M:System.Activities.Presentation.IActivityToolboxService.EnumCategories">
      <summary>Gets an enumerator for all the categories in this toolbox.</summary>
      <returns>Returns <see cref="T:System.Collections.Generic.IList`1" />.</returns>
    </member>
    <member name="M:System.Activities.Presentation.IActivityToolboxService.EnumItems(System.String)">
      <summary>Gets an enumerator for all the items under the specified category in this toolbox.</summary>
      <returns>Returns <see cref="T:System.Collections.Generic.IList`1" />.</returns>
      <param name="categoryName">A category under which all the items will be returned.</param>
    </member>
    <member name="M:System.Activities.Presentation.IActivityToolboxService.RemoveCategory(System.String)">
      <summary>Removes a category from the toolbox.</summary>
      <param name="categoryName">A string that contains the name of the category to be removed.</param>
    </member>
    <member name="M:System.Activities.Presentation.IActivityToolboxService.RemoveItem(System.String,System.String)">
      <summary>Removes an item from a specific category in the toolbox.</summary>
      <param name="qualifiedTypeName">A string that contains the qualified name of the item to be removed.</param>
      <param name="categoryName">A string that contains the name of the category from which the item is removed.</param>
    </member>
    <member name="T:System.Activities.Presentation.ICompositeView">
      <summary>Provides methods to copy, cut, move, delete, and paste objects. </summary>
    </member>
    <member name="M:System.Activities.Presentation.ICompositeView.CanPasteItems(System.Collections.Generic.List{System.Object})">
      <summary>Returns a value that indicates whether the specified objects can be pasted.</summary>
      <returns>true if the specified objects can be pasted; otherwise, false.</returns>
      <param name="itemsToPaste">A list of items to be pasted.</param>
    </member>
    <member name="P:System.Activities.Presentation.ICompositeView.DroppingTypeResolvingOptions">
      <summary>Gets or sets the object for resolving types used by the <see cref="T:System.Activities.Presentation.View.TypePresenter" />. </summary>
      <returns>The object for resolving types used by the <see cref="T:System.Activities.Presentation.View.TypePresenter" />.</returns>
    </member>
    <member name="P:System.Activities.Presentation.ICompositeView.IsDefaultContainer">
      <summary>Gets a value that indicates whether the current designer is the default container.</summary>
      <returns>true if the current designer is the default container; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.Presentation.ICompositeView.OnItemMoved(System.Activities.Presentation.Model.ModelItem)">
      <summary>Invoked after the start of a move operation to complete the moving of the specified item.</summary>
      <param name="modelItem">The item to move.</param>
    </member>
    <member name="M:System.Activities.Presentation.ICompositeView.OnItemsCopied(System.Collections.Generic.List{System.Activities.Presentation.Model.ModelItem})">
      <summary>Invoked after the start of a copy operation to complete the copying of the specified items.</summary>
      <returns>The items cloned from the specified items.</returns>
      <param name="itemsToCopy">The items to copy.</param>
    </member>
    <member name="M:System.Activities.Presentation.ICompositeView.OnItemsCut(System.Collections.Generic.List{System.Activities.Presentation.Model.ModelItem})">
      <summary>Invoked after the start of a cut operation to complete the cutting of the specified items.</summary>
      <returns>The items cloned from the specified items.</returns>
      <param name="itemsToCut">The items to cut.</param>
    </member>
    <member name="M:System.Activities.Presentation.ICompositeView.OnItemsDelete(System.Collections.Generic.List{System.Activities.Presentation.Model.ModelItem})">
      <summary>Invoked after the start of a delete operation to complete the deletion of the specified items.</summary>
      <param name="itemsToDelete">The items to delete.</param>
    </member>
    <member name="M:System.Activities.Presentation.ICompositeView.OnItemsPasted(System.Collections.Generic.List{System.Object},System.Collections.Generic.List{System.Object},System.Windows.Point,System.Activities.Presentation.WorkflowViewElement)">
      <summary>Invoked after the start of a paste operation to complete the pasting of the specified items.</summary>
      <param name="itemsToPaste">The items to paste.</param>
      <param name="metadata">The metadata associated with the items to paste.</param>
      <param name="pastePoint">The location where to paste the items.</param>
      <param name="pastePointReference">A reference to the paste location.</param>
    </member>
    <member name="T:System.Activities.Presentation.ICompositeViewEvents">
      <summary>Handles events that can occur during the display of <see cref="T:System.Activities.Presentation.ICompositeView" /> items.</summary>
    </member>
    <member name="M:System.Activities.Presentation.ICompositeViewEvents.RegisterCompositeView(System.Activities.Presentation.ICompositeView)">
      <summary>Registers the custom controls that are viewed during execution of a composite application.</summary>
      <param name="container">An object that contains the custom controls to be registered.</param>
    </member>
    <member name="M:System.Activities.Presentation.ICompositeViewEvents.RegisterDefaultCompositeView(System.Activities.Presentation.ICompositeView)">
      <summary>Registers the default controls that are viewed during execution of a composite application.</summary>
      <param name="container">An object that contains the default controls to be registered.</param>
    </member>
    <member name="M:System.Activities.Presentation.ICompositeViewEvents.UnregisterCompositeView(System.Activities.Presentation.ICompositeView)">
      <summary>Unregisters the custom controls that are viewed during execution of a composite application.</summary>
      <param name="container">An object that contains the custom controls to be unregistered.</param>
    </member>
    <member name="M:System.Activities.Presentation.ICompositeViewEvents.UnregisterDefaultCompositeView(System.Activities.Presentation.ICompositeView)">
      <summary>Unregisters the default controls that are viewed during execution of a composite application.</summary>
      <param name="container">An object that contains the default controls to be unregistered.</param>
    </member>
    <member name="T:System.Activities.Presentation.IIntegratedHelpService">
      <summary>Defines the contract between Visual Studio 2010 and the Windows Workflow Designer for integrated help provided. </summary>
    </member>
    <member name="M:System.Activities.Presentation.IIntegratedHelpService.AddContextAttribute(System.String,System.String,System.ComponentModel.Design.HelpKeywordType)">
      <summary>Adds the context attribute.</summary>
      <param name="name">The name of the context attribute to add.</param>
      <param name="value">The value of the context attribute to add.</param>
      <param name="keywordType">The <see cref="E:System.ComponentModel.Design.HelpKeywordType" /> that contains identifiers that indicate the type of a Help keyword.</param>
    </member>
    <member name="M:System.Activities.Presentation.IIntegratedHelpService.RemoveContextAttribute(System.String,System.String)">
      <summary>Removes the context attribute.</summary>
      <param name="name">The name of the context attribute to remove.</param>
      <param name="value">The value of the context attribute to remove.</param>
    </member>
    <member name="M:System.Activities.Presentation.IIntegratedHelpService.ShowHelpFromKeyword(System.String)">
      <summary>Shows the Help topic that corresponds to the specified keyword.</summary>
      <param name="helpKeyword">The keyword of the Help topic to display.</param>
    </member>
    <member name="M:System.Activities.Presentation.IIntegratedHelpService.ShowHelpFromUrl(System.String)">
      <summary>Shows the Help topic that corresponds to the specified URL.</summary>
      <param name="helpUrl">The URL of the Help topic to display.</param>
    </member>
    <member name="T:System.Activities.Presentation.IModalService">
      <summary>Enables notification to a host application that a modal dialog is displayed.</summary>
    </member>
    <member name="M:System.Activities.Presentation.IModalService.SetModalState(System.Boolean)">
      <summary>Notifies the host application that a modal dialog is being displayed.</summary>
      <param name="isModal">If set to true, a modal dialog is being displayed. </param>
    </member>
    <member name="T:System.Activities.Presentation.IMultipleDragEnabledCompositeView">
      <summary>An extension interface for ICompositeView to better support multiple drag/drop.</summary>
    </member>
    <member name="M:System.Activities.Presentation.IMultipleDragEnabledCompositeView.OnItemsMoved(System.Collections.Generic.List{System.Activities.Presentation.Model.ModelItem})">
      <summary>After drag/drop, the source container will be notified which items are moved out. After implement this interface, ICompositeView.OnItemMoved will not be called even in single element drag/drop.</summary>
      <param name="movedItems">Moved items.</param>
    </member>
    <member name="M:System.Activities.Presentation.IMultipleDragEnabledCompositeView.SortSelectedItems(System.Collections.Generic.List{System.Activities.Presentation.Model.ModelItem})">
      <summary>Represents a method that will be used when item order is needed.</summary>
      <returns>Sorted items.</returns>
      <param name="selectedItems">Selected items to sort.</param>
    </member>
    <member name="T:System.Activities.Presentation.IWorkflowDesignerStorageService">
      <summary>Provides a service available to the Windows Workflow Designer host to store and retrieve data.</summary>
    </member>
    <member name="M:System.Activities.Presentation.IWorkflowDesignerStorageService.AddData(System.String,System.Object)">
      <summary>Adds the specified key/value pair to the dictionary.</summary>
      <param name="key">The key of the data to add.</param>
      <param name="value">The data associated with the specified key.</param>
    </member>
    <member name="M:System.Activities.Presentation.IWorkflowDesignerStorageService.ContainsKey(System.String)">
      <summary>Returns a value that indicates whether the dictionary contains an item with the specified key.</summary>
      <returns>true if the dictionary contains an item with the specified key; otherwise, false.</returns>
      <param name="key">The key to check.</param>
    </member>
    <member name="M:System.Activities.Presentation.IWorkflowDesignerStorageService.GetData(System.String)">
      <summary>Returns the data associated with the specified key.</summary>
      <returns>The data associated with the specified key.</returns>
      <param name="key">The key to get the data for.</param>
    </member>
    <member name="M:System.Activities.Presentation.IWorkflowDesignerStorageService.RemoveData(System.String)">
      <summary>Removes the data associated with the specified key from the dictionary.</summary>
      <param name="key">The key whose data is to be removed.</param>
    </member>
    <member name="M:System.Activities.Presentation.IWorkflowDesignerStorageService.SetData(System.String,System.Object)">
      <summary>Updates the data for an existing dictionary item identified by the specified key.</summary>
      <param name="key">They key of the item to update the value of.</param>
      <param name="value">The data to update the item with.</param>
    </member>
    <member name="T:System.Activities.Presentation.IXamlLoadErrorService">
      <summary>Defines how the Visual Studio host displays the list of errors generated by the XAML reader when loading the XAML file.</summary>
    </member>
    <member name="M:System.Activities.Presentation.IXamlLoadErrorService.ShowXamlLoadErrors(System.Collections.Generic.IList{System.Activities.Presentation.XamlLoadErrorInfo})">
      <summary>Displays the list of errors in the Visual Studio host.</summary>
      <param name="errors">The <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:System.Activities.Presentation.XamlLoadErrorInfo" /> instances generated by the reader when loading a XAML file.</param>
    </member>
    <member name="T:System.Activities.Presentation.ObjectReferenceService">
      <summary> This interface is used by Visual Studio integration to acquire an AppDomain serialization friendly reference to an object. </summary>
    </member>
    <member name="M:System.Activities.Presentation.ObjectReferenceService.#ctor(System.Activities.Presentation.EditingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Presentation.ObjectReferenceService" /> class with a specified editing context </summary>
      <param name="context">The EditingContext of the current WorkflowDesigner.</param>
    </member>
    <member name="M:System.Activities.Presentation.ObjectReferenceService.AcquireObjectReference(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Acquires a reference by the SourceLocation of the object and this method will automatically register the object to listen to SourceLocationUpdatedEvent, if available.</summary>
      <returns>A reference by the SourceLocation of the object</returns>
      <param name="startLine">The start line of the object.</param>
      <param name="startColumn">The start column of the object.</param>
      <param name="endLine">The end line of the object.</param>
      <param name="endColumn">The end column of the object.</param>
    </member>
    <member name="M:System.Activities.Presentation.ObjectReferenceService.AcquireObjectReference(System.Object)">
      <summary>Acquires a reference of an object by its actual reference.</summary>
      <returns>A reference of an object.</returns>
      <param name="obj">The object which we need to acquire a reference for.</param>
    </member>
    <member name="M:System.Activities.Presentation.ObjectReferenceService.ReleaseObjectReference(System.Guid)">
      <summary>Allows the designer infrastructure to release the actual reference to the activity and avoids memory leak. </summary>
      <param name="objectReferenceId">The activity reference.</param>
    </member>
    <member name="E:System.Activities.Presentation.ObjectReferenceService.SourceLocationUpdated"></member>
    <member name="M:System.Activities.Presentation.ObjectReferenceService.TryGetObject(System.Guid,System.Object@)">
      <summary>Obtains the actual reference to the object by its ObjectReference.</summary>
      <returns>True if the actual reference to the object is obtained by the object reference; otherwise, false.</returns>
      <param name="objectReferenceId">The activity reference.</param>
      <param name="obj">The de-referenced activity, if the reference is available, or null otherwise.</param>
    </member>
    <member name="T:System.Activities.Presentation.PublishServiceCallback">
      <summary>A delegate that references a method that publishes an instance of a service.</summary>
      <returns>An instance of the published service. </returns>
      <param name="serviceType">The type of the service to publish.</param>
    </member>
    <member name="T:System.Activities.Presentation.PublishServiceCallback`1">
      <summary>A generic delegate that references a method that publishes an instance of a service.</summary>
      <returns>An instance of the published service. </returns>
      <typeparam name="TServiceType">The type of the service to publish.</typeparam>
    </member>
    <member name="T:System.Activities.Presentation.ServiceManager">
      <summary>Implements <see cref="T:System.IserviceProvider" /> and provides access to services offered by the editing context.</summary>
    </member>
    <member name="M:System.Activities.Presentation.ServiceManager.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Presentation.ServiceManager" /> class.</summary>
    </member>
    <member name="M:System.Activities.Presentation.ServiceManager.Contains``1">
      <summary>Returns a Boolean value that indicates whether the service manager contains a service of the given type.</summary>
      <returns>true if a service of type <paramref name="serviceType" /> has been published; otherwise, false.</returns>
      <typeparam name="TServiceType">The type of service to check.</typeparam>
    </member>
    <member name="M:System.Activities.Presentation.ServiceManager.Contains(System.Type)">
      <summary>Returns a Boolean value that indicates whether the service manager contains a service of the given type.</summary>
      <returns>true if a service of type <paramref name="serviceType" /> has been published; otherwise, false.</returns>
      <param name="serviceType">The type of service to check.</param>
    </member>
    <member name="M:System.Activities.Presentation.ServiceManager.GetEnumerator">
      <summary>Retrieves an enumerator that can be used to enumerate all of the services that this service manager publishes.</summary>
      <returns>Returns <see cref="T:System.Collections.Generic.IEnumerator`1" />, which contains an enumeration of published services.</returns>
    </member>
    <member name="M:System.Activities.Presentation.ServiceManager.GetRequiredService``1">
      <summary>Retrieves the requested service. </summary>
      <returns>Returns a generic type, which is an instance of the service.</returns>
      <typeparam name="TServiceType">The type of service to retrieve.</typeparam>
      <exception cref="T:System.NotSupportedException">There is no service of the given type.</exception>
    </member>
    <member name="M:System.Activities.Presentation.ServiceManager.GetService``1">
      <summary>Retrieves the requested service.  This method returns null if the service could not be located.</summary>
      <returns>Returns a generic type, which is an instance of the service, or null if the service has not been published.</returns>
      <typeparam name="TServiceType">The type of service to retrieve.</typeparam>
    </member>
    <member name="M:System.Activities.Presentation.ServiceManager.GetService(System.Type)">
      <summary>Retrieves the requested service.  This method returns null if the service could not be located.</summary>
      <returns>Returns <see cref="T:System.Object" />, which is an instance of the service, or null if the service has not been published.</returns>
      <param name="serviceType">The type of service to retrieve.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Presentation.ServiceManager.GetTarget(System.Delegate)">
      <summary> A helper method that returns the target object for a delegate. If the delegate was created to proxy a generic delegate, this will correctly return the original object, not the proxy.</summary>
      <returns>Returns <see cref="T:System.Object" />, which is the callback target. This can return null if the callback represents a static object.</returns>
      <param name="callback">The delegate to get the target for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Presentation.ServiceManager.Publish``1(System.Activities.Presentation.PublishServiceCallback{``0})">
      <summary>Publishes the given service type, but does not declare an instance yet. When the service is requested, the PublishServiceCallback will be invoked to create the instance. The callback is invoked only once. After that, the instance it returned is cached.</summary>
      <param name="callback">A callback that will be invoked when an instance of the service is needed.</param>
      <typeparam name="TServiceType">The type of the service to publish.</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="callback" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Presentation.ServiceManager.Publish(System.Type,System.Activities.Presentation.PublishServiceCallback)">
      <summary>Publishes the specified service type, but does not declare an instance. When the service is requested, the Publish service callback will be invoked to create the instance. The callback is invoked only once. After that, the instance it returned is cached.</summary>
      <param name="serviceType">The type of service to publish.</param>
      <param name="callback">A callback that will be invoked when an instance of the service is needed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> or <paramref name="callback" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="serviceType" /> has already been published.</exception>
    </member>
    <member name="M:System.Activities.Presentation.ServiceManager.Publish(System.Type,System.Object)">
      <summary>Publishes the given service. After it is published, the service instance remains in the service manager until the editing context is disposed of.</summary>
      <param name="serviceType">The type of service to publish.</param>
      <param name="serviceInstance">An instance of the service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> or <paramref name="serviceInstance" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="serviceInstance" /> does not derive from or implement <paramref name="serviceType" />, or <paramref name="serviceType" /> has already been published.</exception>
    </member>
    <member name="M:System.Activities.Presentation.ServiceManager.Publish``1(``0)">
      <summary>Publishes the given service. After it is published, the service instance remains in the service manager until the editing context is disposed of.</summary>
      <param name="serviceInstance">An instance of the service.</param>
      <typeparam name="TServiceType">The type of the service to publish.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceInstance" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Presentation.ServiceManager.RemoveCallback(System.Delegate,System.Delegate)">
      <summary>A helper method that performs a Delegate.Remove operation, and unwraps delegates that are proxies to generic callbacks. You should use this method in your <see cref="Overload:System.Activities.Presentation.ServiceManager.UnSubscribe" /> implementations.</summary>
      <returns>Returns <see cref="T:System.Delegate" />, which is  a new value to assign to the existing delegate.</returns>
      <param name="existing">The existing delegate to remove the callback from.</param>
      <param name="toRemove">The callback to remove.</param>
    </member>
    <member name="M:System.Activities.Presentation.ServiceManager.Subscribe``1(System.Activities.Presentation.SubscribeServiceCallback{``0})">
      <summary>Invokes the provided callback when someone has published the requested service. If the service was already available, this method invokes the callback immediately.</summary>
      <param name="callback">A callback that will be notified when the service is available.</param>
      <typeparam name="TServiceType">The type of the service to subscribe to.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Presentation.ServiceManager.Subscribe(System.Type,System.Activities.Presentation.SubscribeServiceCallback)">
      <summary>Invokes the provided callback when someone has published the requested service. If the service was already available, this method invokes the callback immediately.</summary>
      <param name="serviceType">The type of service to subscribe to.</param>
      <param name="callback">A callback that will be notified when the service is available.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> or <paramref name="callback" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Presentation.ServiceManager.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retrieves an enumerator that can be used to enumerate all of the services that this service manager publishes.</summary>
      <returns>Returns <see cref="T:System.Collections.IEnumerator" />, which contains an enumeration of published services.</returns>
    </member>
    <member name="M:System.Activities.Presentation.ServiceManager.Unsubscribe``1(System.Activities.Presentation.SubscribeServiceCallback{``0})">
      <summary>Removes a subscription for a service type.</summary>
      <param name="callback">The callback object to remove from the subscription.</param>
      <typeparam name="TServiceType">The type of the service to remove the subscription from.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Presentation.ServiceManager.Unsubscribe(System.Type,System.Activities.Presentation.SubscribeServiceCallback)">
      <summary>Removes a subscription for a service type.</summary>
      <param name="serviceType">The type of service to remove the subscription from.</param>
      <param name="callback">The callback object to remove from the subscription.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> or <paramref name="callback" /> is null.</exception>
    </member>
    <member name="T:System.Activities.Presentation.SourceLocationUpdatedEventArgs">
      <summary> Provides data for the SourceLocationUpdated event. </summary>
    </member>
    <member name="M:System.Activities.Presentation.SourceLocationUpdatedEventArgs.#ctor(System.Guid,System.Activities.Debugger.SourceLocation)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Presentation.SourceLocationUpdatedEventArgs" /> class.</summary>
      <param name="objectReference">The Guid of the ObjectReference that changed.</param>
      <param name="updatedSourceLocation">The updated SourceLocation.</param>
    </member>
    <member name="P:System.Activities.Presentation.SourceLocationUpdatedEventArgs.ObjectReference">
      <summary>Gets the Guid of the ObjectReference that changed.</summary>
      <returns>The Guid of the ObjectReference that changed.</returns>
    </member>
    <member name="P:System.Activities.Presentation.SourceLocationUpdatedEventArgs.UpdatedSourceLocation">
      <summary>Gets the updated source location.</summary>
      <returns>The updated source location.</returns>
    </member>
    <member name="T:System.Activities.Presentation.SubscribeContextCallback">
      <summary>Defines a callback method that will be invoked when a context item changes. </summary>
      <param name="item">The context item that changed.</param>
    </member>
    <member name="T:System.Activities.Presentation.SubscribeContextCallback`1">
      <summary>Defines a callback method that will be invoked when a context item changes.</summary>
      <param name="item">The context item that changed. </param>
      <typeparam name="TContextItemType">The type of the context item.</typeparam>
    </member>
    <member name="T:System.Activities.Presentation.SubscribeServiceCallback">
      <summary>Represents a delegate that is a callback for service subscriptions.</summary>
      <param name="serviceType">The type of the service to subscribe to.</param>
      <param name="serviceInstance">The instance of the service to subscribe to. </param>
    </member>
    <member name="T:System.Activities.Presentation.SubscribeServiceCallback`1">
      <summary>Represents a generic delegate that is a callback for service subscriptions. </summary>
      <param name="serviceInstance">The instance of the service to subscribe to.</param>
      <typeparam name="TServiceType">The type of the service to subscribe to.</typeparam>
    </member>
    <member name="T:System.Activities.Presentation.TypeResolvingOptionsAttribute">
      <summary>Used to configure how a Windows Workflow Designer initializes type-resolver and type-browser dialogs to enable a user to select a type for arguments, variables, and generic type activities.   </summary>
    </member>
    <member name="M:System.Activities.Presentation.TypeResolvingOptionsAttribute.#ctor">
      <summary>Creates an instance of the <see cref="T:System.Activities.Presentation.TypeResolvingOptionsAttribute" /> class.</summary>
    </member>
    <member name="M:System.Activities.Presentation.TypeResolvingOptionsAttribute.#ctor(System.Activities.Presentation.View.TypeResolvingOptions)">
      <summary>Creates an instance of the <see cref="T:System.Activities.Presentation.TypeResolvingOptionsAttribute" /> class with specified type resolving options.</summary>
      <param name="options">The <see cref="T:System.Activities.Presentation.View.TypeResolvingOptions" /> that are supported.</param>
    </member>
    <member name="P:System.Activities.Presentation.TypeResolvingOptionsAttribute.TypeResolvingOptions">
      <summary>Gets or sets the options used to configure how a Windows Workflow Designer initializes type-resolver and type-browser dialogs to enable a user to select a type for arguments, variables, and generic type activities.</summary>
      <returns>An instance of <see cref="T:System.Activities.Presentation.View.TypeResolvingOptions" /> that specifies the options available for how a Workflow Designer initializes type-resolver and type-browser dialogs to enable a user to select a type for arguments, variables, and generic type activities.</returns>
    </member>
    <member name="T:System.Activities.Presentation.UndoEngine">
      <summary>Provides undo and redo operation implementations for designers.</summary>
    </member>
    <member name="M:System.Activities.Presentation.UndoEngine.#ctor(System.Activities.Presentation.EditingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Presentation.UndoEngine" /> class.</summary>
      <param name="context">The editing context.</param>
    </member>
    <member name="M:System.Activities.Presentation.UndoEngine.AddUndoUnit(System.Activities.Presentation.UndoUnit)">
      <summary>Adds the specified unit to the undo stack.</summary>
      <param name="unit">The undo unit to add.</param>
    </member>
    <member name="M:System.Activities.Presentation.UndoEngine.GetRedoActions">
      <summary>Retrieves an <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of redo operations.</summary>
      <returns>A simple iterator over a collection of redo operations.</returns>
    </member>
    <member name="M:System.Activities.Presentation.UndoEngine.GetUndoActions">
      <summary>Retrieves an <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of undo operations.</summary>
      <returns>A simple iterator over a collection of undo operations.</returns>
    </member>
    <member name="P:System.Activities.Presentation.UndoEngine.IsUndoRedoInProgress">
      <summary>Gets a <see cref="T:System.Boolean" /> value that indicates whether an undo or redo operation is in progress.</summary>
      <returns>true if an undo or redo operation is in progress; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.Presentation.UndoEngine.Redo">
      <summary>Removes the last <see cref="T:System.Activities.Presentation.UndoUnit" /> instance from the redo stack, and performs a redo operation on the unit. The <see cref="T:System.Activities.Presentation.UndoUnit" /> instance is then put into the undo stack.</summary>
      <returns>true if this method succeeds; otherwise, false.</returns>
    </member>
    <member name="E:System.Activities.Presentation.UndoEngine.RedoCompleted">
      <summary>Occurs when the redo operation is completed.</summary>
    </member>
    <member name="M:System.Activities.Presentation.UndoEngine.Undo">
      <summary>Removes the last <see cref="T:System.Activities.Presentation.UndoUnit" /> instance from the undo stack, and performs an undo operation on the unit. The <see cref="T:System.Activities.Presentation.UndoUnit" /> instance is then put into the redo stack.</summary>
      <returns>true if this method succeeds; otherwise, false.</returns>
    </member>
    <member name="E:System.Activities.Presentation.UndoEngine.UndoCompleted">
      <summary>Occurs when the undo operation is completed.</summary>
    </member>
    <member name="E:System.Activities.Presentation.UndoEngine.UndoRedoBufferChanged">
      <summary>Occurs when the buffers that hold undo and redo operations change.</summary>
    </member>
    <member name="E:System.Activities.Presentation.UndoEngine.UndoUnitAdded">
      <summary>Occurs when an undo unit is added to the undo stack. </summary>
    </member>
    <member name="E:System.Activities.Presentation.UndoEngine.UndoUnitCancelled">
      <summary>Occurs when an undo unit is cancelled from the undo stack.</summary>
    </member>
    <member name="E:System.Activities.Presentation.UndoEngine.UndoUnitDiscarded">
      <summary>Occurs when an undo unit is removed from the undo stack, without first performing an undo operation.</summary>
    </member>
    <member name="T:System.Activities.Presentation.UndoUnit">
      <summary>Represents a single unit of undoable work. Such a unit is added to an undo stack, and methods are provided to traverse the stack and perform an undo action on each unit.
</summary>
    </member>
    <member name="M:System.Activities.Presentation.UndoUnit.#ctor(System.Activities.Presentation.EditingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Presentation.UndoUnit" /> class.</summary>
      <param name="context">The editing context.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Presentation.UndoUnit.ApplyGlobalState">
      <summary>Applies the saved designer as the root designer. </summary>
    </member>
    <member name="P:System.Activities.Presentation.UndoUnit.Description">
      <summary>Gets or sets the description of this undo unit.</summary>
      <returns>Returns <see cref="T:System.String" />.</returns>
    </member>
    <member name="M:System.Activities.Presentation.UndoUnit.Redo">
      <summary>Redoes the content contained in this undo unit.</summary>
    </member>
    <member name="M:System.Activities.Presentation.UndoUnit.SaveGlobalState">
      <summary>Persists the current root designer.</summary>
    </member>
    <member name="M:System.Activities.Presentation.UndoUnit.Undo">
      <summary>Undoes the content contained in this undo unit. </summary>
    </member>
    <member name="T:System.Activities.Presentation.UndoUnitEventArgs">
      <summary>Represents the argument that is passed to the <see cref="E:System.Activities.Presentation.UndoEngine.UndoUnitAddedevent" /> event.</summary>
    </member>
    <member name="M:System.Activities.Presentation.UndoUnitEventArgs.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Presentation.UndoUnitEventArgs" /> class.</summary>
    </member>
    <member name="P:System.Activities.Presentation.UndoUnitEventArgs.UndoUnit">
      <summary>Gets or sets the <see cref="T:System.Activities.Presentation.UndoUnit" /> to be passed to the <see cref="E:System.Activities.Presentation.UndoEngine.UndoUnitAddedevent" /> event.</summary>
      <returns>Returns <see cref="T:System.Activities.Presentation.UndoUnit" />.</returns>
    </member>
    <member name="T:System.Activities.Presentation.WorkflowDesigner">
      <summary>Provides a designer canvas, which renders the visual representation of a workflow model as it is being designed.</summary>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowDesigner.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Presentation.WorkflowDesigner" /> class.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesigner.Context">
      <summary>Gets an <see cref="T:System.Activities.Presentation.EditingContext" /> object that is a collection of services shared between all elements contained in the designer and used to interact between the host and the designer. Services are published and requested through the <see cref="T:System.Activities.Presentation.EditingContext" />.</summary>
      <returns>The editing context for the workflow designer.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesigner.ContextMenu">
      <summary>Gets the context menu for this designer.</summary>
      <returns>The context menu for the designer.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesigner.DebugManagerView">
      <summary>Gets a <see cref="T:System.Activities.Presentation.Debug.DebuggerService" /> that is used for run-time debugging.</summary>
      <returns>An object that implements <see cref="T:System.Activities.Presentation.Debug.IDesignerDebugView" />.</returns>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowDesigner.Flush">
      <summary>Saves the current state of the workflow to the <see cref="P:System.WorkflowModel.Design.WorkflowDesigner.Text" /> property.</summary>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowDesigner.IsInErrorState">
      <summary>Indicates whether the Windows Workflow Designer is in error state.</summary>
      <returns>true if the Workflow Designer is in error state; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowDesigner.Load">
      <summary>Loads a workflow from the XAML contained in the <see cref="P:System.Activities.Presentation.WorkflowDesigner.Text" /> property.</summary>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowDesigner.Load(System.Object)">
      <summary>Loads a workflow with the specified instance.</summary>
      <param name="instance">The root of the workflow to load.</param>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowDesigner.Load(System.String)">
      <summary>Loads a workflow from the XAML contained in the specified file.</summary>
      <param name="fileName">The file name of the XAML file.</param>
    </member>
    <member name="E:System.Activities.Presentation.WorkflowDesigner.ModelChanged">
      <summary>Represents the event handler that goes into effect when something in the workflow model changes.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesigner.OutlineView">
      <summary>Gets the outline view of the workflow designer.</summary>
      <returns>The outline view of the workflow designer.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesigner.PropertyInspectorFontAndColorData">
      <summary>Sets the font and color data for the property inspector in a serialized, dictionary format.</summary>
      <returns>The font and color data for the property inspector in a serialized, dictionary format.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesigner.PropertyInspectorView">
      <summary>Gets the property inspector, which is commonly known as the property grid.</summary>
      <returns>The property inspector.</returns>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowDesigner.Save(System.String)">
      <summary>Saves the workflow to an XAML file.</summary>
      <param name="fileName">The file name of the XAML file.</param>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesigner.Text">
      <summary>Gets or sets the XAML string representation of the workflow.</summary>
      <returns>The XAML string representation of the workflow.</returns>
    </member>
    <member name="E:System.Activities.Presentation.WorkflowDesigner.TextChanged">
      <summary>Occurs when the <see cref="P:System.Activities.Presentation.WorkflowDesigner.Text" /> property value changes.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesigner.View">
      <summary>Gets a UI element that allows the user to view and edit the workflow visually. This UI element is commonly referred to as the workflow canvas.</summary>
      <returns>A UI element that allows the user to view and edit the workflow visually.</returns>
    </member>
    <member name="T:System.Activities.Presentation.WorkflowDesignerColors">
      <summary>Enables colors and color gradients to be associated with aspects of the elements and shell bars used in the Windows Workflow Designer user interface.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.AnnotationBackgroundGradientBeginColor">
      <summary>Gets the beginning color for the color gradient of the annotation background.</summary>
      <returns>The beginning color for the color gradient of the annotation background.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.AnnotationBackgroundGradientBeginColorKey">
      <summary>Specifies the beginning color key for the color gradient of the annotation background. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.AnnotationBackgroundGradientEndColor">
      <summary>Gets the ending color for the color gradient of the annotation background.</summary>
      <returns>The ending color for the color gradient of the annotation background.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.AnnotationBackgroundGradientEndColorKey">
      <summary>Specifies the ending color key for the color gradient of the annotation background. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.AnnotationBackgroundGradientMiddleColor">
      <summary>Gets the middle section color for the color gradient of the annotation background.</summary>
      <returns>The middle section color for the color gradient of the annotation background.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.AnnotationBackgroundGradientMiddleColorKey">
      <summary>Specifies the middle section color key for the color gradient of the annotation background. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.AnnotationBorderColor">
      <summary>Gets the color of the annotation border.</summary>
      <returns>The color of the annotation border.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.AnnotationBorderColorKey">
      <summary>Specifies the color key of the annotation border. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.AnnotationDockButtonColor">
      <summary>Gets the color of the annotation dock button.</summary>
      <returns>The color of the annotation dock button.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.AnnotationDockButtonColorKey">
      <summary>Specifies the color key of the annotation dock button. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.AnnotationDockButtonHoverBackgroundColor">
      <summary>Gets the background color on hover of annotation dock button.</summary>
      <returns>The background color on hover of annotation dock button.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.AnnotationDockButtonHoverBackgroundColorKey">
      <summary>Specifies the background color key on hover of annotation dock button. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.AnnotationDockButtonHoverBorderColor">
      <summary>Gets the border color on hover of annotation dock button.</summary>
      <returns>The border color on hover of annotation dock button.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.AnnotationDockButtonHoverBorderColorKey">
      <summary>Specifies the border color key on hover of annotation dock button. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.AnnotationDockButtonHoverColor">
      <summary>Gets the color on hover of annotation dock button.</summary>
      <returns>The color on hover of annotation dock button.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.AnnotationDockButtonHoverColorKey">
      <summary>Specifies the color key on hover of annotation dock button. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.AnnotationDockTextColor">
      <summary>Gets the color for the dock text of an annotation.</summary>
      <returns>The color for the dock text of an annotation.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.AnnotationDockTextColorKey">
      <summary>Specifies the color key for the dock text of an annotation. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.AnnotationUndockTextColor">
      <summary>Gets the color for the undock text of an annotation.</summary>
      <returns>The color for the undock text of an annotation.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.AnnotationUndockTextColorKey">
      <summary>Specifies the color key for the undock text of an annotation. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.ContextMenuBackgroundGradientBeginColor">
      <summary>Gets the beginning color for the color gradient of the context menu background.</summary>
      <returns>The beginning color for the color gradient of the context menu background.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.ContextMenuBackgroundGradientBeginColorKey">
      <summary>Specifies the beginning color key for the color gradient of the context menu background. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.ContextMenuBackgroundGradientEndColor">
      <summary>Gets the ending color for the color gradient of the context menu background.</summary>
      <returns>The ending color for the color gradient of the context menu background.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.ContextMenuBackgroundGradientEndColorKey">
      <summary>Specifies the ending color key for the color gradient of the context menu background. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.ContextMenuBorderColor">
      <summary>Gets the color of the context menu border.</summary>
      <returns>The color of the context menu border.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.ContextMenuBorderColorKey">
      <summary>Specifies the color key of the context menu border. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.ContextMenuIconAreaColor">
      <summary>Gets the color for the icon area of the context menu.</summary>
      <returns>The color for the icon area of the context menu.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.ContextMenuIconAreaColorKey">
      <summary>Specifies the color key for the icon area of the context menu. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.ContextMenuItemTextColor">
      <summary>Gets the color for the item text in the context menu.</summary>
      <returns>The color for the item text in the context menu.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.ContextMenuItemTextColorKey">
      <summary>Specifies the color key for the item text in the context menu. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.ContextMenuItemTextDisabledColor">
      <summary>Gets the color for the disabled item text in the context menu.</summary>
      <returns>The color for the disabled item text in the context menu.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.ContextMenuItemTextDisabledColorKey">
      <summary>Specifies the color key for the disabled item text in the context menu. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.ContextMenuItemTextHoverColor">
      <summary>Gets the hover color for the item text in the context menu.</summary>
      <returns>The hover color for the item text in the context menu.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.ContextMenuItemTextHoverColorKey">
      <summary>Specifies the hover color key for the item text in the context menu. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.ContextMenuItemTextSelectedColor">
      <summary>Gets the color for the selected item text in the context menu.</summary>
      <returns>The color for the selected item text in the context menu.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.ContextMenuItemTextSelectedColorKey">
      <summary>Specifies the color key for the selected item text in the context menu. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.ContextMenuMouseOverBeginColor">
      <summary>Gets the beginning mouse over color for the context menu.</summary>
      <returns>The beginning mouse over color for the context menu.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.ContextMenuMouseOverBeginColorKey">
      <summary>Specifies the beginning mouse over color key for the context menu. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.ContextMenuMouseOverBorderColor">
      <summary>Gets the mouse over color for the context menu border.</summary>
      <returns>The mouse over color for the context menu border.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.ContextMenuMouseOverBorderColorKey">
      <summary>Specifies the mouse over color key for the context menu border. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.ContextMenuMouseOverEndColor">
      <summary>Gets the ending mouse over color for the context menu.</summary>
      <returns>The ending mouse over color for the context menu.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.ContextMenuMouseOverEndColorKey">
      <summary>Specifies the ending mouse over color key for the context menu. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.ContextMenuMouseOverMiddle1Color">
      <summary>Gets the mouse over color for the context menu first middle section, which comes after the beginning section.</summary>
      <returns>The mouse over color for the context menu first middle section.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.ContextMenuMouseOverMiddle1ColorKey">
      <summary>Specifies the mouse over color key for the context menu first middle section, which comes after the beginning section. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.ContextMenuMouseOverMiddle2Color">
      <summary>Gets the mouse over color for the context menu second middle section, which comes after the first middle section and before the ending section.</summary>
      <returns>The mouse over color for the context menu second middle section.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.ContextMenuMouseOverMiddle2ColorKey">
      <summary>Specifies the mouse over color key for the context menu second middle section, which comes after the first middle section and before the ending section. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.ContextMenuSeparatorColor">
      <summary>Gets the color of the context menu separator.</summary>
      <returns>The color of the context menu separator.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.ContextMenuSeparatorColorKey">
      <summary>Specifies the color key of the context menu separator. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.DesignerViewBackgroundColor">
      <summary>Gets the color for the designer view background.</summary>
      <returns>The <see cref="T:System.Windows.Media.Color" /> for the designer view background.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.DesignerViewBackgroundColorKey">
      <summary>Specifies the color key to be used for the designer view background. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.DesignerViewExpandAllCollapseAllButtonBrush">
      <summary>Gets the brush for the ExpandAll/CollapseAll button in the designer view.</summary>
      <returns>The brush for the ExpandAll/CollapseAll button in the designer view.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.DesignerViewExpandAllCollapseAllButtonColorKey">
      <summary>Specifies the color key for the ExpandAll/CollapseAll button in the designer view. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.DesignerViewExpandAllCollapseAllButtonMouseOverBrush">
      <summary>Gets the mouse over brush for the ExpandAll/CollapseAll button in the designer view.</summary>
      <returns>The mouse over brush for the ExpandAll/CollapseAll button in the designer view.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.DesignerViewExpandAllCollapseAllButtonMouseOverColorKey">
      <summary>Specifies the mouse over color key for the ExpandAll/CollapseAll button in the designer view. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.DesignerViewExpandAllCollapseAllPressedBrush">
      <summary>Gets the brush for the ExpandAll/CollapseAll pressed button in the designer view.</summary>
      <returns>The brush for the ExpandAll/CollapseAll pressed button in the designer view.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.DesignerViewExpandAllCollapseAllPressedColorKey">
      <summary>Specifies the color key for the ExpandAll/CollapseAll pressed button in the designer view. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.DesignerViewShellBarCaptionActiveColor">
      <summary>Gets the color of the caption for the <see cref="T:System.Activities.Presentation.WorkflowViewElement" /> active designer view shell bar.</summary>
      <returns>The <see cref="T:System.Windows.Media.Color" /> of the caption for the active designer view shell bar.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.DesignerViewShellBarCaptionActiveColorKey">
      <summary>Specifies the active color key for the caption of the designer view shell bar. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.DesignerViewShellBarCaptionColor">
      <summary>Gets the color of the caption for the <see cref="T:System.Activities.Presentation.WorkflowViewElement" /> designer view shell bar.</summary>
      <returns>The <see cref="T:System.Windows.Media.Color" /> of the caption for the designer view shell bar.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.DesignerViewShellBarCaptionColorKey">
      <summary>Specifies the color key for the designer view shell bar caption. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.DesignerViewShellBarColorGradientBeginColor">
      <summary>Gets the beginning color for the color gradient of the <see cref="T:System.Activities.Presentation.WorkflowViewElement" /> designer view shell bar.</summary>
      <returns>The beginning <see cref="T:System.Windows.Media.Color" /> for the color gradient of the designer view shell bar.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.DesignerViewShellBarColorGradientBeginKey">
      <summary>Specifies the beginning color key for the color gradient of the designer view shell bar. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.DesignerViewShellBarColorGradientEndColor">
      <summary>Gets the ending color for the color gradient of the <see cref="T:System.Activities.Presentation.WorkflowViewElement" /> designer view shell bar.</summary>
      <returns>The ending <see cref="T:System.Windows.Media.Color" /> for the color gradient of the designer view shell bar.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.DesignerViewShellBarColorGradientEndKey">
      <summary>Specifies the ending color key for the color gradient of the designer view shell bar. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.DesignerViewShellBarControlBackgroundColor">
      <summary>Gets the background color of the <see cref="T:System.Activities.Presentation.WorkflowViewElement" /> designer view shell bar control.</summary>
      <returns>The background <see cref="T:System.Windows.Media.Color" /> of the designer view shell bar control.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.DesignerViewShellBarControlBackgroundColorKey">
      <summary>Specifies the background color key for the control of the designer view shell bar. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.DesignerViewShellBarHoverColorGradientBeginColor">
      <summary>Gets the beginning color for the hover color gradient of the <see cref="T:System.Activities.Presentation.WorkflowViewElement" /> designer view shell bar.</summary>
      <returns>The beginning hover <see cref="T:System.Windows.Media.Color" /> for the color gradient of the designer view shell bar.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.DesignerViewShellBarHoverColorGradientBeginKey">
      <summary>Specifies the beginning hover color key for the color gradient of the designer view shell bar. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.DesignerViewShellBarHoverColorGradientEndColor">
      <summary>Gets the ending color for the hover color gradient of the <see cref="T:System.Activities.Presentation.WorkflowViewElement" /> designer view shell bar.</summary>
      <returns>The ending hover <see cref="T:System.Windows.Media.Color" /> for the color gradient for the designer view shell bar.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.DesignerViewShellBarHoverColorGradientEndKey">
      <summary>Specifies the ending hover color key for the color gradient of the designer view shell bar. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.DesignerViewShellBarSelectedColorGradientBeginColor">
      <summary>Gets the beginning color of the color gradient for the selected <see cref="T:System.Activities.Presentation.WorkflowViewElement" /> designer view shell bar.</summary>
      <returns>The beginning <see cref="T:System.Windows.Media.Color" /> for the color gradient for the selected designer view shell bar.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.DesignerViewShellBarSelectedColorGradientBeginKey">
      <summary>Specifies the beginning color key for the color gradient of the selected designer view shell bar. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.DesignerViewShellBarSelectedColorGradientEndColor">
      <summary>Gets the ending color of the color gradient for the selected <see cref="T:System.Activities.Presentation.WorkflowViewElement" /> designer view shell bar.</summary>
      <returns>The ending <see cref="T:System.Windows.Media.Color" /> for the color gradient for the selected designer view shell bar.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.DesignerViewShellBarSelectedColorGradientEndKey">
      <summary>Specifies the ending color key for the color gradient of the selected designer view shell bar. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.DesignerViewStatusBarBackgroundColor">
      <summary>Gets the color for the designer view status bar background.</summary>
      <returns>The <see cref="T:System.Windows.Media.Color" /> for the designer view status bar background.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.DesignerViewStatusBarBackgroundColorKey">
      <summary>Specifies the color key to be used for the designer view status bar background. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.FlowchartExpressionButtonBrush">
      <summary>Gets the brush for the Flowchart Expression button in the designer.</summary>
      <returns>The brush for the Flowchart Expression button in the designer.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.FlowchartExpressionButtonColorKey">
      <summary>Specifies the color key for the Flowchart Expression button in the designer. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.FlowchartExpressionButtonMouseOverBrush">
      <summary>Gets the mouse over brush for the Flowchart Expression button in the designer.</summary>
      <returns>The mouse over brush for the Flowchart Expression button in the designer.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.FlowchartExpressionButtonMouseOverColorKey">
      <summary>Specifies the mouse over color key for the Flowchart Expression button in the designer. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.FlowchartExpressionButtonPressedBrush">
      <summary>Gets the brush for the Flowchart Expression pressed button in the designer.</summary>
      <returns>The brush for the Flowchart Expression pressed button in the designer.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.FlowchartExpressionButtonPressedColorKey">
      <summary>Specifies the color key for the Flowchart Expression pressed button in the designer. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.FontFamily">
      <summary>Gets the font family for the <see cref="T:System.Activities.Presentation.WorkflowViewElement" />.</summary>
      <returns>The <see cref="T:System.Windows.Media.FontFamily" /> for the view element.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.FontFamilyKey">
      <summary>Specifies the key to be used for the font family. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.FontSize">
      <summary>Gets the font size for the <see cref="T:System.Activities.Presentation.WorkflowViewElement" />.</summary>
      <returns>The <see cref="T:System.Double" /> that indicates the font size.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.FontSizeKey">
      <summary>Specifies the key to be used for the font size. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.FontWeight">
      <summary>Gets the font weight to be used for the <see cref="T:System.Activities.Presentation.WorkflowViewElement" />.</summary>
      <returns>The <see cref="T:System.Windows.FontWeight" /> used for the view element.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.FontWeightKey">
      <summary>Specifies the key to be used for the font weight. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.GridViewRowHoverColor">
      <summary>Gets the hover color for a row in the grid view.</summary>
      <returns>The hover color for a row in the grid view.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.OutlineViewBackgroundColor">
      <summary>Gets the color for the outline view background.</summary>
      <returns>The color for the outline view background.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.OutlineViewBackgroundColorKey">
      <summary>Specifies the color key to be used for the outline view background. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.OutlineViewCollapsedArrowBorderColor">
      <summary>Gets the border color for the collapsed arrow of the outline view.</summary>
      <returns>The border color for the collapsed arrow of the outline view.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.OutlineViewCollapsedArrowBorderColorKey">
      <summary>Specifies the border color key for the collapsed arrow of the outline view. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.OutlineViewCollapsedArrowHoverBorderColor">
      <summary>Gets the border color on hover of collapsed arrow of the outline view.</summary>
      <returns>The border color on hover of collapsed arrow of the outline view.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.OutlineViewCollapsedArrowHoverBorderColorKey">
      <summary>Specifies the border color key on hover of collapsed arrow of the outline view. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.OutlineViewExpandedArrowBorderColor">
      <summary>Gets the border color for the expanded arrow of the outline view.</summary>
      <returns>The border color for the expanded arrow of the outline view.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.OutlineViewExpandedArrowBorderColorKey">
      <summary>Specifies the border color key for the expanded arrow of the outline view. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.OutlineViewExpandedArrowColor">
      <summary>Gets the color for the expanded arrow of the outline view.</summary>
      <returns>The color for the expanded arrow of the outline view.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.OutlineViewExpandedArrowColorKey">
      <summary>Specifies the color key for the expanded arrow of the outline view. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.OutlineViewItemHighlightBackgroundColor">
      <summary>Gets the color for the background of a highlighted item in the outline view.</summary>
      <returns>The color for the background of a highlighted item in the outline view.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.OutlineViewItemHighlightBackgroundColorKey">
      <summary>Specifies the color key for the background of a highlighted item in the outline view. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.OutlineViewItemSelectedTextColor">
      <summary>Gets the color for the text of a selected item in the outline view.</summary>
      <returns>The color for the text of a selected item in the outline view.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.OutlineViewItemSelectedTextColorKey">
      <summary>Specifies the color key for the text of a selected item in the outline view. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.OutlineViewItemTextColor">
      <summary>Gets the color for the text of an item in the outline view.</summary>
      <returns>The color for the text of an item in the outline view.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.OutlineViewItemTextColorKey">
      <summary>Specifies the color key for the text of an item in the outline view. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.PropertyInspectorBackgroundBrushKey">
      <summary>Gets the brush key for the property inspector background.</summary>
      <returns>The brush key for the property inspector background.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.PropertyInspectorBorderBrushKey">
      <summary>Gets the brush key for the property inspector border.</summary>
      <returns>The brush key for the property inspector border.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.PropertyInspectorCategoryCaptionTextBrushKey">
      <summary>Gets the brush key for the category caption text in the property inspector.</summary>
      <returns>The brush key for the category caption text in the property inspector.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.PropertyInspectorPaneBrushKey">
      <summary>Gets the brush key for the property inspector pane.</summary>
      <returns>The brush key for the property inspector pane.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.PropertyInspectorPopupBrushKey">
      <summary>Gets the brush key for the property inspector pop-up window.</summary>
      <returns>The brush key for the property inspector pop-up window.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.PropertyInspectorSelectedBackgroundBrushKey">
      <summary>Gets the brush key for the selected background in the property inspector.</summary>
      <returns>The brush key for the selected background in the property inspector.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.PropertyInspectorSelectedForegroundBrushKey">
      <summary>Gets the brush key for the selected foreground in the property inspector.</summary>
      <returns>The brush key for the selected foreground in the property inspector.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.PropertyInspectorTextBrushKey">
      <summary>Gets the brush key for the property inspector text.</summary>
      <returns>The brush key for the property inspector text.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.PropertyInspectorToolBarBackgroundBrushKey">
      <summary>Gets the brush key for the toolbar background in the property inspector.</summary>
      <returns>The brush key for the toolbar background in the property inspector.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.PropertyInspectorToolBarItemHoverBackgroundBrushKey">
      <summary>Gets the brush key for the background of a hovered item in the property inspector toolbar.</summary>
      <returns>The brush key for the background of a hovered item in the property inspector toolbar.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.PropertyInspectorToolBarItemHoverBorderBrushKey">
      <summary>Gets the brush key for the border of a hovered item in the property inspector toolbar.</summary>
      <returns>The brush key for the border of a hovered item in the property inspector toolbar.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.PropertyInspectorToolBarItemSelectedBackgroundBrushKey">
      <summary>Gets the brush key for the background of a selected item in the property inspector toolbar.</summary>
      <returns>The brush key for the background of a selected item in the property inspector toolbar.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.PropertyInspectorToolBarItemSelectedBorderBrushKey">
      <summary>Gets the brush key for the border of a selected item in the property inspector toolbar.</summary>
      <returns>The brush key for the border of a selected item in the property inspector toolbar.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.PropertyInspectorToolBarSeparatorBrushKey">
      <summary>Gets the brush key for the separator in the property inspector toolbar.</summary>
      <returns>The brush key for the separator in the property inspector toolbar.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.PropertyInspectorToolBarTextBoxBorderBrushKey">
      <summary>Gets the brush key for the textbox border in the property inspector toolbar.</summary>
      <returns>The brush key for the textbox border in the property inspector toolbar.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.RubberBandRectangleColorKey">
      <summary>Specifies the color key for the rubber band rectangle. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.WorkflowViewElementBackgroundColor">
      <summary>Gets the background color for the <see cref="T:System.Activities.Presentation.WorkflowViewElement" />.</summary>
      <returns>The background color for the workflow view element.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.WorkflowViewElementBackgroundColorKey">
      <summary>Specifies the color key to be used for the <see cref="T:System.Activities.Presentation.WorkflowViewElement" /> background. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.WorkflowViewElementBorderColor">
      <summary>Gets the color for the <see cref="T:System.Activities.Presentation.WorkflowViewElement" /> border.</summary>
      <returns>The <see cref="T:System.Windows.Media.Color" /> for the workflow view element border.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.WorkflowViewElementBorderColorKey">
      <summary>Specifies the color key to be used for the <see cref="T:System.Activities.Presentation.WorkflowViewElement" /> border. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.WorkflowViewElementCaptionColor">
      <summary>Gets the color for the <see cref="T:System.Activities.Presentation.WorkflowViewElement" /> caption.</summary>
      <returns>The <see cref="T:System.Windows.Media.Color" /> for the workflow view element caption.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.WorkflowViewElementCaptionColorKey">
      <summary>Specifies the color key to be used for the <see cref="T:System.Activities.Presentation.WorkflowViewElement" /> caption. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.WorkflowViewElementSelectedBackgroundColor">
      <summary>Gets the color for the <see cref="T:System.Activities.Presentation.WorkflowViewElement" /> selected background.</summary>
      <returns>The color for the workflow view element selected background.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.WorkflowViewElementSelectedBackgroundColorKey">
      <summary>Specifies the color key to be used for the selected background of the <see cref="T:System.Activities.Presentation.WorkflowViewElement" />. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.WorkflowViewElementSelectedBorderColor">
      <summary>Gets the color for the <see cref="T:System.Activities.Presentation.WorkflowViewElement" /> selected border.</summary>
      <returns>The color for the workflow view element selected border.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.WorkflowViewElementSelectedBorderColorKey">
      <summary>Specifies the color key for the <see cref="T:System.Activities.Presentation.WorkflowViewElement" /> selected border. This field is constant.</summary>
    </member>
    <member name="T:System.Activities.Presentation.WorkflowDesignerIcons">
      <summary>Represents the workflow designer icons.</summary>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowDesignerIcons.UseWindowsStoreAppStyleIcons">
      <summary>Uses the Windows Store App style icons.</summary>
    </member>
    <member name="T:System.Activities.Presentation.WorkflowDesignerIcons.Activities">
      <summary>Represents the designer icons for the activities in workflow.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.AddToCollection">
      <summary>Gets or sets an icon representing the <see cref="T:System.Activities.Statements.AddToCollection`1" /> activity.</summary>
      <returns>An icon representing the AddToCollection activity.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.Assign">
      <summary>Gets or sets an icon representing the <see cref="T:System.Activities.Statements.Assign" /> activity.</summary>
      <returns>An icon representing the Assign activity.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.CancellationScope">
      <summary>Gets or sets an icon representing the <see cref="T:System.Activities.Statements.CancellationScope" /> activity.</summary>
      <returns>An icon representing the CancellationScope activity.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.ClearCollection">
      <summary>Gets or sets an icon representing the <see cref="T:System.Activities.Statements.ClearCollection`1" /> activity.</summary>
      <returns>An icon representing the ClearCollection activity.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.CompensableActivity">
      <summary>Gets or sets an icon representing the <see cref="T:System.Activities.Statements.CompensableActivity" /> activity.</summary>
      <returns>An icon representing the CompensableActivity activity.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.Compensate">
      <summary>Gets or sets an icon representing the <see cref="T:System.Activities.Statements.Compensate" /> activity.</summary>
      <returns>An icon representing the Compensate activity.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.Confirm">
      <summary>Gets or sets an icon representing the <see cref="T:System.Activities.Statements.Confirm" /> activity.</summary>
      <returns>An icon representing the Confirm activity.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.CorrelationScope">
      <summary>Gets or sets an icon representing the <see cref="T:System.ServiceModel.Activities.CorrelationScope" /> activity.</summary>
      <returns>An icon representing the CorrelationScope activity.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.DefaultCustomActivity">
      <summary>Gets or sets an icon representing the DefaultCustomActivity activity.</summary>
      <returns>An icon representing the DefaultCustomActivity activity.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.Delay">
      <summary>Gets or sets an icon representing the <see cref="T:System.Activities.Statements.Delay" /> activity.</summary>
      <returns>An icon representing the Delay activity.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.DoWhile">
      <summary>Gets or sets an icon representing the <see cref="T:System.Activities.Statements.DoWhile" /> activity.</summary>
      <returns>An icon representing the DoWhile activity.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.ExistsInCollection">
      <summary>Gets or sets an icon representing the <see cref="T:System.Activities.Statements.ExistsInCollection`1" /> activity.</summary>
      <returns>An icon representing the ExistsInCollection activity.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.FinalState">
      <summary>Gets or sets an icon representing the <see cref="T:System.Activities.Core.Presentation.FinalState" /> activity.</summary>
      <returns>An icon representing the FinalState activity.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.Flowchart">
      <summary>Gets or sets an icon representing the activity of the <see cref="T:System.Activities.Statements.Flowchart" />.</summary>
      <returns>An icon representing the activity of the Flowchart.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.FlowDecision">
      <summary>Gets or sets an icon representing the activity of the <see cref="T:System.Activities.Statements.FlowDecision" />.</summary>
      <returns>An icon representing the activity of the FlowDecision.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.FlowDecisionNode">
      <summary>Gets or sets an icon representing the activity of the FlowDecisionNode.</summary>
      <returns>An icon representing the activity of the FlowDecisionNode.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.FlowSwitch">
      <summary>Gets or sets an icon representing the activity of the <see cref="T:System.Activities.Statements.FlowSwitch`1" />.</summary>
      <returns>An icon representing the activity of the FlowSwitch.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.FlowSwitchNode">
      <summary>Gets or sets an icon representing the activity of the FlowSwitchNode.</summary>
      <returns>An icon representing the activity of the FlowSwitchNode.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.ForEach">
      <summary>Gets or sets an icon representing the <see cref="T:System.Activities.Statements.ForEach`1" /> activity.</summary>
      <returns>An icon representing the ForEach activity.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.If">
      <summary>Gets or sets an icon representing the <see cref="T:System.Activities.Statements.If" /> activity.</summary>
      <returns>An icon representing the If activity.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.InitializeCorrelation">
      <summary>Gets or sets an icon representing the InitializeCorrelation activity.</summary>
      <returns>An icon representing the InitializeCorrelation activity.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.Interop">
      <summary>Gets or sets an icon representing the <see cref="T:System.Activities.Statements.Interop" /> activity.</summary>
      <returns>An icon representing the Interop activity.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.InvokeDelegate">
      <summary>Gets or sets an icon representing the <see cref="T:System.Activities.Statements.InvokeDelegate" /> activity.</summary>
      <returns>An icon representing the InvokeDelegate activity.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.InvokeMethod">
      <summary>Gets or sets an icon representing the <see cref="T:System.Activities.Statements.InvokeMethod" /> activity.</summary>
      <returns>An icon representing the InvokeMethod activity.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.NoPersistScope">
      <summary>Gets or sets an icon representing the <see cref="T:System.Activities.Statements.NoPersistScope" /> activity.</summary>
      <returns>An icon representing the NoPersistScope activity.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.Parallel">
      <summary>Gets or sets an icon representing the <see cref="T:System.Activities.Statements.Parallel" /> activity.</summary>
      <returns>An icon representing the Parallel activity.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.ParallelForEach">
      <summary>Gets or sets an icon representing the <see cref="T:System.Activities.Statements.ParallelForEach`1" /> activity.</summary>
      <returns>An icon representing the ParallelForEach activity.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.Persist">
      <summary>Gets or sets an icon representing the <see cref="T:System.Activities.Statements.Persist" /> activity.</summary>
      <returns>An icon representing the Persist activity.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.Pick">
      <summary>Gets or sets an icon representing the <see cref="T:System.Activities.Statements.Pick" /> activity.</summary>
      <returns>An icon representing the Pick activity.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.PickBranch">
      <summary>Gets or sets an icon representing the <see cref="T:System.Activities.Statements.PickBranch" /> activity.</summary>
      <returns>An icon representing the PickBranch activity.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.Receive">
      <summary>Gets or sets an icon representing the <see cref="T:System.ServiceModel.Activities.Receive" /> activity.</summary>
      <returns>An icon representing the Receive activity.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.ReceiveAndSendReply">
      <summary>Gets or sets an icon representing the ReceiveAndSendReply activity.</summary>
      <returns>An icon representing the ReceiveAndSendReply activity.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.ReceiveReply">
      <summary>Gets or sets an icon representing the <see cref="T:System.ServiceModel.Activities.ReceiveReply" /> activity.</summary>
      <returns>An icon representing the ReceiveReply activity.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.RemoveFromCollection">
      <summary>Gets or sets an icon representing the <see cref="T:System.Activities.Statements.RemoveFromCollection`1" /> activity.</summary>
      <returns>An icon representing the RemoveFromCollection activity.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.Rethrow">
      <summary>Gets or sets an icon representing the <see cref="T:System.Activities.Statements.Rethrow" /> activity.</summary>
      <returns>An icon representing the Rethrow activity.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.Send">
      <summary>Gets or sets an icon representing the <see cref="T:System.ServiceModel.Activities.Send" /> activity.</summary>
      <returns>An icon representing the Send activity.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.SendAndReceiveReply">
      <summary>Gets or sets an icon representing the SendAndReceiveReply activity.</summary>
      <returns>An icon representing the SendAndReceiveReply activity.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.SendReply">
      <summary>Gets or sets an icon representing the <see cref="T:System.ServiceModel.Activities.SendReply" /> activity.</summary>
      <returns>An icon representing the SendReply activity.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.Sequence">
      <summary>Gets or sets an icon representing the <see cref="T:System.Activities.Statements.Sequence" /> activity.</summary>
      <returns>An icon representing the Sequence activity.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.StartNode">
      <summary>Gets or sets an icon representing the StartNode activity.</summary>
      <returns>An icon representing the StartNode activity.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.State">
      <summary>Gets or sets an icon representing the <see cref="T:System.Activities.Statements.State" /> activity.</summary>
      <returns>An icon representing the State activity.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.StateEntry">
      <summary>Gets or sets an icon representing the StateEntry activity.</summary>
      <returns>An icon representing the StateEntry activity.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.StateExit">
      <summary>Gets or sets an icon representing the StateExit activity.</summary>
      <returns>An icon representing the StateExit activity.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.StateMachine">
      <summary>Gets or sets an icon representing the <see cref="T:System.Activities.Statements.StateMachine" /> activity.</summary>
      <returns>An icon representing the StateMachine activity.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.StateTransition">
      <summary>Gets or sets an icon representing the StateTransition activity.</summary>
      <returns>An icon representing the StateTransition activity.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.Switch">
      <summary>Gets or sets an icon representing the <see cref="T:System.Activities.Statements.Switch`1" /> activity.</summary>
      <returns>An icon representing the Switch activity.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.TerminateWorkflow">
      <summary>Gets or sets an icon representing the <see cref="T:System.Activities.Statements.TerminateWorkflow" /> activity.</summary>
      <returns>An icon representing the TerminateWorkflow activity.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.Throw">
      <summary>Gets or sets an icon representing the <see cref="T:System.Activities.Statements.Throw" /> activity.</summary>
      <returns>An icon representing the Throw activity.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.TransactedReceiveScope">
      <summary>Gets or sets an icon representing the <see cref="T:System.ServiceModel.Activities.TransactedReceiveScope" /> activity.</summary>
      <returns>An icon representing the TransactedReceiveScope activity.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.TransactionScope">
      <summary>Gets or sets an icon representing the <see cref="T:System.Activities.Statements.TransactionScope" /> activity.</summary>
      <returns>An icon representing the TransactionScope activity.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.TryCatch">
      <summary>Gets or sets an icon representing the <see cref="T:System.Activities.Statements.TryCatch" /> activity.</summary>
      <returns>An icon representing the TryCatch activity.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.While">
      <summary>Gets or sets an icon representing the <see cref="T:System.Activities.Statements.While" /> activity.</summary>
      <returns>An icon representing the While activity.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.WriteLine">
      <summary>Gets or sets an icon representing the <see cref="T:System.Activities.Statements.WriteLine" /> activity.</summary>
      <returns>An icon representing the WriteLine activity.</returns>
    </member>
    <member name="T:System.Activities.Presentation.WorkflowDesignerIcons.ContextMenuItems">
      <summary>Provides the items within the context menu.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.ContextMenuItems.Copy">
      <summary>Gets or sets the copy menu item.</summary>
      <returns>The copy menu item.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.ContextMenuItems.CopyDisabled">
      <summary>Gets or sets the disabled copy menu item.</summary>
      <returns>The disabled copy menu item.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.ContextMenuItems.Cut">
      <summary>Gets or sets the cut menu item.</summary>
      <returns>The cut menu item.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.ContextMenuItems.CutDisabled">
      <summary>Gets or sets the disabled cut menu item.</summary>
      <returns>The disabled cut menu item.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.ContextMenuItems.Delete">
      <summary>Gets or sets the delete menu item.</summary>
      <returns>The delete menu item.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.ContextMenuItems.DeleteDisabled">
      <summary>Gets or sets the disabled delete menu item.</summary>
      <returns>The disabled delete menu item.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.ContextMenuItems.Paste">
      <summary>Gets or sets the paste menu item.</summary>
      <returns>The paste menu item.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.ContextMenuItems.PasteDisabled">
      <summary>Gets or sets the disabled paste menu item.</summary>
      <returns>The disabled paste menu item.</returns>
    </member>
    <member name="T:System.Activities.Presentation.WorkflowDesignerIcons.DesignerItems">
      <summary>Provides the items available when working with the workflow designer.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.DesignerItems.ActivityErrorValidation">
      <summary>Gets or sets the control used to display the result of activity error validation.</summary>
      <returns>The control used to display the result of activity error validation.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.DesignerItems.Annotation">
      <summary>Gets or sets the control used for assigning annotation.</summary>
      <returns>The control used for assigning annotation.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.DesignerItems.DeleteButton">
      <summary>Gets or sets the control button for deleting items within the designer canvas.</summary>
      <returns>The control button for deleting items within the designer canvas.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.DesignerItems.DeleteDisabledButton">
      <summary>Gets or sets the disabled delete button.</summary>
      <returns>The disabled delete button.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.DesignerItems.FitToScreen">
      <summary>Gets or sets the control that is used to reduce size of the designer components to fit them all within the design surface.</summary>
      <returns>True if the width of the form is reduced to fit the width of the screen; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.DesignerItems.MoveDownButton">
      <summary>Gets or sets the button control to move down the selected component(s) on the design surface.</summary>
      <returns>The button control to move down the selected component(s) on the design surface.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.DesignerItems.MoveDownDisabledButton">
      <summary>Gets or sets the disabled move down button.</summary>
      <returns>The disabled move down button.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.DesignerItems.MoveUpButton">
      <summary>Gets or sets the button control to move up the selected component(s) on the design surface.</summary>
      <returns>The button control to move up the selected component(s) on the design surface.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.DesignerItems.MoveUpDisabledButton">
      <summary>Gets or sets the disabled move up button.</summary>
      <returns>The disabled move up button.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.DesignerItems.Overview">
      <summary>Gets or sets the control for viewing the entire workflow map.</summary>
      <returns>The control for viewing the entire workflow map.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.DesignerItems.OverviewWindowCloseButton">
      <summary>Gets or sets the button control for closing overview map.</summary>
      <returns>The button control for closing overview map.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.DesignerItems.PanMode">
      <summary>Gets or sets the control that contains the pan mode.</summary>
      <returns>The control that contains the pan mode.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.DesignerItems.ResizeGrip">
      <summary>Gets or sets the control that enables a window to change its size.</summary>
      <returns>The control that enables a window to change its size.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.DesignerItems.TextBoxErrorValidation">
      <summary>Gets or sets the control used to display the result of warning validation.</summary>
      <returns>The control used to display the result of the text box error validation.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.DesignerItems.WarningValidation">
      <summary>Gets or sets the control used to display the result of the warning validation.</summary>
      <returns>The control used to display the result of the warning validation.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.DesignerItems.WorkflowErrorValidation">
      <summary>Gets or sets the control used to display the result of the workflow error validation.</summary>
      <returns>The control used to display the result of the workflow error validation.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.DesignerItems.Zoom">
      <summary>Gets or sets the control that allows the window to be magnified.</summary>
      <returns>The control that allows the window to be magnified</returns>
    </member>
    <member name="T:System.Activities.Presentation.WorkflowElementDialog">
      <summary>Represents a dialog box for the workflow element.</summary>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowElementDialog.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Presentation.WorkflowElementDialog" /> class.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowElementDialog.Context">
      <summary>Gets or sets the editing context associated with this dialog box.</summary>
      <returns>Returns <see cref="T:System.Activities.Presentation.EditingContext" />.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowElementDialog.ContextProperty">
      <summary>Identifies the <see cref="P:System.Activities.Presentation.WorkflowElementDialog.Context" /> dependency property.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowElementDialog.EnableMaximizeButton">
      <summary>Gets or sets a Boolean value that determines whether the maximize button is enabled.</summary>
      <returns>true if the maximize button is enabled; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowElementDialog.EnableMinimizeButton">
      <summary>Gets or sets a Boolean value that determines whether the minimize button is enabled.</summary>
      <returns>true if the minimize button is enabled; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowElementDialog.EnableOk(System.Boolean)">
      <summary>Enables or disables the OK button of the dialog based on the specified value.</summary>
      <param name="enabled">The OK button is enabled if this is true; otherwise, it is disabled. </param>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowElementDialog.HelpKeyword">
      <summary>Gets or sets the keyword used to display the F1 help topic related to the dialog.</summary>
      <returns>Returns a<see cref="T:System.String" /> that contains the keyword.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowElementDialog.ModelItem">
      <summary>Gets or sets the <see cref="T:System.Activities.Presentation.Model.ModelItem" /> associated with this dialog box.</summary>
      <returns>Returns <see cref="T:System.Activities.Presentation.Model.ModelItem" />.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowElementDialog.ModelItemProperty">
      <summary>Identifies the <see cref="P:System.Activities.Presentation.WorkflowElementDialog.ModelItem" /> dependency property.</summary>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowElementDialog.OnInitialized(System.EventArgs)">
      <summary>Raises the Initialized event.</summary>
      <param name="e">Contains event data.</param>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowElementDialog.OnModelItemChanged(System.Object)">
      <summary>When overridden in a derived class, occurs when the <see cref="T:System.Activities.Presentation.Model.ModelItem" /> is changed.</summary>
      <param name="newItem">The new <see cref="T:System.Activities.Presentation.Model.ModelItem" />.</param>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowElementDialog.OnWorkflowElementDialogClosed(System.Nullable{System.Boolean})">
      <summary>When overridden in a derived class, performs cleanup operations when the dialog is closed.</summary>
      <param name="dialogResult">A Boolean value that indicates how the dialog was closed by the user.</param>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowElementDialog.Owner">
      <summary>Gets or sets the owner of this dialog box.</summary>
      <returns>Returns <see cref="T:System.Windows.DependencyObject" />.</returns>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowElementDialog.Show">
      <summary>Displays the dialog window.</summary>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowElementDialog.ShowOkCancel">
      <summary>Displays the dialog with OK and Cancel buttons and returns after the dialog is closed.</summary>
      <returns>true if the user accepted the dialog; false if the user cancelled the dialog.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowElementDialog.Title">
      <summary>Gets or sets the title of this dialog box.</summary>
      <returns>Returns <see cref="T:System.String" />.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowElementDialog.TitleProperty">
      <summary>Identifies the <see cref="P:System.Activities.Presentation.WorkflowElementDialog.Title" /> dependency property.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowElementDialog.WindowResizeMode">
      <summary>Gets or sets the resize mode of the window.</summary>
      <returns>Returns a <see cref="T:System.Windows.ResizeMode" /> value.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowElementDialog.WindowResizeModeProperty">
      <summary>Identifies the <see cref="P:System.Activities.Presentation.WorkflowElementDialog.WindowResizeMode" /> dependency property.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowElementDialog.WindowSizeToContent">
      <summary>Gets or sets a value that indicates whether a window will automatically size itself to fit the size of its content.</summary>
      <returns>Returns a <see cref="T:System.Windows.SizeToContent" /> value.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowElementDialog.WindowSizeToContentProperty">
      <summary>Identifies the <see cref="P:System.Activities.Presentation.WorkflowElementDialog.WindowSizeToContent" /> dependency property.</summary>
    </member>
    <member name="T:System.Activities.Presentation.WorkflowFileItem">
      <summary>Represents a<see cref="T:System.Activities.Presentation.ContextItem" /> that is published in the editing context and that provides information about the file that the current editing session is based on. Note that it is possible that the <see cref="T:System.Activities.Presentation.WorkflowFileItem" /> value is null, for instance if a <see cref="T:System.Activities.Presentation.WorkflowDesigner" /> operates directly on an object instance and does not serialize into a file-based format.</summary>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowFileItem.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Presentation.WorkflowFileItem" /> class.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowFileItem.ItemType">
      <summary>Returns the item type for this file item.</summary>
      <returns>Returns <see cref="T:System.Type" />.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowFileItem.LoadedFile">
      <summary>Returns the name of the file that is being loaded.</summary>
      <returns>Returns <see cref="T:System.String" />.</returns>
    </member>
    <member name="T:System.Activities.Presentation.WorkflowItemPresenter">
      <summary>Provides a visual editor to edit ModelItem objects, and provides an area for the user to drag and drop, and otherwise edit composed elements. </summary>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowItemPresenter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Presentation.WorkflowItemPresenter" /> class.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowItemPresenter.AllowedItemType">
      <summary>Gets or sets the AllowedItemType.</summary>
      <returns>A Type that contains the allowed item.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowItemPresenter.AllowedItemTypeProperty">
      <summary>Identifies the <see cref="P:System.Activities.Presentation.WorkflowItemPresenter.AllowedItemType" /> dependency property.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowItemPresenter.DroppingTypeResolvingOptions">
      <summary>Gets or sets the <see cref="T:System.Activities.Presentation.View.TypeResolvingOptions" /> for the <see cref="T:System.Activities.Presentation.WorkflowItemPresenter" />.</summary>
      <returns>Returns a <see cref="T:System.Activities.Presentation.View.TypeResolvingOptions" />.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowItemPresenter.DroppingTypeResolvingOptionsProperty">
      <summary>Identifies the <see cref="P:System.Activities.Presentation.WorkflowItemPresenter.DroppingTypeResolvingOptions" /> dependency property.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowItemPresenter.HintText">
      <summary>Gets or sets the string that contains the hint text for the <see cref="T:System.Activities.Presentation.WorkflowItemPresenter" /> control.</summary>
      <returns>The hint text for the <see cref="T:System.Activities.Presentation.WorkflowItemPresenter" /> control.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowItemPresenter.HintTextProperty">
      <summary>Identifies the <see cref="P:System.Activities.Presentation.WorkflowItemPresenter.HintText" /> dependency property.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowItemPresenter.IsDefaultContainer">
      <summary>Gets or sets a value that indicates whether this is the default container.</summary>
      <returns>true if this is the default container; otherwise, false.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowItemPresenter.IsDefaultContainerProperty">
      <summary>Identifies the <see cref="P:System.Activities.Presentation.WorkflowItemPresenter.IsDefaultContainer" /> dependency property.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowItemPresenter.Item">
      <summary>Gets or sets the current item of the <see cref="T:System.Activities.Presentation.WorkflowItemPresenter" /> control.</summary>
      <returns>The ModelItem associated with the <see cref="T:System.Activities.Presentation.WorkflowItemPresenter" /> control.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowItemPresenter.ItemProperty">
      <summary>Identifies the <see cref="P:System.Activities.Presentation.WorkflowItemPresenter.Item" /> dependency property.</summary>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowItemPresenter.System#Activities#Presentation#ICompositeView#CanPasteItems(System.Collections.Generic.List{System.Object})">
      <summary>Returns a value that indicates whether the specified objects can be pasted.</summary>
      <returns>true if the specified objects can be pasted; otherwise, false.</returns>
      <param name="itemsToPaste">A list of items to be pasted.</param>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowItemPresenter.System#Activities#Presentation#ICompositeView#OnItemMoved(System.Activities.Presentation.Model.ModelItem)">
      <summary>Invoked after the start of a move operation to complete the moving of the specified item.</summary>
      <param name="modelItem">The item to move.</param>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowItemPresenter.System#Activities#Presentation#ICompositeView#OnItemsCopied(System.Collections.Generic.List{System.Activities.Presentation.Model.ModelItem})">
      <summary>Invoked after the start of a copy operation to complete the copying of the specified items.</summary>
      <returns>The items cloned from the specified items.</returns>
      <param name="itemsToCopy">The items to copy.</param>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowItemPresenter.System#Activities#Presentation#ICompositeView#OnItemsCut(System.Collections.Generic.List{System.Activities.Presentation.Model.ModelItem})">
      <summary>Invoked after the start of a cut operation to complete the cutting of the specified items.</summary>
      <returns>The items cloned from the specified items.</returns>
      <param name="itemsToCut">The items to cut.</param>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowItemPresenter.System#Activities#Presentation#ICompositeView#OnItemsDelete(System.Collections.Generic.List{System.Activities.Presentation.Model.ModelItem})">
      <summary>Invoked after the start of a delete operation to complete the deletion of the specified items.</summary>
      <param name="itemsToDelete">The items to delete.</param>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowItemPresenter.System#Activities#Presentation#ICompositeView#OnItemsPasted(System.Collections.Generic.List{System.Object},System.Collections.Generic.List{System.Object},System.Windows.Point,System.Activities.Presentation.WorkflowViewElement)">
      <summary>Invoked after the start of a paste operation to complete the pasting of the specified items.</summary>
      <param name="itemsToPaste">The items to paste.</param>
      <param name="metaData">The metadata associated with the items to paste.</param>
      <param name="pastePoint">The location where to paste the items.</param>
      <param name="pastePointReference">A reference to the paste location.</param>
    </member>
    <member name="T:System.Activities.Presentation.WorkflowItemsPresenter">
      <summary>Represents a control that can be used to present a collection of objects on a design surface.</summary>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowItemsPresenter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Presentation.WorkflowItemsPresenter" /> class.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowItemsPresenter.AllowedItemType">
      <summary>Gets or sets the type of item  supported by the presenter.</summary>
      <returns>The Type of item supported by the presenter.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowItemsPresenter.AllowedItemTypeProperty">
      <summary>Identifies the <see cref="P:System.Activities.Presentation.WorkflowItemsPresenter.AllowedItemType" /> dependency property.</summary>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowItemsPresenter.CanPasteItems(System.Collections.Generic.List{System.Object})">
      <summary>Returns a Boolean that indicates whether the specified objects can be pasted. 
</summary>
      <returns>true if the specified list of objects can be pasted; otherwise, false.</returns>
      <param name="itemsToPaste">The list of objects to be pasted.</param>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowItemsPresenter.DroppingTypeResolvingOptions">
      <summary>Gets or sets the object for resolving types used by the <see cref="T:System.Activities.Presentation.WorkflowItemPresenter" />.</summary>
      <returns>A <see cref="T:System.Activities.Presentation.View.TypeResolvingOptions" /> object for resolving types used by the <see cref="T:System.Activities.Presentation.WorkflowItemsPresenter" />.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowItemsPresenter.DroppingTypeResolvingOptionsProperty">
      <summary>Identifies the <see cref="P:System.Activities.Presentation.WorkflowItemPresenter.DroppingTypeResolvingOptions" /> dependency property.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowItemsPresenter.FooterTemplate">
      <summary>Gets or sets the DataTemplate that defines how the footer section of the <see cref="T:System.Activities.Presentation.WorkflowItemsPresenter" /> control is displayed.</summary>
      <returns>A DataTemplate that defines how the footer section of the <see cref="T:System.Activities.Presentation.WorkflowItemsPresenter" /> control is displayed.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowItemsPresenter.FooterTemplateProperty">
      <summary>Identifies the <see cref="P:System.Activities.Presentation.WorkflowItemsPresenter.FooterTemplate" /> dependency property.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowItemsPresenter.HeaderTemplate">
      <summary>Gets or sets the DataTemplate that defines how the header section of the <see cref="T:System.Activities.Presentation.WorkflowItemsPresenter" /> control is displayed.</summary>
      <returns>A DataTemplate that defines how the header section of the <see cref="T:System.Activities.Presentation.WorkflowItemsPresenter" /> control is displayed.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowItemsPresenter.HeaderTemplateProperty">
      <summary>Identifies the <see cref="P:System.Activities.Presentation.WorkflowItemsPresenter.HeaderTemplate" /> dependency property.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowItemsPresenter.HintText">
      <summary>Gets or sets the string that contains the hint text for the <see cref="T:System.Activities.Presentation.WorkflowItemsPresenter" /> control.</summary>
      <returns>The hint text for the <see cref="T:System.Activities.Presentation.WorkflowItemsPresenter" /> control.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowItemsPresenter.HintTextProperty">
      <summary>Identifies the <see cref="P:System.Activities.Presentation.WorkflowItemsPresenter.HintText" /> dependency property.</summary>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowItemsPresenter.IndexProperty">
      <summary>Identifies the index dependency property.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowItemsPresenter.IsDefaultContainer">
      <summary>Gets or sets a Boolean value that indicates whether the current designer is the default container.</summary>
      <returns>true if the current designer is the default container; otherwise, false.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowItemsPresenter.IsDefaultContainerProperty">
      <summary>Identifies the <see cref="P:System.Activities.Presentation.WorkflowItemsPresenter.IsDefaultContainer" /> dependency property.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowItemsPresenter.Items">
      <summary>Gets or sets the collection used to generate the content of the <see cref="T:System.Activities.Presentation.WorkflowItemsPresenter" />.</summary>
      <returns>A ModelItemCollection used to generate the content of the <see cref="T:System.Activities.Presentation.WorkflowItemsPresenter" />.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowItemsPresenter.ItemsPanel">
      <summary>Gets or sets the template that defines the panel that controls the layout of items.</summary>
      <returns>An ItemsPanelTemplate that defines the panel to use for the layout of the items.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowItemsPresenter.ItemsPanelProperty">
      <summary>Identifies the <see cref="P:System.Activities.Presentation.WorkflowItemsPresenter.ItemsPanel" /> dependency property.</summary>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowItemsPresenter.ItemsProperty">
      <summary>Identifies the <see cref="P:System.Activities.Presentation.WorkflowItemsPresenter.Items" /> dependency property.</summary>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowItemsPresenter.OnCreateAutomationPeer">
      <summary>Returns a <see cref="T:System.Activities.Presentation.WorkflowItemsPresenter" />-specific AutomationPeer implementation for the Windows Presentation Foundation (WPF) infrastructure. Implement this method in your derived class to add class handling for this event.</summary>
      <returns>The type-specific AutomationPeer implementation.</returns>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowItemsPresenter.OnDragEnter(System.Windows.DragEventArgs)">
      <summary>Occurs when an object is dragged into the control's bounds.</summary>
      <param name="e">Provides data for the drag event.</param>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowItemsPresenter.OnDragOver(System.Windows.DragEventArgs)">
      <summary>Occurs when an object is dragged over the control's bounds.</summary>
      <param name="e">Provides data for the drag event.</param>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowItemsPresenter.OnDrop(System.Windows.DragEventArgs)">
      <summary>Invoked when an object is dragged into the bounds of a <see cref="T:System.Activities.Presentation.WorkflowItemsPresenter" /> control. Implement this method in your derived class to add class handling for this event.</summary>
      <param name="e">The DragEventArgs instance that contains the event data.</param>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowItemsPresenter.OnInitialized(System.EventArgs)">
      <summary>Invoked when a <see cref="T:System.Activities.Presentation.WorkflowItemsPresenter" /> object is initialized. Implement this method in your derived class to add class handling for this event.</summary>
      <param name="e">The EventArgs instance that contains the event data.</param>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowItemsPresenter.OnItemMoved(System.Activities.Presentation.Model.ModelItem)">
      <summary>Informs the <see cref="T:System.Activities.Presentation.WorkflowItemsPresenter" /> that a <see cref="T:System.Activities.Presentation.Model.ModelItem" /> was moved.</summary>
      <param name="modelItem">The <see cref="T:System.Activities.Presentation.Model.ModelItem" /> that was moved.</param>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowItemsPresenter.OnItemsCopied(System.Collections.Generic.List{System.Activities.Presentation.Model.ModelItem})">
      <summary>Occurs when the specified <see cref="T:System.Activities.Presentation.Model.ModelItem" /> instances are cloned.</summary>
      <returns>The copied items.</returns>
      <param name="itemsToCopy">The <see cref="T:System.Activities.Presentation.Model.ModelItem" /> instances to be copied.</param>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowItemsPresenter.OnItemsCut(System.Collections.Generic.List{System.Activities.Presentation.Model.ModelItem})">
      <summary>Occurs when the specified <see cref="T:System.Activities.Presentation.Model.ModelItem" /> instances are cut.</summary>
      <returns>A clone of <paramref name="itemsToCut" />.</returns>
      <param name="itemsToCut">The <see cref="T:System.Activities.Presentation.Model.ModelItem" /> instances to be cut.</param>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowItemsPresenter.OnItemsDelete(System.Collections.Generic.List{System.Activities.Presentation.Model.ModelItem})">
      <summary>Occurs when the specified <see cref="T:System.Activities.Presentation.Model.ModelItem" /> instances are deleted.</summary>
      <param name="itemsToDelete">The <see cref="T:System.Activities.Presentation.Model.ModelItem" /> instances to be deleted.</param>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowItemsPresenter.OnItemsMoved(System.Collections.Generic.List{System.Activities.Presentation.Model.ModelItem})">
      <summary>Invoked after the start of a move operation to complete the moving of the specified item.</summary>
      <param name="movedItems">The items that has been moved.</param>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowItemsPresenter.OnItemsPasted(System.Collections.Generic.List{System.Object},System.Collections.Generic.List{System.Object},System.Windows.Point,System.Activities.Presentation.WorkflowViewElement)">
      <summary>Pastes the specified <see cref="T:System.Activities.Presentation.Model.ModelItem" /> instances to the specified location.</summary>
      <param name="itemsToPaste">The items to be pasted.</param>
      <param name="metaData">The metadata associated with the items to be pasted.</param>
      <param name="pastePoint">The location of the paste.</param>
      <param name="pastePointReference">A reference to the paste point.</param>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowItemsPresenter.SortSelectedItems(System.Collections.Generic.List{System.Activities.Presentation.Model.ModelItem})">
      <summary>Sorts the selected items.</summary>
      <returns>The list of the sorted items.</returns>
      <param name="selectedItems">The selected items to be sorted.</param>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowItemsPresenter.SpacerTemplate">
      <summary>Gets or sets the DataTemplate that defines how the spacer of the <see cref="T:System.Activities.Presentation.WorkflowItemsPresenter" /> control is displayed.</summary>
      <returns>A DataTemplate that defines how the spacer of the <see cref="T:System.Activities.Presentation.WorkflowItemsPresenter" /> control is displayed.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowItemsPresenter.SpacerTemplateProperty">
      <summary>Identifies the <see cref="P:System.Activities.Presentation.WorkflowItemsPresenter.SpacerTemplate" /> dependency property.</summary>
    </member>
    <member name="T:System.Activities.Presentation.WorkflowViewElement">
      <summary>Specifies the base class for any UI element that appears on the Windows Workflow Foundation designer canvas and that visually represents an instance of an atomic item that can be edited.</summary>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowViewElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Presentation.WorkflowViewElement" /> class.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowViewElement.Collapsible">
      <summary>Gets or sets a value that indicates whether the element can be collapsed.</summary>
      <returns>true if the element can be collapsed; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowViewElement.CompositeViews">
      <summary>Gets the list of all composite views.</summary>
      <returns>The list of all composite views.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowViewElement.Context">
      <summary>Gets or sets the editing context that is shared by all elements contained in a workflow designer.</summary>
      <returns>The <see cref="T:System.Activities.Presentation.EditingContext" /> object for the workflow designer that contains the workflow view element.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowViewElement.ContextProperty">
      <summary>Identifies the <see cref="P:System.Activities.Presentation.WorkflowViewElement.Context" /> dependency property. This is a read-only field.</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowViewElement.DefaultCompositeView">
      <summary>Gets the default composite view.</summary>
      <returns>The default composite view.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowViewElement.Designer">
      <summary>Gets the designer associated with the workflow view element.</summary>
      <returns>The designer associated with the workflow view element.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowViewElement.DragHandle">
      <summary>Gets or sets the drag handle for the workflow view element.</summary>
      <returns>The drag handle for the workflow view element.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowViewElement.ExpandState">
      <summary>Gets or sets a value that indicates whether the view state of the element is expanded.</summary>
      <returns>true if the view state of the element is expanded; otherwise, false.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowViewElement.ExpandStateProperty">
      <summary>Identifies the <see cref="P:System.Activities.Presentation.WorkflowViewElement.ExpandState" /> dependency property. This is a read-only field.</summary>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowViewElement.GetAutomationHelpText">
      <summary>When implemented in a derived class, retrieves the automation help text.</summary>
      <returns>The default implementation is to return an empty <see cref="T:System.String" />.</returns>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowViewElement.GetAutomationIdMemberName">
      <summary>When implemented in a derived class, gets the name of a property of the model item associated with the element that is used as automation ID.</summary>
      <returns>The name to use as automation ID. The base class always returns null.</returns>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowViewElement.GetAutomationItemStatus">
      <summary>When implemented in a derived class, retrieves the automation item status.</summary>
      <returns>The default implementation is to return an empty <see cref="T:System.String" />.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowViewElement.IsReadOnly">
      <summary>Gets or sets a value that indicates whether the workflow view element is read only.</summary>
      <returns>true if the element is read only; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowViewElement.IsRootDesigner">
      <summary>Gets or sets a value that indicates whether the specified designer is the root designer for this element.</summary>
      <returns>true if the specified designer is the root designer; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowViewElement.ModelItem">
      <summary>Gets or sets the underlying <see cref="T:System.Activities.Presentation.Model.ModelItem" /> object associated with the workflow view element.</summary>
      <returns>A <see cref="T:System.Activities.Presentation.Model.ModelItem" /> object that is a wrapper around a model instance or an in-memory representation of the underlying workflow.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowViewElement.ModelItemProperty">
      <summary>Identifies the <see cref="P:System.Activities.Presentation.WorkflowViewElement.ModelItem" /> dependency property. This is a read-only field.</summary>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowViewElement.OnContextMenuLoaded(System.Windows.Controls.ContextMenu)">
      <summary>Invoked when the context menu is loaded. Implement this method in a derived class to handle this event.</summary>
      <param name="menu">The <see cref="T:System.Windows.Controls.ContextMenu" /> that is loaded.</param>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowViewElement.OnCreateAutomationPeer">
      <summary>Returns a <see cref="T:System.Activities.Presentation.WorkflowViewElement" />-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementation for the Windows Presentation Foundation (WPF) infrastructure.</summary>
      <returns>The type-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementation.</returns>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowViewElement.OnDragEnter(System.Windows.DragEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.UIElement.DragEnter" /> event.</summary>
      <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowViewElement.OnDragOver(System.Windows.DragEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.UIElement.DragOver" /> event.</summary>
      <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowViewElement.OnEditAnnotation">
      <summary>Occurs when the annotation is edited.</summary>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowViewElement.OnInitialized(System.EventArgs)">
      <summary>Raises the <see cref="E:System.Windows.FrameworkElement.Initialized" /> event.</summary>
      <param name="e">The <see cref="T:System.EventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowViewElement.OnModelItemChanged(System.Object)">
      <summary>Invoked when the underlying model item is changed. Implement this method in a derived class to handle this event.</summary>
      <param name="newItem">An <see cref="T:System.Object" /> that represents the changed state of the model item.</param>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowViewElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when the mouse button is pressed.</summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> instance that contains the event data. This event data reports details about the mouse button that was pressed and the state handled.</param>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowViewElement.OnMouseMove(System.Windows.Input.MouseEventArgs)">
      <summary>Invoked when the mouse is moved.</summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> instance that contains the event data.</param>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowViewElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when the mouse button is released.</summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> instance that contains the event data. The event data reports that the mouse button was released.</param>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowViewElement.OnPreviewDragEnter(System.Windows.DragEventArgs)">
      <summary>Invoked when an unhandled drag attached to the specified event enters an element in its route that is derived from this class.</summary>
      <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowViewElement.OnPreviewDragLeave(System.Windows.DragEventArgs)">
      <summary>Invoked when an unhandled drag attached to the specified event leaves an element in its route that is derived from this class.</summary>
      <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowViewElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled mouse release attached to the specified event reaches an element in its route that is derived from this class.</summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that one or more mouse buttons were released.</param>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowViewElement.OnReadOnlyChanged(System.Boolean)">
      <summary>Invoked when the read-only property is changed.</summary>
      <param name="isReadOnly">true to indicate that the element is read-only; otherwise, false.</param>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowViewElement.OnShowExpandedChanged(System.Boolean)">
      <summary>Invoked when the show expanded property is changed.</summary>
      <param name="newValue">true to indicate that the value of the show expanded property is changed; otherwise, false.</param>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowViewElement.PinState">
      <summary>Gets or sets a value that indicates whether the <see cref="P:System.Activities.Presentation.WorkflowViewElement.ExpandState" /> property should take precedence over other states that can be used to expand or collapse the <see cref="T:System.Activities.Presentation.WorkflowViewElement" />.</summary>
      <returns>true if the <see cref="P:System.Activities.Presentation.WorkflowViewElement.ExpandState" /> property should be used to expand or collapse the <see cref="T:System.Activities.Presentation.WorkflowViewElement" /> object; otherwise, false.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowViewElement.PinStateProperty">
      <summary>Identifies the <see cref="P:System.Activities.Presentation.WorkflowViewElement.PinState" /> dependency property. This is a read-only field.</summary>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowViewElement.RegisterCompositeView(System.Activities.Presentation.ICompositeView)">
      <summary>Adds the specified composite view to the list of composite views.</summary>
      <param name="container">The composite view to register.</param>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowViewElement.RegisterDefaultCompositeView(System.Activities.Presentation.ICompositeView)">
      <summary>Adds the specified composite view as the default composite view.</summary>
      <param name="container">The composite view.</param>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowViewElement.ShowExpanded">
      <summary>Gets a value that indicates whether the workflow view element is shown in an expanded view.</summary>
      <returns>true if the element is shown in an expanded view; otherwise, false.</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowViewElement.ShowExpandedProperty">
      <summary>Identifies the <see cref="P:System.Activities.Presentation.WorkflowViewElement.ShowExpanded" /> dependency property. This is a read-only field.</summary>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowViewElement.UnregisterCompositeView(System.Activities.Presentation.ICompositeView)">
      <summary>Removes the specified composite view from the list of composite views.</summary>
      <param name="container">The composite view to unregister.</param>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowViewElement.UnregisterDefaultCompositeView(System.Activities.Presentation.ICompositeView)">
      <summary>Removes the specified default composite view.</summary>
      <param name="container">The composite view to remove.</param>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowViewElement.ViewService">
      <summary>Gets the <see cref="T:System.Activities.Presentation.Services.ViewService" /> associated with the workflow view element.</summary>
      <returns>The view service associated with the workflow view element.</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowViewElement.ViewStateService">
      <summary>Gets the <see cref="T:System.Activities.Presentation.View.ViewStateService" /> defined in the <see cref="T:System.Activities.Presentation.EditingContext" />. A shortcut to this property is by accessing <see cref="P:System.Activities.Presentation.EditingContext.Services" />.</summary>
      <returns>The <see cref="T:System.Activities.Presentation.View.ViewStateService" /> defined in the <see cref="T:System.Activities.Presentation.EditingContext" />.</returns>
    </member>
    <member name="T:System.Activities.Presentation.XamlLoadErrorInfo">
      <summary>Contains information about the error generated by the XAML Reader when loading an XML file, including the name of the file and the location in the file where the error occurred. </summary>
    </member>
    <member name="M:System.Activities.Presentation.XamlLoadErrorInfo.#ctor(System.String,System.Int32,System.Int32)">
      <summary>Creates an instance of a <see cref="T:System.Activities.Presentation.XamlLoadErrorInfo" /> with a specified message about the error and with the line number and position in the XAML file loaded where the error occurred.</summary>
      <param name="message">A message containing information about the load error.</param>
      <param name="lineNumber">The line number of the XAML file where the load error occurred.</param>
      <param name="linePosition">The line position of the XAML file where the load error occurred.</param>
    </member>
    <member name="P:System.Activities.Presentation.XamlLoadErrorInfo.FileName">
      <summary>Gets or sets the name of the XAML file in which the load error occurred</summary>
      <returns>The name of the XAML file in which the load error occurred.</returns>
    </member>
    <member name="P:System.Activities.Presentation.XamlLoadErrorInfo.LineNumber">
      <summary>Gets or sets the line number of the XAML file where the load error occurred.</summary>
      <returns>The line number of the XAML file where the load error occurred.</returns>
    </member>
    <member name="P:System.Activities.Presentation.XamlLoadErrorInfo.LinePosition">
      <summary>Gets or sets the line position of the XAML file where the load error occurred.</summary>
      <returns>The line position of the XAML file where the load error occurred</returns>
    </member>
    <member name="P:System.Activities.Presentation.XamlLoadErrorInfo.Message">
      <summary>Gets or sets information about the error generated by the XAML Reader when loading an XML file.</summary>
      <returns>Information about the error generated by the XAML Reader when loading an XML file.</returns>
    </member>
    <member name="T:System.Activities.Presentation.Annotations.Annotation">
      <summary> Provides methods to access annotation attached properties. </summary>
    </member>
    <member name="F:System.Activities.Presentation.Annotations.Annotation.AnnotationTextProperty">
      <summary>The attachable property for annotation text.</summary>
    </member>
    <member name="F:System.Activities.Presentation.Annotations.Annotation.AnnotationTextPropertyName">
      <summary>The property name to access annotation in a ModelItem.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Annotations.Annotation.GetAnnotationText(System.Object)">
      <summary>Gets the annotation text of an object.</summary>
      <returns>An annotation text of an object.</returns>
      <param name="instance">The instance to get annotation.</param>
    </member>
    <member name="M:System.Activities.Presentation.Annotations.Annotation.SetAnnotationText(System.Object,System.String)">
      <summary>Sets an annotation of an object.</summary>
      <param name="instance">The instance to set annotation text.</param>
      <param name="annotationText">The annotation text to be set.</param>
    </member>
    <member name="T:System.Activities.Presentation.Converters.ArgumentToExpressionConverter">
      <summary>Defines the mapping between arguments and expressions and provides the functionality to convert between these objects. Typically, this converter is used declaratively when using an <see cref="T:System.Activities.Presentation.View.ExpressionTextBox" /> in a custom activity designer. </summary>
    </member>
    <member name="M:System.Activities.Presentation.Converters.ArgumentToExpressionConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Presentation.Converters.ArgumentToExpressionConverter" /> class. </summary>
    </member>
    <member name="M:System.Activities.Presentation.Converters.ArgumentToExpressionConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>Converts the specified argument into an expression.</summary>
      <returns>An instance of <see cref="T:System.Object" /> that contains the converted Argument.Expression..Contains the converted Argument.Expression.</returns>
      <param name="value">The value produced by the binding source.</param>
      <param name="targetType">The type of the binding target property.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use in the converter.</param>
    </member>
    <member name="M:System.Activities.Presentation.Converters.ArgumentToExpressionConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>Converts the specified Argument.Expression into an argument. </summary>
      <returns>Returns <see cref="T:System.Object" />.Contains the converted argument.</returns>
      <param name="value">The Argument.Expression to convert. </param>
      <param name="targetType">Not implemented. </param>
      <param name="parameter">Not implemented. </param>
      <param name="culture">Not implemented. </param>
    </member>
    <member name="T:System.Activities.Presentation.Converters.ArgumentToExpressionModelItemConverter">
      <summary>Defines the mapping between arguments and expression model items and provides the functionality to convert between these objects.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Converters.ArgumentToExpressionModelItemConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Presentation.Converters.ArgumentToExpressionModelItemConverter" /> class.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Converters.ArgumentToExpressionModelItemConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>Converts the specified argument to an expression model item. </summary>
      <returns>Returns a <see cref="T:System.Object" /> that contains the expression model item.</returns>
      <param name="values">An array that contains the argument to convert. Only the array item at index 1 is used.</param>
      <param name="targetType">Not used in this implementation.</param>
      <param name="parameter">Not used in this implementation.</param>
      <param name="culture">Not used in this implementation.</param>
    </member>
    <member name="M:System.Activities.Presentation.Converters.ArgumentToExpressionModelItemConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
      <summary>Converts the specified expression model item to an argument.</summary>
      <returns>Returns a <see cref="T:System.Object" /> that contains the argument.</returns>
      <param name="value">The model item to convert. </param>
      <param name="targetTypes">Not used in this implementation. </param>
      <param name="parameter">Not used in this implementation.</param>
      <param name="culture">Not used in this implementation. </param>
    </member>
    <member name="T:System.Activities.Presentation.Converters.ModelPropertyEntryToModelItemConverter">
      <summary>Used to convert UI property data into <see cref="T:System.Activities.Presentation.Model.ModelItem" /> and <see cref="T:System.Activities.Presentation.EditingContext" /> objects that describe the UI property. </summary>
    </member>
    <member name="M:System.Activities.Presentation.Converters.ModelPropertyEntryToModelItemConverter.#ctor">
      <summary>Creates a new <see cref="T:System.Activities.Presentation.Converters.ModelPropertyEntryToModelItemConverter" />.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Converters.ModelPropertyEntryToModelItemConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>Converts a <see cref="T:System.Activities.Presentation.Model.ModelItem" /> derived object to a <see cref="T:System.Activities.Presentation.Model.ModelItem" />.</summary>
      <returns>Returns an <see cref="T:System.Object" /> that contains the <see cref="T:System.Activities.Presentation.Model.ModelItem" />, <see cref="T:System.Activities.Presentation.EditingContext" />, and value of the UI property.</returns>
      <param name="value">The <see cref="T:System.Activities.Presentation.Model.ModelItem" /> derived object to convert.</param>
      <param name="targetType">Not used.</param>
      <param name="parameter">Not used.</param>
      <param name="culture">Not used.</param>
    </member>
    <member name="M:System.Activities.Presentation.Converters.ModelPropertyEntryToModelItemConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>Converts a <see cref="T:System.Activities.Presentation.Model.ModelItem" /> derived object to a <see cref="T:System.Activities.Presentation.Model.ModelItem" /></summary>
      <returns>Returns an <see cref="T:System.Object" /> that contains the <see cref="T:System.Activities.Presentation.Model.ModelItem" />, <see cref="T:System.Activities.Presentation.EditingContext" />, and value of the UI property.</returns>
      <param name="values">An array of <see cref="T:System.Activities.Presentation.Model.ModelItem" /> derived objects to convert.</param>
      <param name="targetType">Not used.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">Not used.</param>
    </member>
    <member name="M:System.Activities.Presentation.Converters.ModelPropertyEntryToModelItemConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>Not supported in this release.</summary>
      <returns>Returns an <see cref="T:System.Object" />.</returns>
      <param name="value">Not used.</param>
      <param name="targetType">Not used.</param>
      <param name="parameter">Not used.</param>
      <param name="culture">Not used.</param>
    </member>
    <member name="M:System.Activities.Presentation.Converters.ModelPropertyEntryToModelItemConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
      <summary>Not supported in this release.</summary>
      <returns>Returns an <see cref="T:System.Object" />.</returns>
      <param name="value">Not used.</param>
      <param name="targetTypes">Not used.</param>
      <param name="parameter">Not used.</param>
      <param name="culture">Not used.</param>
    </member>
    <member name="T:System.Activities.Presentation.Converters.ModelPropertyEntryToOwnerActivityConverter">
      <summary>Converts a ModelPropertyEntry to a ModelItem that owns the property. </summary>
    </member>
    <member name="M:System.Activities.Presentation.Converters.ModelPropertyEntryToOwnerActivityConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Presentation.Converters.ModelPropertyEntryToOwnerActivityConverter" /> class.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Converters.ModelPropertyEntryToOwnerActivityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>Converts a ModelPropertyEntry to a ModelItem that owns the property.</summary>
      <returns>Returns <see cref="T:System.Object" />.</returns>
      <param name="value">The value that is produced by the binding target.</param>
      <param name="targetType">The type to convert to.</param>
      <param name="parameter">The converter parameter to use. You can pass a Boolean value in. By default, this converter will always return the parent model item that is of type Activity. If false is passed to this method, the converter will simply return the first parent model item, which might not be a model item that points to a Activity.</param>
      <param name="culture">The culture to use in the converter.</param>
    </member>
    <member name="M:System.Activities.Presentation.Converters.ModelPropertyEntryToOwnerActivityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>Calling this method is not supported.</summary>
      <returns>Returns <see cref="T:System.Object" />.</returns>
      <param name="value">The value that is produced by the binding target.</param>
      <param name="targetType">The type to convert to.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
    </member>
    <member name="T:System.Activities.Presentation.Converters.ModelToObjectValueConverter">
      <summary>Converts a ModelItem to the value of the inner object. </summary>
    </member>
    <member name="M:System.Activities.Presentation.Converters.ModelToObjectValueConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Presentation.Converters.ModelToObjectValueConverter" /> class. </summary>
    </member>
    <member name="M:System.Activities.Presentation.Converters.ModelToObjectValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>Converts the specified object to its inner value.</summary>
      <returns>Returns a <see cref="T:System.Object" /> that contains the inner value.</returns>
      <param name="value">The ModelItem to convert.</param>
      <param name="targetType">Not used in this implementation. </param>
      <param name="parameter">Not used in this implementation.</param>
      <param name="culture">Not used in this implementation.</param>
    </member>
    <member name="M:System.Activities.Presentation.Converters.ModelToObjectValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>Returns the specified value, unmodified.</summary>
      <returns>Returns a <see cref="T:System.Object" /> that contains the unmodified value.</returns>
      <param name="value">The object to do nothing to.</param>
      <param name="targetType">Not used in this implementation.</param>
      <param name="parameter">Not used in this implementation.</param>
      <param name="culture">Not used in this implementation.</param>
    </member>
    <member name="T:System.Activities.Presentation.Converters.ObjectToModelValueConverter">
      <summary>Converts objects to model values. </summary>
    </member>
    <member name="M:System.Activities.Presentation.Converters.ObjectToModelValueConverter.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Presentation.Converters.ObjectToModelValueConverter" /> class. </summary>
    </member>
    <member name="M:System.Activities.Presentation.Converters.ObjectToModelValueConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>Converts the specified ModelPropertyEntry to a ModelItem that contains the original entry.</summary>
      <returns>Returns <see cref="T:System.Object" />.</returns>
      <param name="values">The ModelPropertyEntry to convert.</param>
      <param name="targetType">Not used in this implementation.</param>
      <param name="parameter">Not used in this implementation.</param>
      <param name="culture">Not used in this implementation.</param>
    </member>
    <member name="M:System.Activities.Presentation.Converters.ObjectToModelValueConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
      <summary>Converts the specified ModelItem to a ModelPropertyEntry. </summary>
      <returns>Returns a <see cref="T:System.Object" /> that contains the converted ModelPropertyEntry..</returns>
      <param name="value">The ModelItem to convert.</param>
      <param name="targetTypes">Not used in this implementation.</param>
      <param name="parameter">Not used in this implementation.</param>
      <param name="culture">Not used in this implementation.</param>
    </member>
    <member name="T:System.Activities.Presentation.Debug.BreakpointTypes">
      <summary>Represents an enumeration that provides settings for breakpoints.</summary>
    </member>
    <member name="F:System.Activities.Presentation.Debug.BreakpointTypes.Bounded">
      <summary>Represents a bounded breakpoint, which implements the where and when of breaking at a desired point in a program.</summary>
    </member>
    <member name="F:System.Activities.Presentation.Debug.BreakpointTypes.Conditional">
      <summary>Represents a conditional breakpoint, which is an expression that is evaluated to determine whether the breakpoint will occur.</summary>
    </member>
    <member name="F:System.Activities.Presentation.Debug.BreakpointTypes.Enabled">
      <summary>Represents that the breakpoint is enabled.</summary>
    </member>
    <member name="F:System.Activities.Presentation.Debug.BreakpointTypes.None">
      <summary>No breakpoint is set.</summary>
    </member>
    <member name="T:System.Activities.Presentation.Debug.DebuggerService">
      <summary>Manages the placement of breakpoints for a debugging process.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Debug.DebuggerService.#ctor(System.Activities.Presentation.EditingContext)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Presentation.Debug.DebuggerService" /> class with the specified editing context.</summary>
      <param name="context">The activity designer contextual state.</param>
    </member>
    <member name="P:System.Activities.Presentation.Debug.DebuggerService.CurrentContext">
      <summary>Gets or sets the current scope of execution in the source file.</summary>
      <returns>A position in the source file that marks the start of execution.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Debug.DebuggerService.CurrentLocation">
      <summary>Gets or sets the current location of execution.</summary>
      <returns>A location in the source file.</returns>
    </member>
    <member name="M:System.Activities.Presentation.Debug.DebuggerService.DeleteBreakpoint(System.Activities.Debugger.SourceLocation)">
      <summary>Deletes a breakpoint from its location in the source file.</summary>
      <param name="sourceLocation">A location in the source file.</param>
    </member>
    <member name="M:System.Activities.Presentation.Debug.DebuggerService.EnsureVisible(System.Activities.Debugger.SourceLocation)">
      <summary>Ensures that the debugger service is visible.</summary>
      <param name="sourceLocation">A location in the source file.</param>
    </member>
    <member name="M:System.Activities.Presentation.Debug.DebuggerService.GetBreakpointLocations">
      <summary>Returns a list of the latest breakpoint locations.</summary>
      <returns>A list of breakpoints of type <see cref="P:System.Activities.Presentation.Debug.BreakpointInfo.SourceLocation" /> culled from the source file.</returns>
    </member>
    <member name="M:System.Activities.Presentation.Debug.DebuggerService.GetExactLocation(System.Activities.Debugger.SourceLocation)">
      <summary>Returns an exact source file location based on the start and end line numbers of the activity in its serialized XAML form.</summary>
      <returns>An exact location in the source file.</returns>
      <param name="approximateLocation">A source file location known to be inexact.</param>
    </member>
    <member name="P:System.Activities.Presentation.Debug.DebuggerService.HideSourceFileName">
      <summary>Gets or sets a value that indicates whether the source file name in the viewer is hidden.</summary>
      <returns>true if the source file name is hidden; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.Presentation.Debug.DebuggerService.InsertBreakpoint(System.Activities.Debugger.SourceLocation,System.Activities.Presentation.Debug.BreakpointTypes)">
      <summary>Inserts a new breakpoint of the specified type at the specified location.</summary>
      <param name="sourceLocation">The location in the source file that receives the new breakpoint.</param>
      <param name="breakpointType">The type of the breakpoint; for example, None, Enabled, Bounded, or Conditional.</param>
    </member>
    <member name="P:System.Activities.Presentation.Debug.DebuggerService.IsDebugging">
      <summary>Gets or sets a value that indicates whether debugging is the current state.</summary>
      <returns>true if debugging is the current state; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.Presentation.Debug.DebuggerService.ResetBreakpoints">
      <summary>Resets breakpoints and prepares for breakpoint refresh.</summary>
    </member>
    <member name="P:System.Activities.Presentation.Debug.DebuggerService.SelectedLocation">
      <summary>Gets the currently selected location from the designer.</summary>
      <returns>The position in the source file that is currently selected.</returns>
    </member>
    <member name="M:System.Activities.Presentation.Debug.DebuggerService.UpdateBreakpoint(System.Activities.Debugger.SourceLocation,System.Activities.Presentation.Debug.BreakpointTypes)">
      <summary>Updates the appearance of a specified breakpoint to show the specified type.</summary>
      <param name="sourceLocation">The location of the breakpoint to update.</param>
      <param name="newBreakpointType">A new breakpoint type from the <see cref="T:System.Activities.Presentation.Debug.BreakpointTypes" /> enumeration.</param>
    </member>
    <member name="M:System.Activities.Presentation.Debug.DebuggerService.UpdateSourceLocations(System.Collections.Generic.Dictionary{System.Object,System.Activities.Debugger.SourceLocation})">
      <summary>Collects the new mapping of model item and breakpoints from SourceLocationMapping.</summary>
      <param name="newSourceLocationMapping">A list of model item and breakpoint pairs.</param>
    </member>
    <member name="T:System.Activities.Presentation.Debug.IDesignerDebugView">
      <summary>Provides functionality for an activity designer debugger view. </summary>
    </member>
    <member name="P:System.Activities.Presentation.Debug.IDesignerDebugView.CurrentContext">
      <summary>When implemented in a derived class, gets or sets the scope of execution within the source file.</summary>
      <returns>The starting point location for execution within the source file.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Debug.IDesignerDebugView.CurrentLocation">
      <summary>When implemented in a derived class, gets or sets the current location of execution in a file being processed by the debugger.</summary>
      <returns>The current location of execution in a file being processed by the debugger.</returns>
    </member>
    <member name="M:System.Activities.Presentation.Debug.IDesignerDebugView.DeleteBreakpoint(System.Activities.Debugger.SourceLocation)">
      <summary>When implemented in a derived class, removes a breakpoint at the specified location in the source file.</summary>
      <param name="sourceLocation">A specific location in a target source code file.</param>
    </member>
    <member name="M:System.Activities.Presentation.Debug.IDesignerDebugView.EnsureVisible(System.Activities.Debugger.SourceLocation)">
      <summary>Ensures that the <see cref="T:System.Activities.Presentation.Debug.IDesignerDebugView" /> is visible.</summary>
      <param name="sourceLocation">A specific location in a target source code file.</param>
    </member>
    <member name="M:System.Activities.Presentation.Debug.IDesignerDebugView.GetBreakpointLocations">
      <summary>When implemented in a derived class, returns a list of currently set breakpoint location-and-type pairs.</summary>
      <returns>A list of currently set breakpoint location-and-type pairs.</returns>
    </member>
    <member name="M:System.Activities.Presentation.Debug.IDesignerDebugView.GetExactLocation(System.Activities.Debugger.SourceLocation)">
      <summary>When implemented in a derived class, returns an exact location in a source file based upon an approximate location.</summary>
      <returns>An exact location within the source file.</returns>
      <param name="approximateLocation">A position within a source file that is known to be inexact.</param>
    </member>
    <member name="P:System.Activities.Presentation.Debug.IDesignerDebugView.HideSourceFileName">
      <summary>Gets or sets a value that indicates whether the Xaml source file name should be hidden.</summary>
      <returns>true if the Xaml source file name should be hidden; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.Presentation.Debug.IDesignerDebugView.InsertBreakpoint(System.Activities.Debugger.SourceLocation,System.Activities.Presentation.Debug.BreakpointTypes)">
      <summary>When implemented in a derived class, places a breakpoint at the specified location in a file.</summary>
      <param name="sourceLocation">A specific location in a target source code file.</param>
      <param name="breakpointType">The member of an enumeration of breakpoint types which may include Bounded, Conditional, Enabled, and None.</param>
    </member>
    <member name="P:System.Activities.Presentation.Debug.IDesignerDebugView.IsDebugging">
      <summary>When implemented in a derived class, gets or sets a value that indicates whether debugging is enabled.</summary>
      <returns>true if debugging is enabled; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.Presentation.Debug.IDesignerDebugView.ResetBreakpoints">
      <summary>When implemented in a derived class, resets the position of the breakpoint in a file.</summary>
    </member>
    <member name="P:System.Activities.Presentation.Debug.IDesignerDebugView.SelectedLocation">
      <summary>When implemented in a derived class, gets the selected <see cref="T:System.Activities.Debugger.SourceLocation" />.</summary>
      <returns>The selected source location.</returns>
    </member>
    <member name="M:System.Activities.Presentation.Debug.IDesignerDebugView.UpdateBreakpoint(System.Activities.Debugger.SourceLocation,System.Activities.Presentation.Debug.BreakpointTypes)">
      <summary>When implemented in a derived class, updates the type of the breakpoint at a specified location in a file.</summary>
      <param name="sourceLocation">A specific location in a target source code file.</param>
      <param name="breakpointType">A specified type of breakpoint; for example, line, method, or exception breakpoints.</param>
    </member>
    <member name="T:System.Activities.Presentation.Expressions.CreateExpressionFromStringCallback">
      <summary>Represents a delegate supplied by the custom expression editor to create an expression activity from string text.</summary>
    </member>
    <member name="T:System.Activities.Presentation.Expressions.ExpressionActivityEditor">
      <summary>Represents an expression activity editor.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Expressions.ExpressionActivityEditor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Presentation.Expressions.ExpressionActivityEditor" /> class.</summary>
    </member>
    <member name="P:System.Activities.Presentation.Expressions.ExpressionActivityEditor.AcceptsReturn">
      <summary>Gets or sets a value that indicates whether the expression activity accepts returns.</summary>
      <returns>True if the expression activity accepts returns; otherwise, false.</returns>
    </member>
    <member name="F:System.Activities.Presentation.Expressions.ExpressionActivityEditor.AcceptsReturnProperty">
      <summary>Represents the AcceptsReturn dependency property.</summary>
    </member>
    <member name="P:System.Activities.Presentation.Expressions.ExpressionActivityEditor.AcceptsTab">
      <summary>Gets or sets a value that indicates whether the expression activity accepts tabs.</summary>
      <returns>True if the expression activity accepts tabs; otherwise, false.</returns>
    </member>
    <member name="F:System.Activities.Presentation.Expressions.ExpressionActivityEditor.AcceptsTabProperty">
      <summary>Represents the AcceptsTab dependency property.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Expressions.ExpressionActivityEditor.BeginEdit">
      <summary>Begins an edit.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Expressions.ExpressionActivityEditor.CanCommit">
      <summary>Indicates whether the expression activity editor can be committed.</summary>
      <returns>true if the expression activity editor can be committed; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.Presentation.Expressions.ExpressionActivityEditor.Commit(System.Boolean)">
      <summary>Indicates whether the expression activity editor is committed.</summary>
      <returns>true if the expression activity editor is committed; otherwise, false.</returns>
      <param name="isExplicitCommit">true to indicate that the commit is explicit; otherwise, false.</param>
    </member>
    <member name="P:System.Activities.Presentation.Expressions.ExpressionActivityEditor.Context">
      <summary>Gets the editing context of the expression activity.</summary>
      <returns>The editing context of the expression activity.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Expressions.ExpressionActivityEditor.ExplicitCommit">
      <summary>Gets or sets a value that indicates whether the commit is explicit.</summary>
      <returns>True if the commit is explicit; otherwise, false.</returns>
    </member>
    <member name="F:System.Activities.Presentation.Expressions.ExpressionActivityEditor.ExplicitCommitProperty">
      <summary>Represents the ExplicitCommit dependency property.</summary>
    </member>
    <member name="P:System.Activities.Presentation.Expressions.ExpressionActivityEditor.Expression">
      <summary>Gets or sets the expression activity.</summary>
      <returns>The expression activity.</returns>
    </member>
    <member name="F:System.Activities.Presentation.Expressions.ExpressionActivityEditor.ExpressionProperty">
      <summary>Represents the Expression dependency property.</summary>
    </member>
    <member name="P:System.Activities.Presentation.Expressions.ExpressionActivityEditor.ExpressionType">
      <summary>Gets or sets the expression type activity.</summary>
      <returns>The expression type activity.</returns>
    </member>
    <member name="F:System.Activities.Presentation.Expressions.ExpressionActivityEditor.ExpressionTypeProperty">
      <summary>Represents the ExpressionType dependency property.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Expressions.ExpressionActivityEditor.GetExpressionActivityEditor(System.Object)">
      <summary>Gets the expression activity editor using the specified target.</summary>
      <returns>The expression activity editor.</returns>
      <param name="target">The property of the editor to get.</param>
    </member>
    <member name="P:System.Activities.Presentation.Expressions.ExpressionActivityEditor.HintText">
      <summary>Gets or sets the hint text.</summary>
      <returns>The hint text.</returns>
    </member>
    <member name="F:System.Activities.Presentation.Expressions.ExpressionActivityEditor.HintTextProperty">
      <summary>Represents the HintText dependency property.</summary>
    </member>
    <member name="P:System.Activities.Presentation.Expressions.ExpressionActivityEditor.HorizontalScrollBarVisibility">
      <summary>Gets or sets the horizontal scroll bar visibility.</summary>
      <returns>The horizontal scroll bar visibility.</returns>
    </member>
    <member name="F:System.Activities.Presentation.Expressions.ExpressionActivityEditor.HorizontalScrollBarVisibilityProperty">
      <summary>Represents the HorizontalScrollBarVisibility dependency property.</summary>
    </member>
    <member name="P:System.Activities.Presentation.Expressions.ExpressionActivityEditor.IsIndependentExpression">
      <summary>Gets or sets a value that indicates whether the expression activity is an independent expression.</summary>
      <returns>true if the expression activity is an independent expression; otherwise, false.</returns>
    </member>
    <member name="F:System.Activities.Presentation.Expressions.ExpressionActivityEditor.IsIndependentExpressionProperty">
      <summary>Represents the IsIndependentExpression dependency property.</summary>
    </member>
    <member name="P:System.Activities.Presentation.Expressions.ExpressionActivityEditor.IsReadOnly">
      <summary>Gets or sets a value that indicates whether the expression activity is read-only.</summary>
      <returns>True if the expression activity is read-only; otherwise, false.</returns>
    </member>
    <member name="F:System.Activities.Presentation.Expressions.ExpressionActivityEditor.IsReadOnlyProperty">
      <summary>Represents the IsReadOnly dependency property.</summary>
    </member>
    <member name="P:System.Activities.Presentation.Expressions.ExpressionActivityEditor.IsSupportedExpression">
      <summary>Gets or sets a value that indicates whether the expression is supported.</summary>
      <returns>True if the expression is supported; otherwise, false.</returns>
    </member>
    <member name="F:System.Activities.Presentation.Expressions.ExpressionActivityEditor.IsSupportedExpressionProperty">
      <summary>Represents the IsSupportedExpression dependency property.</summary>
    </member>
    <member name="P:System.Activities.Presentation.Expressions.ExpressionActivityEditor.OwnerActivity">
      <summary>Gets or sets the owner activity.</summary>
      <returns>The owner activity.</returns>
    </member>
    <member name="F:System.Activities.Presentation.Expressions.ExpressionActivityEditor.OwnerActivityProperty">
      <summary>Represents the OwnerActivity dependency property.</summary>
    </member>
    <member name="P:System.Activities.Presentation.Expressions.ExpressionActivityEditor.PathToArgument">
      <summary>Gets or sets the path to argument.</summary>
      <returns>The path to argument.</returns>
    </member>
    <member name="F:System.Activities.Presentation.Expressions.ExpressionActivityEditor.PathToArgumentProperty">
      <summary>Represents the PathToArgument dependency property.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Expressions.ExpressionActivityEditor.SetExpressionActivityEditor(System.Object,System.String)">
      <summary>Sets the expression activity editor using the specified target and name.</summary>
      <param name="target">The property of the editor to set.</param>
      <param name="name">The name of the editor.</param>
    </member>
    <member name="P:System.Activities.Presentation.Expressions.ExpressionActivityEditor.UseLocationExpression">
      <summary>Gets or sets a value that indicates whether the instance uses the location expression.</summary>
      <returns>True if the instance uses the location expression; otherwise, false.</returns>
    </member>
    <member name="F:System.Activities.Presentation.Expressions.ExpressionActivityEditor.UseLocationExpressionProperty">
      <summary>Represents the UseLocationExpression dependency property.</summary>
    </member>
    <member name="P:System.Activities.Presentation.Expressions.ExpressionActivityEditor.VerticalScrollBarVisibility">
      <summary>Gets or sets the vertical scrollbar visibility.</summary>
      <returns>The vertical scrollbar visibility.</returns>
    </member>
    <member name="F:System.Activities.Presentation.Expressions.ExpressionActivityEditor.VerticalScrollBarVisibilityProperty">
      <summary>Represents the VerticalScrollBarVisibility dependency property.</summary>
    </member>
    <member name="T:System.Activities.Presentation.Expressions.ExpressionMorphHelper">
      <summary>Represents an expression morph helper.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Expressions.ExpressionMorphHelper.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Presentation.Expressions.ExpressionMorphHelper" /> class.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Expressions.ExpressionMorphHelper.TryInferReturnType(System.Activities.ActivityWithResult,System.Activities.Presentation.EditingContext,System.Type@)">
      <summary>Returns whether the expression tries to infer the return type.</summary>
      <returns>True if the expression tries to infer the return type; otherwise, false.</returns>
      <param name="expression">The expression used.</param>
      <param name="context">The context.</param>
      <param name="returnType">The return type of the expression.</param>
    </member>
    <member name="M:System.Activities.Presentation.Expressions.ExpressionMorphHelper.TryMorphExpression(System.Activities.ActivityWithResult,System.Boolean,System.Type,System.Activities.Presentation.EditingContext,System.Activities.ActivityWithResult@)">
      <summary>Returns whether the expression tries to morph.</summary>
      <returns>The morphed expression.</returns>
      <param name="expression">The expression to morph.</param>
      <param name="isLocationExpression">True if the expression is a location expression; otherwise, false.</param>
      <param name="newType">The new type of the expression.</param>
      <param name="context">The context.</param>
      <param name="newExpression">The new expression.</param>
    </member>
    <member name="T:System.Activities.Presentation.Expressions.ExpressionMorphHelperAttribute">
      <summary>Represents an expression morph helper attribute.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Expressions.ExpressionMorphHelperAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Presentation.Expressions.ExpressionMorphHelperAttribute" /> class.</summary>
      <param name="expressionMorphHelperType">The morph helper type.</param>
    </member>
    <member name="P:System.Activities.Presentation.Expressions.ExpressionMorphHelperAttribute.ExpressionMorphHelperType">
      <summary>Gets the type of the helper.</summary>
      <returns>The type of the helper.</returns>
    </member>
    <member name="T:System.Activities.Presentation.Expressions.TextualExpressionEditor">
      <summary>Represents a textual expression editor.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Expressions.TextualExpressionEditor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Presentation.Expressions.TextualExpressionEditor" /> class.</summary>
    </member>
    <member name="P:System.Activities.Presentation.Expressions.TextualExpressionEditor.DefaultValue">
      <summary>Gets or sets the default value of the property.</summary>
      <returns>The default value of the property.</returns>
    </member>
    <member name="F:System.Activities.Presentation.Expressions.TextualExpressionEditor.DefaultValueProperty">
      <summary>Specifies the default value property.</summary>
    </member>
    <member name="P:System.Activities.Presentation.Expressions.TextualExpressionEditor.ExpressionEditorService">
      <summary>Gets the expression editor service.</summary>
      <returns>The expression editor service.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Expressions.TextualExpressionEditor.MaxLines">
      <summary>Gets or sets the maximum number of visible lines.</summary>
      <returns>The maximum number of visible lines.</returns>
    </member>
    <member name="F:System.Activities.Presentation.Expressions.TextualExpressionEditor.MaxLinesProperty">
      <summary>Specifies the MaxLines dependency property.</summary>
    </member>
    <member name="P:System.Activities.Presentation.Expressions.TextualExpressionEditor.MinLines">
      <summary>Gets or sets the minimum number of visible lines.</summary>
      <returns>The minimum number of visible lines.</returns>
    </member>
    <member name="F:System.Activities.Presentation.Expressions.TextualExpressionEditor.MinLinesProperty">
      <summary>Specifies the MinLines dependency property.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Expressions.TextualExpressionEditor.OnCompleteWordCommandCanExecute(System.Windows.Input.CanExecuteRoutedEventArgs)">
      <summary>Represents the method that will handle the On Complete Word Command Can Execute routed events.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:System.Activities.Presentation.Expressions.TextualExpressionEditor.OnCompleteWordCommandExecute(System.Windows.Input.ExecutedRoutedEventArgs)">
      <summary>Represents the method that will handle the On Complete Word Command Execute routed events.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:System.Activities.Presentation.Expressions.TextualExpressionEditor.OnDecreaseFilterLevelCommandCanExecute(System.Windows.Input.CanExecuteRoutedEventArgs)">
      <summary>Represents the method that will handle the On Decrease Filter Level Command Can Execute routed events.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:System.Activities.Presentation.Expressions.TextualExpressionEditor.OnDecreaseFilterLevelCommandExecute(System.Windows.Input.ExecutedRoutedEventArgs)">
      <summary>Represents the method that will handle the On Decrease Filter Level Command Execute routed events.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:System.Activities.Presentation.Expressions.TextualExpressionEditor.OnGlobalIntellisenseCommandCanExecute(System.Windows.Input.CanExecuteRoutedEventArgs)">
      <summary>Represents the method that will handle the On Global Intellisense Command Can Execute routed events.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:System.Activities.Presentation.Expressions.TextualExpressionEditor.OnGlobalIntellisenseCommandExecute(System.Windows.Input.ExecutedRoutedEventArgs)">
      <summary>Represents the method that will handle the On Global Intellisense Command Execute routed events.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:System.Activities.Presentation.Expressions.TextualExpressionEditor.OnIncreaseFilterLevelCommandCanExecute(System.Windows.Input.CanExecuteRoutedEventArgs)">
      <summary>Represents the method that will handle the On Increase Filter Level Command Can Execute routed events.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:System.Activities.Presentation.Expressions.TextualExpressionEditor.OnIncreaseFilterLevelCommandExecute(System.Windows.Input.ExecutedRoutedEventArgs)">
      <summary>Represents the method that will handle the On Increase Filter Level Command Execute routed events.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:System.Activities.Presentation.Expressions.TextualExpressionEditor.OnParameterInfoCommandCanExecute(System.Windows.Input.CanExecuteRoutedEventArgs)">
      <summary>Represents the method that will handle the On Parameter Info Command Can Execute routed events.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:System.Activities.Presentation.Expressions.TextualExpressionEditor.OnParameterInfoCommandExecute(System.Windows.Input.ExecutedRoutedEventArgs)">
      <summary>Represents the method that will handle the On Parameter Info Command Execute routed events.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:System.Activities.Presentation.Expressions.TextualExpressionEditor.OnQuickInfoCommandCanExecute(System.Windows.Input.CanExecuteRoutedEventArgs)">
      <summary>Represents the method that will handle the On Quick Info Command Can Execute routed events.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:System.Activities.Presentation.Expressions.TextualExpressionEditor.OnQuickInfoCommandExecute(System.Windows.Input.ExecutedRoutedEventArgs)">
      <summary>Represents the method that will handle the On Quick Info Command Execute routed events.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Activities.Presentation.Hosting.AssemblyContextControlItem">
      <summary>Exposes an Item through the editing context for managing the list of referenced and local assemblies that will be used inside the workflow for controls such as the expression editor to determine the list of references.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Hosting.AssemblyContextControlItem.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Presentation.Hosting.AssemblyContextControlItem" /> class. </summary>
    </member>
    <member name="P:System.Activities.Presentation.Hosting.AssemblyContextControlItem.AllAssemblyNamesInContext">
      <summary>Returns a collection that contains the display names of all the assemblies that have been loaded in the environment in addition to the display name of the local project assembly.</summary>
      <returns>A collection that contains the display names of all the assemblies that have been loaded in the environment in addition to the display name of the local project assembly.</returns>
    </member>
    <member name="M:System.Activities.Presentation.Hosting.AssemblyContextControlItem.GetAssembly(System.Reflection.AssemblyName,System.Activities.Presentation.Hosting.IMultiTargetingSupportService)">
      <summary>Returns the currently loaded assembly using the multi-targeting support service.</summary>
      <returns>The assembly.</returns>
      <param name="assemblyName">The assembly name.</param>
      <param name="multiTargetingService">The multi-targeting service used to get the proper version of the loaded assembly that corresponds to the target .NET Framework of the current project.</param>
    </member>
    <member name="M:System.Activities.Presentation.Hosting.AssemblyContextControlItem.GetEnvironmentAssemblies(System.Activities.Presentation.Hosting.IMultiTargetingSupportService)">
      <summary>Returns a collection of all the assemblies that have been loaded in the environment.</summary>
      <returns>A collection of all the assemblies that have been loaded in the environment.</returns>
      <param name="multiTargetingService">The multi-targeting service used to get the proper versions of the loaded assemblies that correspond to the target .NET Framework of the current project.</param>
    </member>
    <member name="M:System.Activities.Presentation.Hosting.AssemblyContextControlItem.GetEnvironmentAssemblyNames">
      <summary>Returns a collection that contains the assembly names of all the assemblies that have been loaded in the environment.</summary>
      <returns>A collection that contains the assembly names of all the assemblies that have been loaded in the environment.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Hosting.AssemblyContextControlItem.ItemType">
      <summary>Gets an item type.</summary>
      <returns>Returns a <see cref="T:System.Type" /> that contains the item type.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Hosting.AssemblyContextControlItem.LocalAssemblyName">
      <summary>Gets or sets the local assembly name. </summary>
      <returns>Returns an <see cref="T:System.Reflection.AssemblyName" /> that contains the local assembly name. </returns>
    </member>
    <member name="P:System.Activities.Presentation.Hosting.AssemblyContextControlItem.ReferencedAssemblyNames">
      <summary>Gets or sets the referenced assembly names. </summary>
      <returns>Returns an <see cref="T:System.Collections.Generic.IList`1" /> that contains the referenced assembly names.</returns>
    </member>
    <member name="T:System.Activities.Presentation.Hosting.CommandInfo">
      <summary>Describes a command on the designer, such as copy or paste.</summary>
    </member>
    <member name="P:System.Activities.Presentation.Hosting.CommandInfo.Command">
      <summary>A unique identifier that represents some behavior or action.</summary>
      <returns>Returns <see cref="T:System.Windows.Input.ICommand" />.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Hosting.CommandInfo.IsBindingEnabledInDesigner">
      <summary>Determines whether binding is enabled in the designer for the specified command.</summary>
      <returns>true if binding is enabled in the designer for the specified command; otherwise, false.</returns>
    </member>
    <member name="T:System.Activities.Presentation.Hosting.CommandValues">
      <summary>A command interface that is used for integration of Windows Workflow Designer actions (for example, context menu) with custom-provided implementation—that is, property browser service, debugging service, and so on.</summary>
    </member>
    <member name="F:System.Activities.Presentation.Hosting.CommandValues.DeleteBreakpoint">
      <summary>The command to delete a breakpoint.</summary>
    </member>
    <member name="F:System.Activities.Presentation.Hosting.CommandValues.DisableBreakpoint">
      <summary>The command to disable a breakpoint.</summary>
    </member>
    <member name="F:System.Activities.Presentation.Hosting.CommandValues.EnableBreakpoint">
      <summary>The command to enable a breakpoint.</summary>
    </member>
    <member name="F:System.Activities.Presentation.Hosting.CommandValues.InsertBreakpoint">
      <summary>The command to insert a breakpoint.</summary>
    </member>
    <member name="F:System.Activities.Presentation.Hosting.CommandValues.ShowProperties">
      <summary>Opens the Visual Studio Property Grid to show the properties.</summary>
    </member>
    <member name="T:System.Activities.Presentation.Hosting.ICommandService">
      <summary>Represents a command interface that is used for integration of Windows Workflow Designer actions (for example, context menu), with custom-provided implementations, such as property browser service, debugging service, and so on.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Hosting.ICommandService.CanExecuteCommand(System.Int32)">
      <summary>Verifies whether the specified command can be executed.</summary>
      <returns>true if the specified command can be executed; otherwise, false.</returns>
      <param name="commandId">The command identifier to be checked.</param>
      <exception cref="T:System.NotSupportedException">The command is not supported.</exception>
    </member>
    <member name="M:System.Activities.Presentation.Hosting.ICommandService.ExecuteCommand(System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
      <summary>Executes the command with the specified command identifier and parameters.</summary>
      <param name="commandId">The command identifier to be checked. </param>
      <param name="parameters">The parameters of the command.</param>
      <exception cref="T:System.NotSupportedException">The command is not supported.</exception>
    </member>
    <member name="M:System.Activities.Presentation.Hosting.ICommandService.IsCommandSupported(System.Int32)">
      <summary>Returns a Boolean value that indicates whether the specified command identifier is supported.</summary>
      <returns>true if the specified command ID is supported; otherwise, false.</returns>
      <param name="commandId">The command identifier to be checked.</param>
    </member>
    <member name="T:System.Activities.Presentation.Hosting.IDocumentPersistenceService">
      <summary>Provides the functionality to persist a document.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Hosting.IDocumentPersistenceService.Flush(System.Object)">
      <summary>When implemented by a derived class, saves the specified document to disk and clears the memory buffer. </summary>
      <param name="documentRoot">The root directory for a Web site.</param>
    </member>
    <member name="M:System.Activities.Presentation.Hosting.IDocumentPersistenceService.Load(System.String)">
      <summary>When implemented by a derived class, places the specified stored document into memory for processing.</summary>
      <returns>An object that contains the loaded document.</returns>
      <param name="fileName">The document to load.</param>
    </member>
    <member name="M:System.Activities.Presentation.Hosting.IDocumentPersistenceService.OnModelChanged(System.Object)">
      <summary>When implemented by a derived class, starts the process of incorporating changes to the workflow model that is being designed.</summary>
      <param name="documentRoot">The root directory for a Web site.</param>
    </member>
    <member name="T:System.Activities.Presentation.Hosting.ImportedNamespaceContextItem">
      <summary>A context item published to the editing context that represents a collection of imported namespaces associated with the designer.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Hosting.ImportedNamespaceContextItem.#ctor">
      <summary>Creates an instance of the <see cref="T:System.Activities.Presentation.View.ImportedNamespaceContextItem" /> class.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Hosting.ImportedNamespaceContextItem.EnsureInitialized(System.Activities.Presentation.EditingContext)">
      <summary>Initializes the collection of imported namespaces with the editing context.</summary>
      <param name="context">The <see cref="T:System.Activities.Presentation.EditingContext" /> associated with the collection of imported namespaces.</param>
    </member>
    <member name="P:System.Activities.Presentation.Hosting.ImportedNamespaceContextItem.ImportedNamespaces">
      <summary>Gets the collection of imported namespaces.</summary>
      <returns>The <see cref="T:System.Collections.ObjectModel.Collection`1" /> of imported namespaces.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Hosting.ImportedNamespaceContextItem.ItemType">
      <summary>Gets the type of the imported namespace context item.</summary>
      <returns>The <see cref="T:System.Type" /> of the <see cref="T:System.Activities.Presentation.View.ImportedNamespaceContextItem" />.</returns>
    </member>
    <member name="T:System.Activities.Presentation.Hosting.IMultiTargetingSupportService">
      <summary>Provides multi-targeting for Windows Workflow Designer hosts. </summary>
    </member>
    <member name="M:System.Activities.Presentation.Hosting.IMultiTargetingSupportService.GetReflectionAssembly(System.Reflection.AssemblyName)">
      <summary>Returns the currently loaded assembly given the assembly name.</summary>
      <returns>The currently loaded assembly given the assembly name.</returns>
      <param name="targetAssemblyName">The assembly name.</param>
    </member>
    <member name="M:System.Activities.Presentation.Hosting.IMultiTargetingSupportService.GetRuntimeType(System.Type)">
      <summary>Gets the runtime type that corresponds to the specified type.</summary>
      <returns>The runtime type that corresponds to the specified type.</returns>
      <param name="reflectionType">The type to get the runtime type of.</param>
    </member>
    <member name="M:System.Activities.Presentation.Hosting.IMultiTargetingSupportService.IsSupportedType(System.Type)">
      <summary>Returns a value that indicates whether the specified type is supported.</summary>
      <returns>true if the specified type is supported; otherwise, false.</returns>
      <param name="type">The type to inspect.</param>
    </member>
    <member name="T:System.Activities.Presentation.Hosting.IWorkflowCommandExtensionCallback">
      <summary>Provides additional functions when a specified workflow command is loaded.  </summary>
    </member>
    <member name="M:System.Activities.Presentation.Hosting.IWorkflowCommandExtensionCallback.OnWorkflowCommandLoaded(System.Activities.Presentation.Hosting.CommandInfo)">
      <summary>Provides additional functions based on the specified workflow command to be loaded.</summary>
      <param name="commandInfo">The workflow command to be loaded.</param>
    </member>
    <member name="T:System.Activities.Presentation.Hosting.MultiTargetingSupportService">
      <summary>Represents an abstract class for multi-targeting support service.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Hosting.MultiTargetingSupportService.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Presentation.Hosting.MultiTargetingSupportService" /> class.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Hosting.MultiTargetingSupportService.GetReflectionAssembly(System.Reflection.AssemblyName)">
      <summary>Gets the reflection assembly given an assembly name.</summary>
      <returns>The reflection assembly if target assembly name could be resolved.</returns>
      <param name="targetAssemblyName">The target assembly name.</param>
    </member>
    <member name="M:System.Activities.Presentation.Hosting.MultiTargetingSupportService.GetReflectionType(System.Type)">
      <summary>Gets the reflection type give an object type.</summary>
      <returns>The reflection type.</returns>
      <param name="objectType">The object type.</param>
    </member>
    <member name="M:System.Activities.Presentation.Hosting.MultiTargetingSupportService.GetRuntimeType(System.Type)">
      <summary>Gets the runtime type given a reflection type.</summary>
      <returns>The runtime type associated with the reflection type.</returns>
      <param name="reflectionType">The reflection type.</param>
    </member>
    <member name="M:System.Activities.Presentation.Hosting.MultiTargetingSupportService.IsSupportedType(System.Type)">
      <summary>Checks if a given type is supported by target framework.</summary>
      <returns>The given type that is supported by target framework.</returns>
      <param name="type">The type to be checked.</param>
    </member>
    <member name="T:System.Activities.Presentation.Hosting.ReadOnlyState">
      <summary>Represents a <see cref="T:System.Activities.Presentation.ContextItem" /> that is published in the editing context and that indicates whether the Windows Workflow Foundation designer is in a read-only state.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Hosting.ReadOnlyState.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Presentation.Hosting.ReadOnlyState" /> class.</summary>
    </member>
    <member name="P:System.Activities.Presentation.Hosting.ReadOnlyState.IsReadOnly">
      <summary>Gets a value that indicates whether the object is read-only.</summary>
      <returns>true if the object is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Hosting.ReadOnlyState.ItemType">
      <summary>Gets the type of the current object.</summary>
      <returns>Returns <see cref="T:System.Type" />.</returns>
    </member>
    <member name="T:System.Activities.Presentation.Hosting.WindowHelperService">
      <summary>Provides functionalities to register and unregister delegates for event notifications, as well as set ownership for windows. </summary>
    </member>
    <member name="M:System.Activities.Presentation.Hosting.WindowHelperService.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Presentation.Hosting.WindowHelperService" /> class with the specific handle to a parent window.</summary>
      <param name="hwnd">A handle to a parent window.</param>
    </member>
    <member name="P:System.Activities.Presentation.Hosting.WindowHelperService.ParentWindowHwnd">
      <summary>Gets or sets the handle of the parent window.</summary>
      <returns>Returns <see cref="T:System.IntPtr" />.</returns>
    </member>
    <member name="M:System.Activities.Presentation.Hosting.WindowHelperService.RegisterWindowMessageHandler(System.Activities.Presentation.Hosting.WindowMessage)">
      <summary>Registers the specified delegate for event notifications. </summary>
      <returns>true if the operation is successful; otherwise, false.</returns>
      <param name="callback">The delegate to be registered for event notifications.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="callback" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Presentation.Hosting.WindowHelperService.TrySetWindowOwner(System.Windows.DependencyObject,System.Windows.Window)">
      <summary>Assigns the window to be the owner of the specified window. </summary>
      <returns>true if the operation is successful; otherwise, false.</returns>
      <param name="source">The owner of <paramref name="target" />.</param>
      <param name="target">The window that is to be owned by <paramref name="source" />.</param>
    </member>
    <member name="M:System.Activities.Presentation.Hosting.WindowHelperService.UnregisterWindowMessageHandler(System.Activities.Presentation.Hosting.WindowMessage)">
      <summary>Unregisters the specified delegate for event notifications. </summary>
      <returns>true if the operation is successful; otherwise, false.</returns>
      <param name="callback">The delegate to be removed from event notifications.</param>
    </member>
    <member name="T:System.Activities.Presentation.Hosting.WindowMessage">
      <summary>Represents a delegate that is used to reference the method that will handle window messages.</summary>
      <param name="msgId">The message identifier. </param>
      <param name="parameter1">A pointer to the first message parameter. The value of this parameter depends on the message.</param>
      <param name="parameter2">A pointer to the second message parameter. The value of this parameter depends on the message.</param>
    </member>
    <member name="T:System.Activities.Presentation.Hosting.WorkflowCommandExtensionItem">
      <summary>Provides functions to update each workflow's designer command (that is, input gestures collection). You should provide an <see cref="T:System.Activities.Presentation.Hosting.IWorkflowCommandExtensionCallback" /> implementation to receive notifications.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Hosting.WorkflowCommandExtensionItem.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Presentation.Hosting.WorkflowCommandExtensionItem" /> class. </summary>
    </member>
    <member name="M:System.Activities.Presentation.Hosting.WorkflowCommandExtensionItem.#ctor(System.Activities.Presentation.Hosting.IWorkflowCommandExtensionCallback)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Presentation.Hosting.WorkflowCommandExtensionItem" /> class with the specified <see cref="T:System.Activities.Presentation.Hosting.IWorkflowCommandExtensionCallback" /> implementation to receive notifications.</summary>
      <param name="callback">An <see cref="T:System.Activities.Presentation.Hosting.IWorkflowCommandExtensionCallback" /> implementation to receive notifications.</param>
    </member>
    <member name="P:System.Activities.Presentation.Hosting.WorkflowCommandExtensionItem.ItemType">
      <summary>Returns the type of this extension item.</summary>
      <returns>Returns <see cref="T:System.Type" />.</returns>
    </member>
    <member name="T:System.Activities.Presentation.Metadata.ActivityArgumentHelper">
      <summary>Provides additional functionalities regarding activity arguments.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Metadata.ActivityArgumentHelper.RegisterAccessorsGenerator(System.Type,System.Func{System.Activities.Activity,System.Collections.Generic.IEnumerable{System.Activities.Presentation.ArgumentAccessor}})">
      <summary>Registers with an activity type a function to generate a list of ArgumentAccessors.</summary>
      <param name="activityType">The activity type.</param>
      <param name="argumentAccessorsGenerator">A function which takes in an activity instance (of type activityType) and returns a list of ArgumentAccessors.</param>
    </member>
    <member name="T:System.Activities.Presentation.Metadata.AttributeCallback">
      <summary>Called when attributes are needed for a type. </summary>
      <param name="builder">An <see cref="T:System.Activities.Presentation.Metadata.AttributeCallbackBuilder" /> that can be used to add attributes. </param>
    </member>
    <member name="T:System.Activities.Presentation.Metadata.AttributeCallbackBuilder">
      <summary>Provides access to add attributes for one specific type to one specific <see cref="T:System.Activities.Presentation.Metadata.AttributeTable" />.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Metadata.AttributeCallbackBuilder.AddCustomAttributes(System.Attribute[])">
      <summary>Adds the contents of the provided attributes to the attribute table that created this builder.</summary>
      <param name="attributes">The attributes that are added to the table.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributes" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Presentation.Metadata.AttributeCallbackBuilder.AddCustomAttributes(System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary>Adds the contents of the provided attributes to the attribute table that created this builder.</summary>
      <param name="descriptor">The member to which the attributes are added.</param>
      <param name="attributes">The attributes that are added to the table.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="descriptor" /> or <paramref name="attributes" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Presentation.Metadata.AttributeCallbackBuilder.AddCustomAttributes(System.Reflection.MemberInfo,System.Attribute[])">
      <summary>Adds the contents of the provided attributes to the attribute table that created this builder.</summary>
      <param name="member">The member to which the attributes are added.</param>
      <param name="attributes">The attributes that are added to the table.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> or <paramref name="attributes" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Presentation.Metadata.AttributeCallbackBuilder.AddCustomAttributes(System.String,System.Attribute[])">
      <summary>Adds the contents of the provided attributes to the attribute table that created this builder.</summary>
      <param name="memberName">The name of the member to which the attributes are added.</param>
      <param name="attributes">The attributes that are added to the table.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="memberName" /> or <paramref name="attributes" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Presentation.Metadata.AttributeCallbackBuilder.AddCustomAttributes(System.Windows.DependencyProperty,System.Attribute[])">
      <summary>Adds the contents of the provided attributes to the attribute table that created this builder.</summary>
      <param name="dp">The dependency to which the attributes are added.</param>
      <param name="attributes">The attributes that are added to the table.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dp" /> or <paramref name="attributes" /> is null.</exception>
    </member>
    <member name="P:System.Activities.Presentation.Metadata.AttributeCallbackBuilder.CallbackType">
      <summary>The type to which attributes will be added.</summary>
      <returns>The type to which attributes will be added.</returns>
    </member>
    <member name="T:System.Activities.Presentation.Metadata.AttributeTable">
      <summary>The attribute table is a read-only collection of metadata attributes that are associated with specific types, members, and dependencies.</summary>
    </member>
    <member name="P:System.Activities.Presentation.Metadata.AttributeTable.AttributedTypes">
      <summary>Returns an enumeration of all types that have attribute overrides, on a property, member, or the type itself.</summary>
      <returns>
Returns <see cref="T:System.Collections.Generic.IEnumerable`1" />.
</returns>
    </member>
    <member name="M:System.Activities.Presentation.Metadata.AttributeTable.ContainsAttributes(System.Type)">
      <summary>Determines whether this table contains metadata for the given type.</summary>
      <returns>true if the table contains metadata for the type at the class level or metadata associated with a DependencyProperty or MemberDescriptor; otherwise, false.</returns>
      <param name="type">The type to check for metadata.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Presentation.Metadata.AttributeTable.GetCustomAttributes(System.Type)">
      <summary>Returns an enumeration of all class-level attributes provided for the specified type.</summary>
      <returns>An enumeration of attributes that match the criteria. This will never return a null enumeration.</returns>
      <param name="type">The type to get class-level attributes for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Presentation.Metadata.AttributeTable.GetCustomAttributes(System.Type,System.ComponentModel.MemberDescriptor)">
      <summary>Returns an enumeration of all attributes provided for the specified member of the specified type.</summary>
      <returns>An enumeration of attributes that match the criteria. This will never return a null enumeration.</returns>
      <param name="ownerType">The type that contains the member.</param>
      <param name="descriptor">A member descriptor to get custom attributes for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ownerType" /> or <paramref name="descriptor" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Presentation.Metadata.AttributeTable.GetCustomAttributes(System.Type,System.Reflection.MemberInfo)">
      <summary>Returns an enumeration of all attributes provided for the specified member of the specified type.</summary>
      <returns>An enumeration of attributes that match the criteria. This will never return a null enumeration.</returns>
      <param name="ownerType">The type that contains the member.</param>
      <param name="member">The member to provide attributes for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ownerType" /> or <paramref name="member" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Presentation.Metadata.AttributeTable.GetCustomAttributes(System.Type,System.String)">
      <summary>Returns an enumeration of all attributes provided for the specified member of the specified type.</summary>
      <returns>An enumeration of attributes that match the criteria. This will never return a null enumeration.</returns>
      <param name="ownerType">The owner type of the dependency property.</param>
      <param name="memberName">The name of the member to provide attributes for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ownerType" /> or <paramref name="memberName" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Presentation.Metadata.AttributeTable.GetCustomAttributes(System.Type,System.Windows.DependencyProperty)">
      <summary>Returns an enumeration of all attributes provided for the specified dependency of the specified type.</summary>
      <returns>An enumeration of attributes that match the criteria. This will never return a null enumeration.</returns>
      <param name="ownerType">The owner type of the dependency property.</param>
      <param name="dp">A dependency property to get custom attributes for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ownerType" /> or <paramref name="dp" /> is null.</exception>
    </member>
    <member name="T:System.Activities.Presentation.Metadata.AttributeTableBuilder">
      <summary>Creates and populates an <see cref="T:System.Activities.Presentation.Metadata.AttributeTable" /> that is used by the <see cref="T:System.Activities.Presentation.Metadata.MetadataStore" /> to provide attribute lookup and registration. </summary>
    </member>
    <member name="M:System.Activities.Presentation.Metadata.AttributeTableBuilder.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Presentation.Metadata.AttributeTableBuilder" /> class.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback(System.Type,System.Activities.Presentation.Metadata.AttributeCallback)">
      <summary>Specifies a callback that will be invoked when metadata for the given type is needed. </summary>
      <param name="type">The type for which the callback will provide metadata.</param>
      <param name="callback">The callback method.</param>
    </member>
    <member name="M:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes(System.Type,System.Attribute[])">
      <summary>Adds the contents of the provided attributes to this builder.</summary>
      <param name="type">The type to add class-level attributes to.</param>
      <param name="attributes">The attributes that are added to the builder.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> or <paramref name="attributes" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes(System.Type,System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary>Adds the contents of the provided attributes to this builder.</summary>
      <param name="ownerType">The type that contains the member identified by <paramref name="descriptor" />.</param>
      <param name="descriptor">The event or property info that the attributes are added to.</param>
      <param name="attributes">The attributes that are added to the builder.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ownerType" />, <paramref name="descriptor" /> or <paramref name="attributes" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes(System.Type,System.Reflection.MemberInfo,System.Attribute[])">
      <summary>Adds the contents of the provided attributes to this builder.</summary>
      <param name="ownerType">The type that contains the member identified by <paramref name="member" />.</param>
      <param name="member">The event or property info that the attributes are added to.</param>
      <param name="attributes">The attributes that are added to the builder.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ownerType" />, <paramref name="member" /> or <paramref name="attributes" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes(System.Type,System.String,System.Attribute[])">
      <summary>Adds the contents of the provided attributes to this builder.</summary>
      <param name="ownerType">The type that contains the member identified by <paramref name="memberName" />.</param>
      <param name="memberName">The name of the event or property info that the attributes are added to.</param>
      <param name="attributes">The attributes that are added to the builder.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ownerType" />, <paramref name="memberName" />, or <paramref name="attributes" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes(System.Type,System.Windows.DependencyProperty,System.Attribute[])">
      <summary>Adds the contents of the provided attributes to this builder.</summary>
      <param name="ownerType">The type that contains the dependency identified by <paramref name="dp" />.</param>
      <param name="dp">A dependency property to add attributes to.</param>
      <param name="attributes">The attributes that are added to the builder.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ownerType" />, <paramref name="dp" /> or <paramref name="attributes" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddTable(System.Activities.Presentation.Metadata.AttributeTable)">
      <summary>Adds the contents of the provided attribute table to this builder.</summary>
      <param name="table">The source attribute table.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="table" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Presentation.Metadata.AttributeTableBuilder.CreateTable">
      <summary>Creates an attribute table that contains all of the attribute definitions provided through <see cref="M:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes(System.Type,System.Attribute[])" /> calls.</summary>
      <returns>An <see cref="T:System.Activities.Presentation.Metadata.AttributeTable" /> that can be passed to the metadata store.</returns>
    </member>
    <member name="M:System.Activities.Presentation.Metadata.AttributeTableBuilder.ValidateTable">
      <summary>Verifies that the attribute table that is being built contains valid attribute information.</summary>
      <exception cref="T:System.Activities.Presentation.Metadata.AttributeTableValidationException">the state of the table is invalid.</exception>
    </member>
    <member name="T:System.Activities.Presentation.Metadata.AttributeTableValidationException">
      <summary>Provides the functionality to throw an exception from the <see cref="M:System.Activities.Presentation.Metadata.AttributeTableBuilder.ValidateTable" /> method if the metadata provided in the table does not match properties, methods, and events on real types. </summary>
    </member>
    <member name="M:System.Activities.Presentation.Metadata.AttributeTableValidationException.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Presentation.Metadata.AttributeTableValidationException" /> class.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Metadata.AttributeTableValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Presentation.Metadata.AttributeTableValidationException" /> class that uses a specified serialization store and context.</summary>
      <param name="info">The serialization store.</param>
      <param name="context">The serialization context.</param>
    </member>
    <member name="M:System.Activities.Presentation.Metadata.AttributeTableValidationException.#ctor(System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Presentation.Metadata.AttributeTableValidationException" /> class with a specified message about the exception.</summary>
      <param name="message">A message about the exception that is provided to the user.</param>
    </member>
    <member name="M:System.Activities.Presentation.Metadata.AttributeTableValidationException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Presentation.Metadata.AttributeTableValidationException" /> class with a message for the user and an enumeration of validation errors that have occurred.</summary>
      <param name="message">A message about the exception that is provided to the user.</param>
      <param name="validationErrors">Zero or more errors that occurred during validation. </param>
    </member>
    <member name="M:System.Activities.Presentation.Metadata.AttributeTableValidationException.#ctor(System.String,System.Exception)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Presentation.Metadata.AttributeTableValidationException" /> class with a specified message for the user and the error that caused the current exception.</summary>
      <param name="message">A message about the exception that is provided to the user.</param>
      <param name="inner">The error that caused the current exception.</param>
    </member>
    <member name="M:System.Activities.Presentation.Metadata.AttributeTableValidationException.#ctor(System.String,System.Exception,System.Collections.Generic.IEnumerable{System.String})">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Presentation.Metadata.AttributeTableValidationException" /> class with the specified message for the user, the error that caused the current exception, and an enumeration of errors that occurred during validation.</summary>
      <param name="message">A message about the exception that is provided to the user.</param>
      <param name="inner">The error that caused the current exception.</param>
      <param name="validationErrors">Zero or more errors that occurred during validation. </param>
    </member>
    <member name="M:System.Activities.Presentation.Metadata.AttributeTableValidationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Performs serialization.</summary>
      <param name="info">The serialization store.</param>
      <param name="context">The serialization context.</param>
    </member>
    <member name="P:System.Activities.Presentation.Metadata.AttributeTableValidationException.ValidationErrors">
      <summary>Gets an enumeration of validation errors.</summary>
      <returns>An enumeration of validation errors.</returns>
    </member>
    <member name="T:System.Activities.Presentation.Metadata.IRegisterMetadata">
      <summary>Specifies a class that will add extra attributes to the metadata store.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Metadata.IRegisterMetadata.Register">
      <summary>Adds additional metadata to the metadata store upon initialization of the designer.</summary>
    </member>
    <member name="T:System.Activities.Presentation.Metadata.MetadataStore">
      <summary>An in-memory collection of hash tables that allows the rapid lookup of designer elements by <see cref="T:System.Type" />. </summary>
    </member>
    <member name="M:System.Activities.Presentation.Metadata.MetadataStore.AddAttributeTable(System.Activities.Presentation.Metadata.AttributeTable)">
      <summary>Adds the given table to the current <see cref="T:System.AppDomain" /> object’s attribute store.</summary>
      <param name="table">The table to add.</param>
    </member>
    <member name="T:System.Activities.Presentation.Model.AttachedPropertiesService">
      <summary>Attaches properties to the current instance.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Model.AttachedPropertiesService.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Presentation.Model.AttachedPropertiesService" /> class.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Model.AttachedPropertiesService.AddProperty(System.Activities.Presentation.Model.AttachedProperty)">
      <summary>Adds the specified property to the properties of the current instance.</summary>
      <param name="property">The property to add. </param>
    </member>
    <member name="T:System.Activities.Presentation.Model.AttachedProperty">
      <summary>Used in order to associate or attach additional information to the instance of an object. </summary>
    </member>
    <member name="M:System.Activities.Presentation.Model.AttachedProperty.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Presentation.Model.AttachedProperty" /> class.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Model.AttachedProperty.GetValue(System.Activities.Presentation.Model.ModelItem)">
      <summary>Retrieves the value of the specified model item.</summary>
      <returns>Returns a <see cref="T:System.Object" /> that contains the value of the model item.</returns>
      <param name="modelItem">The model item.</param>
    </member>
    <member name="P:System.Activities.Presentation.Model.AttachedProperty.IsBrowsable">
      <summary>Gets or sets a Boolean value that indicates whether the <see cref="T:System.Activities.Presentation.Model.AttachedProperty" /> is browsable. </summary>
      <returns>true if the <see cref="T:System.Activities.Presentation.Model.AttachedProperty" /> is browsable; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.AttachedProperty.IsReadOnly">
      <summary>Gets a value that determines whether the attached property is read-only.</summary>
      <returns>true if the property is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.AttachedProperty.Name">
      <summary>Gets or sets the name of the property.</summary>
      <returns>Returns a <see cref="T:System.String" /> that contains the name of the property.</returns>
    </member>
    <member name="M:System.Activities.Presentation.Model.AttachedProperty.NotifyPropertyChanged(System.Activities.Presentation.Model.ModelItem)">
      <summary>Creates a notification that indicates that the specified model item has changed. </summary>
      <param name="modelItem">The item that has changed.</param>
    </member>
    <member name="P:System.Activities.Presentation.Model.AttachedProperty.OwnerType">
      <summary>Gets or sets the owner type.</summary>
      <returns>Returns a <see cref="T:System.Type" /> that contains the owner type.</returns>
    </member>
    <member name="M:System.Activities.Presentation.Model.AttachedProperty.ResetValue(System.Activities.Presentation.Model.ModelItem)">
      <summary>Resets the specified model item to the default value.</summary>
      <param name="modelItem">The model item to reset.</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.AttachedProperty.SetValue(System.Activities.Presentation.Model.ModelItem,System.Object)">
      <summary>Sets the specified model item to the specified value.</summary>
      <param name="modelItem">The model item to set.</param>
      <param name="value">The value to set.</param>
    </member>
    <member name="P:System.Activities.Presentation.Model.AttachedProperty.Type">
      <summary>Gets the type. </summary>
      <returns>Returns a <see cref="T:System.Type" /> that contains the type.</returns>
    </member>
    <member name="T:System.Activities.Presentation.Model.AttachedProperty`1">
      <summary>Contains a collection of attached properties. </summary>
      <typeparam name="T">The type of the attached property. </typeparam>
    </member>
    <member name="M:System.Activities.Presentation.Model.AttachedProperty`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Presentation.Model.AttachedProperty`1" /> class.</summary>
    </member>
    <member name="P:System.Activities.Presentation.Model.AttachedProperty`1.Getter">
      <summary>Gets or sets the getter.</summary>
      <returns>Returns a <see cref="T:System.Func`2" /> that contains the getter.</returns>
    </member>
    <member name="M:System.Activities.Presentation.Model.AttachedProperty`1.GetValue(System.Activities.Presentation.Model.ModelItem)">
      <summary>Retrieves the value of the specified model item.</summary>
      <returns>Returns an <see cref="T:System.Object" /> that contains the value.</returns>
      <param name="modelItem">The model item.</param>
    </member>
    <member name="P:System.Activities.Presentation.Model.AttachedProperty`1.IsReadOnly">
      <summary>Gets a value that determines whether the collection is read-only.</summary>
      <returns>true if the collection is read-only; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.Presentation.Model.AttachedProperty`1.ResetValue(System.Activities.Presentation.Model.ModelItem)">
      <summary>Resets the specified model item to the default value.</summary>
      <param name="modelItem">The model item to reset.</param>
    </member>
    <member name="P:System.Activities.Presentation.Model.AttachedProperty`1.Setter">
      <summary>Gets or sets the setter.</summary>
      <returns>Returns an <see cref="T:System.Action`2" /> that contains the setter.</returns>
    </member>
    <member name="M:System.Activities.Presentation.Model.AttachedProperty`1.SetValue(System.Activities.Presentation.Model.ModelItem,System.Object)">
      <summary>Sets the specified model item to the specified value.</summary>
      <param name="modelItem">The model item to set.</param>
      <param name="Value">The value to set.</param>
    </member>
    <member name="P:System.Activities.Presentation.Model.AttachedProperty`1.Type">
      <summary>Gets the type of the collection.</summary>
      <returns>Returns a <see cref="T:System.Type" /> that contains the type of the collection.</returns>
    </member>
    <member name="T:System.Activities.Presentation.Model.AttachedPropertyInfo">
      <summary>Provides properties of an attached property.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Model.AttachedPropertyInfo.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Presentation.Model.AttachedPropertyInfo" /> class.</summary>
    </member>
    <member name="P:System.Activities.Presentation.Model.AttachedPropertyInfo.PropertyName">
      <summary>Gets or sets the name of the attached property.</summary>
      <returns>The name of the attached property.</returns>
    </member>
    <member name="T:System.Activities.Presentation.Model.AttachedPropertyInfo`1">
      <summary>Provides properties of an attached property.</summary>
      <typeparam name="T">The type of the attached property.</typeparam>
    </member>
    <member name="M:System.Activities.Presentation.Model.AttachedPropertyInfo`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Presentation.Model.AttachedPropertyInfo`1" /> class.</summary>
    </member>
    <member name="P:System.Activities.Presentation.Model.AttachedPropertyInfo`1.DefaultValue">
      <summary>Gets or sets the default value of the attached property.</summary>
      <returns>The default value of the attached property. </returns>
    </member>
    <member name="T:System.Activities.Presentation.Model.Change">
      <summary>Abstract class that, when implemented, describes a change to the model tree. </summary>
    </member>
    <member name="M:System.Activities.Presentation.Model.Change.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Presentation.Model.Change" /> class. </summary>
    </member>
    <member name="M:System.Activities.Presentation.Model.Change.Apply">
      <summary>When implemented in a derived class, applies the change to the current instance.</summary>
      <returns>true if the change was applied to the current instance; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.Change.Description">
      <summary>When implemented in a derived class, gets a description of the change.</summary>
      <returns>Returns a <see cref="T:System.String" /> that contains a description of the change.</returns>
    </member>
    <member name="M:System.Activities.Presentation.Model.Change.GetInverse">
      <summary>When implemented in a derived class, retrieves the inverse of the change. </summary>
      <returns>Returns a <see cref="T:System.Activities.Presentation.Model.Change" /> that contains the inverse of the current instance. </returns>
    </member>
    <member name="T:System.Activities.Presentation.Model.CreateOptions">
      <summary>Used by a <see cref="T:System.Activities.Presentation.Model.ModelFactory" /> instance to specify how to create a new item.</summary>
    </member>
    <member name="F:System.Activities.Presentation.Model.CreateOptions.InitializeDefaults">
      <summary>Creates the item and asks the object to perform any default initialization. This flag is generally passed in when a new control or object is being created by a user.</summary>
    </member>
    <member name="F:System.Activities.Presentation.Model.CreateOptions.None">
      <summary>Creates the object and does not perform any operation on it. This is the default option when creating an item with the <see cref="T:System.Activities.Presentation.Model.ModelFactory" /> class.</summary>
    </member>
    <member name="T:System.Activities.Presentation.Model.EditingScope">
      <summary>An editing scope represents a collection of changes to the <see cref="T:System.Activities.Presentation.Model.ModelItem" /> tree that can be committed or rolled back as one atomic unit of work. </summary>
    </member>
    <member name="M:System.Activities.Presentation.Model.EditingScope.CanComplete">
      <summary>Determines whether the current editing scope instance can complete.</summary>
      <returns>true if the editing scope can complete; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.EditingScope.Changes">
      <summary>Gets a list of changes.</summary>
      <returns>Returns a <see cref="T:System.Collections.Generic.List`1" /> that contains the changes.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.EditingScope.HasEffectiveChanges">
      <summary>Gets  a Boolean that specifies whether changes have been applied to the editing scope. </summary>
      <returns>true if changes have been applied to the editing scope; otherwise, false..</returns>
    </member>
    <member name="M:System.Activities.Presentation.Model.EditingScope.OnComplete">
      <summary>Raises the Complete event.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Model.EditingScope.OnException(System.Exception)">
      <summary>Handles the specified exception.</summary>
      <returns>true if the exception is handled; otherwise, false.</returns>
      <param name="e">The exception to handle.</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.EditingScope.OnRevert(System.Boolean)">
      <summary>Raises the Revert event.</summary>
      <param name="finalizing">Not used in this implementation.</param>
    </member>
    <member name="T:System.Activities.Presentation.Model.EditingScopeEventArgs">
      <summary>Provides data for the <see cref="E:System.Activities.Presentation.Model.ModelTreeManager.EditingScopeCompleted" /> event.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Model.EditingScopeEventArgs.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Presentation.Model.EditingScopeEventArgs" /> class. </summary>
    </member>
    <member name="P:System.Activities.Presentation.Model.EditingScopeEventArgs.EditingScope">
      <summary>Gets or sets the associated <see cref="T:System.Activities.Presentation.Model.EditingScope" />.</summary>
      <returns>Returns an <see cref="T:System.Activities.Presentation.Model.EditingScope" />.</returns>
    </member>
    <member name="T:System.Activities.Presentation.Model.ModelEditingScope">
      <summary>Represents a group of changes to the editing store. Change groups are transactional. The changes made under an editing scope can be committed or aborted as a unit. </summary>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelEditingScope.#ctor">
      <summary>Creates a new <see cref="T:System.Activities.Presentation.Model.ModelEditingScope" />.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelEditingScope.CanComplete">
      <summary>Determines whether <see cref="M:System.Activities.Presentation.Model.ModelEditingScope.OnComplete" /> should be called, or whether the change should instead be reverted. Reasons for reverting might include a file cannot be checked out of a source control system for modification.</summary>
      <returns>true if completion can occur; false if the change should instead revert.</returns>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelEditingScope.Complete">
      <summary>Completes the editing scope by calling the <see cref="M:System.Activities.Presentation.Model.ModelEditingScope.OnComplete" /> method.</summary>
      <exception cref="T:System.InvalidOperationException">The editing scope has already been reverted or completed.</exception>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelEditingScope.Description">
      <summary>Describes the group of changes. It can be changed anytime before the changes are committed.</summary>
      <returns>Returnsa <see cref="T:System.String" /> that describes the changes.</returns>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelEditingScope.Dispose">
      <summary>Disposes of this object by aborting changes unless the editing scope has already been completed or reverted.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelEditingScope.Dispose(System.Boolean)">
      <summary>Disposes of this object by aborting changes.</summary>
      <param name="disposing">Determines whether the changes should be reverted as part of an undo operation or because the object is being finalized.</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelEditingScope.OnComplete">
      <summary>Performs the actual complete of the editing scope.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelEditingScope.OnException(System.Exception)">
      <summary>Handles an exception.</summary>
      <returns>true if the exception is handled; otherwise, false.</returns>
      <param name="exception">The exception to handle.</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelEditingScope.OnRevert(System.Boolean)">
      <summary>Performs the actual revert of the editing scope.</summary>
      <param name="finalizing">Determines whether the abort is occurring because the object is being finalized. Some undo systems might attempt to abort in this case, while others might abandon the change and record it as a reactive undo operation.</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelEditingScope.Revert">
      <summary>Abandons the changes made during the editing scope.</summary>
      <exception cref="T:System.InvalidOperationException">The group of changes has already been committed.</exception>
    </member>
    <member name="T:System.Activities.Presentation.Model.ModelFactory">
      <summary>Creates instances of <see cref="T:System.Activities.Presentation.Model.ModelItem" /> objects in the designer.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelFactory.CreateItem(System.Activities.Presentation.EditingContext,System.Object)">
      <summary>Creates a new <see cref="T:System.Activities.Presentation.Model.ModelItem" /> by creating a deep copy of the instance provided. </summary>
      <returns>Returns the newly created <see cref="T:System.Activities.Presentation.Model.ModelItem" />.</returns>
      <param name="context">The designer’s editing context.</param>
      <param name="item">The <see cref="T:System.Activities.Presentation.Model.ModelItem" /> to clone.</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelFactory.CreateItem(System.Activities.Presentation.EditingContext,System.Type,System.Activities.Presentation.Model.CreateOptions,System.Object[])">
      <summary>Creates a new <see cref="T:System.Activities.Presentation.Model.ModelItem" /> for the given item type.</summary>
      <returns>Returns the newly created <see cref="T:System.Activities.Presentation.Model.ModelItem" />.</returns>
      <param name="context">The designer’s editing context.</param>
      <param name="itemType">The type of the <see cref="T:System.Activities.Presentation.Model.ModelItem" /> to create.</param>
      <param name="options">A set of options used when creating the item.</param>
      <param name="arguments">An optional array of arguments that should be passed to the constructor of the item.</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelFactory.CreateItem(System.Activities.Presentation.EditingContext,System.Type,System.Object[])">
      <summary>Creates a new <see cref="T:System.Activities.Presentation.Model.ModelItem" /> for the given item type.</summary>
      <returns>Returns the newly created <see cref="T:System.Activities.Presentation.Model.ModelItem" />.</returns>
      <param name="context">The designer’s editing context. </param>
      <param name="itemType">The type of the <see cref="T:System.Activities.Presentation.Model.ModelItem" /> to create.</param>
      <param name="arguments">An optional array of arguments that should be passed to the constructor of the item.</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelFactory.CreateStaticMemberItem(System.Activities.Presentation.EditingContext,System.Type,System.String)">
      <summary>Creates a new <see cref="T:System.Activities.Presentation.Model.ModelItem" /> that represents the value of a static member of the given class.</summary>
      <returns>Returns the newly created <see cref="T:System.Activities.Presentation.Model.ModelItem" />.</returns>
      <param name="context">The designer’s editing context.</param>
      <param name="type">The type that contains the static member being referenced.</param>
      <param name="memberName">The name of the static member being referenced.</param>
    </member>
    <member name="T:System.Activities.Presentation.Model.ModelItem">
      <summary>Represents a single item in the editing model. An item can be anything from a complex data structure down to a color or integer.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItem.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Presentation.Model.ModelItem" /> class.</summary>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItem.Attributes">
      <summary>Gets the attributes declared on this item.</summary>
      <returns>A collection that contains the attributes of the item.</returns>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItem.BeginEdit">
      <summary>Opens an editing scope for the designer. After an editing scope is open, all changes across all objects will be saved into the scope until the transaction is completed or reverted. Editing scopes can be nested, but must be committed in order.</summary>
      <returns>
A <see cref="T:System.Activities.Presentation.Model.ModelEditingScope" />, which must be either completed or reverted.
</returns>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItem.BeginEdit(System.Boolean)">
      <summary>Opens an editing scope for the designer.</summary>
      <returns>A <see cref="T:System.Activities.Presentation.Model.ModelEditingScope" />, which must be either completed or reverted.</returns>
      <param name="shouldApplyChangesImmediately">true to indicate that the changes should be applied immediately; otherwise, false.</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItem.BeginEdit(System.String)">
      <summary>Opens an editing scope for the designer. After an editing scope is open, all changes across all objects will be saved into the scope until the transaction is completed or reverted. Editing scopes can be nested, but must be committed in order.</summary>
      <returns>
A <see cref="T:System.Activities.Presentation.Model.ModelEditingScope" />, which must be either completed or reverted.
</returns>
      <param name="description">An optional description of the change. This will be set into the <see cref="P:System.Activities.Presentation.Model.ModelEditingScope.Description" /> property of the editing scope.</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItem.BeginEdit(System.String,System.Boolean)">
      <summary>Opens an editing scope for the designer.</summary>
      <returns>A <see cref="T:System.Activities.Presentation.Model.ModelEditingScope" />, which must be either completed or reverted.</returns>
      <param name="description">An optional description of the change. This will be set into the <see cref="P:System.Activities.Presentation.Model.ModelEditingScope.Description" /> property of the editing scope.</param>
      <param name="shouldApplyChangesImmediately">true to indicate that the changes should be applied immediately; otherwise, false.</param>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItem.Content">
      <summary>Gets the ContentPropertyAttribute of the item, or null.</summary>
      <returns>
The ContentPropertyAttribute of the item as a <see cref="T:System.Activities.Presentation.Model.ModelProperty" />. If the ContentPropertyAttribute is not declared by the <see cref="P:System.Activities.Presentation.Model.ModelItem.ItemType" /> of this item, <see cref="P:System.Activities.Presentation.Model.ModelItem.Content" /> returns null.
</returns>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItem.GetCurrentValue">
      <summary>Returns the current value of the underlying model object that the <see cref="T:System.Activities.Presentation.Model.ModelItem" /> is wrapping.</summary>
      <returns>
The current value of the underlying model object that the <see cref="T:System.Activities.Presentation.Model.ModelItem" /> is wrapping as an <see cref="T:System.Object" />.
</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItem.ItemType">
      <summary>Gets the type of object that the item represents.</summary>
      <returns>The type of object that the item represents.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItem.Name">
      <summary>Gets or sets the name or ID of the item.</summary>
      <returns>
The name or ID of the item as a <see cref="T:System.String" />.
</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItem.Parent">
      <summary>Gets the item that is the parent of this item.</summary>
      <returns>
A <see cref="T:System.Activities.Presentation.Model.ModelItem" /> that is the parent of this item. If an item is contained in a collection or dictionary, the object that owns the collection or dictionary is returned instead.
</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItem.Parents">
      <summary>Gets all parents of this item.</summary>
      <returns>The parents of this item.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItem.Properties">
      <summary>Gets the public properties on this item.</summary>
      <returns>
A <see cref="T:System.Activities.Presentation.Model.ModelItemCollection" /> that contains the public properties of this item.
</returns>
    </member>
    <member name="E:System.Activities.Presentation.Model.ModelItem.PropertyChanged">
      <summary>Implements INotifyPropertyChanged. Use this event to listen for changes to the model. This is also used by the data binding features of WPF.</summary>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItem.Root">
      <summary>Gets the item that is the root of this tree.</summary>
      <returns>
A <see cref="T:System.Activities.Presentation.Model.ModelItem" /> that is the root of this tree, or null if this item is not part of a tree.
</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItem.Source">
      <summary>Gets the property that provided this value.</summary>
      <returns>
A <see cref="T:System.Activities.Presentation.Model.ModelProperty" /> that indicates the source of this value.
</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItem.Sources">
      <summary>Gets all the properties that hold this value.</summary>
      <returns>The sources of this value.</returns>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItem.ToString">
      <summary>Returns a string representation of the underlying model object contained in this model item.</summary>
      <returns>A string representation of the underlying model object contained in this model item.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItem.View">
      <summary>Gets a <see cref="T:System.Windows.DependencyObject" /> that graphically represents this item.</summary>
      <returns>
A <see cref="T:System.Windows.DependencyObject" /> that graphically represents this item, or null if there is no such representation.
</returns>
    </member>
    <member name="T:System.Activities.Presentation.Model.ModelItemCollection">
      <summary>Represents a collection of model items that can be individually accessed by index.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemCollection.#ctor">
      <summary>Creates a new instance of <see cref="T:System.Activities.Presentation.Model.ModelItemCollection" />.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemCollection.Add(System.Activities.Presentation.Model.ModelItem)">
      <summary>Adds a model item to the end of the <see cref="T:System.Activities.Presentation.Model.ModelItemCollection" />.</summary>
      <param name="item">The model item to add to the collection.</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemCollection.Add(System.Object)">
      <summary>Adds a model item to the end of the <see cref="T:System.Activities.Presentation.Model.ModelItemCollection" />.</summary>
      <returns>Returns <paramref name="value" /> wrapped in a <see cref="T:System.Activities.Presentation.Model.ModelItem" />.</returns>
      <param name="value">The object to add to the collection.</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemCollection.Clear">
      <summary>Removes all elements from the <see cref="T:System.Activities.Presentation.Model.ModelItemCollection" />.</summary>
    </member>
    <member name="E:System.Activities.Presentation.Model.ModelItemCollection.CollectionChanged">
      <summary>Occurs when the collection changes.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemCollection.Contains(System.Activities.Presentation.Model.ModelItem)">
      <summary>Determines whether the <see cref="T:System.Activities.Presentation.Model.ModelItemCollection" /> contains the specified element.</summary>
      <returns>true if the <see cref="T:System.Activities.Presentation.Model.ModelItemCollection" /> contains an element that has the specified value; otherwise, false.</returns>
      <param name="item">The value to locate in the collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemCollection.Contains(System.Object)">
      <summary>Determines whether the <see cref="T:System.Activities.Presentation.Model.ModelItemCollection" /> contains the specified element.</summary>
      <returns>true if the <see cref="T:System.Activities.Presentation.Model.ModelItemCollection" /> contains an element that has the specified value; otherwise, false.</returns>
      <param name="value">The value to locate in the collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemCollection.CopyTo(System.Activities.Presentation.Model.ModelItem[],System.Int32)">
      <summary>Copies the contents of the collection into the given array.</summary>
      <param name="array">The array to copy the collection into.</param>
      <param name="arrayIndex">The index in the array to start copying at.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="arrayIndex" /> is out of range, or there is not sufficient room in the array to hold the contents of the collection.</exception>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItemCollection.Count">
      <summary>Returns the count of items in the collection.</summary>
      <returns>Returns the <see cref="T:System.Int32" /> count of items in the collection.</returns>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemCollection.GetEnumerator">
      <summary>Gets an enumerator that iterates through the <see cref="T:System.Activities.Presentation.Model.ModelItemCollection" />.</summary>
      <returns>Returns an <see cref="T:System.Collections.Generic.IEnumerator`1" /> for the <see cref="T:System.Activities.Presentation.Model.ModelItemCollection" />.</returns>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemCollection.IndexOf(System.Activities.Presentation.Model.ModelItem)">
      <summary>Returns the zero-based index of the first occurrence of a value in the <see cref="T:System.Activities.Presentation.Model.ModelItemCollection" />.</summary>
      <returns>The zero-based index of the first occurrence of <paramref name="item" /> within the entire <see cref="T:System.Activities.Presentation.Model.ModelItemCollection" />, if found; otherwise, –1.</returns>
      <param name="item">The object to locate in the collection.</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemCollection.Insert(System.Int32,System.Activities.Presentation.Model.ModelItem)">
      <summary>Inserts an element into the <see cref="T:System.Activities.Presentation.Model.ModelItemCollection" /> at the specified index.</summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The model item to insert.</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemCollection.Insert(System.Int32,System.Object)">
      <summary>Inserts an element into the <see cref="T:System.Activities.Presentation.Model.ModelItemCollection" /> at the specified index.</summary>
      <returns>Returns <paramref name="value" /> wrapped in a <see cref="T:System.Activities.Presentation.Model.ModelItem" />.</returns>
      <param name="index">The zero-based index at which <paramref name="value" /> should be inserted.</param>
      <param name="value">The object to insert.</param>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItemCollection.IsFixedSize">
      <summary>Gets a value that indicates whether the collection has a fixed size.</summary>
      <returns>true if the collection is a fixed size; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItemCollection.IsReadOnly">
      <summary>Gets a value that indicates whether the collection is read-only.</summary>
      <returns>true if the collection cannot be modified; otherwise, false. </returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItemCollection.IsSynchronized">
      <summary>Gets a value that indicates whether access to the collection is synchronized (thread safe).</summary>
      <returns>true if access to the collection is synchronized (thread safe); otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItemCollection.Item(System.Int32)">
      <summary>Gets or sets the item at the given index in the collection.</summary>
      <returns>Returns <see cref="T:System.Activities.Presentation.Model.ModelItem" />.</returns>
      <param name="index">The zero-based index of the collection.</param>
    </member>
    <member name="F:System.Activities.Presentation.Model.ModelItemCollection.ItemProperty">
      <summary>Identifies the Item dependency property.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemCollection.Move(System.Int32,System.Int32)">
      <summary>Moves an item in the collection to a different index.</summary>
      <param name="fromIndex">The index of the item to be moved before the move.</param>
      <param name="toIndex">The index of the item after it is moved.</param>
      <exception cref="T:System.IndexOutOfRangeException">Either <paramref name="fromIndex" /> or <paramref name="toIndex" /> is negative or greater than or equal to <see cref="P:System.Activities.Presentation.Model.ModelItemCollection.Count" />.</exception>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemCollection.Remove(System.Activities.Presentation.Model.ModelItem)">
      <summary>Removes the <see cref="T:System.Activities.Presentation.Model.ModelItem" /> from the collection.</summary>
      <returns>true if the <see cref="T:System.Activities.Presentation.Model.ModelItem" /> was removed from the collection; otherwise, false.</returns>
      <param name="item">The <see cref="T:System.Activities.Presentation.Model.ModelItem" />.</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemCollection.Remove(System.Object)">
      <summary>Removes the value from the collection.</summary>
      <returns>true if the value was removed from the collection; otherwise, false.</returns>
      <param name="value">The <see cref="T:System.Object" />.</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemCollection.RemoveAt(System.Int32)">
      <summary>Removes the item at the given index.</summary>
      <param name="index">The index of the item.</param>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItemCollection.SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the collection.</summary>
      <returns>Returns an <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItemCollection.System#Collections#ICollection#Count">
      <summary>Gets the number of elements contained in the collection.</summary>
      <returns>Returns an <see cref="T:System.Int32" /> value that is the number of elements contained in the collection.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItemCollection.System#Collections#ICollection#IsSynchronized">
      <summary>The number of elements contained in the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).</summary>
      <returns>true if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItemCollection.System#Collections#ICollection#SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Returns an <see cref="T:System.Object" /> that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>Returns an <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemCollection.System#Collections#IList#Add(System.Object)">
      <summary>Adds a model item to the end of the <see cref="T:System.Activities.Presentation.Model.ModelItemCollection" />.</summary>
      <returns>Returns the index of the newly added object.</returns>
      <param name="value">The object to add to the collection.</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemCollection.System#Collections#IList#Clear">
      <summary>Removes all items from the <see cref="T:System.Collections.IList" />.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemCollection.System#Collections#IList#Contains(System.Object)">
      <summary>Determines whether the <see cref="T:System.Activities.Presentation.Model.ModelItemCollection" /> contains the specified element.</summary>
      <returns>true if the <see cref="T:System.Activities.Presentation.Model.ModelItemCollection" /> contains an element that has the specified value; otherwise, false.</returns>
      <param name="value">The object to locate in the <see cref="T:System.Activities.Presentation.Model.ModelItemCollection" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>Determines the index of a specific item in the <see cref="T:System.Collections.IList" />.</summary>
      <returns>Returns the <see cref="T:System.Int32" /> index of <paramref name="value" /> if found in the list; otherwise, -1.</returns>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.IList" />.</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Inserts an element into the <see cref="T:System.Activities.Presentation.Model.ModelItemCollection" /> at the specified index.</summary>
      <param name="index">The zero-based index at which <paramref name="value" /> should be inserted.</param>
      <param name="value">The object to insert.</param>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItemCollection.System#Collections#IList#IsFixedSize">
      <summary>Gets a value that indicates whether the <see cref="T:System.Collections.IList" /> has a fixed size.</summary>
      <returns>true if the <see cref="T:System.Collections.IList" /> has a fixed size; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItemCollection.System#Collections#IList#IsReadOnly">
      <summary>Gets a value that indicates whether the <see cref="T:System.Collections.IList" /> is read-only.</summary>
      <returns>true if the <see cref="T:System.Collections.IList" /> is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItemCollection.System#Collections#IList#Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <returns>The element at the specified index.</returns>
      <param name="index">The zero-based index of the element to get or set.</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemCollection.System#Collections#IList#Remove(System.Object)">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList" />.</summary>
      <param name="value">The <see cref="T:System.Object" /> to remove from the <see cref="T:System.Collections.IList" />.</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Removes the <see cref="T:System.Collections.IList" /> item at the specified index.</summary>
      <param name="index">The zero-based index of the item to remove.</param>
    </member>
    <member name="T:System.Activities.Presentation.Model.ModelItemDictionary">
      <summary>Derives from <see cref="T:System.Activities.Presentation.Model.ModelItem" /> and implements support for a dictionary of key/value pairs.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemDictionary.#ctor">
      <summary>Creates a new <see cref="T:System.Activities.Presentation.Model.ModelItemDictionary" />.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemDictionary.Add(System.Activities.Presentation.Model.ModelItem,System.Activities.Presentation.Model.ModelItem)">
      <summary>Adds the value to the dictionary under the given key.</summary>
      <param name="key">The <see cref="T:System.Activities.Presentation.Model.ModelItem" /> that represents the key in the key/value pair to be added.</param>
      <param name="value">The <see cref="T:System.Activities.Presentation.Model.ModelItem" /> that represents the value in the key/value pair to be added.</param>
      <exception cref="T:System.InvalidOperationException">If the <see cref="T:System.Activities.Presentation.Model.ModelItemDictionary" /> is read-only.</exception>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemDictionary.Add(System.Object,System.Object)">
      <summary>Adds the value to the dictionary under the given key. This method wraps the key and value in a set of <see cref="T:System.Activities.Presentation.Model.ModelItem" /> objects.  </summary>
      <returns>Returns a <see cref="T:System.Activities.Presentation.Model.ModelItem" /> that represents the key.</returns>
      <param name="key">The key in the key/value pair to be added.</param>
      <param name="value">The value in the key/value pair to be added.</param>
      <exception cref="T:System.ArgumentNullException">If <paramref name="key" /> or <paramref name="value" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">If the <see cref="T:System.Activities.Presentation.Model.ModelItemDictionary" /> is read-only.</exception>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemDictionary.Clear">
      <summary>Clears the contents of the dictionary.</summary>
    </member>
    <member name="E:System.Activities.Presentation.Model.ModelItemDictionary.CollectionChanged">
      <summary>Raised when the contents of this collection change.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemDictionary.Contains(System.Collections.Generic.KeyValuePair{System.Activities.Presentation.Model.ModelItem,System.Activities.Presentation.Model.ModelItem})">
      <summary>Determines whether the dictionary contains the given key/value pair.</summary>
      <returns>true if the dictionary contains the given key/value pair; otherwise, false.</returns>
      <param name="item">The key/value pair to find.</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemDictionary.ContainsKey(System.Activities.Presentation.Model.ModelItem)">
      <summary>Determines whether the dictionary contains the given key.</summary>
      <returns>true if the dictionary contains the given key; otherwise, false.</returns>
      <param name="key">The key to find.</param>
      <exception cref="T:System.ArgumentNullException">If <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemDictionary.ContainsKey(System.Object)">
      <summary>Determines whether the dictionary contains the given key.</summary>
      <returns>true if the dictionary contains the given key; otherwise, false.</returns>
      <param name="key">The key to find.</param>
      <exception cref="T:System.ArgumentNullException">If <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.Activities.Presentation.Model.ModelItem,System.Activities.Presentation.Model.ModelItem}[],System.Int32)">
      <summary>Copies an array of key/value pairs into the given dictionary.</summary>
      <param name="array">The array of key/value pairs to copy.</param>
      <param name="arrayIndex">The zero-based index in the current dictionary at which copying begins.</param>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItemDictionary.Count">
      <summary>Returns the count of items in the dictionary.</summary>
      <returns>Returns <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemDictionary.GetEnumerator">
      <summary>Returns an enumerator for the items in the dictionary.</summary>
      <returns>Returns <see cref="T:System.Collections.Generic.IEnumerator`1" />.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItemDictionary.IsFixedSize">
      <summary>Determines whether the dictionary is a fixed size.</summary>
      <returns>true if the dictionary is a fixed size; otherwise, false. The default implementation returns true if the dictionary is read-only.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItemDictionary.IsReadOnly">
      <summary>Determines whether the dictionary cannot be modified.</summary>
      <returns>true if the dictionary cannot be modified; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItemDictionary.IsSynchronized">
      <summary>Gets a value that indicates whether access to the dictionary is synchronized (thread safe).</summary>
      <returns>true if access to the dictionary is synchronized (thread safe); otherwise, false. The default implementation returns false.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItemDictionary.Item(System.Activities.Presentation.Model.ModelItem)">
      <summary>Gets or sets the item at the specified key.</summary>
      <returns>Returns <see cref="T:System.Activities.Presentation.Model.ModelItem" />.</returns>
      <param name="key">The specified key of the item.</param>
      <exception cref="T:System.ArgumentNullException">If <paramref name="key" /> or the value is null.</exception>
      <exception cref="T:System.InvalidOperationException">If the dictionary is read-only and you set a new value.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">If <paramref name="key" /> is not in the dictionary.</exception>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItemDictionary.Item(System.Object)">
      <summary>Gets or sets the item at the specified key.</summary>
      <returns>Returns <see cref="T:System.Activities.Presentation.Model.ModelItem" />.</returns>
      <param name="key">The specified key of the item.</param>
      <exception cref="T:System.ArgumentNullException">If <paramref name="key" /> or the value is null.</exception>
      <exception cref="T:System.InvalidOperationException">If the dictionary is read-only and you set a new value.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">If <paramref name="key" /> is not in the dictionary.</exception>
    </member>
    <member name="F:System.Activities.Presentation.Model.ModelItemDictionary.KeyProperty">
      <summary>The DependencyProperty that represents the key in the key/value pair that is added to all items in the dictionary. The data type of the KeyProperty is <see cref="T:System.Activities.Presentation.Model.ModelItem" />.</summary>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItemDictionary.Keys">
      <summary>Gets the keys of the collection. The keys are guaranteed to be in the same order as the values. The resulting collection is read-only.</summary>
      <returns>Returns <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemDictionary.Remove(System.Activities.Presentation.Model.ModelItem)">
      <summary>Removes the item with the specified key from the dictionary.</summary>
      <returns>true if the item exists; otherwise, false.</returns>
      <param name="key">The key of the element to remove.</param>
      <exception cref="T:System.ArgumentNullException">If the <paramref name="key" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">If the dictionary is read-only.</exception>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemDictionary.Remove(System.Object)">
      <summary>Removes the item from the dictionary.</summary>
      <returns>true if the item exists; otherwise, false.</returns>
      <param name="key">The item to remove using the key as the search criterion.</param>
      <exception cref="T:System.ArgumentNullException">If the <paramref name="key" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">If the dictionary is read-only.</exception>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItemDictionary.SyncRoot">
      <summary>Gets an object that can be used to synchronize access to this collection. </summary>
      <returns>Returns <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemDictionary.System#Collections#Generic#ICollection{T}#Add(System.Collections.Generic.KeyValuePair{System.Activities.Presentation.Model.ModelItem,System.Activities.Presentation.Model.ModelItem})">
      <summary>Adds a new element to the end of the collection.</summary>
      <param name="item">The element to add.</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemDictionary.System#Collections#Generic#ICollection{T}#Contains(System.Collections.Generic.KeyValuePair{System.Activities.Presentation.Model.ModelItem,System.Activities.Presentation.Model.ModelItem})">
      <summary>Determines whether the dictionary contains the given key/value pair.</summary>
      <returns>true if the dictionary contains the given key/value pair; otherwise, false.</returns>
      <param name="item">The key/value pair to find.</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemDictionary.System#Collections#Generic#ICollection{T}#CopyTo(System.Collections.Generic.KeyValuePair{System.Activities.Presentation.Model.ModelItem,System.Activities.Presentation.Model.ModelItem}[],System.Int32)">
      <summary>Copies an array of key/value pairs into the given dictionary.</summary>
      <param name="array">The array of key/value pairs to copy.</param>
      <param name="arrayIndex">The zero-based index in the current dictionary at which copying begins.</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemDictionary.System#Collections#Generic#ICollection{T}#Remove(System.Collections.Generic.KeyValuePair{System.Activities.Presentation.Model.ModelItem,System.Activities.Presentation.Model.ModelItem})">
      <summary>Removes the specified key/value pair from the dictionary.</summary>
      <returns>true if the item exists and is removed; otherwise, false.</returns>
      <param name="item">The key/value pair to remove.</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemDictionary.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an array, starting at a particular array index.</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />. The array must have zero-based indexing</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItemDictionary.System#Collections#ICollection#Count">
      <summary>Gets the number of elements contained in the <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>The number of elements contained in the <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItemDictionary.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value that indicates whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).</summary>
      <returns>true if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItemDictionary.System#Collections#ICollection#SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemDictionary.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>Adds an element with the provided key and value to the <see cref="T:System.Collections.IDictionary" /> object.</summary>
      <param name="key">The object to use as the key of the element to add.</param>
      <param name="value">The object to use as the value of the element to add.</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemDictionary.System#Collections#IDictionary#Clear">
      <summary>Removes all elements from the <see cref="T:System.Collections.IDictionary" /> object.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemDictionary.System#Collections#IDictionary#Contains(System.Object)">
      <summary>Determines whether the <see cref="T:System.Collections.IDictionary" /> object contains an element with the specified key.</summary>
      <returns>true if the <see cref="T:System.Collections.IDictionary" /> contains an element with the key; otherwise, false.</returns>
      <param name="key">The key to locate in the <see cref="T:System.Collections.IDictionary" /> object.</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemDictionary.System#Collections#IDictionary#GetEnumerator">
      <summary>Returns the <see cref="T:System.Collections.IDictionaryEnumerator" /> object for the <see cref="T:System.Collections.IDictionary" /> object.</summary>
      <returns>An <see cref="T:System.Collections.IDictionaryEnumerator" /> object for the <see cref="T:System.Collections.IDictionary" /> object.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItemDictionary.System#Collections#IDictionary#IsFixedSize">
      <summary>Gets a value that indicates whether the <see cref="T:System.Collections.IDictionary" /> object has a fixed size.</summary>
      <returns>true if the <see cref="T:System.Collections.IDictionary" /> object has a fixed size; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItemDictionary.System#Collections#IDictionary#IsReadOnly">
      <summary>Gets a value that indicates whether the <see cref="T:System.Collections.IDictionary" /> object is read-only.</summary>
      <returns>true if the <see cref="T:System.Collections.IDictionary" /> object is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItemDictionary.System#Collections#IDictionary#Item(System.Object)">
      <summary>Gets or sets the element with the specified key.</summary>
      <returns>The element with the specified key.</returns>
      <param name="key">The key of the element to get or set.</param>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItemDictionary.System#Collections#IDictionary#Keys">
      <summary>Gets an <see cref="T:System.Collections.ICollection" /> object that contains the keys of the <see cref="T:System.Collections.IDictionary" /> object.</summary>
      <returns>An <see cref="T:System.Collections.ICollection" /> object that contains the keys of the <see cref="T:System.Collections.IDictionary" /> object.</returns>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemDictionary.System#Collections#IDictionary#Remove(System.Object)">
      <summary>Removes the element with the specified key from the <see cref="T:System.Collections.IDictionary" />.</summary>
      <param name="key">The key of the element to remove.</param>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItemDictionary.System#Collections#IDictionary#Values">
      <summary>Gets an <see cref="T:System.Collections.ICollection" /> object that contains the values in the <see cref="T:System.Collections.IDictionary" /> object.</summary>
      <returns>An <see cref="T:System.Collections.ICollection" /> object that contains the values in the <see cref="T:System.Collections.IDictionary" /> object.</returns>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemDictionary.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection..</returns>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemDictionary.TryGetValue(System.Activities.Presentation.Model.ModelItem,System.Activities.Presentation.Model.ModelItem@)">
      <summary>Retrieves the value for the given key, if possible.</summary>
      <returns>true if there is a value present for the specified key; otherwise, false.</returns>
      <param name="key">The key associated with the value to retrieve.</param>
      <param name="value">The value associated with the specified key.</param>
      <exception cref="T:System.ArgumentNullException">If <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemDictionary.TryGetValue(System.Object,System.Activities.Presentation.Model.ModelItem@)">
      <summary>Retrieves the value for the given key, if possible.</summary>
      <returns>true if there is a value present for the specified key; otherwise, false.</returns>
      <param name="key">The key associated with the value to retrieve.</param>
      <param name="value">The value associated with the specified key.</param>
      <exception cref="T:System.ArgumentNullException">If <paramref name="key" /> is null.</exception>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItemDictionary.Values">
      <summary>Gets the values of the collection.</summary>
      <returns>Returns <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
    </member>
    <member name="T:System.Activities.Presentation.Model.ModelItemExtensions">
      <summary>Implements extensions to the base model item. </summary>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemExtensions.Focus(System.Activities.Presentation.Model.ModelItem)">
      <summary>Sets the keyboard focus on the specified designer item.</summary>
      <param name="item">The designer item to set focus on.</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemExtensions.Focus(System.Activities.Presentation.Model.ModelItem,System.Int32)">
      <summary>Sets the keyboard focus on the specified designer item.</summary>
      <param name="item">The designer item to set focus on.</param>
      <param name="level">The maximum number of levels used to set a limit on the expansion of the model tree if the specified designer item is not visible.</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemExtensions.GetEditingContext(System.Activities.Presentation.Model.ModelItem)">
      <summary>Retrieves the editing context of the specified model item.</summary>
      <returns>The editing context of the specified model item.</returns>
      <param name="modelItem">The model item.</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemExtensions.GetModelItemFromPath(System.String,System.Activities.Presentation.Model.ModelItem)">
      <summary>Retrieves a model item from the specified path and root.</summary>
      <returns>The model item from the specified path and root.</returns>
      <param name="path">The path.</param>
      <param name="root">The root.</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemExtensions.GetModelPath(System.Activities.Presentation.Model.ModelItem)">
      <summary>Retrieves the path of the specified model item.</summary>
      <returns>The path of the specified model item.</returns>
      <param name="modelItem">The model item.</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemExtensions.IsParentOf(System.Activities.Presentation.Model.ModelItem,System.Activities.Presentation.Model.ModelItem)">
      <summary>Returns a value that indicates whether the first specified designer item is a parent of the second specified designer item.</summary>
      <returns>true if <paramref name="item" /> is the parent of <paramref name="child" />; otherwise, false.</returns>
      <param name="item">The parent designer item to check.</param>
      <param name="child">The child designer item to check.</param>
    </member>
    <member name="T:System.Activities.Presentation.Model.ModelMemberCollection`2">
      <summary>An abstract base class that <see cref="T:System.Activities.Presentation.Model.ModelPropertyCollection" />  derives from. </summary>
      <typeparam name="TItemType">The type of item that the collection represents.</typeparam>
      <typeparam name="TFindType">The type that should be used as a key in the "Find" methods.</typeparam>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelMemberCollection`2.Find(System.String)">
      <summary>Searches the collection for the given key and returns it if it is found. If the key is not found, this method returns null.</summary>
      <returns>Returns <see cref="{0}" />.</returns>
      <param name="name">The name of the given key.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelMemberCollection`2.Find(System.String,System.Boolean)">
      <summary>Searches the collection for the given key and returns it if it is found. If the key is not found, this method throws an exception or returns null, depending on the value passed to <paramref name="throwOnError" />.</summary>
      <returns>Returns <see cref="{0}" />.</returns>
      <param name="name">The name of the given key.</param>
      <param name="throwOnError">true to throw an exception if the given key is not found; otherwise, false.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> is not found and <paramref name="throwOnError" /> is true.</exception>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelMemberCollection`2.Find(`1)">
      <summary>Searches the collection for the given key and returns it if it is found. If the key is not found, this method returns null.</summary>
      <returns>Returns <see cref="{0}" />.</returns>
      <param name="value">The type of the given key.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelMemberCollection`2.Find(`1,System.Boolean)">
      <summary>Searches the collection for the given key and returns it if it is found. If the key is not found, this method throws an exception or returns null, depending on the value passed to <paramref name="throwOnError" />.</summary>
      <returns>Returns <see cref="{0}" />.</returns>
      <param name="value">The type of the given key.</param>
      <param name="throwOnError">true to throw an exception if the given key is not found; otherwise, false.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="value" /> is not found and <paramref name="throwOnError" /> is true.</exception>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelMemberCollection`2.GetEnumerator">
      <summary>Returns an enumerator to enumerate through the values in the collection.</summary>
      <returns>Returns <see cref="T:System.Collections.Generic.IEnumerator`1" />.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelMemberCollection`2.Item(System.String)">
      <summary>Gets the value at the specified index by name.</summary>
      <returns>The value at the specified index by name.</returns>
      <param name="name">The name of the type to retrieve.</param>
      <exception cref="ArgumentException">The <paramref name="name" /> is not found.</exception>
      <exception cref="ArgumentNullException">The <paramref name="name" /> is null.</exception>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelMemberCollection`2.Item(`1)">
      <summary>Gets the value at the specified index by type.</summary>
      <returns>The value at the specified index by type.</returns>
      <param name="value">The type to retrieve.</param>
      <exception cref="ArgumentException">The <paramref name="value" /> is not found.</exception>
      <exception cref="ArgumentNullException">The <paramref name="value" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelMemberCollection`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>Returns <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="T:System.Activities.Presentation.Model.ModelProperty">
      <summary>A <see cref="T:System.Activities.Presentation.Model.ModelProperty" /> represents a property on a <see cref="T:System.Activities.Presentation.Model.ModelItem" />. Model properties are associated with an instance of an item, which allows them to have simple Value get/set properties instead of using the more cumbersome GetValue/SetValue mechanism of <see cref="T:System.ComponentModel.PropertyDescriptor" />.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelProperty.#ctor">
      <summary>Creates a new <see cref="T:System.Activities.Presentation.Model.ModelProperty" />.</summary>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelProperty.AttachedOwnerType">
      <summary>Returns the type that defines this property if <see cref="P:System.Activities.Presentation.Model.ModelProperty.IsAttached" /> returns true; otherwise, returns null.</summary>
      <returns>Returns a <see cref="T:System.Type" /> or null.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelProperty.Attributes">
      <summary>Returns the attributes declared on this property.</summary>
      <returns>Returns the attributes as an <see cref="T:System.ComponentModel.AttributeCollection" />.</returns>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelProperty.ClearValue">
      <summary>Clears the local value for the property.</summary>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelProperty.Collection">
      <summary>Returns <see cref="P:System.Activities.Presentation.Model.ModelProperty.Value" /> cast as a <see cref="T:System.Activities.Presentation.Model.ModelItemCollection" />.</summary>
      <returns>Returns the property value as a <see cref="T:System.Activities.Presentation.Model.ModelItemCollection" />, or null.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelProperty.ComputedValue">
      <summary>Returns the currently computed value for this property. Setting a value on this property is the same as calling <see cref="M:System.Activities.Presentation.Model.ModelProperty.SetValue(System.Object)" />, but can be used in data binding expressions.</summary>
      <returns>Returns the computed value as an <see cref="T:System.Object" />.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelProperty.Converter">
      <summary>Returns the type converter to use with this property.</summary>
      <returns>Returns a <see cref="T:System.ComponentModel.TypeConverter" /> for use with this property.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelProperty.DefaultValue">
      <summary>Returns the default value for this property. If the property does not define a default value, this will return null.</summary>
      <returns>Returns an <see cref="T:System.Object" /> or null.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelProperty.Dictionary">
      <summary>Returns <see cref="P:System.Activities.Presentation.Model.ModelProperty.Value" /> cast as a <see cref="T:System.Activities.Presentation.Model.ModelItemDictionary" />. If the property value is not a dictionary, this property will return null.</summary>
      <returns>Returns a <see cref="T:System.Activities.Presentation.Model.ModelItemDictionary" /> or null.</returns>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelProperty.Equals(System.Object)">
      <summary>Determines the equality for properties. Properties are equal if they have the same name and parent.</summary>
      <returns>true if <paramref name="obj" /> is a <see cref="T:System.Activities.Presentation.Model.ModelProperty" /> that equals this property; otherwise, false.</returns>
      <param name="obj">The property to compare with this property.</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelProperty.GetHashCode">
      <summary>Serves as a hash function for a <see cref="T:System.Activities.Presentation.Model.ModelProperty" />.</summary>
      <returns>Returns a hashcode as an <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelProperty.IsAttached">
      <summary>Determines whether the property represents an attached property from a different type.</summary>
      <returns>true if the property represents an attached property from a different type; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelProperty.IsBrowsable">
      <summary>Determines whether the property can be shown in a property window.</summary>
      <returns>true if the property can be shown in a property window; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelProperty.IsCollection">
      <summary>Determines whether the value contained in the property is a <see cref="T:System.Activities.Presentation.Model.ModelItemCollection" />.</summary>
      <returns>true if the value contained in the property is a <see cref="T:System.Activities.Presentation.Model.ModelItemCollection" />; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelProperty.IsDictionary">
      <summary>Determines whether the value contained in the property is a <see cref="T:System.Activities.Presentation.Model.ModelItemDictionary" />.</summary>
      <returns>true if the value contained in the property is a <see cref="T:System.Activities.Design.Model.ModelItemDictionary" />; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelProperty.IsReadOnly">
      <summary>Determines whether the property is read only.</summary>
      <returns>true if the property is read only; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelProperty.IsSet">
      <summary>Determines whether the value of the property is set locally.</summary>
      <returns>true if the value of the property is set locally; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelProperty.Name">
      <summary>Gets the name of this property.</summary>
      <returns>The name of this property.</returns>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelProperty.op_Equality(System.Activities.Presentation.Model.ModelProperty,System.Activities.Presentation.Model.ModelProperty)">
      <summary>Determines whether the properties are equal. Properties are equal if they have the same name and parent.</summary>
      <returns>true if the first property equals the second property; otherwise, false.</returns>
      <param name="first">The first property.</param>
      <param name="second">The second property.</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelProperty.op_Inequality(System.Activities.Presentation.Model.ModelProperty,System.Activities.Presentation.Model.ModelProperty)">
      <summary>Determines whether the properties are unequal. Properties are equal if they have the same name and parent.</summary>
      <returns>false if the first property equals the second property; otherwise, true.</returns>
      <param name="first">The first property.</param>
      <param name="second">The second property.</param>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelProperty.Parent">
      <summary>Returns the parent of this property.</summary>
      <returns>Returns the parent of this property as a <see cref="T:System.Activities.Design.Model.ModelItem" />.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelProperty.PropertyType">
      <summary>Returns the data type of the property.</summary>
      <returns>Returns the <see cref="T:System.Type" /> of the property.</returns>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelProperty.SetValue(System.Object)">
      <summary>Sets a local value on a property.</summary>
      <returns>Returns <paramref name="value" /> as a <see cref="T:System.Activities.Presentation.Model.ModelItem" />.</returns>
      <param name="value">The new value to set.</param>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelProperty.Value">
      <summary>Returns the value set into this property.</summary>
      <returns>Returns the property value as a <see cref="T:System.Activities.Presentation.Model.ModelItem" />, or null.</returns>
    </member>
    <member name="T:System.Activities.Presentation.Model.ModelPropertyCollection">
      <summary>Contains an enumeration of properties.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelPropertyCollection.#ctor">
      <summary>Creates a new <see cref="T:System.Activities.Presentation.Model.ModelPropertyCollection" />.</summary>
    </member>
    <member name="T:System.Activities.Presentation.Model.ModelTreeManager">
      <summary>Provides the root model item and the model service, and enables you to sync the model tree with the XAML text.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelTreeManager.#ctor(System.Activities.Presentation.EditingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Presentation.Model.ModelTreeManager" /> class, using the specified context. </summary>
      <param name="context">The context. </param>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelTreeManager.CreateModelItem(System.Activities.Presentation.Model.ModelItem,System.Object)">
      <summary>Creates a model item based on the specified parent and instance. </summary>
      <returns>Returns a <see cref="T:System.Activities.Presentation.Model.ModelItem" /> that contains the new model item.</returns>
      <param name="parent">The parent item. </param>
      <param name="instance">The instance.</param>
    </member>
    <member name="E:System.Activities.Presentation.Model.ModelTreeManager.EditingScopeCompleted">
      <summary>Occurs when the editing scope is completed.  </summary>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelTreeManager.GetModelItem(System.Object,System.Boolean)">
      <summary>Returns the model item for the manager.</summary>
      <returns>The model item for the manager.</returns>
      <param name="instance">The instance.</param>
      <param name="shouldExpandModelTree">True if the manager should expand the model tree; otherwise, false.</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelTreeManager.Load(System.Object)">
      <summary>Loads the specified root instance.</summary>
      <param name="rootInstance">The root instance to load.</param>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelTreeManager.Root">
      <summary>Gets the root.</summary>
      <returns>The <see cref="T:System.Activities.Presentation.Model.ModelItem" /> object that contains the root.</returns>
    </member>
    <member name="T:System.Activities.Presentation.Model.MorphHelper">
      <summary>A helper class used to update model item references and properties.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Model.MorphHelper.AddPropertyValueMorphHelper(System.Type,System.Activities.Presentation.Model.PropertyValueMorphHelper)">
      <summary>Adds a method to handle type conversions for the specified property type.</summary>
      <param name="propertyType">The property type.</param>
      <param name="extension">The method that handles type conversions.</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.MorphHelper.GetPropertyValueMorphHelper(System.Type)">
      <summary>Returns the method that handles type conversions for the specified property type.</summary>
      <returns>The method that handles type conversions for the specified property type.</returns>
      <param name="propertyType">The property type to get the method for.</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.MorphHelper.MorphObject(System.Activities.Presentation.Model.ModelItem,System.Activities.Presentation.Model.ModelItem)">
      <summary>Updates the model item references to the specified new model item in the model item parents and sources.</summary>
      <param name="oldModelItem">The old model item to get the parents and sources of.</param>
      <param name="newModelitem">The new model item.</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.MorphHelper.MorphProperties(System.Activities.Presentation.Model.ModelItem,System.Activities.Presentation.Model.ModelItem)">
      <summary>Updates the property values in the specified new model item from the corresponding property values in the specified old model item.</summary>
      <param name="oldModelItem">The old model item.</param>
      <param name="newModelitem">The new model item.</param>
    </member>
    <member name="T:System.Activities.Presentation.Model.PropertyValueMorphHelper">
      <summary>Represents a delegate that is used to reference the method that handles type conversions for <see cref="T:System.Activities.Presentation.Model.ModelItem" /> property values. </summary>
      <returns>The converted property value.</returns>
      <param name="originalValue">The model item property value to convert to the new type.</param>
      <param name="newModelProperty">The model item property whose type the <paramref name="originalValue" /> needs to be converted to.</param>
    </member>
    <member name="T:System.Activities.Presentation.Model.TextImage">
      <summary>Contains the searchable strings extracted from the model tree. All strings  are well ordered. The start index points to the cursor in the content, depending on the current selection in the model item tree. The search implementor can start a search from the start index. </summary>
    </member>
    <member name="M:System.Activities.Presentation.Model.TextImage.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Presentation.Model.TextImage" /> class.</summary>
    </member>
    <member name="P:System.Activities.Presentation.Model.TextImage.Lines">
      <summary>Gets or sets the generic list of lines associated with <see cref="T:System.Activities.Presentation.Model.TextImage" />.</summary>
      <returns>The generic list of lines.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.TextImage.StartLineIndex">
      <summary>Gets or sets the start line index associated with <see cref="T:System.Activities.Presentation.Model.TextImage" />.</summary>
      <returns>The start line index.</returns>
    </member>
    <member name="T:System.Activities.Presentation.PropertyEditing.CategoryEditor">
      <summary>Provides a custom <see cref="T:System.Activities.Presentation.PropertyEditing.CategoryEditor" /> to use for grouping properties that are displayed in a <see cref="T:System.Windows.Forms.PropertyGrid" />. </summary>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.CategoryEditor.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Presentation.PropertyEditing.CategoryEditor" /> class.</summary>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.CategoryEditor.ConsumesProperty(System.Activities.Presentation.PropertyEditing.PropertyEntry)">
      <summary>Determines which properties are edited by the <see cref="T:System.Activities.Presentation.PropertyEditing.CategoryEditor" />.</summary>
      <returns>true if this editor edits the specified property; otherwise, false.</returns>
      <param name="propertyEntry">The <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyEntry" /> instance that is checked to determine whether it is included among those properties edited by the <see cref="T:System.Activities.Presentation.PropertyEditing.CategoryEditor" />.</param>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.CategoryEditor.CreateEditorAttribute(System.Activities.Presentation.PropertyEditing.CategoryEditor)">
      <summary>Creates a new <see cref="T:System.ComponentModel.EditorAttribute" /> for the specified <see cref="T:System.Activities.Presentation.PropertyEditing.CategoryEditor" />.</summary>
      <returns>A new <see cref="T:System.ComponentModel.EditorAttribute" />.</returns>
      <param name="editor">The  <see cref="T:System.Activities.Presentation.PropertyEditing.CategoryEditor" /> for which to create a new <see cref="T:System.ComponentModel.EditorAttribute" />.</param>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.CategoryEditor.CreateEditorAttribute(System.Type)">
      <summary>Creates a new <see cref="T:System.ComponentModel.EditorAttribute" /> for the specified <see cref="T:System.Activities.Presentation.PropertyEditing.CategoryEditor" /> type.</summary>
      <returns>A new <see cref="T:System.ComponentModel.EditorAttribute" />.</returns>
      <param name="categoryEditorType">The <see cref="T:System.Activities.Presentation.PropertyEditing.CategoryEditor" /> type for which to create the new <see cref="T:System.ComponentModel.EditorAttribute" />.</param>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.CategoryEditor.EditorTemplate">
      <summary>Gets a <see cref="T:System.Windows.DataTemplate" /> that is hosted by the property inspector to provide the user interface for a <see cref="T:System.Activities.Presentation.PropertyEditing.CategoryEditor" />.</summary>
      <returns>A <see cref="T:System.Windows.DataTemplate" /> user interface.</returns>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.CategoryEditor.GetImage(System.Windows.Size)">
      <summary>Returns an <see cref="T:System.Object" /> that the host can display in a <see cref="T:System.Windows.Controls.ContentControl" />.</summary>
      <returns>An <see cref="T:System.Object" /> to display in the <see cref="T:System.Windows.Controls.ContentControl" />.</returns>
      <param name="desiredSize">The desired <see cref="T.Systems.Windows.Size" /> of the image to return.</param>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.CategoryEditor.TargetCategory">
      <summary>Gets a localized string that indicates to which category the editor belongs.</summary>
      <returns>A <see cref="T:System.String" /> that represents the editor category.</returns>
    </member>
    <member name="T:System.Activities.Presentation.PropertyEditing.CategoryEntry">
      <summary>Models a Category, which consists of a localized name and a collection of properties. </summary>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.CategoryEntry.#ctor(System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Presentation.PropertyEditing.CategoryEntry" /> class.</summary>
      <param name="name">The localized Category name of a group of properties.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is empty.</exception>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.CategoryEntry.ApplyFilter(System.Activities.Presentation.PropertyEditing.PropertyFilter)">
      <summary>Sets a new property filter.</summary>
      <param name="filter">The <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyFilter" /> being applied.</param>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.CategoryEntry.CategoryName">
      <summary>Gets the name of the localized Category.</summary>
      <returns>The localized Category name.</returns>
    </member>
    <member name="E:System.Activities.Presentation.PropertyEditing.CategoryEntry.FilterApplied">
      <summary>Declares the <see cref="T:System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget" /> event.</summary>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.CategoryEntry.Item(System.String)">
      <summary>Returns a property instance of this <see cref="System.Activities.Presentation.PropertyEditing.CategoryEntry" /> object given the property name.</summary>
      <returns>The property corresponding to the property name parameter if one exists; otherwise, null.</returns>
      <param name="propertyName">The string property name for which to return a property instance.</param>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.CategoryEntry.MatchesFilter">
      <summary>Gets or sets a value that indicates whether the <see cref="T:System.Activities.Presentation.PropertyEditing.CategoryEntry" /> matches a filter.</summary>
      <returns>true if a filter equals the specified filter; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.CategoryEntry.MatchesPredicate(System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate)">
      <summary>Indicates whether an <see cref="T:System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget" /> matches a predicate.</summary>
      <returns>true if there is a match; otherwise, false.</returns>
      <param name="predicate">The <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate" />, a string, to match against.</param>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.CategoryEntry.OnFilterApplied(System.Activities.Presentation.PropertyEditing.PropertyFilter)">
      <summary>Raises the <see cref="E:System.Activities.Presentation.PropertyEditing.CategoryEntry.FilterApplied" /> event when the property filter is applied.</summary>
      <param name="filter">The <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyFilter" /> being applied.</param>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.CategoryEntry.OnPropertyChanged(System.String)">
      <summary>Raises the <see cref="E:System.Activities.Presentation.PropertyEditing.CategoryEntry.PropertyChanged" /> event.</summary>
      <param name="propertyName">The name of the property that is changed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> is null.</exception>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.CategoryEntry.Properties">
      <summary>Gets an <see cref="Systems.Collections.IEnumerable" /> collection of all of the properties in the category.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" />, a collection of all the properties in the category.</returns>
    </member>
    <member name="E:System.Activities.Presentation.PropertyEditing.CategoryEntry.PropertyChanged">
      <summary>Declares the <see cref="T:Microsoft.Windows.Design.PropertyEditing.INotifyPropertyChanged" /> event.</summary>
    </member>
    <member name="T:System.Activities.Presentation.PropertyEditing.DependencyPropertyValueSource">
      <summary>Identifies and reports value sources for properties that are dependent upon a parent property.</summary>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.DependencyPropertyValueSource.CustomMarkupExtension">
      <summary>Gets a property element in XAML code that contains a markup extension.</summary>
      <returns>A value source that is a XAML element that contains a markup extension.</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.DependencyPropertyValueSource.DataBound">
      <summary>Gets the value of a property that represents a binding between a property and a data source.</summary>
      <returns>A value source that designates a data binding.</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.DependencyPropertyValueSource.DefaultValue">
      <summary>Gets the value of a property that does not have its value set in XAML and does not inherit any value from its parent property.</summary>
      <returns>A default value source.</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.DependencyPropertyValueSource.Inherited">
      <summary>Gets the value of a property that is inherited from a parent property.</summary>
      <returns>A value source that indicates the property is inherited.</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.DependencyPropertyValueSource.IsCustomMarkupExtension">
      <summary>Gets a value that indicates whether the property is set to a custom markup extension.</summary>
      <returns>true if the property is a custom markup extension; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.DependencyPropertyValueSource.IsDataBound">
      <summary>Gets a value that indicates whether the property is set to a data binding expression.</summary>
      <returns>true if the property is set to a data binding expression; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.DependencyPropertyValueSource.IsDefaultValue">
      <summary>Gets a value that indicates whether the property is set to its default value.</summary>
      <returns>true if the property is set to its default value; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.DependencyPropertyValueSource.IsExpression">
      <summary>Gets a value that indicates whether the property is set to an expression.</summary>
      <returns>true if the property is set to an expression; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.DependencyPropertyValueSource.IsInherited">
      <summary>Gets a value that indicates whether the property is inherited from a parent property.</summary>
      <returns>true if the property is inherited; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.DependencyPropertyValueSource.IsLocal">
      <summary>Gets a value that indicates whether the property is set to a local value.</summary>
      <returns>true if the property is set to a local value; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.DependencyPropertyValueSource.IsLocalResource">
      <summary>Gets a value that indicates whether the property is set to a resource value that appears inside a block of code, in blocks nested in that block, or within the list of formal parameter declarations in a function definition.</summary>
      <returns>true if the property is set to a local resource value; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.DependencyPropertyValueSource.IsResource">
      <summary>Read-only property that returns true if the property is set to a system or local resource.</summary>
      <returns>true if the property is set to a system or local resource; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.DependencyPropertyValueSource.IsSystemResource">
      <summary>Gets a value that indicates whether the property is set to a system resource.</summary>
      <returns>true if the property is set to a system resource; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.DependencyPropertyValueSource.IsTemplateBinding">
      <summary>Gets a value that indicates whether the property is set to a <see cref="P:System.Activities.Presentation.PropertyEditing.DependencyPropertyValueSource.TemplateBinding" /> markup extension.</summary>
      <returns>true if the property is set to a template binding markup extension; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.DependencyPropertyValueSource.Local">
      <summary>Gets the value of a property set to a local value.</summary>
      <returns>A value source that contains a local value.</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.DependencyPropertyValueSource.LocalDynamicResource">
      <summary>Gets the value of a property that represents a <see cref="P:System.Activities.Presentation.PropertyEditing.DependencyPropertyValueSource.LocalDynamicResource" /> reference.</summary>
      <returns>A value source that contains a dynamic resource reference.</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.DependencyPropertyValueSource.LocalStaticResource">
      <summary>Gets the value of a property that represents a <see cref="P:System.Activities.Presentation.PropertyEditing.DependencyPropertyValueSource.LocalStaticResource" /> reference.</summary>
      <returns>A value source that contains a static resource reference.</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.DependencyPropertyValueSource.SystemResource">
      <summary>Gets the value of a property set to a <see cref="P:System.Activities.Presentation.PropertyEditing.DependencyPropertyValueSource.SystemResource" />.</summary>
      <returns>A value source that contains a value that designates a system resource.</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.DependencyPropertyValueSource.TemplateBinding">
      <summary>Gets the value of a property that represents a <see cref="P:System.Activities.Presentation.PropertyEditing.DependencyPropertyValueSource.TemplateBinding" /> markup extension.</summary>
      <returns>A value source that represents a template binding markup extension.</returns>
    </member>
    <member name="T:System.Activities.Presentation.PropertyEditing.DialogPropertyValueEditor">
      <summary>Container for all dialog-editing logic for <see cref="P:System.Activities.Presentation.PropertyEditing.PropertyContainer.PropertyEntry" /> objects.</summary>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.DialogPropertyValueEditor.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Presentation.PropertyEditing.DialogPropertyValueEditor" /> class with no specific templates.</summary>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.DialogPropertyValueEditor.#ctor(System.Windows.DataTemplate,System.Windows.DataTemplate)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Design.PropertyEditing.DialogPropertyValueEditor" /> class with the specified dialog editor and inline editor templates.</summary>
      <param name="dialogEditorTemplate">A <see cref="T:System.Window.DataTemplate" /> that is hosted in a host-specific dialog chrome and has its <see cref="P:System.Activities.ActivityContext.DataContext" /> set to the <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> that corresponds to the property being edited.</param>
      <param name="inlineEditorTemplate">A <see cref="T:System.Windows.DataTemplate" /> that is used for the inline editor user interface. If used, its <see cref="P:System.Activities.ActivityContext.DataContext" /> is set to the <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> that corresponds to the property being edited.</param>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.DialogPropertyValueEditor.DialogEditorTemplate">
      <summary>Gets or sets the <see cref="T:System.Windows.DataTemplate" /> that is hosted by a host-specific dialog and has its <see cref="P:System.Activities.ActivityContext.DataContext" /> set to a <see cref="P:System.Activities.Presentation.PropertyEditing.PropertyEntry.PropertyValue" />.</summary>
      <returns>The <see cref="T:System.Windows.DataTemplate" /> object that is hosted by a host-specific dialog.</returns>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.DialogPropertyValueEditor.ShowDialog(System.Activities.Presentation.PropertyEditing.PropertyValue,System.Windows.IInputElement)">
      <summary>Called when the <see cref="P:System.Activities.Presentation.PropertyEditing.DialogPropertyValueEditor.DialogEditorTemplate" /> is null and a dialog has been invoked by the user.</summary>
      <param name="propertyValue">The <see cref="P:System.Activities.Presentation.PropertyEditing.PropertyEntry.PropertyValue" /> for the property being edited.</param>
      <param name="commandSource">The <see cref="T:System.Windows.IinputElement" /> that can be used as a source for execution of <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValueEditorCommands" />. </param>
    </member>
    <member name="T:System.Activities.Presentation.PropertyEditing.EditModeSwitchButton">
      <summary>Represents a button that enables the user to switch between the different <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyContainer" /> modes within the property grid .</summary>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.EditModeSwitchButton.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Presentation.PropertyEditing.EditModeSwitchButton" /> class.</summary>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.EditModeSwitchButton.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Determines what type of <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyContainerEditMode" /> to display upon receipt of a <see cref="T:System.Windows.MouseButtonEventArgs" /> event.</summary>
      <param name="e">
        <see cref="T:System.Windows.MouseButtonEventArgs" /> event arguments.</param>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.EditModeSwitchButton.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Checks whether the <see cref="F:System.Activities.Presentation.PropertyEditing.PropertyContainer.OwningPropertyContainerProperty" /> has changed (or gained or lost) its owning <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyContainer" /> and if that is <see cref="T:System.Boolean.True" />, sets up the <see cref="P:System.Activities.Presentation.PropertyEditing.EditModeSwitchButton.TargetEditMode" /> to be the mode to switch to.</summary>
      <param name="e">
        <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> event arguments.</param>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.EditModeSwitchButton.SyncModeToOwningContainer">
      <summary>Gets a value that, when <see cref="T:System.Boolean.True" />, means that the <see cref="P:System.Activities.Presentation.PropertyEditing.EditModeSwitchButton.TargetEditMode" /> will be calculated automatically to match the <see cref="P:System.Activities.Presentation.PropertyEditing.PropertyContainer.ActiveEditMode" /> of the owning <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyContainer" />. Otherwise, the mode to switch to will be based on the <see cref="P:System.Activities.Presentation.PropertyEditing.EditModeSwitchButton.TargetEditMode" /> property.</summary>
      <returns>true if the <see cref="T:System.Activities.Presentation.PropertyEditing.EditModeSwitchButton" /> will switch automatically to the edit mode of its <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyContainer" />; otherwise, false.</returns>
    </member>
    <member name="F:System.Activities.Presentation.PropertyEditing.EditModeSwitchButton.SyncModeToOwningContainerProperty">
      <summary>Registers the dependency property which, when <see cref="T:System.Boolean.True" />, means that the <see cref="P:System.Activities.Presentation.PropertyEditing.EditModeSwitchButton.TargetEditMode" /> will be calculated automatically to match the <see cref="P:System.Activities.Presentation.PropertyEditing.PropertyContainer.ActiveEditMode" /> of the owning <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyContainer" />. Otherwise, the mode to switch to will be based on the <see cref="P:System.Activities.Presentation.PropertyEditing.EditModeSwitchButton.TargetEditMode" /> property.</summary>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.EditModeSwitchButton.TargetEditMode">
      <summary>The edit mode to switch to when the <see cref="T:System.Activities.Presentation.PropertyEditing.EditModeSwitchButton" /> is clicked.</summary>
      <returns>A <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyContainer" /> edit mode.</returns>
    </member>
    <member name="F:System.Activities.Presentation.PropertyEditing.EditModeSwitchButton.TargetEditModeProperty">
      <summary>Registers the dependency property that gets or sets the targeted mode when the <see cref="T:System.Activities.Presentation.PropertyEditing.EditModeSwitchButton" /> is clicked. </summary>
    </member>
    <member name="T:System.Activities.Presentation.PropertyEditing.EditorOptionAttribute">
      <summary>Specifies a single editor option attribute.</summary>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.EditorOptionAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Presentation.PropertyEditing.EditorOptionAttribute" /> class.</summary>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.EditorOptionAttribute.Name">
      <summary>Gets or sets the name of the attribute</summary>
      <returns>The name of the attribute.</returns>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.EditorOptionAttribute.TryGetOptionValue(System.Collections.IEnumerable,System.String,System.Object@)">
      <summary>Determines whether the collection contains a specific attribute and returns the attribute value.</summary>
      <returns>true if the specified attribute is found in the collection; otherwise, false.</returns>
      <param name="attributes">The collection of attributes.</param>
      <param name="optionName">The name of the attribute to check.</param>
      <param name="optionValue">When this method returns, contains the value of the attribute. This parameter is passed uninitialized.</param>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.EditorOptionAttribute.TypeId">
      <summary>Gets a unique identifier for this attribute.</summary>
      <returns>A unique identifier for this attribute.</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.EditorOptionAttribute.Value">
      <summary>Gets or sets the value of the attribute.</summary>
      <returns>The value of the attribute.</returns>
    </member>
    <member name="T:System.Activities.Presentation.PropertyEditing.EditorReuseAttribute">
      <summary>Represents an attribute that is applied to a method that invokes a property editor and conveys whether the property editor can be used to edit successive properties without restarting.</summary>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.EditorReuseAttribute.#ctor(System.Boolean)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Presentation.PropertyEditing.EditorReuseAttribute" /> class.</summary>
      <param name="reuseEditor">true if the attribute is to be applied to a method that invokes a reusable property editor; otherwise, false. </param>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.EditorReuseAttribute.ReuseEditor">
      <summary>Gets a Boolean that indicates whether an attribute is applied to a method that invokes a reusable property editor. </summary>
      <returns>true when an attribute is applied to a method that invokes a reusable property editor; otherwise, false.</returns>
    </member>
    <member name="T:System.Activities.Presentation.PropertyEditing.ExtendedPropertyValueEditor">
      <summary>Container for all extended editor logic for properties. </summary>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.ExtendedPropertyValueEditor.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Presentation.PropertyEditing.ExtendedPropertyValueEditor" /> class without specified extended and inline editor <see cref="T:System.Windows.DataTemplate" /> objects.</summary>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.ExtendedPropertyValueEditor.#ctor(System.Windows.DataTemplate,System.Windows.DataTemplate)">
      <summary>Creates a new instance of <see cref="T:System.Activities.Presentation.PropertyEditing.ExtendedPropertyValueEditor" /> with the specified extended and inline editor <see cref="T:System.Windows.DataTemplate" /> objects.</summary>
      <param name="extendedEditorTemplate">The <see cref="T:System.Windows.DataTemplate" /> used for the extended pop-up or pinned editor. </param>
      <param name="inlineEditorTemplate">The <see cref="T:System.Windows.DataTemplate" /> used for the inline editor. </param>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.ExtendedPropertyValueEditor.ExtendedEditorTemplate">
      <summary>Gets or sets the <see cref="T:System.Windows.DataTemplate" /> used for the extended pop-up or pinned editor.</summary>
      <returns>The <see cref="T:System.Windows.DataTemplate" /> object used for the extended pop-up or pinned editor.</returns>
    </member>
    <member name="T:System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget">
      <summary>Interface that is used by the host infrastructure for property editing to handle sorting and filtering functionality. </summary>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget.ApplyFilter(System.Activities.Presentation.PropertyEditing.PropertyFilter)">
      <summary>Used to set a new <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyFilter" /> on the <see cref="T:System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget" />.</summary>
      <param name="filter">The new <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyFilter" /> instance.</param>
    </member>
    <member name="E:System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget.FilterApplied">
      <summary>Declaration of the event raised when a <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyFilter" /> is changed through a call to <see cref="M:System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget.ApplyFilter(System.Activities.Presentation.PropertyEditing.PropertyFilter)" />.</summary>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget.MatchesFilter">
      <summary>Read-only property that returns true if the <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyFilter" /> is a match for the object.</summary>
      <returns>true if the property filter matches the property filter target; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget.MatchesPredicate(System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate)">
      <summary>Used to determine whether this <see cref="T:System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget" /> is a match for a particular <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate" />.</summary>
      <returns>true if it there is a match between a property filter target and a property filter predicate; otherwise, false.</returns>
      <param name="predicate">The <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate" /> to match against.</param>
    </member>
    <member name="T:System.Activities.Presentation.PropertyEditing.PropertyContainerEditMode">
      <summary>Contains the different edit modes of a <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyContainer" />.</summary>
    </member>
    <member name="F:System.Activities.Presentation.PropertyEditing.PropertyContainerEditMode.Dialog">
      <summary>Edit mode of the property inspector dialog window, which enables the implementation of a pop-up window to contain the property editor.</summary>
    </member>
    <member name="F:System.Activities.Presentation.PropertyEditing.PropertyContainerEditMode.ExtendedPinned">
      <summary>Editor mode of the property inspector dialog window, which enables the implementation of an additional user interface pinned into place within the property inspector window.</summary>
    </member>
    <member name="F:System.Activities.Presentation.PropertyEditing.PropertyContainerEditMode.ExtendedPopup">
      <summary>Editor mode of the property inspector dialog window, which enables the implementation of an additional user interface displayed on top of the property inspector window.</summary>
    </member>
    <member name="F:System.Activities.Presentation.PropertyEditing.PropertyContainerEditMode.Inline">
      <summary>Inline editor mode of the property inspector dialog window, which enables the editing of values directly into that window.</summary>
    </member>
    <member name="T:System.Activities.Presentation.PropertyEditing.PropertyEntry">
      <summary>Represents the data of a property for a selected item and enables editing of this property with type-specific data. </summary>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyEntry.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyEntry" /> class.</summary>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyEntry.#ctor(System.Activities.Presentation.PropertyEditing.PropertyValue)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyEntry" /> class that serves as a subproperty of the specified <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" />.</summary>
      <param name="parentValue">The parent <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" />.</param>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyEntry.ApplyFilter(System.Activities.Presentation.PropertyEditing.PropertyFilter)">
      <summary>Stores whether the target property value matches a specified <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyFilter" />.</summary>
      <param name="filter">The <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyFilter" /> to apply.</param>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyEntry.CategoryName">
      <summary>Gets the name of the category in which this property resides.</summary>
      <returns>A <see cref="T:System.String" /> that contains the name of the category.</returns>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyEntry.CreatePropertyValueInstance">
      <summary>Enables the host infrastructure to create a new host-specific <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> instance.</summary>
      <returns>A new <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> object.</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyEntry.Description">
      <summary>Gets the description of the encapsulated property.</summary>
      <returns>A string that contains the description.</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyEntry.DisplayName">
      <summary>Gets the display name for the <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyEntry" />.</summary>
      <returns>A string that contains the display name. </returns>
    </member>
    <member name="E:System.Activities.Presentation.PropertyEditing.PropertyEntry.FilterApplied">
      <summary>Declaration of the <see cref="T:System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget" /> event, which occurs when a <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyFilter" /> is changed through a call to the <see cref="M:System.Activities.Presentation.PropertyEditing.PropertyEntry.ApplyFilter(System.Activities.Presentation.PropertyEditing.PropertyFilter)" /> method. 
</summary>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyEntry.HasStandardValues">
      <summary>Gets a value that indicates whether a set of standard values is available for this <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyEntry" />.</summary>
      <returns>true if a set of standard values is available; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyEntry.IsAdvanced">
      <summary>Gets a value that indicates whether the <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyEntry" /> is custom-made.</summary>
      <returns>true if the property entry is custom-made; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyEntry.IsReadOnly">
      <summary>Gets a value that indicates whether the <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyEntry" /> is read-only.</summary>
      <returns>true if the property entry is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyEntry.MatchesFilter">
      <summary>Gets a value that indicates whether the <see cref="T:System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget" /> matches the filter. Sets the value to indicate that the <see cref="T:System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget" /> matches the filter and fires the event handler method for the property change.</summary>
      <returns>true if the target object matches the filter; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyEntry.MatchesPredicate(System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate)">
      <summary>Implementation of a <see cref="T:System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget" /> method that determines whether the target display or type name matches the specified string containing the name of a filter.</summary>
      <returns>true if the target display or type name matches the specified string; otherwise, false.</returns>
      <param name="predicate">The <see cref="T:System.String" /> display or type name of a filter to match against the target object.</param>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyEntry.OnFilterApplied(System.Activities.Presentation.PropertyEditing.PropertyFilter)">
      <summary>Raises the <see cref="E:System.Activities.Presentation.PropertyEditing.PropertyEntry.FilterApplied" /> event.</summary>
      <param name="filter">The <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyFilter" /> to apply.</param>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyEntry.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>Raises the <see cref="T:System.ComponentModel.INotifyPropertyChanged" /> PropertyChanged event.</summary>
      <param name="e">The EventArgs for this event.</param>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyEntry.OnPropertyChanged(System.String)">
      <summary>Raises the <see cref="T:System.ComponentModel.INotifyPropertyChanged" /> event when the <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyContainer" /> hears that the <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> has changed.</summary>
      <param name="propertyName">The name of the property whose value has changed.</param>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyEntry.ParentValue">
      <summary>Gets the parent <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> in classes derived from a host infrastructure.</summary>
      <returns>A parent <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" />.</returns>
    </member>
    <member name="E:System.Activities.Presentation.PropertyEditing.PropertyEntry.PropertyChanged">
      <summary>Declaration of the <see cref="T:System.ComponentModel.INotifyPropertyChanged" /> event, which occurs when a property value changes.</summary>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyEntry.PropertyName">
      <summary>Gets the name of the property.</summary>
      <returns>A string that contains the property name.</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyEntry.PropertyType">
      <summary>Gets the type of the property.</summary>
      <returns>A type that contains the type of the property.</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyEntry.PropertyValue">
      <summary>Gets the <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> for this <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyEntry" />.</summary>
      <returns>A <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> object.</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyEntry.PropertyValueEditor">
      <summary>Gets the <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValueEditor" /> that is used for editing the value of this <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyEntry" />.</summary>
      <returns>A <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValueEditor" /> object that contains  the current editor.</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyEntry.StandardValues">
      <summary>Gets a set of possible values supported by this <see cref="T:System.Activities.Design.PropertyEditing.PropertyEntry" />.</summary>
      <returns>An <see cref="T:System.Collections.ICollection" /> of possible values.</returns>
    </member>
    <member name="T:System.Activities.Presentation.PropertyEditing.PropertyEntryCollection">
      <summary>Maintains the collection of sub-properties of a given parent <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyEntry" />. </summary>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyEntryCollection.#ctor(System.Activities.Presentation.PropertyEditing.PropertyValue)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyEntryCollection" /> class using the sub-properties of the specified <see cref="P:System.Activities.Presentation.PropertyEditing.PropertyEntryCollection.ParentValue" /> instance.</summary>
      <param name="parentValue">The parent <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> instance used for the initialization.</param>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyEntryCollection.Count">
      <summary>Gets the number of <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyEntry" /> instances in this collection (typically the number of sub-properties for the parent <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" />).</summary>
      <returns>An integer that specifies the number of instances in this collection.</returns>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyEntryCollection.GetEnumerator">
      <summary>Returns an <see cref="T:Systems.Collections.IEnumerator" /> object that iterates all the <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyEntry" /> instances in this collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection of <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyEntry" /> instances.</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyEntryCollection.Item(System.String)">
      <summary>Gets a <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyEntry" /> instance with the specified name from this collection. It is used for sub-property retrieval.</summary>
      <returns>A property entry instance with the specified name; or null if it does not exist.</returns>
      <param name="propertyName">The name of the property to get.</param>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyEntryCollection.ParentValue">
      <summary>Gets the parent <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> from the host infrastructure.</summary>
      <returns>A <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> object.</returns>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyEntryCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an <see cref="T:Systems.Collections.IEnumerator" /> object that iterates all of the <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyEntry" /> instances in this collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through collection of <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyEntry" /> instances.</returns>
    </member>
    <member name="T:System.Activities.Presentation.PropertyEditing.PropertyFilter">
      <summary>Provides filtering functionality for a property editing host.</summary>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyFilter.#ctor(System.Collections.Generic.IEnumerable{System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate})">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyFilter" /> class that includes an enumeration of filtering strings, called predicates, that can be compared against a target property name until a match is found.</summary>
      <param name="predicates">An <see cref="T:System.Collections.IEnumerable" /> list of predicates, or strings used for matching.</param>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyFilter.#ctor(System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyFilter" /> class that includes a <see cref="T:System.String" /> that contains a space-delimited sequence of filtering phrases, called predicates, that can be compared against a target property name until a match is found.</summary>
      <param name="filterText">A <see cref="T:System.String" /> that contains space-delimited predicates for property filtering.</param>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyFilter.IsEmpty">
      <summary>Read-only property that indicates whether this <see cref="T:System.Activities.Design.PropertyEditing.PropertyFilter" /> does not have any filtering predicates.</summary>
      <returns>true if predicates are absent; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyFilter.Match(System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget)">
      <summary> Matches the predicate strings of the current filtering object against the specified target property name and returns a Boolean that indicates whether one or more of the predicate strings matches the target name or whether this <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyFilter" /> does not have any predicates.</summary>
      <returns>true if there is a filter/target match or if there is nothing to use for the comparison; otherwise, false.</returns>
      <param name="target">The name of the property that the current filter will be compared against when looking for a match.</param>
    </member>
    <member name="T:System.Activities.Presentation.PropertyEditing.PropertyFilterAppliedEventArgs">
      <summary>Event arguments that are used to execute an event process when a <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyFilter" /> has been applied to a target property. </summary>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyFilterAppliedEventArgs.#ctor(System.Activities.Presentation.PropertyEditing.PropertyFilter)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyFilterAppliedEventArgs" /> class with the specified filter applied.</summary>
      <param name="filter">The <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyFilter" /> that is applied.</param>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyFilterAppliedEventArgs.Filter">
      <summary>Gets the <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyFilter" /> that is applied to a target property.</summary>
      <returns>The property filter that is applied.</returns>
    </member>
    <member name="T:System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate">
      <summary>Represents a predicate text string that is used to filter property searches. </summary>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate.#ctor(System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate" /> class with the specified search string.</summary>
      <param name="matchText">The predicate string that is used for the match process.</param>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate.Match(System.String)">
      <summary>Indicates whether a case-insensitive match of the predicate string is contained within the target string.</summary>
      <returns>true if a case-insensitive match of the predicate string is contained within the target string; otherwise, false.</returns>
      <param name="target">The string filter.</param>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate.MatchText">
      <summary>Gets the <see cref="T:System.String" /> that is used to match a property filter predicate string to a target string.</summary>
      <returns>A predicate string that contains text for matching.</returns>
    </member>
    <member name="T:System.Activities.Presentation.PropertyEditing.PropertyValue">
      <summary>Maintains a data model for the value of a property in the property grid.</summary>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyValue.#ctor(System.Activities.Presentation.PropertyEditing.PropertyEntry)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> class with the parent property set to a specified <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyEntry" /> object.</summary>
      <param name="parentProperty">The <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyEntry" /> that corresponds to this <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" />.</param>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyValue.CanConvertFromString">
      <summary>When implemented in a derived class, gets a value that indicates whether <see cref="P:System.Activities.Presentation.PropertyEditing.PropertyValue.Value" /> can be converted from a string.</summary>
      <returns>true if the property value can be converted from a string; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyValue.CatchExceptions">
      <summary>Gets a value that indicates whether exceptions thrown during property value getting and setting should be caught or should be propagated directly to the caller.</summary>
      <returns>true if exceptions are caught; false if exceptions are propagated to the caller.</returns>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyValue.ClearValue">
      <summary>When implemented in a derived class, clears the <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> so that it is unset.</summary>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyValue.Collection">
      <summary>When implemented in a derived class, gets a collection of <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> instances that correspond to items in a collection when <see cref="P:System.Activities.Presentation.PropertyEditing.PropertyValue.IsCollection" /> verifies that the property is a collection.</summary>
      <returns>A <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValueCollection" /> object that is a collection of property value instances.</returns>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyValue.ConvertStringToValue(System.String)">
      <summary>When implemented in a derived class, converts the specified <see cref="P:System.Activities.Presentation.PropertyEditing.PropertyValue.StringValue" /> to a <see cref="P:System.Activities.Presentation.PropertyEditing.PropertyValue.Value" />.</summary>
      <returns>An <see cref="T:System.Object" /> value.</returns>
      <param name="value">The <see cref="T:System.String" /> value to convert to a <see cref="P:System.Activities.Presentation.PropertyEditing.PropertyValue.Value" />.</param>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyValue.ConvertValueToString(System.Object)">
      <summary>When implemented in a derived class, converts the specified <see cref="P:System.Activities.Presentation.PropertyEditing.PropertyValue.Value" /> to a <see cref="P:System.Activities.Presentation.PropertyEditing.PropertyValue.StringValue" />.</summary>
      <returns>A <see cref="T:System.String" /> version of the <see cref="P:System.Activities.Presentation.PropertyEditing.PropertyValue.Value" />.</returns>
      <param name="value">The <see cref="P:System.Activities.Presentation.PropertyEditing.PropertyValue.Value" /> to convert to a string.</param>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyValue.GetValueCore">
      <summary>When implemented in a derived class, returns a <see cref="P:System.Activities.Presentation.PropertyEditing.PropertyValue.Value" />.</summary>
      <returns>A property value <see cref="T:System.Object" />.</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyValue.HasSubProperties">
      <summary>When implemented in a derived class, gets a value that indicates whether the type of this property supports sub-properties.</summary>
      <returns>A <see cref="T:System.Boolean" /> that, when <see cref="T:System.Boolean.True" />, verifies that the type supports sub-properties, otherwise <see cref="T:System.Boolean.False" />.</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyValue.IsCollection">
      <summary>When implemented in a derived class, gets a value that indicates whether this <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> is a collection.</summary>
      <returns>A <see cref="T:System.Boolean" /> that, when <see cref="T:System.Boolean.True" />, verifies that the property value is a collection, otherwise <see cref="T:System.Boolean.False" />.</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyValue.IsDefaultValue">
      <summary>When implemented in a derived class, gets a value that indicates whether the <see cref="P:System.Activities.Presentation.PropertyEditing.PropertyValue.Value" /> is the default value for the property.</summary>
      <returns>A <see cref="T:System.Boolean" /> that, when <see cref="T:System.Boolean.True" />, verifies that the value is the default, otherwise <see cref="T:System.Boolean.False" />.</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyValue.IsMixedValue">
      <summary>When implemented in a derived class, gets a value that indicates whether multiple objects contain this property and have different values.</summary>
      <returns>A <see cref="T:System.Boolean" /> that, when <see cref="T:System.Boolean.True" />, verifies that multiple objects contain this property, otherwise <see cref="T:System.Boolean.False" />.</returns>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyValue.NotifyRootValueChanged">
      <summary>Raises the <see cref="E:System.Activities.Presentation.PropertyEditing.PropertyValue.RootValueChanged" /> event when the underlying value type is changed externally, as on the design surface.  </summary>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyValue.NotifySubPropertyChanged">
      <summary>Raises the <see cref="E:System.Activities.Presentation.PropertyEditing.PropertyValue.SubPropertyChanged" /> event when one of the sub-properties of this property has changed.</summary>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyValue.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>Raises the <see cref="E:System.Activities.Presentation.PropertyEditing.PropertyValue.PropertyChanged" /> event with the specified <see cref="T:System.ComponentModel.PropertyChangedEventArgs" /> objects.</summary>
      <param name="e">A <see cref="T:System.ComponentModel.PropertyChangedEventArgs" /> object that provides the name of the property that changed.</param>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyValue.OnPropertyChanged(System.String)">
      <summary>Raises the <see cref="E:System.Activities.Presentation.PropertyEditing.PropertyValue.PropertyChanged" /> event that uses the name of the property that changed.</summary>
      <param name="propertyName">The name of the property that changed.</param>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyValue.OnPropertyValueException(System.Activities.Presentation.PropertyEditing.PropertyValueExceptionEventArgs)">
      <summary>Default implementation that raises the <see cref="E:System.Activities.Presentation.PropertyEditing.PropertyValue.PropertyValueException" /> event when <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> properties experience failure getting or setting values in the underlying collection of data.</summary>
      <param name="e">A <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValueExceptionEventArgs" /> that provides information about the get or set failure that occurred.</param>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyValue.ParentProperty">
      <summary>Gets the parent <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyEntry" /> when the property implementation occurs in a host environment.</summary>
      <returns>A <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyEntry" /> object that represents the parent property.</returns>
    </member>
    <member name="E:System.Activities.Presentation.PropertyEditing.PropertyValue.PropertyChanged">
      <summary>Occurs when properties or sub-properties of the <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> object has changed.</summary>
    </member>
    <member name="E:System.Activities.Presentation.PropertyEditing.PropertyValue.PropertyValueException">
      <summary>Event used by host implementations for error handling.</summary>
    </member>
    <member name="E:System.Activities.Presentation.PropertyEditing.PropertyValue.RootValueChanged">
      <summary>Occurs when the <see cref="P:System.Activities.Presentation.PropertyEditing.PropertyValue.Value" /> or <see cref="P:System.Activities.Presentation.PropertyEditing.PropertyValue.StringValue" /> property is updated as a result of the <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> value being changed.</summary>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyValue.SetValueCore(System.Object)">
      <summary>When implemented in a derived class, sets the <see cref="P:System.Activities.Presentation.PropertyEditing.PropertyValue.Value" />.</summary>
      <param name="value">The object to be set in the underlying collection of data.</param>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyValue.Source">
      <summary>When implemented in a derived class, gets a <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValueSource" /> object that contains information about where this property value is coming from.</summary>
      <returns>A <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValueSource" /> object that contains property value source information.</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyValue.StringValue">
      <summary>Gets or sets a <see cref="P:System.Activities.Presentation.PropertyEditing.PropertyValue.Value" /> as a <see cref="T:System.String" />.</summary>
      <returns>A <see cref="T:System.String" /> version of the <see cref="P:System.Activities.Presentation.PropertyEditing.PropertyValue.Value" />.</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyValue.SubProperties">
      <summary>When implemented in a derived class, gets a collection of sub-properties as <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyEntry" /> instances.</summary>
      <returns>A <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyEntryCollection" /> of instances.</returns>
    </member>
    <member name="E:System.Activities.Presentation.PropertyEditing.PropertyValue.SubPropertyChanged">
      <summary>Occurs when sub-properties are updated as a result of the <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> being changed.</summary>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyValue.ValidateValue(System.Object)">
      <summary>When implemented in a derived class, throws an exception if verification of the specified value object shows it to be invalid.</summary>
      <param name="valueToValidate">The object whose value is verified.</param>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyValue.Value">
      <summary>Gets or sets a property value in the underlying collection of property data. </summary>
      <returns>A property value <see cref="T:System.Object" />.</returns>
    </member>
    <member name="T:System.Activities.Presentation.PropertyEditing.PropertyValueCollection">
      <summary>Encapsulates a collection of <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> instances and is used for properties whose <see cref="T:System.Type" /> is a collection. </summary>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyValueCollection.#ctor(System.Activities.Presentation.PropertyEditing.PropertyValue)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValueCollection" /> class as a sub-property to the specified parent <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" />.</summary>
      <param name="parentValue">The parent <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" />.</param>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyValueCollection.Add(System.Object)">
      <summary>Adds an object into the collection of <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> objects.</summary>
      <returns>The <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> for the added object.</returns>
      <param name="value">The object to add to the collection.</param>
    </member>
    <member name="E:System.Activities.Presentation.PropertyEditing.PropertyValueCollection.CollectionChanged">
      <summary>Notifies listeners of dynamic changes to the collection, such as when items get added and removed or the whole list is refreshed.</summary>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyValueCollection.Count">
      <summary>Gets the number of items in a collection of <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> objects.</summary>
      <returns>An <see cref="T:System.Int32" /> number of items.</returns>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyValueCollection.GetEnumerator">
      <summary>Returns a strongly typed <see cref="T:Systems.Collections.IEnumerator" /> that iterates through the collection of <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> objects.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyValueCollection.Insert(System.Object,System.Int32)">
      <summary>Inserts a specified object at the specified index in a collection of <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> objects.</summary>
      <returns>A <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> for the added object.</returns>
      <param name="value">The object to add to the collection.</param>
      <param name="index">The index number that specifies where to insert the object into the collection.</param>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyValueCollection.Item(System.Int32)">
      <summary>Returns a <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> from a collection at the given index.</summary>
      <returns>The <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> at that index.</returns>
      <param name="index">The index of the item to be returned.</param>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyValueCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>Raises the <see cref="E:System.Activities.Presentation.PropertyEditing.PropertyValueCollection.CollectionChanged" /> event when items in the collection are added, removed, or resorted.</summary>
      <param name="e">Event arguments that contain information about the change in the collection.</param>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyValueCollection.ParentValue">
      <summary>Gets the parent <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> object that contains the collection.</summary>
      <returns>The <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> of the parent.</returns>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyValueCollection.Remove(System.Activities.Presentation.PropertyEditing.PropertyValue)">
      <summary>Removes the object from the collection of <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> objects.</summary>
      <returns>true if removal is successful; otherwise, false.</returns>
      <param name="propertyValue">The item to remove from the collection.</param>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyValueCollection.RemoveAt(System.Int32)">
      <summary>Removes the object from the collection of <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> objects at the specified index.</summary>
      <param name="index">The index of the item to remove.</param>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyValueCollection.SetIndex(System.Int32,System.Int32)">
      <summary>Recalculates the indexes in a collection of <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> objects after an existing item is moved to a new position in the collection.</summary>
      <param name="currentIndex">The current position index of the object in the collection.</param>
      <param name="newIndex">The index position to which the item is moved.</param>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyValueCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns a strongly typed <see cref="T:Systems.Collections.IEnumerator" /> for a collection of <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> objects.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="T:System.Activities.Presentation.PropertyEditing.PropertyValueEditor">
      <summary>Establishes an inline editor for the updating of property values.</summary>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyValueEditor.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValueEditor" /> class.</summary>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyValueEditor.#ctor(System.Windows.DataTemplate)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValueEditor" /> class as the specified <see cref="P:System.Activities.Presentation.PropertyEditing.PropertyContainer.InlineEditorTemplate" />.</summary>
      <param name="inlineEditorTemplate">The inline editor <see cref="T:System.Windows.DataTemplate" /> used to create the new property value editor.</param>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyValueEditor.CreateEditorAttribute(System.Activities.Presentation.PropertyEditing.PropertyValueEditor)">
      <summary>Creates a new <see cref="T:System.ComponentModel.EditorAttribute" /> to designate that a particular  <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValueEditor" /> be used to change a property value.</summary>
      <returns>A new <see cref="T:System.ComponentModel.EditorAttribute" /> for the designated <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValueEditor" />.</returns>
      <param name="editor">The <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValueEditor" /> for which to create the new <see cref="T:System.ComponentModel.EditorAttribute" />.</param>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyValueEditor.CreateEditorAttribute(System.Type)">
      <summary>Creates a new <see cref="T:System.ComponentModel.EditorAttribute" /> to designate that a particular  <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValueEditor" /> type be used to change a property value.</summary>
      <returns>A new <see cref="T:System.ComponentModel.EditorAttribute" /> for the designated <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValueEditor" /> type.</returns>
      <param name="propertyValueEditorType">The <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValueEditor" /> type for which to create the new <see cref="T:System.ComponentModel.EditorAttribute" />.</param>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyValueEditor.InlineEditorTemplate">
      <summary>Gets or sets the <see cref="P:System.Activities.Presentation.PropertyEditing.PropertyValueEditor.InlineEditorTemplate" />, the <see cref="T:System.Windows.DataTemplate" /> that is used for an inline editor.</summary>
      <returns>A <see cref="T:System.Windows.DataTemplate" /> that represents an inline editor.</returns>
    </member>
    <member name="T:System.Activities.Presentation.PropertyEditing.PropertyValueEditorCommands">
      <summary>Enables the use of standard commands to control the editing of property values.</summary>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyValueEditorCommands.AbortTransaction">
      <summary>Gets the command that the editor raises to abort an attempt to update a property value. </summary>
      <returns>The <see cref="T:System.Windows.Input.RoutedCommand" /> that aborts a transaction.</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyValueEditorCommands.BeginTransaction">
      <summary>Gets the command that the editor raises to begin an attempt to update a property value.</summary>
      <returns>The <see cref="T:System.Windows.Input.RoutedCommand" /> that begins a transaction.</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyValueEditorCommands.CommitTransaction">
      <summary>Gets the command that the editor raises to commit an update of a property value. </summary>
      <returns>The <see cref="T:System.Windows.Input.RoutedCommand" /> that commits a transaction.</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyValueEditorCommands.FinishEditing">
      <summary>Gets the command that the editor raises to indicate to the host that the updating of a property value is complete.</summary>
      <returns>A <see cref="T:System.Windows.Input.RoutedCommand" /> that indicates that the updating of a value is complete.</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyValueEditorCommands.ShowDialogEditor">
      <summary>Gets the command that the editor raises to switch the <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyContainer" /> to <see cref="F:System.Activities.Presentation.PropertyEditing.PropertyContainerEditMode.Dialog" /> editing mode.</summary>
      <returns>A <see cref="T:System.Windows.Input.RoutedCommand" /> that switches the edit mode.</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyValueEditorCommands.ShowExtendedPinnedEditor">
      <summary>Gets the command that the editor raises to switch the  <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyContainer" /> to <see cref="F:System.Activities.Presentation.PropertyEditing.PropertyContainerEditMode.ExtendedPinned" /> editing mode.</summary>
      <returns>A <see cref="T:System.Windows.Input.RoutedCommand" /> that switches the edit mode.</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyValueEditorCommands.ShowExtendedPopupEditor">
      <summary>Gets the command that the editor raises to switch the  <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyContainer" /> to <see cref="F:System.Activities.Presentation.PropertyEditing.PropertyContainerEditMode.ExtendedPopup" /> editing mode.</summary>
      <returns>A <see cref="T:System.Windows.Input.RoutedCommand" /> that switches the edit mode.</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyValueEditorCommands.ShowInlineEditor">
      <summary>Gets the command that the editor raises to switch the <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyContainer" /> to <see cref="F:System.Activities.Presentation.PropertyEditing.PropertyContainerEditMode.Inline" /> editing mode.</summary>
      <returns>A <see cref="T:System.Windows.Input.RoutedCommand" /> that switches the edit mode.</returns>
    </member>
    <member name="T:System.Activities.Presentation.PropertyEditing.PropertyValueExceptionEventArgs">
      <summary>Represents an object that contains event arguments for the occurrence of a <see cref="E:System.Activities.Presentation.PropertyEditing.PropertyValue.PropertyValueException" />. </summary>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyValueExceptionEventArgs.#ctor(System.String,System.Activities.Presentation.PropertyEditing.PropertyValue,System.Activities.Presentation.PropertyEditing.PropertyValueExceptionSource,System.Exception)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValueExceptionEventArgs" /> class that contains information about an error that has occurred during the updating of a property value.</summary>
      <param name="message">A message that indicates what failed during the property value change.</param>
      <param name="value">The <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> instance in which the exception is occurring.</param>
      <param name="source">The source that generated this exception—a <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> get or set operation.</param>
      <param name="exception">The error that occurred during the property value change.</param>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyValueExceptionEventArgs.Exception">
      <summary>Gets the error that occurred during the property value change associated with this instance of event arguments.</summary>
      <returns>An <see cref="T:System.Exception" /> object.</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyValueExceptionEventArgs.Message">
      <summary>Gets the message that indicates what failed during the property value change associated with this instance of event arguments.</summary>
      <returns>A <see cref="T:System.String" /> description of the error.</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyValueExceptionEventArgs.PropertyValue">
      <summary>Gets the <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> associated with this instance of event arguments.</summary>
      <returns>A <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" />  associated with this instance of event arguments.</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyValueExceptionEventArgs.Source">
      <summary>Gets the <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValueExceptionSource" /> associated with this instance of event arguments.</summary>
      <returns>A <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValueExceptionSource" /> associated with this instance of event arguments.</returns>
    </member>
    <member name="T:System.Activities.Presentation.PropertyEditing.PropertyValueExceptionSource">
      <summary>Indicates the source of the exception thrown by a <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> operation.</summary>
    </member>
    <member name="F:System.Activities.Presentation.PropertyEditing.PropertyValueExceptionSource.Get">
      <summary>Indicates that the exception occurred during a get operation.</summary>
    </member>
    <member name="F:System.Activities.Presentation.PropertyEditing.PropertyValueExceptionSource.Set">
      <summary>Indicates that the exception occurred during a set operation.</summary>
    </member>
    <member name="T:System.Activities.Presentation.PropertyEditing.PropertyValueSource">
      <summary>Represents the origin of a property value.</summary>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyValueSource.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValueSource" /> class.</summary>
    </member>
    <member name="T:System.Activities.Presentation.Services.ModelChangedEventArgs">
      <summary>An abstract base class that represents the event data that holds a description of the changes in the model item tree in the previous editing session.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Services.ModelChangedEventArgs.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Presentation.Services.ModelChangedEventArgs" /> class.</summary>
    </member>
    <member name="P:System.Activities.Presentation.Services.ModelChangedEventArgs.ItemsAdded">
      <summary>When implemented by a derived class, gets an enumeration of event argument objects that have been added.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of added event arguments.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Services.ModelChangedEventArgs.ItemsRemoved">
      <summary>When implemented by a derived class, gets an enumeration of event argument objects that have been removed.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of removed event arguments.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Services.ModelChangedEventArgs.ModelChangeInfo">
      <summary>When implemented by a derived class, gets the detailed information about the changes made in a model.</summary>
      <returns>A <see cref="T:System.Activities.Presentation.Services.ModelChangeInfo" /> object that contains detailed information about the changes made in a model.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Services.ModelChangedEventArgs.PropertiesChanged">
      <summary>When implemented by a derived class, gets an enumeration of properties that have been changed.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of changed properties.</returns>
    </member>
    <member name="T:System.Activities.Presentation.Services.ModelChangeInfo">
      <summary>Contains data for detailed model change information.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Services.ModelChangeInfo.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Presentation.Services.ModelChangeInfo" /> class.</summary>
    </member>
    <member name="P:System.Activities.Presentation.Services.ModelChangeInfo.Key">
      <summary>Gets the key model item if it's a dictionary change.</summary>
      <returns>The key model item if it’s a dictionary change.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Services.ModelChangeInfo.ModelChangeType">
      <summary>Gets the model change type.</summary>
      <returns>The model change type.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Services.ModelChangeInfo.OldValue">
      <summary>Gets the old value if it's a property change or a dictionary value change.</summary>
      <returns>The old value if it’s a property change or a dictionary value change.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Services.ModelChangeInfo.PropertyName">
      <summary>Gets the property name if it's a property change.</summary>
      <returns>The property name if it’s a property change.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Services.ModelChangeInfo.Subject">
      <summary>Gets the model item where a model change happens.</summary>
      <returns>The model item where a model change happens.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Services.ModelChangeInfo.Value">
      <summary>Gets the object that is been added/removed or the new value if it's a property change.</summary>
      <returns>The object that is been added/removed or the new value if it’s a property change.</returns>
    </member>
    <member name="T:System.Activities.Presentation.Services.ModelChangeType">
      <summary>Specifies the model change type.</summary>
    </member>
    <member name="F:System.Activities.Presentation.Services.ModelChangeType.CollectionItemAdded">
      <summary>A collection item is added.</summary>
    </member>
    <member name="F:System.Activities.Presentation.Services.ModelChangeType.CollectionItemRemoved">
      <summary>A collection item is removed.</summary>
    </member>
    <member name="F:System.Activities.Presentation.Services.ModelChangeType.DictionaryKeyValueAdded">
      <summary>A dictionary key value is added.</summary>
    </member>
    <member name="F:System.Activities.Presentation.Services.ModelChangeType.DictionaryKeyValueRemoved">
      <summary>A dictionary key value is removed.</summary>
    </member>
    <member name="F:System.Activities.Presentation.Services.ModelChangeType.DictionaryValueChanged">
      <summary>A dictionary value is changed.</summary>
    </member>
    <member name="F:System.Activities.Presentation.Services.ModelChangeType.None">
      <summary>None operation.</summary>
    </member>
    <member name="F:System.Activities.Presentation.Services.ModelChangeType.PropertyChanged">
      <summary>A property is changed.</summary>
    </member>
    <member name="T:System.Activities.Presentation.Services.ModelSearchService">
      <summary>Represents a class that is responsible for generating a TextImage and navigating to the corresponding ModelItem in the workflow designer.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Services.ModelSearchService.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Presentation.Services.ModelSearchService" /> class.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Services.ModelSearchService.GenerateTextImage">
      <summary>Generates a searchable text image based on the model item tree.</summary>
      <returns>A searchable text image based on the model item tree.</returns>
    </member>
    <member name="M:System.Activities.Presentation.Services.ModelSearchService.NavigateTo(System.Int32)">
      <summary>Indicates whether the navigating to a model Item based on the line number in the text image succeeds.</summary>
      <returns>true if the navigating succeeds; otherwise, false.</returns>
      <param name="location">The line number in text image.</param>
    </member>
    <member name="M:System.Activities.Presentation.Services.ModelSearchService.NavigateTo(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Indicates whether the navigating to a model Item based on the source location in the XAML file.</summary>
      <returns>true if the navigating succeeds; otherwise, false.</returns>
      <param name="startLine">The starting line.</param>
      <param name="startColumn">The starting column.</param>
      <param name="endLine">The end line.</param>
      <param name="endColumn">The end column.</param>
    </member>
    <member name="T:System.Activities.Presentation.Services.ModelService">
      <summary>This class is the main entry point that the designer uses to interact with the model.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Services.ModelService.#ctor">
      <summary>Creates a new <see cref="T:System.Activities.Presentation.Services.ModelService" />.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Services.ModelService.CreateItem(System.Object)">
      <summary>Takes an existing instance and creates a model item that is a deep clone of the instance.</summary>
      <returns>Returns a newly created <see cref="T:System.Activities.Presentation.Model.ModelItem" /> that is a clone of the existing item.</returns>
      <param name="item">The item to clone and wrap.</param>
    </member>
    <member name="M:System.Activities.Presentation.Services.ModelService.CreateItem(System.Type,System.Activities.Presentation.Model.CreateOptions,System.Object[])">
      <summary>Creates a <see cref="T:System.Activities.Presentation.Model.ModelItem" /> for a given type. This method is called by <see cref="T:System.Activities.Presentation.Model.ModelFactory" /> when the user wants to create a new item.</summary>
      <returns>Returns the newly created <see cref="T:System.Activities.Presentation.Model.ModelItem" />.</returns>
      <param name="itemType">The type of item to create.</param>
      <param name="options">Creation options. You can specify whether you would like to initialize default values for an item.</param>
      <param name="arguments">An array of arguments to the constructor of the item.</param>
    </member>
    <member name="M:System.Activities.Presentation.Services.ModelService.CreateStaticMemberItem(System.Type,System.String)">
      <summary>Creates a new model item that represents the value of a static member of the given class.</summary>
      <returns>Returns <see cref="T:System.Activities.Presentation.Model.ModelItem" />.</returns>
      <param name="type">The type that contains the static member being referenced.</param>
      <param name="memberName">The name of the static member being referenced.</param>
    </member>
    <member name="M:System.Activities.Presentation.Services.ModelService.Find(System.Activities.Presentation.Model.ModelItem,System.Predicate{System.Type})">
      <summary>Finds matching model items given a starting point from which to look.</summary>
      <returns>Returns an <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains all model items that match the query.</returns>
      <param name="startingItem">The <see cref="T:System.Activities.Presentation.Model.ModelItem" /> from which to start the search. Items above this item will be ignored. This item, and any item below it in the hierarchy, will be included in the search. If this value is null, <see cref="P:System.Activities.Presentation.Services.ModelService.Root" /> is used instead.</param>
      <param name="match">A predicate that allows more complex type matching to be used. This method will enumerate all items within the given parent scope that match the predicate.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Presentation.Services.ModelService.Find(System.Activities.Presentation.Model.ModelItem,System.Type)">
      <summary>Finds matching model items given a starting point from which to look.</summary>
      <returns>Returns an <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains all model items that match the query.</returns>
      <param name="startingItem">The <see cref="T:System.Activities.Presentation.Model.ModelItem" /> from which to start the search. Items above this item will be ignored. This item, and any item below it in the hierarchy, will be included in the search. If this value is null, <see cref="P:System.Activities.Presentation.Services.ModelService.Root" /> is used instead.</param>
      <param name="type">The <see cref="T:System.Type" /> of the object to find. This method will enumerate all items within the given parent scope that are of the requested type.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Presentation.Services.ModelService.FromName(System.Activities.Presentation.Model.ModelItem,System.String)">
      <summary>Locates the <see cref="T:System.Activities.Presentation.Model.ModelItem" /> in the given scope with the given name.</summary>
      <returns>Returns a <see cref="T:System.Activities.Presentation.Model.ModelItem" /> whose name matches <paramref name="name" />, or null if no match was found.</returns>
      <param name="scope">An optional scope to provide. If the scope is not provided, <see cref="P:System.Activities.Presentation.Services.ModelService.Root" /> will be used as a scope. If the scope is provided, the nearest <see cref="T:System.Windows.Markup.INameScope" /> in the hierarchy will be used to locate the item.</param>
      <param name="name">The name to locate.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Presentation.Services.ModelService.FromName(System.Activities.Presentation.Model.ModelItem,System.String,System.StringComparison)">
      <summary>Locates the <see cref="T:System.Activities.Presentation.Model.ModelItem" /> in the given scope with the given name.</summary>
      <returns>Returns a <see cref="T:System.Activities.Presentation.Model.ModelItem" /> whose name matches <paramref name="name" />, or null if no match was found.</returns>
      <param name="scope">An optional scope to provide. If the scope is not provided, <see cref="P:System.Activities.Presentation.Services.ModelService.Root" /> will be used as a scope. If the scope is provided, the nearest <see cref="T:System.Windows.Markup.INameScope" /> in the hierarchy will be used to locate the item.</param>
      <param name="name">The name to locate.</param>
      <param name="comparison">Determines how the name should be compared. The default is to compare against ordinal.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.</exception>
    </member>
    <member name="E:System.Activities.Presentation.Services.ModelService.ModelChanged">
      <summary>This event is raised when something in the model has changed.</summary>
    </member>
    <member name="P:System.Activities.Presentation.Services.ModelService.Root">
      <summary>The root of the object hierarchy.</summary>
      <returns>Returns the root of the model hierarchy as a <see cref="T:System.Activities.Presentation.Model.ModelItem" />.</returns>
    </member>
    <member name="T:System.Activities.Presentation.Services.ViewService">
      <summary>The <see cref="T:System.Activities.Presentation.Services.ViewService" /> class maps visuals to underlying model items. </summary>
    </member>
    <member name="M:System.Activities.Presentation.Services.ViewService.#ctor">
      <summary>Creates a new <see cref="T:System.Activities.Presentation.Services.ViewService" />.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Services.ViewService.GetModel(System.Windows.DependencyObject)">
      <summary>Returns the model corresponding to the view, or null if there is no model that matches the view.</summary>
      <returns>Returns the corresponding model as a <see cref="T:System.Activities.Design.Model.ModelItem" />, or null if there is no model for the given view object.</returns>
      <param name="view">The view object that you want to find the model for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="view" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Presentation.Services.ViewService.GetView(System.Activities.Presentation.Model.ModelItem)">
      <summary>Returns the view corresponding to the given model, or null if there is no view for the model.</summary>
      <returns>Returns the view for this model as a <see cref="T:System.Windows.DependencyObject" />, or null if there is no view.</returns>
      <param name="model">The model to return the view object for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="model" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="model" /> does not represent a valid model for this service.</exception>
    </member>
    <member name="T:System.Activities.Presentation.Sqm.IVSSqmService">
      <summary>Specifies information about the IVSSqmService.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Sqm.IVSSqmService.AddArrayToStream(System.Int32,System.UInt32[],System.Int32)">
      <summary>Adds an array to the stream.</summary>
      <param name="dataPointId">The data point identifier.</param>
      <param name="data">The data.</param>
      <param name="count">The number of elements in the array.</param>
    </member>
    <member name="M:System.Activities.Presentation.Sqm.IVSSqmService.AddItemToStream(System.Int32,System.UInt32)">
      <summary>Adds an item to the stream.</summary>
      <param name="dataPointId">The data point identifier.</param>
      <param name="value">The value of the item.</param>
    </member>
    <member name="M:System.Activities.Presentation.Sqm.IVSSqmService.SetDatapoint(System.Int32,System.UInt32)">
      <summary>Sets a data point item to the stream.</summary>
      <param name="dataPointId">The data point identifier.</param>
      <param name="value">The value of the data point.</param>
    </member>
    <member name="T:System.Activities.Presentation.Toolbox.ActivityTemplateFactory">
      <summary>Represents a class that is the XAML representation for an IActivityTemplateFactory.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ActivityTemplateFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Presentation.Toolbox.ActivityTemplateFactory" /> class.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ActivityTemplateFactory.Create(System.Windows.DependencyObject)">
      <summary>Creates an activity by calling Implementation.</summary>
      <returns>The activity created by the implementation method or null if implementation is not set.</returns>
      <param name="target">A reference to the user interface - not used.</param>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ActivityTemplateFactory.Implementation">
      <summary>Gets or sets the factory method that creates an activity as the implementation.</summary>
      <returns>The factory method that creates an activity as the implementation.</returns>
    </member>
    <member name="T:System.Activities.Presentation.Toolbox.ActivityTemplateFactory`1">
      <summary>Represents a class that is the XAML representation for an IActivityTemplateFactory.</summary>
      <typeparam name="T">The type this factory created.</typeparam>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ActivityTemplateFactory`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Presentation.Toolbox.ActivityTemplateFactory`1" /> class.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ActivityTemplateFactory`1.Create(System.Windows.DependencyObject,System.Windows.IDataObject)">
      <summary>Creates an activity by calling Implementation.</summary>
      <returns>The activity created by the implementation.</returns>
      <param name="target">A reference the target- not used.</param>
      <param name="dataObject">A reference to the data object - not used.</param>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ActivityTemplateFactory`1.Implementation">
      <summary>Gets or sets the factory method that creates an activity as the implementation.</summary>
      <returns>The factory method that creates an activity as the implementation.</returns>
    </member>
    <member name="T:System.Activities.Presentation.Toolbox.ActivityTemplateFactoryBuilder">
      <summary>Represents an activity template factory builder.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ActivityTemplateFactoryBuilder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Presentation.Toolbox.ActivityTemplateFactoryBuilder" /> class.</summary>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ActivityTemplateFactoryBuilder.Implementation">
      <summary>Gets or sets the implementation for the <see cref="T:System.Activities.Presentation.Toolbox.ActivityTemplateFactoryBuilder" />.</summary>
      <returns>The implementation for the <see cref="T:System.Activities.Presentation.Toolbox.ActivityTemplateFactoryBuilder" />.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ActivityTemplateFactoryBuilder.Name">
      <summary>Gets or sets the identifying name of an <see cref="T:System.Activities.Presentation.Toolbox.ActivityTemplateFactoryBuilder" />.</summary>
      <returns>The identifying name of an <see cref="T:System.Activities.Presentation.Toolbox.ActivityTemplateFactoryBuilder" />.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ActivityTemplateFactoryBuilder.TargetType">
      <summary> Gets or sets the type for which this <see cref="T:System.Activities.Presentation.Toolbox.ActivityTemplateFactoryBuilder" /> is intended.</summary>
      <returns>The type for which this <see cref="T:System.Activities.Presentation.Toolbox.ActivityTemplateFactoryBuilder" /> is intended.</returns>
    </member>
    <member name="T:System.Activities.Presentation.Toolbox.ToolboxCategory">
      <summary>A collection of toolbox items that have been categorized.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxCategory.#ctor">
      <summary>Creates an instance of the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> class.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxCategory.#ctor(System.String)">
      <summary>Creates an instance of the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> class with a specified name.</summary>
      <param name="name">The name of the toolbox category collection.</param>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxCategory.Add(System.Activities.Presentation.Toolbox.ToolboxItemWrapper)">
      <summary>Adds a specified tool to the end of the toolbox category collection.</summary>
      <param name="tool">The <see cref="T:System.Activities.Presentation.Toolbox.ToolboxItemWrapper" /> item to add to the collection.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tool" /> is null.</exception>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ToolboxCategory.CategoryName">
      <summary>Gets or sets the name of the toolbox category.</summary>
      <returns>The name of the toolbox category.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ToolboxCategory.Item(System.Int32)">
      <summary>Gets or sets the tool at the specified index.</summary>
      <returns>The <see cref="T:System.Activities.Presentation.Toolbox.ToolboxItemWrapper" /> object at the specified <paramref name="index" />..</returns>
      <param name="index">The zero-based index of the tool to get or set.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> is not valid for the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> collection.</exception>
    </member>
    <member name="E:System.Activities.Presentation.Toolbox.ToolboxCategory.PropertyChanged">
      <summary>Occurs when a property value changes.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxCategory.Remove(System.Activities.Presentation.Toolbox.ToolboxItemWrapper)">
      <summary>Removes the first occurrence of a specified tool from the toolbox category collection.</summary>
      <returns>true if the tool is successfully removed; otherwise, false. This method also returns false if the tool was not found in the collection.</returns>
      <param name="tool">The <see cref="T:System.Activities.Presentation.Toolbox.ToolboxItemWrapper" /> item to remove from the collection.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tool" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxCategory.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the entire <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> collection to a compatible one-dimensional <see cref="T:System.Array" />, starting at the specified index of the target <see cref="T:System.Array" />.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> collection. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="index">The index of the array at which the copying begins.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="array" /> is null.</exception>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ToolboxCategory.System#Collections#ICollection#Count">
      <summary>Gets the number of tools contained in the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" />.</summary>
      <returns>The number of elements contained in the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" />.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ToolboxCategory.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value that indicates whether access to the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> is synchronized (thread safe).</summary>
      <returns>true if access to the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> is synchronized (thread safe); otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ToolboxCategory.System#Collections#ICollection#SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" />.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" />.</returns>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxCategory.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator`1" /> for the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" />.</returns>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxCategory.System#Collections#IList#Add(System.Object)">
      <summary>Adds a tool to the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" />.</summary>
      <returns>The zero-based index of the tool added to the collection.</returns>
      <param name="value">The position into which the new element is inserted.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="value" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" /> implemented by the collection.</exception>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxCategory.System#Collections#IList#Clear">
      <summary>Removes all the tools from the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" />.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxCategory.System#Collections#IList#Contains(System.Object)">
      <summary>Determines whether the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> contains a specific tool.</summary>
      <returns>true if the <paramref name="value" /> is found in the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" />; otherwise, false.</returns>
      <param name="value">The tool <see cref="T:System.Object" /> to locate in the collection.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxCategory.System#Collections#IList#IndexOf(System.Object)">
      <summary>Determines the index of a specific tool in the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" />.</summary>
      <returns>The zero-based index of <paramref name="value" /> if found in the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" />; otherwise, -1.</returns>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxCategory.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Inserts a tool into the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> at the specified index.</summary>
      <param name="index">The zero-based index at which <paramref name="value" /> should be inserted.</param>
      <param name="value">The tool added to the collection.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> is not valid for the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> collection.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" />  is read-only, or it has a fixed size that has been exceeded.</exception>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ToolboxCategory.System#Collections#IList#IsFixedSize">
      <summary>Gets a value that indicates whether the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> has a fixed size.</summary>
      <returns>true if the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> has a fixed size; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ToolboxCategory.System#Collections#IList#IsReadOnly">
      <summary>Gets a value that indicates whether the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" />  is read-only.</summary>
      <returns>true if the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ToolboxCategory.System#Collections#IList#Item(System.Int32)">
      <summary>Gets or sets the tool at the specified index.</summary>
      <returns>The tool<see cref="T:System.Object" /> at the specified index.</returns>
      <param name="index">The zero-based index of the tool item to get or set.</param>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxCategory.System#Collections#IList#Remove(System.Object)">
      <summary>Removes the first occurrence of a specific tool from the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" />.</summary>
      <param name="value">The tool <see cref="T:System.Object" /> to remove from the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" />.</param>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxCategory.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Removes the tool at the specified index of the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> collection.</summary>
      <param name="index">The zero-based index of the tool item to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> is not valid for the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> collection.</exception>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ToolboxCategory.Tools">
      <summary>Gets the tools in the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" />.</summary>
      <returns>An<see cref="T:System.Collections.Generic.ICollection`1" /> that contains the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" />.</returns>
    </member>
    <member name="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems">
      <summary>A collection of <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> objects. This class is sealed and so cannot be inherited.This class provides support for the categorization of toolbox items when re-hosting the Windows Workflow Designer outside of Visual Studio 2010.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxCategoryItems.#ctor">
      <summary>Creates an instance of the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" /> class.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxCategoryItems.Add(System.Activities.Presentation.Toolbox.ToolboxCategory)">
      <summary>Adds a specified toolbox category to the end of the toolbox category items collection.</summary>
      <param name="item">The <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> to add to the collection.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="item" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxCategoryItems.Clear">
      <summary>Removes all the items from the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" /> collection.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxCategoryItems.Contains(System.Activities.Presentation.Toolbox.ToolboxCategory)">
      <summary>Determines whether the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" /> collection contains a specific toolbox category item.</summary>
      <returns>true if the <paramref name="item" /> is found in the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" />; otherwise, false.</returns>
      <param name="item">The toolbox category item to look for.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="item" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxCategoryItems.CopyTo(System.Activities.Presentation.Toolbox.ToolboxCategory[],System.Int32)">
      <summary>Copies the entire <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" /> collection to a compatible one-dimensional <see cref="T:System.Array" />, starting at the specified index of the target <see cref="T:System.Array" />.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" /> collection. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index of the target array.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="array" /> is null.</exception>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ToolboxCategoryItems.Count">
      <summary>Gets the number of tools contained in the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" />.</summary>
      <returns>The number of elements contained in the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" />.</returns>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxCategoryItems.GetEnumerator">
      <summary>Returns an enumerator that iterates through the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItem" /> collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator`1" /> for the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" />.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ToolboxCategoryItems.IsReadOnly">
      <summary>Gets a value that indicates whether the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" />  is read-only.</summary>
      <returns>true if the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" /> is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ToolboxCategoryItems.Item(System.Int32)">
      <summary>Gets the toolbox category at the specified index.</summary>
      <returns>The toolbox category <see cref="T:System.Object" /> at the specified index.</returns>
      <param name="index">The zero-based index of the toolbox category item to get.</param>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxCategoryItems.Remove(System.Activities.Presentation.Toolbox.ToolboxCategory)">
      <summary>Removes the first occurrence of a specific toolbox category from the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" />.</summary>
      <returns>true if the item is found and removed from the collection; otherwise, false. This method returns false if the <paramref name="item" /> specified is not found.</returns>
      <param name="item">The <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> to remove.</param>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxCategoryItems.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the entire <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" /> collection to a compatible one-dimensional <see cref="T:System.Array" />, starting at the specified index of the target <see cref="T:System.Array" />.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" /> collection. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="index">The zero-based index of the target array.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="array" /> is null.</exception>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ToolboxCategoryItems.System#Collections#ICollection#Count">
      <summary>Gets the number of toolbox categories contained in the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" /> collection.</summary>
      <returns>The number of items contained in the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" /> collection.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ToolboxCategoryItems.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value that indicates whether access to the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" /> is synchronized (thread safe).</summary>
      <returns>true if access to the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" /> is synchronized (thread safe); otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ToolboxCategoryItems.System#Collections#ICollection#SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" />.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" />.</returns>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxCategoryItems.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItem" /> collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator`1" /> for the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" />.</returns>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxCategoryItems.System#Collections#IList#Add(System.Object)">
      <summary>Adds a tool to the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" />.</summary>
      <returns>The zero-based index of the tool added to the collection.</returns>
      <param name="value">The position into which the new element is inserted.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="value" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" /> implemented by the collection.</exception>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxCategoryItems.System#Collections#IList#Clear">
      <summary>Removes all the tools from the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" />.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxCategoryItems.System#Collections#IList#Contains(System.Object)">
      <summary>Determines whether the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" /> contains a specific tool.</summary>
      <returns>true if the <paramref name="value" /> is found in the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" />; otherwise, false.</returns>
      <param name="value">The tool <see cref="T:System.Object" /> to locate in the collection.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxCategoryItems.System#Collections#IList#IndexOf(System.Object)">
      <summary>Determines the index of a specific tool in the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" />.</summary>
      <returns>The index of <paramref name="value" /> if found in the list; otherwise, -1.</returns>
      <param name="value">The object to locate in the <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxCategoryItems.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Inserts a toolbox category into the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" /> collection at the specified index.</summary>
      <param name="index">The zero-based index at which <paramref name="value" /> should be inserted.</param>
      <param name="value">The <see cref="T:System.Object" /> inserted into the collection.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> is not valid for the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" /> collection.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">The collection is read-only or has a fixed size that has been exceeded.</exception>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ToolboxCategoryItems.System#Collections#IList#IsFixedSize">
      <summary>Gets a value that indicates whether the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" /> has a fixed size.</summary>
      <returns>true if the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" /> has a fixed size; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ToolboxCategoryItems.System#Collections#IList#IsReadOnly">
      <summary>Gets a value that indicates whether the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" /> is read-only.</summary>
      <returns>true if the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" /> is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ToolboxCategoryItems.System#Collections#IList#Item(System.Int32)">
      <summary>Gets or sets the toolbox category at a specified index of the collection.</summary>
      <returns>The toolbox category<see cref="T:System.Object" /> at the specified index.</returns>
      <param name="index">The zero-based index of the toolbox category item to get or set.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> set is null.</exception>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxCategoryItems.System#Collections#IList#Remove(System.Object)">
      <summary>Removes the first occurrence of a specific toolbox category from the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" />.</summary>
      <param name="value">The tool <see cref="T:System.Object" /> to remove from the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" /> collection.</param>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxCategoryItems.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Removes a toolbox category at the specified index of the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" /> collection.</summary>
      <param name="index">The zero-based index of the toolbox category item to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> is not valid for the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" /> collection.</exception>
    </member>
    <member name="T:System.Activities.Presentation.Toolbox.ToolboxControl">
      <summary>Provides functions to render a collection of categorized tools, as well as notify users about tool selection and creation events. This class is sealed, so it cannot be inherited.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxControl.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxControl" /> class.</summary>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ToolboxControl.AssociatedDesigner">
      <summary>Gets or sets the Windows Workflow Designer with which this toolbox control is associated.</summary>
      <returns>The <see cref="T:System.Activities.Presentation.Toolbox.WorkflowDesigner" /> instance with which this toolbox control is associated.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ToolboxControl.Categories">
      <summary>Gets or sets the collection of toolbox categories associated with this control.</summary>
      <returns>The <see cref="T:System.Activities.Design.Toolbox.ToolboxCategoryItems" /> that contains the collection of <see cref="T:System.Activities.Design.Toolbox.ToolboxCategory" /> objects associated with this <see cref="T:System.Activities.Presentation.Toolbox.ToolboxControl" />.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ToolboxControl.CategoryItemStyle">
      <summary>Gets or sets the style used for each category item.</summary>
      <returns>The <see cref="T:System.Windows.Style" /> object that contains the style applied to each of the categories.</returns>
    </member>
    <member name="F:System.Activities.Presentation.Toolbox.ToolboxControl.CategoryItemStyleProperty">
      <summary>Identifies the <see cref="P:System.Activities.Presentation.Toolbox.ToolboxControl.CategoryItemStyle" /> dependency property. This field is read-only.</summary>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ToolboxControl.CategoryTemplate">
      <summary>Gets or sets the data template used for the category.</summary>
      <returns>The <see cref="T:System.Windows.DataTemplate" /> for the category.</returns>
    </member>
    <member name="F:System.Activities.Presentation.Toolbox.ToolboxControl.CategoryTemplateProperty">
      <summary>Identifies the <see cref="P:System.Activities.Presentation.Toolbox.ToolboxControl.CategoryTemplate" /> dependency property. This field is read-only.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxControl.OnApplyTemplate">
      <summary>Builds the visual tree for this toolbox control.</summary>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ToolboxControl.SelectedTool">
      <summary>Gets or sets the tool being selected in the toolbox.</summary>
      <returns>The <see cref="T:System.Drawing.Design.ToolboxItem" /> object selected.</returns>
    </member>
    <member name="F:System.Activities.Presentation.Toolbox.ToolboxControl.SelectedToolProperty">
      <summary>Identifies the <see cref="P:System.Activities.Presentation.Toolbox.ToolboxControl.SelectedTool" /> dependency property. This field is read-only.</summary>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ToolboxControl.ToolboxFile">
      <summary>Gets or sets the name of the toolbox file.</summary>
      <returns>The name of the toolbox file.</returns>
    </member>
    <member name="F:System.Activities.Presentation.Toolbox.ToolboxControl.ToolboxFileProperty">
      <summary>Identifies the <see cref="P:System.Activities.Presentation.Toolbox.ToolboxControl.ToolboxFile" /> dependency property. This field is read-only.</summary>
    </member>
    <member name="E:System.Activities.Presentation.Toolbox.ToolboxControl.ToolCreated">
      <summary>Occurs when a tool is created in the toolbox control.</summary>
    </member>
    <member name="F:System.Activities.Presentation.Toolbox.ToolboxControl.ToolCreatedEvent">
      <summary>Identifies the <see cref="E:System.Activities.Presentation.Toolbox.ToolboxControl.ToolCreated" /> event. This field is read-only.</summary>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ToolboxControl.ToolItemStyle">
      <summary>Gets or sets the style used for the tool items.</summary>
      <returns>The <see cref="T:System.Windows.Style" /> for the tool items.</returns>
    </member>
    <member name="F:System.Activities.Presentation.Toolbox.ToolboxControl.ToolItemStyleProperty">
      <summary>Identifies the <see cref="P:System.Activities.Presentation.Toolbox.ToolboxControl.ToolItemStyle" /> dependency property. This field is read-only.</summary>
    </member>
    <member name="E:System.Activities.Presentation.Toolbox.ToolboxControl.ToolSelected">
      <summary>Occurs when a tool is selected in the toolbox control.</summary>
    </member>
    <member name="F:System.Activities.Presentation.Toolbox.ToolboxControl.ToolSelectedEvent">
      <summary>Identifies the <see cref="E:System.Activities.Presentation.Toolbox.ToolboxControl.ToolSelected" /> event. This field is read-only.</summary>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ToolboxControl.ToolTemplate">
      <summary>Gets or sets the data template used for the tools.</summary>
      <returns>The <see cref="T:System.Windows.DataTemplate" /> used for the tools.</returns>
    </member>
    <member name="F:System.Activities.Presentation.Toolbox.ToolboxControl.ToolTemplateProperty">
      <summary>Identifies the <see cref="P:System.Activities.Presentation.Toolbox.ToolboxControl.ToolTemplate" /> dependency property. This field is read-only.</summary>
    </member>
    <member name="T:System.Activities.Presentation.Toolbox.ToolboxItemWrapper">
      <summary>Represents a wrapper used to establish link between an actual <see cref="T:System.Drawing.Presentation.ToolboxItem" /> instance and the tool representation, as well as add support for categorization of toolbox items. This class is sealed, so it cannot be inherited.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxItemWrapper.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxItemWrapper" /> class.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxItemWrapper.#ctor(System.String,System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxItemWrapper" /> class with specified names for the tool, assembly, bitmap, and display.</summary>
      <param name="toolName">The name of the tool.</param>
      <param name="assemblyName">The name of the assembly.</param>
      <param name="bitmapName">The name of the bitmap.</param>
      <param name="displayName">The name of the display.</param>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxItemWrapper.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxItemWrapper" /> class with the type of the tool.</summary>
      <param name="toolType">The type of the tool.</param>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxItemWrapper.#ctor(System.Type,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxItemWrapper" /> class with the type of the tool and a specified display name.</summary>
      <param name="toolType">The type of the tool.</param>
      <param name="displayName">The name of the display.</param>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxItemWrapper.#ctor(System.Type,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxItemWrapper" /> class with the type of the tool and specified names for the bitmap and display.</summary>
      <param name="toolType">The type of the tool.</param>
      <param name="bitmapName">A string that contains the name of the bitmap.</param>
      <param name="displayName">A string that contains the name of the display.</param>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ToolboxItemWrapper.AssemblyName">
      <summary>Gets or sets the assembly name for the toolbox item.</summary>
      <returns>The assembly name.</returns>
      <exception cref="T:System.InvalidOperationException">The assembly name has already been specified and cannot be changed after the corresponding <see cref="T:System.Drawing.Desigen.ToolboxItem" /> has been initialized.</exception>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ToolboxItemWrapper.Bitmap">
      <summary>Gets the bitmap associated with the <see cref="T:System.Drawing.Design.ToolboxItem" /> wrapped by the current object.</summary>
      <returns>Returns a <see cref="T:System.Drawing.Bitmap" /> that is associated with the <see cref="T:System.Drawing.Design.ToolboxItem" />.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ToolboxItemWrapper.BitmapName">
      <summary>Gets or sets the bitmap name.</summary>
      <returns>The bitmap name.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ToolboxItemWrapper.DisplayName">
      <summary>Gets or sets the display name.</summary>
      <returns>The display name.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ToolboxItemWrapper.IsValid">
      <summary>Gets a value that indicates whether this <see cref="T:System.Drawing.Design.ToolboxItem" /> is valid.</summary>
      <returns>true if the <see cref="T:System.Drawing.Design.ToolboxItem" /> is valid; otherwise, false. </returns>
    </member>
    <member name="E:System.Activities.Presentation.Toolbox.ToolboxItemWrapper.PropertyChanged">
      <summary>An event that occurs when a property is changed.</summary>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ToolboxItemWrapper.ToolName">
      <summary>Gets or sets the name of the tool.</summary>
      <returns>The tool name.</returns>
      <exception cref="T:System.OperationException">The name of the tool cannot be changed after the corresponding <see cref="T:System.Drawing.Desigen.ToolboxItem" /> has been initialized.</exception>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxItemWrapper.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>Returns the value of the <see cref="P:System.Activities.Presentation.Toolbox.ToolboxItemWrapper.ToolName" /> property for the current <see cref="T:System.Activities.Presentation.Toolbox.ToolboxItemWrapper" /> object.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ToolboxItemWrapper.Type">
      <summary>Gets the type of the <see cref="T:System.Drawing.Design.ToolboxItem" />.</summary>
      <returns>Returns <see cref="T:System.Type" />.</returns>
    </member>
    <member name="T:System.Activities.Presentation.Toolbox.ToolCreatedEventArgs">
      <summary>Represents event arguments for the tool created event in the rehosted toolbox.</summary>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ToolCreatedEventArgs.Components">
      <summary>Returns the components to be included in the tool creation event in the rehosted toolbox.</summary>
      <returns>The <see cref="T:System.Array" /> of type <see cref="T:System.ComponentModel.IComponent" /> that contains the data passed to the <see cref="T:System.Activities.Presentation.Toolbox.ToolCreatedEventHandler" />.</returns>
    </member>
    <member name="T:System.Activities.Presentation.Toolbox.ToolCreatedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Activities.Presentation.Toolbox.ToolboxControl.ToolCreated" /> event for the rehosted toolbox.</summary>
      <param name="sender">The source of the tool created event. </param>
      <param name="e">The <see cref="T:System.Activities.Presentation.Toolbox.ToolCreatedEventArgs" /> that contains data for the tool created event.</param>
    </member>
    <member name="T:System.Activities.Presentation.Validation.IValidationErrorService">
      <summary>Defines ways to access a specified list of activity validation errors. </summary>
    </member>
    <member name="M:System.Activities.Presentation.Validation.IValidationErrorService.ShowValidationErrors(System.Collections.Generic.IList{System.Activities.Presentation.Validation.ValidationErrorInfo})">
      <summary>Makes the indicated list of activity validation errors accessible through a specific implementation.</summary>
      <param name="errors">A specified type of list that contains activity validation errors.</param>
    </member>
    <member name="T:System.Activities.Presentation.Validation.ValidationErrorInfo">
      <summary>Provides a container for all the properties attached to an instance of a validation error that occurred during the design time or run time of a workflow activity.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Validation.ValidationErrorInfo.#ctor(System.Activities.Validation.ValidationError)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Presentation.Validation.ValidationErrorInfo" /> class with the specified validation error.</summary>
      <param name="validationError">An exception that occurs during the validation of a workflow activity.</param>
    </member>
    <member name="M:System.Activities.Presentation.Validation.ValidationErrorInfo.#ctor(System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Presentation.Validation.ValidationErrorInfo" /> class that contains information about a specific error.</summary>
      <param name="message">An alphanumeric message that provides additional information about the error.</param>
    </member>
    <member name="P:System.Activities.Presentation.Validation.ValidationErrorInfo.FileName">
      <summary>Gets or sets the alphanumeric name of the file that generated the error.</summary>
      <returns>The name of the file that generated the error.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Validation.ValidationErrorInfo.Id">
      <summary>Gets or sets a unique identifier for this error.</summary>
      <returns>An identifier for the error.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Validation.ValidationErrorInfo.IsWarning">
      <summary>Gets or sets a value that determines whether the constraint violation is a warning.</summary>
      <returns>true if the constraint violation is a warning; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Validation.ValidationErrorInfo.Message">
      <summary>Gets or sets an alphanumeric message that provides additional information about the error.</summary>
      <returns>A text string comment that provides extra information.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Validation.ValidationErrorInfo.PropertyName">
      <summary>Gets or sets the alphanumeric name of the property that generated the error.</summary>
      <returns>A text string name of a property.</returns>
    </member>
    <member name="P:System.Activities.Presentation.Validation.ValidationErrorInfo.SourceReferenceId">
      <summary>Gets or sets the globally-unique identifier (GUID) of the source reference that generated the error.</summary>
      <returns>A <see cref="T:System.Guid" /> identifier of the source reference that generated the error.</returns>
    </member>
    <member name="T:System.Activities.Presentation.Validation.ValidationService">
      <summary>Provides the functionality required to validate a workflow activity designer while it is being edited and to provide the results of the validation process.</summary>
    </member>
    <member name="M:System.Activities.Presentation.Validation.ValidationService.#ctor(System.Activities.Presentation.EditingContext)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Presentation.Validation.ValidationService" /> that uses permanent and transient state context information about an activity designer.</summary>
      <param name="context">An object that contains permanent and transient state context information about a designer instance.</param>
    </member>
    <member name="M:System.Activities.Presentation.Validation.ValidationService.NavigateToError(System.Activities.Presentation.Validation.ValidationErrorInfo)">
      <summary>Moves the keyboard focus to the work surface location of an error in an activity.</summary>
      <param name="validationErrorInfo">The information of the validation error.</param>
    </member>
    <member name="M:System.Activities.Presentation.Validation.ValidationService.NavigateToError(System.String)">
      <summary>Moves the keyboard focus to the work surface location of an error in an activity.</summary>
      <param name="id">An error identification number.</param>
    </member>
    <member name="M:System.Activities.Presentation.Validation.ValidationService.OnValidationCompleted">
      <summary>Triggers a new validation completed event.</summary>
    </member>
    <member name="P:System.Activities.Presentation.Validation.ValidationService.Settings">
      <summary>Gets the settings for the validation of the current activity tree </summary>
      <returns>An object that contains the validation settings.</returns>
    </member>
    <member name="M:System.Activities.Presentation.Validation.ValidationService.ValidateWorkflow">
      <summary>Invokes validation of an activity tree.</summary>
    </member>
    <member name="T:System.Activities.Presentation.Validation.ValidationState">
      <summary>An enumeration of values that represent states of activity validation.</summary>
    </member>
    <member name="F:System.Activities.Presentation.Validation.ValidationState.ChildInvalid">
      <summary>A value that represents that validation found a child activity to be invalid.</summary>
    </member>
    <member name="F:System.Activities.Presentation.Validation.ValidationState.Error">
      <summary>A value that indicates that an error occurred during the validation of an activity.</summary>
    </member>
    <member name="F:System.Activities.Presentation.Validation.ValidationState.Valid">
      <summary>A value that indicates that an activity is valid.</summary>
    </member>
    <member name="F:System.Activities.Presentation.Validation.ValidationState.Warning">
      <summary>A value that indicates that a warning occurred during the validation of an activity.</summary>
    </member>
    <member name="T:System.Activities.Presentation.View.CommandMenuMode">
      <summary>Specifies the full command menu for the context menu that appears when you right-click the canvas.</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.CommandMenuMode.FullCommandMenu">
      <summary>Specifies the full-command menu mode.</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.CommandMenuMode.NoCommandMenu">
      <summary>Specifies the no-command menu mode.</summary>
    </member>
    <member name="T:System.Activities.Presentation.View.DesignerView">
      <summary>Provides Windows Presentation Foundation (WPF) controls for the designer view that represents the workflow canvas.</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.DesignerView.ActivitySchema">
      <summary>Gets the activity schema.</summary>
      <returns>The activity schema.</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.ActivitySchemaProperty">
      <summary>Contains the dependency property that represents the <see cref="P:System.Activities.Presentation.View.DesignerView.ActivitySchema" /> property. </summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.AddAnnotationCommand">
      <summary>The command used to add annotation.</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.CollapseAllCommand">
      <summary>The command used to collapse all user interface for the current element.</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.CollapseCommand">
      <summary>The command used to collapse the user interface for the current element.</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.DesignerView.CommandMenuMode">
      <summary>Indicates the command menu mode. </summary>
      <returns>The command menu mode.</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.CommandMenuModeProperty">
      <summary>Contains the dependency property that represents the <see cref="T:System.Activities.Design.View.CommandMenuMode" /> property. </summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.CommitCommand">
      <summary>The command used to update the source value in a <see cref="T:System.Windows.Data.BindingExpression" />.</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.DesignerView.Context">
      <summary>Gets or sets a collection of services shared between all elements contained in the designer. </summary>
      <returns>The context.</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.CopyAsImageCommand">
      <summary>The <see cref="T:System.Windows.Input.RoutedCommand" /> used to copy the current workflow design surface as a screenshot and place it in the clipboard. </summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.CopyCommand">
      <summary>The command used to copy.</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.CreateArgumentCommand">
      <summary>The command used to create a new argument.</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.CreateVariableCommand">
      <summary>The command used to create a new variable for the currently selected activity.</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.CreateWorkflowElementCommand">
      <summary>The command used to create a new <see cref="T:System.Activities.Design.WorkflowViewElement" /> on the current Windows Workflow Designer surface when dragging a workflow item from the Toolbox onto the designer surface.</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.CustomMenuItemsSeparatorCommand">
      <summary>A string constant that contains the GUID for the custom menu items separator.</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.CutCommand">
      <summary>The command used to cut.</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.CycleThroughDesignerCommand">
      <summary>The command used to cycle the various UI elements of the current Windows Workflow Designer surface.</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.DeleteAllAnnotationCommand">
      <summary>The command used to delete all annotation.</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.DeleteAnnotationCommand">
      <summary>The command used to delete a specified annotation.</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.DeleteBreakpointCommand">
      <summary>The command used to delete the breakpoint set on the current activity.</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.DisableBreakpointCommand">
      <summary>The command used to disable the breakpoint set on the current activity.</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.EditAnnotationCommand">
      <summary>The command used to edit annotation.</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.EnableBreakpointCommand">
      <summary>The command used to enable the breakpoint on the current activity.</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.ExpandAllCommand">
      <summary>The command used to expand the list for the current element.</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.ExpandCommand">
      <summary>The command used to navigate to the selected child of a composite activity and expand it to fill the full screen of the Windows Workflow Designer surface. The <paramref name="View full screen" /> context menu command initiates this action.</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.ExpandInPlaceCommand">
      <summary>The command used to expand the list for the current element in place within the current display.</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.FitToScreenCommand">
      <summary>The command used to fit the current element to the screen.</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.DesignerView.FlushState">
      <summary>Saves the state associated with the current designer view.</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.DesignerView.FocusedViewElement">
      <summary>Gets a value that indicates what view element has the focus.</summary>
      <returns>The view that has the focus.</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.FocusedViewElementProperty">
      <summary>Contains the dependency property that represents the <see cref="P:System.Activities.Presentation.View.DesignerView.FocusedViewElement" /> property.</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.DesignerView.GetCommandMenuMode(System.Windows.DependencyObject)">
      <summary>Retrieves the command menu mode of the specified object. </summary>
      <returns>The command menu mode for the <paramref name="obj" />.</returns>
      <param name="obj">The object whose command menu mode is retrieved. </param>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.GoToParentCommand">
      <summary>The command used to navigate to the parent activity of the selected child activity and expand it to fill the full screen of the Windows Workflow Designer surface. The <paramref name="View parent" /> context menu command initiates this action.</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.HideAllAnnotationCommand">
      <summary>The command used to hide all annotations.</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.DesignerView.InitializeComponent">
      <summary>Initializes the control.</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.InPanModeProperty">
      <summary>The InPanMode property.</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.InsertBreakpointCommand">
      <summary>The command used to set a breakpoint on the current activity.</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.DesignerView.IsMultipleSelectionMode">
      <summary>Gets a value that indicates whether the element is in multiple selection mode.</summary>
      <returns>true if the <see cref="T:System.Activities.Presentation.View.DesignerView" /> element is in multiple selection mode; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Presentation.View.DesignerView.IsReadOnly">
      <summary>Determines whether the <see cref="T:System.Activities.Presentation.View.DesignerView" /> is read only.</summary>
      <returns>true if the <see cref="T:System.Activities.Presentation.View.DesignerView" /> is read only; otherwise, false.</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.IsReadOnlyProperty">
      <summary>Contains the dependency property that represents the <see cref="P:System.Activities.Presentation.View.DesignerView.IsReadOnly" /> property.</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.DesignerView.MakeRootDesigner(System.Activities.Presentation.Model.ModelItem)">
      <summary>Places a specified model item at the root (top) of a hierarchy of designers.</summary>
      <param name="modelItem">The <see cref="T:System.Activities.Presentation.Model.ModelItem)" /> that becomes the root designer.</param>
    </member>
    <member name="P:System.Activities.Presentation.View.DesignerView.MenuItemStyle">
      <summary>Gets or sets the menu item style.</summary>
      <returns>The menu item style.</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.MenuItemStyleProperty">
      <summary>Contains the dependency property that represents the <see cref="P:System.Activities.Presentation.View.DesignerView.MenuItemStyle" /> property.</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.DesignerView.MenuSeparatorStyle">
      <summary>Gets or sets the menu separator style.</summary>
      <returns>The menu separator style.</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.MenuSeparatorStyleProperty">
      <summary>Contains the dependency property that represents the <see cref="P:System.Activities.Presentation.View.DesignerView.MenuSeparatorStyle" /> property.</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.MoveFocusCommand">
      <summary>The command used to move the focus.</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.DesignerView.OnContextMenuOpening(System.Windows.Controls.ContextMenuEventArgs)">
      <summary>Raises the ContextMenuOpening event. </summary>
      <param name="e">The data for the event.</param>
    </member>
    <member name="M:System.Activities.Presentation.View.DesignerView.OnInitialized(System.EventArgs)">
      <summary>Handles the <see cref="E:System.Windows.FrameworkElement.Initialized" /> event by calling the <see cref="T:System.Windows.Controls.UserControl" /> base class implementation, adding an event handler for the <see cref="E:System.Windows.UIElement.GotKeyboardFocus" /> routed event, and setting the foreground color for the designer view.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:System.Activities.Presentation.View.DesignerView.OnKeyDown(System.Windows.Input.KeyEventArgs)">
      <summary>Raises the OnKeyDown event.</summary>
      <param name="e">Data about the event.</param>
    </member>
    <member name="M:System.Activities.Presentation.View.DesignerView.OnPreviewDragOver(System.Windows.DragEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDragOver" /> attached event reaches an element in its route that is derived from this class.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:System.Activities.Presentation.View.DesignerView.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Called when a PreviewMouseLeftButtonDown event occurs.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:System.Activities.Presentation.View.DesignerView.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
      <summary>Raises the PreviewMouseWheel event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseWheelEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Activities.Presentation.View.DesignerView.OnReferenceUpdated(System.Reflection.AssemblyName,System.Boolean)">
      <summary>Refreshes the list of imported namespaces based on whether the specified referenced assembly is added or removed.</summary>
      <param name="updatedReference">The referenced assembly that is added or removed.</param>
      <param name="isAdded">true if the assembly reference is added; false if the assembly reference is removed. </param>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.PasteCommand">
      <summary>The command used to paste.</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.RedoCommand">
      <summary>The command used to redo an operation.</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.DesignerView.RegisterViewElement(System.Activities.Presentation.WorkflowViewElement)">
      <summary>Registers a view element.</summary>
      <param name="viewElement">The workflow view element.</param>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.ResetZoomCommand">
      <summary>The command used to reset the zoom.</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.RestoreCommand">
      <summary>The command used to restore.</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.DesignerView.RootDesigner">
      <summary>Gets or sets a <see cref="T:System.Windows.UIElement" /> that is the UI representation of the root of the current model tree.</summary>
      <returns>The root element.</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.RootDesignerProperty">
      <summary>Contains the dependency property that represents the <see cref="P:System.Activities.Presentation.View.DesignerView.RootDesigner" /> property. </summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.SaveAsImageCommand">
      <summary>The command used to save the current workflow design surface as an image.</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.SelectAllCommand">
      <summary>The command used to select all objects in the view.</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.DesignerView.SetCommandMenuMode(System.Windows.DependencyObject,System.Activities.Presentation.View.CommandMenuMode)">
      <summary>Sets the command menu mode on a specified dependency object. </summary>
      <param name="obj">The dependency object on which the command menu mode is set. </param>
      <param name="value">The command menu mode value to set.</param>
    </member>
    <member name="P:System.Activities.Presentation.View.DesignerView.ShouldCollapseAll">
      <summary>Gets or sets a value that indicates whether design view should collapse all visible child elements.</summary>
      <returns>true if the <see cref="T:System.Activities.Presentation.View.DesignerView" /> is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Presentation.View.DesignerView.ShouldExpandAll">
      <summary>Gets or sets a value that indicates whether the element should expand an entire list.</summary>
      <returns>true if the <see cref="T:System.Activities.Presentation.View.DesignerView" /> element should expand an entire list; otherwise, false.</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.ShowAllAnnotationCommand">
      <summary>The command used to show all annotations.</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.DesignerView.System#Windows#Markup#IComponentConnector#Connect(System.Int32,System.Object)">
      <summary>Attaches events and names to compiled content.</summary>
      <param name="connectionId">The connection ID. </param>
      <param name="target">The target.</param>
    </member>
    <member name="M:System.Activities.Presentation.View.DesignerView.System#Windows#Markup#IStyleConnector#Connect(System.Int32,System.Object)">
      <summary>Calls the StyleBamlReader to attach events on EventSetters and Templates in compiled content.</summary>
      <param name="connectionId">The connection ID.</param>
      <param name="target">The target.</param>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.ToggleArgumentDesignerCommand">
      <summary>The command used to show or hide the argument designer. Clicking the <paramref name="Arguments" /> button on the Windows Workflow Designer surface initiates this action. </summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.ToggleImportsDesignerCommand">
      <summary>The command used to toggle the imports designer.</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.ToggleMiniMapCommand">
      <summary>The command used to show or hide the MiniMap control on the Windows Workflow Designer surface.</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.ToggleSelectionCommand">
      <summary>The command used to toggle the selection.</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.ToggleVariableDesignerCommand">
      <summary>The command used to show or hide the variable designer. Clicking the <paramref name="Variables" /> button on the Windows Workflow Designer surface initiates this action.</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.UndoCommand">
      <summary>The command used to undo the last operation in the buffer.</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.DesignerView.UnregisterViewElement(System.Activities.Presentation.WorkflowViewElement)">
      <summary>Unregister a view element.</summary>
      <param name="viewElement">The workflow view element.</param>
    </member>
    <member name="P:System.Activities.Presentation.View.DesignerView.WorkflowShellBarItemVisibility">
      <summary>Gets or sets a value that indicates the sort of visibility that the workflow shell bar has.</summary>
      <returns>The value that indicates the sort of visibility that the workflow shell bar has.</returns>
    </member>
    <member name="P:System.Activities.Presentation.View.DesignerView.WorkflowShellHeaderItemsVisibility">
      <summary>Gets or sets a value that indicates the sort of visibility that the workflow shell header has.</summary>
      <returns>The value that indicates the sort of visibility that the workflow shell header has.</returns>
    </member>
    <member name="P:System.Activities.Presentation.View.DesignerView.ZoomFactor">
      <summary>Gets the current zoom level of the activity.</summary>
      <returns>The current zoom level of the activity.</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.ZoomInCommand">
      <summary>The command used to zoom in on the current Windows Workflow Designer surface.</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.ZoomOutCommand">
      <summary>The command used to zoom out of the current Windows Workflow Designer surface.</summary>
    </member>
    <member name="T:System.Activities.Presentation.View.EditingState">
      <summary>Enumerates the possible states of editing an expression in an expression text box.</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.EditingState.Editing">
      <summary>Specifies the editing state for an expression.</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.EditingState.Idle">
      <summary>Specifies the idle state in editing an expression.</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.EditingState.Validating">
      <summary>Specifies the validating state in editing an expression.</summary>
    </member>
    <member name="T:System.Activities.Presentation.View.ExpressionTextBox">
      <summary>Describes a control that enables the user to edit an expression in an activity designer.</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.ExpressionTextBox.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Presentation.View.ExpressionTextBox" /> class.</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.ExpressionTextBox.AcceptsReturn">
      <summary>Gets or sets a value that indicates whether the expression text box accepts returns.</summary>
      <returns>true if returns are accepted; otherwise, false.</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.ExpressionTextBox.AcceptsReturnProperty">
      <summary>Registers the <see cref="P:System.Activities.Presentation.View.ExpressionTextBox.AcceptsReturn" /> dependency property. </summary>
    </member>
    <member name="P:System.Activities.Presentation.View.ExpressionTextBox.AcceptsTab">
      <summary>Gets or sets a value that indicates whether the expression text box accepts tabs.</summary>
      <returns>true if tabs are accepted; otherwise, false.</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.ExpressionTextBox.AcceptsTabProperty">
      <summary>Registers the <see cref="P:System.Activities.Presentation.View.ExpressionTextBox.AcceptsTab" /> dependency property.</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.ExpressionTextBox.BeginEdit">
      <summary>Begins an edit.</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.ExpressionTextBox.CompleteWordCommand">
      <summary>The command used to complete words in the expression text box.</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.ExpressionTextBox.DecreaseFilterLevelCommand">
      <summary>The command used to change the filter level from the Common tab to the All tab when you are using IntelliSense filtering. This is available only when you edit an expression.</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.ExpressionTextBox.DefaultValue">
      <summary>Gets or sets the default value.</summary>
      <returns>The default value.</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.ExpressionTextBox.DefaultValueProperty">
      <summary>Registers the <see cref="P:System.Activities.Presentation.View.ExpressionTextBox.DefaultValue" /> dependency property.</summary>
    </member>
    <member name="E:System.Activities.Presentation.View.ExpressionTextBox.EditorLostLogicalFocus">
      <summary>Occurs when the expression editor loses logical focus.</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.ExpressionTextBox.EditorLostLogicalFocusEvent">
      <summary>Identifies the <see cref="E:System.Activities.Presentation.View.ExpressionTextBox.EditorLostLogicalFocus" /> routed event.</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.ExpressionTextBox.ExplicitCommit">
      <summary>Gets or sets a value that determines whether a commit is explicit.</summary>
      <returns>Returns true if the commit is explicit; otherwise, false.</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.ExpressionTextBox.ExplicitCommitProperty">
      <summary>Registers the <see cref="P:System.Activities.Presentation.View.ExpressionTextBox.ExplicitCommit" /> dependency property. </summary>
    </member>
    <member name="P:System.Activities.Presentation.View.ExpressionTextBox.Expression">
      <summary>Gets or sets the expression. </summary>
      <returns>Returns a <see cref="T:System.Activities.Presentation.Model.ModelItem" /> that contains the expression.</returns>
    </member>
    <member name="P:System.Activities.Presentation.View.ExpressionTextBox.ExpressionActivityEditor">
      <summary>Gets or sets the expression activity editor.</summary>
      <returns>The expression activity editor.</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.ExpressionTextBox.ExpressionActivityEditorOptionName">
      <summary>Specifies a name of the expression activity editor option.</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.ExpressionTextBox.ExpressionActivityEditorProperty">
      <summary>Registers the <see cref="P:System.Activities.Presentation.View.ExpressionTextBox.ExpressionActivityEditor" /> dependency property.</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.ExpressionTextBox.ExpressionEditorService">
      <summary>Gets the expression editor service.</summary>
      <returns>Returns a <see cref="T:System.Activities.Presentation.View.IExpressionEditorService" /> that contains the expression editor service.</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.ExpressionTextBox.ExpressionProperty">
      <summary>Registers the <see cref="P:System.Activities.Presentation.View.ExpressionTextBox.Expression" /> dependency property.</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.ExpressionTextBox.ExpressionType">
      <summary>Gets or sets the expression type. </summary>
      <returns>Returns a <see cref="T:System.Type" /> that contains the expression type.</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.ExpressionTextBox.ExpressionTypeProperty">
      <summary>Registers the <see cref="P:System.Activities.Presentation.View.ExpressionTextBox.ExpressionType" /> dependency property.</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.ExpressionTextBox.GlobalIntellisenseCommand">
      <summary>The command used for global IntelliSense in the expression text box.</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.ExpressionTextBox.HintText">
      <summary>Gets or sets the hint text. </summary>
      <returns>Returns a <see cref="T:System.String" /> that contains the hint text.</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.ExpressionTextBox.HintTextProperty">
      <summary>Registers the <see cref="P:System.Activities.Presentation.View.ExpressionTextBox.HintText" /> dependency property.</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.ExpressionTextBox.HorizontalScrollBarVisibility">
      <summary>Gets or sets the horizontal scroll bar visibility. </summary>
      <returns>Returns a <see cref="T:System.Windows.Controls.ScrollBarVisibility" /> that contains the horizontal scroll bar visibility.</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.ExpressionTextBox.HorizontalScrollBarVisibilityProperty">
      <summary>Registers the <see cref="P:System.Activities.Presentation.View.ExpressionTextBox.HorizontalScrollBarVisibility" /> dependency property.</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.ExpressionTextBox.IncreaseFilterLevelCommand">
      <summary>The command used to change the filter level from the All tab to the Common tab when you are using IntelliSense filtering. This is available only when you edit an expression.</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.ExpressionTextBox.InitializeComponent">
      <summary>Initializes this form.</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.ExpressionTextBox.IsReadOnly">
      <summary>Gets or sets a value that indicates whether the expression textbox is read-only.</summary>
      <returns>A value that indicates whether the expression textbox is read-only.</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.ExpressionTextBox.IsReadOnlyProperty">
      <summary>Registers the <see cref="P:System.Activities.Presentation.View.ExpressionTextBox.IsReadOnly" /> property.</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.ExpressionTextBox.IsSupportedExpression">
      <summary>Gets or sets a value that determines whether the expression is supported.</summary>
      <returns>true if the expression is supported; otherwise, false.</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.ExpressionTextBox.IsSupportedExpressionProperty">
      <summary>Registers the <see cref="P:System.Activities.Presentation.View.ExpressionTextBox.IsSupportedExpression" /> dependency property. </summary>
    </member>
    <member name="P:System.Activities.Presentation.View.ExpressionTextBox.MaxLines">
      <summary>Gets or sets the maximum number of lines.</summary>
      <returns>Returns an <see cref="T:System.Int32" /> that contains the maximum number of lines.</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.ExpressionTextBox.MaxLinesProperty">
      <summary>Registers the <see cref="P:System.Activities.Presentation.View.ExpressionTextBox.MaxLines" /> dependency property.</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.ExpressionTextBox.MinLines">
      <summary>Gets or sets the minimum number of lines. </summary>
      <returns>Returns an <see cref="T:System.Int32" /> that contains the minimum number of lines.</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.ExpressionTextBox.MinLinesProperty">
      <summary>Registers the <see cref="P:System.Activities.Presentation.View.ExpressionTextBox.MinLines" /> dependency property.</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.ExpressionTextBox.OwnerActivity">
      <summary>Gets or sets the owner activity. </summary>
      <returns>Returns a <see cref="T:System.Activities.Presentation.Model.ModelItem" /> that contains the owner activity.</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.ExpressionTextBox.OwnerActivityProperty">
      <summary>Registers the <see cref="P:System.Activities.Presentation.View.ExpressionTextBox.OwnerActivity" /> dependency property.</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.ExpressionTextBox.ParameterInfoCommand">
      <summary>The command used for parameter information in the expression text box.</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.ExpressionTextBox.PathToArgument">
      <summary>Gets or sets the path to the argument. </summary>
      <returns>Returns a <see cref="T:System.String" /> that contains the path to the argument.</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.ExpressionTextBox.PathToArgumentProperty">
      <summary>Registers the <see cref="P:System.Activities.Presentation.View.ExpressionTextBox.PathToArgument" /> dependency property. </summary>
    </member>
    <member name="F:System.Activities.Presentation.View.ExpressionTextBox.QuickInfoCommand">
      <summary>The command used for quick information in the expression text box.</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.ExpressionTextBox.RegisterExpressionActivityEditor(System.String,System.Type,System.Activities.Presentation.Expressions.CreateExpressionFromStringCallback)">
      <summary>Registers an expression activity editor.</summary>
      <param name="name">The name of the epression editor.</param>
      <param name="expressionActivityEditorType">The type of the expression activity editor.</param>
      <param name="convertFromString">The string format of the expression.</param>
    </member>
    <member name="M:System.Activities.Presentation.View.ExpressionTextBox.System#Windows#Markup#IComponentConnector#Connect(System.Int32,System.Object)">
      <summary>Attaches events and names to compiled content. </summary>
      <param name="connectionId">The connection ID. </param>
      <param name="target">The target.</param>
    </member>
    <member name="P:System.Activities.Presentation.View.ExpressionTextBox.UseLocationExpression">
      <summary>Gets or sets a value that determines whether this instance uses the location expression. </summary>
      <returns>true if this instance uses the location expression; otherwise, false.</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.ExpressionTextBox.UseLocationExpressionProperty">
      <summary>Registers the <see cref="P:System.Activities.Presentation.View.ExpressionTextBox.UseLocationExpression" /> dependency property.</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.ExpressionTextBox.VerticalScrollBarVisibility">
      <summary>Gets or sets the vertical scrollbar visibility. </summary>
      <returns>Returns a <see cref="T:System.Windows.Controls.ScrollBarVisibility" /> that contains the scrollbar visibility.</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.ExpressionTextBox.VerticalScrollBarVisibilityProperty">
      <summary>Registers the <see cref="P:System.Activities.Presentation.View.ExpressionTextBox.VerticalScrollBarVisibility" /> dependency property.</summary>
    </member>
    <member name="T:System.Activities.Presentation.View.IExpressionEditorInstance">
      <summary>Represents an expression editor instance.</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.IExpressionEditorInstance.AcceptsReturn">
      <summary>Gets or sets a value that indicates whether the expression editor instance accepts the RETURN key.</summary>
      <returns>true if the expression editor accepts the RETURN key; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Presentation.View.IExpressionEditorInstance.AcceptsTab">
      <summary>Gets or sets a value that indicates whether the expression editor instance accepts the TAB key.</summary>
      <returns>true if the expression editor accepts the TAB key; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.Presentation.View.IExpressionEditorInstance.CanCompleteWord">
      <summary>Gets a Boolean value that indicates whether the expression editor instance can complete the string being typed by the user.</summary>
      <returns>Returns a <see cref="T:System.Boolean" /> set to true.</returns>
    </member>
    <member name="M:System.Activities.Presentation.View.IExpressionEditorInstance.CanCopy">
      <summary>Gets a Boolean value that indicates whether the expression editor instance can be closed.</summary>
      <returns>true if the expression editor instance can be closed; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.Presentation.View.IExpressionEditorInstance.CanCut">
      <summary>Gets a Boolean value that indicates whether the expression can be cut.</summary>
      <returns>true if the expression can be cut; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.Presentation.View.IExpressionEditorInstance.CanDecreaseFilterLevel">
      <summary>Returns a value that indicates whether the filter level can be decreased when using Intellisense filtering.</summary>
      <returns>true if the filter level can be decreased; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.Presentation.View.IExpressionEditorInstance.CanGlobalIntellisense">
      <summary>Gets a Boolean value that indicates whether the expression editor instance can retrieve global IntelliSense on the expression.</summary>
      <returns>Returns a <see cref="T:System.Boolean" /> set to true.</returns>
    </member>
    <member name="M:System.Activities.Presentation.View.IExpressionEditorInstance.CanIncreaseFilterLevel">
      <summary>Returns a value that indicates whether the filter level can be increased when using Intellisense filtering.</summary>
      <returns>true if the filter level can be increased; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.Presentation.View.IExpressionEditorInstance.CanParameterInfo">
      <summary>Gets a Boolean value that indicates whether the expression editor instance can retrieve parameter information on the expression.</summary>
      <returns>Returns a <see cref="T:System.Boolean" /> set to true.</returns>
    </member>
    <member name="M:System.Activities.Presentation.View.IExpressionEditorInstance.CanPaste">
      <summary>Gets a Boolean value that indicates whether the expression can be pasted.</summary>
      <returns>true if the expression can be pasted; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.Presentation.View.IExpressionEditorInstance.CanQuickInfo">
      <summary>Gets a Boolean value that indicates whether the expression editor instance can retrieve type information to be shown in an IntelliSense quick info tool tip.</summary>
      <returns>Returns a <see cref="T:System.Boolean" /> set to true.</returns>
    </member>
    <member name="M:System.Activities.Presentation.View.IExpressionEditorInstance.CanRedo">
      <summary>Gets a Boolean value that indicates whether the system can redo the operation.</summary>
      <returns>true if the system can redo the operation; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.Presentation.View.IExpressionEditorInstance.CanUndo">
      <summary>Gets a Boolean value that indicates whether the system can undo the operation.</summary>
      <returns>true if the system can undo the operation; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.Presentation.View.IExpressionEditorInstance.ClearSelection">
      <summary>Clears the selection in the editor instance.</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.IExpressionEditorInstance.Close">
      <summary>Closes and purges the editor items. This will close the specific expression editor instance.</summary>
    </member>
    <member name="E:System.Activities.Presentation.View.IExpressionEditorInstance.Closing">
      <summary>Occurs when the expression editor instance is closing.</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.IExpressionEditorInstance.CompleteWord">
      <summary>Determines whether the expression editor instance can provide a list of completions for the partial word typed by the user. For example, member, argument, and method names can be shown to the user in an attempt to help them complete the word they are typing. </summary>
      <returns>true if this method succeeds; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.Presentation.View.IExpressionEditorInstance.Copy">
      <summary>Copies the active expression.</summary>
      <returns>true if the copy is successful; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.Presentation.View.IExpressionEditorInstance.Cut">
      <summary>Cuts the active expression.</summary>
      <returns>true if the cut is successful; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.Presentation.View.IExpressionEditorInstance.DecreaseFilterLevel">
      <summary>Decreases the filter level to show all items in the Intellisense filter list and returns a value that indicates whether this operation was successful.</summary>
      <returns>true if this method succeeds; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.Presentation.View.IExpressionEditorInstance.Focus">
      <summary>Sets focus on the editor instance.</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.IExpressionEditorInstance.GetCommittedText">
      <summary>Gets the text used to generate an expression.</summary>
      <returns>Returns a <see cref="T:System.String" /> that contains the text used to generate an expression.</returns>
    </member>
    <member name="M:System.Activities.Presentation.View.IExpressionEditorInstance.GlobalIntellisense">
      <summary>Retrieves global IntelliSense on the expression in the expression editor and returns a value that indicates whether this operation was successful.</summary>
      <returns>true if this method succeeds; otherwise, false.</returns>
    </member>
    <member name="E:System.Activities.Presentation.View.IExpressionEditorInstance.GotAggregateFocus">
      <summary>Occurs when the expression editor instance has aggregate focus. </summary>
    </member>
    <member name="P:System.Activities.Presentation.View.IExpressionEditorInstance.HasAggregateFocus">
      <summary>Gets a value that indicates whether the instance has aggregate focus.</summary>
      <returns>true if the editor instance has aggregate focus; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Presentation.View.IExpressionEditorInstance.HorizontalScrollBarVisibility">
      <summary>Gets or sets a value that indicates whether the horizontal scrollbar is visible.</summary>
      <returns>Returns <see cref="T:System.Windows.Controls.ScrollBarVisibility" />.</returns>
    </member>
    <member name="P:System.Activities.Presentation.View.IExpressionEditorInstance.HostControl">
      <summary>Gets a <see cref="T:System.Windows.Controls.Control" /> instance that can be used to display in the ExpressionTextBox.</summary>
      <returns>Returns <see cref="T:System.Windows.Controls.Control" />.</returns>
    </member>
    <member name="M:System.Activities.Presentation.View.IExpressionEditorInstance.IncreaseFilterLevel">
      <summary>Increases the filter level to show common items in the Intellisense filter list and returns a value that indicates whether this operation was successful.</summary>
      <returns>true if this method succeeds; otherwise, false.</returns>
    </member>
    <member name="E:System.Activities.Presentation.View.IExpressionEditorInstance.LostAggregateFocus">
      <summary>Represents an event that is raised when the expression editor instance loses aggregate focus. </summary>
    </member>
    <member name="P:System.Activities.Presentation.View.IExpressionEditorInstance.MaxLines">
      <summary>Gets or sets the maximum number of lines of text to be displayed by the ExpressionTextBox control. This property implicitly sets the height of the ExpressionTextBox control when growing to fit. </summary>
      <returns>Returns an <see cref="T:System.Int32" /> that containing the maximum number of lines of text to be displayed by the ExpressionTextBox control.</returns>
    </member>
    <member name="P:System.Activities.Presentation.View.IExpressionEditorInstance.MinLines">
      <summary>Gets or sets the minimum number of lines of text to be displayed by the ExpressionTextBox control. This property implicitly sets the height of the ExpressionTextBox control.</summary>
      <returns>Returns an<see cref="T:System.Int32" /> that contains the minimum number of lines of text to be displayed by the ExpressionTextBox control.</returns>
    </member>
    <member name="M:System.Activities.Presentation.View.IExpressionEditorInstance.ParameterInfo">
      <summary>Retrieves parameter information on the expression in the expression editor and returns a value that indicates whether this operation was successful.</summary>
      <returns>true if this method succeeds; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.Presentation.View.IExpressionEditorInstance.Paste">
      <summary>Pastes the active expression.</summary>
      <returns>true if the paste is successful; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.Presentation.View.IExpressionEditorInstance.QuickInfo">
      <summary>Determines whether type information to be shown in an IntelliSense quick info tool tip.</summary>
      <returns>true if this method succeeds; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.Presentation.View.IExpressionEditorInstance.Redo">
      <summary>Reapplies the last operation that was undone in the editor, that is, reverse the effects of the undo operation. </summary>
      <returns>true if the redo is successful; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Presentation.View.IExpressionEditorInstance.Text">
      <summary>Gets or sets the value of the text.</summary>
      <returns>Returns <see cref="T:System.String" />.</returns>
    </member>
    <member name="E:System.Activities.Presentation.View.IExpressionEditorInstance.TextChanged">
      <summary>Represents an event that is raised when the text in an expression editor instance is changed.</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.IExpressionEditorInstance.Undo">
      <summary>Undoes the last operation in the editor.</summary>
      <returns>true if the undo is successful; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Presentation.View.IExpressionEditorInstance.VerticalScrollBarVisibility">
      <summary>Gets or sets a value that indicates whether the vertical scrollbar is visible.</summary>
      <returns>Returns <see cref="T:System.Windows.Controls.ScrollBarVisibility" />.</returns>
    </member>
    <member name="T:System.Activities.Presentation.View.IExpressionEditorService">
      <summary>Creates or closes expression editors. </summary>
    </member>
    <member name="M:System.Activities.Presentation.View.IExpressionEditorService.CloseExpressionEditors">
      <summary>Closes all the active expression editors.</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.IExpressionEditorService.CreateExpressionEditor(System.Activities.Presentation.Hosting.AssemblyContextControlItem,System.Activities.Presentation.Hosting.ImportedNamespaceContextItem,System.Collections.Generic.List{System.Activities.Presentation.Model.ModelItem},System.String)">
      <summary>Creates a new expression editor.</summary>
      <returns>Returns a<see cref="T:System.Activities.Presentation.View.IExpressionEditorInstance" />.</returns>
      <param name="assemblies">Used to set the context for the editor session.</param>
      <param name="importedNamespaces">The imported namespaces to be used by the expression editor.</param>
      <param name="variables">Local variables for the expression editor.</param>
      <param name="text">A string used to populate the expression editor.</param>
    </member>
    <member name="M:System.Activities.Presentation.View.IExpressionEditorService.CreateExpressionEditor(System.Activities.Presentation.Hosting.AssemblyContextControlItem,System.Activities.Presentation.Hosting.ImportedNamespaceContextItem,System.Collections.Generic.List{System.Activities.Presentation.Model.ModelItem},System.String,System.Type)">
      <summary>Creates a new expression editor using the specified assemblies, imported namespaces, variables, expression text, and expression type.</summary>
      <returns>A new instance of the <see cref="T:System.Activities.Presentation.View.IExpressionEditorInstance" />.</returns>
      <param name="assemblies">The local and referenced assemblies in the environment.</param>
      <param name="importedNamespaces">The imported namespaces used by the expression editor.</param>
      <param name="variables">Local variables for the expression editor.</param>
      <param name="text">A string used to populate the expression editor.</param>
      <param name="expressionType">The type of the expression.</param>
    </member>
    <member name="M:System.Activities.Presentation.View.IExpressionEditorService.CreateExpressionEditor(System.Activities.Presentation.Hosting.AssemblyContextControlItem,System.Activities.Presentation.Hosting.ImportedNamespaceContextItem,System.Collections.Generic.List{System.Activities.Presentation.Model.ModelItem},System.String,System.Type,System.Windows.Size)">
      <summary>Creates a new expression editor using the specified assemblies, imported namespaces, variables, expression text, expression type, and the initial size.</summary>
      <returns>A new instance of the <see cref="T:System.Activities.Presentation.View.IExpressionEditorInstance" />.</returns>
      <param name="assemblies">The local and referenced assemblies in the environment.</param>
      <param name="importedNamespaces">The imported namespaces used by the expression editor.</param>
      <param name="variables">Local variables for the expression editor.</param>
      <param name="text">A string used to populate the expression editor.</param>
      <param name="expressionType">The type of the expression.</param>
      <param name="initialSize">The initial height and width of the expression editor control.</param>
    </member>
    <member name="M:System.Activities.Presentation.View.IExpressionEditorService.CreateExpressionEditor(System.Activities.Presentation.Hosting.AssemblyContextControlItem,System.Activities.Presentation.Hosting.ImportedNamespaceContextItem,System.Collections.Generic.List{System.Activities.Presentation.Model.ModelItem},System.String,System.Windows.Size)">
      <summary>Creates a new expression editor using the specified assemblies, imported namespaces, variables, expression text, and the initial size.</summary>
      <returns>A new instance of the <see cref="T:System.Activities.Presentation.View.IExpressionEditorInstance" />.</returns>
      <param name="assemblies">The local and referenced assemblies in the environment.</param>
      <param name="importedNamespaces">The imported namespaces used by the expression editor.</param>
      <param name="variables">Local variables for the expression editor.</param>
      <param name="text">A string used to populate the expression editor.</param>
      <param name="initialSize">The initial height and width of the expression editor control.</param>
    </member>
    <member name="M:System.Activities.Presentation.View.IExpressionEditorService.UpdateContext(System.Activities.Presentation.Hosting.AssemblyContextControlItem,System.Activities.Presentation.Hosting.ImportedNamespaceContextItem)">
      <summary>Updates the context for the editing session.</summary>
      <param name="assemblies">Used to set the context for the editor session.</param>
      <param name="importedNamespaces">The imported namespaces used by the expression editor.</param>
    </member>
    <member name="T:System.Activities.Presentation.View.PropertyKind">
      <summary>An enumeration that describes the type of argument being passed.</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.PropertyKind.InArgument">
      <summary>The argument is an input-only parameter, meaning that it can be used only to pass a value to a method.</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.PropertyKind.InOutArgument">
      <summary>The argument is an input/output parameter, meaning that it can be used for passing a value to a method and for getting back a value from a method.</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.PropertyKind.OutArgument">
      <summary>The argument is an output-only parameter, meaning that it can be used only to pass a value back from a method.</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.PropertyKind.Property">
      <summary>The argument is a property.</summary>
    </member>
    <member name="T:System.Activities.Presentation.View.Selection">
      <summary>Defines a selection of objects that are published as a <see cref="T:System.Activities.Presentation.ContextItem" /> in the <see cref="T:System.Activities.Presentation.EditingContext" />.</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.Selection.#ctor">
      <summary>Creates an empty <see cref="T:System.Activities.Presentation.View.Selection" /> object.</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.Selection.#ctor(System.Activities.Presentation.Model.ModelItem[])">
      <summary>Creates a <see cref="T:System.Activities.Presentation.View.Selection" /> object with the specified objects selected.</summary>
      <param name="selectedObjects">A parameter array of objects that should be selected.</param>
    </member>
    <member name="M:System.Activities.Presentation.View.Selection.#ctor(System.Collections.Generic.IEnumerable{System.Activities.Presentation.Model.ModelItem})">
      <summary>Creates a <see cref="T:System.Activities.Presentation.View.Selection" /> object with the specified objects selected.</summary>
      <param name="selectedObjects">An enumeration of objects that should be selected.</param>
      <exception cref="T:System.ArgumentNullException">If <paramref name="selectedObjects" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Presentation.View.Selection.#ctor(System.Collections.Generic.IEnumerable{System.Activities.Presentation.Model.ModelItem},System.Predicate{System.Activities.Presentation.Model.ModelItem})">
      <summary>Creates a <see cref="T:System.Activities.Presentation.View.Selection" /> object with the specified objects selected.</summary>
      <param name="selectedObjects">An enumeration of objects that should be selected.</param>
      <param name="match">The criteria for including objects. Only those objects in <paramref name="selectedObjects" /> that match the predicate will be added to the selection.</param>
      <exception cref="T:System.ArgumentNullException">If <paramref name="selectedObjects" /> or <paramref name="match" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Presentation.View.Selection.#ctor(System.Collections.IEnumerable)">
      <summary>Creates a <see cref="T:System.Activities.Presentation.View.Selection" /> object with the specified objects selected.</summary>
      <param name="selectedObjects">An enumeration of objects that should be selected.</param>
      <exception cref="T:System.ArgumentNullException">If <paramref name="selectedObjects" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Presentation.View.Selection.#ctor(System.Collections.IEnumerable,System.Predicate{System.Activities.Presentation.Model.ModelItem})">
      <summary>Creates a <see cref="T:System.Activities.Presentation.View.Selection" /> object with the specified objects selected.</summary>
      <param name="selectedObjects">An enumeration of objects that should be selected.</param>
      <param name="match">The criteria for including objects. Only those objects in <paramref name="selectedObjects" /> that match the predicate will be added to the selection.</param>
      <exception cref="T:System.ArgumentNullException">If <paramref name="selectedObjects" /> or <paramref name="match" /> is null.</exception>
    </member>
    <member name="P:System.Activities.Presentation.View.Selection.ItemType">
      <summary>Returns the item type for this editing context item.</summary>
      <returns>Returns typeof(<see cref="T:System.WorkflowModel.Presentation.Interaction.Selection" />).</returns>
    </member>
    <member name="P:System.Activities.Presentation.View.Selection.PrimarySelection">
      <summary>Returns the primary selection.</summary>
      <returns>Returns the primary selection as a <see cref="T:System.Activities.Presentation.Model.ModelItem" />.</returns>
    </member>
    <member name="M:System.Activities.Presentation.View.Selection.Select(System.Activities.Presentation.EditingContext,System.Activities.Presentation.Model.ModelItem)">
      <summary>A selection helper method that takes the existing selection in the context and selects an item into it. If the item is already in the selection, the selection is preserved and the item is promoted to the primary selection.</summary>
      <returns>A Selection object that contains the new selection.</returns>
      <param name="context">The editing context to apply this selection change to.</param>
      <param name="itemToSelect">The item to select.</param>
    </member>
    <member name="P:System.Activities.Presentation.View.Selection.SelectedObjects">
      <summary>The enumeration of selected objects.</summary>
      <returns>Returns the selected objects as an <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
    </member>
    <member name="P:System.Activities.Presentation.View.Selection.SelectionCount">
      <summary>The number of objects that are currently selected in this selection.</summary>
      <returns>Returns the number of selected objects as an <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Activities.Presentation.View.Selection.SelectOnly(System.Activities.Presentation.EditingContext,System.Activities.Presentation.Model.ModelItem)">
      <summary>A selection helper method that sets an item into the selection. Any existing items are deselected.</summary>
      <returns>A Selection object that contains the new selection.</returns>
      <param name="context">The editing context to apply this selection change to.</param>
      <param name="itemToSelect">The item to select.</param>
    </member>
    <member name="M:System.Activities.Presentation.View.Selection.Subscribe(System.Activities.Presentation.EditingContext,System.Activities.Presentation.SubscribeContextCallback{System.Activities.Presentation.View.Selection})">
      <summary>A helper method that subscribes to selection change events.</summary>
      <param name="context">The editing context to listen to.</param>
      <param name="handler">The handler to be invoked when the selection changes.</param>
    </member>
    <member name="M:System.Activities.Presentation.View.Selection.Toggle(System.Activities.Presentation.EditingContext,System.Activities.Presentation.Model.ModelItem)">
      <summary>A selection helper method that takes the existing selection in thecontext and creates a new selection that contains the toggled state of the item. If the item is to be added to the selection, it is added as the primary selection.</summary>
      <returns>A Selection object that contains the new selection.</returns>
      <param name="context">The editing context to apply this selection change to.</param>
      <param name="itemToToggle">The item to toggle selection for.</param>
    </member>
    <member name="M:System.Activities.Presentation.View.Selection.Union(System.Activities.Presentation.EditingContext,System.Activities.Presentation.Model.ModelItem)">
      <summary>A selection helper method that takes the existing selection in the context and creates a new selection that contains the original selection and the specified item to add. If the specified item to add is already in the original selection, it is promoted to the primary selection.</summary>
      <returns>A Selection object that contains the new selection.</returns>
      <param name="context">The editing context to apply this selection change to.</param>
      <param name="itemToAdd">The item to add to the selection.</param>
    </member>
    <member name="M:System.Activities.Presentation.View.Selection.Unsubscribe(System.Activities.Presentation.EditingContext,System.Activities.Presentation.SubscribeContextCallback{System.Activities.Presentation.View.Selection})">
      <summary>A helper method that removes a previously added selection change event.</summary>
      <param name="context">The editing context to listen to.</param>
      <param name="handler">The handler to be invoked when the selection changes.</param>
    </member>
    <member name="T:System.Activities.Presentation.View.ShellBarItemVisibility">
      <summary>Enumerates the items that are visible in the shell bar.</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.ShellBarItemVisibility.All">
      <summary>Specifies that all items are visible.</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.ShellBarItemVisibility.Arguments">
      <summary>Specifies that arguments are visible.</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.ShellBarItemVisibility.Imports">
      <summary>Specifies that imports are visible.</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.ShellBarItemVisibility.MiniMap">
      <summary>Specifies that the mini map is visible.</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.ShellBarItemVisibility.None">
      <summary>Specifies that nothing is visible.</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.ShellBarItemVisibility.PanMode">
      <summary>Specifies that PanMode is visible.</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.ShellBarItemVisibility.Variables">
      <summary>Specifies that the variables are visible.</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.ShellBarItemVisibility.Zoom">
      <summary>Specifies that the zoom is visible.</summary>
    </member>
    <member name="T:System.Activities.Presentation.View.ShellHeaderItemsVisibility">
      <summary>Specifies the visibility of shell header items.</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.ShellHeaderItemsVisibility.All">
      <summary>All items are visible.</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.ShellHeaderItemsVisibility.Breadcrumb">
      <summary>The breadcrumb is visible.</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.ShellHeaderItemsVisibility.CollapseAll">
      <summary>Collapse all is visible.</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.ShellHeaderItemsVisibility.ExpandAll">
      <summary>Expand all is visible.</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.ShellHeaderItemsVisibility.None">
      <summary>None is visible.</summary>
    </member>
    <member name="T:System.Activities.Presentation.View.TypePresenter">
      <summary>A control used for selecting a type.</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.TypePresenter.#ctor">
      <summary>Creates a new instance of a <see cref="T:System.Activities.Presentation.View.TypePresenter" /> that initializes a collection of wrapper objects that each represent a primitive type.</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.TypePresenter.AllowNull">
      <summary>Gets or sets a value that indicates whether the string (null) will be shown in the type presenter, which allows you to select null for the type.</summary>
      <returns>true if the property can be null; otherwise, false.</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.TypePresenter.AllowNullProperty">
      <summary>Dependency property identifier field that designates whether the type null can be selected from the type presenter.</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.TypePresenter.BrowseTypeDirectly">
      <summary>Gets or sets an indication whether the type browser should be shown directly when the user clicks the <see cref="T:System.Activities.Presentation.View.TypePresenter" /> control.</summary>
      <returns>true if the type browser should be shown directly when the user clicks the <see cref="T:System.Activities.Presentation.View.TypePresenter" /> control; otherwise, false.</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.TypePresenter.BrowseTypeDirectlyProperty">
      <summary>Dependency property identifier field that designates whether the type browser should be shown directly when the user clicks the <see cref="T:System.Activities.Presentation.View.TypePresenter" /> control.</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.TypePresenter.CenterActivityTypeResolverDialog">
      <summary>Gets or sets whether the activity type resolver dialog window should be centered.</summary>
      <returns>true if the window should be centered; otherwise, false.</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.TypePresenter.CenterActivityTypeResolverDialogProperty">
      <summary>Dependency property identifier field that designates whether the activity type resolver dialog window should be centered.</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.TypePresenter.CenterTypeBrowserDialog">
      <summary>Gets or sets whether a type browser dialog window should be centered.</summary>
      <returns>true if the window should be centered; otherwise, false.</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.TypePresenter.CenterTypeBrowserDialogProperty">
      <summary>Dependency property identifier field that designates whether the type browser dialog window should be centered.</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.TypePresenter.Context">
      <summary>Gets or sets the value of an editing context property.</summary>
      <returns>An editing context item.</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.TypePresenter.ContextProperty">
      <summary>Dependency property identifier field that contains a property of the editing context, for instance a list of currently selected objects or a list of services running in the designer.</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.TypePresenter.DefaultMostRecentlyUsedTypes">
      <summary>Gets or sets the default types used most recently.</summary>
      <returns>Returns <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> that contains the default types used most recently.</returns>
    </member>
    <member name="P:System.Activities.Presentation.View.TypePresenter.Filter">
      <summary>Gets or sets the filter used to show types.</summary>
      <returns>A delegate with one return value and a Boolean value that represents the filter used to show types.</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.TypePresenter.FilterProperty">
      <summary>Dependency property identifier field that designates what filter is used to show types.</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.TypePresenter.FocusOnVisibleControl">
      <summary>Puts the keyboard focus on the current presenter control.</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.TypePresenter.InitializeComponent">
      <summary>Initializes a combo box. The contents of this method are generated by the designer.</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.TypePresenter.Items">
      <summary>Gets an enumeration of wrapper types that are in the current type presenter.</summary>
      <returns>An enumeration of wrapper types that are in the current type presenter.</returns>
    </member>
    <member name="P:System.Activities.Presentation.View.TypePresenter.Label">
      <summary>Gets or sets the display name for a component.</summary>
      <returns>The display name for a component.</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.TypePresenter.LabelProperty">
      <summary>Dependency property identifier field that defines the label of a control.</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.TypePresenter.MostRecentlyUsedTypes">
      <summary>Gets or sets the types used most recently.</summary>
      <returns>The types used most recently.</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.TypePresenter.MostRecentlyUsedTypesProperty">
      <summary>Dependency property identifier field that designates the most recently used types.</summary>
    </member>
    <member name="E:System.Activities.Presentation.View.TypePresenter.PropertyChanged">
      <summary>Declaration of the event that gets raised when a property on the specified user interface control has been changed.</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.TypePresenter.System#Windows#Markup#IComponentConnector#Connect(System.Int32,System.Object)">
      <summary>Obsolete. Not implemented.</summary>
      <param name="connectionId">Not implemented.</param>
      <param name="target">Not implemented.</param>
    </member>
    <member name="P:System.Activities.Presentation.View.TypePresenter.Text">
      <summary>Gets the value used for a component display name.</summary>
      <returns>A string name.</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.TypePresenter.TextProperty">
      <summary>Dependency property identifier field that assigns the text that is used for a component display name.</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.TypePresenter.Type">
      <summary>Gets or sets the type of the current <see cref="T:System.Activities.Presentation.View.TypePresenter" />.</summary>
      <returns>A type object.</returns>
    </member>
    <member name="E:System.Activities.Presentation.View.TypePresenter.TypeBrowserClosed">
      <summary>Provides event accessors for the <see cref="F:System.Activities.Presentation.View.TypePresenter.TypeBrowserClosedEvent" />.</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.TypePresenter.TypeBrowserClosedEvent">
      <summary>Dependency property identifier field that designates whether the user closed the browser.</summary>
    </member>
    <member name="E:System.Activities.Presentation.View.TypePresenter.TypeBrowserOpened">
      <summary>Provides event accessors for the <see cref="F:System.Activities.Presentation.View.TypePresenter.TypeBrowserOpenedEvent" />.</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.TypePresenter.TypeBrowserOpenedEvent">
      <summary>Dependency property identifier field that designates whether the user opened the browser.</summary>
    </member>
    <member name="E:System.Activities.Presentation.View.TypePresenter.TypeChanged">
      <summary>Provides event accessors for the <see cref="F:System.Activities.Presentation.View.TypePresenter.TypeChangedEvent" />.</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.TypePresenter.TypeChangedEvent">
      <summary>Dependency property identifier field that designates whether the component type has changed.</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.TypePresenter.TypeName">
      <summary>Gets the display name for a component type.</summary>
      <returns>A string that represents the display name.</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.TypePresenter.TypeProperty">
      <summary>Dependency property identifier field that designates the current type represented by the <see cref="T:System.Activities.Presentation.View.TypePresenter" />.</summary>
    </member>
    <member name="T:System.Activities.Presentation.View.TypeResolvingOptions">
      <summary>Provides the options available for resolving types used by the <see cref="T:System.Activities.Presentation.View.TypePresenter" />.</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.TypeResolvingOptions.#ctor">
      <summary>Creates an instance of the <see cref="T:System.Activities.Presentation.View.TypeResolvingOptions" /> class.</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.TypeResolvingOptions.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
      <summary>Creates an instance of the <see cref="T:System.Activities.Presentation.View.TypeResolvingOptions" /> class.</summary>
      <param name="defaultTypes">The default types in the <see cref="T:System.Activities.Presentation.View.TypePrensenter" /> control.</param>
    </member>
    <member name="P:System.Activities.Presentation.View.TypeResolvingOptions.BrowseTypeDirectly">
      <summary>Gets or sets a value that indicates whether the <see cref="T:System.Activities.Presentation.View.TypePresenter" /> control should show the type browser directly when a user tries to select a type.</summary>
      <returns>true if the <see cref="T:System.Activities.Presentation.View.TypePrensenter" /> control should show the type browser directly when a user tries to select a type; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Presentation.View.TypeResolvingOptions.Filter">
      <summary>Gets or sets a filter used to filter types in the <see cref="T:System.Activities.Presentation.View.TypePrensenter" /> control.</summary>
      <returns>The filter for the <see cref="T:System.Activities.Presentation.View.TypePresenter" /> control.</returns>
    </member>
    <member name="T:System.Activities.Presentation.View.TypeWrapper">
      <summary>A wrapper class for <see cref="T:System.Type" /> that provides type information. This is a sealed class.</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.TypeWrapper.DisplayName">
      <summary>Gets the display name for the current wrapper type.</summary>
      <returns>A string that contains the display name.</returns>
    </member>
    <member name="M:System.Activities.Presentation.View.TypeWrapper.Equals(System.Object)">
      <summary>Determines whether the current <see cref="T:System.Activities.Presentation.View.TypeWrapper" /> instance is equal to the specified object.</summary>
      <returns>true if the current <see cref="T:System.Activities.Presentation.View.TypeWrapper" /> instance is equal to the specified object; otherwise, false.</returns>
      <param name="obj">An object that represents a <see cref="T:System.Activities.Presentation.View.TypeWrapper" />.</param>
    </member>
    <member name="M:System.Activities.Presentation.View.TypeWrapper.GetHashCode">
      <summary>Returns a hash code for the current <see cref="T:System.Activities.Presentation.View.TypeWrapper" /> instance.</summary>
      <returns>An integer representing a hash code.</returns>
    </member>
    <member name="P:System.Activities.Presentation.View.TypeWrapper.IsTypeDefinition">
      <summary>Gets an indication whether the type in this <see cref="T:System.Activities.Presentation.View.TypeWrapper" /> instance is a type definition.</summary>
      <returns>true if the type in this <see cref="T:System.Activities.Presentation.View.TypeWrapper" /> instance is a type definition; otherwise, false. </returns>
    </member>
    <member name="P:System.Activities.Presentation.View.TypeWrapper.Tag">
      <summary>Gets data about the wrapper type.</summary>
      <returns>An object that contains data about the control.</returns>
    </member>
    <member name="M:System.Activities.Presentation.View.TypeWrapper.ToString">
      <summary>Returns the contents of a tag that contains a label for the current wrapper type.</summary>
      <returns>A string version of the tag value.</returns>
    </member>
    <member name="P:System.Activities.Presentation.View.TypeWrapper.Type">
      <summary>Gets the type in the current <see cref="T:System.Activities.Presentation.View.TypeWrapper" /> instance.</summary>
      <returns>The type in the current <see cref="T:System.Activities.Presentation.View.TypeWrapper" /> instance.</returns>
    </member>
    <member name="T:System.Activities.Presentation.View.ViewCreatedEventArgs">
      <summary>Represents the event arguments for the workflow view element created event.</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.ViewCreatedEventArgs.#ctor(System.Activities.Presentation.WorkflowViewElement)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Presentation.View.ViewCreatedEventArgs" /> class with the specified workflow view element.</summary>
      <param name="view">The workflow view element that is created.</param>
    </member>
    <member name="P:System.Activities.Presentation.View.ViewCreatedEventArgs.View">
      <summary>Gets the workflow view element that is created.</summary>
      <returns>The workflow view element that is created.</returns>
    </member>
    <member name="T:System.Activities.Presentation.View.ViewStateChangedEventArgs">
      <summary>Provides an object formatted to serve as an event argument containing the information about the changed view state.</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.ViewStateChangedEventArgs.#ctor(System.Activities.Presentation.Model.ModelItem,System.String,System.Object,System.Object)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Presentation.View.ViewStateChangedEventArgs" /> class with a specified parent model item and its key/value pair with the old and the new values.</summary>
      <param name="modelItem">An item in the activity designer model that serves as a parent element in the XML view of the model.</param>
      <param name="key">The name of an attribute in the specified parent element. </param>
      <param name="newValue">The new value for the specified attribute key.</param>
      <param name="oldValue">The old value of the specified attribute key. </param>
    </member>
    <member name="P:System.Activities.Presentation.View.ViewStateChangedEventArgs.Key">
      <summary>Gets an attribute key name in a specified view element.</summary>
      <returns>A string that represents the name of a key in a view element.</returns>
    </member>
    <member name="P:System.Activities.Presentation.View.ViewStateChangedEventArgs.NewValue">
      <summary>Gets the new value for the key in the current attribute key/value pair.</summary>
      <returns>An object that contains a key value.</returns>
    </member>
    <member name="P:System.Activities.Presentation.View.ViewStateChangedEventArgs.OldValue">
      <summary>Gets the old value of the key in the current attribute key/value pair.</summary>
      <returns>An object that contains a key value.</returns>
    </member>
    <member name="P:System.Activities.Presentation.View.ViewStateChangedEventArgs.ParentModelItem">
      <summary>Gets an item in the activity designer model that serves as a parent item in the XAML view of the model.</summary>
      <returns>A parent element in an activity designer model.</returns>
    </member>
    <member name="T:System.Activities.Presentation.View.ViewStateChangedEventHandler">
      <summary>Declares a delegate type that handles changes to the view state.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">An <see cref="T:System.Activities.Presentation.View.ViewStateChangedEventArgs" /> object that contains no event data.</param>
    </member>
    <member name="T:System.Activities.Presentation.View.ViewStateService">
      <summary>Enables the preservation and accessing of all data values associated with the user interaction components of a workflow application, at a particular point in time in the running of a workflow application. A <see cref="T:System.Activities.Presentation.View.ViewStateService" /> stores view states for model items.</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.ViewStateService.#ctor">
      <summary>Initiates a new instance of the <see cref="T:System.Activities.Presentation.View.ViewStateService" /> class.</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.ViewStateService.RemoveViewState(System.Activities.Presentation.Model.ModelItem,System.String)">
      <summary>When implemented in a derived class, removes the view state represented by the specified key and associated with the specified model item.</summary>
      <returns>true if the view state was removed; otherwise, false.</returns>
      <param name="modelItem">The workflow activity <see cref="T:System.Activities.Presentation.Model.ModelItem" /> associated with the current view state.</param>
      <param name="key">The <see cref="T:System.String" /> that identifies the view state item that is stored.</param>
    </member>
    <member name="M:System.Activities.Presentation.View.ViewStateService.RetrieveAllViewState(System.Activities.Presentation.Model.ModelItem)">
      <summary>Returns an aspect of the view state that was stored for the specified <paramref name="modelItem" />, matching the specified <paramref name="key" />.</summary>
      <returns>Returns <see cref="T:System.Collections.Generic.Dictionary`2" />.</returns>
      <param name="modelItem">The <see cref="T:System.Activities.Presentation.Model.ModelItem" /> that the view state applies to.</param>
    </member>
    <member name="M:System.Activities.Presentation.View.ViewStateService.RetrieveViewState(System.Activities.Presentation.Model.ModelItem,System.String)">
      <summary>Retrieves an aspect of the view state for the specified <paramref name="modelItem" />, matching the specified <paramref name="key" />.</summary>
      <returns>The aspect of the view state as an <see cref="T:System.Object" />,or null.</returns>
      <param name="modelItem">The workflow activity <see cref="T:System.Activities.Presentation.Model.ModelItem" /> associated with the current view state.</param>
      <param name="key">The <see cref="T:System.String" /> that identifies the aspect of the view state that is to be retrieved.</param>
    </member>
    <member name="M:System.Activities.Presentation.View.ViewStateService.StoreViewState(System.Activities.Presentation.Model.ModelItem,System.String,System.Object)">
      <summary>Stores an aspect of the view state for the specified <paramref name="modelItem" />, matching the specified <paramref name="key" />.</summary>
      <param name="modelItem">The <see cref="T:System.Activities.Presentation.Model.ModelItem" /> that the view state applies to.</param>
      <param name="key">The <see cref="T:System.String" /> that identifies the aspect of the view state that is to be stored.</param>
      <param name="value">An <see cref="T:System.Object" /> to be stored.</param>
    </member>
    <member name="M:System.Activities.Presentation.View.ViewStateService.StoreViewStateWithUndo(System.Activities.Presentation.Model.ModelItem,System.String,System.Object)">
      <summary>When implemented in a derived class, records the current setting of the item represented by the specified key so that it is available for an undo operation. The item represented by the specified key is then stored in the view state of the specified model item.</summary>
      <param name="modelItem">The <see cref="T:System.Activities.Presentation.Model.ModelItem" /> that the view state applies to. </param>
      <param name="key">The <see cref="T:System.String" /> that identifies the aspect of the view state that is to be stored. The <see cref="T:System.String" /> that identifies the view state item that is stored.</param>
      <param name="value">An <see cref="T:System.Object" /> to be stored.</param>
    </member>
    <member name="E:System.Activities.Presentation.View.ViewStateService.UndoableViewStateChanged">
      <summary>When implemented in a derived class, declares an event that signals that a change has been made to the control’s undoable view state. </summary>
    </member>
    <member name="E:System.Activities.Presentation.View.ViewStateService.ViewStateChanged">
      <summary>When implemented in a derived class, declares an event that signals that a change has been made to the control’s view state.</summary>
    </member>
    <member name="T:System.Activities.Presentation.View.VirtualizedContainerService">
      <summary>Represents a virtual container service associated with an editing context and design view. The virtual container service is used to customize the UI virtualization behavior. </summary>
    </member>
    <member name="M:System.Activities.Presentation.View.VirtualizedContainerService.#ctor(System.Activities.Presentation.EditingContext)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Presentation.View.VirtualizedContainerService" /> class with a specific editing context.</summary>
      <param name="context">The <see cref="T:System.Activities.Presentation.EditingContext" /> for the service.</param>
    </member>
    <member name="M:System.Activities.Presentation.View.VirtualizedContainerService.GetContainer(System.Activities.Presentation.Model.ModelItem,System.Activities.Presentation.ICompositeView)">
      <summary>Gets a container and associates it with a specified model item and returns a UI element that represents the association.</summary>
      <returns>The <see cref="T:System.Windows.UIElement" /> that represents the container associated with the model item.</returns>
      <param name="modelItem">The <see cref="T:System.Activities.Presentation.Model.ModelItem" /> associated with the container.</param>
      <param name="sourceContainer">The <see cref="T:System.Activities.Presentation.ICompositeView" /> that is associated with the model item.</param>
    </member>
    <member name="M:System.Activities.Presentation.View.VirtualizedContainerService.GetHintSize(System.Object)">
      <summary>Attempts to get a value for the Hint Size Name property. </summary>
      <returns>The destination <see cref="T:System.Object" /> for the value.</returns>
      <param name="instance">The property store.</param>
    </member>
    <member name="M:System.Activities.Presentation.View.VirtualizedContainerService.GetViewElement(System.Activities.Presentation.Model.ModelItem,System.Activities.Presentation.ICompositeView)">
      <summary>Returns the workflow view element that corresponds to the specified model item.</summary>
      <returns>The workflow view element that corresponds to the specified model item.</returns>
      <param name="modelItem">The underlying model item of the workflow view element to get.</param>
      <param name="sourceContainer">The drag source dependency property value to set for the workflow view element.</param>
    </member>
    <member name="F:System.Activities.Presentation.View.VirtualizedContainerService.HintSizeName">
      <summary>Provides a XAML type system identifier.</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.VirtualizedContainerService.SetHintSize(System.Object,System.Object)">
      <summary>Attempts to set a value for the Hint Size Name property.</summary>
      <param name="instance">The property store.</param>
      <param name="value">The value set.</param>
    </member>
    <member name="T:System.Activities.Presentation.View.WorkflowViewService">
      <summary>Handles the mapping of activity designer visual elements and their underlying model items.</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.WorkflowViewService.#ctor(System.Activities.Presentation.EditingContext)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Presentation.View.WorkflowViewService" /> class that uses the specified <see cref="T:System.Activities.Presentation.EditingContext" />.</summary>
      <param name="context">The editing tool that is used to manipulate objects on the design surface.</param>
    </member>
    <member name="M:System.Activities.Presentation.View.WorkflowViewService.CreateViewElement(System.Activities.Presentation.Model.ModelItem)">
      <summary>Creates a new <see cref="T:System.Activities.Presentation.WorkflowViewElement" /> that supports the type of the specified <see cref="T:System.Activities.Presentation.Model.ModelItem" />.</summary>
      <returns>A workflow view element that supports the same type as the model item argument.</returns>
      <param name="modelItem">One entity in the editing model of an activity designer.</param>
    </member>
    <member name="M:System.Activities.Presentation.View.WorkflowViewService.GetModel(System.Windows.DependencyObject)">
      <summary>Returns a <see cref="T:System.Activities.Presentation.Model.ModelItem" /> that maps to the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <returns>A model item that maps to a dependency object.</returns>
      <param name="view">A workflow view element that contains the model item.</param>
    </member>
    <member name="M:System.Activities.Presentation.View.WorkflowViewService.GetView(System.Activities.Presentation.Model.ModelItem)">
      <summary>Creates a new <see cref="T:System.Workflow.ComponentModel.DependencyObject" /> that maps to the specified <see cref="T:System.Activities.Presentation.Model.ModelItem" />.</summary>
      <returns>A dependency object that maps to a model item.</returns>
      <param name="model">One entity in the editing model of an activity designer.</param>
    </member>
    <member name="M:System.Activities.Presentation.View.WorkflowViewService.GetViewElement(System.Activities.Presentation.Model.ModelItem)">
      <summary>Creates a new <see cref="T:System.Activities.Presentation.WorkflowViewElement" /> that maps to the specified <see cref="T:System.Activities.Presentation.Model.ModelItem" />.</summary>
      <returns>A new view element that maps to a specified model item.</returns>
      <param name="modelItem">One entity in the editing model of an activity designer.</param>
    </member>
    <member name="E:System.Activities.Presentation.View.WorkflowViewService.ViewCreated">
      <summary>Occurs when the workflow view is created.</summary>
    </member>
    <member name="T:System.Activities.Presentation.View.WorkflowViewStateService">
      <summary>Manages the view state of the activity designer and its underlying model items.</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.WorkflowViewStateService.#ctor(System.Activities.Presentation.EditingContext)">
      <summary>Creates an instance of the <see cref="T:System.Activities.Presentation.View.WorkflowViewStateService" /> with a specified editing context.</summary>
      <param name="context">The <see cref="T:System.Activities.Presentation.EditingContext" /> for the state service.</param>
    </member>
    <member name="M:System.Activities.Presentation.View.WorkflowViewStateService.GetViewState(System.Object)">
      <summary>Retrieves the view state for a specified object.</summary>
      <returns>The  <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains the view state.</returns>
      <param name="instance">The object whose view state is retrieved.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="instance" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Presentation.View.WorkflowViewStateService.RemoveViewState(System.Activities.Presentation.Model.ModelItem,System.String)">
      <summary>Removes the view state represented by the specified key and associated with the specified model item.</summary>
      <returns>true if the view state associated with the specified model item is found and removed; otherwise, false.</returns>
      <param name="modelItem">The workflow activity <see cref="T:System.Activities.Presentation.Model.ModelItem" /> associated with the current view state.</param>
      <param name="key">The <see cref="T:System.String" /> that identifies the view state item that is stored.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="modelItem" /> or the <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Presentation.View.WorkflowViewStateService.RetrieveAllViewState(System.Activities.Presentation.Model.ModelItem)">
      <summary>Retrieves the complete view state associated with a specified model item.</summary>
      <returns>The <see cref="T:System.Collections.Generic.Dictionary`2" /> that represents the view state.</returns>
      <param name="modelItem">The workflow activity <see cref="T:System.Activities.Presentation.Model.ModelItem" /> associated with the current view state.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="modelItem" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Presentation.View.WorkflowViewStateService.RetrieveViewState(System.Activities.Presentation.Model.ModelItem,System.String)">
      <summary>Retrieves the item that matches the specified key in the view state associated with a specified model item.</summary>
      <returns>The item that matches the specified key in the view state associated with a specified model item.</returns>
      <param name="modelItem">The workflow activity <see cref="T:System.Activities.Presentation.Model.ModelItem" /> associated with the current view state.</param>
      <param name="key">The key that identifies the view state item that is retrieved.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="modelItem" /> or the <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Presentation.View.WorkflowViewStateService.SetViewState(System.Object,System.Collections.Generic.Dictionary{System.String,System.Object})">
      <summary>Sets the view state on the parameter instance specified to the dictionary value that is specified.  </summary>
      <param name="instance">An object that represents the view state.</param>
      <param name="value">The dictionary value to set.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="instance" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Presentation.View.WorkflowViewStateService.StoreViewState(System.Activities.Presentation.Model.ModelItem,System.String,System.Object)">
      <summary>Stores the item represented by a specified key in the view state associated with a specified model item.</summary>
      <param name="modelItem">The workflow activity <see cref="T:System.Activities.Presentation.Model.ModelItem" /> associated with the current view state.</param>
      <param name="key">The <see cref="T:System.String" /> that identifies the view state item that is stored.</param>
      <param name="value">An <see cref="T:System.Object" /> to be stored.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="modelItem" /> or the <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Presentation.View.WorkflowViewStateService.StoreViewStateWithUndo(System.Activities.Presentation.Model.ModelItem,System.String,System.Object)">
      <summary>Records the current setting of the item represented by the specified key so that it is available for an undo operation and then stores the item represented by the specified key in the view state of the specified model item.</summary>
      <param name="modelItem">The workflow activity <see cref="T:System.Activities.Presentation.Model.ModelItem" /> associated with the current view state.</param>
      <param name="key">The <see cref="T:System.String" /> that identifies the view state item that is stored.</param>
      <param name="value">An <see cref="T:System.Object" /> to be stored.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="modelItem" /> or the <paramref name="key" /> is null.</exception>
    </member>
    <member name="E:System.Activities.Presentation.View.WorkflowViewStateService.UndoableViewStateChanged">
      <summary>An event that signals that a change has been made to the undoable view state of the control. </summary>
    </member>
    <member name="E:System.Activities.Presentation.View.WorkflowViewStateService.ViewStateChanged">
      <summary>An event that signals that a change has been made to the view state of the control.</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.WorkflowViewStateService.ViewStateName">
      <summary>Specifies the name of the state.</summary>
    </member>
    <member name="T:System.Activities.Presentation.View.OutlineView.HidePropertyInOutlineViewAttribute">
      <summary>Represents the attributes associated with hiding the property in outline view.</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.OutlineView.HidePropertyInOutlineViewAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Presentation.View.OutlineView.HidePropertyInOutlineViewAttribute" /> class.</summary>
    </member>
    <member name="T:System.Activities.Presentation.View.OutlineView.ShowInOutlineViewAttribute">
      <summary>Represents the attributes associated when displaying the presentation in outline view.</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.OutlineView.ShowInOutlineViewAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Presentation.View.OutlineView.ShowInOutlineViewAttribute" /> class.</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.OutlineView.ShowInOutlineViewAttribute.PromotedProperty">
      <summary>Gets or sets the promoted properties.</summary>
      <returns>The promoted properties.</returns>
    </member>
    <member name="T:System.Activities.Presentation.View.OutlineView.ShowPropertyInOutlineViewAsSiblingAttribute">
      <summary>Represents the attributes associated when displaying the presentation in outline view as sibling.</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.OutlineView.ShowPropertyInOutlineViewAsSiblingAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Presentation.View.OutlineView.ShowPropertyInOutlineViewAsSiblingAttribute" /> class.</summary>
    </member>
    <member name="T:System.Activities.Presentation.View.OutlineView.ShowPropertyInOutlineViewAttribute">
      <summary>Represents the attributes when showing the property in outline view.</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.OutlineView.ShowPropertyInOutlineViewAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Presentation.View.OutlineView.ShowPropertyInOutlineViewAttribute" /> class.</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.OutlineView.ShowPropertyInOutlineViewAttribute.ChildNodePrefix">
      <summary>Gets or sets the prefix for the child node.</summary>
      <returns>The prefix for the child node.</returns>
    </member>
    <member name="P:System.Activities.Presentation.View.OutlineView.ShowPropertyInOutlineViewAttribute.CurrentPropertyVisible">
      <summary>Gets or sets whether the current property value is visible.</summary>
      <returns>True if the current property value is visible; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Presentation.View.OutlineView.ShowPropertyInOutlineViewAttribute.DuplicatedChildNodesVisible">
      <summary>Gets or sets whether the duplicated child nodes are visible.</summary>
      <returns>True if the duplicated child nodes are visible; otherwise, false.</returns>
    </member>
    <member name="T:System.Activities.Presentation.ViewState.ViewStateData">
      <summary>This class acts as a surrogate for holding view state properties (VirtualizedContainerService.HintSize and WorkflowViewStateService.ViewState) as attached properties when view state separation is done.</summary>
    </member>
    <member name="M:System.Activities.Presentation.ViewState.ViewStateData.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Presentation.ViewState.ViewStateData" /> class.</summary>
    </member>
    <member name="P:System.Activities.Presentation.ViewState.ViewStateData.Id">
      <summary> Gets or sets an identifier that associates an object of this class with an activity that has matching WorkflowViewState.RefId value.</summary>
      <returns>The identifier that associates an object of this class with an activity that has matching WorkflowViewState.RefId value.</returns>
    </member>
    <member name="T:System.Activities.Presentation.ViewState.ViewStateManager">
      <summary>This class is used to hold ViewStateData for all activities in the workflow as an attached property on the root of the XAML document.</summary>
    </member>
    <member name="M:System.Activities.Presentation.ViewState.ViewStateManager.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Presentation.ViewState.ViewStateManager" /> class.</summary>
    </member>
    <member name="P:System.Activities.Presentation.ViewState.ViewStateManager.ViewStateData">
      <summary>Gets a collection of ViewStateData for all activities in the workflow as an attached property on the root of the XAML document.</summary>
      <returns>The collection of ViewStateData for all activities in the workflow as an attached property on the root of the XAML document.</returns>
    </member>
    <member name="T:System.Activities.Presentation.ViewState.WorkflowViewState">
      <summary>Class defining ViewStateManager and ViewStateId attached properties.</summary>
    </member>
    <member name="M:System.Activities.Presentation.ViewState.WorkflowViewState.GetIdRef(System.Object)">
      <summary>Specifies a Get RefId attached property value from an object if set.</summary>
      <returns>RefId value if set; null otherwise.</returns>
      <param name="instance">Instance object to retrieve RefId attached property from an object if set.</param>
    </member>
    <member name="M:System.Activities.Presentation.ViewState.WorkflowViewState.GetViewStateManager(System.Object)">
      <summary>Specifies a Get ViewStateManager attached property value from an object if set.</summary>
      <returns>ViewStateManager object if set; null otherwise.</returns>
      <param name="instance">Instance object to retrieve ViewStateManager attached property from an object if set.</param>
    </member>
    <member name="F:System.Activities.Presentation.ViewState.WorkflowViewState.IdRefProperty">
      <summary>Attachable property for IdRef.</summary>
    </member>
    <member name="M:System.Activities.Presentation.ViewState.WorkflowViewState.SetIdRef(System.Object,System.String)">
      <summary>Specifies a Set IdRef as an attached property of an object.</summary>
      <param name="instance">Instance object to attach IdRef property of an object.</param>
      <param name="idRef">RefId value to attach.</param>
    </member>
    <member name="M:System.Activities.Presentation.ViewState.WorkflowViewState.SetViewStateManager(System.Object,System.Activities.Presentation.ViewState.ViewStateManager)">
      <summary>Specifies a Set ViewStateManager as an attached property on an object.</summary>
      <param name="instance">Instance object to attach ViewStateManager property on.</param>
      <param name="viewStateManager">ViewStateManager object to attach.</param>
    </member>
    <member name="F:System.Activities.Presentation.ViewState.WorkflowViewState.ViewStateManagerProperty">
      <summary>Attachable property for ViewStateManager.</summary>
    </member>
    <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
      <summary>Provides infrastructure support for XAML markup compilers and developer tools.</summary>
    </member>
    <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.#ctor">
      <summary>Initializes a new instance of the <see cref="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper" /> class.</summary>
    </member>
  </members>
</doc>