<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>mscorlib</name>
  </assembly>
  <members>
    <member name="T:System.Action">
      <summary>Encapsulates a method that has no parameters and does not return a value.</summary>
    </member>
    <member name="T:System.Action`1">
      <summary>Encapsulates a method that has a single parameter and does not return a value.</summary>
      <param name="obj">The parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T">The type of the parameter of the method that this delegate encapsulates.</typeparam>
    </member>
    <member name="T:System.Action`2">
      <summary>Encapsulates a method that has two parameters and does not return a value.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
    </member>
    <member name="T:System.Action`3">
      <summary>Encapsulates a method that has three parameters and does not return a value.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
    </member>
    <member name="T:System.Action`4">
      <summary>Encapsulates a method that has four parameters and does not return a value.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
    </member>
    <member name="T:System.Action`5">
      <summary>Encapsulates a method that has five parameters and does not return a value.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
    </member>
    <member name="T:System.Action`6">
      <summary>Encapsulates a method that has six parameters and does not return a value.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
    </member>
    <member name="T:System.Action`7">
      <summary>Encapsulates a method that has seven parameters and does not return a value.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
    </member>
    <member name="T:System.Action`8">
      <summary>Encapsulates a method that has eight parameters and does not return a value.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
    </member>
    <member name="T:System.Activator">
      <summary>Contains methods to create types of objects locally or remotely, or obtain references to existing remote objects. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Activator.CreateInstance(System.String,System.String)">
      <summary>Creates an instance of the type whose name is specified, using the named assembly and parameterless constructor.</summary>
      <param name="assemblyName">The name of the assembly where the type named <paramref name="typeName" /> is sought. If <paramref name="assemblyName" /> is <see langword="null" />, the executing assembly is searched.</param>
      <param name="typeName">The fully qualified name of the type to create an instance of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> is <see langword="null" />.</exception>
      <exception cref="T:System.MissingMethodException">No matching public constructor was found.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="typename" /> was not found in <paramref name="assemblyName" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyName" /> was not found.</exception>
      <exception cref="T:System.MethodAccessException">The caller does not have permission to call this constructor.</exception>
      <exception cref="T:System.MemberAccessException">You cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">The constructor, which was invoked through reflection, threw an exception.</exception>
      <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException">The COM type was not obtained through <see cref="Overload:System.Type.GetTypeFromProgID" /> or <see cref="Overload:System.Type.GetTypeFromCLSID" />.</exception>
      <exception cref="T:System.NotSupportedException">Creation of <see cref="T:System.TypedReference" />, <see cref="T:System.ArgIterator" />, <see cref="T:System.Void" />, and <see cref="T:System.RuntimeArgumentHandle" /> types, or arrays of those types, is not supported.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" /> is not a valid assembly.  
  
 -or-  
  
 The common language runtime (CLR) version 2.0 or later is currently loaded, and <paramref name="assemblyName" /> was compiled for a version of the CLR that is later than the currently loaded version. Note that the .NET Framework versions 2.0, 3.0, and 3.5 all use CLR version 2.0.</exception>
      <exception cref="T:System.IO.FileLoadException">An assembly or module was loaded twice with two different evidences.  
  
 -or-  
  
 The assembly name or code base is invalid.</exception>
      <returns>A handle that must be unwrapped to access the newly created instance.</returns>
    </member>
    <member name="M:System.Activator.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
      <summary>Creates an instance of the type whose name is specified, using the named assembly and the constructor that best matches the specified parameters.</summary>
      <param name="assemblyName">The name of the assembly where the type named <paramref name="typeName" /> is sought. If <paramref name="assemblyName" /> is <see langword="null" />, the executing assembly is searched.</param>
      <param name="typeName">The fully qualified name of the type to create an instance of.</param>
      <param name="ignoreCase">
        <see langword="true" /> to specify that the search for <paramref name="typeName" /> is not case-sensitive; <see langword="false" /> to specify that the search is case-sensitive.</param>
      <param name="bindingAttr">A combination of zero or more bit flags that affect the search for the <paramref name="typeName" /> constructor. If <paramref name="bindingAttr" /> is zero, a case-sensitive search for public constructors is conducted.</param>
      <param name="binder">An object that uses <paramref name="bindingAttr" /> and <paramref name="args" /> to seek and identify the <paramref name="typeName" /> constructor. If <paramref name="binder" /> is <see langword="null" />, the default binder is used.</param>
      <param name="args">An array of arguments that match in number, order, and type the parameters of the constructor to invoke. If <paramref name="args" /> is an empty array or <see langword="null" />, the constructor that takes no parameters (the parameterless constructor) is invoked.</param>
      <param name="culture">Culture-specific information that governs the coercion of <paramref name="args" /> to the formal types declared for the <paramref name="typeName" /> constructor. If <paramref name="culture" /> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</param>
      <param name="activationAttributes">An array of one or more attributes that can participate in activation. This is typically an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.  
  
 This parameter is related to client-activated objects. Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development. Distributed applications should instead use Windows Communication Foundation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> is <see langword="null" />.</exception>
      <exception cref="T:System.MissingMethodException">No matching constructor was found.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="typename" /> was not found in <paramref name="assemblyName" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyName" /> was not found.</exception>
      <exception cref="T:System.MethodAccessException">The caller does not have permission to call this constructor.</exception>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">The constructor, which was invoked through reflection, threw an exception.</exception>
      <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException">The COM type was not obtained through <see cref="Overload:System.Type.GetTypeFromProgID" /> or <see cref="Overload:System.Type.GetTypeFromCLSID" />.</exception>
      <exception cref="T:System.NotSupportedException">Creation of <see cref="T:System.TypedReference" />, <see cref="T:System.ArgIterator" />, <see cref="T:System.Void" />, and <see cref="T:System.RuntimeArgumentHandle" /> types, or arrays of those types, is not supported.  
  
 -or-  
  
 <paramref name="activationAttributes" /> is not an empty array, and the type being created does not derive from <see cref="T:System.MarshalByRefObject" />.  
  
 -or-  
  
 The constructor that best matches <paramref name="args" /> has <see langword="varargs" /> arguments.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" /> is not a valid assembly.  
  
 -or-  
  
 The common language runtime (CLR) version 2.0 or later is currently loaded, and <paramref name="assemblyName" /> was compiled for a version of the CLR that is later than the currently loaded version. Note that the .NET Framework versions 2.0, 3.0, and 3.5 all use CLR version 2.0.</exception>
      <exception cref="T:System.IO.FileLoadException">An assembly or module was loaded twice with two different evidences.  
  
 -or-  
  
 The assembly name or code base is invalid.</exception>
      <returns>A handle that must be unwrapped to access the newly created instance.</returns>
    </member>
    <member name="M:System.Activator.CreateInstance(System.String,System.String,System.Object[])">
      <summary>Creates an instance of the type whose name is specified, using the named assembly and parameterless constructor.</summary>
      <param name="assemblyName">The name of the assembly where the type named <paramref name="typeName" /> is sought. If <paramref name="assemblyName" /> is <see langword="null" />, the executing assembly is searched.</param>
      <param name="typeName">The fully qualified name of the type to create an instance of.</param>
      <param name="activationAttributes">An array of one or more attributes that can participate in activation. This is typically an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.  
  
 This parameter is related to client-activated objects. Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development. Distributed applications should instead use Windows Communication Foundation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> is <see langword="null" />.</exception>
      <exception cref="T:System.MissingMethodException">No matching public constructor was found.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="typename" /> was not found in <paramref name="assemblyName" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyName" /> was not found.</exception>
      <exception cref="T:System.MethodAccessException">The caller does not have permission to call this constructor.</exception>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</exception>
      <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException">The COM type was not obtained through <see cref="Overload:System.Type.GetTypeFromProgID" /> or <see cref="Overload:System.Type.GetTypeFromCLSID" />.</exception>
      <exception cref="T:System.NotSupportedException">Creation of <see cref="T:System.TypedReference" />, <see cref="T:System.ArgIterator" />, <see cref="T:System.Void" />, and <see cref="T:System.RuntimeArgumentHandle" /> types, or arrays of those types, is not supported.  
  
 -or-  
  
 <paramref name="activationAttributes" /> is not an empty array, and the type being created does not derive from <see cref="T:System.MarshalByRefObject" />.  
  
 -or-  
  
 <paramref name="activationAttributes" /> is not a <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" />  
  
 array.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" /> is not a valid assembly.  
  
 -or-  
  
 The common language runtime (CLR) version 2.0 or later is currently loaded, and <paramref name="assemblyName" /> was compiled for a version of the CLR that is later than the currently loaded version. Note that the .NET Framework versions 2.0, 3.0, and 3.5 all use CLR version 2.0.</exception>
      <exception cref="T:System.IO.FileLoadException">An assembly or module was loaded twice with two different evidences.  
  
 -or-  
  
 The assembly name or code base is invalid.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">An error occurred when attempting remote activation in a target specified in <paramref name="activationAttributes" />.</exception>
      <returns>A handle that must be unwrapped to access the newly created instance.</returns>
    </member>
    <member name="M:System.Activator.CreateInstance(System.Type)">
      <summary>Creates an instance of the specified type using that type's parameterless constructor.</summary>
      <param name="type">The type of object to create.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> is not a <see langword="RuntimeType" />.  
  
 -or-  
  
 <paramref name="type" /> is an open generic type (that is, the <see cref="P:System.Type.ContainsGenericParameters" /> property returns <see langword="true" />).</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="type" /> cannot be a <see cref="T:System.Reflection.Emit.TypeBuilder" />.  
  
 -or-  
  
 Creation of <see cref="T:System.TypedReference" />, <see cref="T:System.ArgIterator" />, <see cref="T:System.Void" />, and <see cref="T:System.RuntimeArgumentHandle" /> types, or arrays of those types, is not supported.  
  
 -or-  
  
 The assembly that contains <paramref name="type" /> is a dynamic assembly that was created with <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Save" />.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">The constructor being called throws an exception.</exception>
      <exception cref="T:System.MethodAccessException">
        <block subset="none" type="note">
          <para>  
 In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.MemberAccessException" />, instead.</para>
        </block>  
  
 The caller does not have permission to call this constructor.</exception>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</exception>
      <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException">The COM type was not obtained through <see cref="Overload:System.Type.GetTypeFromProgID" /> or <see cref="Overload:System.Type.GetTypeFromCLSID" />.</exception>
      <exception cref="T:System.MissingMethodException">
        <block subset="none" type="note">
          <para>  
 In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.MissingMemberException" />, instead.</para>
        </block>  
  
 No matching public constructor was found.</exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">
        <paramref name="type" /> is a COM object but the class identifier used to obtain the type is invalid, or the identified class is not registered.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="type" /> is not a valid type.</exception>
      <returns>A reference to the newly created object.</returns>
    </member>
    <member name="M:System.Activator.CreateInstance(System.Type,System.Boolean)">
      <summary>Creates an instance of the specified type using that type's parameterless constructor.</summary>
      <param name="type">The type of object to create.</param>
      <param name="nonPublic">
        <see langword="true" /> if a public or nonpublic parameterless constructor can match; <see langword="false" /> if only a public parameterless constructor can match.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> is not a <see langword="RuntimeType" />.  
  
 -or-  
  
 <paramref name="type" /> is an open generic type (that is, the <see cref="P:System.Type.ContainsGenericParameters" /> property returns <see langword="true" />).</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="type" /> cannot be a <see cref="T:System.Reflection.Emit.TypeBuilder" />.  
  
 -or-  
  
 Creation of <see cref="T:System.TypedReference" />, <see cref="T:System.ArgIterator" />, <see cref="T:System.Void" />, and <see cref="T:System.RuntimeArgumentHandle" /> types, or arrays of those types, is not supported.  
  
 -or-  
  
 The assembly that contains <paramref name="type" /> is a dynamic assembly that was created with <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Save" />.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">The constructor being called throws an exception.</exception>
      <exception cref="T:System.MethodAccessException">The caller does not have permission to call this constructor.</exception>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</exception>
      <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException">The COM type was not obtained through <see cref="Overload:System.Type.GetTypeFromProgID" /> or <see cref="Overload:System.Type.GetTypeFromCLSID" />.</exception>
      <exception cref="T:System.MissingMethodException">No matching public constructor was found.</exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">
        <paramref name="type" /> is a COM object but the class identifier used to obtain the type is invalid, or the identified class is not registered.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="type" /> is not a valid type.</exception>
      <returns>A reference to the newly created object.</returns>
    </member>
    <member name="M:System.Activator.CreateInstance(System.Type,System.Object[])">
      <summary>Creates an instance of the specified type using the constructor that best matches the specified parameters.</summary>
      <param name="type">The type of object to create.</param>
      <param name="args">An array of arguments that match in number, order, and type the parameters of the constructor to invoke. If <paramref name="args" /> is an empty array or <see langword="null" />, the constructor that takes no parameters (the parameterless constructor) is invoked.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> is not a <see langword="RuntimeType" />.  
  
 -or-  
  
 <paramref name="type" /> is an open generic type (that is, the <see cref="P:System.Type.ContainsGenericParameters" /> property returns <see langword="true" />).</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="type" /> cannot be a <see cref="T:System.Reflection.Emit.TypeBuilder" />.  
  
 -or-  
  
 Creation of <see cref="T:System.TypedReference" />, <see cref="T:System.ArgIterator" />, <see cref="T:System.Void" />, and <see cref="T:System.RuntimeArgumentHandle" /> types, or arrays of those types, is not supported.  
  
 -or-  
  
 The assembly that contains <paramref name="type" /> is a dynamic assembly that was created with <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Save" />.  
  
 -or-  
  
 The constructor that best matches <paramref name="args" /> has <see langword="varargs" /> arguments.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">The constructor being called throws an exception.</exception>
      <exception cref="T:System.MethodAccessException">
        <block subset="none" type="note">
          <para>  
 In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.MemberAccessException" />, instead.</para>
        </block>  
  
 The caller does not have permission to call this constructor.</exception>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</exception>
      <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException">The COM type was not obtained through <see cref="Overload:System.Type.GetTypeFromProgID" /> or <see cref="Overload:System.Type.GetTypeFromCLSID" />.</exception>
      <exception cref="T:System.MissingMethodException">
        <block subset="none" type="note">
          <para>  
 In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.MissingMemberException" />, instead.</para>
        </block>  
  
 No matching public constructor was found.</exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">
        <paramref name="type" /> is a COM object but the class identifier used to obtain the type is invalid, or the identified class is not registered.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="type" /> is not a valid type.</exception>
      <returns>A reference to the newly created object.</returns>
    </member>
    <member name="M:System.Activator.CreateInstance(System.Type,System.Object[],System.Object[])">
      <summary>Creates an instance of the specified type using the constructor that best matches the specified parameters.</summary>
      <param name="type">The type of object to create.</param>
      <param name="args">An array of arguments that match in number, order, and type the parameters of the constructor to invoke. If <paramref name="args" /> is an empty array or <see langword="null" />, the constructor that takes no parameters (the parameterless constructor) is invoked.</param>
      <param name="activationAttributes">An array of one or more attributes that can participate in activation. This is typically an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.  
  
 This parameter is related to client-activated objects. Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development. Distributed applications should instead use Windows Communication Foundation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> is not a <see langword="RuntimeType" />.  
  
 -or-  
  
 <paramref name="type" /> is an open generic type (that is, the <see cref="P:System.Type.ContainsGenericParameters" /> property returns <see langword="true" />).</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="type" /> cannot be a <see cref="T:System.Reflection.Emit.TypeBuilder" />.  
  
 -or-  
  
 Creation of <see cref="T:System.TypedReference" />, <see cref="T:System.ArgIterator" />, <see cref="T:System.Void" />, and <see cref="T:System.RuntimeArgumentHandle" /> types, or arrays of those types, is not supported.  
  
 -or-  
  
 <paramref name="activationAttributes" /> is not an empty array, and the type being created does not derive from <see cref="T:System.MarshalByRefObject" />.  
  
 -or-  
  
 The assembly that contains <paramref name="type" /> is a dynamic assembly that was created with <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Save" />.  
  
 -or-  
  
 The constructor that best matches <paramref name="args" /> has <see langword="varargs" /> arguments.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">The constructor being called throws an exception.</exception>
      <exception cref="T:System.MethodAccessException">The caller does not have permission to call this constructor.</exception>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</exception>
      <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException">The COM type was not obtained through <see cref="Overload:System.Type.GetTypeFromProgID" /> or <see cref="Overload:System.Type.GetTypeFromCLSID" />.</exception>
      <exception cref="T:System.MissingMethodException">No matching public constructor was found.</exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">
        <paramref name="type" /> is a COM object but the class identifier used to obtain the type is invalid, or the identified class is not registered.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="type" /> is not a valid type.</exception>
      <returns>A reference to the newly created object.</returns>
    </member>
    <member name="M:System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>Creates an instance of the specified type using the constructor that best matches the specified parameters.</summary>
      <param name="type">The type of object to create.</param>
      <param name="bindingAttr">A combination of zero or more bit flags that affect the search for the <paramref name="type" /> constructor. If <paramref name="bindingAttr" /> is zero, a case-sensitive search for public constructors is conducted.</param>
      <param name="binder">An object that uses <paramref name="bindingAttr" /> and <paramref name="args" /> to seek and identify the <paramref name="type" /> constructor. If <paramref name="binder" /> is <see langword="null" />, the default binder is used.</param>
      <param name="args">An array of arguments that match in number, order, and type the parameters of the constructor to invoke. If <paramref name="args" /> is an empty array or <see langword="null" />, the constructor that takes no parameters (the parameterless constructor) is invoked.</param>
      <param name="culture">Culture-specific information that governs the coercion of <paramref name="args" /> to the formal types declared for the <paramref name="type" /> constructor. If <paramref name="culture" /> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> is not a <see langword="RuntimeType" />.  
  
 -or-  
  
 <paramref name="type" /> is an open generic type (that is, the <see cref="P:System.Type.ContainsGenericParameters" /> property returns <see langword="true" />).</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="type" /> cannot be a <see cref="T:System.Reflection.Emit.TypeBuilder" />.  
  
 -or-  
  
 Creation of <see cref="T:System.TypedReference" />, <see cref="T:System.ArgIterator" />, <see cref="T:System.Void" />, and <see cref="T:System.RuntimeArgumentHandle" /> types, or arrays of those types, is not supported.  
  
 -or-  
  
 The assembly that contains <paramref name="type" /> is a dynamic assembly that was created with <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Save" />.  
  
 -or-  
  
 The constructor that best matches <paramref name="args" /> has <see langword="varargs" /> arguments.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">The constructor being called throws an exception.</exception>
      <exception cref="T:System.MethodAccessException">The caller does not have permission to call this constructor.</exception>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</exception>
      <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException">The COM type was not obtained through <see cref="Overload:System.Type.GetTypeFromProgID" /> or <see cref="Overload:System.Type.GetTypeFromCLSID" />.</exception>
      <exception cref="T:System.MissingMethodException">No matching constructor was found.</exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">
        <paramref name="type" /> is a COM object but the class identifier used to obtain the type is invalid, or the identified class is not registered.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="type" /> is not a valid type.</exception>
      <returns>A reference to the newly created object.</returns>
    </member>
    <member name="M:System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
      <summary>Creates an instance of the specified type using the constructor that best matches the specified parameters.</summary>
      <param name="type">The type of object to create.</param>
      <param name="bindingAttr">A combination of zero or more bit flags that affect the search for the <paramref name="type" /> constructor. If <paramref name="bindingAttr" /> is zero, a case-sensitive search for public constructors is conducted.</param>
      <param name="binder">An object that uses <paramref name="bindingAttr" /> and <paramref name="args" /> to seek and identify the <paramref name="type" /> constructor. If <paramref name="binder" /> is <see langword="null" />, the default binder is used.</param>
      <param name="args">An array of arguments that match in number, order, and type the parameters of the constructor to invoke. If <paramref name="args" /> is an empty array or <see langword="null" />, the constructor that takes no parameters (the parameterless constructor) is invoked.</param>
      <param name="culture">Culture-specific information that governs the coercion of <paramref name="args" /> to the formal types declared for the <paramref name="type" /> constructor. If <paramref name="culture" /> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</param>
      <param name="activationAttributes">An array of one or more attributes that can participate in activation. This is typically an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.  
  
 This parameter is related to client-activated objects. Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development. Distributed applications should instead use Windows Communication Foundation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> is not a <see langword="RuntimeType" />.  
  
 -or-  
  
 <paramref name="type" /> is an open generic type (that is, the <see cref="P:System.Type.ContainsGenericParameters" /> property returns <see langword="true" />).</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="type" /> cannot be a <see cref="T:System.Reflection.Emit.TypeBuilder" />.  
  
 -or-  
  
 Creation of <see cref="T:System.TypedReference" />, <see cref="T:System.ArgIterator" />, <see cref="T:System.Void" />, and <see cref="T:System.RuntimeArgumentHandle" /> types, or arrays of those types, is not supported.  
  
 -or-  
  
 <paramref name="activationAttributes" /> is not an empty array, and the type being created does not derive from <see cref="T:System.MarshalByRefObject" />.  
  
 -or-  
  
 The assembly that contains <paramref name="type" /> is a dynamic assembly that was created with <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Save" />.  
  
 -or-  
  
 The constructor that best matches <paramref name="args" /> has <see langword="varargs" /> arguments.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">The constructor being called throws an exception.</exception>
      <exception cref="T:System.MethodAccessException">The caller does not have permission to call this constructor.</exception>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</exception>
      <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException">The COM type was not obtained through <see cref="Overload:System.Type.GetTypeFromProgID" /> or <see cref="Overload:System.Type.GetTypeFromCLSID" />.</exception>
      <exception cref="T:System.MissingMethodException">No matching constructor was found.</exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">
        <paramref name="type" /> is a COM object but the class identifier used to obtain the type is invalid, or the identified class is not registered.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="type" /> is not a valid type.</exception>
      <returns>A reference to the newly created object.</returns>
    </member>
    <member name="M:System.Activator.CreateInstance``1">
      <summary>Creates an instance of the type designated by the specified generic type parameter, using the parameterless constructor.</summary>
      <typeparam name="T">The type to create.</typeparam>
      <exception cref="T:System.MissingMethodException">
        <block subset="none" type="note">
          <para>  
 In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.MissingMemberException" />, instead.</para>
        </block>  
  
 Cannot create an instance of an abstract class, or the type that is specified for <typeparamref name="T" /> does not have a parameterless constructor.</exception>
      <returns>A reference to the newly created object.</returns>
    </member>
    <member name="M:System.Activator.CreateInstanceFrom(System.String,System.String)">
      <summary>Creates an instance of the type whose name is specified, using the named assembly file and parameterless constructor.</summary>
      <param name="assemblyFile">The name of a file that contains an assembly where the type named <paramref name="typeName" /> is sought.</param>
      <param name="typeName">The name of the type to create an instance of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> is <see langword="null" />.</exception>
      <exception cref="T:System.MissingMethodException">No matching public constructor was found.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="typename" /> was not found in <paramref name="assemblyFile" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyFile" /> was not found.</exception>
      <exception cref="T:System.MethodAccessException">The caller does not have permission to call this constructor.</exception>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">The constructor, which was invoked through reflection, threw an exception.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does have the required <see cref="T:System.Security.Permissions.FileIOPermission" />.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> is not a valid assembly.  
  
 -or-  
  
 The common language runtime (CLR) version 2.0 or later is currently loaded, and <paramref name="assemblyName" /> was compiled for a version of the CLR that is later than the currently loaded version. Note that the .NET Framework versions 2.0, 3.0, and 3.5 all use CLR version 2.0.</exception>
      <returns>A handle that must be unwrapped to access the newly created instance.</returns>
    </member>
    <member name="M:System.Activator.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
      <summary>Creates an instance of the type whose name is specified, using the named assembly file and the constructor that best matches the specified parameters.</summary>
      <param name="assemblyFile">The name of a file that contains an assembly where the type named <paramref name="typeName" /> is sought.</param>
      <param name="typeName">The name of the type to create an instance of.</param>
      <param name="ignoreCase">
        <see langword="true" /> to specify that the search for <paramref name="typeName" /> is not case-sensitive; <see langword="false" /> to specify that the search is case-sensitive.</param>
      <param name="bindingAttr">A combination of zero or more bit flags that affect the search for the <paramref name="typeName" /> constructor. If <paramref name="bindingAttr" /> is zero, a case-sensitive search for public constructors is conducted.</param>
      <param name="binder">An object that uses <paramref name="bindingAttr" /> and <paramref name="args" /> to seek and identify the <paramref name="typeName" /> constructor. If <paramref name="binder" /> is <see langword="null" />, the default binder is used.</param>
      <param name="args">An array of arguments that match in number, order, and type the parameters of the constructor to invoke. If <paramref name="args" /> is an empty array or <see langword="null" />, the constructor that takes no parameters (the parameterless constructor) is invoked.</param>
      <param name="culture">Culture-specific information that governs the coercion of <paramref name="args" /> to the formal types declared for the <paramref name="typeName" /> constructor. If <paramref name="culture" /> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</param>
      <param name="activationAttributes">An array of one or more attributes that can participate in activation. This is typically an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.  
  
 This parameter is related to client-activated objects. Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development. Distributed applications should instead use Windows Communication Foundation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> is <see langword="null" />.</exception>
      <exception cref="T:System.MissingMethodException">No matching constructor was found.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="typename" /> was not found in <paramref name="assemblyFile" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyFile" /> was not found.</exception>
      <exception cref="T:System.MethodAccessException">The caller does not have permission to call this constructor.</exception>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">The constructor, which was invoked through reflection, threw an exception.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required <see cref="T:System.Security.Permissions.FileIOPermission" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="activationAttributes" /> is not an empty array, and the type being created does not derive from <see cref="T:System.MarshalByRefObject" />.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> is not a valid assembly.  
  
 -or-  
  
 The common language runtime (CLR) version 2.0 or later is currently loaded, and <paramref name="assemblyName" /> was compiled for a version of the CLR that is later than the currently loaded version. Note that the .NET Framework versions 2.0, 3.0, and 3.5 all use CLR version 2.0.</exception>
      <returns>A handle that must be unwrapped to access the newly created instance.</returns>
    </member>
    <member name="M:System.Activator.CreateInstanceFrom(System.String,System.String,System.Object[])">
      <summary>Creates an instance of the type whose name is specified, using the named assembly file and parameterless constructor.</summary>
      <param name="assemblyFile">The name of a file that contains an assembly where the type named <paramref name="typeName" /> is sought.</param>
      <param name="typeName">The name of the type to create an instance of.</param>
      <param name="activationAttributes">An array of one or more attributes that can participate in activation. This is typically an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.  
  
 This parameter is related to client-activated objects. Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development. Distributed applications should instead use Windows Communication Foundation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> is <see langword="null" />.</exception>
      <exception cref="T:System.MissingMethodException">No matching public constructor was found.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="typename" /> was not found in <paramref name="assemblyFile" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyFile" /> was not found.</exception>
      <exception cref="T:System.MethodAccessException">The caller does not have permission to call this constructor.</exception>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">The constructor, which was invoked through reflection, threw an exception.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="activationAttributes" /> is not an empty array, and the type being created does not derive from <see cref="T:System.MarshalByRefObject" />.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does have the required <see cref="T:System.Security.Permissions.FileIOPermission" />.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> is not a valid assembly.  
  
 -or-  
  
 The common language runtime (CLR) version 2.0 or later is currently loaded, and <paramref name="assemblyName" /> was compiled for a version of the CLR that is later than the currently loaded version. Note that the .NET Framework versions 2.0, 3.0, and 3.5 all use CLR version 2.0.</exception>
      <returns>A handle that must be unwrapped to access the newly created instance.</returns>
    </member>
    <member name="T:System.ArgumentException">
      <summary>The exception that is thrown when one of the arguments provided to a method is not valid.</summary>
    </member>
    <member name="M:System.ArgumentException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ArgumentException" /> class.</summary>
    </member>
    <member name="M:System.ArgumentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.ArgumentException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.ArgumentException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ArgumentException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.ArgumentException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ArgumentException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.ArgumentException.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ArgumentException" /> class with a specified error message and the name of the parameter that causes this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="paramName">The name of the parameter that caused the current exception.</param>
    </member>
    <member name="M:System.ArgumentException.#ctor(System.String,System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ArgumentException" /> class with a specified error message, the parameter name, and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="paramName">The name of the parameter that caused the current exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.ArgumentException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the parameter name and additional exception information.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> object is a null reference (<see langword="Nothing" /> in Visual Basic).</exception>
    </member>
    <member name="P:System.ArgumentException.Message">
      <summary>Gets the error message and the parameter name, or only the error message if no parameter name is set.</summary>
      <returns>A text string describing the details of the exception. The value of this property takes one of two forms:  
  
 <list type="table"><listheader><term> Condition</term><description> Value</description></listheader><item><term> The <paramref name="paramName" /> is a null reference (<see langword="Nothing" /> in Visual Basic) or of zero length.</term><description> The <paramref name="message" /> string passed to the constructor.</description></item><item><term> The <paramref name="paramName" /> is not null reference (<see langword="Nothing" /> in Visual Basic) and it has a length greater than zero.</term><description> The <paramref name="message" /> string appended with the name of the invalid parameter.</description></item></list></returns>
    </member>
    <member name="P:System.ArgumentException.ParamName">
      <summary>Gets the name of the parameter that causes this exception.</summary>
      <returns>The parameter name.</returns>
    </member>
    <member name="T:System.ArgumentNullException">
      <summary>The exception that is thrown when a null reference (<see langword="Nothing" /> in Visual Basic) is passed to a method that does not accept it as a valid argument.</summary>
    </member>
    <member name="M:System.ArgumentNullException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ArgumentNullException" /> class.</summary>
    </member>
    <member name="M:System.ArgumentNullException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.ArgumentNullException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">An object that describes the source or destination of the serialized data.</param>
    </member>
    <member name="M:System.ArgumentNullException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ArgumentNullException" /> class with the name of the parameter that causes this exception.</summary>
      <param name="paramName">The name of the parameter that caused the exception.</param>
    </member>
    <member name="M:System.ArgumentNullException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ArgumentNullException" /> class with a specified error message and the exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for this exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:System.ArgumentNullException.#ctor(System.String,System.String)">
      <summary>Initializes an instance of the <see cref="T:System.ArgumentNullException" /> class with a specified error message and the name of the parameter that causes this exception.</summary>
      <param name="paramName">The name of the parameter that caused the exception.</param>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="T:System.ArgumentOutOfRangeException">
      <summary>The exception that is thrown when the value of an argument is outside the allowable range of values as defined by the invoked method.</summary>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ArgumentOutOfRangeException" /> class.</summary>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.ArgumentOutOfRangeException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">An object that describes the source or destination of the serialized data.</param>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ArgumentOutOfRangeException" /> class with the name of the parameter that causes this exception.</summary>
      <param name="paramName">The name of the parameter that causes this exception.</param>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ArgumentOutOfRangeException" /> class with a specified error message and the exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for this exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.Object,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ArgumentOutOfRangeException" /> class with the parameter name, the value of the argument, and a specified error message.</summary>
      <param name="paramName">The name of the parameter that caused the exception.</param>
      <param name="actualValue">The value of the argument that causes this exception.</param>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ArgumentOutOfRangeException" /> class with the name of the parameter that causes this exception and a specified error message.</summary>
      <param name="paramName">The name of the parameter that caused the exception.</param>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the invalid argument value and additional exception information.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">An object that describes the source or destination of the serialized data.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> object is <see langword="null" />.</exception>
    </member>
    <member name="P:System.ArgumentOutOfRangeException.ActualValue">
      <summary>Gets the argument value that causes this exception.</summary>
      <returns>An <see langword="Object" /> that contains the value of the parameter that caused the current <see cref="T:System.Exception" />.</returns>
    </member>
    <member name="P:System.ArgumentOutOfRangeException.Message">
      <summary>Gets the error message and the string representation of the invalid argument value, or only the error message if the argument value is null.</summary>
      <returns>The text message for this exception. The value of this property takes one of two forms, as follows.  
  
 <list type="table"><listheader><term> Condition</term><description> Value</description></listheader><item><term> The <paramref name="actualValue" /> is <see langword="null" />.</term><description> The <paramref name="message" /> string passed to the constructor.</description></item><item><term> The <paramref name="actualValue" /> is not <see langword="null" />.</term><description> The <paramref name="message" /> string appended with the string representation of the invalid argument value.</description></item></list></returns>
    </member>
    <member name="T:System.ArithmeticException">
      <summary>The exception that is thrown for errors in an arithmetic, casting, or conversion operation.</summary>
    </member>
    <member name="M:System.ArithmeticException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ArithmeticException" /> class.</summary>
    </member>
    <member name="M:System.ArithmeticException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.ArithmeticException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.ArithmeticException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ArithmeticException" /> class with a specified error message.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error.</param>
    </member>
    <member name="M:System.ArithmeticException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ArithmeticException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.Array">
      <summary>Provides methods for creating, manipulating, searching, and sorting arrays, thereby serving as the base class for all arrays in the common language runtime.</summary>
    </member>
    <member name="M:System.Array.AsReadOnly``1(``0[])">
      <summary>Returns a read-only wrapper for the specified array.</summary>
      <param name="array">The one-dimensional, zero-based array to wrap in a read-only <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> wrapper.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <returns>A read-only <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> wrapper for the specified array.</returns>
    </member>
    <member name="M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)">
      <summary>Searches a range of elements in a one-dimensional sorted array for a value, using the <see cref="T:System.IComparable" /> interface implemented by each element of the array and by the specified value.</summary>
      <param name="array">The sorted one-dimensional <see cref="T:System.Array" /> to search.</param>
      <param name="index">The starting index of the range to search.</param>
      <param name="length">The length of the range to search.</param>
      <param name="value">The object to search for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> is multidimensional.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than the lower bound of <paramref name="array" />.  
  
 -or-  
  
 <paramref name="length" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in <paramref name="array" />.  
  
 -or-  
  
 <paramref name="value" /> is of a type that is not compatible with the elements of <paramref name="array" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> does not implement the <see cref="T:System.IComparable" /> interface, and the search encounters an element that does not implement the <see cref="T:System.IComparable" /> interface.</exception>
      <returns>The index of the specified <paramref name="value" /> in the specified <paramref name="array" />, if <paramref name="value" /> is found; otherwise, a negative number. If <paramref name="value" /> is not found and <paramref name="value" /> is less than one or more elements in <paramref name="array" />, the negative number returned is the bitwise complement of the index of the first element that is larger than <paramref name="value" />. If <paramref name="value" /> is not found and <paramref name="value" /> is greater than all elements in <paramref name="array" />, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <paramref name="array" />, the return value can be incorrect and a negative number could be returned, even if <paramref name="value" /> is present in <paramref name="array" />.</returns>
    </member>
    <member name="M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object,System.Collections.IComparer)">
      <summary>Searches a range of elements in a one-dimensional sorted array for a value, using the specified <see cref="T:System.Collections.IComparer" /> interface.</summary>
      <param name="array">The sorted one-dimensional <see cref="T:System.Array" /> to search.</param>
      <param name="index">The starting index of the range to search.</param>
      <param name="length">The length of the range to search.</param>
      <param name="value">The object to search for.</param>
      <param name="comparer">The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing elements.  
  
 -or-  
  
 <see langword="null" /> to use the <see cref="T:System.IComparable" /> implementation of each element.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> is multidimensional.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than the lower bound of <paramref name="array" />.  
  
 -or-  
  
 <paramref name="length" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in <paramref name="array" />.  
  
 -or-  
  
 <paramref name="comparer" /> is <see langword="null" />, and <paramref name="value" /> is of a type that is not compatible with the elements of <paramref name="array" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is <see langword="null" />, <paramref name="value" /> does not implement the <see cref="T:System.IComparable" /> interface, and the search encounters an element that does not implement the <see cref="T:System.IComparable" /> interface.</exception>
      <returns>The index of the specified <paramref name="value" /> in the specified <paramref name="array" />, if <paramref name="value" /> is found; otherwise, a negative number. If <paramref name="value" /> is not found and <paramref name="value" /> is less than one or more elements in <paramref name="array" />, the negative number returned is the bitwise complement of the index of the first element that is larger than <paramref name="value" />. If <paramref name="value" /> is not found and <paramref name="value" /> is greater than all elements in <paramref name="array" />, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <paramref name="array" />, the return value can be incorrect and a negative number could be returned, even if <paramref name="value" /> is present in <paramref name="array" />.</returns>
    </member>
    <member name="M:System.Array.BinarySearch(System.Array,System.Object)">
      <summary>Searches an entire one-dimensional sorted array for a specific element, using the <see cref="T:System.IComparable" /> interface implemented by each element of the array and by the specified object.</summary>
      <param name="array">The sorted one-dimensional <see cref="T:System.Array" /> to search.</param>
      <param name="value">The object to search for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> is multidimensional.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is of a type that is not compatible with the elements of <paramref name="array" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> does not implement the <see cref="T:System.IComparable" /> interface, and the search encounters an element that does not implement the <see cref="T:System.IComparable" /> interface.</exception>
      <returns>The index of the specified <paramref name="value" /> in the specified <paramref name="array" />, if <paramref name="value" /> is found; otherwise, a negative number. If <paramref name="value" /> is not found and <paramref name="value" /> is less than one or more elements in <paramref name="array" />, the negative number returned is the bitwise complement of the index of the first element that is larger than <paramref name="value" />. If <paramref name="value" /> is not found and <paramref name="value" /> is greater than all elements in <paramref name="array" />, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <paramref name="array" />, the return value can be incorrect and a negative number could be returned, even if <paramref name="value" /> is present in <paramref name="array" />.</returns>
    </member>
    <member name="M:System.Array.BinarySearch(System.Array,System.Object,System.Collections.IComparer)">
      <summary>Searches an entire one-dimensional sorted array for a value using the specified <see cref="T:System.Collections.IComparer" /> interface.</summary>
      <param name="array">The sorted one-dimensional <see cref="T:System.Array" /> to search.</param>
      <param name="value">The object to search for.</param>
      <param name="comparer">The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing elements.  
  
 -or-  
  
 <see langword="null" /> to use the <see cref="T:System.IComparable" /> implementation of each element.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> is multidimensional.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparer" /> is <see langword="null" />, and <paramref name="value" /> is of a type that is not compatible with the elements of <paramref name="array" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is <see langword="null" />, <paramref name="value" /> does not implement the <see cref="T:System.IComparable" /> interface, and the search encounters an element that does not implement the <see cref="T:System.IComparable" /> interface.</exception>
      <returns>The index of the specified <paramref name="value" /> in the specified <paramref name="array" />, if <paramref name="value" /> is found; otherwise, a negative number. If <paramref name="value" /> is not found and <paramref name="value" /> is less than one or more elements in <paramref name="array" />, the negative number returned is the bitwise complement of the index of the first element that is larger than <paramref name="value" />. If <paramref name="value" /> is not found and <paramref name="value" /> is greater than all elements in <paramref name="array" />, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <paramref name="array" />, the return value can be incorrect and a negative number could be returned, even if <paramref name="value" /> is present in <paramref name="array" />.</returns>
    </member>
    <member name="M:System.Array.BinarySearch``1(``0[],``0)">
      <summary>Searches an entire one-dimensional sorted array for a specific element, using the <see cref="T:System.IComparable`1" /> generic interface implemented by each element of the <see cref="T:System.Array" /> and by the specified object.</summary>
      <param name="array">The sorted one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
      <param name="value">The object to search for.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="T" /> does not implement the <see cref="T:System.IComparable`1" /> generic interface.</exception>
      <returns>The index of the specified <paramref name="value" /> in the specified <paramref name="array" />, if <paramref name="value" /> is found; otherwise, a negative number. If <paramref name="value" /> is not found and <paramref name="value" /> is less than one or more elements in <paramref name="array" />, the negative number returned is the bitwise complement of the index of the first element that is larger than <paramref name="value" />. If <paramref name="value" /> is not found and <paramref name="value" /> is greater than all elements in <paramref name="array" />, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <paramref name="array" />, the return value can be incorrect and a negative number could be returned, even if <paramref name="value" /> is present in <paramref name="array" />.</returns>
    </member>
    <member name="M:System.Array.BinarySearch``1(``0[],``0,System.Collections.Generic.IComparer{``0})">
      <summary>Searches an entire one-dimensional sorted array for a value using the specified <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface.</summary>
      <param name="array">The sorted one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
      <param name="value">The object to search for.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use when comparing elements.  
  
 -or-  
  
 <see langword="null" /> to use the <see cref="T:System.IComparable`1" /> implementation of each element.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparer" /> is <see langword="null" />, and <paramref name="value" /> is of a type that is not compatible with the elements of <paramref name="array" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is <see langword="null" />, and <paramref name="T" /> does not implement the <see cref="T:System.IComparable`1" /> generic interface</exception>
      <returns>The index of the specified <paramref name="value" /> in the specified <paramref name="array" />, if <paramref name="value" /> is found; otherwise, a negative number. If <paramref name="value" /> is not found and <paramref name="value" /> is less than one or more elements in <paramref name="array" />, the negative number returned is the bitwise complement of the index of the first element that is larger than <paramref name="value" />. If <paramref name="value" /> is not found and <paramref name="value" /> is greater than all elements in <paramref name="array" />, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <paramref name="array" />, the return value can be incorrect and a negative number could be returned, even if <paramref name="value" /> is present in <paramref name="array" />.</returns>
    </member>
    <member name="M:System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0)">
      <summary>Searches a range of elements in a one-dimensional sorted array for a value, using the <see cref="T:System.IComparable`1" /> generic interface implemented by each element of the <see cref="T:System.Array" /> and by the specified value.</summary>
      <param name="array">The sorted one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
      <param name="index">The starting index of the range to search.</param>
      <param name="length">The length of the range to search.</param>
      <param name="value">The object to search for.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than the lower bound of <paramref name="array" />.  
  
 -or-  
  
 <paramref name="length" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in <paramref name="array" />.  
  
 -or-  
  
 <paramref name="value" /> is of a type that is not compatible with the elements of <paramref name="array" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="T" /> does not implement the <see cref="T:System.IComparable`1" /> generic interface.</exception>
      <returns>The index of the specified <paramref name="value" /> in the specified <paramref name="array" />, if <paramref name="value" /> is found; otherwise, a negative number. If <paramref name="value" /> is not found and <paramref name="value" /> is less than one or more elements in <paramref name="array" />, the negative number returned is the bitwise complement of the index of the first element that is larger than <paramref name="value" />. If <paramref name="value" /> is not found and <paramref name="value" /> is greater than all elements in <paramref name="array" />, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <paramref name="array" />, the return value can be incorrect and a negative number could be returned, even if <paramref name="value" /> is present in <paramref name="array" />.</returns>
    </member>
    <member name="M:System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})">
      <summary>Searches a range of elements in a one-dimensional sorted array for a value, using the specified <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface.</summary>
      <param name="array">The sorted one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
      <param name="index">The starting index of the range to search.</param>
      <param name="length">The length of the range to search.</param>
      <param name="value">The object to search for.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use when comparing elements.  
  
 -or-  
  
 <see langword="null" /> to use the <see cref="T:System.IComparable`1" /> implementation of each element.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than the lower bound of <paramref name="array" />.  
  
 -or-  
  
 <paramref name="length" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in <paramref name="array" />.  
  
 -or-  
  
 <paramref name="comparer" /> is <see langword="null" />, and <paramref name="value" /> is of a type that is not compatible with the elements of <paramref name="array" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is <see langword="null" />, and <paramref name="T" /> does not implement the <see cref="T:System.IComparable`1" /> generic interface.</exception>
      <returns>The index of the specified <paramref name="value" /> in the specified <paramref name="array" />, if <paramref name="value" /> is found; otherwise, a negative number. If <paramref name="value" /> is not found and <paramref name="value" /> is less than one or more elements in <paramref name="array" />, the negative number returned is the bitwise complement of the index of the first element that is larger than <paramref name="value" />. If <paramref name="value" /> is not found and <paramref name="value" /> is greater than all elements in <paramref name="array" />, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <paramref name="array" />, the return value can be incorrect and a negative number could be returned, even if <paramref name="value" /> is present in <paramref name="array" />.</returns>
    </member>
    <member name="M:System.Array.Clear(System.Array,System.Int32,System.Int32)">
      <summary>Sets a range of elements in an array to the default value of each element type.</summary>
      <param name="array">The array whose elements need to be cleared.</param>
      <param name="index">The starting index of the range of elements to clear.</param>
      <param name="length">The number of elements to clear.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is less than the lower bound of <paramref name="array" />.  
  
 -or-  
  
 <paramref name="length" /> is less than zero.  
  
 -or-  
  
 The sum of <paramref name="index" /> and <paramref name="length" /> is greater than the size of <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Array.Clone">
      <summary>Creates a shallow copy of the <see cref="T:System.Array" />.</summary>
      <returns>A shallow copy of the <see cref="T:System.Array" />.</returns>
    </member>
    <member name="M:System.Array.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
      <summary>Copies a range of elements from an <see cref="T:System.Array" /> starting at the specified source index and pastes them to another <see cref="T:System.Array" /> starting at the specified destination index.  Guarantees that all changes are undone if the copy does not succeed completely.</summary>
      <param name="sourceArray">The <see cref="T:System.Array" /> that contains the data to copy.</param>
      <param name="sourceIndex">A 32-bit integer that represents the index in the <paramref name="sourceArray" /> at which copying begins.</param>
      <param name="destinationArray">The <see cref="T:System.Array" /> that receives the data.</param>
      <param name="destinationIndex">A 32-bit integer that represents the index in the <paramref name="destinationArray" /> at which storing begins.</param>
      <param name="length">A 32-bit integer that represents the number of elements to copy.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceArray" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="destinationArray" /> is <see langword="null" />.</exception>
      <exception cref="T:System.RankException">
        <paramref name="sourceArray" /> and <paramref name="destinationArray" /> have different ranks.</exception>
      <exception cref="T:System.ArrayTypeMismatchException">The <paramref name="sourceArray" /> type is neither the same as nor derived from the <paramref name="destinationArray" /> type.</exception>
      <exception cref="T:System.InvalidCastException">At least one element in <paramref name="sourceArray" /> cannot be cast to the type of <paramref name="destinationArray" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceIndex" /> is less than the lower bound of the first dimension of <paramref name="sourceArray" />.  
  
 -or-  
  
 <paramref name="destinationIndex" /> is less than the lower bound of the first dimension of <paramref name="destinationArray" />.  
  
 -or-  
  
 <paramref name="length" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="length" /> is greater than the number of elements from <paramref name="sourceIndex" /> to the end of <paramref name="sourceArray" />.  
  
 -or-  
  
 <paramref name="length" /> is greater than the number of elements from <paramref name="destinationIndex" /> to the end of <paramref name="destinationArray" />.</exception>
    </member>
    <member name="M:System.Array.ConvertAll``2(``0[],System.Converter{``0,``1})">
      <summary>Converts an array of one type to an array of another type.</summary>
      <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to convert to a target type.</param>
      <param name="converter">A <see cref="T:System.Converter`2" /> that converts each element from one type to another type.</param>
      <typeparam name="TInput">The type of the elements of the source array.</typeparam>
      <typeparam name="TOutput">The type of the elements of the target array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="converter" /> is <see langword="null" />.</exception>
      <returns>An array of the target type containing the converted elements from the source array.</returns>
    </member>
    <member name="M:System.Array.Copy(System.Array,System.Array,System.Int32)">
      <summary>Copies a range of elements from an <see cref="T:System.Array" /> starting at the first element and pastes them into another <see cref="T:System.Array" /> starting at the first element. The length is specified as a 32-bit integer.</summary>
      <param name="sourceArray">The <see cref="T:System.Array" /> that contains the data to copy.</param>
      <param name="destinationArray">The <see cref="T:System.Array" /> that receives the data.</param>
      <param name="length">A 32-bit integer that represents the number of elements to copy.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceArray" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="destinationArray" /> is <see langword="null" />.</exception>
      <exception cref="T:System.RankException">
        <paramref name="sourceArray" /> and <paramref name="destinationArray" /> have different ranks.</exception>
      <exception cref="T:System.ArrayTypeMismatchException">
        <paramref name="sourceArray" /> and <paramref name="destinationArray" /> are of incompatible types.</exception>
      <exception cref="T:System.InvalidCastException">At least one element in <paramref name="sourceArray" /> cannot be cast to the type of <paramref name="destinationArray" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="length" /> is greater than the number of elements in <paramref name="sourceArray" />.  
  
 -or-  
  
 <paramref name="length" /> is greater than the number of elements in <paramref name="destinationArray" />.</exception>
    </member>
    <member name="M:System.Array.Copy(System.Array,System.Array,System.Int64)">
      <summary>Copies a range of elements from an <see cref="T:System.Array" /> starting at the first element and pastes them into another <see cref="T:System.Array" /> starting at the first element. The length is specified as a 64-bit integer.</summary>
      <param name="sourceArray">The <see cref="T:System.Array" /> that contains the data to copy.</param>
      <param name="destinationArray">The <see cref="T:System.Array" /> that receives the data.</param>
      <param name="length">A 64-bit integer that represents the number of elements to copy. The integer must be between zero and <see cref="F:System.Int32.MaxValue" />, inclusive.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceArray" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="destinationArray" /> is <see langword="null" />.</exception>
      <exception cref="T:System.RankException">
        <paramref name="sourceArray" /> and <paramref name="destinationArray" /> have different ranks.</exception>
      <exception cref="T:System.ArrayTypeMismatchException">
        <paramref name="sourceArray" /> and <paramref name="destinationArray" /> are of incompatible types.</exception>
      <exception cref="T:System.InvalidCastException">At least one element in <paramref name="sourceArray" /> cannot be cast to the type of <paramref name="destinationArray" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> is less than 0 or greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="length" /> is greater than the number of elements in <paramref name="sourceArray" />.  
  
 -or-  
  
 <paramref name="length" /> is greater than the number of elements in <paramref name="destinationArray" />.</exception>
    </member>
    <member name="M:System.Array.Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
      <summary>Copies a range of elements from an <see cref="T:System.Array" /> starting at the specified source index and pastes them to another <see cref="T:System.Array" /> starting at the specified destination index. The length and the indexes are specified as 32-bit integers.</summary>
      <param name="sourceArray">The <see cref="T:System.Array" /> that contains the data to copy.</param>
      <param name="sourceIndex">A 32-bit integer that represents the index in the <paramref name="sourceArray" /> at which copying begins.</param>
      <param name="destinationArray">The <see cref="T:System.Array" /> that receives the data.</param>
      <param name="destinationIndex">A 32-bit integer that represents the index in the <paramref name="destinationArray" /> at which storing begins.</param>
      <param name="length">A 32-bit integer that represents the number of elements to copy.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceArray" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="destinationArray" /> is <see langword="null" />.</exception>
      <exception cref="T:System.RankException">
        <paramref name="sourceArray" /> and <paramref name="destinationArray" /> have different ranks.</exception>
      <exception cref="T:System.ArrayTypeMismatchException">
        <paramref name="sourceArray" /> and <paramref name="destinationArray" /> are of incompatible types.</exception>
      <exception cref="T:System.InvalidCastException">At least one element in <paramref name="sourceArray" /> cannot be cast to the type of <paramref name="destinationArray" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceIndex" /> is less than the lower bound of the first dimension of <paramref name="sourceArray" />.  
  
 -or-  
  
 <paramref name="destinationIndex" /> is less than the lower bound of the first dimension of <paramref name="destinationArray" />.  
  
 -or-  
  
 <paramref name="length" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="length" /> is greater than the number of elements from <paramref name="sourceIndex" /> to the end of <paramref name="sourceArray" />.  
  
 -or-  
  
 <paramref name="length" /> is greater than the number of elements from <paramref name="destinationIndex" /> to the end of <paramref name="destinationArray" />.</exception>
    </member>
    <member name="M:System.Array.Copy(System.Array,System.Int64,System.Array,System.Int64,System.Int64)">
      <summary>Copies a range of elements from an <see cref="T:System.Array" /> starting at the specified source index and pastes them to another <see cref="T:System.Array" /> starting at the specified destination index. The length and the indexes are specified as 64-bit integers.</summary>
      <param name="sourceArray">The <see cref="T:System.Array" /> that contains the data to copy.</param>
      <param name="sourceIndex">A 64-bit integer that represents the index in the <paramref name="sourceArray" /> at which copying begins.</param>
      <param name="destinationArray">The <see cref="T:System.Array" /> that receives the data.</param>
      <param name="destinationIndex">A 64-bit integer that represents the index in the <paramref name="destinationArray" /> at which storing begins.</param>
      <param name="length">A 64-bit integer that represents the number of elements to copy. The integer must be between zero and <see cref="F:System.Int32.MaxValue" />, inclusive.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceArray" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="destinationArray" /> is <see langword="null" />.</exception>
      <exception cref="T:System.RankException">
        <paramref name="sourceArray" /> and <paramref name="destinationArray" /> have different ranks.</exception>
      <exception cref="T:System.ArrayTypeMismatchException">
        <paramref name="sourceArray" /> and <paramref name="destinationArray" /> are of incompatible types.</exception>
      <exception cref="T:System.InvalidCastException">At least one element in <paramref name="sourceArray" /> cannot be cast to the type of <paramref name="destinationArray" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceIndex" /> is outside the range of valid indexes for the <paramref name="sourceArray" />.  
  
 -or-  
  
 <paramref name="destinationIndex" /> is outside the range of valid indexes for the <paramref name="destinationArray" />.  
  
 -or-  
  
 <paramref name="length" /> is less than 0 or greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="length" /> is greater than the number of elements from <paramref name="sourceIndex" /> to the end of <paramref name="sourceArray" />.  
  
 -or-  
  
 <paramref name="length" /> is greater than the number of elements from <paramref name="destinationIndex" /> to the end of <paramref name="destinationArray" />.</exception>
    </member>
    <member name="M:System.Array.CopyTo(System.Array,System.Int32)">
      <summary>Copies all the elements of the current one-dimensional array to the specified one-dimensional array starting at the specified destination array index. The index is specified as a 32-bit integer.</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the current array.</param>
      <param name="index">A 32-bit integer that represents the index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than the lower bound of <paramref name="array" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.  
  
 -or-  
  
 The number of elements in the source array is greater than the available number of elements from <paramref name="index" /> to the end of the destination <paramref name="array" />.</exception>
      <exception cref="T:System.ArrayTypeMismatchException">The type of the source <see cref="T:System.Array" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
      <exception cref="T:System.RankException">The source array is multidimensional.</exception>
      <exception cref="T:System.InvalidCastException">At least one element in the source <see cref="T:System.Array" /> cannot be cast to the type of destination <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Array.CopyTo(System.Array,System.Int64)">
      <summary>Copies all the elements of the current one-dimensional array to the specified one-dimensional array starting at the specified destination array index. The index is specified as a 64-bit integer.</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the current array.</param>
      <param name="index">A 64-bit integer that represents the index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is outside the range of valid indexes for <paramref name="array" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.  
  
 -or-  
  
 The number of elements in the source array is greater than the available number of elements from <paramref name="index" /> to the end of the destination <paramref name="array" />.</exception>
      <exception cref="T:System.ArrayTypeMismatchException">The type of the source <see cref="T:System.Array" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
      <exception cref="T:System.RankException">The source <see cref="T:System.Array" /> is multidimensional.</exception>
      <exception cref="T:System.InvalidCastException">At least one element in the source <see cref="T:System.Array" /> cannot be cast to the type of destination <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Array.CreateInstance(System.Type,System.Int32)">
      <summary>Creates a one-dimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" /> and length, with zero-based indexing.</summary>
      <param name="elementType">The <see cref="T:System.Type" /> of the <see cref="T:System.Array" /> to create.</param>
      <param name="length">The size of the <see cref="T:System.Array" /> to create.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elementType" /> is not a valid <see cref="T:System.Type" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="elementType" /> is not supported. For example, <see cref="T:System.Void" /> is not supported.  
  
 -or-  
  
 <paramref name="elementType" /> is an open generic type.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> is less than zero.</exception>
      <returns>A new one-dimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" /> with the specified length, using zero-based indexing.</returns>
    </member>
    <member name="M:System.Array.CreateInstance(System.Type,System.Int32,System.Int32)">
      <summary>Creates a two-dimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" /> and dimension lengths, with zero-based indexing.</summary>
      <param name="elementType">The <see cref="T:System.Type" /> of the <see cref="T:System.Array" /> to create.</param>
      <param name="length1">The size of the first dimension of the <see cref="T:System.Array" /> to create.</param>
      <param name="length2">The size of the second dimension of the <see cref="T:System.Array" /> to create.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elementType" /> is not a valid <see cref="T:System.Type" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="elementType" /> is not supported. For example, <see cref="T:System.Void" /> is not supported.  
  
 -or-  
  
 <paramref name="elementType" /> is an open generic type.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length1" /> is less than zero.  
  
 -or-  
  
 <paramref name="length2" /> is less than zero.</exception>
      <returns>A new two-dimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" /> with the specified length for each dimension, using zero-based indexing.</returns>
    </member>
    <member name="M:System.Array.CreateInstance(System.Type,System.Int32,System.Int32,System.Int32)">
      <summary>Creates a three-dimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" /> and dimension lengths, with zero-based indexing.</summary>
      <param name="elementType">The <see cref="T:System.Type" /> of the <see cref="T:System.Array" /> to create.</param>
      <param name="length1">The size of the first dimension of the <see cref="T:System.Array" /> to create.</param>
      <param name="length2">The size of the second dimension of the <see cref="T:System.Array" /> to create.</param>
      <param name="length3">The size of the third dimension of the <see cref="T:System.Array" /> to create.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elementType" /> is not a valid <see cref="T:System.Type" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="elementType" /> is not supported. For example, <see cref="T:System.Void" /> is not supported.  
  
 -or-  
  
 <paramref name="elementType" /> is an open generic type.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length1" /> is less than zero.  
  
 -or-  
  
 <paramref name="length2" /> is less than zero.  
  
 -or-  
  
 <paramref name="length3" /> is less than zero.</exception>
      <returns>A new three-dimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" /> with the specified length for each dimension, using zero-based indexing.</returns>
    </member>
    <member name="M:System.Array.CreateInstance(System.Type,System.Int32[])">
      <summary>Creates a multidimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" /> and dimension lengths, with zero-based indexing. The dimension lengths are specified in an array of 32-bit integers.</summary>
      <param name="elementType">The <see cref="T:System.Type" /> of the <see cref="T:System.Array" /> to create.</param>
      <param name="lengths">An array of 32-bit integers that represent the size of each dimension of the <see cref="T:System.Array" /> to create.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementType" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="lengths" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elementType" /> is not a valid <see cref="T:System.Type" />.  
  
 -or-  
  
 The <paramref name="lengths" /> array contains less than one element.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="elementType" /> is not supported. For example, <see cref="T:System.Void" /> is not supported.  
  
 -or-  
  
 <paramref name="elementType" /> is an open generic type.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Any value in <paramref name="lengths" /> is less than zero.</exception>
      <returns>A new multidimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" /> with the specified length for each dimension, using zero-based indexing.</returns>
    </member>
    <member name="M:System.Array.CreateInstance(System.Type,System.Int32[],System.Int32[])">
      <summary>Creates a multidimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" /> and dimension lengths, with the specified lower bounds.</summary>
      <param name="elementType">The <see cref="T:System.Type" /> of the <see cref="T:System.Array" /> to create.</param>
      <param name="lengths">A one-dimensional array that contains the size of each dimension of the <see cref="T:System.Array" /> to create.</param>
      <param name="lowerBounds">A one-dimensional array that contains the lower bound (starting index) of each dimension of the <see cref="T:System.Array" /> to create.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementType" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="lengths" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="lowerBounds" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elementType" /> is not a valid <see cref="T:System.Type" />.  
  
 -or-  
  
 The <paramref name="lengths" /> array contains less than one element.  
  
 -or-  
  
 The <paramref name="lengths" /> and <paramref name="lowerBounds" /> arrays do not contain the same number of elements.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="elementType" /> is not supported. For example, <see cref="T:System.Void" /> is not supported.  
  
 -or-  
  
 <paramref name="elementType" /> is an open generic type.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Any value in <paramref name="lengths" /> is less than zero.  
  
 -or-  
  
 Any value in <paramref name="lowerBounds" /> is very large, such that the sum of a dimension's lower bound and length is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <returns>A new multidimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" /> with the specified length and lower bound for each dimension.</returns>
    </member>
    <member name="M:System.Array.CreateInstance(System.Type,System.Int64[])">
      <summary>Creates a multidimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" /> and dimension lengths, with zero-based indexing. The dimension lengths are specified in an array of 64-bit integers.</summary>
      <param name="elementType">The <see cref="T:System.Type" /> of the <see cref="T:System.Array" /> to create.</param>
      <param name="lengths">An array of 64-bit integers that represent the size of each dimension of the <see cref="T:System.Array" /> to create. Each integer in the array must be between zero and <see cref="F:System.Int32.MaxValue" />, inclusive.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementType" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="lengths" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elementType" /> is not a valid <see cref="T:System.Type" />.  
  
 -or-  
  
 The <paramref name="lengths" /> array contains less than one element.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="elementType" /> is not supported. For example, <see cref="T:System.Void" /> is not supported.  
  
 -or-  
  
 <paramref name="elementType" /> is an open generic type.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Any value in <paramref name="lengths" /> is less than zero or greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <returns>A new multidimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" /> with the specified length for each dimension, using zero-based indexing.</returns>
    </member>
    <member name="M:System.Array.Empty``1">
      <summary>Returns an empty array.</summary>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <returns>An empty array.</returns>
    </member>
    <member name="M:System.Array.Exists``1(``0[],System.Predicate{``0})">
      <summary>Determines whether the specified array contains elements that match the conditions defined by the specified predicate.</summary>
      <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
      <param name="match">The <see cref="T:System.Predicate`1" /> that defines the conditions of the elements to search for.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="match" /> is <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> if <paramref name="array" /> contains one or more elements that match the conditions defined by the specified predicate; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Array.Fill``1(``0[],``0)">
      <summary>Assigns the given <paramref name="value" /> of type <typeparamref name="T" /> to each element of the specified <paramref name="array" />.</summary>
      <param name="array">The array to be filled.</param>
      <param name="value">The value to assign to each array element.</param>
      <typeparam name="T">The type of the elements in the array.</typeparam>
    </member>
    <member name="M:System.Array.Fill``1(``0[],``0,System.Int32,System.Int32)">
      <summary>Assigns the given <paramref name="value" /> of type <typeparamref name="T" /> to the elements of the specified <paramref name="array" /> which are 
          within the range of <paramref name="startIndex" /> (inclusive) and the next <paramref name="count" /> number of indices.</summary>
      <param name="array">The <see cref="T:System.Array" /> to be filled.</param>
      <param name="value">The new value for the elements in the specified range.</param>
      <param name="startIndex">A 32-bit integer that represents the index in the <see cref="T:System.Array" /> at which filling begins.</param>
      <param name="count">The number of elements to copy.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
    </member>
    <member name="M:System.Array.Find``1(``0[],System.Predicate{``0})">
      <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire <see cref="T:System.Array" />.</summary>
      <param name="array">The one-dimensional, zero-based array to search.</param>
      <param name="match">The predicate that defines the conditions of the element to search for.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="match" /> is <see langword="null" />.</exception>
      <returns>The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <paramref name="T" />.</returns>
    </member>
    <member name="M:System.Array.FindAll``1(``0[],System.Predicate{``0})">
      <summary>Retrieves all the elements that match the conditions defined by the specified predicate.</summary>
      <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
      <param name="match">The <see cref="T:System.Predicate`1" /> that defines the conditions of the elements to search for.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="match" /> is <see langword="null" />.</exception>
      <returns>An <see cref="T:System.Array" /> containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty <see cref="T:System.Array" />.</returns>
    </member>
    <member name="M:System.Array.FindIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})">
      <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:System.Array" /> that starts at the specified index and contains the specified number of elements.</summary>
      <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
      <param name="startIndex">The zero-based starting index of the search.</param>
      <param name="count">The number of elements in the section to search.</param>
      <param name="match">The <see cref="T:System.Predicate`1" /> that defines the conditions of the element to search for.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="match" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.  
  
 -or-  
  
 <paramref name="count" /> is less than zero.  
  
 -or-  
  
 <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="array" />.</exception>
      <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, -1.</returns>
    </member>
    <member name="M:System.Array.FindIndex``1(``0[],System.Int32,System.Predicate{``0})">
      <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:System.Array" /> that extends from the specified index to the last element.</summary>
      <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
      <param name="startIndex">The zero-based starting index of the search.</param>
      <param name="match">The <see cref="T:System.Predicate`1" /> that defines the conditions of the element to search for.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="match" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.</exception>
      <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, -1.</returns>
    </member>
    <member name="M:System.Array.FindIndex``1(``0[],System.Predicate{``0})">
      <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire <see cref="T:System.Array" />.</summary>
      <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
      <param name="match">The <see cref="T:System.Predicate`1" /> that defines the conditions of the element to search for.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="match" /> is <see langword="null" />.</exception>
      <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, -1.</returns>
    </member>
    <member name="M:System.Array.FindLast``1(``0[],System.Predicate{``0})">
      <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire <see cref="T:System.Array" />.</summary>
      <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
      <param name="match">The <see cref="T:System.Predicate`1" /> that defines the conditions of the element to search for.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="match" /> is <see langword="null" />.</exception>
      <returns>The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <paramref name="T" />.</returns>
    </member>
    <member name="M:System.Array.FindLastIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})">
      <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:System.Array" /> that contains the specified number of elements and ends at the specified index.</summary>
      <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
      <param name="startIndex">The zero-based starting index of the backward search.</param>
      <param name="count">The number of elements in the section to search.</param>
      <param name="match">The <see cref="T:System.Predicate`1" /> that defines the conditions of the element to search for.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="match" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.  
  
 -or-  
  
 <paramref name="count" /> is less than zero.  
  
 -or-  
  
 <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="array" />.</exception>
      <returns>The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, -1.</returns>
    </member>
    <member name="M:System.Array.FindLastIndex``1(``0[],System.Int32,System.Predicate{``0})">
      <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:System.Array" /> that extends from the first element to the specified index.</summary>
      <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
      <param name="startIndex">The zero-based starting index of the backward search.</param>
      <param name="match">The <see cref="T:System.Predicate`1" /> that defines the conditions of the element to search for.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="match" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.</exception>
      <returns>The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, -1.</returns>
    </member>
    <member name="M:System.Array.FindLastIndex``1(``0[],System.Predicate{``0})">
      <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire <see cref="T:System.Array" />.</summary>
      <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
      <param name="match">The <see cref="T:System.Predicate`1" /> that defines the conditions of the element to search for.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="match" /> is <see langword="null" />.</exception>
      <returns>The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, -1.</returns>
    </member>
    <member name="M:System.Array.ForEach``1(``0[],System.Action{``0})">
      <summary>Performs the specified action on each element of the specified array.</summary>
      <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> on whose elements the action is to be performed.</param>
      <param name="action">The <see cref="T:System.Action`1" /> to perform on each element of <paramref name="array" />.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="action" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Array.GetEnumerator">
      <summary>Returns an <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:System.Array" />.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:System.Array" />.</returns>
    </member>
    <member name="M:System.Array.GetLength(System.Int32)">
      <summary>Gets a 32-bit integer that represents the number of elements in the specified dimension of the <see cref="T:System.Array" />.</summary>
      <param name="dimension">A zero-based dimension of the <see cref="T:System.Array" /> whose length needs to be determined.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="dimension" /> is less than zero.  
  
 -or-  
  
 <paramref name="dimension" /> is equal to or greater than <see cref="P:System.Array.Rank" />.</exception>
      <returns>A 32-bit integer that represents the number of elements in the specified dimension.</returns>
    </member>
    <member name="M:System.Array.GetLongLength(System.Int32)">
      <summary>Gets a 64-bit integer that represents the number of elements in the specified dimension of the <see cref="T:System.Array" />.</summary>
      <param name="dimension">A zero-based dimension of the <see cref="T:System.Array" /> whose length needs to be determined.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="dimension" /> is less than zero.  
  
 -or-  
  
 <paramref name="dimension" /> is equal to or greater than <see cref="P:System.Array.Rank" />.</exception>
      <returns>A 64-bit integer that represents the number of elements in the specified dimension.</returns>
    </member>
    <member name="M:System.Array.GetLowerBound(System.Int32)">
      <summary>Gets the index of the first element of the specified dimension in the array.</summary>
      <param name="dimension">A zero-based dimension of the array whose starting index needs to be determined.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="dimension" /> is less than zero.  
  
 -or-  
  
 <paramref name="dimension" /> is equal to or greater than <see cref="P:System.Array.Rank" />.</exception>
      <returns>The index of the first element of the specified dimension in the array.</returns>
    </member>
    <member name="M:System.Array.GetUpperBound(System.Int32)">
      <summary>Gets the index of the last element of the specified dimension in the array.</summary>
      <param name="dimension">A zero-based dimension of the array whose upper bound needs to be determined.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="dimension" /> is less than zero.  
  
 -or-  
  
 <paramref name="dimension" /> is equal to or greater than <see cref="P:System.Array.Rank" />.</exception>
      <returns>The index of the last element of the specified dimension in the array, or -1 if the specified dimension is empty.</returns>
    </member>
    <member name="M:System.Array.GetValue(System.Int32)">
      <summary>Gets the value at the specified position in the one-dimensional <see cref="T:System.Array" />. The index is specified as a 32-bit integer.</summary>
      <param name="index">A 32-bit integer that represents the position of the <see cref="T:System.Array" /> element to get.</param>
      <exception cref="T:System.ArgumentException">The current <see cref="T:System.Array" /> does not have exactly one dimension.</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is outside the range of valid indexes for the current <see cref="T:System.Array" />.</exception>
      <returns>The value at the specified position in the one-dimensional <see cref="T:System.Array" />.</returns>
    </member>
    <member name="M:System.Array.GetValue(System.Int32,System.Int32)">
      <summary>Gets the value at the specified position in the two-dimensional <see cref="T:System.Array" />. The indexes are specified as 32-bit integers.</summary>
      <param name="index1">A 32-bit integer that represents the first-dimension index of the <see cref="T:System.Array" /> element to get.</param>
      <param name="index2">A 32-bit integer that represents the second-dimension index of the <see cref="T:System.Array" /> element to get.</param>
      <exception cref="T:System.ArgumentException">The current <see cref="T:System.Array" /> does not have exactly two dimensions.</exception>
      <exception cref="T:System.IndexOutOfRangeException">Either <paramref name="index1" /> or <paramref name="index2" /> is outside the range of valid indexes for the corresponding dimension of the current <see cref="T:System.Array" />.</exception>
      <returns>The value at the specified position in the two-dimensional <see cref="T:System.Array" />.</returns>
    </member>
    <member name="M:System.Array.GetValue(System.Int32,System.Int32,System.Int32)">
      <summary>Gets the value at the specified position in the three-dimensional <see cref="T:System.Array" />. The indexes are specified as 32-bit integers.</summary>
      <param name="index1">A 32-bit integer that represents the first-dimension index of the <see cref="T:System.Array" /> element to get.</param>
      <param name="index2">A 32-bit integer that represents the second-dimension index of the <see cref="T:System.Array" /> element to get.</param>
      <param name="index3">A 32-bit integer that represents the third-dimension index of the <see cref="T:System.Array" /> element to get.</param>
      <exception cref="T:System.ArgumentException">The current <see cref="T:System.Array" /> does not have exactly three dimensions.</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index1" /> or <paramref name="index2" /> or <paramref name="index3" /> is outside the range of valid indexes for the corresponding dimension of the current <see cref="T:System.Array" />.</exception>
      <returns>The value at the specified position in the three-dimensional <see cref="T:System.Array" />.</returns>
    </member>
    <member name="M:System.Array.GetValue(System.Int32[])">
      <summary>Gets the value at the specified position in the multidimensional <see cref="T:System.Array" />. The indexes are specified as an array of 32-bit integers.</summary>
      <param name="indices">A one-dimensional array of 32-bit integers that represent the indexes specifying the position of the <see cref="T:System.Array" /> element to get.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="indices" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The number of dimensions in the current <see cref="T:System.Array" /> is not equal to the number of elements in <paramref name="indices" />.</exception>
      <exception cref="T:System.IndexOutOfRangeException">Any element in <paramref name="indices" /> is outside the range of valid indexes for the corresponding dimension of the current <see cref="T:System.Array" />.</exception>
      <returns>The value at the specified position in the multidimensional <see cref="T:System.Array" />.</returns>
    </member>
    <member name="M:System.Array.GetValue(System.Int64)">
      <summary>Gets the value at the specified position in the one-dimensional <see cref="T:System.Array" />. The index is specified as a 64-bit integer.</summary>
      <param name="index">A 64-bit integer that represents the position of the <see cref="T:System.Array" /> element to get.</param>
      <exception cref="T:System.ArgumentException">The current <see cref="T:System.Array" /> does not have exactly one dimension.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is outside the range of valid indexes for the current <see cref="T:System.Array" />.</exception>
      <returns>The value at the specified position in the one-dimensional <see cref="T:System.Array" />.</returns>
    </member>
    <member name="M:System.Array.GetValue(System.Int64,System.Int64)">
      <summary>Gets the value at the specified position in the two-dimensional <see cref="T:System.Array" />. The indexes are specified as 64-bit integers.</summary>
      <param name="index1">A 64-bit integer that represents the first-dimension index of the <see cref="T:System.Array" /> element to get.</param>
      <param name="index2">A 64-bit integer that represents the second-dimension index of the <see cref="T:System.Array" /> element to get.</param>
      <exception cref="T:System.ArgumentException">The current <see cref="T:System.Array" /> does not have exactly two dimensions.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Either <paramref name="index1" /> or <paramref name="index2" /> is outside the range of valid indexes for the corresponding dimension of the current <see cref="T:System.Array" />.</exception>
      <returns>The value at the specified position in the two-dimensional <see cref="T:System.Array" />.</returns>
    </member>
    <member name="M:System.Array.GetValue(System.Int64,System.Int64,System.Int64)">
      <summary>Gets the value at the specified position in the three-dimensional <see cref="T:System.Array" />. The indexes are specified as 64-bit integers.</summary>
      <param name="index1">A 64-bit integer that represents the first-dimension index of the <see cref="T:System.Array" /> element to get.</param>
      <param name="index2">A 64-bit integer that represents the second-dimension index of the <see cref="T:System.Array" /> element to get.</param>
      <param name="index3">A 64-bit integer that represents the third-dimension index of the <see cref="T:System.Array" /> element to get.</param>
      <exception cref="T:System.ArgumentException">The current <see cref="T:System.Array" /> does not have exactly three dimensions.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index1" /> or <paramref name="index2" /> or <paramref name="index3" /> is outside the range of valid indexes for the corresponding dimension of the current <see cref="T:System.Array" />.</exception>
      <returns>The value at the specified position in the three-dimensional <see cref="T:System.Array" />.</returns>
    </member>
    <member name="M:System.Array.GetValue(System.Int64[])">
      <summary>Gets the value at the specified position in the multidimensional <see cref="T:System.Array" />. The indexes are specified as an array of 64-bit integers.</summary>
      <param name="indices">A one-dimensional array of 64-bit integers that represent the indexes specifying the position of the <see cref="T:System.Array" /> element to get.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="indices" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The number of dimensions in the current <see cref="T:System.Array" /> is not equal to the number of elements in <paramref name="indices" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Any element in <paramref name="indices" /> is outside the range of valid indexes for the corresponding dimension of the current <see cref="T:System.Array" />.</exception>
      <returns>The value at the specified position in the multidimensional <see cref="T:System.Array" />.</returns>
    </member>
    <member name="M:System.Array.IndexOf(System.Array,System.Object)">
      <summary>Searches for the specified object and returns the index of its first occurrence in a one-dimensional array.</summary>
      <param name="array">The one-dimensional array to search.</param>
      <param name="value">The object to locate in <paramref name="array" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> is multidimensional.</exception>
      <returns>The index of the first occurrence of <paramref name="value" /> in <paramref name="array" />, if found; otherwise, the lower bound of the array minus 1.</returns>
    </member>
    <member name="M:System.Array.IndexOf(System.Array,System.Object,System.Int32)">
      <summary>Searches for the specified object in a range of elements of a one-dimensional array, and returns the index of its first occurrence. The range extends from a specified index to the end of the array.</summary>
      <param name="array">The one-dimensional array to search.</param>
      <param name="value">The object to locate in <paramref name="array" />.</param>
      <param name="startIndex">The starting index of the search. 0 (zero) is valid in an empty array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> is multidimensional.</exception>
      <returns>The index of the first occurrence of <paramref name="value" />, if it's found, within the range of elements in <paramref name="array" /> that extends from <paramref name="startIndex" /> to the last element; otherwise, the lower bound of the array minus 1.</returns>
    </member>
    <member name="M:System.Array.IndexOf(System.Array,System.Object,System.Int32,System.Int32)">
      <summary>Searches for the specified object in a range of elements of a one-dimensional array, and returns the index of ifs first occurrence. The range extends from a specified index for a specified number of elements.</summary>
      <param name="array">The one-dimensional array to search.</param>
      <param name="value">The object to locate in <paramref name="array" />.</param>
      <param name="startIndex">The starting index of the search. 0 (zero) is valid in an empty array.</param>
      <param name="count">The number of elements to search.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.  
  
 -or-  
  
 <paramref name="count" /> is less than zero.  
  
 -or-  
  
 <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="array" />.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> is multidimensional.</exception>
      <returns>The index of the first occurrence of <paramref name="value" />, if it's found in the <paramref name="array" /> from index <paramref name="startIndex" /> to <paramref name="startIndex" /> + <paramref name="count" /> - 1; otherwise, the lower bound of the array minus 1.</returns>
    </member>
    <member name="M:System.Array.IndexOf``1(``0[],``0)">
      <summary>Searches for the specified object and returns the index of its first occurrence in a one-dimensional array.</summary>
      <param name="array">The one-dimensional, zero-based array to search.</param>
      <param name="value">The object to locate in <paramref name="array" />.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <returns>The zero-based index of the first occurrence of <paramref name="value" /> in the entire <paramref name="array" />, if found; otherwise, -1.</returns>
    </member>
    <member name="M:System.Array.IndexOf``1(``0[],``0,System.Int32)">
      <summary>Searches for the specified object in a range of elements of a one dimensional array, and returns the index of its first occurrence. The range extends from a specified index to the end of the array.</summary>
      <param name="array">The one-dimensional, zero-based array to search.</param>
      <param name="value">The object to locate in <paramref name="array" />.</param>
      <param name="startIndex">The zero-based starting index of the search. 0 (zero) is valid in an empty array.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.</exception>
      <returns>The zero-based index of the first occurrence of <paramref name="value" /> within the range of elements in <paramref name="array" /> that extends from <paramref name="startIndex" /> to the last element, if found; otherwise, -1.</returns>
    </member>
    <member name="M:System.Array.IndexOf``1(``0[],``0,System.Int32,System.Int32)">
      <summary>Searches for the specified object in a range of elements of a one-dimensional array, and returns the index of its first occurrence. The range extends from a specified index for a specified number of elements.</summary>
      <param name="array">The one-dimensional, zero-based array to search.</param>
      <param name="value">The object to locate in <paramref name="array" />.</param>
      <param name="startIndex">The zero-based starting index of the search. 0 (zero) is valid in an empty array.</param>
      <param name="count">The number of elements in the section to search.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.  
  
 -or-  
  
 <paramref name="count" /> is less than zero.  
  
 -or-  
  
 <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="array" />.</exception>
      <returns>The zero-based index of the first occurrence of <paramref name="value" /> within the range of elements in <paramref name="array" /> that starts at <paramref name="startIndex" /> and contains the number of elements specified in <paramref name="count" />, if found; otherwise, -1.</returns>
    </member>
    <member name="M:System.Array.Initialize">
      <summary>Initializes every element of the value-type <see cref="T:System.Array" /> by calling the parameterless constructor of the value type.</summary>
    </member>
    <member name="M:System.Array.LastIndexOf(System.Array,System.Object)">
      <summary>Searches for the specified object and returns the index of the last occurrence within the entire one-dimensional <see cref="T:System.Array" />.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> to search.</param>
      <param name="value">The object to locate in <paramref name="array" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> is multidimensional.</exception>
      <returns>The index of the last occurrence of <paramref name="value" /> within the entire <paramref name="array" />, if found; otherwise, the lower bound of the array minus 1.</returns>
    </member>
    <member name="M:System.Array.LastIndexOf(System.Array,System.Object,System.Int32)">
      <summary>Searches for the specified object and returns the index of the last occurrence within the range of elements in the one-dimensional <see cref="T:System.Array" /> that extends from the first element to the specified index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> to search.</param>
      <param name="value">The object to locate in <paramref name="array" />.</param>
      <param name="startIndex">The starting index of the backward search.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> is multidimensional.</exception>
      <returns>The index of the last occurrence of <paramref name="value" /> within the range of elements in <paramref name="array" /> that extends from the first element to <paramref name="startIndex" />, if found; otherwise, the lower bound of the array minus 1.</returns>
    </member>
    <member name="M:System.Array.LastIndexOf(System.Array,System.Object,System.Int32,System.Int32)">
      <summary>Searches for the specified object and returns the index of the last occurrence within the range of elements in the one-dimensional <see cref="T:System.Array" /> that contains the specified number of elements and ends at the specified index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> to search.</param>
      <param name="value">The object to locate in <paramref name="array" />.</param>
      <param name="startIndex">The starting index of the backward search.</param>
      <param name="count">The number of elements in the section to search.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.  
  
 -or-  
  
 <paramref name="count" /> is less than zero.  
  
 -or-  
  
 <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="array" />.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> is multidimensional.</exception>
      <returns>The index of the last occurrence of <paramref name="value" /> within the range of elements in <paramref name="array" /> that contains the number of elements specified in <paramref name="count" /> and ends at <paramref name="startIndex" />, if found; otherwise, the lower bound of the array minus 1.</returns>
    </member>
    <member name="M:System.Array.LastIndexOf``1(``0[],``0)">
      <summary>Searches for the specified object and returns the index of the last occurrence within the entire <see cref="T:System.Array" />.</summary>
      <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
      <param name="value">The object to locate in <paramref name="array" />.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <returns>The zero-based index of the last occurrence of <paramref name="value" /> within the entire <paramref name="array" />, if found; otherwise, -1.</returns>
    </member>
    <member name="M:System.Array.LastIndexOf``1(``0[],``0,System.Int32)">
      <summary>Searches for the specified object and returns the index of the last occurrence within the range of elements in the <see cref="T:System.Array" /> that extends from the first element to the specified index.</summary>
      <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
      <param name="value">The object to locate in <paramref name="array" />.</param>
      <param name="startIndex">The zero-based starting index of the backward search.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.</exception>
      <returns>The zero-based index of the last occurrence of <paramref name="value" /> within the range of elements in <paramref name="array" /> that extends from the first element to <paramref name="startIndex" />, if found; otherwise, -1.</returns>
    </member>
    <member name="M:System.Array.LastIndexOf``1(``0[],``0,System.Int32,System.Int32)">
      <summary>Searches for the specified object and returns the index of the last occurrence within the range of elements in the <see cref="T:System.Array" /> that contains the specified number of elements and ends at the specified index.</summary>
      <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
      <param name="value">The object to locate in <paramref name="array" />.</param>
      <param name="startIndex">The zero-based starting index of the backward search.</param>
      <param name="count">The number of elements in the section to search.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.  
  
 -or-  
  
 <paramref name="count" /> is less than zero.  
  
 -or-  
  
 <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="array" />.</exception>
      <returns>The zero-based index of the last occurrence of <paramref name="value" /> within the range of elements in <paramref name="array" /> that contains the number of elements specified in <paramref name="count" /> and ends at <paramref name="startIndex" />, if found; otherwise, -1.</returns>
    </member>
    <member name="M:System.Array.Resize``1(``0[]@,System.Int32)">
      <summary>Changes the number of elements of a one-dimensional array to the specified new size.</summary>
      <param name="array">The one-dimensional, zero-based array to resize, or <see langword="null" /> to create a new array with the specified size.</param>
      <param name="newSize">The size of the new array.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="newSize" /> is less than zero.</exception>
    </member>
    <member name="M:System.Array.Reverse(System.Array)">
      <summary>Reverses the sequence of the elements in the entire one-dimensional <see cref="T:System.Array" />.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> to reverse.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> is multidimensional.</exception>
    </member>
    <member name="M:System.Array.Reverse(System.Array,System.Int32,System.Int32)">
      <summary>Reverses the sequence of a subset of the elements in the one-dimensional <see cref="T:System.Array" />.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> to reverse.</param>
      <param name="index">The starting index of the section to reverse.</param>
      <param name="length">The number of elements in the section to reverse.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> is multidimensional.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than the lower bound of <paramref name="array" />.  
  
 -or-  
  
 <paramref name="length" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Array.Reverse``1(``0[])">
      <summary>Reverses the sequence of the elements in the one-dimensional generic array.</summary>
      <param name="array">The one-dimensional array of elements to reverse.</param>
      <typeparam name="T">The type of the elements in <paramref name="array" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> is multidimensional.</exception>
    </member>
    <member name="M:System.Array.Reverse``1(``0[],System.Int32,System.Int32)">
      <summary>Reverses the sequence of a subset of the elements in the one-dimensional generic array.</summary>
      <param name="array">The one-dimensional array of elements to reverse.</param>
      <param name="index">The starting index of the section to reverse.</param>
      <param name="length">The number of elements in the section to reverse.</param>
      <typeparam name="T">The type of the elements in <paramref name="array" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> is multidimensional.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than the lower bound of <paramref name="array" />.  
  
 -or-  
  
 <paramref name="length" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Array.SetValue(System.Object,System.Int32)">
      <summary>Sets a value to the element at the specified position in the one-dimensional <see cref="T:System.Array" />. The index is specified as a 32-bit integer.</summary>
      <param name="value">The new value for the specified element.</param>
      <param name="index">A 32-bit integer that represents the position of the <see cref="T:System.Array" /> element to set.</param>
      <exception cref="T:System.ArgumentException">The current <see cref="T:System.Array" /> does not have exactly one dimension.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> cannot be cast to the element type of the current <see cref="T:System.Array" />.</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is outside the range of valid indexes for the current <see cref="T:System.Array" />.</exception>
    </member>
    <member name="M:System.Array.SetValue(System.Object,System.Int32,System.Int32)">
      <summary>Sets a value to the element at the specified position in the two-dimensional <see cref="T:System.Array" />. The indexes are specified as 32-bit integers.</summary>
      <param name="value">The new value for the specified element.</param>
      <param name="index1">A 32-bit integer that represents the first-dimension index of the <see cref="T:System.Array" /> element to set.</param>
      <param name="index2">A 32-bit integer that represents the second-dimension index of the <see cref="T:System.Array" /> element to set.</param>
      <exception cref="T:System.ArgumentException">The current <see cref="T:System.Array" /> does not have exactly two dimensions.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> cannot be cast to the element type of the current <see cref="T:System.Array" />.</exception>
      <exception cref="T:System.IndexOutOfRangeException">Either <paramref name="index1" /> or <paramref name="index2" /> is outside the range of valid indexes for the corresponding dimension of the current <see cref="T:System.Array" />.</exception>
    </member>
    <member name="M:System.Array.SetValue(System.Object,System.Int32,System.Int32,System.Int32)">
      <summary>Sets a value to the element at the specified position in the three-dimensional <see cref="T:System.Array" />. The indexes are specified as 32-bit integers.</summary>
      <param name="value">The new value for the specified element.</param>
      <param name="index1">A 32-bit integer that represents the first-dimension index of the <see cref="T:System.Array" /> element to set.</param>
      <param name="index2">A 32-bit integer that represents the second-dimension index of the <see cref="T:System.Array" /> element to set.</param>
      <param name="index3">A 32-bit integer that represents the third-dimension index of the <see cref="T:System.Array" /> element to set.</param>
      <exception cref="T:System.ArgumentException">The current <see cref="T:System.Array" /> does not have exactly three dimensions.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> cannot be cast to the element type of the current <see cref="T:System.Array" />.</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index1" /> or <paramref name="index2" /> or <paramref name="index3" /> is outside the range of valid indexes for the corresponding dimension of the current <see cref="T:System.Array" />.</exception>
    </member>
    <member name="M:System.Array.SetValue(System.Object,System.Int32[])">
      <summary>Sets a value to the element at the specified position in the multidimensional <see cref="T:System.Array" />. The indexes are specified as an array of 32-bit integers.</summary>
      <param name="value">The new value for the specified element.</param>
      <param name="indices">A one-dimensional array of 32-bit integers that represent the indexes specifying the position of the element to set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="indices" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The number of dimensions in the current <see cref="T:System.Array" /> is not equal to the number of elements in <paramref name="indices" />.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> cannot be cast to the element type of the current <see cref="T:System.Array" />.</exception>
      <exception cref="T:System.IndexOutOfRangeException">Any element in <paramref name="indices" /> is outside the range of valid indexes for the corresponding dimension of the current <see cref="T:System.Array" />.</exception>
    </member>
    <member name="M:System.Array.SetValue(System.Object,System.Int64)">
      <summary>Sets a value to the element at the specified position in the one-dimensional <see cref="T:System.Array" />. The index is specified as a 64-bit integer.</summary>
      <param name="value">The new value for the specified element.</param>
      <param name="index">A 64-bit integer that represents the position of the <see cref="T:System.Array" /> element to set.</param>
      <exception cref="T:System.ArgumentException">The current <see cref="T:System.Array" /> does not have exactly one dimension.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> cannot be cast to the element type of the current <see cref="T:System.Array" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is outside the range of valid indexes for the current <see cref="T:System.Array" />.</exception>
    </member>
    <member name="M:System.Array.SetValue(System.Object,System.Int64,System.Int64)">
      <summary>Sets a value to the element at the specified position in the two-dimensional <see cref="T:System.Array" />. The indexes are specified as 64-bit integers.</summary>
      <param name="value">The new value for the specified element.</param>
      <param name="index1">A 64-bit integer that represents the first-dimension index of the <see cref="T:System.Array" /> element to set.</param>
      <param name="index2">A 64-bit integer that represents the second-dimension index of the <see cref="T:System.Array" /> element to set.</param>
      <exception cref="T:System.ArgumentException">The current <see cref="T:System.Array" /> does not have exactly two dimensions.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> cannot be cast to the element type of the current <see cref="T:System.Array" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Either <paramref name="index1" /> or <paramref name="index2" /> is outside the range of valid indexes for the corresponding dimension of the current <see cref="T:System.Array" />.</exception>
    </member>
    <member name="M:System.Array.SetValue(System.Object,System.Int64,System.Int64,System.Int64)">
      <summary>Sets a value to the element at the specified position in the three-dimensional <see cref="T:System.Array" />. The indexes are specified as 64-bit integers.</summary>
      <param name="value">The new value for the specified element.</param>
      <param name="index1">A 64-bit integer that represents the first-dimension index of the <see cref="T:System.Array" /> element to set.</param>
      <param name="index2">A 64-bit integer that represents the second-dimension index of the <see cref="T:System.Array" /> element to set.</param>
      <param name="index3">A 64-bit integer that represents the third-dimension index of the <see cref="T:System.Array" /> element to set.</param>
      <exception cref="T:System.ArgumentException">The current <see cref="T:System.Array" /> does not have exactly three dimensions.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> cannot be cast to the element type of the current <see cref="T:System.Array" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index1" /> or <paramref name="index2" /> or <paramref name="index3" /> is outside the range of valid indexes for the corresponding dimension of the current <see cref="T:System.Array" />.</exception>
    </member>
    <member name="M:System.Array.SetValue(System.Object,System.Int64[])">
      <summary>Sets a value to the element at the specified position in the multidimensional <see cref="T:System.Array" />. The indexes are specified as an array of 64-bit integers.</summary>
      <param name="value">The new value for the specified element.</param>
      <param name="indices">A one-dimensional array of 64-bit integers that represent the indexes specifying the position of the element to set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="indices" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The number of dimensions in the current <see cref="T:System.Array" /> is not equal to the number of elements in <paramref name="indices" />.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> cannot be cast to the element type of the current <see cref="T:System.Array" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Any element in <paramref name="indices" /> is outside the range of valid indexes for the corresponding dimension of the current <see cref="T:System.Array" />.</exception>
    </member>
    <member name="M:System.Array.Sort(System.Array)">
      <summary>Sorts the elements in an entire one-dimensional <see cref="T:System.Array" /> using the <see cref="T:System.IComparable" /> implementation of each element of the <see cref="T:System.Array" />.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> to sort.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> is multidimensional.</exception>
      <exception cref="T:System.InvalidOperationException">One or more elements in <paramref name="array" /> do not implement the <see cref="T:System.IComparable" /> interface.</exception>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Array)">
      <summary>Sorts a pair of one-dimensional <see cref="T:System.Array" /> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" /> using the <see cref="T:System.IComparable" /> implementation of each key.</summary>
      <param name="keys">The one-dimensional <see cref="T:System.Array" /> that contains the keys to sort.</param>
      <param name="items">The one-dimensional <see cref="T:System.Array" /> that contains the items that correspond to each of the keys in the <paramref name="keys" /><see cref="T:System.Array" />.  
  
 -or-  
  
 <see langword="null" /> to sort only the <paramref name="keys" /><see cref="T:System.Array" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> is <see langword="null" />.</exception>
      <exception cref="T:System.RankException">The <paramref name="keys" /><see cref="T:System.Array" /> is multidimensional.  
  
 -or-  
  
 The <paramref name="items" /><see cref="T:System.Array" /> is multidimensional.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> is not <see langword="null" />, and the length of <paramref name="keys" /> is greater than the length of <paramref name="items" />.</exception>
      <exception cref="T:System.InvalidOperationException">One or more elements in the <paramref name="keys" /><see cref="T:System.Array" /> do not implement the <see cref="T:System.IComparable" /> interface.</exception>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Array,System.Collections.IComparer)">
      <summary>Sorts a pair of one-dimensional <see cref="T:System.Array" /> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.IComparer" />.</summary>
      <param name="keys">The one-dimensional <see cref="T:System.Array" /> that contains the keys to sort.</param>
      <param name="items">The one-dimensional <see cref="T:System.Array" /> that contains the items that correspond to each of the keys in the <paramref name="keys" /><see cref="T:System.Array" />.  
  
 -or-  
  
 <see langword="null" /> to sort only the <paramref name="keys" /><see cref="T:System.Array" />.</param>
      <param name="comparer">The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing elements.  
  
 -or-  
  
 <see langword="null" /> to use the <see cref="T:System.IComparable" /> implementation of each element.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> is <see langword="null" />.</exception>
      <exception cref="T:System.RankException">The <paramref name="keys" /><see cref="T:System.Array" /> is multidimensional.  
  
 -or-  
  
 The <paramref name="items" /><see cref="T:System.Array" /> is multidimensional.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> is not <see langword="null" />, and the length of <paramref name="keys" /> is greater than the length of <paramref name="items" />.  
  
 -or-  
  
 The implementation of <paramref name="comparer" /> caused an error during the sort. For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is <see langword="null" />, and one or more elements in the <paramref name="keys" /><see cref="T:System.Array" /> do not implement the <see cref="T:System.IComparable" /> interface.</exception>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Array,System.Int32,System.Int32)">
      <summary>Sorts a range of elements in a pair of one-dimensional <see cref="T:System.Array" /> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" /> using the <see cref="T:System.IComparable" /> implementation of each key.</summary>
      <param name="keys">The one-dimensional <see cref="T:System.Array" /> that contains the keys to sort.</param>
      <param name="items">The one-dimensional <see cref="T:System.Array" /> that contains the items that correspond to each of the keys in the <paramref name="keys" /><see cref="T:System.Array" />.  
  
 -or-  
  
 <see langword="null" /> to sort only the <paramref name="keys" /><see cref="T:System.Array" />.</param>
      <param name="index">The starting index of the range to sort.</param>
      <param name="length">The number of elements in the range to sort.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> is <see langword="null" />.</exception>
      <exception cref="T:System.RankException">The <paramref name="keys" /><see cref="T:System.Array" /> is multidimensional.  
  
 -or-  
  
 The <paramref name="items" /><see cref="T:System.Array" /> is multidimensional.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than the lower bound of <paramref name="keys" />.  
  
 -or-  
  
 <paramref name="length" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> is not <see langword="null" />, and the length of <paramref name="keys" /> is greater than the length of <paramref name="items" />.  
  
 -or-  
  
 <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in the <paramref name="keys" /><see cref="T:System.Array" />.  
  
 -or-  
  
 <paramref name="items" /> is not <see langword="null" />, and <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in the <paramref name="items" /><see cref="T:System.Array" />.</exception>
      <exception cref="T:System.InvalidOperationException">One or more elements in the <paramref name="keys" /><see cref="T:System.Array" /> do not implement the <see cref="T:System.IComparable" /> interface.</exception>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Array,System.Int32,System.Int32,System.Collections.IComparer)">
      <summary>Sorts a range of elements in a pair of one-dimensional <see cref="T:System.Array" /> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.IComparer" />.</summary>
      <param name="keys">The one-dimensional <see cref="T:System.Array" /> that contains the keys to sort.</param>
      <param name="items">The one-dimensional <see cref="T:System.Array" /> that contains the items that correspond to each of the keys in the <paramref name="keys" /><see cref="T:System.Array" />.  
  
 -or-  
  
 <see langword="null" /> to sort only the <paramref name="keys" /><see cref="T:System.Array" />.</param>
      <param name="index">The starting index of the range to sort.</param>
      <param name="length">The number of elements in the range to sort.</param>
      <param name="comparer">The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing elements.  
  
 -or-  
  
 <see langword="null" /> to use the <see cref="T:System.IComparable" /> implementation of each element.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> is <see langword="null" />.</exception>
      <exception cref="T:System.RankException">The <paramref name="keys" /><see cref="T:System.Array" /> is multidimensional.  
  
 -or-  
  
 The <paramref name="items" /><see cref="T:System.Array" /> is multidimensional.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than the lower bound of <paramref name="keys" />.  
  
 -or-  
  
 <paramref name="length" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> is not <see langword="null" />, and the lower bound of <paramref name="keys" /> does not match the lower bound of <paramref name="items" />.  
  
 -or-  
  
 <paramref name="items" /> is not <see langword="null" />, and the length of <paramref name="keys" /> is greater than the length of <paramref name="items" />.  
  
 -or-  
  
 <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in the <paramref name="keys" /><see cref="T:System.Array" />.  
  
 -or-  
  
 <paramref name="items" /> is not <see langword="null" />, and <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in the <paramref name="items" /><see cref="T:System.Array" />.  
  
 -or-  
  
 The implementation of <paramref name="comparer" /> caused an error during the sort. For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is <see langword="null" />, and one or more elements in the <paramref name="keys" /><see cref="T:System.Array" /> do not implement the <see cref="T:System.IComparable" /> interface.</exception>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Collections.IComparer)">
      <summary>Sorts the elements in a one-dimensional <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.IComparer" />.</summary>
      <param name="array">The one-dimensional array to sort.</param>
      <param name="comparer">The implementation to use when comparing elements.  
  
 -or-  
  
 <see langword="null" /> to use the <see cref="T:System.IComparable" /> implementation of each element.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> is multidimensional.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is <see langword="null" />, and one or more elements in <paramref name="array" /> do not implement the <see cref="T:System.IComparable" /> interface.</exception>
      <exception cref="T:System.ArgumentException">The implementation of <paramref name="comparer" /> caused an error during the sort. For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</exception>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Int32,System.Int32)">
      <summary>Sorts the elements in a range of elements in a one-dimensional <see cref="T:System.Array" /> using the <see cref="T:System.IComparable" /> implementation of each element of the <see cref="T:System.Array" />.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> to sort.</param>
      <param name="index">The starting index of the range to sort.</param>
      <param name="length">The number of elements in the range to sort.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> is multidimensional.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than the lower bound of <paramref name="array" />.  
  
 -or-  
  
 <paramref name="length" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in <paramref name="array" />.</exception>
      <exception cref="T:System.InvalidOperationException">One or more elements in <paramref name="array" /> do not implement the <see cref="T:System.IComparable" /> interface.</exception>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Int32,System.Int32,System.Collections.IComparer)">
      <summary>Sorts the elements in a range of elements in a one-dimensional <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.IComparer" />.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> to sort.</param>
      <param name="index">The starting index of the range to sort.</param>
      <param name="length">The number of elements in the range to sort.</param>
      <param name="comparer">The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing elements.  
  
 -or-  
  
 <see langword="null" /> to use the <see cref="T:System.IComparable" /> implementation of each element.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> is multidimensional.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than the lower bound of <paramref name="array" />.  
  
 -or-  
  
 <paramref name="length" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in <paramref name="array" />.  
  
 -or-  
  
 The implementation of <paramref name="comparer" /> caused an error during the sort. For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is <see langword="null" />, and one or more elements in <paramref name="array" /> do not implement the <see cref="T:System.IComparable" /> interface.</exception>
    </member>
    <member name="M:System.Array.Sort``1(``0[])">
      <summary>Sorts the elements in an entire <see cref="T:System.Array" /> using the <see cref="T:System.IComparable`1" /> generic interface implementation of each element of the <see cref="T:System.Array" />.</summary>
      <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to sort.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">One or more elements in <paramref name="array" /> do not implement the <see cref="T:System.IComparable`1" /> generic interface.</exception>
    </member>
    <member name="M:System.Array.Sort``1(``0[],System.Collections.Generic.IComparer{``0})">
      <summary>Sorts the elements in an <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface.</summary>
      <param name="array">The one-dimensional, zero-base <see cref="T:System.Array" /> to sort</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface implementation to use when comparing elements, or <see langword="null" /> to use the <see cref="T:System.IComparable`1" /> generic interface implementation of each element.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is <see langword="null" />, and one or more elements in <paramref name="array" /> do not implement the <see cref="T:System.IComparable`1" /> generic interface.</exception>
      <exception cref="T:System.ArgumentException">The implementation of <paramref name="comparer" /> caused an error during the sort. For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</exception>
    </member>
    <member name="M:System.Array.Sort``1(``0[],System.Comparison{``0})">
      <summary>Sorts the elements in an <see cref="T:System.Array" /> using the specified <see cref="T:System.Comparison`1" />.</summary>
      <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to sort</param>
      <param name="comparison">The <see cref="T:System.Comparison`1" /> to use when comparing elements.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="comparison" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The implementation of <paramref name="comparison" /> caused an error during the sort. For example, <paramref name="comparison" /> might not return 0 when comparing an item with itself.</exception>
    </member>
    <member name="M:System.Array.Sort``1(``0[],System.Int32,System.Int32)">
      <summary>Sorts the elements in a range of elements in an <see cref="T:System.Array" /> using the <see cref="T:System.IComparable`1" /> generic interface implementation of each element of the <see cref="T:System.Array" />.</summary>
      <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to sort</param>
      <param name="index">The starting index of the range to sort.</param>
      <param name="length">The number of elements in the range to sort.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than the lower bound of <paramref name="array" />.  
  
 -or-  
  
 <paramref name="length" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in <paramref name="array" />.</exception>
      <exception cref="T:System.InvalidOperationException">One or more elements in <paramref name="array" /> do not implement the <see cref="T:System.IComparable`1" /> generic interface.</exception>
    </member>
    <member name="M:System.Array.Sort``1(``0[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
      <summary>Sorts the elements in a range of elements in an <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface.</summary>
      <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to sort.</param>
      <param name="index">The starting index of the range to sort.</param>
      <param name="length">The number of elements in the range to sort.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface implementation to use when comparing elements, or <see langword="null" /> to use the <see cref="T:System.IComparable`1" /> generic interface implementation of each element.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than the lower bound of <paramref name="array" />.  
  
 -or-  
  
 <paramref name="length" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in <paramref name="array" />.  
  
 -or-  
  
 The implementation of <paramref name="comparer" /> caused an error during the sort. For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is <see langword="null" />, and one or more elements in <paramref name="array" /> do not implement the <see cref="T:System.IComparable`1" /> generic interface.</exception>
    </member>
    <member name="M:System.Array.Sort``2(``0[],``1[])">
      <summary>Sorts a pair of <see cref="T:System.Array" /> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" /> using the <see cref="T:System.IComparable`1" /> generic interface implementation of each key.</summary>
      <param name="keys">The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the keys to sort.</param>
      <param name="items">The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the items that correspond to the keys in <paramref name="keys" />, or <see langword="null" /> to sort only <paramref name="keys" />.</param>
      <typeparam name="TKey">The type of the elements of the key array.</typeparam>
      <typeparam name="TValue">The type of the elements of the items array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> is not <see langword="null" />, and the lower bound of <paramref name="keys" /> does not match the lower bound of <paramref name="items" />.  
  
 -or-  
  
 <paramref name="items" /> is not <see langword="null" />, and the length of <paramref name="keys" /> is greater than the length of <paramref name="items" />.</exception>
      <exception cref="T:System.InvalidOperationException">One or more elements in the <paramref name="keys" /><see cref="T:System.Array" /> do not implement the <see cref="T:System.IComparable`1" /> generic interface.</exception>
    </member>
    <member name="M:System.Array.Sort``2(``0[],``1[],System.Collections.Generic.IComparer{``0})">
      <summary>Sorts a pair of <see cref="T:System.Array" /> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface.</summary>
      <param name="keys">The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the keys to sort.</param>
      <param name="items">The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the items that correspond to the keys in <paramref name="keys" />, or <see langword="null" /> to sort only <paramref name="keys" />.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface implementation to use when comparing elements, or <see langword="null" /> to use the <see cref="T:System.IComparable`1" /> generic interface implementation of each element.</param>
      <typeparam name="TKey">The type of the elements of the key array.</typeparam>
      <typeparam name="TValue">The type of the elements of the items array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> is not <see langword="null" />, and the lower bound of <paramref name="keys" /> does not match the lower bound of <paramref name="items" />.  
  
 -or-  
  
 <paramref name="items" /> is not <see langword="null" />, and the length of <paramref name="keys" /> is greater than the length of <paramref name="items" />.  
  
 -or-  
  
 The implementation of <paramref name="comparer" /> caused an error during the sort. For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is <see langword="null" />, and one or more elements in the <paramref name="keys" /><see cref="T:System.Array" /> do not implement the <see cref="T:System.IComparable`1" /> generic interface.</exception>
    </member>
    <member name="M:System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32)">
      <summary>Sorts a range of elements in a pair of <see cref="T:System.Array" /> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" /> using the <see cref="T:System.IComparable`1" /> generic interface implementation of each key.</summary>
      <param name="keys">The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the keys to sort.</param>
      <param name="items">The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the items that correspond to the keys in <paramref name="keys" />, or <see langword="null" /> to sort only <paramref name="keys" />.</param>
      <param name="index">The starting index of the range to sort.</param>
      <param name="length">The number of elements in the range to sort.</param>
      <typeparam name="TKey">The type of the elements of the key array.</typeparam>
      <typeparam name="TValue">The type of the elements of the items array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than the lower bound of <paramref name="keys" />.  
  
 -or-  
  
 <paramref name="length" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> is not <see langword="null" />, and the lower bound of <paramref name="keys" /> does not match the lower bound of <paramref name="items" />.  
  
 -or-  
  
 <paramref name="items" /> is not <see langword="null" />, and the length of <paramref name="keys" /> is greater than the length of <paramref name="items" />.  
  
 -or-  
  
 <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in the <paramref name="keys" /><see cref="T:System.Array" />.  
  
 -or-  
  
 <paramref name="items" /> is not <see langword="null" />, and <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in the <paramref name="items" /><see cref="T:System.Array" />.</exception>
      <exception cref="T:System.InvalidOperationException">One or more elements in the <paramref name="keys" /><see cref="T:System.Array" /> do not implement the <see cref="T:System.IComparable`1" /> generic interface.</exception>
    </member>
    <member name="M:System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
      <summary>Sorts a range of elements in a pair of <see cref="T:System.Array" /> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface.</summary>
      <param name="keys">The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the keys to sort.</param>
      <param name="items">The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the items that correspond to the keys in <paramref name="keys" />, or <see langword="null" /> to sort only <paramref name="keys" />.</param>
      <param name="index">The starting index of the range to sort.</param>
      <param name="length">The number of elements in the range to sort.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface implementation to use when comparing elements, or <see langword="null" /> to use the <see cref="T:System.IComparable`1" /> generic interface implementation of each element.</param>
      <typeparam name="TKey">The type of the elements of the key array.</typeparam>
      <typeparam name="TValue">The type of the elements of the items array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than the lower bound of <paramref name="keys" />.  
  
 -or-  
  
 <paramref name="length" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> is not <see langword="null" />, and the lower bound of <paramref name="keys" /> does not match the lower bound of <paramref name="items" />.  
  
 -or-  
  
 <paramref name="items" /> is not <see langword="null" />, and the length of <paramref name="keys" /> is greater than the length of <paramref name="items" />.  
  
 -or-  
  
 <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in the <paramref name="keys" /><see cref="T:System.Array" />.  
  
 -or-  
  
 <paramref name="items" /> is not <see langword="null" />, and <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in the <paramref name="items" /><see cref="T:System.Array" />.  
  
 -or-  
  
 The implementation of <paramref name="comparer" /> caused an error during the sort. For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is <see langword="null" />, and one or more elements in the <paramref name="keys" /><see cref="T:System.Array" /> do not implement the <see cref="T:System.IComparable`1" /> generic interface.</exception>
    </member>
    <member name="M:System.Array.System#Collections#IList#Add(System.Object)">
      <summary>Calling this method always throws a <see cref="T:System.NotSupportedException" /> exception.</summary>
      <param name="value">The object to be added to the <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList" /> has a fixed size.</exception>
      <returns>Adding a value to an array is not supported. No value is returned.</returns>
    </member>
    <member name="M:System.Array.System#Collections#IList#Clear">
      <summary>Removes all items from the <see cref="T:System.Collections.IList" />.</summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList" /> is read-only.</exception>
    </member>
    <member name="M:System.Array.System#Collections#IList#Contains(System.Object)">
      <summary>Determines whether an element is in the <see cref="T:System.Collections.IList" />.</summary>
      <param name="value">The object to locate in the current list. The element to locate can be <see langword="null" /> for reference types.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is found in the <see cref="T:System.Collections.IList" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Array.System#Collections#IList#IndexOf(System.Object)">
      <summary>Determines the index of a specific item in the <see cref="T:System.Collections.IList" />.</summary>
      <param name="value">The object to locate in the current list.</param>
      <returns>The index of value if found in the list; otherwise, -1.</returns>
    </member>
    <member name="M:System.Array.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Inserts an item to the <see cref="T:System.Collections.IList" /> at the specified index.</summary>
      <param name="index">The index at which <paramref name="value" /> should be inserted.</param>
      <param name="value">The object to insert.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList" /> is read-only.  
  
 -or-  
  
 The <see cref="T:System.Collections.IList" /> has a fixed size.</exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="value" /> is null reference in the <see cref="T:System.Collections.IList" />.</exception>
    </member>
    <member name="M:System.Array.System#Collections#IList#Remove(System.Object)">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList" />.</summary>
      <param name="value">The object to remove from the <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList" /> is read-only.  
  
 -or-  
  
 The <see cref="T:System.Collections.IList" /> has a fixed size.</exception>
    </member>
    <member name="M:System.Array.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Removes the <see cref="T:System.Collections.IList" /> item at the specified index.</summary>
      <param name="index">The index of the element to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.IList" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList" /> is read-only.  
  
 -or-  
  
 The <see cref="T:System.Collections.IList" /> has a fixed size.</exception>
    </member>
    <member name="M:System.Array.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>Determines whether the current collection object precedes, occurs in the same position as, or follows another object in the sort order.</summary>
      <param name="other">The object to compare with the current instance.</param>
      <param name="comparer">An object that compares the current object and <paramref name="other" />.</param>
      <returns>An integer that indicates the relationship of the current collection object to other, as shown in the following table.  
  
 <list type="table"><listheader><term> Return value</term><description> Description</description></listheader><item><term> -1</term><description> The current instance precedes <paramref name="other" />.</description></item><item><term> 0</term><description> The current instance and <paramref name="other" /> are equal.</description></item><item><term> 1</term><description> The current instance follows <paramref name="other" />.</description></item></list></returns>
    </member>
    <member name="M:System.Array.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>Determines whether an object is equal to the current instance.</summary>
      <param name="other">The object to compare with the current instance.</param>
      <param name="comparer">An object that determines whether the current instance and <paramref name="other" /> are equal.</param>
      <returns>
        <see langword="true" /> if the two objects are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Array.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>Returns a hash code for the current instance.</summary>
      <param name="comparer">An object that computes the hash code of the current object.</param>
      <returns>The hash code for the current instance.</returns>
    </member>
    <member name="M:System.Array.TrueForAll``1(``0[],System.Predicate{``0})">
      <summary>Determines whether every element in the array matches the conditions defined by the specified predicate.</summary>
      <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to check against the conditions.</param>
      <param name="match">The predicate that defines the conditions to check against the elements.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="match" /> is <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> if every element in <paramref name="array" /> matches the conditions defined by the specified predicate; otherwise, <see langword="false" />. If there are no elements in the array, the return value is <see langword="true" />.</returns>
    </member>
    <member name="P:System.Array.IsFixedSize">
      <summary>Gets a value indicating whether the <see cref="T:System.Array" /> has a fixed size.</summary>
      <returns>This property is always <see langword="true" /> for all arrays.</returns>
    </member>
    <member name="P:System.Array.IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Array" /> is read-only.</summary>
      <returns>This property is always <see langword="false" /> for all arrays.</returns>
    </member>
    <member name="P:System.Array.IsSynchronized">
      <summary>Gets a value indicating whether access to the <see cref="T:System.Array" /> is synchronized (thread safe).</summary>
      <returns>This property is always <see langword="false" /> for all arrays.</returns>
    </member>
    <member name="P:System.Array.Length">
      <summary>Gets the total number of elements in all the dimensions of the <see cref="T:System.Array" />.</summary>
      <exception cref="T:System.OverflowException">The array is multidimensional and contains more than <see cref="F:System.Int32.MaxValue" /> elements.</exception>
      <returns>The total number of elements in all the dimensions of the <see cref="T:System.Array" />; zero if there are no elements in the array.</returns>
    </member>
    <member name="P:System.Array.LongLength">
      <summary>Gets a 64-bit integer that represents the total number of elements in all the dimensions of the <see cref="T:System.Array" />.</summary>
      <returns>A 64-bit integer that represents the total number of elements in all the dimensions of the <see cref="T:System.Array" />.</returns>
    </member>
    <member name="P:System.Array.Rank">
      <summary>Gets the rank (number of dimensions) of the <see cref="T:System.Array" />. For example, a one-dimensional array returns 1, a two-dimensional array returns 2, and so on.</summary>
      <returns>The rank (number of dimensions) of the <see cref="T:System.Array" />.</returns>
    </member>
    <member name="P:System.Array.SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Array" />.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Array" />.</returns>
    </member>
    <member name="P:System.Array.System#Collections#ICollection#Count">
      <summary>Gets the number of elements contained in the <see cref="T:System.Array" />.</summary>
      <returns>The number of elements contained in the collection.</returns>
    </member>
    <member name="P:System.Array.System#Collections#IList#Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <param name="index">The index of the element to get or set.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.  
  
 -or-  
  
 <paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.ICollection.Count" />.</exception>
      <exception cref="T:System.ArgumentException">The current <see cref="T:System.Array" /> does not have exactly one dimension.</exception>
      <returns>The element at the specified index.</returns>
    </member>
    <member name="T:System.ArraySegment`1">
      <summary>Delimits a section of a one-dimensional array.</summary>
      <typeparam name="T">The type of the elements in the array segment.</typeparam>
    </member>
    <member name="M:System.ArraySegment`1.#ctor(`0[])">
      <summary>Initializes a new instance of the <see cref="T:System.ArraySegment`1" /> structure that delimits all the elements in the specified array.</summary>
      <param name="array">The array to wrap.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.ArraySegment`1.#ctor(`0[],System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.ArraySegment`1" /> structure that delimits the specified range of the elements in the specified array.</summary>
      <param name="array">The array containing the range of elements to delimit.</param>
      <param name="offset">The zero-based index of the first element in the range.</param>
      <param name="count">The number of elements in the range.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="count" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> and <paramref name="count" /> do not specify a valid range in <paramref name="array" />.</exception>
    </member>
    <member name="M:System.ArraySegment`1.CopyTo(`0[])">
      <summary>Copies the contents of this instance into the specified destination array of the same type <typeparamref name="T" />.</summary>
      <param name="destination">The array of type <paramref name="T" /> into which the contents of this instance will be copied.</param>
      <exception cref="T:System.InvalidOperationException">The underlying array of this instance is <see langword="null" />.</exception>
    </member>
    <member name="M:System.ArraySegment`1.CopyTo(`0[],System.Int32)">
      <summary>Copies the contents of this instance into the specified destination array of the same type <typeparamref name="T" />, starting at the specified destination index.</summary>
      <param name="destination">The array of type <paramref name="T" /> into which the contents of this instance will be copied.</param>
      <param name="destinationIndex">The index in <paramref name="destination" /> at which storing begins.</param>
      <exception cref="T:System.InvalidOperationException">The underlying array of this instance is <see langword="null" />.</exception>
    </member>
    <member name="M:System.ArraySegment`1.CopyTo(System.ArraySegment{`0})">
      <summary>Copies the contents of this instance into the specified destination array segment of the same type <typeparamref name="T" />.</summary>
      <param name="destination">The array segment into which the contents of this instance will be copied.</param>
      <exception cref="T:System.InvalidOperationException">The underlying array of this instance is <see langword="null" />.

 -or-

The underlying array of <paramref name="destination" /> is <paramref name="null" />.</exception>
      <exception cref="T:System.ArgumentException">The length of the underlying array of this instance is larger than the length of the underlying array of <paramref name="destination" />.</exception>
    </member>
    <member name="M:System.ArraySegment`1.Equals(System.ArraySegment{`0})">
      <summary>Determines whether the specified <see cref="T:System.ArraySegment`1" /> structure is equal to the current instance.</summary>
      <param name="obj">The structure to compare with the current instance.</param>
      <returns>
        <see langword="true" /> if the specified <see cref="T:System.ArraySegment`1" /> structure is equal to the current instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ArraySegment`1.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current instance.</summary>
      <param name="obj">The object to be compared with the current instance.</param>
      <returns>
        <see langword="true" /> if the specified object is a <see cref="T:System.ArraySegment`1" /> structure and is equal to the current instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ArraySegment`1.GetEnumerator">
      <summary>Returns an enumerator that can be used to iterate through the array segment.</summary>
      <exception cref="T:System.InvalidOperationException">The underlying array is <see langword="null" />.</exception>
      <returns>An enumerator that can be used to iterate through the array segment.</returns>
    </member>
    <member name="M:System.ArraySegment`1.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.ArraySegment`1.op_Equality(System.ArraySegment{`0},System.ArraySegment{`0})">
      <summary>Indicates whether two <see cref="T:System.ArraySegment`1" /> structures are equal.</summary>
      <param name="a">The  structure on the left side of the equality operator.</param>
      <param name="b">The structure on the right side of the equality operator.</param>
      <returns>
        <see langword="true" /> if <paramref name="a" /> is equal to <paramref name="b" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ArraySegment`1.op_Implicit(T[])~System.ArraySegment{`0}">
      <summary>Defines an implicit conversion of an array of type <typeparamref name="T" /> to an array segment of type <typeparamref name="T" />.</summary>
      <param name="array">The array to convert.</param>
      <returns>An array segment representation of the array.</returns>
    </member>
    <member name="M:System.ArraySegment`1.op_Inequality(System.ArraySegment{`0},System.ArraySegment{`0})">
      <summary>Indicates whether two <see cref="T:System.ArraySegment`1" /> structures are unequal.</summary>
      <param name="a">The structure on the left side of the inequality operator.</param>
      <param name="b">The structure on the right side of the inequality operator.</param>
      <returns>
        <see langword="true" /> if <paramref name="a" /> is not equal to <paramref name="b" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ArraySegment`1.Slice(System.Int32)">
      <summary>Forms a slice out of the current array segment starting at the specified index.</summary>
      <param name="index">The index at which to begin the slice.</param>
      <exception cref="T:System.InvalidOperationException">The underlying array of this instance is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is greater than the length of the underlying array of this instance.</exception>
      <returns>An array segment that consists of all elements of the current array segment from <paramref name="index" /> to the end of the array segment.</returns>
    </member>
    <member name="M:System.ArraySegment`1.Slice(System.Int32,System.Int32)">
      <summary>Forms a slice of the specified length out of the current array segment starting at the specified index.</summary>
      <param name="index">The index at which to begin the slice.</param>
      <param name="count">The desired length of the slice.</param>
      <exception cref="T:System.InvalidOperationException">The underlying array of this instance is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is greater than the length of the underlying array of this instance.

 -or-

<paramref name="count" /> is greater than the length of the underlying array of this instance - <paramref name="index" />.</exception>
      <returns>An array segment of <paramref name="count" /> elements starting at <paramref name="index" />.</returns>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Throws a <see cref="T:System.NotSupportedException" /> exception in all cases.</summary>
      <param name="item">The object to add to the array segment.</param>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>Throws a <see cref="T:System.NotSupportedException" /> exception in all cases.</summary>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Contains(`0)">
      <summary>Determines whether the array segment contains a specific value.</summary>
      <param name="item">The object to locate in the array segment.</param>
      <exception cref="T:System.InvalidOperationException">The underlying array is <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> if <paramref name="item" /> is found in the array segment; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>Throws a <see cref="T:System.NotSupportedException" /> exception in all cases.</summary>
      <param name="item">The object to remove from the array segment.</param>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
      <returns>Always throws an exception.</returns>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Returns an enumerator that iterates through the array segment.</summary>
      <exception cref="T:System.InvalidOperationException">The underlying array is <see langword="null" />.</exception>
      <returns>An enumerator that can be used to iterate through the array segment.</returns>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#IList{T}#IndexOf(`0)">
      <summary>Determines the index of a specific item in the array segment.</summary>
      <param name="item">The object to locate in the array segment.</param>
      <exception cref="T:System.InvalidOperationException">The underlying array is <see langword="null" />.</exception>
      <returns>The index of <paramref name="item" /> if found in the list; otherwise, -1.</returns>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary>Throws a <see cref="T:System.NotSupportedException" /> exception in all cases.</summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The object to insert into the array segment.</param>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary>Throws a <see cref="T:System.NotSupportedException" /> exception in all cases.</summary>
      <param name="index">The zero-based index of the item to remove.</param>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through an array segment.</summary>
      <exception cref="T:System.InvalidOperationException">The underlying array is <see langword="null" />.</exception>
      <returns>An enumerator that can be used to iterate through the array segment.</returns>
    </member>
    <member name="M:System.ArraySegment`1.ToArray">
      <summary>Copies the contents of this array segment into a new array.</summary>
      <exception cref="T:System.InvalidOperationException">
        <c>default(ArraySegment&lt;T&gt;)</c> cannot be converted to an array.</exception>
      <returns>An array containing the data in the current array segment.</returns>
    </member>
    <member name="P:System.ArraySegment`1.Array">
      <summary>Gets the original array containing the range of elements that the array segment delimits.</summary>
      <returns>The original array that was passed to the constructor, and that contains the range delimited by the <see cref="T:System.ArraySegment`1" />.</returns>
    </member>
    <member name="P:System.ArraySegment`1.Count">
      <summary>Gets the number of elements in the range delimited by the array segment.</summary>
      <returns>The number of elements in the range delimited by the <see cref="T:System.ArraySegment`1" />.</returns>
    </member>
    <member name="P:System.ArraySegment`1.Empty">
      <summary>Represents the empty array segment. This field is read-only.</summary>
      <returns>An array segment of type <typeparamref name="T" /> containing zero elements.</returns>
    </member>
    <member name="P:System.ArraySegment`1.Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <param name="index">The zero-based index of the element to get or set.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.ArraySegment`1" />.</exception>
      <returns>The element at the specified index.</returns>
    </member>
    <member name="P:System.ArraySegment`1.Offset">
      <summary>Gets the position of the first element in the range delimited by the array segment, relative to the start of the original array.</summary>
      <returns>The position of the first element in the range delimited by the <see cref="T:System.ArraySegment`1" />, relative to the start of the original array.</returns>
    </member>
    <member name="P:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Gets a value that indicates whether the array segment  is read-only.</summary>
      <returns>
        <see langword="true" /> if the array segment is read-only; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ArraySegment`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <param name="index">The zero-based index of the element to get or set.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.ArraySegment`1" />.</exception>
      <exception cref="T:System.NotSupportedException">The property is set and the array segment is read-only.</exception>
      <returns>The element at the specified index.</returns>
    </member>
    <member name="P:System.ArraySegment`1.System#Collections#Generic#IReadOnlyList{T}#Item(System.Int32)">
      <summary>Gets the element at the specified index of the array segment.</summary>
      <param name="index">The zero-based index of the element to get.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.ArraySegment`1" />.</exception>
      <exception cref="T:System.InvalidOperationException">The underlying array is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">The property is set.</exception>
      <returns>The element at the specified index.</returns>
    </member>
    <member name="T:System.ArrayTypeMismatchException">
      <summary>The exception that is thrown when an attempt is made to store an element of the wrong type within an array.</summary>
    </member>
    <member name="M:System.ArrayTypeMismatchException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ArrayTypeMismatchException" /> class.</summary>
    </member>
    <member name="M:System.ArrayTypeMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.ArrayTypeMismatchException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.ArrayTypeMismatchException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ArrayTypeMismatchException" /> class with a specified error message.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error.</param>
    </member>
    <member name="M:System.ArrayTypeMismatchException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ArrayTypeMismatchException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.AsyncCallback">
      <summary>References a method to be called when a corresponding asynchronous operation completes.</summary>
      <param name="ar">The result of the asynchronous operation.</param>
    </member>
    <member name="T:System.Attribute">
      <summary>Represents the base class for custom attributes.</summary>
    </member>
    <member name="M:System.Attribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Attribute" /> class.</summary>
    </member>
    <member name="M:System.Attribute.Equals(System.Object)">
      <summary>Returns a value that indicates whether this instance is equal to a specified object.</summary>
      <param name="obj">An <see cref="T:System.Object" /> to compare with this instance or <see langword="null" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> and this instance are of the same type and have identical field values; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)">
      <summary>Retrieves a custom attribute applied to a specified assembly. Parameters specify the assembly and the type of the custom attribute to search for.</summary>
      <param name="element">An object derived from the <see cref="T:System.Reflection.Assembly" /> class that describes a reusable collection of modules.</param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one of the requested attributes was found.</exception>
      <returns>A reference to the single custom attribute of type <paramref name="attributeType" /> that is applied to <paramref name="element" />, or <see langword="null" /> if there is no such attribute.</returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)">
      <summary>Retrieves a custom attribute applied to an assembly. Parameters specify the assembly, the type of the custom attribute to search for, and an ignored search option.</summary>
      <param name="element">An object derived from the <see cref="T:System.Reflection.Assembly" /> class that describes a reusable collection of modules.</param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <param name="inherit">This parameter is ignored, and does not affect the operation of this method.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one of the requested attributes was found.</exception>
      <returns>A reference to the single custom attribute of type <paramref name="attributeType" /> that is applied to <paramref name="element" />, or <see langword="null" /> if there is no such attribute.</returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)">
      <summary>Retrieves a custom attribute applied to a member of a type. Parameters specify the member, and the type of the custom attribute to search for.</summary>
      <param name="element">An object derived from the <see cref="T:System.Reflection.MemberInfo" /> class that describes a constructor, event, field, method, or property member of a class.</param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> is not a constructor, method, property, event, type, or field.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one of the requested attributes was found.</exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
      <returns>A reference to the single custom attribute of type <paramref name="attributeType" /> that is applied to <paramref name="element" />, or <see langword="null" /> if there is no such attribute.</returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)">
      <summary>Retrieves a custom attribute applied to a member of a type. Parameters specify the member, the type of the custom attribute to search for, and whether to search ancestors of the member.</summary>
      <param name="element">An object derived from the <see cref="T:System.Reflection.MemberInfo" /> class that describes a constructor, event, field, method, or property member of a class.</param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <param name="inherit">If <see langword="true" />, specifies to also search the ancestors of <paramref name="element" /> for custom attributes.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> is not a constructor, method, property, event, type, or field.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one of the requested attributes was found.</exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
      <returns>A reference to the single custom attribute of type <paramref name="attributeType" /> that is applied to <paramref name="element" />, or <see langword="null" /> if there is no such attribute.</returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)">
      <summary>Retrieves a custom attribute applied to a module. Parameters specify the module, and the type of the custom attribute to search for.</summary>
      <param name="element">An object derived from the <see cref="T:System.Reflection.Module" /> class that describes a portable executable file.</param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one of the requested attributes was found.</exception>
      <returns>A reference to the single custom attribute of type <paramref name="attributeType" /> that is applied to <paramref name="element" />, or <see langword="null" /> if there is no such attribute.</returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)">
      <summary>Retrieves a custom attribute applied to a module. Parameters specify the module, the type of the custom attribute to search for, and an ignored search option.</summary>
      <param name="element">An object derived from the <see cref="T:System.Reflection.Module" /> class that describes a portable executable file.</param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <param name="inherit">This parameter is ignored, and does not affect the operation of this method.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one of the requested attributes was found.</exception>
      <returns>A reference to the single custom attribute of type <paramref name="attributeType" /> that is applied to <paramref name="element" />, or <see langword="null" /> if there is no such attribute.</returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)">
      <summary>Retrieves a custom attribute applied to a method parameter. Parameters specify the method parameter, and the type of the custom attribute to search for.</summary>
      <param name="element">An object derived from the <see cref="T:System.Reflection.ParameterInfo" /> class that describes a parameter of a member of a class.</param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one of the requested attributes was found.</exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
      <returns>A reference to the single custom attribute of type <paramref name="attributeType" /> that is applied to <paramref name="element" />, or <see langword="null" /> if there is no such attribute.</returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
      <summary>Retrieves a custom attribute applied to a method parameter. Parameters specify the method parameter, the type of the custom attribute to search for, and whether to search ancestors of the method parameter.</summary>
      <param name="element">An object derived from the <see cref="T:System.Reflection.ParameterInfo" /> class that describes a parameter of a member of a class.</param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <param name="inherit">If <see langword="true" />, specifies to also search the ancestors of <paramref name="element" /> for custom attributes.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one of the requested attributes was found.</exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
      <returns>A reference to the single custom attribute of type <paramref name="attributeType" /> that is applied to <paramref name="element" />, or <see langword="null" /> if there is no such attribute.</returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly)">
      <summary>Retrieves an array of the custom attributes applied to an assembly. A parameter specifies the assembly.</summary>
      <param name="element">An object derived from the <see cref="T:System.Reflection.Assembly" /> class that describes a reusable collection of modules.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is <see langword="null" />.</exception>
      <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)">
      <summary>Retrieves an array of the custom attributes applied to an assembly. Parameters specify the assembly, and an ignored search option.</summary>
      <param name="element">An object derived from the <see cref="T:System.Reflection.Assembly" /> class that describes a reusable collection of modules.</param>
      <param name="inherit">This parameter is ignored, and does not affect the operation of this method.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)">
      <summary>Retrieves an array of the custom attributes applied to an assembly. Parameters specify the assembly, and the type of the custom attribute to search for.</summary>
      <param name="element">An object derived from the <see cref="T:System.Reflection.Assembly" /> class that describes a reusable collection of modules.</param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
      <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes of type <paramref name="attributeType" /> applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)">
      <summary>Retrieves an array of the custom attributes applied to an assembly. Parameters specify the assembly, the type of the custom attribute to search for, and an ignored search option.</summary>
      <param name="element">An object derived from the <see cref="T:System.Reflection.Assembly" /> class that describes a reusable collection of modules.</param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <param name="inherit">This parameter is ignored, and does not affect the operation of this method.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
      <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes of type <paramref name="attributeType" /> applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)">
      <summary>Retrieves an array of the custom attributes applied to a member of a type. A parameter specifies the member.</summary>
      <param name="element">An object derived from the <see cref="T:System.Reflection.MemberInfo" /> class that describes a constructor, event, field, method, or property member of a class.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> is not a constructor, method, property, event, type, or field.</exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
      <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)">
      <summary>Retrieves an array of the custom attributes applied to a member of a type. Parameters specify the member, the type of the custom attribute to search for, and whether to search ancestors of the member.</summary>
      <param name="element">An object derived from the <see cref="T:System.Reflection.MemberInfo" /> class that describes a constructor, event, field, method, or property member of a class.</param>
      <param name="inherit">If <see langword="true" />, specifies to also search the ancestors of <paramref name="element" /> for custom attributes.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> is not a constructor, method, property, event, type, or field.</exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
      <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)">
      <summary>Retrieves an array of the custom attributes applied to a member of a type. Parameters specify the member, and the type of the custom attribute to search for.</summary>
      <param name="element">An object derived from the <see cref="T:System.Reflection.MemberInfo" /> class that describes a constructor, event, field, method, or property member of a class.</param>
      <param name="type">The type, or a base type, of the custom attribute to search for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="type" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> is not derived from <see cref="T:System.Attribute" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> is not a constructor, method, property, event, type, or field.</exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
      <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes of type <paramref name="type" /> applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)">
      <summary>Retrieves an array of the custom attributes applied to a member of a type. Parameters specify the member, the type of the custom attribute to search for, and whether to search ancestors of the member.</summary>
      <param name="element">An object derived from the <see cref="T:System.Reflection.MemberInfo" /> class that describes a constructor, event, field, method, or property member of a class.</param>
      <param name="type">The type, or a base type, of the custom attribute to search for.</param>
      <param name="inherit">If <see langword="true" />, specifies to also search the ancestors of <paramref name="element" /> for custom attributes.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="type" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> is not derived from <see cref="T:System.Attribute" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> is not a constructor, method, property, event, type, or field.</exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
      <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes of type <paramref name="type" /> applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Module)">
      <summary>Retrieves an array of the custom attributes applied to a module. A parameter specifies the module.</summary>
      <param name="element">An object derived from the <see cref="T:System.Reflection.Module" /> class that describes a portable executable file.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is <see langword="null" />.</exception>
      <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)">
      <summary>Retrieves an array of the custom attributes applied to a module. Parameters specify the module, and an ignored search option.</summary>
      <param name="element">An object derived from the <see cref="T:System.Reflection.Module" /> class that describes a portable executable file.</param>
      <param name="inherit">This parameter is ignored, and does not affect the operation of this method.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)">
      <summary>Retrieves an array of the custom attributes applied to a module. Parameters specify the module, and the type of the custom attribute to search for.</summary>
      <param name="element">An object derived from the <see cref="T:System.Reflection.Module" /> class that describes a portable executable file.</param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
      <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes of type <paramref name="attributeType" /> applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)">
      <summary>Retrieves an array of the custom attributes applied to a module. Parameters specify the module, the type of the custom attribute to search for, and an ignored search option.</summary>
      <param name="element">An object derived from the <see cref="T:System.Reflection.Module" /> class that describes a portable executable file.</param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <param name="inherit">This parameter is ignored, and does not affect the operation of this method.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
      <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes of type <paramref name="attributeType" /> applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)">
      <summary>Retrieves an array of the custom attributes applied to a method parameter. A parameter specifies the method parameter.</summary>
      <param name="element">An object derived from the <see cref="T:System.Reflection.ParameterInfo" /> class that describes a parameter of a member of a class.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is <see langword="null" />.</exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
      <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)">
      <summary>Retrieves an array of the custom attributes applied to a method parameter. Parameters specify the method parameter, and whether to search ancestors of the method parameter.</summary>
      <param name="element">An object derived from the <see cref="T:System.Reflection.ParameterInfo" /> class that describes a parameter of a member of a class.</param>
      <param name="inherit">If <see langword="true" />, specifies to also search the ancestors of <paramref name="element" /> for custom attributes.</param>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.Reflection.ParameterInfo.Member" /> property of <paramref name="element" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is <see langword="null" />.</exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
      <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)">
      <summary>Retrieves an array of the custom attributes applied to a method parameter. Parameters specify the method parameter, and the type of the custom attribute to search for.</summary>
      <param name="element">An object derived from the <see cref="T:System.Reflection.ParameterInfo" /> class that describes a parameter of a member of a class.</param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
      <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes of type <paramref name="attributeType" /> applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
      <summary>Retrieves an array of the custom attributes applied to a method parameter. Parameters specify the method parameter, the type of the custom attribute to search for, and whether to search ancestors of the method parameter.</summary>
      <param name="element">An object derived from the <see cref="T:System.Reflection.ParameterInfo" /> class that describes a parameter of a member of a class.</param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <param name="inherit">If <see langword="true" />, specifies to also search the ancestors of <paramref name="element" /> for custom attributes.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
      <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes of type <paramref name="attributeType" /> applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
    </member>
    <member name="M:System.Attribute.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Attribute.IsDefaultAttribute">
      <summary>When overridden in a derived class, indicates whether the value of this instance is the default value for the derived class.</summary>
      <returns>
        <see langword="true" /> if this instance is the default attribute for the class; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)">
      <summary>Determines whether any custom attributes are applied to an assembly. Parameters specify the assembly, and the type of the custom attribute to search for.</summary>
      <param name="element">An object derived from the <see cref="T:System.Reflection.Assembly" /> class that describes a reusable collection of modules.</param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
      <returns>
        <see langword="true" /> if a custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)">
      <summary>Determines whether any custom attributes are applied to an assembly. Parameters specify the assembly, the type of the custom attribute to search for, and an ignored search option.</summary>
      <param name="element">An object derived from the <see cref="T:System.Reflection.Assembly" /> class that describes a reusable collection of modules.</param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <param name="inherit">This parameter is ignored, and does not affect the operation of this method.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
      <returns>
        <see langword="true" /> if a custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)">
      <summary>Determines whether any custom attributes are applied to a member of a type. Parameters specify the member, and the type of the custom attribute to search for.</summary>
      <param name="element">An object derived from the <see cref="T:System.Reflection.MemberInfo" /> class that describes a constructor, event, field, method, type, or property member of a class.</param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> is not a constructor, method, property, event, type, or field.</exception>
      <returns>
        <see langword="true" /> if a custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)">
      <summary>Determines whether any custom attributes are applied to a member of a type. Parameters specify the member, the type of the custom attribute to search for, and whether to search ancestors of the member.</summary>
      <param name="element">An object derived from the <see cref="T:System.Reflection.MemberInfo" /> class that describes a constructor, event, field, method, type, or property member of a class.</param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <param name="inherit">If <see langword="true" />, specifies to also search the ancestors of <paramref name="element" /> for custom attributes.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> is not a constructor, method, property, event, type, or field.</exception>
      <returns>
        <see langword="true" /> if a custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.Module,System.Type)">
      <summary>Determines whether any custom attributes of a specified type are applied to a module. Parameters specify the module, and the type of the custom attribute to search for.</summary>
      <param name="element">An object derived from the <see cref="T:System.Reflection.Module" /> class that describes a portable executable file.</param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
      <returns>
        <see langword="true" /> if a custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)">
      <summary>Determines whether any custom attributes are applied to a module. Parameters specify the module, the type of the custom attribute to search for, and an ignored search option.</summary>
      <param name="element">An object derived from the <see cref="T:System.Reflection.Module" /> class that describes a portable executable file.</param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <param name="inherit">This parameter is ignored, and does not affect the operation of this method.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
      <returns>
        <see langword="true" /> if a custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)">
      <summary>Determines whether any custom attributes are applied to a method parameter. Parameters specify the method parameter, and the type of the custom attribute to search for.</summary>
      <param name="element">An object derived from the <see cref="T:System.Reflection.ParameterInfo" /> class that describes a parameter of a member of a class.</param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
      <returns>
        <see langword="true" /> if a custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
      <summary>Determines whether any custom attributes are applied to a method parameter. Parameters specify the method parameter, the type of the custom attribute to search for, and whether to search ancestors of the method parameter.</summary>
      <param name="element">An object derived from the <see cref="T:System.Reflection.ParameterInfo" /> class that describes a parameter of a member of a class.</param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <param name="inherit">If <see langword="true" />, specifies to also search the ancestors of <paramref name="element" /> for custom attributes.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
      <exception cref="T:System.ExecutionEngineException">
        <paramref name="element" /> is not a method, constructor, or type.</exception>
      <returns>
        <see langword="true" /> if a custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Attribute.Match(System.Object)">
      <summary>When overridden in a derived class, returns a value that indicates whether this instance equals a specified object.</summary>
      <param name="obj">An <see cref="T:System.Object" /> to compare with this instance of <see cref="T:System.Attribute" />.</param>
      <returns>
        <see langword="true" /> if this instance equals <paramref name="obj" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Attribute.TypeId">
      <summary>When implemented in a derived class, gets a unique identifier for this <see cref="T:System.Attribute" />.</summary>
      <returns>An <see cref="T:System.Object" /> that is a unique identifier for the attribute.</returns>
    </member>
    <member name="T:System.AttributeTargets">
      <summary>Specifies the application elements on which it is valid to apply an attribute.</summary>
    </member>
    <member name="F:System.AttributeTargets.All">
      <summary>Attribute can be applied to any application element.</summary>
    </member>
    <member name="F:System.AttributeTargets.Assembly">
      <summary>Attribute can be applied to an assembly.</summary>
    </member>
    <member name="F:System.AttributeTargets.Class">
      <summary>Attribute can be applied to a class.</summary>
    </member>
    <member name="F:System.AttributeTargets.Constructor">
      <summary>Attribute can be applied to a constructor.</summary>
    </member>
    <member name="F:System.AttributeTargets.Delegate">
      <summary>Attribute can be applied to a delegate.</summary>
    </member>
    <member name="F:System.AttributeTargets.Enum">
      <summary>Attribute can be applied to an enumeration.</summary>
    </member>
    <member name="F:System.AttributeTargets.Event">
      <summary>Attribute can be applied to an event.</summary>
    </member>
    <member name="F:System.AttributeTargets.Field">
      <summary>Attribute can be applied to a field.</summary>
    </member>
    <member name="F:System.AttributeTargets.GenericParameter">
      <summary>Attribute can be applied to a generic parameter. Currently, this attribute can be applied only in C#, Microsoft intermediate language (MSIL), and emitted code.</summary>
    </member>
    <member name="F:System.AttributeTargets.Interface">
      <summary>Attribute can be applied to an interface.</summary>
    </member>
    <member name="F:System.AttributeTargets.Method">
      <summary>Attribute can be applied to a method.</summary>
    </member>
    <member name="F:System.AttributeTargets.Module">
      <summary>Attribute can be applied to a module. <see langword="Module" /> refers to a portable executable file (.dll or.exe) and not a Visual Basic standard module.</summary>
    </member>
    <member name="F:System.AttributeTargets.Parameter">
      <summary>Attribute can be applied to a parameter.</summary>
    </member>
    <member name="F:System.AttributeTargets.Property">
      <summary>Attribute can be applied to a property.</summary>
    </member>
    <member name="F:System.AttributeTargets.ReturnValue">
      <summary>Attribute can be applied to a return value.</summary>
    </member>
    <member name="F:System.AttributeTargets.Struct">
      <summary>Attribute can be applied to a structure; that is, a value type.</summary>
    </member>
    <member name="T:System.AttributeUsageAttribute">
      <summary>Specifies the usage of another attribute class. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.AttributeUsageAttribute.#ctor(System.AttributeTargets)">
      <summary>Initializes a new instance of the <see cref="T:System.AttributeUsageAttribute" /> class with the specified list of <see cref="T:System.AttributeTargets" />, the <see cref="P:System.AttributeUsageAttribute.AllowMultiple" /> value, and the <see cref="P:System.AttributeUsageAttribute.Inherited" /> value.</summary>
      <param name="validOn">The set of values combined using a bitwise OR operation to indicate which program elements are valid.</param>
    </member>
    <member name="P:System.AttributeUsageAttribute.AllowMultiple">
      <summary>Gets or sets a Boolean value indicating whether more than one instance of the indicated attribute can be specified for a single program element.</summary>
      <returns>
        <see langword="true" /> if more than one instance is allowed to be specified; otherwise, <see langword="false" />. The default is <see langword="false" />.</returns>
    </member>
    <member name="P:System.AttributeUsageAttribute.Inherited">
      <summary>Gets or sets a <see cref="T:System.Boolean" /> value that determines whether the indicated attribute is inherited by derived classes and overriding members.</summary>
      <returns>
        <see langword="true" /> if the attribute can be inherited by derived classes and overriding members; otherwise, <see langword="false" />. The default is <see langword="true" />.</returns>
    </member>
    <member name="P:System.AttributeUsageAttribute.ValidOn">
      <summary>Gets a set of values identifying which program elements that the indicated attribute can be applied to.</summary>
      <returns>One or several <see cref="T:System.AttributeTargets" /> values. The default is <see langword="All" />.</returns>
    </member>
    <member name="T:System.BadImageFormatException">
      <summary>The exception that is thrown when the file image of a dynamic link library (DLL) or an executable program is invalid.</summary>
    </member>
    <member name="M:System.BadImageFormatException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.BadImageFormatException" /> class.</summary>
    </member>
    <member name="M:System.BadImageFormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.BadImageFormatException" /> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.BadImageFormatException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.BadImageFormatException" /> class with a specified error message.</summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.BadImageFormatException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.BadImageFormatException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not a null reference, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.BadImageFormatException.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.BadImageFormatException" /> class with a specified error message and file name.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="fileName">The full name of the file with the invalid image.</param>
    </member>
    <member name="M:System.BadImageFormatException.#ctor(System.String,System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.BadImageFormatException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="fileName">The full name of the file with the invalid image.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.BadImageFormatException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the file name, assembly cache log, and additional exception information.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.BadImageFormatException.ToString">
      <summary>Returns the fully qualified name of this exception and possibly the error message, the name of the inner exception, and the stack trace.</summary>
      <returns>A string containing the fully qualified name of this exception and possibly the error message, the name of the inner exception, and the stack trace.</returns>
    </member>
    <member name="P:System.BadImageFormatException.FileName">
      <summary>Gets the name of the file that causes this exception.</summary>
      <returns>The name of the file with the invalid image, or a null reference if no file name was passed to the constructor for the current instance.</returns>
    </member>
    <member name="P:System.BadImageFormatException.FusionLog">
      <summary>Gets the log file that describes why an assembly load failed.</summary>
      <returns>A <see langword="String" /> containing errors reported by the assembly cache.</returns>
    </member>
    <member name="P:System.BadImageFormatException.Message">
      <summary>Gets the error message and the name of the file that caused this exception.</summary>
      <returns>A string containing the error message and the name of the file that caused this exception.</returns>
    </member>
    <member name="T:System.Boolean">
      <summary>Represents a Boolean (<see langword="true" /> or <see langword="false" />) value.</summary>
    </member>
    <member name="F:System.Boolean.FalseString">
      <summary>Represents the Boolean value <see langword="false" /> as a string. This field is read-only.</summary>
    </member>
    <member name="F:System.Boolean.TrueString">
      <summary>Represents the Boolean value <see langword="true" /> as a string. This field is read-only.</summary>
    </member>
    <member name="M:System.Boolean.CompareTo(System.Boolean)">
      <summary>Compares this instance to a specified <see cref="T:System.Boolean" /> object and returns an integer that indicates their relationship to one another.</summary>
      <param name="value">A <see cref="T:System.Boolean" /> object to compare to this instance.</param>
      <returns>A signed integer that indicates the relative values of this instance and <paramref name="value" />.

 <list type="table"><listheader><term> Return Value</term><description> Condition</description></listheader><item><term> Less than zero</term><description> This instance is <see langword="false" /> and <paramref name="value" /> is <see langword="true" />.</description></item><item><term> Zero</term><description> This instance and <paramref name="value" /> are equal (either both are <see langword="true" /> or both are <see langword="false" />).</description></item><item><term> Greater than zero</term><description> This instance is <see langword="true" /> and <paramref name="value" /> is <see langword="false" />.</description></item></list></returns>
    </member>
    <member name="M:System.Boolean.CompareTo(System.Object)">
      <summary>Compares this instance to a specified object and returns an integer that indicates their relationship to one another.</summary>
      <param name="obj">An object to compare to this instance, or <see langword="null" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not a <see cref="T:System.Boolean" />.</exception>
      <returns>A signed integer that indicates the relative order of this instance and <paramref name="obj" />.

 <list type="table"><listheader><term> Return Value</term><description> Condition</description></listheader><item><term> Less than zero</term><description> This instance is <see langword="false" /> and <paramref name="obj" /> is <see langword="true" />.</description></item><item><term> Zero</term><description> This instance and <paramref name="obj" /> are equal (either both are <see langword="true" /> or both are <see langword="false" />).</description></item><item><term> Greater than zero</term><description> This instance is <see langword="true" /> and <paramref name="obj" /> is <see langword="false" />.

 -or-

 <paramref name="obj" /> is <see langword="null" />.</description></item></list></returns>
    </member>
    <member name="M:System.Boolean.Equals(System.Boolean)">
      <summary>Returns a value indicating whether this instance is equal to a specified <see cref="T:System.Boolean" /> object.</summary>
      <param name="obj">A <see cref="T:System.Boolean" /> value to compare to this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> has the same value as this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Boolean.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="obj">An object to compare to this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> is a <see cref="T:System.Boolean" /> and has the same value as this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Boolean.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A hash code for the current <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:System.Boolean.GetTypeCode">
      <summary>Returns the type code for the <see cref="T:System.Boolean" /> value type.</summary>
      <returns>The enumerated constant <see cref="F:System.TypeCode.Boolean" />.</returns>
    </member>
    <member name="M:System.Boolean.Parse(System.ReadOnlySpan{System.Char})">
      <summary>Converts the specified span representation of a logical value to its <see cref="T:System.Boolean" /> equivalent.</summary>
      <param name="value">A span containing the characters representing the value to convert.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is equivalent to <see cref="F:System.Boolean.TrueString" />; <see langword="false" /> if <paramref name="value" /> is equivalent to <see cref="F:System.Boolean.FalseString" />.</returns>
    </member>
    <member name="M:System.Boolean.Parse(System.String)">
      <summary>Converts the specified string representation of a logical value to its <see cref="T:System.Boolean" /> equivalent.</summary>
      <param name="value">A string containing the value to convert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> is not equivalent to <see cref="F:System.Boolean.TrueString" /> or <see cref="F:System.Boolean.FalseString" />.</exception>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is equivalent to <see cref="F:System.Boolean.TrueString" />; <see langword="false" /> if <paramref name="value" /> is equivalent to <see cref="F:System.Boolean.FalseString" />.</returns>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>
        <see langword="true" /> or <see langword="false" />.</returns>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>1 if the value of this instance is <see langword="true" />; otherwise, 0.</returns>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.InvalidCastException">You attempt to convert a <see cref="T:System.Boolean" /> value to a <see cref="T:System.Char" /> value. This conversion is not supported.</exception>
      <returns>This conversion is not supported. No value is returned.</returns>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.InvalidCastException">You attempt to convert a <see cref="T:System.Boolean" /> value to a <see cref="T:System.DateTime" /> value. This conversion is not supported.</exception>
      <returns>This conversion is not supported. No value is returned.</returns>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>1 if this instance is <see langword="true" />; otherwise, 0.</returns>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>1 if this instance is <see langword="true" />; otherwise, 0.</returns>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>1 if this instance is <see langword="true" />; otherwise, 0.</returns>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>1 if this instance is <see langword="true" />; otherwise, 0.</returns>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>1 if this instance is <see langword="true" />; otherwise, 0.</returns>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>1 if this instance is <see langword="true" />; otherwise, 0.</returns>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>1 if this instance is <see langword="true" />; otherwise, 0.</returns>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />.</summary>
      <param name="type">The desired type.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> implementation that supplies culture-specific information about the format of the returned value.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidCastException">The requested type conversion is not supported.</exception>
      <returns>An object of the specified type, with a value that is equivalent to the value of this <see langword="Boolean" /> object.</returns>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>1 if this instance is <see langword="true" />; otherwise, 0.</returns>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>1 if this instance is <see langword="true" />; otherwise, 0.</returns>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>1 if this instance is <see langword="true" />; otherwise, 0.</returns>
    </member>
    <member name="M:System.Boolean.ToString">
      <summary>Converts the value of this instance to its equivalent string representation (either "True" or "False").</summary>
      <returns>"True" (the value of the <see cref="F:System.Boolean.TrueString" /> property) if the value of this instance is <see langword="true" />, or "False" (the value of the <see cref="F:System.Boolean.FalseString" /> property) if the value of this instance is <see langword="false" />.</returns>
    </member>
    <member name="M:System.Boolean.ToString(System.IFormatProvider)">
      <summary>Converts the value of this instance to its equivalent string representation (either "True" or "False").</summary>
      <param name="provider">(Reserved) An <see cref="T:System.IFormatProvider" /> object.</param>
      <returns>
        <see cref="F:System.Boolean.TrueString" /> if the value of this instance is <see langword="true" />, or <see cref="F:System.Boolean.FalseString" /> if the value of this instance is <see langword="false" />.</returns>
    </member>
    <member name="M:System.Boolean.TryFormat(System.Span{System.Char},System.Int32@)">
      <summary>Tries to format the value of the current boolean instance into the provided span of characters.</summary>
      <param name="destination">When this method returns, this instance's value formatted as a span of characters.</param>
      <param name="charsWritten">When this method returns, the number of characters that were written in <paramref name="destination" />.</param>
      <returns>
        <see langword="true" /> if the formatting was successful; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Boolean.TryParse(System.ReadOnlySpan{System.Char},System.Boolean@)">
      <summary>Tries to convert the specified span representation of a logical value to its <see cref="T:System.Boolean" /> equivalent.</summary>
      <param name="value">A span containing the characters representing the value to convert.</param>
      <param name="result">When this method returns, if the conversion succeeded, contains <see langword="true" /> if <paramref name="value" /> is equal to <see cref="F:System.Boolean.TrueString" /> or <see langword="false" /> if <paramref name="value" /> is equal to <see cref="F:System.Boolean.FalseString" />. If the conversion failed, contains <see langword="false" />. The conversion fails if <paramref name="value" /> is <see langword="null" /> or is not equal to the value of either the <see cref="F:System.Boolean.TrueString" /> or <see cref="F:System.Boolean.FalseString" /> field.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Boolean.TryParse(System.String,System.Boolean@)">
      <summary>Tries to convert the specified string representation of a logical value to its <see cref="T:System.Boolean" /> equivalent.</summary>
      <param name="value">A string containing the value to convert.</param>
      <param name="result">When this method returns, if the conversion succeeded, contains <see langword="true" /> if <paramref name="value" /> is equal to <see cref="F:System.Boolean.TrueString" /> or <see langword="false" /> if <paramref name="value" /> is equal to <see cref="F:System.Boolean.FalseString" />. If the conversion failed, contains <see langword="false" />. The conversion fails if <paramref name="value" /> is <see langword="null" /> or is not equal to the value of either the <see cref="F:System.Boolean.TrueString" /> or <see cref="F:System.Boolean.FalseString" /> field.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Buffer">
      <summary>Manipulates arrays of primitive types.</summary>
    </member>
    <member name="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
      <summary>Copies a specified number of bytes from a source array starting at a particular offset to a destination array starting at a particular offset.</summary>
      <param name="src">The source buffer.</param>
      <param name="srcOffset">The zero-based byte offset into <paramref name="src" />.</param>
      <param name="dst">The destination buffer.</param>
      <param name="dstOffset">The zero-based byte offset into <paramref name="dst" />.</param>
      <param name="count">The number of bytes to copy.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="src" /> or <paramref name="dst" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="src" /> or <paramref name="dst" /> is not an array of primitives.  
  
 -or-  
  
 The number of bytes in <paramref name="src" /> is less than <paramref name="srcOffset" /> plus <paramref name="count" />.  
  
 -or-  
  
 The number of bytes in <paramref name="dst" /> is less than <paramref name="dstOffset" /> plus <paramref name="count" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="srcOffset" />, <paramref name="dstOffset" />, or <paramref name="count" /> is less than 0.</exception>
    </member>
    <member name="M:System.Buffer.ByteLength(System.Array)">
      <summary>Returns the number of bytes in the specified array.</summary>
      <param name="array">An array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is not a primitive.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="array" /> is larger than 2 gigabytes (GB).</exception>
      <returns>The number of bytes in the array.</returns>
    </member>
    <member name="M:System.Buffer.GetByte(System.Array,System.Int32)">
      <summary>Retrieves the byte at the specified location in the specified array.</summary>
      <param name="array">An array.</param>
      <param name="index">A location in the array.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is not a primitive.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is negative or greater than the length of <paramref name="array" />.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="array" /> is larger than 2 gigabytes (GB).</exception>
      <returns>The byte at the specified location in the array.</returns>
    </member>
    <member name="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.Int64,System.Int64)">
      <summary>Copies a number of bytes specified as a long integer value from one address in memory to another.  
  
 This API is not CLS-compliant.</summary>
      <param name="source">The address of the bytes to copy.</param>
      <param name="destination">The target address.</param>
      <param name="destinationSizeInBytes">The number of bytes available in the destination memory block.</param>
      <param name="sourceBytesToCopy">The number of bytes to copy.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceBytesToCopy" /> is greater than <paramref name="destinationSizeInBytes" />.</exception>
    </member>
    <member name="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.UInt64,System.UInt64)">
      <summary>Copies a number of bytes specified as an unsigned long integer value from one address in memory to another.  
  
 This API is not CLS-compliant.</summary>
      <param name="source">The address of the bytes to copy.</param>
      <param name="destination">The target address.</param>
      <param name="destinationSizeInBytes">The number of bytes available in the destination memory block.</param>
      <param name="sourceBytesToCopy">The number of bytes to copy.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceBytesToCopy" /> is greater than <paramref name="destinationSizeInBytes" />.</exception>
    </member>
    <member name="M:System.Buffer.SetByte(System.Array,System.Int32,System.Byte)">
      <summary>Assigns a specified value to a byte at a particular location in a specified array.</summary>
      <param name="array">An array.</param>
      <param name="index">A location in the array.</param>
      <param name="value">A value to assign.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is not a primitive.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is negative or greater than the length of <paramref name="array" />.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="array" /> is larger than 2 gigabytes (GB).</exception>
    </member>
    <member name="T:System.Byte">
      <summary>Represents an 8-bit unsigned integer.</summary>
    </member>
    <member name="F:System.Byte.MaxValue">
      <summary>Represents the largest possible value of a <see cref="T:System.Byte" />. This field is constant.</summary>
    </member>
    <member name="F:System.Byte.MinValue">
      <summary>Represents the smallest possible value of a <see cref="T:System.Byte" />. This field is constant.</summary>
    </member>
    <member name="M:System.Byte.CompareTo(System.Byte)">
      <summary>Compares this instance to a specified 8-bit unsigned integer and returns an indication of their relative values.</summary>
      <param name="value">An 8-bit unsigned integer to compare.</param>
      <returns>A signed integer that indicates the relative order of this instance and <paramref name="value" />.  
  
 <list type="table"><listheader><term> Return Value</term><description> Description</description></listheader><item><term> Less than zero</term><description> This instance is less than <paramref name="value" />.</description></item><item><term> Zero</term><description> This instance is equal to <paramref name="value" />.</description></item><item><term> Greater than zero</term><description> This instance is greater than <paramref name="value" />.</description></item></list></returns>
    </member>
    <member name="M:System.Byte.CompareTo(System.Object)">
      <summary>Compares this instance to a specified object and returns an indication of their relative values.</summary>
      <param name="value">An object to compare, or <see langword="null" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.Byte" />.</exception>
      <returns>A signed integer that indicates the relative order of this instance and <paramref name="value" />.  
  
 <list type="table"><listheader><term> Return Value</term><description> Description</description></listheader><item><term> Less than zero</term><description> This instance is less than <paramref name="value" />.</description></item><item><term> Zero</term><description> This instance is equal to <paramref name="value" />.</description></item><item><term> Greater than zero</term><description> This instance is greater than <paramref name="value" />, or <paramref name="value" /> is <see langword="null" />.</description></item></list></returns>
    </member>
    <member name="M:System.Byte.Equals(System.Byte)">
      <summary>Returns a value indicating whether this instance and a specified <see cref="T:System.Byte" /> object represent the same value.</summary>
      <param name="obj">An object to compare to this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> is equal to this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Byte.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="obj">An object to compare with this instance, or <see langword="null" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> is an instance of <see cref="T:System.Byte" /> and equals the value of this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Byte.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A hash code for the current <see cref="T:System.Byte" />.</returns>
    </member>
    <member name="M:System.Byte.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Byte" />.</summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.Byte" />.</returns>
    </member>
    <member name="M:System.Byte.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Converts the span representation of a number in a specified style and culture-specific format to its <see cref="T:System.Byte" /> equivalent.</summary>
      <param name="s">A span containing the characters representing the value to convert.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An object that supplies culture-specific information about the format of <paramref name="s" />. If <paramref name="provider" /> is <see langword="null" />, the thread current culture is used.</param>
      <returns>A byte value that is equivalent to the number contained in <paramref name="s" />.</returns>
    </member>
    <member name="M:System.Byte.Parse(System.String)">
      <summary>Converts the string representation of a number to its <see cref="T:System.Byte" /> equivalent.</summary>
      <param name="s">A string that contains a number to convert. The string is interpreted using the <see cref="F:System.Globalization.NumberStyles.Integer" /> style.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not of the correct format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />.</exception>
      <returns>A byte value that is equivalent to the number contained in <paramref name="s" />.</returns>
    </member>
    <member name="M:System.Byte.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>Converts the string representation of a number in a specified style to its <see cref="T:System.Byte" /> equivalent.</summary>
      <param name="s">A string that contains a number to convert. The string is interpreted using the style specified by <paramref name="style" />.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not of the correct format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />.  
  
 -or-  
  
 <paramref name="s" /> includes non-zero, fractional digits.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  
  
 -or-  
  
 <paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <returns>A byte value that is equivalent to the number contained in <paramref name="s" />.</returns>
    </member>
    <member name="M:System.Byte.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:System.Byte" /> equivalent.</summary>
      <param name="s">A string that contains a number to convert. The string is interpreted using the style specified by <paramref name="style" />.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An object that supplies culture-specific information about the format of <paramref name="s" />. If <paramref name="provider" /> is <see langword="null" />, the thread current culture is used.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not of the correct format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />.  
  
 -or-  
  
 <paramref name="s" /> includes non-zero, fractional digits.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  
  
 -or-  
  
 <paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <returns>A byte value that is equivalent to the number contained in <paramref name="s" />.</returns>
    </member>
    <member name="M:System.Byte.Parse(System.String,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified culture-specific format to its <see cref="T:System.Byte" /> equivalent.</summary>
      <param name="s">A string that contains a number to convert. The string is interpreted using the <see cref="F:System.Globalization.NumberStyles.Integer" /> style.</param>
      <param name="provider">An object that supplies culture-specific parsing information about <paramref name="s" />. If <paramref name="provider" /> is <see langword="null" />, the thread current culture is used.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not of the correct format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />.</exception>
      <returns>A byte value that is equivalent to the number contained in <paramref name="s" />.</returns>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>
        <see langword="true" /> if the value of the current instance is not zero; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, unchanged.</returns>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Char" />.</returns>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
      <returns>This conversion is not supported. No value is returned.</returns>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Decimal" />.</returns>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Double" />.</returns>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int16" />.</returns>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int64" />.</returns>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to an <see cref="T:System.SByte" />.</returns>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Single" />.</returns>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />.</summary>
      <param name="type">The type to which to convert this <see cref="T:System.Byte" /> value.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> implementation that supplies information about the format of the returned value.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidCastException">The requested type conversion is not supported.</exception>
      <returns>The value of the current instance, converted to <paramref name="type" />.</returns>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt16" />.</returns>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt32" />.</returns>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt64" />.</returns>
    </member>
    <member name="M:System.Byte.ToString">
      <summary>Converts the value of the current <see cref="T:System.Byte" /> object to its equivalent string representation.</summary>
      <returns>The string representation of the value of this object, which consists of a sequence of digits that range from 0 to 9 with no leading zeroes.</returns>
    </member>
    <member name="M:System.Byte.ToString(System.IFormatProvider)">
      <summary>Converts the numeric value of the current <see cref="T:System.Byte" /> object to its equivalent string representation using the specified culture-specific formatting information.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>The string representation of the value of this object in the format specified by the <paramref name="provider" /> parameter.</returns>
    </member>
    <member name="M:System.Byte.ToString(System.String)">
      <summary>Converts the value of the current <see cref="T:System.Byte" /> object to its equivalent string representation using the specified format.</summary>
      <param name="format">A numeric format string.</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> includes an unsupported specifier. Supported format specifiers are listed in the Remarks section.</exception>
      <returns>The string representation of the current <see cref="T:System.Byte" /> object, formatted as specified by the <paramref name="format" /> parameter.</returns>
    </member>
    <member name="M:System.Byte.ToString(System.String,System.IFormatProvider)">
      <summary>Converts the value of the current <see cref="T:System.Byte" /> object to its equivalent string representation using the specified format and culture-specific formatting information.</summary>
      <param name="format">A standard or custom numeric format string.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> includes an unsupported specifier. Supported format specifiers are listed in the Remarks section.</exception>
      <returns>The string representation of the current <see cref="T:System.Byte" /> object, formatted as specified by the <paramref name="format" /> and <paramref name="provider" /> parameters.</returns>
    </member>
    <member name="M:System.Byte.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <summary>Tries to format the value of the current 8-bit unsigned integer instance into the provided span of characters.</summary>
      <param name="destination">When this method returns, this instance's value formatted as a span of characters.</param>
      <param name="charsWritten">When this method returns, the number of characters that were written in <paramref name="destination" />.</param>
      <param name="format">A span containing the charactes that represent a standard or custom format string that defines the acceptable format for <paramref name="destination" />.</param>
      <param name="provider">An optional object that supplies culture-specific formatting information for <paramref name="destination" />.</param>
      <returns>
        <see langword="true" /> if the formatting was successful; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Byte.TryParse(System.ReadOnlySpan{System.Char},System.Byte@)">
      <summary>Tries to convert the span representation of a number to its <see cref="T:System.Byte" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
      <param name="s">A span containing the characters representing the number to convert.</param>
      <param name="result">When this method returns, contains the <see cref="T:System.Byte" /> value equivalent to the number contained in <paramref name="s" /> if the conversion succeeded, or zero if the conversion failed. This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Byte.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Byte@)">
      <summary>Converts the span representation of a number in a specified style and culture-specific format to its <see cref="T:System.Byte" /> equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <param name="s">A span containing the characters representing the number to convert. The span is interpreted using the <see cref="F:System.Globalization.NumberStyles.Integer" /> style.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />. If <paramref name="provider" /> is <see langword="null" />, the thread current culture is used.</param>
      <param name="result">When this method returns, contains the 8-bit unsigned integer value equivalent to the number contained in <paramref name="s" /> if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not of the correct format, or represents a number less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />. This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Byte.TryParse(System.String,System.Byte@)">
      <summary>Tries to convert the string representation of a number to its <see cref="T:System.Byte" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
      <param name="s">A string that contains a number to convert.</param>
      <param name="result">When this method returns, contains the <see cref="T:System.Byte" /> value equivalent to the number contained in <paramref name="s" /> if the conversion succeeded, or zero if the conversion failed. This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Byte.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Byte@)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:System.Byte" /> equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <param name="s">A string containing a number to convert. The string is interpreted using the style specified by <paramref name="style" />.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />. If <paramref name="provider" /> is <see langword="null" />, the thread current culture is used.</param>
      <param name="result">When this method returns, contains the 8-bit unsigned integer value equivalent to the number contained in <paramref name="s" /> if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not of the correct format, or represents a number less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />. This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  
  
 -or-  
  
 <paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Char">
      <summary>Represents a character as a UTF-16 code unit.</summary>
    </member>
    <member name="F:System.Char.MaxValue">
      <summary>Represents the largest possible value of a <see cref="T:System.Char" />. This field is constant.</summary>
    </member>
    <member name="F:System.Char.MinValue">
      <summary>Represents the smallest possible value of a <see cref="T:System.Char" />. This field is constant.</summary>
    </member>
    <member name="M:System.Char.CompareTo(System.Char)">
      <summary>Compares this instance to a specified <see cref="T:System.Char" /> object and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified <see cref="T:System.Char" /> object.</summary>
      <param name="value">A <see cref="T:System.Char" /> object to compare.</param>
      <returns>A signed number indicating the position of this instance in the sort order in relation to the <paramref name="value" /> parameter.

 <list type="table"><listheader><term> Return Value</term><description> Description</description></listheader><item><term> Less than zero</term><description> This instance precedes <paramref name="value" />.</description></item><item><term> Zero</term><description> This instance has the same position in the sort order as <paramref name="value" />.</description></item><item><term> Greater than zero</term><description> This instance follows <paramref name="value" />.</description></item></list></returns>
    </member>
    <member name="M:System.Char.CompareTo(System.Object)">
      <summary>Compares this instance to a specified object and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified <see cref="T:System.Object" />.</summary>
      <param name="value">An object to compare this instance to, or <see langword="null" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.Char" /> object.</exception>
      <returns>A signed number indicating the position of this instance in the sort order in relation to the <paramref name="value" /> parameter.

 <list type="table"><listheader><term> Return Value</term><description> Description</description></listheader><item><term> Less than zero</term><description> This instance precedes <paramref name="value" />.</description></item><item><term> Zero</term><description> This instance has the same position in the sort order as <paramref name="value" />.</description></item><item><term> Greater than zero</term><description> This instance follows <paramref name="value" />.

 -or-

 <paramref name="value" /> is <see langword="null" />.</description></item></list></returns>
    </member>
    <member name="M:System.Char.ConvertFromUtf32(System.Int32)">
      <summary>Converts the specified Unicode code point into a UTF-16 encoded string.</summary>
      <param name="utf32">A 21-bit Unicode code point.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="utf32" /> is not a valid 21-bit Unicode code point ranging from U+0 through U+10FFFF, excluding the surrogate pair range from U+D800 through U+DFFF.</exception>
      <returns>A string consisting of one <see cref="T:System.Char" /> object or a surrogate pair of <see cref="T:System.Char" /> objects equivalent to the code point specified by the <paramref name="utf32" /> parameter.</returns>
    </member>
    <member name="M:System.Char.ConvertToUtf32(System.Char,System.Char)">
      <summary>Converts the value of a UTF-16 encoded surrogate pair into a Unicode code point.</summary>
      <param name="highSurrogate">A high surrogate code unit (that is, a code unit ranging from U+D800 through U+DBFF).</param>
      <param name="lowSurrogate">A low surrogate code unit (that is, a code unit ranging from U+DC00 through U+DFFF).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="highSurrogate" /> is not in the range U+D800 through U+DBFF, or <paramref name="lowSurrogate" /> is not in the range U+DC00 through U+DFFF.</exception>
      <returns>The 21-bit Unicode code point represented by the <paramref name="highSurrogate" /> and <paramref name="lowSurrogate" /> parameters.</returns>
    </member>
    <member name="M:System.Char.ConvertToUtf32(System.String,System.Int32)">
      <summary>Converts the value of a UTF-16 encoded character or surrogate pair at a specified position in a string into a Unicode code point.</summary>
      <param name="s">A string that contains a character or surrogate pair.</param>
      <param name="index">The index position of the character or surrogate pair in <paramref name="s" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a position within <paramref name="s" />.</exception>
      <exception cref="T:System.ArgumentException">The specified index position contains a surrogate pair, and either the first character in the pair is not a valid high surrogate or the second character in the pair is not a valid low surrogate.</exception>
      <returns>The 21-bit Unicode code point represented by the character or surrogate pair at the position in the <paramref name="s" /> parameter specified by the <paramref name="index" /> parameter.</returns>
    </member>
    <member name="M:System.Char.Equals(System.Char)">
      <summary>Returns a value that indicates whether this instance is equal to the specified <see cref="T:System.Char" /> object.</summary>
      <param name="obj">An object to compare to this instance.</param>
      <returns>
        <see langword="true" /> if the <paramref name="obj" /> parameter equals the value of this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Char.Equals(System.Object)">
      <summary>Returns a value that indicates whether this instance is equal to a specified object.</summary>
      <param name="obj">An object to compare with this instance or <see langword="null" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> is an instance of <see cref="T:System.Char" /> and equals the value of this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Char.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Char.GetNumericValue(System.Char)">
      <summary>Converts the specified numeric Unicode character to a double-precision floating point number.</summary>
      <param name="c">The Unicode character to convert.</param>
      <returns>The numeric value of <paramref name="c" /> if that character represents a number; otherwise, -1.0.</returns>
    </member>
    <member name="M:System.Char.GetNumericValue(System.String,System.Int32)">
      <summary>Converts the numeric Unicode character at the specified position in a specified string to a double-precision floating point number.</summary>
      <param name="s">A <see cref="T:System.String" />.</param>
      <param name="index">The character position in <paramref name="s" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</exception>
      <returns>The numeric value of the character at position <paramref name="index" /> in <paramref name="s" /> if that character represents a number; otherwise, -1.</returns>
    </member>
    <member name="M:System.Char.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Char" />.</summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.Char" />.</returns>
    </member>
    <member name="M:System.Char.GetUnicodeCategory(System.Char)">
      <summary>Categorizes a specified Unicode character into a group identified by one of the <see cref="T:System.Globalization.UnicodeCategory" /> values.</summary>
      <param name="c">The Unicode character to categorize.</param>
      <returns>A <see cref="T:System.Globalization.UnicodeCategory" /> value that identifies the group that contains <paramref name="c" />.</returns>
    </member>
    <member name="M:System.Char.GetUnicodeCategory(System.String,System.Int32)">
      <summary>Categorizes the character at the specified position in a specified string into a group identified by one of the <see cref="T:System.Globalization.UnicodeCategory" /> values.</summary>
      <param name="s">A <see cref="T:System.String" />.</param>
      <param name="index">The character position in <paramref name="s" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</exception>
      <returns>A <see cref="T:System.Globalization.UnicodeCategory" /> enumerated constant that identifies the group that contains the character at position <paramref name="index" /> in <paramref name="s" />.</returns>
    </member>
    <member name="M:System.Char.IsControl(System.Char)">
      <summary>Indicates whether the specified Unicode character is categorized as a control character.</summary>
      <param name="c">The Unicode character to evaluate.</param>
      <returns>
        <see langword="true" /> if <paramref name="c" /> is a control character; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Char.IsControl(System.String,System.Int32)">
      <summary>Indicates whether the character at the specified position in a specified string is categorized as a control character.</summary>
      <param name="s">A string.</param>
      <param name="index">The position of the character to evaluate in <paramref name="s" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</exception>
      <returns>
        <see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a control character; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Char.IsDigit(System.Char)">
      <summary>Indicates whether the specified Unicode character is categorized as a decimal digit.</summary>
      <param name="c">The Unicode character to evaluate.</param>
      <returns>
        <see langword="true" /> if <paramref name="c" /> is a decimal digit; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Char.IsDigit(System.String,System.Int32)">
      <summary>Indicates whether the character at the specified position in a specified string is categorized as a decimal digit.</summary>
      <param name="s">A string.</param>
      <param name="index">The position of the character to evaluate in <paramref name="s" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</exception>
      <returns>
        <see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a decimal digit; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Char.IsHighSurrogate(System.Char)">
      <summary>Indicates whether the specified <see cref="T:System.Char" /> object is a high surrogate.</summary>
      <param name="c">The Unicode character to evaluate.</param>
      <returns>
        <see langword="true" /> if the numeric value of the <paramref name="c" /> parameter ranges from U+D800 through U+DBFF; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Char.IsHighSurrogate(System.String,System.Int32)">
      <summary>Indicates whether the <see cref="T:System.Char" /> object at the specified position in a string is a high surrogate.</summary>
      <param name="s">A string.</param>
      <param name="index">The position of the character to evaluate in <paramref name="s" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a position within <paramref name="s" />.</exception>
      <returns>
        <see langword="true" /> if the numeric value of the specified character in the <paramref name="s" /> parameter ranges from U+D800 through U+DBFF; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Char.IsLetter(System.Char)">
      <summary>Indicates whether the specified Unicode character is categorized as a Unicode letter.</summary>
      <param name="c">The Unicode character to evaluate.</param>
      <returns>
        <see langword="true" /> if <paramref name="c" /> is a letter; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Char.IsLetter(System.String,System.Int32)">
      <summary>Indicates whether the character at the specified position in a specified string is categorized as a Unicode letter.</summary>
      <param name="s">A string.</param>
      <param name="index">The position of the character to evaluate in <paramref name="s" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</exception>
      <returns>
        <see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a letter; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Char.IsLetterOrDigit(System.Char)">
      <summary>Indicates whether the specified Unicode character is categorized as a letter or a decimal digit.</summary>
      <param name="c">The Unicode character to evaluate.</param>
      <returns>
        <see langword="true" /> if <paramref name="c" /> is a letter or a decimal digit; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Char.IsLetterOrDigit(System.String,System.Int32)">
      <summary>Indicates whether the character at the specified position in a specified string is categorized as a letter or a decimal digit.</summary>
      <param name="s">A string.</param>
      <param name="index">The position of the character to evaluate in <paramref name="s" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</exception>
      <returns>
        <see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a letter or a decimal digit; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Char.IsLower(System.Char)">
      <summary>Indicates whether the specified Unicode character is categorized as a lowercase letter.</summary>
      <param name="c">The Unicode character to evaluate.</param>
      <returns>
        <see langword="true" /> if <paramref name="c" /> is a lowercase letter; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Char.IsLower(System.String,System.Int32)">
      <summary>Indicates whether the character at the specified position in a specified string is categorized as a lowercase letter.</summary>
      <param name="s">A string.</param>
      <param name="index">The position of the character to evaluate in <paramref name="s" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</exception>
      <returns>
        <see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a lowercase letter; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Char.IsLowSurrogate(System.Char)">
      <summary>Indicates whether the specified <see cref="T:System.Char" /> object is a low surrogate.</summary>
      <param name="c">The character to evaluate.</param>
      <returns>
        <see langword="true" /> if the numeric value of the <paramref name="c" /> parameter ranges from U+DC00 through U+DFFF; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Char.IsLowSurrogate(System.String,System.Int32)">
      <summary>Indicates whether the <see cref="T:System.Char" /> object at the specified position in a string is a low surrogate.</summary>
      <param name="s">A string.</param>
      <param name="index">The position of the character to evaluate in <paramref name="s" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a position within <paramref name="s" />.</exception>
      <returns>
        <see langword="true" /> if the numeric value of the specified character in the <paramref name="s" /> parameter ranges from U+DC00 through U+DFFF; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Char.IsNumber(System.Char)">
      <summary>Indicates whether the specified Unicode character is categorized as a number.</summary>
      <param name="c">The Unicode character to evaluate.</param>
      <returns>
        <see langword="true" /> if <paramref name="c" /> is a number; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Char.IsNumber(System.String,System.Int32)">
      <summary>Indicates whether the character at the specified position in a specified string is categorized as a number.</summary>
      <param name="s">A string.</param>
      <param name="index">The position of the character to evaluate in <paramref name="s" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</exception>
      <returns>
        <see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a number; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Char.IsPunctuation(System.Char)">
      <summary>Indicates whether the specified Unicode character is categorized as a punctuation mark.</summary>
      <param name="c">The Unicode character to evaluate.</param>
      <returns>
        <see langword="true" /> if <paramref name="c" /> is a punctuation mark; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Char.IsPunctuation(System.String,System.Int32)">
      <summary>Indicates whether the character at the specified position in a specified string is categorized as a punctuation mark.</summary>
      <param name="s">A string.</param>
      <param name="index">The position of the character to evaluate in <paramref name="s" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</exception>
      <returns>
        <see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a punctuation mark; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Char.IsSeparator(System.Char)">
      <summary>Indicates whether the specified Unicode character is categorized as a separator character.</summary>
      <param name="c">The Unicode character to evaluate.</param>
      <returns>
        <see langword="true" /> if <paramref name="c" /> is a separator character; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Char.IsSeparator(System.String,System.Int32)">
      <summary>Indicates whether the character at the specified position in a specified string is categorized as a separator character.</summary>
      <param name="s">A string.</param>
      <param name="index">The position of the character to evaluate in <paramref name="s" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</exception>
      <returns>
        <see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a separator character; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Char.IsSurrogate(System.Char)">
      <summary>Indicates whether the specified character has a surrogate code unit.</summary>
      <param name="c">The Unicode character to evaluate.</param>
      <returns>
        <see langword="true" /> if <paramref name="c" /> is either a high surrogate or a low surrogate; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Char.IsSurrogate(System.String,System.Int32)">
      <summary>Indicates whether the character at the specified position in a specified string has a surrogate code unit.</summary>
      <param name="s">A string.</param>
      <param name="index">The position of the character to evaluate in <paramref name="s" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</exception>
      <returns>
        <see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a either a high surrogate or a low surrogate; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Char.IsSurrogatePair(System.Char,System.Char)">
      <summary>Indicates whether the two specified <see cref="T:System.Char" /> objects form a surrogate pair.</summary>
      <param name="highSurrogate">The character to evaluate as the high surrogate of a surrogate pair.</param>
      <param name="lowSurrogate">The character to evaluate as the low surrogate of a surrogate pair.</param>
      <returns>
        <see langword="true" /> if the numeric value of the <paramref name="highSurrogate" /> parameter ranges from U+D800 through U+DBFF, and the numeric value of the <paramref name="lowSurrogate" /> parameter ranges from U+DC00 through U+DFFF; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Char.IsSurrogatePair(System.String,System.Int32)">
      <summary>Indicates whether two adjacent <see cref="T:System.Char" /> objects at a specified position in a string form a surrogate pair.</summary>
      <param name="s">A string.</param>
      <param name="index">The starting position of the pair of characters to evaluate within <paramref name="s" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a position within <paramref name="s" />.</exception>
      <returns>
        <see langword="true" /> if the <paramref name="s" /> parameter includes adjacent characters at positions <paramref name="index" /> and <paramref name="index" /> + 1, and the numeric value of the character at position <paramref name="index" /> ranges from U+D800 through U+DBFF, and the numeric value of the character at position <paramref name="index" />+1 ranges from U+DC00 through U+DFFF; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Char.IsSymbol(System.Char)">
      <summary>Indicates whether the specified Unicode character is categorized as a symbol character.</summary>
      <param name="c">The Unicode character to evaluate.</param>
      <returns>
        <see langword="true" /> if <paramref name="c" /> is a symbol character; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Char.IsSymbol(System.String,System.Int32)">
      <summary>Indicates whether the character at the specified position in a specified string is categorized as a symbol character.</summary>
      <param name="s">A string.</param>
      <param name="index">The position of the character to evaluate in <paramref name="s" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</exception>
      <returns>
        <see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a symbol character; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Char.IsUpper(System.Char)">
      <summary>Indicates whether the specified Unicode character is categorized as an uppercase letter.</summary>
      <param name="c">The Unicode character to evaluate.</param>
      <returns>
        <see langword="true" /> if <paramref name="c" /> is an uppercase letter; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Char.IsUpper(System.String,System.Int32)">
      <summary>Indicates whether the character at the specified position in a specified string is categorized as an uppercase letter.</summary>
      <param name="s">A string.</param>
      <param name="index">The position of the character to evaluate in <paramref name="s" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</exception>
      <returns>
        <see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is an uppercase letter; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Char.IsWhiteSpace(System.Char)">
      <summary>Indicates whether the specified Unicode character is categorized as white space.</summary>
      <param name="c">The Unicode character to evaluate.</param>
      <returns>
        <see langword="true" /> if <paramref name="c" /> is white space; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Char.IsWhiteSpace(System.String,System.Int32)">
      <summary>Indicates whether the character at the specified position in a specified string is categorized as white space.</summary>
      <param name="s">A string.</param>
      <param name="index">The position of the character to evaluate in <paramref name="s" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</exception>
      <returns>
        <see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is white space; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Char.Parse(System.String)">
      <summary>Converts the value of the specified string to its equivalent Unicode character.</summary>
      <param name="s">A string that contains a single character, or <see langword="null" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">The length of <paramref name="s" /> is not 1.</exception>
      <returns>A Unicode character equivalent to the sole character in <paramref name="s" />.</returns>
    </member>
    <member name="M:System.Char.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>Note This conversion is not supported. Attempting to do so throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
      <returns>This conversion is not supported. No value is returned.</returns>
    </member>
    <member name="M:System.Char.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The converted value of the current <see cref="T:System.Char" /> object.</returns>
    </member>
    <member name="M:System.Char.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current <see cref="T:System.Char" /> object unchanged.</returns>
    </member>
    <member name="M:System.Char.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>Note This conversion is not supported. Attempting to do so throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
      <returns>No value is returned.</returns>
    </member>
    <member name="M:System.Char.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>Note This conversion is not supported. Attempting to do so throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
      <returns>No value is returned.</returns>
    </member>
    <member name="M:System.Char.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>Note This conversion is not supported. Attempting to do so throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
      <returns>No value is returned.</returns>
    </member>
    <member name="M:System.Char.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The converted value of the current <see cref="T:System.Char" /> object.</returns>
    </member>
    <member name="M:System.Char.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The converted value of the current <see cref="T:System.Char" /> object.</returns>
    </member>
    <member name="M:System.Char.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The converted value of the current <see cref="T:System.Char" /> object.</returns>
    </member>
    <member name="M:System.Char.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The converted value of the current <see cref="T:System.Char" /> object.</returns>
    </member>
    <member name="M:System.Char.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>Note This conversion is not supported. Attempting to do so throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
      <returns>No value is returned.</returns>
    </member>
    <member name="M:System.Char.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />.</summary>
      <param name="type">A <see cref="T:System.Type" /> object.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidCastException">The value of the current <see cref="T:System.Char" /> object cannot be converted to the type specified by the <paramref name="type" /> parameter.</exception>
      <returns>An object of the specified type.</returns>
    </member>
    <member name="M:System.Char.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> object. (Specify <see langword="null" /> because the <paramref name="provider" /> parameter is ignored.)</param>
      <returns>The converted value of the current <see cref="T:System.Char" /> object.</returns>
    </member>
    <member name="M:System.Char.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> object. (Specify <see langword="null" /> because the <paramref name="provider" /> parameter is ignored.)</param>
      <returns>The converted value of the current <see cref="T:System.Char" /> object.</returns>
    </member>
    <member name="M:System.Char.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> object. (Specify <see langword="null" /> because the <paramref name="provider" /> parameter is ignored.)</param>
      <returns>The converted value of the current <see cref="T:System.Char" /> object.</returns>
    </member>
    <member name="M:System.Char.ToLower(System.Char)">
      <summary>Converts the value of a Unicode character to its lowercase equivalent.</summary>
      <param name="c">The Unicode character to convert.</param>
      <returns>The lowercase equivalent of <paramref name="c" />, or the unchanged value of <paramref name="c" />, if <paramref name="c" /> is already lowercase or not alphabetic.</returns>
    </member>
    <member name="M:System.Char.ToLower(System.Char,System.Globalization.CultureInfo)">
      <summary>Converts the value of a specified Unicode character to its lowercase equivalent using specified culture-specific formatting information.</summary>
      <param name="c">The Unicode character to convert.</param>
      <param name="culture">An object that supplies culture-specific casing rules.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> is <see langword="null" />.</exception>
      <returns>The lowercase equivalent of <paramref name="c" />, modified according to <paramref name="culture" />, or the unchanged value of <paramref name="c" />, if <paramref name="c" /> is already lowercase or not alphabetic.</returns>
    </member>
    <member name="M:System.Char.ToLowerInvariant(System.Char)">
      <summary>Converts the value of a Unicode character to its lowercase equivalent using the casing rules of the invariant culture.</summary>
      <param name="c">The Unicode character to convert.</param>
      <returns>The lowercase equivalent of the <paramref name="c" /> parameter, or the unchanged value of <paramref name="c" />, if <paramref name="c" /> is already lowercase or not alphabetic.</returns>
    </member>
    <member name="M:System.Char.ToString">
      <summary>Converts the value of this instance to its equivalent string representation.</summary>
      <returns>The string representation of the value of this instance.</returns>
    </member>
    <member name="M:System.Char.ToString(System.Char)">
      <summary>Converts the specified Unicode character to its equivalent string representation.</summary>
      <param name="c">The Unicode character to convert.</param>
      <returns>The string representation of the value of <paramref name="c" />.</returns>
    </member>
    <member name="M:System.Char.ToString(System.IFormatProvider)">
      <summary>Converts the value of this instance to its equivalent string representation using the specified culture-specific format information.</summary>
      <param name="provider">(Reserved) An object that supplies culture-specific formatting information.</param>
      <returns>The string representation of the value of this instance as specified by <paramref name="provider" />.</returns>
    </member>
    <member name="M:System.Char.ToUpper(System.Char)">
      <summary>Converts the value of a Unicode character to its uppercase equivalent.</summary>
      <param name="c">The Unicode character to convert.</param>
      <returns>The uppercase equivalent of <paramref name="c" />, or the unchanged value of <paramref name="c" /> if <paramref name="c" /> is already uppercase, has no uppercase equivalent, or is not alphabetic.</returns>
    </member>
    <member name="M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)">
      <summary>Converts the value of a specified Unicode character to its uppercase equivalent using specified culture-specific formatting information.</summary>
      <param name="c">The Unicode character to convert.</param>
      <param name="culture">An object that supplies culture-specific casing rules.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> is <see langword="null" />.</exception>
      <returns>The uppercase equivalent of <paramref name="c" />, modified according to <paramref name="culture" />, or the unchanged value of <paramref name="c" /> if <paramref name="c" /> is already uppercase, has no uppercase equivalent, or is not alphabetic.</returns>
    </member>
    <member name="M:System.Char.ToUpperInvariant(System.Char)">
      <summary>Converts the value of a Unicode character to its uppercase equivalent using the casing rules of the invariant culture.</summary>
      <param name="c">The Unicode character to convert.</param>
      <returns>The uppercase equivalent of the <paramref name="c" /> parameter, or the unchanged value of <paramref name="c" />, if <paramref name="c" /> is already uppercase or not alphabetic.</returns>
    </member>
    <member name="M:System.Char.TryParse(System.String,System.Char@)">
      <summary>Converts the value of the specified string to its equivalent Unicode character. A return code indicates whether the conversion succeeded or failed.</summary>
      <param name="s">A string that contains a single character, or <see langword="null" />.</param>
      <param name="result">When this method returns, contains a Unicode character equivalent to the sole character in <paramref name="s" />, if the conversion succeeded, or an undefined value if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or the length of <paramref name="s" /> is not 1. This parameter is passed uninitialized.</param>
      <returns>
        <see langword="true" /> if the <paramref name="s" /> parameter was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.CLSCompliantAttribute">
      <summary>Indicates whether a program element is compliant with the Common Language Specification (CLS). This class cannot be inherited.</summary>
    </member>
    <member name="M:System.CLSCompliantAttribute.#ctor(System.Boolean)">
      <summary>Initializes an instance of the <see cref="T:System.CLSCompliantAttribute" /> class with a Boolean value indicating whether the indicated program element is CLS-compliant.</summary>
      <param name="isCompliant">
        <see langword="true" /> if CLS-compliant; otherwise, <see langword="false" />.</param>
    </member>
    <member name="P:System.CLSCompliantAttribute.IsCompliant">
      <summary>Gets the Boolean value indicating whether the indicated program element is CLS-compliant.</summary>
      <returns>
        <see langword="true" /> if the program element is CLS-compliant; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Collections.BitArray">
      <summary>Manages a compact array of bit values, which are represented as Booleans, where <see langword="true" /> indicates that the bit is on (1) and <see langword="false" /> indicates the bit is off (0).</summary>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Boolean[])">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.BitArray" /> class that contains bit values copied from the specified array of Booleans.</summary>
      <param name="values">An array of Booleans to copy.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Byte[])">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.BitArray" /> class that contains bit values copied from the specified array of bytes.</summary>
      <param name="bytes">An array of bytes containing the values to copy, where each byte represents eight consecutive bits.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The length of <paramref name="bytes" /> is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Collections.BitArray)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.BitArray" /> class that contains bit values copied from the specified <see cref="T:System.Collections.BitArray" />.</summary>
      <param name="bits">The <see cref="T:System.Collections.BitArray" /> to copy.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bits" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.BitArray" /> class that can hold the specified number of bit values, which are initially set to <see langword="false" />.</summary>
      <param name="length">The number of bit values in the new <see cref="T:System.Collections.BitArray" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> is less than zero.</exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Int32,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.BitArray" /> class that can hold the specified number of bit values, which are initially set to the specified value.</summary>
      <param name="length">The number of bit values in the new <see cref="T:System.Collections.BitArray" />.</param>
      <param name="defaultValue">The Boolean value to assign to each bit.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> is less than zero.</exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Int32[])">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.BitArray" /> class that contains bit values copied from the specified array of 32-bit integers.</summary>
      <param name="values">An array of integers containing the values to copy, where each integer represents 32 consecutive bits.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The length of <paramref name="values" /> is greater than <see cref="F:System.Int32.MaxValue" /></exception>
    </member>
    <member name="M:System.Collections.BitArray.And(System.Collections.BitArray)">
      <summary>Performs the bitwise AND operation between the elements of the current <see cref="T:System.Collections.BitArray" /> object and the corresponding elements in the specified array. The current <see cref="T:System.Collections.BitArray" /> object will be modified to store the result of the bitwise AND operation.</summary>
      <param name="value">The array with which to perform the bitwise AND operation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> and the current <see cref="T:System.Collections.BitArray" /> do not have the same number of elements.</exception>
      <returns>An array containing the result of the bitwise AND operation, which is a reference to the current <see cref="T:System.Collections.BitArray" /> object.</returns>
    </member>
    <member name="M:System.Collections.BitArray.Clone">
      <summary>Creates a shallow copy of the <see cref="T:System.Collections.BitArray" />.</summary>
      <returns>A shallow copy of the <see cref="T:System.Collections.BitArray" />.</returns>
    </member>
    <member name="M:System.Collections.BitArray.CopyTo(System.Array,System.Int32)">
      <summary>Copies the entire <see cref="T:System.Collections.BitArray" /> to a compatible one-dimensional <see cref="T:System.Array" />, starting at the specified index of the target array.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.BitArray" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.  
  
 -or-  
  
 The number of elements in the source <see cref="T:System.Collections.BitArray" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</exception>
      <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.Collections.BitArray" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Collections.BitArray.Get(System.Int32)">
      <summary>Gets the value of the bit at a specific position in the <see cref="T:System.Collections.BitArray" />.</summary>
      <param name="index">The zero-based index of the value to get.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.  
  
 -or-  
  
 <paramref name="index" /> is greater than or equal to the number of elements in the <see cref="T:System.Collections.BitArray" />.</exception>
      <returns>The value of the bit at position <paramref name="index" />.</returns>
    </member>
    <member name="M:System.Collections.BitArray.GetEnumerator">
      <summary>Returns an enumerator that iterates through the <see cref="T:System.Collections.BitArray" />.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> for the entire <see cref="T:System.Collections.BitArray" />.</returns>
    </member>
    <member name="M:System.Collections.BitArray.LeftShift(System.Int32)">
      <summary>Shifts all the bit values of the current <see cref="T:System.Collections.BitArray" /> to the left on <paramref name="count" /> bits.</summary>
      <param name="count">The number of shifts to make for each bit.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than zero.</exception>
      <returns>The current <see cref="T:System.Collections.BitArray" />.</returns>
    </member>
    <member name="M:System.Collections.BitArray.Not">
      <summary>Inverts all the bit values in the current <see cref="T:System.Collections.BitArray" />, so that elements set to <see langword="true" /> are changed to <see langword="false" />, and elements set to <see langword="false" /> are changed to <see langword="true" />.</summary>
      <returns>The current instance with inverted bit values.</returns>
    </member>
    <member name="M:System.Collections.BitArray.Or(System.Collections.BitArray)">
      <summary>Performs the bitwise OR operation between the elements of the current <see cref="T:System.Collections.BitArray" /> object and the corresponding elements in the specified array. The current <see cref="T:System.Collections.BitArray" /> object will be modified to store the result of the bitwise OR operation.</summary>
      <param name="value">The array with which to perform the bitwise OR operation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> and the current <see cref="T:System.Collections.BitArray" /> do not have the same number of elements.</exception>
      <returns>An array containing the result of the bitwise OR operation, which is a reference to the current <see cref="T:System.Collections.BitArray" /> object.</returns>
    </member>
    <member name="M:System.Collections.BitArray.RightShift(System.Int32)">
      <summary>Shifts all the bit values of the current <see cref="T:System.Collections.BitArray" /> to the right on <paramref name="count" /> bits.</summary>
      <param name="count">The number of shifts to make for each bit.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than zero.</exception>
      <returns>The current <see cref="T:System.Collections.BitArray" />.</returns>
    </member>
    <member name="M:System.Collections.BitArray.Set(System.Int32,System.Boolean)">
      <summary>Sets the bit at a specific position in the <see cref="T:System.Collections.BitArray" /> to the specified value.</summary>
      <param name="index">The zero-based index of the bit to set.</param>
      <param name="value">The Boolean value to assign to the bit.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.  
  
 -or-  
  
 <paramref name="index" /> is greater than or equal to the number of elements in the <see cref="T:System.Collections.BitArray" />.</exception>
    </member>
    <member name="M:System.Collections.BitArray.SetAll(System.Boolean)">
      <summary>Sets all bits in the <see cref="T:System.Collections.BitArray" /> to the specified value.</summary>
      <param name="value">The Boolean value to assign to all bits.</param>
    </member>
    <member name="M:System.Collections.BitArray.Xor(System.Collections.BitArray)">
      <summary>Performs the bitwise exclusive OR operation between the elements of the current <see cref="T:System.Collections.BitArray" /> object against the corresponding elements in the specified array. The current <see cref="T:System.Collections.BitArray" /> object will be modified to store the result of the bitwise exclusive OR operation.</summary>
      <param name="value">The array with which to perform the bitwise exclusive OR operation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> and the current <see cref="T:System.Collections.BitArray" /> do not have the same number of elements.</exception>
      <returns>An array containing the result of the bitwise exclusive OR operation, which is a reference to the current <see cref="T:System.Collections.BitArray" /> object.</returns>
    </member>
    <member name="P:System.Collections.BitArray.Count">
      <summary>Gets the number of elements contained in the <see cref="T:System.Collections.BitArray" />.</summary>
      <returns>The number of elements contained in the <see cref="T:System.Collections.BitArray" />.</returns>
    </member>
    <member name="P:System.Collections.BitArray.IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.BitArray" /> is read-only.</summary>
      <returns>This property is always <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.BitArray.IsSynchronized">
      <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.BitArray" /> is synchronized (thread safe).</summary>
      <returns>This property is always <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.BitArray.Item(System.Int32)">
      <summary>Gets or sets the value of the bit at a specific position in the <see cref="T:System.Collections.BitArray" />.</summary>
      <param name="index">The zero-based index of the value to get or set.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.  
  
 -or-  
  
 <paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.BitArray.Count" />.</exception>
      <returns>The value of the bit at position <paramref name="index" />.</returns>
    </member>
    <member name="P:System.Collections.BitArray.Length">
      <summary>Gets or sets the number of elements in the <see cref="T:System.Collections.BitArray" />.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">The property is set to a value that is less than zero.</exception>
      <returns>The number of elements in the <see cref="T:System.Collections.BitArray" />.</returns>
    </member>
    <member name="P:System.Collections.BitArray.SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.BitArray" />.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.BitArray" />.</returns>
    </member>
    <member name="T:System.Collections.Concurrent.ConcurrentDictionary`2">
      <summary>Represents a thread-safe collection of key/value pairs that can be accessed by multiple threads concurrently.</summary>
      <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
      <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> class that is empty, has the default concurrency level, has the default initial capacity, and uses the default comparer for the key type.</summary>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> class that contains elements copied from the specified <see cref="T:System.Collections.Generic.IEnumerable`1" />, has the default concurrency level, has the default initial capacity, and uses the default comparer for the key type.</summary>
      <param name="collection">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are copied to the new <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> or any of its keys is  <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collection" /> contains one or more duplicate keys.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> class that contains elements copied from the specified <see cref="T:System.Collections.IEnumerable" /> has the default concurrency level, has the default initial capacity, and uses the specified  <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <param name="collection">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are copied to the new <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing keys.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> or <paramref name="comparer" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> class that is empty, has the default concurrency level and capacity, and uses the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <param name="comparer">The equality comparison implementation to use when comparing keys.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparer" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> class that contains elements copied from the specified <see cref="T:System.Collections.IEnumerable" />, and uses the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <param name="concurrencyLevel">The estimated number of threads that will update the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> concurrently.</param>
      <param name="collection">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are copied to the new <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing keys.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> or <paramref name="comparer" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="concurrencyLevel" /> is less than 1.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collection" /> contains one or more duplicate keys.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> class that is empty, has the specified concurrency level and capacity, and uses the default comparer for the key type.</summary>
      <param name="concurrencyLevel">The estimated number of threads that will update the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> concurrently.</param>
      <param name="capacity">The initial number of elements that the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> can contain.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="concurrencyLevel" /> is less than 1.  
  
 -or-  
  
 <paramref name="capacity" /> is less than 0.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> class that is empty, has the specified concurrency level, has the specified initial capacity, and uses the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <param name="concurrencyLevel">The estimated number of threads that will update the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> concurrently.</param>
      <param name="capacity">The initial number of elements that the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> can contain.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing keys.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparer" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="concurrencyLevel" /> or <paramref name="capacity" /> is less than 1.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,`1,System.Func{`0,`1,`1})">
      <summary>Adds a key/value pair to the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> if the key does not already exist, or updates a key/value pair in the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> by using the specified function if the key already exists.</summary>
      <param name="key">The key to be added or whose value should be updated</param>
      <param name="addValue">The value to be added for an absent key</param>
      <param name="updateValueFactory">The function used to generate a new value for an existing key based on the key's existing value</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> or <paramref name="updateValueFactory" /> is <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">The dictionary contains too many elements.</exception>
      <returns>The new value for the key. This will be either be <paramref name="addValue" /> (if the key was absent) or the result of <paramref name="updateValueFactory" /> (if the key was present).</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,System.Func{`0,`1},System.Func{`0,`1,`1})">
      <summary>Uses the specified functions to add a key/value pair to the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> if the key does not already exist, or to update a key/value pair in the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> if the key already exists.</summary>
      <param name="key">The key to be added or whose value should be updated</param>
      <param name="addValueFactory">The function used to generate a value for an absent key</param>
      <param name="updateValueFactory">The function used to generate a new value for an existing key based on the key's existing value</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />, <paramref name="addValueFactory" />, or <paramref name="updateValueFactory" /> is <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">The dictionary contains too many elements.</exception>
      <returns>The new value for the key. This will be either be the result of <paramref name="addValueFactory" /> (if the key was absent) or the result of <paramref name="updateValueFactory" /> (if the key was present).</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate``1(`0,System.Func{`0,``0,`1},System.Func{`0,`1,``0,`1},``0)">
      <summary>Uses the specified functions and argument to add a key/value pair to the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> if the key does not already exist, or to update a key/value pair in the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> if the key already exists.</summary>
      <param name="key">The key to be added or whose value should be updated.</param>
      <param name="addValueFactory">The function used to generate a value for an absent key.</param>
      <param name="updateValueFactory">The function used to generate a new value for an existing key based on the key's existing value.</param>
      <param name="factoryArgument">An argument to pass into <paramref name="addValueFactory" /> and <paramref name="updateValueFactory" />.</param>
      <typeparam name="TArg">The type of an argument to pass into <paramref name="addValueFactory" /> and <paramref name="updateValueFactory" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />, <paramref name="addValueFactory" />, or <paramref name="updateValueFactory" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OverflowException">The dictionary contains too many elements.</exception>
      <returns>The new value for the key. This will be either be the result of <paramref name="addValueFactory" /> (if the key was absent) or the result of <paramref name="updateValueFactory" /> (if the key was present).</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.Clear">
      <summary>Removes all keys and values from the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />.</summary>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.ContainsKey(`0)">
      <summary>Determines whether the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> contains the specified key.</summary>
      <param name="key">The key to locate in the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> contains an element with the specified key; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.GetEnumerator">
      <summary>Returns an enumerator that iterates through the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />.</summary>
      <returns>An enumerator for the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,`1)">
      <summary>Adds a key/value pair to the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> if the key does not already exist. Returns the new value, or the existing value if the key exists.</summary>
      <param name="key">The key of the element to add.</param>
      <param name="value">The value to be added, if the key does not already exist.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">The dictionary contains too many elements.</exception>
      <returns>The value for the key. This will be either the existing value for the key if the key is already in the dictionary, or the new value if the key was not in the dictionary.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,System.Func{`0,`1})">
      <summary>Adds a key/value pair to the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> by using the specified function if the key does not already exist. Returns the new value, or the existing value if the key exists.</summary>
      <param name="key">The key of the element to add.</param>
      <param name="valueFactory">The function used to generate a value for the key.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> or <paramref name="valueFactory" /> is <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">The dictionary contains too many elements.</exception>
      <returns>The value for the key. This will be either the existing value for the key if the key is already in the dictionary, or the new value if the key was not in the dictionary.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd``1(`0,System.Func{`0,``0,`1},``0)">
      <summary>Adds a key/value pair to the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> by using the specified function and an argument if the key does not already exist, or returns the existing value if the key exists.</summary>
      <param name="key">The key of the element to add.</param>
      <param name="valueFactory">The function used to generate a value for the key.</param>
      <param name="factoryArgument">An argument value to pass into <paramref name="valueFactory" />.</param>
      <typeparam name="TArg">The type of an argument to pass into <paramref name="valueFactory" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is a <see langword="null" /> reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OverflowException">The dictionary contains too many elements.</exception>
      <returns>The value for the key. This will be either the existing value for the key if the key is already in the dictionary, or the new value if the key was not in the dictionary.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Adds an item to the collection.</summary>
      <param name="keyValuePair">The <see cref="T:System.Collections.Generic.KeyValuePair`2" /> to add to the dictionary.</param>
      <exception cref="T:System.ArgumentNullException">The <see cref="P:System.Collections.Generic.KeyValuePair`2.Key" /> of <paramref name="keyValuePair" /> is <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">The <see cref="T:System.Collections.Generic.Dictionary`2" /> contains too many elements.</exception>
      <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.Dictionary`2" />.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Gets whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains an element with the specified key.</summary>
      <param name="keyValuePair">The key to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.Generic.ICollection`1" /> contains an element with the specified key; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an array, starting at the specified array index.</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the <see cref="T:System.Collections.ICollection" />. The array must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> is equal to or greater than the length of the <paramref name="array" />.

-or-

The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Removes the specified key/value pair from the collection.</summary>
      <param name="keyValuePair">The <see cref="T:System.Collections.Generic.KeyValuePair`2" /> to remove.</param>
      <exception cref="T:System.ArgumentNullException">The <see cref="P:System.Collections.Generic.KeyValuePair`2.Key" /> property of <paramref name="keyValuePair" /> is <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> if the element is successfully removed; otherwise, <see langword="false" />. This method also returns false if <paramref name="key" /> was not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
      <summary>Adds the specified key and value to the <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <param name="key">The object to use as the key of the element to add.</param>
      <param name="value">The object to use as the value of the element to add.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />.</exception>
      <exception cref="T:System.OverflowException">The dictionary contains too many elements.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)">
      <summary>Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <param name="key">The key of the element to remove.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> if the element is successfully removed; otherwise, <see langword="false" />. This method also returns <see langword="false" /> if <paramref name="key" /> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an array, starting at the specified array index.</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the <see cref="T:System.Collections.ICollection" />. The array must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> is equal to or greater than the length of the <paramref name="array" />.  
  
 -or-  
  
 The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>Adds the specified key and value to the dictionary.</summary>
      <param name="key">The object to use as the key.</param>
      <param name="value">The object to use as the value.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> is of a type that is not assignable to the key type  of the <see cref="T:System.Collections.Generic.Dictionary`2" />.  
  
 -or-  
  
 <paramref name="value" /> is of a type that is not assignable to the type of values in the <see cref="T:System.Collections.Generic.Dictionary`2" />.  
  
 -or-  
  
 A value with the same key already exists in the <see cref="T:System.Collections.Generic.Dictionary`2" />.</exception>
      <exception cref="T:System.OverflowException">The dictionary contains too many elements.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary>Gets a value that indicates the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key.</summary>
      <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary>Provides a <see cref="T:System.Collections.IDictionaryEnumerator" /> for the <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>A <see cref="T:System.Collections.IDictionaryEnumerator" /> for the <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary>Removes the element with the specified key from the <see cref="T:System.Collections.IDictionary" />.</summary>
      <param name="key">The key of the element to remove.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />.</summary>
      <returns>An enumerator for the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.ToArray">
      <summary>Copies the key and value pairs stored in the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> to a new array.</summary>
      <returns>A new array containing a snapshot of key and value pairs copied from the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.TryAdd(`0,`1)">
      <summary>Attempts to add the specified key and value to the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />.</summary>
      <param name="key">The key of the element to add.</param>
      <param name="value">The value of the element to add. The value can be  <see langword="null" /> for reference types.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is  <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">The dictionary contains too many elements.</exception>
      <returns>
        <see langword="true" /> if the key/value pair was added to the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> successfully; <see langword="false" /> if the key already exists.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.TryGetValue(`0,`1@)">
      <summary>Attempts to get the value associated with the specified key from the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />.</summary>
      <param name="key">The key of the value to get.</param>
      <param name="value">When this method returns, contains the object from the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> that has the specified key, or the default value of the type if the operation failed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is  <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> if the key was found in the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.TryRemove(`0,`1@)">
      <summary>Attempts to remove and return the value that has the specified key from the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />.</summary>
      <param name="key">The key of the element to remove and return.</param>
      <param name="value">When this method returns, contains the object removed from the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />, or the default value of  the <see langword="TValue" /> type if <paramref name="key" /> does not exist.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is  <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> if the object was removed successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.TryRemove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Removes a key and value from the dictionary.</summary>
      <param name="item">The <see cref="T:System.Collections.Generic.KeyValuePair`2" /> representing the key and value to remove.</param>
      <exception cref="T:System.ArgumentNullException">The <see cref="P:System.Collections.Generic.KeyValuePair`2.Key" /> property of <paramref name="item" /> is <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> if the key and value represented by <paramref name="item" /> are successfully found and removed; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.TryUpdate(`0,`1,`1)">
      <summary>Updates the value associated with <paramref name="key" /> to <paramref name="newValue" /> if the existing value with <paramref name="key" /> is equal to <paramref name="comparisonValue" />.</summary>
      <param name="key">The key of the value that is compared with <paramref name="comparisonValue" /> and possibly replaced.</param>
      <param name="newValue">The value that replaces the value of the element that has the specified <paramref name="key" /> if the comparison results in equality.</param>
      <param name="comparisonValue">The value that is compared with the value of the element that has the specified <paramref name="key" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> if the value with <paramref name="key" /> was equal to <paramref name="comparisonValue" /> and was replaced with <paramref name="newValue" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.Count">
      <summary>Gets the number of key/value pairs contained in the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />.</summary>
      <exception cref="T:System.OverflowException">The dictionary contains too many elements.</exception>
      <returns>The number of key/value pairs contained in the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.IsEmpty">
      <summary>Gets a value that indicates whether the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> is empty.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> is empty; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.Item(`0)">
      <summary>Gets or sets the value associated with the specified key.</summary>
      <param name="key">The key of the value to get or set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is  <see langword="null" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and <paramref name="key" /> does not exist in the collection.</exception>
      <returns>The value of the key/value pair at the specified index.</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.Keys">
      <summary>Gets a collection containing the keys in the <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
      <returns>A collection of keys in the <see cref="T:System.Collections.Generic.Dictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
      <summary>Gets a value that indicates whether the <see cref="T:System.Collections.ICollection" /> is read-only.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.ICollection" /> is read-only; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Keys">
      <summary>Gets a collection containing the keys in the <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
      <returns>A collection containing the keys in the <see cref="T:System.Collections.Generic.Dictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Values">
      <summary>Gets a collection that contains the values in the <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
      <returns>A collection that contains the values in the <see cref="T:System.Collections.Generic.Dictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value that indicates whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized with the SyncRoot.</summary>
      <returns>
        <see langword="true" /> if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, <see langword="false" />. For <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> this property always returns <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />. This property is not supported.</summary>
      <exception cref="T:System.NotSupportedException">This property is not supported.</exception>
      <returns>Always returns null.</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary>Gets a value that indicates whether the <see cref="T:System.Collections.Generic.IDictionary`2" /> has a fixed size.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.Generic.IDictionary`2" /> has a fixed size; otherwise, <see langword="false" />. For <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />, this property always returns <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary>Gets a value that indicates whether the <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only; otherwise, <see langword="false" />. For <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />, this property always returns <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary>Gets or sets the value associated with the specified key.</summary>
      <param name="key">The key of the value to get or set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is  <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">A value is being assigned, and <paramref name="key" /> is of a type that is not assignable to the key type or the value type of the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />.</exception>
      <returns>The value associated with the specified key, or  <see langword="null" /> if <paramref name="key" /> is not in the dictionary or <paramref name="key" /> is of a type that is not assignable to the key type of the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Keys">
      <summary>Gets an <see cref="T:System.Collections.ICollection" /> that contains the keys of the  <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>An interface that contains the keys of the <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Values">
      <summary>Gets an <see cref="T:System.Collections.ICollection" /> that contains the values in the <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns>An interface that contains the values in the <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.Values">
      <summary>Gets a collection that contains the values in the <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
      <returns>A collection that contains the values in the <see cref="T:System.Collections.Generic.Dictionary`2" />.</returns>
    </member>
    <member name="T:System.Collections.Concurrent.ConcurrentQueue`1">
      <summary>Represents a thread-safe first in-first out (FIFO) collection.</summary>
      <typeparam name="T">The type of the elements contained in the queue.</typeparam>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> class.</summary>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> class that contains elements copied from the specified collection.</summary>
      <param name="collection">The collection whose elements are copied to the new <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="collection" /> argument is null.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.Clear">
      <summary>Removes all objects from the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />.</summary>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.CopyTo(`0[],System.Int32)">
      <summary>Copies the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> elements to an existing one-dimensional <see cref="T:System.Array" />, starting at the specified array index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> is equal to or greater than the length of the <paramref name="array" /> -or- The number of elements in the source <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.Enqueue(`0)">
      <summary>Adds an object to the end of the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />.</summary>
      <param name="item">The object to add to the end of the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />. The value can be a null reference (Nothing in Visual Basic) for reference types.</param>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.GetEnumerator">
      <summary>Returns an enumerator that iterates through the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />.</summary>
      <returns>An enumerator for the contents of the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryAdd(`0)">
      <summary>Attempts to add an object to the <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" />.</summary>
      <param name="item">The object to add to the <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" />. The value can be a null reference (Nothing in Visual Basic) for reference types.</param>
      <returns>
        <see langword="true" /> if the object was added successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryTake(`0@)">
      <summary>Attempts to remove and return an object from the <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" />.</summary>
      <param name="item">When this method returns, if the operation was successful, <paramref name="item" /> contains the object removed. If no object was available to be removed, the value is unspecified.</param>
      <returns>
        <see langword="true" /> if an element was removed and returned successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from the <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional. -or- <paramref name="array" /> does not have zero-based indexing. -or- <paramref name="index" /> is equal to or greater than the length of the <paramref name="array" /> -or- The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />. -or- The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.ToArray">
      <summary>Copies the elements stored in the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> to a new array.</summary>
      <returns>A new array containing a snapshot of elements copied from the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.TryDequeue(`0@)">
      <summary>Tries to remove and return the object at the beginning of the concurrent queue.</summary>
      <param name="result">When this method returns, if the operation was successful, <paramref name="result" /> contains the object removed. If no object was available to be removed, the value is unspecified.</param>
      <returns>
        <see langword="true" /> if an element was removed and returned from the beginning of the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.TryPeek(`0@)">
      <summary>Tries to return an object from the beginning of the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> without removing it.</summary>
      <param name="result">When this method returns, <paramref name="result" /> contains an object from the beginning of the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> or an unspecified value if the operation failed.</param>
      <returns>
        <see langword="true" /> if an object was returned successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentQueue`1.Count">
      <summary>Gets the number of elements contained in the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />.</summary>
      <returns>The number of elements contained in the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />.</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentQueue`1.IsEmpty">
      <summary>Gets a value that indicates whether the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> is empty.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> is empty; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized with the SyncRoot.</summary>
      <returns>Always returns <see langword="false" /> to indicate access is not synchronized.</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />. This property is not supported.</summary>
      <exception cref="T:System.NotSupportedException">The SyncRoot property is not supported.</exception>
      <returns>Returns <see langword="null" />.</returns>
    </member>
    <member name="T:System.Collections.Concurrent.ConcurrentStack`1">
      <summary>Represents a thread-safe last in-first out (LIFO) collection.</summary>
      <typeparam name="T">The type of the elements contained in the stack.</typeparam>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> class.</summary>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> class that contains elements copied from the specified collection.</summary>
      <param name="collection">The collection whose elements are copied to the new <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="collection" /> argument is null.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.Clear">
      <summary>Removes all objects from the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />.</summary>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.CopyTo(`0[],System.Int32)">
      <summary>Copies the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> elements to an existing one-dimensional <see cref="T:System.Array" />, starting at the specified array index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> is equal to or greater than the length of the <paramref name="array" /> -or- The number of elements in the source <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.GetEnumerator">
      <summary>Returns an enumerator that iterates through the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />.</summary>
      <returns>An enumerator for the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.Push(`0)">
      <summary>Inserts an object at the top of the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />.</summary>
      <param name="item">The object to push onto the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />. The value can be a null reference (Nothing in Visual Basic) for reference types.</param>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.PushRange(`0[])">
      <summary>Inserts multiple objects at the top of the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> atomically.</summary>
      <param name="items">The objects to push onto the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="items" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.PushRange(`0[],System.Int32,System.Int32)">
      <summary>Inserts multiple objects at the top of the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> atomically.</summary>
      <param name="items">The objects to push onto the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />.</param>
      <param name="startIndex">The zero-based offset in <paramref name="items" /> at which to begin inserting elements onto the top of the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />.</param>
      <param name="count">The number of elements to be inserted onto the top of the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="items" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> or <paramref name="count" /> is negative. Or <paramref name="startIndex" /> is greater than or equal to the length of <paramref name="items" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> + <paramref name="count" /> is greater than the length of <paramref name="items" />.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryAdd(`0)">
      <summary>Attempts to add an object to the <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" />.</summary>
      <param name="item">The object to add to the <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" />. The value can be a null reference (Nothing in Visual Basic) for reference types.</param>
      <returns>
        <see langword="true" /> if the object was added successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryTake(`0@)">
      <summary>Attempts to remove and return an object from the <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" />.</summary>
      <param name="item">When this method returns, if the operation was successful, <paramref name="item" /> contains the object removed. If no object was available to be removed, the value is unspecified.</param>
      <returns>
        <see langword="true" /> if an element was removed and returned successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional. -or- <paramref name="array" /> does not have zero-based indexing. -or- <paramref name="index" /> is equal to or greater than the length of the <paramref name="array" /> -or- The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />. -or- The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.ToArray">
      <summary>Copies the items stored in the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> to a new array.</summary>
      <returns>A new array containing a snapshot of elements copied from the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.TryPeek(`0@)">
      <summary>Attempts to return an object from the top of the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> without removing it.</summary>
      <param name="result">When this method returns, <paramref name="result" /> contains an object from the top of the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> or an unspecified value if the operation failed.</param>
      <returns>
        <see langword="true" /> if and object was returned successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.TryPop(`0@)">
      <summary>Attempts to pop and return the object at the top of the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />.</summary>
      <param name="result">When this method returns, if the operation was successful, <paramref name="result" /> contains the object removed. If no object was available to be removed, the value is unspecified.</param>
      <returns>
        <see langword="true" /> if an element was removed and returned from the top of the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.TryPopRange(`0[])">
      <summary>Attempts to pop and return multiple objects from the top of the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> atomically.</summary>
      <param name="items">The <see cref="T:System.Array" /> to which objects popped from the top of the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> will be added.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="items" /> is a null argument (Nothing in Visual Basic).</exception>
      <returns>The number of objects successfully popped from the top of the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> and inserted in <paramref name="items" />.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.TryPopRange(`0[],System.Int32,System.Int32)">
      <summary>Attempts to pop and return multiple objects from the top of the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> atomically.</summary>
      <param name="items">The <see cref="T:System.Array" /> to which objects popped from the top of the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> will be added.</param>
      <param name="startIndex">The zero-based offset in <paramref name="items" /> at which to begin inserting elements from the top of the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />.</param>
      <param name="count">The number of elements to be popped from top of the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> and inserted into <paramref name="items" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="items" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> or <paramref name="count" /> is negative. Or <paramref name="startIndex" /> is greater than or equal to the length of <paramref name="items" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> + <paramref name="count" /> is greater than the length of <paramref name="items" />.</exception>
      <returns>The number of objects successfully popped from the top of the stack and inserted in <paramref name="items" />.</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentStack`1.Count">
      <summary>Gets the number of elements contained in the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />.</summary>
      <returns>The number of elements contained in the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />.</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentStack`1.IsEmpty">
      <summary>Gets a value that indicates whether the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> is empty.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> is empty; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized with the SyncRoot.</summary>
      <returns>Always returns <see langword="false" /> to indicate access is not synchronized.</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />. This property is not supported.</summary>
      <exception cref="T:System.NotSupportedException">The SyncRoot property is not supported</exception>
      <returns>Returns <see langword="null" />.</returns>
    </member>
    <member name="T:System.Collections.Concurrent.EnumerablePartitionerOptions">
      <summary>Specifies options to control the buffering behavior of a partitioner.</summary>
    </member>
    <member name="F:System.Collections.Concurrent.EnumerablePartitionerOptions.NoBuffering">
      <summary>Create a partitioner that takes items from the source enumerable one at a time and does not use intermediate storage that can be accessed more efficiently by multiple threads. This option provides support for low latency (items will be processed as soon as they are available from the source) and provides partial support for dependencies between items (a thread cannot deadlock waiting for an item that the thread itself is responsible for processing).</summary>
    </member>
    <member name="F:System.Collections.Concurrent.EnumerablePartitionerOptions.None">
      <summary>Use the default behavior, which is to use buffering to achieve optimal performance.</summary>
    </member>
    <member name="T:System.Collections.Concurrent.IProducerConsumerCollection`1">
      <summary>Defines methods to manipulate thread-safe collections intended for producer/consumer usage. This interface provides a unified representation for producer/consumer collections so that higher level abstractions such as <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> can use the collection as the underlying storage mechanism.</summary>
      <typeparam name="T">Specifies the type of elements in the collection.</typeparam>
    </member>
    <member name="M:System.Collections.Concurrent.IProducerConsumerCollection`1.CopyTo(`0[],System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> to an <see cref="T:System.Array" />, starting at a specified index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from the <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" />.  
  
 The array must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> is equal to or greater than the length of the <paramref name="array" /> -or- The number of elements in the collection is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.IProducerConsumerCollection`1.ToArray">
      <summary>Copies the elements contained in the <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> to a new array.</summary>
      <returns>A new array containing the elements copied from the <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" />.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.IProducerConsumerCollection`1.TryAdd(`0)">
      <summary>Attempts to add an object to the <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" />.</summary>
      <param name="item">The object to add to the <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" />.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="item" /> was invalid for this collection.</exception>
      <returns>
        <see langword="true" /> if the object was added successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.IProducerConsumerCollection`1.TryTake(`0@)">
      <summary>Attempts to remove and return an object from the <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" />.</summary>
      <param name="item">When this method returns, if the object was removed and returned successfully, <paramref name="item" /> contains the removed object. If no object was available to be removed, the value is unspecified.</param>
      <returns>
        <see langword="true" /> if an object was removed and returned successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Collections.Concurrent.OrderablePartitioner`1">
      <summary>Represents a particular manner of splitting an orderable data source into multiple partitions.</summary>
      <typeparam name="TSource">Type of the elements in the collection.</typeparam>
    </member>
    <member name="M:System.Collections.Concurrent.OrderablePartitioner`1.#ctor(System.Boolean,System.Boolean,System.Boolean)">
      <summary>Called from constructors in derived classes to initialize the <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> class with the specified constraints on the index keys.</summary>
      <param name="keysOrderedInEachPartition">Indicates whether the elements in each partition are yielded in the order of increasing keys.</param>
      <param name="keysOrderedAcrossPartitions">Indicates whether elements in an earlier partition always come before elements in a later partition. If true, each element in partition 0 has a smaller order key than any element in partition 1, each element in partition 1 has a smaller order key than any element in partition 2, and so on.</param>
      <param name="keysNormalized">Indicates whether keys are normalized. If true, all order keys are distinct integers in the range [0 .. numberOfElements-1]. If false, order keys must still be distinct, but only their relative order is considered, not their absolute values.</param>
    </member>
    <member name="M:System.Collections.Concurrent.OrderablePartitioner`1.GetDynamicPartitions">
      <summary>Creates an object that can partition the underlying collection into a variable number of partitions.</summary>
      <exception cref="T:System.NotSupportedException">Dynamic partitioning is not supported by the base class. It must be implemented in derived classes.</exception>
      <returns>An object that can create partitions over the underlying data source.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.OrderablePartitioner`1.GetOrderableDynamicPartitions">
      <summary>Creates an object that can partition the underlying collection into a variable number of partitions.</summary>
      <exception cref="T:System.NotSupportedException">Dynamic partitioning is not supported by this partitioner.</exception>
      <returns>An object that can create partitions over the underlying data source.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.OrderablePartitioner`1.GetOrderablePartitions(System.Int32)">
      <summary>Partitions the underlying collection into the specified number of orderable partitions.</summary>
      <param name="partitionCount">The number of partitions to create.</param>
      <returns>A list containing <paramref name="partitionCount" /> enumerators.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.OrderablePartitioner`1.GetPartitions(System.Int32)">
      <summary>Partitions the underlying collection into the given number of ordered partitions.</summary>
      <param name="partitionCount">The number of partitions to create.</param>
      <returns>A list containing <paramref name="partitionCount" /> enumerators.</returns>
    </member>
    <member name="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized">
      <summary>Gets whether order keys are normalized.</summary>
      <returns>
        <see langword="true" /> if the keys are normalized; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedAcrossPartitions">
      <summary>Gets whether elements in an earlier partition always come before elements in a later partition.</summary>
      <returns>
        <see langword="true" /> if the elements in an earlier partition always come before elements in a later partition; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedInEachPartition">
      <summary>Gets whether elements in each partition are yielded in the order of increasing keys.</summary>
      <returns>
        <see langword="true" /> if the elements in each partition are yielded in the order of increasing keys; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Collections.Concurrent.Partitioner">
      <summary>Provides common partitioning strategies for arrays, lists, and enumerables.</summary>
    </member>
    <member name="M:System.Collections.Concurrent.Partitioner.Create(System.Int32,System.Int32)">
      <summary>Creates a partitioner that chunks the user-specified range.</summary>
      <param name="fromInclusive">The lower, inclusive bound of the range.</param>
      <param name="toExclusive">The upper, exclusive bound of the range.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="toExclusive" /> argument is less than or equal to the <paramref name="fromInclusive" /> argument.</exception>
      <returns>A partitioner.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.Partitioner.Create(System.Int32,System.Int32,System.Int32)">
      <summary>Creates a partitioner that chunks the user-specified range.</summary>
      <param name="fromInclusive">The lower, inclusive bound of the range.</param>
      <param name="toExclusive">The upper, exclusive bound of the range.</param>
      <param name="rangeSize">The size of each subrange.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="toExclusive" /> argument is less than or equal to the <paramref name="fromInclusive" /> argument.  
  
 -or-  
  
 The <paramref name="rangeSize" /> argument is less than or equal to 0.</exception>
      <returns>A partitioner.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.Partitioner.Create(System.Int64,System.Int64)">
      <summary>Creates a partitioner that chunks the user-specified range.</summary>
      <param name="fromInclusive">The lower, inclusive bound of the range.</param>
      <param name="toExclusive">The upper, exclusive bound of the range.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="toExclusive" /> argument is less than or equal to the <paramref name="fromInclusive" /> argument.</exception>
      <returns>A partitioner.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.Partitioner.Create(System.Int64,System.Int64,System.Int64)">
      <summary>Creates a partitioner that chunks the user-specified range.</summary>
      <param name="fromInclusive">The lower, inclusive bound of the range.</param>
      <param name="toExclusive">The upper, exclusive bound of the range.</param>
      <param name="rangeSize">The size of each subrange.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="toExclusive" /> argument is less than or equal to the <paramref name="fromInclusive" /> argument.  
  
 -or-  
  
 The <paramref name="rangeSize" /> argument is less than or equal to 0.</exception>
      <returns>A partitioner.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.Partitioner.Create``1(``0[],System.Boolean)">
      <summary>Creates an orderable partitioner from a <see cref="T:System.Array" /> instance.</summary>
      <param name="array">The array to be partitioned.</param>
      <param name="loadBalance">A Boolean value that indicates whether the created partitioner should dynamically load balance between partitions rather than statically partition.</param>
      <typeparam name="TSource">Type of the elements in source array.</typeparam>
      <returns>An orderable partitioner based on the input array.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Creates an orderable partitioner from a <see cref="T:System.Collections.Generic.IEnumerable`1" /> instance.</summary>
      <param name="source">The enumerable to be partitioned.</param>
      <typeparam name="TSource">Type of the elements in source enumerable.</typeparam>
      <returns>An orderable partitioner based on the input array.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Concurrent.EnumerablePartitionerOptions)">
      <summary>Creates an orderable partitioner from a <see cref="T:System.Collections.Generic.IEnumerable`1" /> instance.</summary>
      <param name="source">The enumerable to be partitioned.</param>
      <param name="partitionerOptions">Options to control the buffering behavior of the partitioner.</param>
      <typeparam name="TSource">Type of the elements in source enumerable.</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="partitionerOptions" /> argument specifies an invalid value for <see cref="T:System.Collections.Concurrent.EnumerablePartitionerOptions" />.</exception>
      <returns>An orderable partitioner based on the input array.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IList{``0},System.Boolean)">
      <summary>Creates an orderable partitioner from an <see cref="T:System.Collections.Generic.IList`1" /> instance.</summary>
      <param name="list">The list to be partitioned.</param>
      <param name="loadBalance">A Boolean value that indicates whether the created partitioner should dynamically load balance between partitions rather than statically partition.</param>
      <typeparam name="TSource">Type of the elements in source list.</typeparam>
      <returns>An orderable partitioner based on the input list.</returns>
    </member>
    <member name="T:System.Collections.Concurrent.Partitioner`1">
      <summary>Represents a particular manner of splitting a data source into multiple partitions.</summary>
      <typeparam name="TSource">Type of the elements in the collection.</typeparam>
    </member>
    <member name="M:System.Collections.Concurrent.Partitioner`1.#ctor">
      <summary>Creates a new partitioner instance.</summary>
    </member>
    <member name="M:System.Collections.Concurrent.Partitioner`1.GetDynamicPartitions">
      <summary>Creates an object that can partition the underlying collection into a variable number of partitions.</summary>
      <exception cref="T:System.NotSupportedException">Dynamic partitioning is not supported by the base class. You must implement it in a derived class.</exception>
      <returns>An object that can create partitions over the underlying data source.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)">
      <summary>Partitions the underlying collection into the given number of partitions.</summary>
      <param name="partitionCount">The number of partitions to create.</param>
      <returns>A list containing <paramref name="partitionCount" /> enumerators.</returns>
    </member>
    <member name="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions">
      <summary>Gets whether additional partitions can be created dynamically.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.Concurrent.Partitioner`1" /> can create partitions dynamically as they are requested; <see langword="false" /> if the <see cref="T:System.Collections.Concurrent.Partitioner`1" /> can only allocate partitions statically.</returns>
    </member>
    <member name="T:System.Collections.DictionaryEntry">
      <summary>Defines a dictionary key/value pair that can be set or retrieved.</summary>
    </member>
    <member name="M:System.Collections.DictionaryEntry.#ctor(System.Object,System.Object)">
      <summary>Initializes an instance of the <see cref="T:System.Collections.DictionaryEntry" /> type with the specified key and value.</summary>
      <param name="key">The object defined in each key/value pair.</param>
      <param name="value">The definition associated with <paramref name="key" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" /> and the .NET Framework version is 1.0 or 1.1.</exception>
    </member>
    <member name="M:System.Collections.DictionaryEntry.Deconstruct(System.Object@,System.Object@)">
      <summary>Deconstructs the current <see cref="T:System.Collections.DictionaryEntry" />.</summary>
      <param name="key">The key of the current <see cref="T:System.Collections.DictionaryEntry" />.</param>
      <param name="value">The value of the current <see cref="T:System.Collections.DictionaryEntry" />.</param>
    </member>
    <member name="P:System.Collections.DictionaryEntry.Key">
      <summary>Gets or sets the key in the key/value pair.</summary>
      <returns>The key in the key/value pair.</returns>
    </member>
    <member name="P:System.Collections.DictionaryEntry.Value">
      <summary>Gets or sets the value in the key/value pair.</summary>
      <returns>The value in the key/value pair.</returns>
    </member>
    <member name="T:System.Collections.Generic.Comparer`1">
      <summary>Provides a base class for implementations of the <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface.</summary>
      <typeparam name="T">The type of objects to compare.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.Comparer`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.Comparer`1" /> class.</summary>
    </member>
    <member name="M:System.Collections.Generic.Comparer`1.Compare(`0,`0)">
      <summary>When overridden in a derived class, performs a comparison of two objects of the same type and returns a value indicating whether one object is less than, equal to, or greater than the other.</summary>
      <param name="x">The first object to compare.</param>
      <param name="y">The second object to compare.</param>
      <exception cref="T:System.ArgumentException">Type <paramref name="T" /> does not implement either the <see cref="T:System.IComparable`1" /> generic interface or the <see cref="T:System.IComparable" /> interface.</exception>
      <returns>A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in the following table.  
  
 <list type="table"><listheader><term> Value</term><description> Meaning</description></listheader><item><term> Less than zero</term><description><paramref name="x" /> is less than <paramref name="y" />.</description></item><item><term> Zero</term><description><paramref name="x" /> equals <paramref name="y" />.</description></item><item><term> Greater than zero</term><description><paramref name="x" /> is greater than <paramref name="y" />.</description></item></list></returns>
    </member>
    <member name="M:System.Collections.Generic.Comparer`1.Create(System.Comparison{`0})">
      <summary>Creates a comparer by using the specified comparison.</summary>
      <param name="comparison">The comparison to use.</param>
      <returns>The new comparer.</returns>
    </member>
    <member name="M:System.Collections.Generic.Comparer`1.System#Collections#IComparer#Compare(System.Object,System.Object)">
      <summary>Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.</summary>
      <param name="x">The first object to compare.</param>
      <param name="y">The second object to compare.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> or <paramref name="y" /> is of a type that cannot be cast to type <paramref name="T" />.  
  
 -or-  
  
 <paramref name="x" /> and <paramref name="y" /> do not implement either the <see cref="T:System.IComparable`1" /> generic interface or the <see cref="T:System.IComparable" /> interface.</exception>
      <returns>A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in the following table.  
  
 <list type="table"><listheader><term> Value</term><description> Meaning</description></listheader><item><term> Less than zero</term><description><paramref name="x" /> is less than <paramref name="y" />.</description></item><item><term> Zero</term><description><paramref name="x" /> equals <paramref name="y" />.</description></item><item><term> Greater than zero</term><description><paramref name="x" /> is greater than <paramref name="y" />.</description></item></list></returns>
    </member>
    <member name="P:System.Collections.Generic.Comparer`1.Default">
      <summary>Returns a default sort order comparer for the type specified by the generic argument.</summary>
      <returns>An object that inherits <see cref="T:System.Collections.Generic.Comparer`1" /> and serves as a sort order comparer for type <paramref name="T" />.</returns>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2">
      <summary>Represents a collection of keys and values.</summary>
      <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
      <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.Dictionary`2" /> class that is empty, has the default initial capacity, and uses the default equality comparer for the key type.</summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.Dictionary`2" /> class that contains elements copied from the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> and uses the default equality comparer for the key type.</summary>
      <param name="dictionary">The <see cref="T:System.Collections.Generic.IDictionary`2" /> whose elements are copied to the new <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dictionary" /> contains one or more duplicate keys.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.Dictionary`2" /> class that contains elements copied from the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> and uses the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <param name="dictionary">The <see cref="T:System.Collections.Generic.IDictionary`2" /> whose elements are copied to the new <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing keys, or <see langword="null" /> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1" /> for the type of the key.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dictionary" /> contains one or more duplicate keys.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.Dictionary`2" /> class that contains elements copied from the specified <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
      <param name="collection">The <see cref="T:System.Collections.Generic.IEnumerable`1" />  whose elements are copied to the new <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collection" /> contains one or more duplicated keys.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.Dictionary`2" /> class that contains elements copied from the specified <see cref="T:System.Collections.Generic.IEnumerable`1" /> and uses the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <param name="collection">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are copied to the new <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing keys, or <see langword="null" /> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1" /> for the type of the key.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collection" /> contains one or more duplicated keys.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.Dictionary`2" /> class that is empty, has the default initial capacity, and uses the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing keys, or <see langword="null" /> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1" /> for the type of the key.</param>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.Dictionary`2" /> class that is empty, has the specified initial capacity, and uses the default equality comparer for the key type.</summary>
      <param name="capacity">The initial number of elements that the <see cref="T:System.Collections.Generic.Dictionary`2" /> can contain.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is less than 0.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.Dictionary`2" /> class that is empty, has the specified initial capacity, and uses the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <param name="capacity">The initial number of elements that the <see cref="T:System.Collections.Generic.Dictionary`2" /> can contain.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing keys, or <see langword="null" /> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1" /> for the type of the key.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is less than 0.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.Dictionary`2" /> class with serialized data.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object containing the information required to serialize the <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> structure containing the source and destination of the serialized stream associated with the <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Add(`0,`1)">
      <summary>Adds the specified key and value to the dictionary.</summary>
      <param name="key">The key of the element to add.</param>
      <param name="value">The value of the element to add. The value can be <see langword="null" /> for reference types.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.Dictionary`2" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Clear">
      <summary>Removes all keys and values from the <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ContainsKey(`0)">
      <summary>Determines whether the <see cref="T:System.Collections.Generic.Dictionary`2" /> contains the specified key.</summary>
      <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.Generic.Dictionary`2" /> contains an element with the specified key; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ContainsValue(`1)">
      <summary>Determines whether the <see cref="T:System.Collections.Generic.Dictionary`2" /> contains a specific value.</summary>
      <param name="value">The value to locate in the <see cref="T:System.Collections.Generic.Dictionary`2" />. The value can be <see langword="null" /> for reference types.</param>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.Generic.Dictionary`2" /> contains an element with the specified value; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.EnsureCapacity(System.Int32)">
      <summary>Ensures that the dictionary can hold up to a specified number of entries without any further expansion of its backing storage.</summary>
      <param name="capacity">The number of entries.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is less than 0.</exception>
      <returns>The current capacity of the <see cref="T:System.Collections.Generic.Dictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.GetEnumerator">
      <summary>Returns an enumerator that iterates through the <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
      <returns>A <see cref="T:System.Collections.Generic.Dictionary`2.Enumerator" /> structure for the <see cref="T:System.Collections.Generic.Dictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Implements the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface and returns the data needed to serialize the <see cref="T:System.Collections.Generic.Dictionary`2" /> instance.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains the information required to serialize the <see cref="T:System.Collections.Generic.Dictionary`2" /> instance.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> structure that contains the source and destination of the serialized stream associated with the <see cref="T:System.Collections.Generic.Dictionary`2" /> instance.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.OnDeserialization(System.Object)">
      <summary>Implements the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface and raises the deserialization event when the deserialization is complete.</summary>
      <param name="sender">The source of the deserialization event.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object associated with the current <see cref="T:System.Collections.Generic.Dictionary`2" /> instance is invalid.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Remove(`0)">
      <summary>Removes the value with the specified key from the <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
      <param name="key">The key of the element to remove.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> if the element is successfully found and removed; otherwise, <see langword="false" />.  This method returns <see langword="false" /> if <paramref name="key" /> is not found in the <see cref="T:System.Collections.Generic.Dictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Remove(`0,`1@)">
      <summary>Removes the value with the specified key from the <see cref="T:System.Collections.Generic.Dictionary`2" />, and copies the element to the <paramref name="value" /> parameter.</summary>
      <param name="key">The key of the element to remove.</param>
      <param name="value">The removed element.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> if the element is successfully found and removed; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Adds the specified value to the <see cref="T:System.Collections.Generic.ICollection`1" /> with the specified key.</summary>
      <param name="keyValuePair">The <see cref="T:System.Collections.Generic.KeyValuePair`2" /> structure representing the key and value to add to the <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <exception cref="T:System.ArgumentNullException">The key of <paramref name="keyValuePair" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.Dictionary`2" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific key and value.</summary>
      <param name="keyValuePair">The <see cref="T:System.Collections.Generic.KeyValuePair`2" /> structure to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="keyValuePair" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an array of type <see cref="T:System.Collections.Generic.KeyValuePair`2" />, starting at the specified array index.</summary>
      <param name="array">The one-dimensional array of type <see cref="T:System.Collections.Generic.KeyValuePair`2" /> that is the destination of the <see cref="T:System.Collections.Generic.KeyValuePair`2" /> elements copied from the <see cref="T:System.Collections.Generic.ICollection`1" />. The array must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Removes a key and value from the dictionary.</summary>
      <param name="keyValuePair">The <see cref="T:System.Collections.Generic.KeyValuePair`2" /> structure representing the key and value to remove from the <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <returns>
        <see langword="true" /> if the key and value represented by <paramref name="keyValuePair" /> is successfully found and removed; otherwise, <see langword="false" />. This method returns <see langword="false" /> if <paramref name="keyValuePair" /> is not found in the <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an array, starting at the specified array index.</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The array must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.  
  
 -or-  
  
 <paramref name="array" /> does not have zero-based indexing.  
  
 -or-  
  
 The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.  
  
 -or-  
  
 The type of the source <see cref="T:System.Collections.Generic.ICollection`1" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>Adds the specified key and value to the dictionary.</summary>
      <param name="key">The object to use as the key.</param>
      <param name="value">The object to use as the value.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> is of a type that is not assignable to the key type <paramref name="TKey" /> of the <see cref="T:System.Collections.Generic.Dictionary`2" />.  
  
 -or-  
  
 <paramref name="value" /> is of a type that is not assignable to <paramref name="TValue" />, the type of values in the <see cref="T:System.Collections.Generic.Dictionary`2" />.  
  
 -or-  
  
 A value with the same key already exists in the <see cref="T:System.Collections.Generic.Dictionary`2" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary>Determines whether the <see cref="T:System.Collections.IDictionary" /> contains an element with the specified key.</summary>
      <param name="key">The key to locate in the <see cref="T:System.Collections.IDictionary" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.IDictionary" /> contains an element with the specified key; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary>Returns an <see cref="T:System.Collections.IDictionaryEnumerator" /> for the <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns>An <see cref="T:System.Collections.IDictionaryEnumerator" /> for the <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary>Removes the element with the specified key from the <see cref="T:System.Collections.IDictionary" />.</summary>
      <param name="key">The key of the element to remove.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.TrimExcess">
      <summary>Sets the capacity of this dictionary to what it would be if it had been originally initialized with all its entries.</summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.TrimExcess(System.Int32)">
      <summary>Sets the capacity of this dictionary to hold up a specified number of entries without any further expansion of its backing storage.</summary>
      <param name="capacity">The new capacity.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is less than <see cref="T:System.Collections.Generic.Dictionary`2" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.TryAdd(`0,`1)">
      <summary>Attempts to add the specified key and value to the dictionary.</summary>
      <param name="key">The key of the element to add.</param>
      <param name="value">The value of the element to add. It can be <see langword="null" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> if the key/value pair was added to the dictionary successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)">
      <summary>Gets the value associated with the specified key.</summary>
      <param name="key">The key of the value to get.</param>
      <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.Generic.Dictionary`2" /> contains an element with the specified key; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Comparer">
      <summary>Gets the <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> that is used to determine equality of keys for the dictionary.</summary>
      <returns>The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> generic interface implementation that is used to determine equality of keys for the current <see cref="T:System.Collections.Generic.Dictionary`2" /> and to provide hash values for the keys.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Count">
      <summary>Gets the number of key/value pairs contained in the <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
      <returns>The number of key/value pairs contained in the <see cref="T:System.Collections.Generic.Dictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Item(`0)">
      <summary>Gets or sets the value associated with the specified key.</summary>
      <param name="key">The key of the value to get or set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and <paramref name="key" /> does not exist in the collection.</exception>
      <returns>The value associated with the specified key. If the specified key is not found, a get operation throws a <see cref="T:System.Collections.Generic.KeyNotFoundException" />, and a set operation creates a new element with the specified key.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Keys">
      <summary>Gets a collection containing the keys in the <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
      <returns>A <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> containing the keys in the <see cref="T:System.Collections.Generic.Dictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
      <summary>Gets a value that indicates whether the dictionary is read-only.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, <see langword="false" />. In the default implementation of <see cref="T:System.Collections.Generic.Dictionary`2" />, this property always returns <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary>Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> of type <paramref name="TKey" /> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary>Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> of type <paramref name="TValue" /> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Keys">
      <summary>Gets a collection containing the keys of the <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" />.</summary>
      <returns>A collection containing the keys of the <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Values">
      <summary>Gets a collection containing the values of the <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" />.</summary>
      <returns>A collection containing the values of the <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value that indicates whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).</summary>
      <returns>
        <see langword="true" /> if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, <see langword="false" />.  In the default implementation of <see cref="T:System.Collections.Generic.Dictionary`2" />, this property always returns <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary>Gets a value that indicates whether the <see cref="T:System.Collections.IDictionary" /> has a fixed size.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.IDictionary" /> has a fixed size; otherwise, <see langword="false" />.  In the default implementation of <see cref="T:System.Collections.Generic.Dictionary`2" />, this property always returns <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary>Gets a value that indicates whether the <see cref="T:System.Collections.IDictionary" /> is read-only.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.IDictionary" /> is read-only; otherwise, <see langword="false" />.  In the default implementation of <see cref="T:System.Collections.Generic.Dictionary`2" />, this property always returns <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary>Gets or sets the value with the specified key.</summary>
      <param name="key">The key of the value to get.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">A value is being assigned, and <paramref name="key" /> is of a type that is not assignable to the key type <paramref name="TKey" /> of the <see cref="T:System.Collections.Generic.Dictionary`2" />.  
  
 -or-  
  
 A value is being assigned, and <paramref name="value" /> is of a type that is not assignable to the value type <paramref name="TValue" /> of the <see cref="T:System.Collections.Generic.Dictionary`2" />.</exception>
      <returns>The value associated with the specified key, or <see langword="null" /> if <paramref name="key" /> is not in the dictionary or <paramref name="key" /> is of a type that is not assignable to the key type <paramref name="TKey" /> of the <see cref="T:System.Collections.Generic.Dictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Keys">
      <summary>Gets an <see cref="T:System.Collections.ICollection" /> containing the keys of the <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns>An <see cref="T:System.Collections.ICollection" /> containing the keys of the <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Values">
      <summary>Gets an <see cref="T:System.Collections.ICollection" /> containing the values in the <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns>An <see cref="T:System.Collections.ICollection" /> containing the values in the <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Values">
      <summary>Gets a collection containing the values in the <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
      <returns>A <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> containing the values in the <see cref="T:System.Collections.Generic.Dictionary`2" />.</returns>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.Enumerator">
      <summary>Enumerates the elements of a <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Enumerator.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Collections.Generic.Dictionary`2.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Enumerator.MoveNext">
      <summary>Advances the enumerator to the next element of the <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
      <returns>
        <see langword="true" /> if the enumerator was successfully advanced to the next element; <see langword="false" /> if the enumerator has passed the end of the collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.Current">
      <summary>Gets the element at the current position of the enumerator.</summary>
      <returns>The element in the <see cref="T:System.Collections.Generic.Dictionary`2" /> at the current position of the enumerator.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Entry">
      <summary>Gets the element at the current position of the enumerator.</summary>
      <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.</exception>
      <returns>The element in the dictionary at the current position of the enumerator, as a <see cref="T:System.Collections.DictionaryEntry" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Key">
      <summary>Gets the key of the element at the current position of the enumerator.</summary>
      <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.</exception>
      <returns>The key of the element in the dictionary at the current position of the enumerator.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Value">
      <summary>Gets the value of the element at the current position of the enumerator.</summary>
      <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.</exception>
      <returns>The value of the element in the dictionary at the current position of the enumerator.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Gets the element at the current position of the enumerator.</summary>
      <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.</exception>
      <returns>The element in the collection at the current position of the enumerator, as an <see cref="T:System.Object" />.</returns>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.KeyCollection">
      <summary>Represents the collection of keys in a <see cref="T:System.Collections.Generic.Dictionary`2" />. This class cannot be inherited.</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.#ctor(System.Collections.Generic.Dictionary{`0,`1})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> class that reflects the keys in the specified <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
      <param name="dictionary">The <see cref="T:System.Collections.Generic.Dictionary`2" /> whose keys are reflected in the new <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.CopyTo(`0[],System.Int32)">
      <summary>Copies the <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> elements to an existing one-dimensional <see cref="T:System.Array" />, starting at the specified array index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.GetEnumerator">
      <summary>Returns an enumerator that iterates through the <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />.</summary>
      <returns>A <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator" /> for the <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Add(`0)">
      <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />. This implementation always throws <see cref="T:System.NotSupportedException" />.</summary>
      <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Clear">
      <summary>Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />. This implementation always throws <see cref="T:System.NotSupportedException" />.</summary>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Contains(`0)">
      <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Remove(`0)">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />. This implementation always throws <see cref="T:System.NotSupportedException" />.</summary>
      <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
      <returns>
        <see langword="true" /> if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, <see langword="false" />. This method also returns <see langword="false" /> if item was not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#IEnumerable{TKey}#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.  
  
 -or-  
  
 <paramref name="array" /> does not have zero-based indexing.  
  
 -or-  
  
 The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.  
  
 -or-  
  
 The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.Count">
      <summary>Gets the number of elements contained in the <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />.</summary>
      <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />.  
  
 Retrieving the value of this property is an O(1) operation.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, <see langword="false" />.  In the default implementation of <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />, this property always returns <see langword="true" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).</summary>
      <returns>
        <see langword="true" /> if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, <see langword="false" />.  In the default implementation of <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />, this property always returns <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#ICollection#SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.  In the default implementation of <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />, this property always returns the current instance.</returns>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator">
      <summary>Enumerates the elements of a <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />.</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.MoveNext">
      <summary>Advances the enumerator to the next element of the <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />.</summary>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
      <returns>
        <see langword="true" /> if the enumerator was successfully advanced to the next element; <see langword="false" /> if the enumerator has passed the end of the collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.Current">
      <summary>Gets the element at the current position of the enumerator.</summary>
      <returns>The element in the <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> at the current position of the enumerator.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Gets the element at the current position of the enumerator.</summary>
      <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.</exception>
      <returns>The element in the collection at the current position of the enumerator.</returns>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.ValueCollection">
      <summary>Represents the collection of values in a <see cref="T:System.Collections.Generic.Dictionary`2" />. This class cannot be inherited.</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.#ctor(System.Collections.Generic.Dictionary{`0,`1})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> class that reflects the values in the specified <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
      <param name="dictionary">The <see cref="T:System.Collections.Generic.Dictionary`2" /> whose values are reflected in the new <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.CopyTo(`1[],System.Int32)">
      <summary>Copies the <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> elements to an existing one-dimensional <see cref="T:System.Array" />, starting at the specified array index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.GetEnumerator">
      <summary>Returns an enumerator that iterates through the <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />.</summary>
      <returns>A <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator" /> for the <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Add(`1)">
      <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.  This implementation always throws <see cref="T:System.NotSupportedException" />.</summary>
      <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Clear">
      <summary>Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.  This implementation always throws <see cref="T:System.NotSupportedException" />.</summary>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Contains(`1)">
      <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Remove(`1)">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />. This implementation always throws <see cref="T:System.NotSupportedException" />.</summary>
      <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
      <returns>
        <see langword="true" /> if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, <see langword="false" />. This method also returns <see langword="false" /> if <paramref name="item" /> was not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#IEnumerable{TValue}#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.  
  
 -or-  
  
 <paramref name="array" /> does not have zero-based indexing.  
  
 -or-  
  
 The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.  
  
 -or-  
  
 The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.Count">
      <summary>Gets the number of elements contained in the <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />.</summary>
      <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, <see langword="false" />.  In the default implementation of <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />, this property always returns <see langword="true" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).</summary>
      <returns>
        <see langword="true" /> if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, <see langword="false" />.  In the default implementation of <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />, this property always returns <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#ICollection#SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.  In the default implementation of <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />, this property always returns the current instance.</returns>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator">
      <summary>Enumerates the elements of a <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />.</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.MoveNext">
      <summary>Advances the enumerator to the next element of the <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />.</summary>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
      <returns>
        <see langword="true" /> if the enumerator was successfully advanced to the next element; <see langword="false" /> if the enumerator has passed the end of the collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.Current">
      <summary>Gets the element at the current position of the enumerator.</summary>
      <returns>The element in the <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> at the current position of the enumerator.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Gets the element at the current position of the enumerator.</summary>
      <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.</exception>
      <returns>The element in the collection at the current position of the enumerator.</returns>
    </member>
    <member name="T:System.Collections.Generic.EqualityComparer`1">
      <summary>Provides a base class for implementations of the <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> generic interface.</summary>
      <typeparam name="T">The type of objects to compare.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.EqualityComparer`1" /> class.</summary>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.Equals(`0,`0)">
      <summary>When overridden in a derived class, determines whether two objects of type <typeparamref name="T" /> are equal.</summary>
      <param name="x">The first object to compare.</param>
      <param name="y">The second object to compare.</param>
      <returns>
        <see langword="true" /> if the specified objects are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.GetHashCode(`0)">
      <summary>When overridden in a derived class, serves as a hash function for the specified object for hashing algorithms and data structures, such as a hash table.</summary>
      <param name="obj">The object for which to get a hash code.</param>
      <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj" /> is a reference type and <paramref name="obj" /> is <see langword="null" />.</exception>
      <returns>A hash code for the specified object.</returns>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)">
      <summary>Determines whether the specified objects are equal.</summary>
      <param name="x">The first object to compare.</param>
      <param name="y">The second object to compare.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> or <paramref name="y" /> is of a type that cannot be cast to type <typeparamref name="T" />.</exception>
      <returns>
        <see langword="true" /> if the specified objects are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.System#Collections#IEqualityComparer#GetHashCode(System.Object)">
      <summary>Returns a hash code for the specified object.</summary>
      <param name="obj">The <see cref="T:System.Object" /> for which a hash code is to be returned.</param>
      <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj" /> is a reference type and <paramref name="obj" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="obj" /> is of a type that cannot be cast to type <typeparamref name="T" />.</exception>
      <returns>A hash code for the specified object.</returns>
    </member>
    <member name="P:System.Collections.Generic.EqualityComparer`1.Default">
      <summary>Returns a default equality comparer for the type specified by the generic argument.</summary>
      <returns>The default instance of the <see cref="T:System.Collections.Generic.EqualityComparer`1" /> class for type <typeparamref name="T" />.</returns>
    </member>
    <member name="T:System.Collections.Generic.ICollection`1">
      <summary>Defines methods to manipulate generic collections.</summary>
      <typeparam name="T">The type of the elements in the collection.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.Add(`0)">
      <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.Clear">
      <summary>Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.Contains(`0)">
      <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.Remove(`0)">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
      <returns>
        <see langword="true" /> if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, <see langword="false" />. This method also returns <see langword="false" /> if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.ICollection`1.Count">
      <summary>Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.ICollection`1.IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Collections.Generic.IComparer`1">
      <summary>Defines a method that a type implements to compare two objects.</summary>
      <typeparam name="T">The type of objects to compare.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.IComparer`1.Compare(`0,`0)">
      <summary>Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.</summary>
      <param name="x">The first object to compare.</param>
      <param name="y">The second object to compare.</param>
      <returns>A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in the following table.  
  
 <list type="table"><listheader><term> Value</term><description> Meaning</description></listheader><item><term> Less than zero</term><description><paramref name="x" /> is less than <paramref name="y" />.</description></item><item><term> Zero</term><description><paramref name="x" /> equals <paramref name="y" />.</description></item><item><term> Greater than zero</term><description><paramref name="x" /> is greater than <paramref name="y" />.</description></item></list></returns>
    </member>
    <member name="T:System.Collections.Generic.IDictionary`2">
      <summary>Represents a generic collection of key/value pairs.</summary>
      <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
      <typeparam name="TValue">The type of values in the dictionary.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)">
      <summary>Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <param name="key">The object to use as the key of the element to add.</param>
      <param name="value">The object to use as the value of the element to add.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only.</exception>
    </member>
    <member name="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)">
      <summary>Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key.</summary>
      <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the key; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.IDictionary`2.Remove(`0)">
      <summary>Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <param name="key">The key of the element to remove.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only.</exception>
      <returns>
        <see langword="true" /> if the element is successfully removed; otherwise, <see langword="false" />.  This method also returns <see langword="false" /> if <paramref name="key" /> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)">
      <summary>Gets the value associated with the specified key.</summary>
      <param name="key">The key whose value to get.</param>
      <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.IDictionary`2.Item(`0)">
      <summary>Gets or sets the element with the specified key.</summary>
      <param name="key">The key of the element to get or set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and <paramref name="key" /> is not found.</exception>
      <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only.</exception>
      <returns>The element with the specified key.</returns>
    </member>
    <member name="P:System.Collections.Generic.IDictionary`2.Keys">
      <summary>Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.IDictionary`2.Values">
      <summary>Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="T:System.Collections.Generic.IEnumerable`1">
      <summary>Exposes the enumerator, which supports a simple iteration over a collection of a specified type.</summary>
      <typeparam name="T">The type of objects to enumerate.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.IEnumerable`1.GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="T:System.Collections.Generic.IEnumerator`1">
      <summary>Supports a simple iteration over a generic collection.</summary>
      <typeparam name="T">The type of objects to enumerate.</typeparam>
    </member>
    <member name="P:System.Collections.Generic.IEnumerator`1.Current">
      <summary>Gets the element in the collection at the current position of the enumerator.</summary>
      <returns>The element in the collection at the current position of the enumerator.</returns>
    </member>
    <member name="T:System.Collections.Generic.IEqualityComparer`1">
      <summary>Defines methods to support the comparison of objects for equality.</summary>
      <typeparam name="T">The type of objects to compare.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)">
      <summary>Determines whether the specified objects are equal.</summary>
      <param name="x">The first object of type <paramref name="T" /> to compare.</param>
      <param name="y">The second object of type <paramref name="T" /> to compare.</param>
      <returns>
        <see langword="true" /> if the specified objects are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)">
      <summary>Returns a hash code for the specified object.</summary>
      <param name="obj">The <see cref="T:System.Object" /> for which a hash code is to be returned.</param>
      <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj" /> is a reference type and <paramref name="obj" /> is <see langword="null" />.</exception>
      <returns>A hash code for the specified object.</returns>
    </member>
    <member name="T:System.Collections.Generic.IList`1">
      <summary>Represents a collection of objects that can be individually accessed by index.</summary>
      <typeparam name="T">The type of elements in the list.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.IList`1.IndexOf(`0)">
      <summary>Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.</summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.</param>
      <returns>The index of <paramref name="item" /> if found in the list; otherwise, -1.</returns>
    </member>
    <member name="M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)">
      <summary>Inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.</summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
    </member>
    <member name="M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)">
      <summary>Removes the <see cref="T:System.Collections.Generic.IList`1" /> item at the specified index.</summary>
      <param name="index">The zero-based index of the item to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
    </member>
    <member name="P:System.Collections.Generic.IList`1.Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <param name="index">The zero-based index of the element to get or set.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
      <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
      <returns>The element at the specified index.</returns>
    </member>
    <member name="T:System.Collections.Generic.IReadOnlyCollection`1">
      <summary>Represents a strongly-typed, read-only collection of elements.</summary>
      <typeparam name="T">The type of the elements.</typeparam>
    </member>
    <member name="P:System.Collections.Generic.IReadOnlyCollection`1.Count">
      <summary>Gets the number of elements in the collection.</summary>
      <returns>The number of elements in the collection.</returns>
    </member>
    <member name="T:System.Collections.Generic.IReadOnlyDictionary`2">
      <summary>Represents a generic read-only collection of key/value pairs.</summary>
      <typeparam name="TKey">The type of keys in the read-only dictionary.</typeparam>
      <typeparam name="TValue">The type of values in the read-only dictionary.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.IReadOnlyDictionary`2.ContainsKey(`0)">
      <summary>Determines whether the read-only dictionary contains an element that has the specified key.</summary>
      <param name="key">The key to locate.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> if the read-only dictionary contains an element that has the specified key; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.IReadOnlyDictionary`2.TryGetValue(`0,`1@)">
      <summary>Gets the value that is associated with the specified key.</summary>
      <param name="key">The key to locate.</param>
      <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> if the object that implements the <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" /> interface contains an element that has the specified key; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.IReadOnlyDictionary`2.Item(`0)">
      <summary>Gets the element that has the specified key in the read-only dictionary.</summary>
      <param name="key">The key to locate.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and <paramref name="key" /> is not found.</exception>
      <returns>The element that has the specified key in the read-only dictionary.</returns>
    </member>
    <member name="P:System.Collections.Generic.IReadOnlyDictionary`2.Keys">
      <summary>Gets an enumerable collection that contains the keys in the read-only dictionary.</summary>
      <returns>An enumerable collection that contains the keys in the read-only dictionary.</returns>
    </member>
    <member name="P:System.Collections.Generic.IReadOnlyDictionary`2.Values">
      <summary>Gets an enumerable collection that contains the values in the read-only dictionary.</summary>
      <returns>An enumerable collection that contains the values in the read-only dictionary.</returns>
    </member>
    <member name="T:System.Collections.Generic.IReadOnlyList`1">
      <summary>Represents a read-only collection of elements that can be accessed by index.</summary>
      <typeparam name="T">The type of elements in the read-only list.</typeparam>
    </member>
    <member name="P:System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)">
      <summary>Gets the element at the specified index in the read-only list.</summary>
      <param name="index">The zero-based index of the element to get.</param>
      <returns>The element at the specified index in the read-only list.</returns>
    </member>
    <member name="T:System.Collections.Generic.KeyNotFoundException">
      <summary>The exception that is thrown when the key specified for accessing an element in a collection does not match any key in the collection.</summary>
    </member>
    <member name="M:System.Collections.Generic.KeyNotFoundException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.KeyNotFoundException" /> class using default property values.</summary>
    </member>
    <member name="M:System.Collections.Generic.KeyNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.KeyNotFoundException" /> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Collections.Generic.KeyNotFoundException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.KeyNotFoundException" /> class with the specified error message.</summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.Collections.Generic.KeyNotFoundException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.KeyNotFoundException" /> class with the specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.Collections.Generic.KeyValuePair`2">
      <summary>Defines a key/value pair that can be set or retrieved.</summary>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.KeyValuePair`2.#ctor(`0,`1)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.KeyValuePair`2" /> structure with the specified key and value.</summary>
      <param name="key">The object defined in each key/value pair.</param>
      <param name="value">The definition associated with <paramref name="key" />.</param>
    </member>
    <member name="M:System.Collections.Generic.KeyValuePair`2.Deconstruct(`0@,`1@)">
      <summary>Deconstructs the current <see cref="T:System.Collections.Generic.KeyValuePair`2" />.</summary>
      <param name="key">The key of the current <see cref="T:System.Collections.Generic.KeyValuePair`2" />.</param>
      <param name="value">The value of the current <see cref="T:System.Collections.Generic.KeyValuePair`2" />.</param>
    </member>
    <member name="M:System.Collections.Generic.KeyValuePair`2.ToString">
      <summary>Returns a string representation of the <see cref="T:System.Collections.Generic.KeyValuePair`2" />, using the string representations of the key and value.</summary>
      <returns>A string representation of the <see cref="T:System.Collections.Generic.KeyValuePair`2" />, which includes the string representations of the key and value.</returns>
    </member>
    <member name="P:System.Collections.Generic.KeyValuePair`2.Key">
      <summary>Gets the key in the key/value pair.</summary>
      <returns>A <typeparamref name="TKey" /> that is the key of the <see cref="T:System.Collections.Generic.KeyValuePair`2" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.KeyValuePair`2.Value">
      <summary>Gets the value in the key/value pair.</summary>
      <returns>A <typeparamref name="TValue" /> that is the value of the <see cref="T:System.Collections.Generic.KeyValuePair`2" />.</returns>
    </member>
    <member name="T:System.Collections.Generic.List`1">
      <summary>Represents a strongly typed list of objects that can be accessed by index. Provides methods to search, sort, and manipulate lists.</summary>
      <typeparam name="T">The type of elements in the list.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.List`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.List`1" /> class that is empty and has the default initial capacity.</summary>
    </member>
    <member name="M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.List`1" /> class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.</summary>
      <param name="collection">The collection whose elements are copied to the new list.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.List`1" /> class that is empty and has the specified initial capacity.</summary>
      <param name="capacity">The number of elements that the new list can initially store.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is less than 0.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Add(`0)">
      <summary>Adds an object to the end of the <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <param name="item">The object to be added to the end of the <see cref="T:System.Collections.Generic.List`1" />. The value can be <see langword="null" /> for reference types.</param>
    </member>
    <member name="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Adds the elements of the specified collection to the end of the <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <param name="collection">The collection whose elements should be added to the end of the <see cref="T:System.Collections.Generic.List`1" />. The collection itself cannot be <see langword="null" />, but it can contain elements that are <see langword="null" />, if type <paramref name="T" /> is a reference type.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.AsReadOnly">
      <summary>Returns a read-only <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> wrapper for the current collection.</summary>
      <returns>An object that acts as a read-only wrapper around the current <see cref="T:System.Collections.Generic.List`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.BinarySearch(`0)">
      <summary>Searches the entire sorted <see cref="T:System.Collections.Generic.List`1" /> for an element using the default comparer and returns the zero-based index of the element.</summary>
      <param name="item">The object to locate. The value can be <see langword="null" /> for reference types.</param>
      <exception cref="T:System.InvalidOperationException">The default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" /> cannot find an implementation of the <see cref="T:System.IComparable`1" /> generic interface or the <see cref="T:System.IComparable" /> interface for type <paramref name="T" />.</exception>
      <returns>The zero-based index of <paramref name="item" /> in the sorted <see cref="T:System.Collections.Generic.List`1" />, if <paramref name="item" /> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <paramref name="item" /> or, if there is no larger element, the bitwise complement of <see cref="P:System.Collections.Generic.List`1.Count" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
      <summary>Searches the entire sorted <see cref="T:System.Collections.Generic.List`1" /> for an element using the specified comparer and returns the zero-based index of the element.</summary>
      <param name="item">The object to locate. The value can be <see langword="null" /> for reference types.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use when comparing elements.  
  
 -or-  
  
 <see langword="null" /> to use the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" />.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is <see langword="null" />, and the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" /> cannot find an implementation of the <see cref="T:System.IComparable`1" /> generic interface or the <see cref="T:System.IComparable" /> interface for type <paramref name="T" />.</exception>
      <returns>The zero-based index of <paramref name="item" /> in the sorted <see cref="T:System.Collections.Generic.List`1" />, if <paramref name="item" /> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <paramref name="item" /> or, if there is no larger element, the bitwise complement of <see cref="P:System.Collections.Generic.List`1.Count" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
      <summary>Searches a range of elements in the sorted <see cref="T:System.Collections.Generic.List`1" /> for an element using the specified comparer and returns the zero-based index of the element.</summary>
      <param name="index">The zero-based starting index of the range to search.</param>
      <param name="count">The length of the range to search.</param>
      <param name="item">The object to locate. The value can be <see langword="null" /> for reference types.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use when comparing elements, or <see langword="null" /> to use the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0.  
  
 -or-  
  
 <paramref name="count" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in the <see cref="T:System.Collections.Generic.List`1" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is <see langword="null" />, and the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" /> cannot find an implementation of the <see cref="T:System.IComparable`1" /> generic interface or the <see cref="T:System.IComparable" /> interface for type <paramref name="T" />.</exception>
      <returns>The zero-based index of <paramref name="item" /> in the sorted <see cref="T:System.Collections.Generic.List`1" />, if <paramref name="item" /> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <paramref name="item" /> or, if there is no larger element, the bitwise complement of <see cref="P:System.Collections.Generic.List`1.Count" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.Clear">
      <summary>Removes all elements from the <see cref="T:System.Collections.Generic.List`1" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.List`1.Contains(`0)">
      <summary>Determines whether an element is in the <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.List`1" />. The value can be <see langword="null" /> for reference types.</param>
      <returns>
        <see langword="true" /> if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.List`1" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})">
      <summary>Converts the elements in the current <see cref="T:System.Collections.Generic.List`1" /> to another type, and returns a list containing the converted elements.</summary>
      <param name="converter">A <see cref="T:System.Converter`2" /> delegate that converts each element from one type to another type.</param>
      <typeparam name="TOutput">The type of the elements of the target array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="converter" /> is <see langword="null" />.</exception>
      <returns>A <see cref="T:System.Collections.Generic.List`1" /> of the target type containing the converted elements from the current <see cref="T:System.Collections.Generic.List`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.CopyTo(`0[])">
      <summary>Copies the entire <see cref="T:System.Collections.Generic.List`1" /> to a compatible one-dimensional array, starting at the beginning of the target array.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.List`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.Generic.List`1" /> is greater than the number of elements that the destination <paramref name="array" /> can contain.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)">
      <summary>Copies the entire <see cref="T:System.Collections.Generic.List`1" /> to a compatible one-dimensional array, starting at the specified index of the target array.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.List`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.Generic.List`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary>Copies a range of elements from the <see cref="T:System.Collections.Generic.List`1" /> to a compatible one-dimensional array, starting at the specified index of the target array.</summary>
      <param name="index">The zero-based index in the source <see cref="T:System.Collections.Generic.List`1" /> at which copying begins.</param>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.List`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <param name="count">The number of elements to copy.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0.  
  
 -or-  
  
 <paramref name="arrayIndex" /> is less than 0.  
  
 -or-  
  
 <paramref name="count" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> is equal to or greater than the <see cref="P:System.Collections.Generic.List`1.Count" /> of the source <see cref="T:System.Collections.Generic.List`1" />.  
  
 -or-  
  
 The number of elements from <paramref name="index" /> to the end of the source <see cref="T:System.Collections.Generic.List`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
      <summary>Determines whether the <see cref="T:System.Collections.Generic.List`1" /> contains elements that match the conditions defined by the specified predicate.</summary>
      <param name="match">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the elements to search for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> is <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.Generic.List`1" /> contains one or more elements that match the conditions defined by the specified predicate; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
      <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <param name="match">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the element to search for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> is <see langword="null" />.</exception>
      <returns>The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <paramref name="T" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
      <summary>Retrieves all the elements that match the conditions defined by the specified predicate.</summary>
      <param name="match">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the elements to search for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> is <see langword="null" />.</exception>
      <returns>A <see cref="T:System.Collections.Generic.List`1" /> containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty <see cref="T:System.Collections.Generic.List`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that starts at the specified index and contains the specified number of elements.</summary>
      <param name="startIndex">The zero-based starting index of the search.</param>
      <param name="count">The number of elements in the section to search.</param>
      <param name="match">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the element to search for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for the <see cref="T:System.Collections.Generic.List`1" />.  
  
 -or-  
  
 <paramref name="count" /> is less than 0.  
  
 -or-  
  
 <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in the <see cref="T:System.Collections.Generic.List`1" />.</exception>
      <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, -1.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})">
      <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that extends from the specified index to the last element.</summary>
      <param name="startIndex">The zero-based starting index of the search.</param>
      <param name="match">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the element to search for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for the <see cref="T:System.Collections.Generic.List`1" />.</exception>
      <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, -1.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})">
      <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <param name="match">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the element to search for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> is <see langword="null" />.</exception>
      <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, -1.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
      <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <param name="match">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the element to search for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> is <see langword="null" />.</exception>
      <returns>The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <paramref name="T" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that contains the specified number of elements and ends at the specified index.</summary>
      <param name="startIndex">The zero-based starting index of the backward search.</param>
      <param name="count">The number of elements in the section to search.</param>
      <param name="match">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the element to search for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for the <see cref="T:System.Collections.Generic.List`1" />.  
  
 -or-  
  
 <paramref name="count" /> is less than 0.  
  
 -or-  
  
 <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in the <see cref="T:System.Collections.Generic.List`1" />.</exception>
      <returns>The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, -1.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})">
      <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that extends from the first element to the specified index.</summary>
      <param name="startIndex">The zero-based starting index of the backward search.</param>
      <param name="match">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the element to search for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for the <see cref="T:System.Collections.Generic.List`1" />.</exception>
      <returns>The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, -1.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
      <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <param name="match">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the element to search for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> is <see langword="null" />.</exception>
      <returns>The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, -1.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.ForEach(System.Action{`0})">
      <summary>Performs the specified action on each element of the <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <param name="action">The <see cref="T:System.Action`1" /> delegate to perform on each element of the <see cref="T:System.Collections.Generic.List`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">An element in the collection has been modified.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.GetEnumerator">
      <summary>Returns an enumerator that iterates through the <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <returns>A <see cref="T:System.Collections.Generic.List`1.Enumerator" /> for the <see cref="T:System.Collections.Generic.List`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
      <summary>Creates a shallow copy of a range of elements in the source <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <param name="index">The zero-based <see cref="T:System.Collections.Generic.List`1" /> index at which the range starts.</param>
      <param name="count">The number of elements in the range.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0.  
  
 -or-  
  
 <paramref name="count" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> and <paramref name="count" /> do not denote a valid range of elements in the <see cref="T:System.Collections.Generic.List`1" />.</exception>
      <returns>A shallow copy of a range of elements in the source <see cref="T:System.Collections.Generic.List`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.IndexOf(`0)">
      <summary>Searches for the specified object and returns the zero-based index of the first occurrence within the entire <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.List`1" />. The value can be <see langword="null" /> for reference types.</param>
      <returns>The zero-based index of the first occurrence of <paramref name="item" /> within the entire <see cref="T:System.Collections.Generic.List`1" />, if found; otherwise, -1.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)">
      <summary>Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that extends from the specified index to the last element.</summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.List`1" />. The value can be <see langword="null" /> for reference types.</param>
      <param name="index">The zero-based starting index of the search. 0 (zero) is valid in an empty list.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is outside the range of valid indexes for the <see cref="T:System.Collections.Generic.List`1" />.</exception>
      <returns>The zero-based index of the first occurrence of <paramref name="item" /> within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that extends from <paramref name="index" /> to the last element, if found; otherwise, -1.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
      <summary>Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that starts at the specified index and contains the specified number of elements.</summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.List`1" />. The value can be <see langword="null" /> for reference types.</param>
      <param name="index">The zero-based starting index of the search. 0 (zero) is valid in an empty list.</param>
      <param name="count">The number of elements in the section to search.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is outside the range of valid indexes for the <see cref="T:System.Collections.Generic.List`1" />.  
  
 -or-  
  
 <paramref name="count" /> is less than 0.  
  
 -or-  
  
 <paramref name="index" /> and <paramref name="count" /> do not specify a valid section in the <see cref="T:System.Collections.Generic.List`1" />.</exception>
      <returns>The zero-based index of the first occurrence of <paramref name="item" /> within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that starts at <paramref name="index" /> and contains <paramref name="count" /> number of elements, if found; otherwise, -1.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)">
      <summary>Inserts an element into the <see cref="T:System.Collections.Generic.List`1" /> at the specified index.</summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The object to insert. The value can be <see langword="null" /> for reference types.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0.  
  
 -or-  
  
 <paramref name="index" /> is greater than <see cref="P:System.Collections.Generic.List`1.Count" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>Inserts the elements of a collection into the <see cref="T:System.Collections.Generic.List`1" /> at the specified index.</summary>
      <param name="index">The zero-based index at which the new elements should be inserted.</param>
      <param name="collection">The collection whose elements should be inserted into the <see cref="T:System.Collections.Generic.List`1" />. The collection itself cannot be <see langword="null" />, but it can contain elements that are <see langword="null" />, if type <paramref name="T" /> is a reference type.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0.  
  
 -or-  
  
 <paramref name="index" /> is greater than <see cref="P:System.Collections.Generic.List`1.Count" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.LastIndexOf(`0)">
      <summary>Searches for the specified object and returns the zero-based index of the last occurrence within the entire <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.List`1" />. The value can be <see langword="null" /> for reference types.</param>
      <returns>The zero-based index of the last occurrence of <paramref name="item" /> within the entire the <see cref="T:System.Collections.Generic.List`1" />, if found; otherwise, -1.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)">
      <summary>Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that extends from the first element to the specified index.</summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.List`1" />. The value can be <see langword="null" /> for reference types.</param>
      <param name="index">The zero-based starting index of the backward search.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is outside the range of valid indexes for the <see cref="T:System.Collections.Generic.List`1" />.</exception>
      <returns>The zero-based index of the last occurrence of <paramref name="item" /> within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that extends from the first element to <paramref name="index" />, if found; otherwise, -1.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary>Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that contains the specified number of elements and ends at the specified index.</summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.List`1" />. The value can be <see langword="null" /> for reference types.</param>
      <param name="index">The zero-based starting index of the backward search.</param>
      <param name="count">The number of elements in the section to search.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is outside the range of valid indexes for the <see cref="T:System.Collections.Generic.List`1" />.  
  
 -or-  
  
 <paramref name="count" /> is less than 0.  
  
 -or-  
  
 <paramref name="index" /> and <paramref name="count" /> do not specify a valid section in the <see cref="T:System.Collections.Generic.List`1" />.</exception>
      <returns>The zero-based index of the last occurrence of <paramref name="item" /> within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that contains <paramref name="count" /> number of elements and ends at <paramref name="index" />, if found; otherwise, -1.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.Remove(`0)">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.List`1" />. The value can be <see langword="null" /> for reference types.</param>
      <returns>
        <see langword="true" /> if <paramref name="item" /> is successfully removed; otherwise, <see langword="false" />.  This method also returns <see langword="false" /> if <paramref name="item" /> was not found in the <see cref="T:System.Collections.Generic.List`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})">
      <summary>Removes all the elements that match the conditions defined by the specified predicate.</summary>
      <param name="match">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the elements to remove.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> is <see langword="null" />.</exception>
      <returns>The number of elements removed from the <see cref="T:System.Collections.Generic.List`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)">
      <summary>Removes the element at the specified index of the <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <param name="index">The zero-based index of the element to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0.  
  
 -or-  
  
 <paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.Generic.List`1.Count" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)">
      <summary>Removes a range of elements from the <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <param name="index">The zero-based starting index of the range of elements to remove.</param>
      <param name="count">The number of elements to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0.  
  
 -or-  
  
 <paramref name="count" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> and <paramref name="count" /> do not denote a valid range of elements in the <see cref="T:System.Collections.Generic.List`1" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Reverse">
      <summary>Reverses the order of the elements in the entire <see cref="T:System.Collections.Generic.List`1" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)">
      <summary>Reverses the order of the elements in the specified range.</summary>
      <param name="index">The zero-based starting index of the range to reverse.</param>
      <param name="count">The number of elements in the range to reverse.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0.  
  
 -or-  
  
 <paramref name="count" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> and <paramref name="count" /> do not denote a valid range of elements in the <see cref="T:System.Collections.Generic.List`1" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Sort">
      <summary>Sorts the elements in the entire <see cref="T:System.Collections.Generic.List`1" /> using the default comparer.</summary>
      <exception cref="T:System.InvalidOperationException">The default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" /> cannot find an implementation of the <see cref="T:System.IComparable`1" /> generic interface or the <see cref="T:System.IComparable" /> interface for type <paramref name="T" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
      <summary>Sorts the elements in the entire <see cref="T:System.Collections.Generic.List`1" /> using the specified comparer.</summary>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use when comparing elements, or <see langword="null" /> to use the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" />.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is <see langword="null" />, and the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" /> cannot find implementation of the <see cref="T:System.IComparable`1" /> generic interface or the <see cref="T:System.IComparable" /> interface for type <paramref name="T" />.</exception>
      <exception cref="T:System.ArgumentException">The implementation of <paramref name="comparer" /> caused an error during the sort. For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
      <summary>Sorts the elements in the entire <see cref="T:System.Collections.Generic.List`1" /> using the specified <see cref="T:System.Comparison`1" />.</summary>
      <param name="comparison">The <see cref="T:System.Comparison`1" /> to use when comparing elements.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparison" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The implementation of <paramref name="comparison" /> caused an error during the sort. For example, <paramref name="comparison" /> might not return 0 when comparing an item with itself.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary>Sorts the elements in a range of elements in <see cref="T:System.Collections.Generic.List`1" /> using the specified comparer.</summary>
      <param name="index">The zero-based starting index of the range to sort.</param>
      <param name="count">The length of the range to sort.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use when comparing elements, or <see langword="null" /> to use the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0.  
  
 -or-  
  
 <paramref name="count" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> and <paramref name="count" /> do not specify a valid range in the <see cref="T:System.Collections.Generic.List`1" />.  
  
 -or-  
  
 The implementation of <paramref name="comparer" /> caused an error during the sort. For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is <see langword="null" />, and the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" /> cannot find implementation of the <see cref="T:System.IComparable`1" /> generic interface or the <see cref="T:System.IComparable" /> interface for type <paramref name="T" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.  
  
 -or-  
  
 <paramref name="array" /> does not have zero-based indexing.  
  
 -or-  
  
 The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.  
  
 -or-  
  
 The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)">
      <summary>Adds an item to the <see cref="T:System.Collections.IList" />.</summary>
      <param name="item">The <see cref="T:System.Object" /> to add to the <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.</exception>
      <returns>The position into which the new element was inserted.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)">
      <summary>Determines whether the <see cref="T:System.Collections.IList" /> contains a specific value.</summary>
      <param name="item">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.IList" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="item" /> is found in the <see cref="T:System.Collections.IList" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>Determines the index of a specific item in the <see cref="T:System.Collections.IList" />.</summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.</exception>
      <returns>The index of <paramref name="item" /> if found in the list; otherwise, -1.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Inserts an item to the <see cref="T:System.Collections.IList" /> at the specified index.</summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The object to insert into the <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList" />.</summary>
      <param name="item">The object to remove from the <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.ToArray">
      <summary>Copies the elements of the <see cref="T:System.Collections.Generic.List`1" /> to a new array.</summary>
      <returns>An array containing copies of the elements of the <see cref="T:System.Collections.Generic.List`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.TrimExcess">
      <summary>Sets the capacity to the actual number of elements in the <see cref="T:System.Collections.Generic.List`1" />, if that number is less than a threshold value.</summary>
    </member>
    <member name="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})">
      <summary>Determines whether every element in the <see cref="T:System.Collections.Generic.List`1" /> matches the conditions defined by the specified predicate.</summary>
      <param name="match">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions to check against the elements.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> is <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> if every element in the <see cref="T:System.Collections.Generic.List`1" /> matches the conditions defined by the specified predicate; otherwise, <see langword="false" />. If the list has no elements, the return value is <see langword="true" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.Capacity">
      <summary>Gets or sets the total number of elements the internal data structure can hold without resizing.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.Collections.Generic.List`1.Capacity" /> is set to a value that is less than <see cref="P:System.Collections.Generic.List`1.Count" />.</exception>
      <exception cref="T:System.OutOfMemoryException">There is not enough memory available on the system.</exception>
      <returns>The number of elements that the <see cref="T:System.Collections.Generic.List`1" /> can contain before resizing is required.</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.Count">
      <summary>Gets the number of elements contained in the <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.List`1" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <param name="index">The zero-based index of the element to get or set.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0.  
  
 -or-  
  
 <paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.Generic.List`1.Count" />.</exception>
      <returns>The element at the specified index.</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, <see langword="false" />.  In the default implementation of <see cref="T:System.Collections.Generic.List`1" />, this property always returns <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).</summary>
      <returns>
        <see langword="true" /> if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, <see langword="false" />.  In the default implementation of <see cref="T:System.Collections.Generic.List`1" />, this property always returns <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.  In the default implementation of <see cref="T:System.Collections.Generic.List`1" />, this property always returns the current instance.</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.IList" /> has a fixed size.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.IList" /> has a fixed size; otherwise, <see langword="false" />.  In the default implementation of <see cref="T:System.Collections.Generic.List`1" />, this property always returns <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.IList" /> is read-only.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.IList" /> is read-only; otherwise, <see langword="false" />.  In the default implementation of <see cref="T:System.Collections.Generic.List`1" />, this property always returns <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <param name="index">The zero-based index of the element to get or set.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />.</exception>
      <exception cref="T:System.ArgumentException">The property is set and <paramref name="value" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.</exception>
      <returns>The element at the specified index.</returns>
    </member>
    <member name="T:System.Collections.Generic.List`1.Enumerator">
      <summary>Enumerates the elements of a <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Collections.Generic.List`1.Enumerator.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Collections.Generic.List`1.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.List`1.Enumerator.MoveNext">
      <summary>Advances the enumerator to the next element of the <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
      <returns>
        <see langword="true" /> if the enumerator was successfully advanced to the next element; <see langword="false" /> if the enumerator has passed the end of the collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
    </member>
    <member name="P:System.Collections.Generic.List`1.Enumerator.Current">
      <summary>Gets the element at the current position of the enumerator.</summary>
      <returns>The element in the <see cref="T:System.Collections.Generic.List`1" /> at the current position of the enumerator.</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Gets the element at the current position of the enumerator.</summary>
      <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.</exception>
      <returns>The element in the <see cref="T:System.Collections.Generic.List`1" /> at the current position of the enumerator.</returns>
    </member>
    <member name="T:System.Collections.ICollection">
      <summary>Defines size, enumerators, and synchronization methods for all nongeneric collections.</summary>
    </member>
    <member name="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.  
  
 -or-  
  
 The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.  
  
 -or-  
  
 The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Collections.ICollection.Count">
      <summary>Gets the number of elements contained in the <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>The number of elements contained in the <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="P:System.Collections.ICollection.IsSynchronized">
      <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).</summary>
      <returns>
        <see langword="true" /> if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.ICollection.SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="T:System.Collections.IComparer">
      <summary>Exposes a method that compares two objects.</summary>
    </member>
    <member name="M:System.Collections.IComparer.Compare(System.Object,System.Object)">
      <summary>Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.</summary>
      <param name="x">The first object to compare.</param>
      <param name="y">The second object to compare.</param>
      <exception cref="T:System.ArgumentException">Neither <paramref name="x" /> nor <paramref name="y" /> implements the <see cref="T:System.IComparable" /> interface.  
  
 -or-  
  
 <paramref name="x" /> and <paramref name="y" /> are of different types and neither one can handle comparisons with the other.</exception>
      <returns>A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />:   - If less than 0, <paramref name="x" /> is less than <paramref name="y" />.   - If 0, <paramref name="x" /> equals <paramref name="y" />.   - If greater than 0, <paramref name="x" /> is greater than <paramref name="y" />.</returns>
    </member>
    <member name="T:System.Collections.IDictionary">
      <summary>Represents a nongeneric collection of key/value pairs.</summary>
    </member>
    <member name="M:System.Collections.IDictionary.Add(System.Object,System.Object)">
      <summary>Adds an element with the provided key and value to the <see cref="T:System.Collections.IDictionary" /> object.</summary>
      <param name="key">The <see cref="T:System.Object" /> to use as the key of the element to add.</param>
      <param name="value">The <see cref="T:System.Object" /> to use as the value of the element to add.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.IDictionary" /> object.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary" /> is read-only.  
  
 -or-  
  
 The <see cref="T:System.Collections.IDictionary" /> has a fixed size.</exception>
    </member>
    <member name="M:System.Collections.IDictionary.Clear">
      <summary>Removes all elements from the <see cref="T:System.Collections.IDictionary" /> object.</summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary" /> object is read-only.</exception>
    </member>
    <member name="M:System.Collections.IDictionary.Contains(System.Object)">
      <summary>Determines whether the <see cref="T:System.Collections.IDictionary" /> object contains an element with the specified key.</summary>
      <param name="key">The key to locate in the <see cref="T:System.Collections.IDictionary" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.IDictionary" /> contains an element with the key; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.IDictionary.GetEnumerator">
      <summary>Returns an <see cref="T:System.Collections.IDictionaryEnumerator" /> object for the <see cref="T:System.Collections.IDictionary" /> object.</summary>
      <returns>An <see cref="T:System.Collections.IDictionaryEnumerator" /> object for the <see cref="T:System.Collections.IDictionary" /> object.</returns>
    </member>
    <member name="M:System.Collections.IDictionary.Remove(System.Object)">
      <summary>Removes the element with the specified key from the <see cref="T:System.Collections.IDictionary" /> object.</summary>
      <param name="key">The key of the element to remove.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary" /> object is read-only.  
  
 -or-  
  
 The <see cref="T:System.Collections.IDictionary" /> has a fixed size.</exception>
    </member>
    <member name="P:System.Collections.IDictionary.IsFixedSize">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.IDictionary" /> object has a fixed size.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.IDictionary" /> object has a fixed size; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.IDictionary.IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.IDictionary" /> object is read-only.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.IDictionary" /> object is read-only; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.IDictionary.Item(System.Object)">
      <summary>Gets or sets the element with the specified key.</summary>
      <param name="key">The key of the element to get or set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.IDictionary" /> object is read-only.  
  
 -or-  
  
 The property is set, <paramref name="key" /> does not exist in the collection, and the <see cref="T:System.Collections.IDictionary" /> has a fixed size.</exception>
      <returns>The element with the specified key, or <see langword="null" /> if the key does not exist.</returns>
    </member>
    <member name="P:System.Collections.IDictionary.Keys">
      <summary>Gets an <see cref="T:System.Collections.ICollection" /> object containing the keys of the <see cref="T:System.Collections.IDictionary" /> object.</summary>
      <returns>An <see cref="T:System.Collections.ICollection" /> object containing the keys of the <see cref="T:System.Collections.IDictionary" /> object.</returns>
    </member>
    <member name="P:System.Collections.IDictionary.Values">
      <summary>Gets an <see cref="T:System.Collections.ICollection" /> object containing the values in the <see cref="T:System.Collections.IDictionary" /> object.</summary>
      <returns>An <see cref="T:System.Collections.ICollection" /> object containing the values in the <see cref="T:System.Collections.IDictionary" /> object.</returns>
    </member>
    <member name="T:System.Collections.IDictionaryEnumerator">
      <summary>Enumerates the elements of a nongeneric dictionary.</summary>
    </member>
    <member name="P:System.Collections.IDictionaryEnumerator.Entry">
      <summary>Gets both the key and the value of the current dictionary entry.</summary>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Collections.IDictionaryEnumerator" /> is positioned before the first entry of the dictionary or after the last entry.</exception>
      <returns>A <see cref="T:System.Collections.DictionaryEntry" /> containing both the key and the value of the current dictionary entry.</returns>
    </member>
    <member name="P:System.Collections.IDictionaryEnumerator.Key">
      <summary>Gets the key of the current dictionary entry.</summary>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Collections.IDictionaryEnumerator" /> is positioned before the first entry of the dictionary or after the last entry.</exception>
      <returns>The key of the current element of the enumeration.</returns>
    </member>
    <member name="P:System.Collections.IDictionaryEnumerator.Value">
      <summary>Gets the value of the current dictionary entry.</summary>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Collections.IDictionaryEnumerator" /> is positioned before the first entry of the dictionary or after the last entry.</exception>
      <returns>The value of the current element of the enumeration.</returns>
    </member>
    <member name="T:System.Collections.IEnumerable">
      <summary>Exposes an enumerator, which supports a simple iteration over a non-generic collection.</summary>
    </member>
    <member name="M:System.Collections.IEnumerable.GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="T:System.Collections.IEnumerator">
      <summary>Supports a simple iteration over a non-generic collection.</summary>
    </member>
    <member name="M:System.Collections.IEnumerator.MoveNext">
      <summary>Advances the enumerator to the next element of the collection.</summary>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
      <returns>
        <see langword="true" /> if the enumerator was successfully advanced to the next element; <see langword="false" /> if the enumerator has passed the end of the collection.</returns>
    </member>
    <member name="M:System.Collections.IEnumerator.Reset">
      <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
    </member>
    <member name="P:System.Collections.IEnumerator.Current">
      <summary>Gets the element in the collection at the current position of the enumerator.</summary>
      <returns>The element in the collection at the current position of the enumerator.</returns>
    </member>
    <member name="T:System.Collections.IEqualityComparer">
      <summary>Defines methods to support the comparison of objects for equality.</summary>
    </member>
    <member name="M:System.Collections.IEqualityComparer.Equals(System.Object,System.Object)">
      <summary>Determines whether the specified objects are equal.</summary>
      <param name="x">The first object to compare.</param>
      <param name="y">The second object to compare.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="y" /> are of different types and neither one can handle comparisons with the other.</exception>
      <returns>
        <see langword="true" /> if the specified objects are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)">
      <summary>Returns a hash code for the specified object.</summary>
      <param name="obj">The <see cref="T:System.Object" /> for which a hash code is to be returned.</param>
      <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj" /> is a reference type and <paramref name="obj" /> is <see langword="null" />.</exception>
      <returns>A hash code for the specified object.</returns>
    </member>
    <member name="T:System.Collections.IList">
      <summary>Represents a non-generic collection of objects that can be individually accessed by index.</summary>
    </member>
    <member name="M:System.Collections.IList.Add(System.Object)">
      <summary>Adds an item to the <see cref="T:System.Collections.IList" />.</summary>
      <param name="value">The object to add to the <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList" /> is read-only.  
  
 -or-  
  
 The <see cref="T:System.Collections.IList" /> has a fixed size.</exception>
      <returns>The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the collection.</returns>
    </member>
    <member name="M:System.Collections.IList.Clear">
      <summary>Removes all items from the <see cref="T:System.Collections.IList" />.</summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList" /> is read-only.</exception>
    </member>
    <member name="M:System.Collections.IList.Contains(System.Object)">
      <summary>Determines whether the <see cref="T:System.Collections.IList" /> contains a specific value.</summary>
      <param name="value">The object to locate in the <see cref="T:System.Collections.IList" />.</param>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Object" /> is found in the <see cref="T:System.Collections.IList" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.IList.IndexOf(System.Object)">
      <summary>Determines the index of a specific item in the <see cref="T:System.Collections.IList" />.</summary>
      <param name="value">The object to locate in the <see cref="T:System.Collections.IList" />.</param>
      <returns>The index of <paramref name="value" /> if found in the list; otherwise, -1.</returns>
    </member>
    <member name="M:System.Collections.IList.Insert(System.Int32,System.Object)">
      <summary>Inserts an item to the <see cref="T:System.Collections.IList" /> at the specified index.</summary>
      <param name="index">The zero-based index at which <paramref name="value" /> should be inserted.</param>
      <param name="value">The object to insert into the <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList" /> is read-only.  
  
 -or-  
  
 The <see cref="T:System.Collections.IList" /> has a fixed size.</exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="value" /> is null reference in the <see cref="T:System.Collections.IList" />.</exception>
    </member>
    <member name="M:System.Collections.IList.Remove(System.Object)">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList" />.</summary>
      <param name="value">The object to remove from the <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList" /> is read-only.  
  
 -or-  
  
 The <see cref="T:System.Collections.IList" /> has a fixed size.</exception>
    </member>
    <member name="M:System.Collections.IList.RemoveAt(System.Int32)">
      <summary>Removes the <see cref="T:System.Collections.IList" /> item at the specified index.</summary>
      <param name="index">The zero-based index of the item to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList" /> is read-only.  
  
 -or-  
  
 The <see cref="T:System.Collections.IList" /> has a fixed size.</exception>
    </member>
    <member name="P:System.Collections.IList.IsFixedSize">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.IList" /> has a fixed size.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.IList" /> has a fixed size; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.IList.IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.IList" /> is read-only.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.IList" /> is read-only; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.IList.Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <param name="index">The zero-based index of the element to get or set.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />.</exception>
      <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.IList" /> is read-only.</exception>
      <returns>The element at the specified index.</returns>
    </member>
    <member name="T:System.Collections.IStructuralComparable">
      <summary>Supports the structural comparison of collection objects.</summary>
    </member>
    <member name="M:System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)">
      <summary>Determines whether the current collection object precedes, occurs in the same position as, or follows another object in the sort order.</summary>
      <param name="other">The object to compare with the current instance.</param>
      <param name="comparer">An object that compares members of the current collection object with the corresponding members of <paramref name="other" />.</param>
      <exception cref="T:System.ArgumentException">This instance and <paramref name="other" /> are not the same type.</exception>
      <returns>A signed integer that indicates the relationship of the current collection object to <paramref name="other" /> in the sort order: - If less than 0, the current instance precedes <paramref name="other" />. - If 0, the current instance and <paramref name="other" /> are equal. - If greater than 0, the current instance follows <paramref name="other" />.  
  
 <list type="table"><listheader><term> Return value</term><description> Description</description></listheader><item><term> -1</term><description> The current instance precedes <paramref name="other" />.</description></item><item><term> 0</term><description> The current instance and <paramref name="other" /> are equal.</description></item><item><term> 1</term><description> The current instance follows <paramref name="other" />.</description></item></list></returns>
    </member>
    <member name="T:System.Collections.IStructuralEquatable">
      <summary>Defines methods to support the comparison of objects for structural equality.</summary>
    </member>
    <member name="M:System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>Determines whether an object is structurally equal to the current instance.</summary>
      <param name="other">The object to compare with the current instance.</param>
      <param name="comparer">An object that determines whether the current instance and <paramref name="other" /> are equal.</param>
      <returns>
        <see langword="true" /> if the two objects are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)">
      <summary>Returns a hash code for the current instance.</summary>
      <param name="comparer">An object that computes the hash code of the current object.</param>
      <returns>The hash code for the current instance.</returns>
    </member>
    <member name="T:System.Collections.ObjectModel.Collection`1">
      <summary>Provides the base class for a generic collection.</summary>
      <typeparam name="T">The type of elements in the collection.</typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.Collection`1" /> class that is empty.</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.#ctor(System.Collections.Generic.IList{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.Collection`1" /> class as a wrapper for the specified list.</summary>
      <param name="list">The list that is wrapped by the new collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.Add(`0)">
      <summary>Adds an object to the end of the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</summary>
      <param name="item">The object to be added to the end of the <see cref="T:System.Collections.ObjectModel.Collection`1" />. The value can be <see langword="null" /> for reference types.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.Clear">
      <summary>Removes all elements from the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.ClearItems">
      <summary>Removes all elements from the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.Contains(`0)">
      <summary>Determines whether an element is in the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.ObjectModel.Collection`1" />. The value can be <see langword="null" /> for reference types.</param>
      <returns>
        <see langword="true" /> if <paramref name="item" /> is found in the <see cref="T:System.Collections.ObjectModel.Collection`1" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.CopyTo(`0[],System.Int32)">
      <summary>Copies the entire <see cref="T:System.Collections.ObjectModel.Collection`1" /> to a compatible one-dimensional <see cref="T:System.Array" />, starting at the specified index of the target array.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ObjectModel.Collection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.ObjectModel.Collection`1" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.GetEnumerator">
      <summary>Returns an enumerator that iterates through the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> for the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.IndexOf(`0)">
      <summary>Searches for the specified object and returns the zero-based index of the first occurrence within the entire <see cref="T:System.Collections.ObjectModel.Collection`1" />.</summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.List`1" />. The value can be <see langword="null" /> for reference types.</param>
      <returns>The zero-based index of the first occurrence of <paramref name="item" /> within the entire <see cref="T:System.Collections.ObjectModel.Collection`1" />, if found; otherwise, -1.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.Insert(System.Int32,`0)">
      <summary>Inserts an element into the <see cref="T:System.Collections.ObjectModel.Collection`1" /> at the specified index.</summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The object to insert. The value can be <see langword="null" /> for reference types.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.  
  
 -or-  
  
 <paramref name="index" /> is greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.InsertItem(System.Int32,`0)">
      <summary>Inserts an element into the <see cref="T:System.Collections.ObjectModel.Collection`1" /> at the specified index.</summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The object to insert. The value can be <see langword="null" /> for reference types.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.  
  
 -or-  
  
 <paramref name="index" /> is greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.Remove(`0)">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</summary>
      <param name="item">The object to remove from the <see cref="T:System.Collections.ObjectModel.Collection`1" />. The value can be <see langword="null" /> for reference types.</param>
      <returns>
        <see langword="true" /> if <paramref name="item" /> is successfully removed; otherwise, <see langword="false" />.  This method also returns <see langword="false" /> if <paramref name="item" /> was not found in the original <see cref="T:System.Collections.ObjectModel.Collection`1" />.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.RemoveAt(System.Int32)">
      <summary>Removes the element at the specified index of the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</summary>
      <param name="index">The zero-based index of the element to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.  
  
 -or-  
  
 <paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.RemoveItem(System.Int32)">
      <summary>Removes the element at the specified index of the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</summary>
      <param name="index">The zero-based index of the element to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.  
  
 -or-  
  
 <paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.SetItem(System.Int32,`0)">
      <summary>Replaces the element at the specified index.</summary>
      <param name="index">The zero-based index of the element to replace.</param>
      <param name="item">The new value for the element at the specified index. The value can be <see langword="null" /> for reference types.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.  
  
 -or-  
  
 <paramref name="index" /> is greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.  
  
 -or-  
  
 <paramref name="array" /> does not have zero-based indexing.  
  
 -or-  
  
 The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.  
  
 -or-  
  
 The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Add(System.Object)">
      <summary>Adds an item to the <see cref="T:System.Collections.IList" />.</summary>
      <param name="value">The <see cref="T:System.Object" /> to add to the <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.</exception>
      <returns>The position into which the new element was inserted.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Contains(System.Object)">
      <summary>Determines whether the <see cref="T:System.Collections.IList" /> contains a specific value.</summary>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.</exception>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Object" /> is found in the <see cref="T:System.Collections.IList" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>Determines the index of a specific item in the <see cref="T:System.Collections.IList" />.</summary>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.</exception>
      <returns>The index of <paramref name="value" /> if found in the list; otherwise, -1.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Inserts an item into the <see cref="T:System.Collections.IList" /> at the specified index.</summary>
      <param name="index">The zero-based index at which <paramref name="value" /> should be inserted.</param>
      <param name="value">The <see cref="T:System.Object" /> to insert into the <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Remove(System.Object)">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList" />.</summary>
      <param name="value">The <see cref="T:System.Object" /> to remove from the <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.Count">
      <summary>Gets the number of elements actually contained in the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</summary>
      <returns>The number of elements actually contained in the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <param name="index">The zero-based index of the element to get or set.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.  
  
 -or-  
  
 <paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</exception>
      <returns>The element at the specified index.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.Items">
      <summary>Gets a <see cref="T:System.Collections.Generic.IList`1" /> wrapper around the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</summary>
      <returns>A <see cref="T:System.Collections.Generic.IList`1" /> wrapper around the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, <see langword="false" />.  In the default implementation of <see cref="T:System.Collections.ObjectModel.Collection`1" />, this property always returns <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).</summary>
      <returns>
        <see langword="true" /> if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, <see langword="false" />.  In the default implementation of <see cref="T:System.Collections.ObjectModel.Collection`1" />, this property always returns <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.  In the default implementation of <see cref="T:System.Collections.ObjectModel.Collection`1" />, this property always returns the current instance.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsFixedSize">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.IList" /> has a fixed size.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.IList" /> has a fixed size; otherwise, <see langword="false" />.  In the default implementation of <see cref="T:System.Collections.ObjectModel.Collection`1" />, this property always returns <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.IList" /> is read-only.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.IList" /> is read-only; otherwise, <see langword="false" />.  In the default implementation of <see cref="T:System.Collections.ObjectModel.Collection`1" />, this property always returns <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <param name="index">The zero-based index of the element to get or set.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />.</exception>
      <exception cref="T:System.ArgumentException">The property is set and <paramref name="value" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.</exception>
      <returns>The element at the specified index.</returns>
    </member>
    <member name="T:System.Collections.ObjectModel.KeyedCollection`2">
      <summary>Provides the abstract base class for a collection whose keys are embedded in the values.</summary>
      <typeparam name="TKey">The type of keys in the collection.</typeparam>
      <typeparam name="TItem">The type of items in the collection.</typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> class that uses the default equality comparer.</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> class that uses the specified equality comparer.</summary>
      <param name="comparer">The implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> generic interface to use when comparing keys, or <see langword="null" /> to use the default equality comparer for the type of the key, obtained from <see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> class that uses the specified equality comparer and creates a lookup dictionary when the specified threshold is exceeded.</summary>
      <param name="comparer">The implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> generic interface to use when comparing keys, or <see langword="null" /> to use the default equality comparer for the type of the key, obtained from <see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />.</param>
      <param name="dictionaryCreationThreshold">The number of elements the collection can hold without creating a lookup dictionary (0 creates the lookup dictionary when the first item is added), or -1 to specify that a lookup dictionary is never created.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dictionaryCreationThreshold" /> is less than -1.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
      <summary>Changes the key associated with the specified element in the lookup dictionary.</summary>
      <param name="item">The element to change the key of.</param>
      <param name="newKey">The new key for <paramref name="item" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="key" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> is not found.  
  
 -or-  
  
 <paramref name="key" /> already exists in the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
      <summary>Removes all elements from the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)">
      <summary>Determines whether the collection contains an element with the specified key.</summary>
      <param name="key">The key to locate in the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> contains an element with the specified key; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)">
      <summary>When implemented in a derived class, extracts the key from the specified element.</summary>
      <param name="item">The element from which to extract the key.</param>
      <returns>The key for the specified element.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
      <summary>Inserts an element into the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> at the specified index.</summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The object to insert.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0.  
  
 -or-  
  
 <paramref name="index" /> is greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)">
      <summary>Removes the element with the specified key from the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</summary>
      <param name="key">The key of the element to remove.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> if the element is successfully removed; otherwise, <see langword="false" />.  This method also returns <see langword="false" /> if <paramref name="key" /> is not found in the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
      <summary>Removes the element at the specified index of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</summary>
      <param name="index">The index of the element to remove.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
      <summary>Replaces the item at the specified index with the specified item.</summary>
      <param name="index">The zero-based index of the item to be replaced.</param>
      <param name="item">The new item.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.TryGetValue(`0,`1@)">
      <summary>Tries to get an item from the collection using the specified key.</summary>
      <param name="key">The key of the item to search in the collection.</param>
      <param name="item">When this method returns <see langword="true" />, the item from the collection that matches the provided key; when this method returns <see langword="false" />, the <see langword="default" /> value for the type of the collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> if an item for the specified key was found in the collection; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.KeyedCollection`2.Comparer">
      <summary>Gets the generic equality comparer that is used to determine equality of keys in the collection.</summary>
      <returns>The implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> generic interface that is used to determine equality of keys in the collection.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.KeyedCollection`2.Dictionary">
      <summary>Gets the lookup dictionary of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</summary>
      <returns>The lookup dictionary of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />, if it exists; otherwise, <see langword="null" />.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
      <summary>Gets the element with the specified key.</summary>
      <param name="key">The key of the element to get.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">An element with the specified key does not exist in the collection.</exception>
      <returns>The element with the specified key. If an element with the specified key is not found, an exception is thrown.</returns>
    </member>
    <member name="T:System.Collections.ObjectModel.ReadOnlyCollection`1">
      <summary>Provides the base class for a generic read-only collection.</summary>
      <typeparam name="T">The type of elements in the collection.</typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.#ctor(System.Collections.Generic.IList{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> class that is a read-only wrapper around the specified list.</summary>
      <param name="list">The list to wrap.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.Contains(`0)">
      <summary>Determines whether an element is in the <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.</summary>
      <param name="value">The object to locate in the <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />. The value can be <see langword="null" /> for reference types.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is found in the <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.CopyTo(`0[],System.Int32)">
      <summary>Copies the entire <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> to a compatible one-dimensional <see cref="T:System.Array" />, starting at the specified index of the target array.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.GetEnumerator">
      <summary>Returns an enumerator that iterates through the <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> for the <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.IndexOf(`0)">
      <summary>Searches for the specified object and returns the zero-based index of the first occurrence within the entire <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.</summary>
      <param name="value">The object to locate in the <see cref="T:System.Collections.Generic.List`1" />. The value can be <see langword="null" /> for reference types.</param>
      <returns>The zero-based index of the first occurrence of <paramref name="item" /> within the entire <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, if found; otherwise, -1.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.  This implementation always throws <see cref="T:System.NotSupportedException" />.</summary>
      <param name="value">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.  This implementation always throws <see cref="T:System.NotSupportedException" />.</summary>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.  This implementation always throws <see cref="T:System.NotSupportedException" />.</summary>
      <param name="value">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
      <returns>
        <see langword="true" /> if <paramref name="value" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary>Inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.  This implementation always throws <see cref="T:System.NotSupportedException" />.</summary>
      <param name="index">The zero-based index at which <paramref name="value" /> should be inserted.</param>
      <param name="value">The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.</param>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary>Removes the <see cref="T:System.Collections.Generic.IList`1" /> item at the specified index.  This implementation always throws <see cref="T:System.NotSupportedException" />.</summary>
      <param name="index">The zero-based index of the item to remove.</param>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.  
  
 -or-  
  
 <paramref name="array" /> does not have zero-based indexing.  
  
 -or-  
  
 The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.  
  
 -or-  
  
 The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Add(System.Object)">
      <summary>Adds an item to the <see cref="T:System.Collections.IList" />.  This implementation always throws <see cref="T:System.NotSupportedException" />.</summary>
      <param name="value">The <see cref="T:System.Object" /> to add to the <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
      <returns>The position into which the new element was inserted.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Clear">
      <summary>Removes all items from the <see cref="T:System.Collections.IList" />.  This implementation always throws <see cref="T:System.NotSupportedException" />.</summary>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Contains(System.Object)">
      <summary>Determines whether the <see cref="T:System.Collections.IList" /> contains a specific value.</summary>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not of the type specified for the generic type parameter <paramref name="T" />.</exception>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Object" /> is found in the <see cref="T:System.Collections.IList" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>Determines the index of a specific item in the <see cref="T:System.Collections.IList" />.</summary>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not of the type specified for the generic type parameter <paramref name="T" />.</exception>
      <returns>The index of <paramref name="value" /> if found in the list; otherwise, -1.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Inserts an item to the <see cref="T:System.Collections.IList" /> at the specified index.  This implementation always throws <see cref="T:System.NotSupportedException" />.</summary>
      <param name="index">The zero-based index at which <paramref name="value" /> should be inserted.</param>
      <param name="value">The <see cref="T:System.Object" /> to insert into the <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Remove(System.Object)">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList" />.  This implementation always throws <see cref="T:System.NotSupportedException" />.</summary>
      <param name="value">The <see cref="T:System.Object" /> to remove from the <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Removes the <see cref="T:System.Collections.IList" /> item at the specified index.  This implementation always throws <see cref="T:System.NotSupportedException" />.</summary>
      <param name="index">The zero-based index of the item to remove.</param>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.Count">
      <summary>Gets the number of elements contained in the <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> instance.</summary>
      <returns>The number of elements contained in the <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> instance.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.Item(System.Int32)">
      <summary>Gets the element at the specified index.</summary>
      <param name="index">The zero-based index of the element to get.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.  
  
 -or-  
  
 <paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.ObjectModel.ReadOnlyCollection`1.Count" />.</exception>
      <returns>The element at the specified index.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.Items">
      <summary>Returns the <see cref="T:System.Collections.Generic.IList`1" /> that the <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> wraps.</summary>
      <returns>The <see cref="T:System.Collections.Generic.IList`1" /> that the <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> wraps.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, <see langword="false" />.  In the default implementation of <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, this property always returns <see langword="true" />.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary>Gets the element at the specified index. An <see cref="T:System.NotSupportedException" /> occurs if you try to set the item at the specified index.</summary>
      <param name="index">The zero-based index of the element to get.</param>
      <exception cref="T:System.NotSupportedException">Always thrown if the property is set.</exception>
      <returns>The element at the specified index.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).</summary>
      <returns>
        <see langword="true" /> if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, <see langword="false" />.  In the default implementation of <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, this property always returns <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.  In the default implementation of <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, this property always returns the current instance.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IsFixedSize">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.IList" /> has a fixed size.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.IList" /> has a fixed size; otherwise, <see langword="false" />.  In the default implementation of <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, this property always returns <see langword="true" />.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.IList" /> is read-only.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.IList" /> is read-only; otherwise, <see langword="false" />.  In the default implementation of <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, this property always returns <see langword="true" />.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Item(System.Int32)">
      <summary>Gets the element at the specified index. A <see cref="T:System.NotSupportedException" /> occurs if you try to set the item at the specified index.</summary>
      <param name="index">The zero-based index of the element to get.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />.</exception>
      <exception cref="T:System.NotSupportedException">Always thrown if the property is set.</exception>
      <returns>The element at the specified index.</returns>
    </member>
    <member name="T:System.Collections.ObjectModel.ReadOnlyDictionary`2">
      <summary>Represents a read-only, generic collection of key/value pairs.</summary>
      <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
      <typeparam name="TValue">The type of values in the dictionary.</typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" /> class that is a wrapper around the specified dictionary.</summary>
      <param name="dictionary">The dictionary to wrap.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ContainsKey(`0)">
      <summary>Determines whether the dictionary contains an element that has the specified key.</summary>
      <param name="key">The key to locate in the dictionary.</param>
      <returns>
        <see langword="true" /> if the dictionary contains an element that has the specified key; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.GetEnumerator">
      <summary>Returns an enumerator that iterates through the <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" />.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Throws a <see cref="T:System.NotSupportedException" /> exception in all cases.</summary>
      <param name="item">The object to add to the dictionary.</param>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Clear">
      <summary>Throws a <see cref="T:System.NotSupportedException" /> exception in all cases.</summary>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Determines whether the dictionary contains a specific value.</summary>
      <param name="item">The object to locate in the dictionary.</param>
      <returns>
        <see langword="true" /> if <paramref name="item" /> is found in the dictionary; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary>Copies the elements of the dictionary to an array, starting at the specified array index.</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the dictionary. The array must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.
              
-or-
              
The number of elements in the source dictionary is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.
              
-or-
              
Type <paramref name="T" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Throws a <see cref="T:System.NotSupportedException" /> exception in all cases.</summary>
      <param name="item">The object to remove from the dictionary.</param>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
      <returns>Throws a <see cref="T:System.NotSupportedException" /> exception in all cases.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
      <summary>Throws a <see cref="T:System.NotSupportedException" /> exception in all cases.</summary>
      <param name="key">The object to use as the key of the element to add.</param>
      <param name="value">The object to use as the value of the element to add.</param>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)">
      <summary>Throws a <see cref="T:System.NotSupportedException" /> exception in all cases.</summary>
      <param name="key">The key of the element to remove.</param>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
      <returns>Throws a <see cref="T:System.NotSupportedException" /> exception in all cases.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of the dictionary to an array, starting at the specified array index.</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the dictionary. The array must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.  
  
 -or-  
  
 The number of elements in the source dictionary is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.  
  
 -or-  
  
 The type of the source dictionary cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>Throws a <see cref="T:System.NotSupportedException" /> exception in all cases.</summary>
      <param name="key">The key of the element to add.</param>
      <param name="value">The value of the element to add.</param>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#Clear">
      <summary>Throws a <see cref="T:System.NotSupportedException" /> exception in all cases.</summary>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary>Determines whether the dictionary contains an element that has the specified key.</summary>
      <param name="key">The key to locate in the dictionary.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> if the dictionary contains an element that has the specified key; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary>Returns an enumerator for the dictionary.</summary>
      <returns>An enumerator for the dictionary.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary>Throws a <see cref="T:System.NotSupportedException" /> exception in all cases.</summary>
      <param name="key">The key of the element to remove.</param>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.TryGetValue(`0,`1@)">
      <summary>Retrieves the value that is associated with the specified key.</summary>
      <param name="key">The key whose value will be retrieved.</param>
      <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
      <returns>
        <see langword="true" /> if the object that implements <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" /> contains an element with the specified key; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.Count">
      <summary>Gets the number of items in the dictionary.</summary>
      <returns>The number of items in the dictionary.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.Dictionary">
      <summary>Gets the dictionary that is wrapped by this <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" /> object.</summary>
      <returns>The dictionary that is wrapped by this object.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.Item(`0)">
      <summary>Gets the element that has the specified key.</summary>
      <param name="key">The key of the element to get.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and <paramref name="key" /> is not found.</exception>
      <returns>The element that has the specified key.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.Keys">
      <summary>Gets a key collection that contains the keys of the dictionary.</summary>
      <returns>A key collection that contains the keys of the dictionary.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
      <summary>Gets a value that indicates whether the dictionary is read-only.</summary>
      <returns>Always returns <see langword="true" /> to indicate the dictionary is read-only.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Item(`0)">
      <summary>Gets the element that has the specified key.</summary>
      <param name="key">The key of the element to get or set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and <paramref name="key" /> is not found.</exception>
      <exception cref="T:System.NotSupportedException">The property is set.</exception>
      <returns>The element that has the specified key.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary>Gets a collection that contains the keys of the dictionary.</summary>
      <returns>A collection that contains the keys of the object that implements <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary>Gets a collection that contains the values in the dictionary.</summary>
      <returns>A collection that contains the values in the object that implements <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Keys">
      <summary>Gets an enumerable collection that contains the keys in the read-only dictionary.</summary>
      <returns>An enumerable collection that contains the keys in the read-only dictionary.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Values">
      <summary>Gets an enumerable collection that contains the values in the read-only dictionary.</summary>
      <returns>An enumerable collection that contains the values in the read-only dictionary.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value that indicates whether access to the dictionary is synchronized (thread safe).</summary>
      <returns>
        <see langword="true" /> if access to the dictionary is synchronized (thread safe); otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the dictionary.</summary>
      <returns>An object that can be used to synchronize access to the dictionary.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary>Gets a value that indicates whether the dictionary has a fixed size.</summary>
      <returns>
        <see langword="true" /> if the dictionary has a fixed size; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary>Gets a value that indicates whether the dictionary is read-only.</summary>
      <returns>
        <see langword="true" /> in all cases.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary>Gets the element that has the specified key.</summary>
      <param name="key">The key of the element to get or set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">The property is set.  
  
 -or-  
  
 The property is set, <paramref name="key" /> does not exist in the collection, and the dictionary has a fixed size.</exception>
      <returns>The element that has the specified key.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#Keys">
      <summary>Gets a collection that contains the keys of the dictionary.</summary>
      <returns>A collection that contains the keys of the dictionary.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#Values">
      <summary>Gets a collection that contains the values in the dictionary.</summary>
      <returns>A collection that contains the values in the dictionary.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.Values">
      <summary>Gets a collection that contains the values in the dictionary.</summary>
      <returns>A collection that contains the values in the object that implements <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" />.</returns>
    </member>
    <member name="T:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection">
      <summary>Represents a read-only collection of the keys of a <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" /> object.</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.CopyTo(`0[],System.Int32)">
      <summary>Copies the elements of the collection to an array, starting at a specific array index.</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the collection. The array must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.  
  
 -or-  
  
 The number of elements in the source collection is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.  
  
 -or-  
  
 Type <paramref name="T" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Add(`0)">
      <summary>Throws a <see cref="T:System.NotSupportedException" /> exception in all cases.</summary>
      <param name="item">The object to add to the collection.</param>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Clear">
      <summary>Throws a <see cref="T:System.NotSupportedException" /> exception in all cases.</summary>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Contains(`0)">
      <summary>Determines whether the collection contains a specific value.</summary>
      <param name="item">The object to locate in the collection.</param>
      <returns>
        <see langword="true" /> if <paramref name="item" /> is found in the collection; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Remove(`0)">
      <summary>Throws a <see cref="T:System.NotSupportedException" /> exception in all cases.</summary>
      <param name="item">The object to remove from the collection.</param>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
      <returns>
        <see langword="true" /> if <paramref name="item" /> was successfully removed from the collection; otherwise, <see langword="false" />. This method also returns <see langword="false" /> if <paramref name="item" /> is not found in the original collection.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of the collection to an array, starting at a specific array index.</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the collection. The array must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.  
  
 -or-  
  
 The number of elements in the source collection is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.Count">
      <summary>Gets the number of elements in the collection.</summary>
      <returns>The number of elements in the collection.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#IsReadOnly">
      <summary>Gets a value that indicates whether the dictionary is read-only.</summary>
      <returns>
        <see langword="true" /> in all cases.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value that indicates whether access to the collection is synchronized (thread safe).</summary>
      <returns>
        <see langword="true" /> if access to the collection is synchronized (thread safe); otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#ICollection#SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the collection.</summary>
      <returns>An object that can be used to synchronize access to the collection.</returns>
    </member>
    <member name="T:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection">
      <summary>Represents a read-only collection of the values of a <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" /> object.</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.CopyTo(`1[],System.Int32)">
      <summary>Copies the elements of the collection to an array, starting at a specific array index.</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the collection. The array must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.  
  
 -or-  
  
 The number of elements in the source collection is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.  
  
 -or-  
  
 Type <paramref name="T" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Add(`1)">
      <summary>Throws a <see cref="T:System.NotSupportedException" /> exception in all cases.</summary>
      <param name="item">The object to add to the collection.</param>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Clear">
      <summary>Throws a <see cref="T:System.NotSupportedException" /> exception in all cases.</summary>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Contains(`1)">
      <summary>Determines whether the collection contains a specific value.</summary>
      <param name="item">The object to locate in the collection.</param>
      <returns>
        <see langword="true" /> if <paramref name="item" /> is found in the collection; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Remove(`1)">
      <summary>Throws a <see cref="T:System.NotSupportedException" /> exception in all cases.</summary>
      <param name="item">The object to remove from the collection.</param>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
      <returns>
        <see langword="true" /> if <paramref name="item" /> was successfully removed from the collection; otherwise, <see langword="false" />. This method also returns <see langword="false" /> if item is not found in the original collection.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of the collection to an array, starting at a specific array index.</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the collection. The array must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.  
  
 -or-  
  
 The number of elements in the source collection is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.Count">
      <summary>Gets the number of elements in the collection.</summary>
      <returns>The number of elements in the collection.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#IsReadOnly">
      <summary>Gets a value that indicates whether the collection is read-only.</summary>
      <returns>
        <see langword="true" /> in all cases.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value that indicates whether access to the collection is synchronized (thread safe).</summary>
      <returns>
        <see langword="true" /> if access to the collection is synchronized (thread safe); otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#ICollection#SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the collection.</summary>
      <returns>An object that can be used to synchronize access to the collection.</returns>
    </member>
    <member name="T:System.Collections.StructuralComparisons">
      <summary>Provides objects for performing a structural comparison of two collection objects.</summary>
    </member>
    <member name="P:System.Collections.StructuralComparisons.StructuralComparer">
      <summary>Gets a predefined object that performs a structural comparison of two objects.</summary>
      <returns>A predefined object that is used to perform a structural comparison of two collection objects.</returns>
    </member>
    <member name="P:System.Collections.StructuralComparisons.StructuralEqualityComparer">
      <summary>Gets a predefined object that compares two objects for structural equality.</summary>
      <returns>A predefined object that is used to compare two collection objects for structural equality.</returns>
    </member>
    <member name="T:System.Comparison`1">
      <summary>Represents the method that compares two objects of the same type.</summary>
      <param name="x">The first object to compare.</param>
      <param name="y">The second object to compare.</param>
      <typeparam name="T">The type of the objects to compare.</typeparam>
      <returns>A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in the following table.  
  
 <list type="table"><listheader><term> Value</term><description> Meaning</description></listheader><item><term> Less than 0</term><description><paramref name="x" /> is less than <paramref name="y" />.</description></item><item><term> 0</term><description><paramref name="x" /> equals <paramref name="y" />.</description></item><item><term> Greater than 0</term><description><paramref name="x" /> is greater than <paramref name="y" />.</description></item></list></returns>
    </member>
    <member name="T:System.DataMisalignedException">
      <summary>The exception that is thrown when a unit of data is read from or written to an address that is not a multiple of the data size. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.DataMisalignedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.DataMisalignedException" /> class.</summary>
    </member>
    <member name="M:System.DataMisalignedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.DataMisalignedException" /> class using the specified error message.</summary>
      <param name="message">A <see cref="T:System.String" /> object that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.DataMisalignedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.DataMisalignedException" /> class using the specified error message and underlying exception.</summary>
      <param name="message">A <see cref="T:System.String" /> object that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
      <param name="innerException">The exception that is the cause of the current <see cref="T:System.DataMisalignedException" />. If the <paramref name="innerException" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.DateTime">
      <summary>Represents an instant in time, typically expressed as a date and time of day.</summary>
    </member>
    <member name="F:System.DateTime.MaxValue">
      <summary>Represents the largest possible value of <see cref="T:System.DateTime" />. This field is read-only.</summary>
    </member>
    <member name="F:System.DateTime.MinValue">
      <summary>Represents the smallest possible value of <see cref="T:System.DateTime" />. This field is read-only.</summary>
    </member>
    <member name="F:System.DateTime.UnixEpoch">
      <summary>The value of this constant is equivalent to 00:00:00.0000000 UTC, January 1, 1970, in the Gregorian calendar. <see cref="F:System.DateTime.UnixEpoch" /> defines the point in time when Unix time is equal to 0.</summary>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, and day.</summary>
      <param name="year">The year (1 through 9999).</param>
      <param name="month">The month (1 through 12).</param>
      <param name="day">The day (1 through the number of days in <paramref name="month" />).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is less than 1 or greater than 9999.  
  
 -or-  
  
 <paramref name="month" /> is less than 1 or greater than 12.  
  
 -or-  
  
 <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)">
      <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, and day for the specified calendar.</summary>
      <param name="year">The year (1 through the number of years in <paramref name="calendar" />).</param>
      <param name="month">The month (1 through the number of months in <paramref name="calendar" />).</param>
      <param name="day">The day (1 through the number of days in <paramref name="month" />).</param>
      <param name="calendar">The calendar that is used to interpret <paramref name="year" />, <paramref name="month" />, and <paramref name="day" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="calendar" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is not in the range supported by <paramref name="calendar" />.  
  
 -or-  
  
 <paramref name="month" /> is less than 1 or greater than the number of months in <paramref name="calendar" />.  
  
 -or-  
  
 <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, and second.</summary>
      <param name="year">The year (1 through 9999).</param>
      <param name="month">The month (1 through 12).</param>
      <param name="day">The day (1 through the number of days in <paramref name="month" />).</param>
      <param name="hour">The hours (0 through 23).</param>
      <param name="minute">The minutes (0 through 59).</param>
      <param name="second">The seconds (0 through 59).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is less than 1 or greater than 9999.  
  
 -or-  
  
 <paramref name="month" /> is less than 1 or greater than 12.  
  
 -or-  
  
 <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.  
  
 -or-  
  
 <paramref name="hour" /> is less than 0 or greater than 23.  
  
 -or-  
  
 <paramref name="minute" /> is less than 0 or greater than 59.  
  
 -or-  
  
 <paramref name="second" /> is less than 0 or greater than 59.</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)">
      <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, second, and Coordinated Universal Time (UTC) or local time.</summary>
      <param name="year">The year (1 through 9999).</param>
      <param name="month">The month (1 through 12).</param>
      <param name="day">The day (1 through the number of days in <paramref name="month" />).</param>
      <param name="hour">The hours (0 through 23).</param>
      <param name="minute">The minutes (0 through 59).</param>
      <param name="second">The seconds (0 through 59).</param>
      <param name="kind">One of the enumeration values that indicates whether <paramref name="year" />, <paramref name="month" />, <paramref name="day" />, <paramref name="hour" />, <paramref name="minute" /> and <paramref name="second" /> specify a local time, Coordinated Universal Time (UTC), or neither.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is less than 1 or greater than 9999.  
  
 -or-  
  
 <paramref name="month" /> is less than 1 or greater than 12.  
  
 -or-  
  
 <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.  
  
 -or-  
  
 <paramref name="hour" /> is less than 0 or greater than 23.  
  
 -or-  
  
 <paramref name="minute" /> is less than 0 or greater than 59.  
  
 -or-  
  
 <paramref name="second" /> is less than 0 or greater than 59.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="kind" /> is not one of the <see cref="T:System.DateTimeKind" /> values.</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)">
      <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, and second for the specified calendar.</summary>
      <param name="year">The year (1 through the number of years in <paramref name="calendar" />).</param>
      <param name="month">The month (1 through the number of months in <paramref name="calendar" />).</param>
      <param name="day">The day (1 through the number of days in <paramref name="month" />).</param>
      <param name="hour">The hours (0 through 23).</param>
      <param name="minute">The minutes (0 through 59).</param>
      <param name="second">The seconds (0 through 59).</param>
      <param name="calendar">The calendar that is used to interpret <paramref name="year" />, <paramref name="month" />, and <paramref name="day" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="calendar" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is not in the range supported by <paramref name="calendar" />.  
  
 -or-  
  
 <paramref name="month" /> is less than 1 or greater than the number of months in <paramref name="calendar" />.  
  
 -or-  
  
 <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.  
  
 -or-  
  
 <paramref name="hour" /> is less than 0 or greater than 23  
  
 -or-  
  
 <paramref name="minute" /> is less than 0 or greater than 59.  
  
 -or-  
  
 <paramref name="second" /> is less than 0 or greater than 59.</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, second, and millisecond.</summary>
      <param name="year">The year (1 through 9999).</param>
      <param name="month">The month (1 through 12).</param>
      <param name="day">The day (1 through the number of days in <paramref name="month" />).</param>
      <param name="hour">The hours (0 through 23).</param>
      <param name="minute">The minutes (0 through 59).</param>
      <param name="second">The seconds (0 through 59).</param>
      <param name="millisecond">The milliseconds (0 through 999).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is less than 1 or greater than 9999.  
  
 -or-  
  
 <paramref name="month" /> is less than 1 or greater than 12.  
  
 -or-  
  
 <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.  
  
 -or-  
  
 <paramref name="hour" /> is less than 0 or greater than 23.  
  
 -or-  
  
 <paramref name="minute" /> is less than 0 or greater than 59.  
  
 -or-  
  
 <paramref name="second" /> is less than 0 or greater than 59.  
  
 -or-  
  
 <paramref name="millisecond" /> is less than 0 or greater than 999.</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)">
      <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, second, millisecond, and Coordinated Universal Time (UTC) or local time.</summary>
      <param name="year">The year (1 through 9999).</param>
      <param name="month">The month (1 through 12).</param>
      <param name="day">The day (1 through the number of days in <paramref name="month" />).</param>
      <param name="hour">The hours (0 through 23).</param>
      <param name="minute">The minutes (0 through 59).</param>
      <param name="second">The seconds (0 through 59).</param>
      <param name="millisecond">The milliseconds (0 through 999).</param>
      <param name="kind">One of the enumeration values that indicates whether <paramref name="year" />, <paramref name="month" />, <paramref name="day" />, <paramref name="hour" />, <paramref name="minute" />, <paramref name="second" />, and <paramref name="millisecond" /> specify a local time, Coordinated Universal Time (UTC), or neither.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is less than 1 or greater than 9999.  
  
 -or-  
  
 <paramref name="month" /> is less than 1 or greater than 12.  
  
 -or-  
  
 <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.  
  
 -or-  
  
 <paramref name="hour" /> is less than 0 or greater than 23.  
  
 -or-  
  
 <paramref name="minute" /> is less than 0 or greater than 59.  
  
 -or-  
  
 <paramref name="second" /> is less than 0 or greater than 59.  
  
 -or-  
  
 <paramref name="millisecond" /> is less than 0 or greater than 999.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="kind" /> is not one of the <see cref="T:System.DateTimeKind" /> values.</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)">
      <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, second, and millisecond for the specified calendar.</summary>
      <param name="year">The year (1 through the number of years in <paramref name="calendar" />).</param>
      <param name="month">The month (1 through the number of months in <paramref name="calendar" />).</param>
      <param name="day">The day (1 through the number of days in <paramref name="month" />).</param>
      <param name="hour">The hours (0 through 23).</param>
      <param name="minute">The minutes (0 through 59).</param>
      <param name="second">The seconds (0 through 59).</param>
      <param name="millisecond">The milliseconds (0 through 999).</param>
      <param name="calendar">The calendar that is used to interpret <paramref name="year" />, <paramref name="month" />, and <paramref name="day" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="calendar" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is not in the range supported by <paramref name="calendar" />.  
  
 -or-  
  
 <paramref name="month" /> is less than 1 or greater than the number of months in <paramref name="calendar" />.  
  
 -or-  
  
 <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.  
  
 -or-  
  
 <paramref name="hour" /> is less than 0 or greater than 23.  
  
 -or-  
  
 <paramref name="minute" /> is less than 0 or greater than 59.  
  
 -or-  
  
 <paramref name="second" /> is less than 0 or greater than 59.  
  
 -or-  
  
 <paramref name="millisecond" /> is less than 0 or greater than 999.</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar,System.DateTimeKind)">
      <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, second, millisecond, and Coordinated Universal Time (UTC) or local time for the specified calendar.</summary>
      <param name="year">The year (1 through the number of years in <paramref name="calendar" />).</param>
      <param name="month">The month (1 through the number of months in <paramref name="calendar" />).</param>
      <param name="day">The day (1 through the number of days in <paramref name="month" />).</param>
      <param name="hour">The hours (0 through 23).</param>
      <param name="minute">The minutes (0 through 59).</param>
      <param name="second">The seconds (0 through 59).</param>
      <param name="millisecond">The milliseconds (0 through 999).</param>
      <param name="calendar">The calendar that is used to interpret <paramref name="year" />, <paramref name="month" />, and <paramref name="day" />.</param>
      <param name="kind">One of the enumeration values that indicates whether <paramref name="year" />, <paramref name="month" />, <paramref name="day" />, <paramref name="hour" />, <paramref name="minute" />, <paramref name="second" />, and <paramref name="millisecond" /> specify a local time, Coordinated Universal Time (UTC), or neither.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="calendar" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is not in the range supported by <paramref name="calendar" />.  
  
 -or-  
  
 <paramref name="month" /> is less than 1 or greater than the number of months in <paramref name="calendar" />.  
  
 -or-  
  
 <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.  
  
 -or-  
  
 <paramref name="hour" /> is less than 0 or greater than 23.  
  
 -or-  
  
 <paramref name="minute" /> is less than 0 or greater than 59.  
  
 -or-  
  
 <paramref name="second" /> is less than 0 or greater than 59.  
  
 -or-  
  
 <paramref name="millisecond" /> is less than 0 or greater than 999.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="kind" /> is not one of the <see cref="T:System.DateTimeKind" /> values.</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int64)">
      <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to a specified number of ticks.</summary>
      <param name="ticks">A date and time expressed in the number of 100-nanosecond intervals that have elapsed since January 1, 0001 at 00:00:00.000 in the Gregorian calendar.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ticks" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int64,System.DateTimeKind)">
      <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to a specified number of ticks and to Coordinated Universal Time (UTC) or local time.</summary>
      <param name="ticks">A date and time expressed in the number of 100-nanosecond intervals that have elapsed since January 1, 0001 at 00:00:00.000 in the Gregorian calendar.</param>
      <param name="kind">One of the enumeration values that indicates whether <paramref name="ticks" /> specifies a local time, Coordinated Universal Time (UTC), or neither.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ticks" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="kind" /> is not one of the <see cref="T:System.DateTimeKind" /> values.</exception>
    </member>
    <member name="M:System.DateTime.Add(System.TimeSpan)">
      <summary>Returns a new <see cref="T:System.DateTime" /> that adds the value of the specified <see cref="T:System.TimeSpan" /> to the value of this instance.</summary>
      <param name="value">A positive or negative time interval.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
      <returns>An object whose value is the sum of the date and time represented by this instance and the time interval represented by <paramref name="value" />.</returns>
    </member>
    <member name="M:System.DateTime.AddDays(System.Double)">
      <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of days to the value of this instance.</summary>
      <param name="value">A number of whole and fractional days. The <paramref name="value" /> parameter can be negative or positive.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
      <returns>An object whose value is the sum of the date and time represented by this instance and the number of days represented by <paramref name="value" />.</returns>
    </member>
    <member name="M:System.DateTime.AddHours(System.Double)">
      <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of hours to the value of this instance.</summary>
      <param name="value">A number of whole and fractional hours. The <paramref name="value" /> parameter can be negative or positive.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
      <returns>An object whose value is the sum of the date and time represented by this instance and the number of hours represented by <paramref name="value" />.</returns>
    </member>
    <member name="M:System.DateTime.AddMilliseconds(System.Double)">
      <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of milliseconds to the value of this instance.</summary>
      <param name="value">A number of whole and fractional milliseconds. The <paramref name="value" /> parameter can be negative or positive. Note that this value is rounded to the nearest integer.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
      <returns>An object whose value is the sum of the date and time represented by this instance and the number of milliseconds represented by <paramref name="value" />.</returns>
    </member>
    <member name="M:System.DateTime.AddMinutes(System.Double)">
      <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of minutes to the value of this instance.</summary>
      <param name="value">A number of whole and fractional minutes. The <paramref name="value" /> parameter can be negative or positive.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
      <returns>An object whose value is the sum of the date and time represented by this instance and the number of minutes represented by <paramref name="value" />.</returns>
    </member>
    <member name="M:System.DateTime.AddMonths(System.Int32)">
      <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of months to the value of this instance.</summary>
      <param name="months">A number of months. The <paramref name="months" /> parameter can be negative or positive.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.  
  
 -or-  
  
 <paramref name="months" /> is less than -120,000 or greater than 120,000.</exception>
      <returns>An object whose value is the sum of the date and time represented by this instance and <paramref name="months" />.</returns>
    </member>
    <member name="M:System.DateTime.AddSeconds(System.Double)">
      <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of seconds to the value of this instance.</summary>
      <param name="value">A number of whole and fractional seconds. The <paramref name="value" /> parameter can be negative or positive.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
      <returns>An object whose value is the sum of the date and time represented by this instance and the number of seconds represented by <paramref name="value" />.</returns>
    </member>
    <member name="M:System.DateTime.AddTicks(System.Int64)">
      <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of ticks to the value of this instance.</summary>
      <param name="value">A number of 100-nanosecond ticks. The <paramref name="value" /> parameter can be positive or negative.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
      <returns>An object whose value is the sum of the date and time represented by this instance and the time represented by <paramref name="value" />.</returns>
    </member>
    <member name="M:System.DateTime.AddYears(System.Int32)">
      <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of years to the value of this instance.</summary>
      <param name="value">A number of years. The <paramref name="value" /> parameter can be negative or positive.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> or the resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
      <returns>An object whose value is the sum of the date and time represented by this instance and the number of years represented by <paramref name="value" />.</returns>
    </member>
    <member name="M:System.DateTime.Compare(System.DateTime,System.DateTime)">
      <summary>Compares two instances of <see cref="T:System.DateTime" /> and returns an integer that indicates whether the first instance is earlier than, the same as, or later than the second instance.</summary>
      <param name="t1">The first object to compare.</param>
      <param name="t2">The second object to compare.</param>
      <returns>A signed number indicating the relative values of <paramref name="t1" /> and <paramref name="t2" />.  
  
 <list type="table"><listheader><term> Value Type</term><description> Condition</description></listheader><item><term> Less than zero</term><description><paramref name="t1" /> is earlier than <paramref name="t2" />.</description></item><item><term> Zero</term><description><paramref name="t1" /> is the same as <paramref name="t2" />.</description></item><item><term> Greater than zero</term><description><paramref name="t1" /> is later than <paramref name="t2" />.</description></item></list></returns>
    </member>
    <member name="M:System.DateTime.CompareTo(System.DateTime)">
      <summary>Compares the value of this instance to a specified <see cref="T:System.DateTime" /> value and returns an integer that indicates whether this instance is earlier than, the same as, or later than the specified <see cref="T:System.DateTime" /> value.</summary>
      <param name="value">The object to compare to the current instance.</param>
      <returns>A signed number indicating the relative values of this instance and the <paramref name="value" /> parameter.  
  
 <list type="table"><listheader><term> Value</term><description> Description</description></listheader><item><term> Less than zero</term><description> This instance is earlier than <paramref name="value" />.</description></item><item><term> Zero</term><description> This instance is the same as <paramref name="value" />.</description></item><item><term> Greater than zero</term><description> This instance is later than <paramref name="value" />.</description></item></list></returns>
    </member>
    <member name="M:System.DateTime.CompareTo(System.Object)">
      <summary>Compares the value of this instance to a specified object that contains a specified <see cref="T:System.DateTime" /> value, and returns an integer that indicates whether this instance is earlier than, the same as, or later than the specified <see cref="T:System.DateTime" /> value.</summary>
      <param name="value">A boxed object to compare, or <see langword="null" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.DateTime" />.</exception>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.  
  
 <list type="table"><listheader><term> Value</term><description> Description</description></listheader><item><term> Less than zero</term><description> This instance is earlier than <paramref name="value" />.</description></item><item><term> Zero</term><description> This instance is the same as <paramref name="value" />.</description></item><item><term> Greater than zero</term><description> This instance is later than <paramref name="value" />, or <paramref name="value" /> is <see langword="null" />.</description></item></list></returns>
    </member>
    <member name="M:System.DateTime.DaysInMonth(System.Int32,System.Int32)">
      <summary>Returns the number of days in the specified month and year.</summary>
      <param name="year">The year.</param>
      <param name="month">The month (a number ranging from 1 to 12).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="month" /> is less than 1 or greater than 12.  
  
 -or-  
  
 <paramref name="year" /> is less than 1 or greater than 9999.</exception>
      <returns>The number of days in <paramref name="month" /> for the specified <paramref name="year" />.  
  
 For example, if <paramref name="month" /> equals 2 for February, the return value is 28 or 29 depending upon whether <paramref name="year" /> is a leap year.</returns>
    </member>
    <member name="M:System.DateTime.Equals(System.DateTime)">
      <summary>Returns a value indicating whether the value of this instance is equal to the value of the specified <see cref="T:System.DateTime" /> instance.</summary>
      <param name="value">The object to compare to this instance.</param>
      <returns>
        <see langword="true" /> if the <paramref name="value" /> parameter equals the value of this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.DateTime.Equals(System.DateTime,System.DateTime)">
      <summary>Returns a value indicating whether two <see cref="T:System.DateTime" /> instances  have the same date and time value.</summary>
      <param name="t1">The first object to compare.</param>
      <param name="t2">The second object to compare.</param>
      <returns>
        <see langword="true" /> if the two values are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.DateTime.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="value">The object to compare to this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is an instance of <see cref="T:System.DateTime" /> and equals the value of this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.DateTime.FromBinary(System.Int64)">
      <summary>Deserializes a 64-bit binary value and recreates an original serialized <see cref="T:System.DateTime" /> object.</summary>
      <param name="dateData">A 64-bit signed integer that encodes the <see cref="P:System.DateTime.Kind" /> property in a 2-bit field and the <see cref="P:System.DateTime.Ticks" /> property in a 62-bit field.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateData" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
      <returns>An object that is equivalent to the <see cref="T:System.DateTime" /> object that was serialized by the <see cref="M:System.DateTime.ToBinary" /> method.</returns>
    </member>
    <member name="M:System.DateTime.FromFileTime(System.Int64)">
      <summary>Converts the specified Windows file time to an equivalent local time.</summary>
      <param name="fileTime">A Windows file time expressed in ticks.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="fileTime" /> is less than 0 or represents a time greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
      <returns>An object that represents the local time equivalent of the date and time represented by the <paramref name="fileTime" /> parameter.</returns>
    </member>
    <member name="M:System.DateTime.FromFileTimeUtc(System.Int64)">
      <summary>Converts the specified Windows file time to an equivalent UTC time.</summary>
      <param name="fileTime">A Windows file time expressed in ticks.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="fileTime" /> is less than 0 or represents a time greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
      <returns>An object that represents the UTC time equivalent of the date and time represented by the <paramref name="fileTime" /> parameter.</returns>
    </member>
    <member name="M:System.DateTime.FromOADate(System.Double)">
      <summary>Returns a <see cref="T:System.DateTime" /> equivalent to the specified OLE Automation Date.</summary>
      <param name="d">An OLE Automation Date value.</param>
      <exception cref="T:System.ArgumentException">The date is not a valid OLE Automation Date value.</exception>
      <returns>An object that represents the same date and time as <paramref name="d" />.</returns>
    </member>
    <member name="M:System.DateTime.GetDateTimeFormats">
      <summary>Converts the value of this instance to all the string representations supported by the standard date and time format specifiers.</summary>
      <returns>A string array where each element is the representation of the value of this instance formatted with one of the standard date and time format specifiers.</returns>
    </member>
    <member name="M:System.DateTime.GetDateTimeFormats(System.Char)">
      <summary>Converts the value of this instance to all the string representations supported by the specified standard date and time format specifier.</summary>
      <param name="format">A standard date and time format string.</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is not a valid standard date and time format specifier character.</exception>
      <returns>A string array where each element is the representation of the value of this instance formatted with the <paramref name="format" /> standard date and time format specifier.</returns>
    </member>
    <member name="M:System.DateTime.GetDateTimeFormats(System.Char,System.IFormatProvider)">
      <summary>Converts the value of this instance to all the string representations supported by the specified standard date and time format specifier and culture-specific formatting information.</summary>
      <param name="format">A date and time format string.</param>
      <param name="provider">An object that supplies culture-specific formatting information about this instance.</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is not a valid standard date and time format specifier character.</exception>
      <returns>A string array where each element is the representation of the value of this instance formatted with one of the standard date and time format specifiers.</returns>
    </member>
    <member name="M:System.DateTime.GetDateTimeFormats(System.IFormatProvider)">
      <summary>Converts the value of this instance to all the string representations supported by the standard date and time format specifiers and the specified culture-specific formatting information.</summary>
      <param name="provider">An object that supplies culture-specific formatting information about this instance.</param>
      <returns>A string array where each element is the representation of the value of this instance formatted with one of the standard date and time format specifiers.</returns>
    </member>
    <member name="M:System.DateTime.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.DateTime.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.DateTime" />.</summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.DateTime" />.</returns>
    </member>
    <member name="M:System.DateTime.IsDaylightSavingTime">
      <summary>Indicates whether this instance of <see cref="T:System.DateTime" /> is within the daylight saving time range for the current time zone.</summary>
      <returns>
        <see langword="true" /> if the value of the <see cref="P:System.DateTime.Kind" /> property is <see cref="F:System.DateTimeKind.Local" /> or <see cref="F:System.DateTimeKind.Unspecified" /> and the value of this instance of <see cref="T:System.DateTime" /> is within the daylight saving time range for the local time zone; <see langword="false" /> if <see cref="P:System.DateTime.Kind" /> is <see cref="F:System.DateTimeKind.Utc" />.</returns>
    </member>
    <member name="M:System.DateTime.IsLeapYear(System.Int32)">
      <summary>Returns an indication whether the specified year is a leap year.</summary>
      <param name="year">A 4-digit year.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is less than 1 or greater than 9999.</exception>
      <returns>
        <see langword="true" /> if <paramref name="year" /> is a leap year; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.DateTime.op_Addition(System.DateTime,System.TimeSpan)">
      <summary>Adds a specified time interval to a specified date and time, yielding a new date and time.</summary>
      <param name="d">The date and time value to add.</param>
      <param name="t">The time interval to add.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
      <returns>An object that is the sum of the values of <paramref name="d" /> and <paramref name="t" />.</returns>
    </member>
    <member name="M:System.DateTime.op_Equality(System.DateTime,System.DateTime)">
      <summary>Determines whether two specified instances of <see cref="T:System.DateTime" /> are equal.</summary>
      <param name="d1">The first object to compare.</param>
      <param name="d2">The second object to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="d1" /> and <paramref name="d2" /> represent the same date and time; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.DateTime.op_GreaterThan(System.DateTime,System.DateTime)">
      <summary>Determines whether one specified <see cref="T:System.DateTime" /> is later than another specified <see cref="T:System.DateTime" />.</summary>
      <param name="t1">The first object to compare.</param>
      <param name="t2">The second object to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="t1" /> is later than <paramref name="t2" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.DateTime.op_GreaterThanOrEqual(System.DateTime,System.DateTime)">
      <summary>Determines whether one specified <see cref="T:System.DateTime" /> represents a date and time that is the same as or later than another specified <see cref="T:System.DateTime" />.</summary>
      <param name="t1">The first object to compare.</param>
      <param name="t2">The second object to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="t1" /> is the same as or later than <paramref name="t2" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.DateTime.op_Inequality(System.DateTime,System.DateTime)">
      <summary>Determines whether two specified instances of <see cref="T:System.DateTime" /> are not equal.</summary>
      <param name="d1">The first object to compare.</param>
      <param name="d2">The second object to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="d1" /> and <paramref name="d2" /> do not represent the same date and time; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.DateTime.op_LessThan(System.DateTime,System.DateTime)">
      <summary>Determines whether one specified <see cref="T:System.DateTime" /> is earlier than another specified <see cref="T:System.DateTime" />.</summary>
      <param name="t1">The first object to compare.</param>
      <param name="t2">The second object to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="t1" /> is earlier than <paramref name="t2" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.DateTime.op_LessThanOrEqual(System.DateTime,System.DateTime)">
      <summary>Determines whether one specified <see cref="T:System.DateTime" /> represents a date and time that is the same as or earlier than another specified <see cref="T:System.DateTime" />.</summary>
      <param name="t1">The first object to compare.</param>
      <param name="t2">The second object to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="t1" /> is the same as or earlier than <paramref name="t2" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.DateTime.op_Subtraction(System.DateTime,System.DateTime)">
      <summary>Subtracts a specified date and time from another specified date and time and returns a time interval.</summary>
      <param name="d1">The date and time value to subtract from (the minuend).</param>
      <param name="d2">The date and time value to subtract (the subtrahend).</param>
      <returns>The time interval between <paramref name="d1" /> and <paramref name="d2" />; that is, <paramref name="d1" /> minus <paramref name="d2" />.</returns>
    </member>
    <member name="M:System.DateTime.op_Subtraction(System.DateTime,System.TimeSpan)">
      <summary>Subtracts a specified time interval from a specified date and time and returns a new date and time.</summary>
      <param name="d">The date and time value to subtract from.</param>
      <param name="t">The time interval to subtract.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
      <returns>An object whose value is the value of <paramref name="d" /> minus the value of <paramref name="t" />.</returns>
    </member>
    <member name="M:System.DateTime.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>Converts a memory span that contains string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent by using culture-specific format information and a formatting style.</summary>
      <param name="s">The memory span that contains the string to parse. See The string to parse for more information.</param>
      <param name="provider">An object that supplies culture-specific format information about <paramref name="s" />.  See Parsing and cultural conventions</param>
      <param name="styles">A bitwise combination of the enumeration values that indicates the style elements that can be present in <paramref name="s" /> for the parse operation to succeed, and that defines how to interpret the parsed date in relation to the current time zone or the current date. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not contain a valid string representation of a date and time.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values. For example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />.</exception>
      <returns>An object that is equivalent to the date and time contained in <paramref name="s" />, as specified by <paramref name="provider" /> and <paramref name="styles" />.</returns>
    </member>
    <member name="M:System.DateTime.Parse(System.String)">
      <summary>Converts the string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent by using the conventions of the current thread culture.</summary>
      <param name="s">A string that contains a date and time to convert. See The string to parse for more information.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not contain a valid string representation of a date and time.</exception>
      <returns>An object that is equivalent to the date and time contained in <paramref name="s" />.</returns>
    </member>
    <member name="M:System.DateTime.Parse(System.String,System.IFormatProvider)">
      <summary>Converts the string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent by using culture-specific format information.</summary>
      <param name="s">A string that contains a date and time to convert. See The string to parse for more information.</param>
      <param name="provider">An object that supplies culture-specific format information about <paramref name="s" />.  See Parsing and cultural conventions</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not contain a valid string representation of a date and time.</exception>
      <returns>An object that is equivalent to the date and time contained in <paramref name="s" /> as specified by <paramref name="provider" />.</returns>
    </member>
    <member name="M:System.DateTime.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>Converts the string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent by using culture-specific format information and a formatting style.</summary>
      <param name="s">A string that contains a date and time to convert. See The string to parse for more information.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.  See Parsing and cultural conventions</param>
      <param name="styles">A bitwise combination of the enumeration values that indicates the style elements that can be present in <paramref name="s" /> for the parse operation to succeed, and that defines how to interpret the parsed date in relation to the current time zone or the current date. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not contain a valid string representation of a date and time.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values. For example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />.</exception>
      <returns>An object that is equivalent to the date and time contained in <paramref name="s" />, as specified by <paramref name="provider" /> and <paramref name="styles" />.</returns>
    </member>
    <member name="M:System.DateTime.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>Converts the specified span representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified format, culture-specific format information, and style. The format of the string representation must match the specified format exactly or an exception is thrown.</summary>
      <param name="s">A span containing the characters that represent a date and time to convert.</param>
      <param name="format">A span containing the characters that represent a format specifier that defines the required format of <paramref name="s" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <param name="style">A bitwise combination of the enumeration values that provides additional information about <paramref name="s" />, about style elements that may be present in <paramref name="s" />, or about the conversion from <paramref name="s" /> to a <see cref="T:System.DateTime" /> value. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
      <returns>An object that is equivalent to the date and time contained in <paramref name="s" />, as specified by <paramref name="format" />, <paramref name="provider" />, and <paramref name="style" />.</returns>
    </member>
    <member name="M:System.DateTime.ParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>Converts the specified span representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified array of formats, culture-specific format information, and style. The format of the string representation must match at least one of the specified formats exactly or an exception is thrown.</summary>
      <param name="s">A span containing the characters that represent a date and time to convert.</param>
      <param name="formats">An array of allowable formats of <paramref name="s" />.</param>
      <param name="provider">An object that supplies culture-specific format information about <paramref name="s" />.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
      <returns>An object that is equivalent to the date and time contained in <paramref name="s" />, as specified by <paramref name="formats" />, <paramref name="provider" />, and <paramref name="style" />.</returns>
    </member>
    <member name="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)">
      <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified format and culture-specific format information. The format of the string representation must match the specified format exactly.</summary>
      <param name="s">A string that contains a date and time to convert.</param>
      <param name="format">A format specifier that defines the required format of <paramref name="s" />. For more information, see the Remarks section.</param>
      <param name="provider">An object that supplies culture-specific format information about <paramref name="s" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> or <paramref name="format" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> or <paramref name="format" /> is an empty string.  
  
 -or-  
  
 <paramref name="s" /> does not contain a date and time that corresponds to the pattern specified in <paramref name="format" />.  
  
 -or-  
  
 The hour component and the AM/PM designator in <paramref name="s" /> do not agree.</exception>
      <returns>An object that is equivalent to the date and time contained in <paramref name="s" />, as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
    </member>
    <member name="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified format, culture-specific format information, and style. The format of the string representation must match the specified format exactly or an exception is thrown.</summary>
      <param name="s">A string containing a date and time to convert.</param>
      <param name="format">A format specifier that defines the required format of <paramref name="s" />. For more information, see the Remarks section.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <param name="style">A bitwise combination of the enumeration values that provides additional information about <paramref name="s" />, about style elements that may be present in <paramref name="s" />, or about the conversion from <paramref name="s" /> to a <see cref="T:System.DateTime" /> value. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> or <paramref name="format" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> or <paramref name="format" /> is an empty string.  
  
 -or-  
  
 <paramref name="s" /> does not contain a date and time that corresponds to the pattern specified in <paramref name="format" />.  
  
 -or-  
  
 The hour component and the AM/PM designator in <paramref name="s" /> do not agree.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values. For example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />.</exception>
      <returns>An object that is equivalent to the date and time contained in <paramref name="s" />, as specified by <paramref name="format" />, <paramref name="provider" />, and <paramref name="style" />.</returns>
    </member>
    <member name="M:System.DateTime.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified array of formats, culture-specific format information, and style. The format of the string representation must match at least one of the specified formats exactly or an exception is thrown.</summary>
      <param name="s">A string that contains a date and time to convert.</param>
      <param name="formats">An array of allowable formats of <paramref name="s" />. For more information, see the Remarks section.</param>
      <param name="provider">An object that supplies culture-specific format information about <paramref name="s" />.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> or <paramref name="formats" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is an empty string.  
  
 -or-  
  
 an element of <paramref name="formats" /> is an empty string.  
  
 -or-  
  
 <paramref name="s" /> does not contain a date and time that corresponds to any element of <paramref name="formats" />.  
  
 -or-  
  
 The hour component and the AM/PM designator in <paramref name="s" /> do not agree.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values. For example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />.</exception>
      <returns>An object that is equivalent to the date and time contained in <paramref name="s" />, as specified by <paramref name="formats" />, <paramref name="provider" />, and <paramref name="style" />.</returns>
    </member>
    <member name="M:System.DateTime.SpecifyKind(System.DateTime,System.DateTimeKind)">
      <summary>Creates a new <see cref="T:System.DateTime" /> object that has the same number of ticks as the specified <see cref="T:System.DateTime" />, but is designated as either local time, Coordinated Universal Time (UTC), or neither, as indicated by the specified <see cref="T:System.DateTimeKind" /> value.</summary>
      <param name="value">A date and time.</param>
      <param name="kind">One of the enumeration values that indicates whether the new object represents local time, UTC, or neither.</param>
      <returns>A new object that has the same number of ticks as the object represented by the <paramref name="value" /> parameter and the <see cref="T:System.DateTimeKind" /> value specified by the <paramref name="kind" /> parameter.</returns>
    </member>
    <member name="M:System.DateTime.Subtract(System.DateTime)">
      <summary>Returns a new <see cref="T:System.TimeSpan" /> that subtracts the specified date and time from the value of this instance.</summary>
      <param name="value">The date and time value to subtract.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The result is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
      <returns>A time interval that is equal to the date and time represented by this instance minus the date and time represented by <paramref name="value" />.</returns>
    </member>
    <member name="M:System.DateTime.Subtract(System.TimeSpan)">
      <summary>Returns a new <see cref="T:System.DateTime" /> that subtracts the specified duration from the value of this instance.</summary>
      <param name="value">The time interval to subtract.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The result is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
      <returns>An object that is equal to the date and time represented by this instance minus the time interval represented by <paramref name="value" />.</returns>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
      <returns>The return value for this member is not used.</returns>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
      <returns>The return value for this member is not used.</returns>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
      <returns>The return value for this member is not used.</returns>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>Returns the current <see cref="T:System.DateTime" /> object.</summary>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
      <returns>The current object.</returns>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
      <returns>The return value for this member is not used.</returns>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
      <returns>The return value for this member is not used.</returns>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
      <returns>The return value for this member is not used.</returns>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
      <returns>The return value for this member is not used.</returns>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
      <returns>The return value for this member is not used.</returns>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
      <returns>The return value for this member is not used.</returns>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
      <returns>The return value for this member is not used.</returns>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>Converts the current <see cref="T:System.DateTime" /> object to an object of a specified type.</summary>
      <param name="type">The desired type.</param>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidCastException">This conversion is not supported for the <see cref="T:System.DateTime" /> type.</exception>
      <returns>An object of the type specified by the <paramref name="type" /> parameter, with a value equivalent to the current <see cref="T:System.DateTime" /> object.</returns>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
      <returns>The return value for this member is not used.</returns>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
      <returns>The return value for this member is not used.</returns>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
      <returns>The return value for this member is not used.</returns>
    </member>
    <member name="M:System.DateTime.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the data needed to serialize the current <see cref="T:System.DateTime" /> object.</summary>
      <param name="info">The object to populate with data.</param>
      <param name="context">The destination for this serialization. (This parameter is not used; specify <see langword="null" />.)</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.DateTime.ToBinary">
      <summary>Serializes the current <see cref="T:System.DateTime" /> object to a 64-bit binary value that subsequently can be used to recreate the <see cref="T:System.DateTime" /> object.</summary>
      <returns>A 64-bit signed integer that encodes the <see cref="P:System.DateTime.Kind" /> and <see cref="P:System.DateTime.Ticks" /> properties.</returns>
    </member>
    <member name="M:System.DateTime.ToFileTime">
      <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to a Windows file time.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting file time would represent a date and time before 12:00 midnight January 1, 1601 C.E. UTC.</exception>
      <returns>The value of the current <see cref="T:System.DateTime" /> object expressed as a Windows file time.</returns>
    </member>
    <member name="M:System.DateTime.ToFileTimeUtc">
      <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to a Windows file time.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting file time would represent a date and time before 12:00 midnight January 1, 1601 C.E. UTC.</exception>
      <returns>The value of the current <see cref="T:System.DateTime" /> object expressed as a Windows file time.</returns>
    </member>
    <member name="M:System.DateTime.ToLocalTime">
      <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to local time.</summary>
      <returns>An object whose <see cref="P:System.DateTime.Kind" /> property is <see cref="F:System.DateTimeKind.Local" />, and whose value is the local time equivalent to the value of the current <see cref="T:System.DateTime" /> object, or <see cref="F:System.DateTime.MaxValue" /> if the converted value is too large to be represented by a <see cref="T:System.DateTime" /> object, or <see cref="F:System.DateTime.MinValue" /> if the converted value is too small to be represented as a <see cref="T:System.DateTime" /> object.</returns>
    </member>
    <member name="M:System.DateTime.ToLongDateString">
      <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent long date string representation.</summary>
      <returns>A string that contains the long date string representation of the current <see cref="T:System.DateTime" /> object.</returns>
    </member>
    <member name="M:System.DateTime.ToLongTimeString">
      <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent long time string representation.</summary>
      <returns>A string that contains the long time string representation of the current <see cref="T:System.DateTime" /> object.</returns>
    </member>
    <member name="M:System.DateTime.ToOADate">
      <summary>Converts the value of this instance to the equivalent OLE Automation date.</summary>
      <exception cref="T:System.OverflowException">The value of this instance cannot be represented as an OLE Automation Date.</exception>
      <returns>A double-precision floating-point number that contains an OLE Automation date equivalent to the value of this instance.</returns>
    </member>
    <member name="M:System.DateTime.ToShortDateString">
      <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent short date string representation.</summary>
      <returns>A string that contains the short date string representation of the current <see cref="T:System.DateTime" /> object.</returns>
    </member>
    <member name="M:System.DateTime.ToShortTimeString">
      <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent short time string representation.</summary>
      <returns>A string that contains the short time string representation of the current <see cref="T:System.DateTime" /> object.</returns>
    </member>
    <member name="M:System.DateTime.ToString">
      <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent string representation using the formatting conventions of the current culture.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">The date and time is outside the range of dates supported by the calendar used by the current culture.</exception>
      <returns>A string representation of the value of the current <see cref="T:System.DateTime" /> object.</returns>
    </member>
    <member name="M:System.DateTime.ToString(System.IFormatProvider)">
      <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent string representation using the specified culture-specific format information.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The date and time is outside the range of dates supported by the calendar used by <paramref name="provider" />.</exception>
      <returns>A string representation of value of the current <see cref="T:System.DateTime" /> object as specified by <paramref name="provider" />.</returns>
    </member>
    <member name="M:System.DateTime.ToString(System.String)">
      <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent string representation using the specified format and the formatting conventions of the current culture.</summary>
      <param name="format">A standard or custom date and time format string.</param>
      <exception cref="T:System.FormatException">The length of <paramref name="format" /> is 1, and it is not one of the format specifier characters defined for <see cref="T:System.Globalization.DateTimeFormatInfo" />.  
  
 -or-  
  
 <paramref name="format" /> does not contain a valid custom format pattern.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The date and time is outside the range of dates supported by the calendar used by the current culture.</exception>
      <returns>A string representation of value of the current <see cref="T:System.DateTime" /> object as specified by <paramref name="format" />.</returns>
    </member>
    <member name="M:System.DateTime.ToString(System.String,System.IFormatProvider)">
      <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent string representation using the specified format and culture-specific format information.</summary>
      <param name="format">A standard or custom date and time format string.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <exception cref="T:System.FormatException">The length of <paramref name="format" /> is 1, and it is not one of the format specifier characters defined for <see cref="T:System.Globalization.DateTimeFormatInfo" />.  
  
 -or-  
  
 <paramref name="format" /> does not contain a valid custom format pattern.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The date and time is outside the range of dates supported by the calendar used by <paramref name="provider" />.</exception>
      <returns>A string representation of value of the current <see cref="T:System.DateTime" /> object as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
    </member>
    <member name="M:System.DateTime.ToUniversalTime">
      <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to Coordinated Universal Time (UTC).</summary>
      <returns>An object whose <see cref="P:System.DateTime.Kind" /> property is <see cref="F:System.DateTimeKind.Utc" />, and whose value is the UTC equivalent to the value of the current <see cref="T:System.DateTime" /> object, or <see cref="F:System.DateTime.MaxValue" /> if the converted value is too large to be represented by a <see cref="T:System.DateTime" /> object, or <see cref="F:System.DateTime.MinValue" /> if the converted value is too small to be represented by a <see cref="T:System.DateTime" /> object.</returns>
    </member>
    <member name="M:System.DateTime.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <summary>Tries to format the value of the current datetime instance into the provided span of characters.</summary>
      <param name="destination">When this method returns, this instance's value formatted as a span of characters.</param>
      <param name="charsWritten">When this method returns, the number of characters that were written in <paramref name="destination" />.</param>
      <param name="format">A span containing the charactes that represent a standard or custom format string that defines the acceptable format for <paramref name="destination" />.</param>
      <param name="provider">An optional object that supplies culture-specific formatting information for <paramref name="destination" />.</param>
      <returns>
        <see langword="true" /> if the formatting was successful; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.DateTime.TryParse(System.ReadOnlySpan{System.Char},System.DateTime@)">
      <summary>Converts the specified char span of a date and time to its <see cref="T:System.DateTime" /> equivalent and returns a value that indicates whether the conversion succeeded.</summary>
      <param name="s">A string containing a date and time to convert.</param>
      <param name="result">When this method returns, contains the <see cref="T:System.DateTime" /> value equivalent to the date and time contained in <paramref name="s" />, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" /> if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" />, is an empty string (""), or does not contain a valid string representation of a date and time. This parameter is passed uninitialized.</param>
      <returns>
        <see langword="true" /> if the <paramref name="s" /> parameter was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.DateTime.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)">
      <summary>Converts the span representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified culture-specific format information and formatting style, and returns a value that indicates whether the conversion succeeded.</summary>
      <param name="s">A span containing the characters representing the date and time to convert.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <param name="styles">A bitwise combination of enumeration values that defines how to interpret the parsed date in relation to the current time zone or the current date. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
      <param name="result">When this method returns, contains the <see cref="T:System.DateTime" /> value equivalent to the date and time contained in <paramref name="s" />, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" /> if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" />, is an empty string (""), or does not contain a valid string representation of a date and time. This parameter is passed uninitialized.</param>
      <returns>
        <see langword="true" /> if the <paramref name="s" /> parameter was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.DateTime.TryParse(System.String,System.DateTime@)">
      <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent and returns a value that indicates whether the conversion succeeded.</summary>
      <param name="s">A string containing a date and time to convert.</param>
      <param name="result">When this method returns, contains the <see cref="T:System.DateTime" /> value equivalent to the date and time contained in <paramref name="s" />, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" /> if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" />, is an empty string (""), or does not contain a valid string representation of a date and time. This parameter is passed uninitialized.</param>
      <returns>
        <see langword="true" /> if the <paramref name="s" /> parameter was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.DateTime.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)">
      <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified culture-specific format information and formatting style, and returns a value that indicates whether the conversion succeeded.</summary>
      <param name="s">A string containing a date and time to convert.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <param name="styles">A bitwise combination of enumeration values that defines how to interpret the parsed date in relation to the current time zone or the current date. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
      <param name="result">When this method returns, contains the <see cref="T:System.DateTime" /> value equivalent to the date and time contained in <paramref name="s" />, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" /> if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" />, is an empty string (""), or does not contain a valid string representation of a date and time. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> is not a valid <see cref="T:System.Globalization.DateTimeStyles" /> value.  
  
 -or-  
  
 <paramref name="styles" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values (for example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />).</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="provider" /> is a neutral culture and cannot be used in a parsing operation.</exception>
      <returns>
        <see langword="true" /> if the <paramref name="s" /> parameter was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.DateTime.TryParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)">
      <summary>Converts the specified span representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified format, culture-specific format information, and style. The format of the string representation must match the specified format exactly. The method returns a value that indicates whether the conversion succeeded.</summary>
      <param name="s">A span containing the characters representing a date and time to convert.</param>
      <param name="format">The required format of <paramref name="s" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <param name="style">A bitwise combination of one or more enumeration values that indicate the permitted format of <paramref name="s" />.</param>
      <param name="result">When this method returns, contains the <see cref="T:System.DateTime" /> value equivalent to the date and time contained in <paramref name="s" />, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" /> if the conversion failed. The conversion fails if either the <paramref name="s" /> or <paramref name="format" /> parameter is <see langword="null" />, is an empty string, or does not contain a date and time that correspond to the pattern specified in <paramref name="format" />. This parameter is passed uninitialized.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.DateTime.TryParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)">
      <summary>Converts the specified char span of a date and time to its <see cref="T:System.DateTime" /> equivalent and returns a value that indicates whether the conversion succeeded.</summary>
      <param name="s">The span containing the string to parse.</param>
      <param name="formats">An array of allowable formats of <paramref name="s" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <param name="style">A bitwise combination of enumeration values that defines how to interpret the parsed date in relation to the current time zone or the current date. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
      <param name="result">When this method returns, contains the <see cref="T:System.DateTime" /> value equivalent to the date and time contained in <paramref name="s" />, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" /> if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" />, is <see cref="F:System.String.Empty" />, or does not contain a valid string representation of a date and time. This parameter is passed uninitialized.</param>
      <returns>
        <see langword="true" /> if the <paramref name="s" /> parameter was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.DateTime.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)">
      <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified format, culture-specific format information, and style. The format of the string representation must match the specified format exactly. The method returns a value that indicates whether the conversion succeeded.</summary>
      <param name="s">A string containing a date and time to convert.</param>
      <param name="format">The required format of <paramref name="s" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <param name="style">A bitwise combination of one or more enumeration values that indicate the permitted format of <paramref name="s" />.</param>
      <param name="result">When this method returns, contains the <see cref="T:System.DateTime" /> value equivalent to the date and time contained in <paramref name="s" />, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" /> if the conversion failed. The conversion fails if either the <paramref name="s" /> or <paramref name="format" /> parameter is <see langword="null" />, is an empty string, or does not contain a date and time that correspond to the pattern specified in <paramref name="format" />. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> is not a valid <see cref="T:System.Globalization.DateTimeStyles" /> value.  
  
 -or-  
  
 <paramref name="styles" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values (for example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />).</exception>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.DateTime.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)">
      <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified array of formats, culture-specific format information, and style. The format of the string representation must match at least one of the specified formats exactly. The method returns a value that indicates whether the conversion succeeded.</summary>
      <param name="s">A string that contains a date and time to convert.</param>
      <param name="formats">An array of allowable formats of <paramref name="s" />.</param>
      <param name="provider">An object that supplies culture-specific format information about <paramref name="s" />.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
      <param name="result">When this method returns, contains the <see cref="T:System.DateTime" /> value equivalent to the date and time contained in <paramref name="s" />, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" /> if the conversion failed. The conversion fails if <paramref name="s" /> or <paramref name="formats" /> is <see langword="null" />, <paramref name="s" /> or an element of <paramref name="formats" /> is an empty string, or the format of <paramref name="s" /> is not exactly as specified by at least one of the format patterns in <paramref name="formats" />. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> is not a valid <see cref="T:System.Globalization.DateTimeStyles" /> value.  
  
 -or-  
  
 <paramref name="styles" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values (for example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />).</exception>
      <returns>
        <see langword="true" /> if the <paramref name="s" /> parameter was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.DateTime.Date">
      <summary>Gets the date component of this instance.</summary>
      <returns>A new object with the same date as this instance, and the time value set to 12:00:00 midnight (00:00:00).</returns>
    </member>
    <member name="P:System.DateTime.Day">
      <summary>Gets the day of the month represented by this instance.</summary>
      <returns>The day component, expressed as a value between 1 and 31.</returns>
    </member>
    <member name="P:System.DateTime.DayOfWeek">
      <summary>Gets the day of the week represented by this instance.</summary>
      <returns>An enumerated constant that indicates the day of the week of this <see cref="T:System.DateTime" /> value.</returns>
    </member>
    <member name="P:System.DateTime.DayOfYear">
      <summary>Gets the day of the year represented by this instance.</summary>
      <returns>The day of the year, expressed as a value between 1 and 366.</returns>
    </member>
    <member name="P:System.DateTime.Hour">
      <summary>Gets the hour component of the date represented by this instance.</summary>
      <returns>The hour component, expressed as a value between 0 and 23.</returns>
    </member>
    <member name="P:System.DateTime.Kind">
      <summary>Gets a value that indicates whether the time represented by this instance is based on local time, Coordinated Universal Time (UTC), or neither.</summary>
      <returns>One of the enumeration values that indicates what the current time represents. The default is <see cref="F:System.DateTimeKind.Unspecified" />.</returns>
    </member>
    <member name="P:System.DateTime.Millisecond">
      <summary>Gets the milliseconds component of the date represented by this instance.</summary>
      <returns>The milliseconds component, expressed as a value between 0 and 999.</returns>
    </member>
    <member name="P:System.DateTime.Minute">
      <summary>Gets the minute component of the date represented by this instance.</summary>
      <returns>The minute component, expressed as a value between 0 and 59.</returns>
    </member>
    <member name="P:System.DateTime.Month">
      <summary>Gets the month component of the date represented by this instance.</summary>
      <returns>The month component, expressed as a value between 1 and 12.</returns>
    </member>
    <member name="P:System.DateTime.Now">
      <summary>Gets a <see cref="T:System.DateTime" /> object that is set to the current date and time on this computer, expressed as the local time.</summary>
      <returns>An object whose value is the current local date and time.</returns>
    </member>
    <member name="P:System.DateTime.Second">
      <summary>Gets the seconds component of the date represented by this instance.</summary>
      <returns>The seconds component, expressed as a value between 0 and 59.</returns>
    </member>
    <member name="P:System.DateTime.Ticks">
      <summary>Gets the number of ticks that represent the date and time of this instance.</summary>
      <returns>The number of ticks that represent the date and time of this instance. The value is between <see langword="DateTime.MinValue.Ticks" /> and <see langword="DateTime.MaxValue.Ticks" />.</returns>
    </member>
    <member name="P:System.DateTime.TimeOfDay">
      <summary>Gets the time of day for this instance.</summary>
      <returns>A time interval that represents the fraction of the day that has elapsed since midnight.</returns>
    </member>
    <member name="P:System.DateTime.Today">
      <summary>Gets the current date.</summary>
      <returns>An object that is set to today's date, with the time component set to 00:00:00.</returns>
    </member>
    <member name="P:System.DateTime.UtcNow">
      <summary>Gets a <see cref="T:System.DateTime" /> object that is set to the current date and time on this computer, expressed as the Coordinated Universal Time (UTC).</summary>
      <returns>An object whose value is the current UTC date and time.</returns>
    </member>
    <member name="P:System.DateTime.Year">
      <summary>Gets the year component of the date represented by this instance.</summary>
      <returns>The year, between 1 and 9999.</returns>
    </member>
    <member name="T:System.DateTimeKind">
      <summary>Specifies whether a <see cref="T:System.DateTime" /> object represents a local time, a Coordinated Universal Time (UTC), or is not specified as either local time or UTC.</summary>
    </member>
    <member name="F:System.DateTimeKind.Local">
      <summary>The time represented is local time.</summary>
    </member>
    <member name="F:System.DateTimeKind.Unspecified">
      <summary>The time represented is not specified as either local time or Coordinated Universal Time (UTC).</summary>
    </member>
    <member name="F:System.DateTimeKind.Utc">
      <summary>The time represented is UTC.</summary>
    </member>
    <member name="T:System.DateTimeOffset">
      <summary>Represents a point in time, typically expressed as a date and time of day, relative to Coordinated Universal Time (UTC).</summary>
    </member>
    <member name="F:System.DateTimeOffset.MaxValue">
      <summary>Represents the greatest possible value of <see cref="T:System.DateTimeOffset" />. This field is read-only.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="F:System.DateTime.MaxValue" /> is outside the range of the current or specified culture's default calendar.</exception>
    </member>
    <member name="F:System.DateTimeOffset.MinValue">
      <summary>Represents the earliest possible <see cref="T:System.DateTimeOffset" /> value. This field is read-only.</summary>
    </member>
    <member name="F:System.DateTimeOffset.UnixEpoch">
      <summary>The value of this constant is equivalent to 00:00:00.0000000 UTC, January 1, 1970, in the Gregorian calendar. <see cref="F:System.DateTimeOffset.UnixEpoch" /> defines the point in time when Unix time is equal to 0.</summary>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.DateTime)">
      <summary>Initializes a new instance of the <see cref="T:System.DateTimeOffset" /> structure using the specified <see cref="T:System.DateTime" /> value.</summary>
      <param name="dateTime">A date and time.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The Coordinated Universal Time (UTC) date and time that results from applying the offset is earlier than <see cref="F:System.DateTimeOffset.MinValue" />.  
  
 -or-  
  
 The UTC date and time that results from applying the offset is later than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.DateTime,System.TimeSpan)">
      <summary>Initializes a new instance of the <see cref="T:System.DateTimeOffset" /> structure using the specified <see cref="T:System.DateTime" /> value and offset.</summary>
      <param name="dateTime">A date and time.</param>
      <param name="offset">The time's offset from Coordinated Universal Time (UTC).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTime.Kind" /> equals <see cref="F:System.DateTimeKind.Utc" /> and <paramref name="offset" /> does not equal zero.  
  
 -or-  
  
 <paramref name="dateTime.Kind" /> equals <see cref="F:System.DateTimeKind.Local" /> and <paramref name="offset" /> does not equal the offset of the system's local time zone.  
  
 -or-  
  
 <paramref name="offset" /> is not specified in whole minutes.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is less than -14 hours or greater than 14 hours.  
  
 -or-  
  
 <see cref="P:System.DateTimeOffset.UtcDateTime" /> is less than <see cref="F:System.DateTimeOffset.MinValue" /> or greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar,System.TimeSpan)">
      <summary>Initializes a new instance of the <see cref="T:System.DateTimeOffset" /> structure using the specified year, month, day, hour, minute, second, millisecond, and offset of a specified calendar.</summary>
      <param name="year">The year.</param>
      <param name="month">The month (1 through 12).</param>
      <param name="day">The day (1 through the number of days in <paramref name="month" />).</param>
      <param name="hour">The hours (0 through 23).</param>
      <param name="minute">The minutes (0 through 59).</param>
      <param name="second">The seconds (0 through 59).</param>
      <param name="millisecond">The milliseconds (0 through 999).</param>
      <param name="calendar">The calendar that is used to interpret <paramref name="year" />, <paramref name="month" />, and <paramref name="day" />.</param>
      <param name="offset">The time's offset from Coordinated Universal Time (UTC).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> does not represent whole minutes.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="calendar" /> cannot be <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is less than the <paramref name="calendar" /> parameter's <see langword="MinSupportedDateTime.Year" /> or greater than <see langword="MaxSupportedDateTime.Year" />.  
  
 -or-  
  
 <paramref name="month" /> is either less than or greater than the number of months in <paramref name="year" /> in the <paramref name="calendar" />.  
  
 -or-  
  
 <paramref name="day" /> is less than one or greater than the number of days in <paramref name="month" />.  
  
 -or-  
  
 <paramref name="hour" /> is less than zero or greater than 23.  
  
 -or-  
  
 <paramref name="minute" /> is less than 0 or greater than 59.  
  
 -or-  
  
 <paramref name="second" /> is less than 0 or greater than 59.  
  
 -or-  
  
 <paramref name="millisecond" /> is less than 0 or greater than 999.  
  
 -or-  
  
 <paramref name="offset" /> is less than -14 hours or greater than 14 hours.  
  
 -or-  
  
 The <paramref name="year" />, <paramref name="month" />, and <paramref name="day" /> parameters cannot be represented as a date and time value.  
  
 -or-  
  
 The <see cref="P:System.DateTimeOffset.UtcDateTime" /> property is earlier than <see cref="F:System.DateTimeOffset.MinValue" /> or later than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)">
      <summary>Initializes a new instance of the <see cref="T:System.DateTimeOffset" /> structure using the specified year, month, day, hour, minute, second, millisecond, and offset.</summary>
      <param name="year">The year (1 through 9999).</param>
      <param name="month">The month (1 through 12).</param>
      <param name="day">The day (1 through the number of days in <paramref name="month" />).</param>
      <param name="hour">The hours (0 through 23).</param>
      <param name="minute">The minutes (0 through 59).</param>
      <param name="second">The seconds (0 through 59).</param>
      <param name="millisecond">The milliseconds (0 through 999).</param>
      <param name="offset">The time's offset from Coordinated Universal Time (UTC).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> does not represent whole minutes.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is less than one or greater than 9999.  
  
 -or-  
  
 <paramref name="month" /> is less than one or greater than 12.  
  
 -or-  
  
 <paramref name="day" /> is less than one or greater than the number of days in <paramref name="month" />.  
  
 -or-  
  
 <paramref name="hour" /> is less than zero or greater than 23.  
  
 -or-  
  
 <paramref name="minute" /> is less than 0 or greater than 59.  
  
 -or-  
  
 <paramref name="second" /> is less than 0 or greater than 59.  
  
 -or-  
  
 <paramref name="millisecond" /> is less than 0 or greater than 999.  
  
 -or-  
  
 <paramref name="offset" /> is less than -14 or greater than 14.  
  
 -or-  
  
 The <see cref="P:System.DateTimeOffset.UtcDateTime" /> property is earlier than <see cref="F:System.DateTimeOffset.MinValue" /> or later than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)">
      <summary>Initializes a new instance of the <see cref="T:System.DateTimeOffset" /> structure using the specified year, month, day, hour, minute, second, and offset.</summary>
      <param name="year">The year (1 through 9999).</param>
      <param name="month">The month (1 through 12).</param>
      <param name="day">The day (1 through the number of days in <paramref name="month" />).</param>
      <param name="hour">The hours (0 through 23).</param>
      <param name="minute">The minutes (0 through 59).</param>
      <param name="second">The seconds (0 through 59).</param>
      <param name="offset">The time's offset from Coordinated Universal Time (UTC).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> does not represent whole minutes.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is less than one or greater than 9999.  
  
 -or-  
  
 <paramref name="month" /> is less than one or greater than 12.  
  
 -or-  
  
 <paramref name="day" /> is less than one or greater than the number of days in <paramref name="month" />.  
  
 -or-  
  
 <paramref name="hour" /> is less than zero or greater than 23.  
  
 -or-  
  
 <paramref name="minute" /> is less than 0 or greater than 59.  
  
 -or-  
  
 <paramref name="second" /> is less than 0 or greater than 59.  
  
 -or-  
  
 <paramref name="offset" /> is less than -14 hours or greater than 14 hours.  
  
 -or-  
  
 The <see cref="P:System.DateTimeOffset.UtcDateTime" /> property is earlier than <see cref="F:System.DateTimeOffset.MinValue" /> or later than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.Int64,System.TimeSpan)">
      <summary>Initializes a new instance of the <see cref="T:System.DateTimeOffset" /> structure using the specified number of ticks and offset.</summary>
      <param name="ticks">A date and time expressed as the number of 100-nanosecond intervals that have elapsed since 12:00:00 midnight on January 1, 0001.</param>
      <param name="offset">The time's offset from Coordinated Universal Time (UTC).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> is not specified in whole minutes.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <see cref="P:System.DateTimeOffset.UtcDateTime" /> property is earlier than <see cref="F:System.DateTimeOffset.MinValue" /> or later than <see cref="F:System.DateTimeOffset.MaxValue" />.  
  
 -or-  
  
 <paramref name="ticks" /> is less than <see langword="DateTimeOffset.MinValue.Ticks" /> or greater than <see langword="DateTimeOffset.MaxValue.Ticks" />.  
  
 -or-  
  
 <paramref name="Offset" /> s less than -14 hours or greater than 14 hours.</exception>
    </member>
    <member name="M:System.DateTimeOffset.Add(System.TimeSpan)">
      <summary>Returns a new <see cref="T:System.DateTimeOffset" /> object that adds a specified time interval to the value of this instance.</summary>
      <param name="timeSpan">A <see cref="T:System.TimeSpan" /> object that represents a positive or a negative time interval.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.  
  
 -or-  
  
 The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      <returns>An object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the time interval represented by <paramref name="timeSpan" />.</returns>
    </member>
    <member name="M:System.DateTimeOffset.AddDays(System.Double)">
      <summary>Returns a new <see cref="T:System.DateTimeOffset" /> object that adds a specified number of whole and fractional days to the value of this instance.</summary>
      <param name="days">A number of whole and fractional days. The number can be negative or positive.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.  
  
 -or-  
  
 The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      <returns>An object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of days represented by <paramref name="days" />.</returns>
    </member>
    <member name="M:System.DateTimeOffset.AddHours(System.Double)">
      <summary>Returns a new <see cref="T:System.DateTimeOffset" /> object that adds a specified number of whole and fractional hours to the value of this instance.</summary>
      <param name="hours">A number of whole and fractional hours. The number can be negative or positive.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.  
  
 -or-  
  
 The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      <returns>An object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of hours represented by <paramref name="hours" />.</returns>
    </member>
    <member name="M:System.DateTimeOffset.AddMilliseconds(System.Double)">
      <summary>Returns a new <see cref="T:System.DateTimeOffset" /> object that adds a specified number of milliseconds to the value of this instance.</summary>
      <param name="milliseconds">A number of whole and fractional milliseconds. The number can be negative or positive.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.  
  
 -or-  
  
 The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      <returns>An object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of whole milliseconds represented by <paramref name="milliseconds" />.</returns>
    </member>
    <member name="M:System.DateTimeOffset.AddMinutes(System.Double)">
      <summary>Returns a new <see cref="T:System.DateTimeOffset" /> object that adds a specified number of whole and fractional minutes to the value of this instance.</summary>
      <param name="minutes">A number of whole and fractional minutes. The number can be negative or positive.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.  
  
 -or-  
  
 The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      <returns>An object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of minutes represented by <paramref name="minutes" />.</returns>
    </member>
    <member name="M:System.DateTimeOffset.AddMonths(System.Int32)">
      <summary>Returns a new <see cref="T:System.DateTimeOffset" /> object that adds a specified number of months to the value of this instance.</summary>
      <param name="months">A number of whole months. The number can be negative or positive.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.  
  
 -or-  
  
 The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      <returns>An object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of months represented by <paramref name="months" />.</returns>
    </member>
    <member name="M:System.DateTimeOffset.AddSeconds(System.Double)">
      <summary>Returns a new <see cref="T:System.DateTimeOffset" /> object that adds a specified number of whole and fractional seconds to the value of this instance.</summary>
      <param name="seconds">A number of whole and fractional seconds. The number can be negative or positive.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.  
  
 -or-  
  
 The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      <returns>An object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of seconds represented by <paramref name="seconds" />.</returns>
    </member>
    <member name="M:System.DateTimeOffset.AddTicks(System.Int64)">
      <summary>Returns a new <see cref="T:System.DateTimeOffset" /> object that adds a specified number of ticks to the value of this instance.</summary>
      <param name="ticks">A number of 100-nanosecond ticks. The number can be negative or positive.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.  
  
 -or-  
  
 The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      <returns>An object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of ticks represented by <paramref name="ticks" />.</returns>
    </member>
    <member name="M:System.DateTimeOffset.AddYears(System.Int32)">
      <summary>Returns a new <see cref="T:System.DateTimeOffset" /> object that adds a specified number of years to the value of this instance.</summary>
      <param name="years">A number of years. The number can be negative or positive.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.  
  
 -or-  
  
 The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      <returns>An object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of years represented by <paramref name="years" />.</returns>
    </member>
    <member name="M:System.DateTimeOffset.Compare(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Compares two <see cref="T:System.DateTimeOffset" /> objects and indicates whether the first is earlier than the second, equal to the second, or later than the second.</summary>
      <param name="first">The first object to compare.</param>
      <param name="second">The second object to compare.</param>
      <returns>A signed integer that indicates whether the value of the <paramref name="first" /> parameter is earlier than, later than, or the same time as the value of the <paramref name="second" /> parameter, as the following table shows.  
  
 <list type="table"><listheader><term> Return value</term><description> Meaning</description></listheader><item><term> Less than zero</term><description><paramref name="first" /> is earlier than <paramref name="second" />.</description></item><item><term> Zero</term><description><paramref name="first" /> is equal to <paramref name="second" />.</description></item><item><term> Greater than zero</term><description><paramref name="first" /> is later than <paramref name="second" />.</description></item></list></returns>
    </member>
    <member name="M:System.DateTimeOffset.CompareTo(System.DateTimeOffset)">
      <summary>Compares the current <see cref="T:System.DateTimeOffset" /> object to a specified <see cref="T:System.DateTimeOffset" /> object and indicates whether the current object is earlier than, the same as, or later than the second <see cref="T:System.DateTimeOffset" /> object.</summary>
      <param name="other">An object to compare with the current <see cref="T:System.DateTimeOffset" /> object.</param>
      <returns>A signed integer that indicates the relationship between the current <see cref="T:System.DateTimeOffset" /> object and <paramref name="other" />, as the following table shows.  
  
 <list type="table"><listheader><term> Return Value</term><description> Description</description></listheader><item><term> Less than zero</term><description> The current <see cref="T:System.DateTimeOffset" /> object is earlier than <paramref name="other" />.</description></item><item><term> Zero</term><description> The current <see cref="T:System.DateTimeOffset" /> object is the same as <paramref name="other" />.</description></item><item><term> Greater than zero.</term><description> The current <see cref="T:System.DateTimeOffset" /> object is later than <paramref name="other" />.</description></item></list></returns>
    </member>
    <member name="M:System.DateTimeOffset.Equals(System.DateTimeOffset)">
      <summary>Determines whether the current <see cref="T:System.DateTimeOffset" /> object represents the same point in time as a specified <see cref="T:System.DateTimeOffset" /> object.</summary>
      <param name="other">An object to compare to the current <see cref="T:System.DateTimeOffset" /> object.</param>
      <returns>
        <see langword="true" /> if both <see cref="T:System.DateTimeOffset" /> objects have the same <see cref="P:System.DateTimeOffset.UtcDateTime" /> value; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.DateTimeOffset.Equals(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Determines whether two specified <see cref="T:System.DateTimeOffset" /> objects represent the same point in time.</summary>
      <param name="first">The first object to compare.</param>
      <param name="second">The second object to compare.</param>
      <returns>
        <see langword="true" /> if the two <see cref="T:System.DateTimeOffset" /> objects have the same <see cref="P:System.DateTimeOffset.UtcDateTime" /> value; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.DateTimeOffset.Equals(System.Object)">
      <summary>Determines whether a <see cref="T:System.DateTimeOffset" /> object represents the same point in time as a specified object.</summary>
      <param name="obj">The object to compare to the current <see cref="T:System.DateTimeOffset" /> object.</param>
      <returns>
        <see langword="true" /> if the <paramref name="obj" /> parameter is a <see cref="T:System.DateTimeOffset" /> object and represents the same point in time as the current <see cref="T:System.DateTimeOffset" /> object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)">
      <summary>Determines whether the current <see cref="T:System.DateTimeOffset" /> object represents the same time and has the same offset as a specified <see cref="T:System.DateTimeOffset" /> object.</summary>
      <param name="other">The object to compare to the current <see cref="T:System.DateTimeOffset" /> object.</param>
      <returns>
        <see langword="true" /> if the current <see cref="T:System.DateTimeOffset" /> object and <paramref name="other" /> have the same date and time value and the same <see cref="P:System.DateTimeOffset.Offset" /> value; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.DateTimeOffset.FromFileTime(System.Int64)">
      <summary>Converts the specified Windows file time to an equivalent local time.</summary>
      <param name="fileTime">A Windows file time, expressed in ticks.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="filetime" /> is less than zero.  
  
 -or-  
  
 <paramref name="filetime" /> is greater than <see langword="DateTimeOffset.MaxValue.Ticks" />.</exception>
      <returns>An object that represents the date and time of <paramref name="fileTime" /> with the offset set to the local time offset.</returns>
    </member>
    <member name="M:System.DateTimeOffset.FromUnixTimeMilliseconds(System.Int64)">
      <summary>Converts a Unix time expressed as the number of milliseconds that have elapsed since 1970-01-01T00:00:00Z to a <see cref="T:System.DateTimeOffset" /> value.</summary>
      <param name="milliseconds">A Unix time, expressed as the number of milliseconds that have elapsed since 1970-01-01T00:00:00Z (January 1, 1970, at 12:00 AM UTC). For Unix times before this date, its value is negative.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="milliseconds" /> is less than  -62,135,596,800,000.  
  
 -or-  
  
 <paramref name="milliseconds" /> is greater than 253,402,300,799,999.</exception>
      <returns>A date and time value that represents the same moment in time as the Unix time.</returns>
    </member>
    <member name="M:System.DateTimeOffset.FromUnixTimeSeconds(System.Int64)">
      <summary>Converts a Unix time expressed as the number of seconds that have elapsed since 1970-01-01T00:00:00Z to a <see cref="T:System.DateTimeOffset" /> value.</summary>
      <param name="seconds">A Unix time, expressed as the number of seconds that have elapsed since 1970-01-01T00:00:00Z (January 1, 1970, at 12:00 AM UTC). For Unix times before this date, its value is negative.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="seconds" /> is less than  -62,135,596,800.  
  
 -or-  
  
 <paramref name="seconds" /> is greater than 253,402,300,799.</exception>
      <returns>A date and time value that represents the same moment in time as the Unix time.</returns>
    </member>
    <member name="M:System.DateTimeOffset.GetHashCode">
      <summary>Returns the hash code for the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.DateTimeOffset.op_Addition(System.DateTimeOffset,System.TimeSpan)">
      <summary>Adds a specified time interval to a <see cref="T:System.DateTimeOffset" /> object that has a specified date and time, and yields a <see cref="T:System.DateTimeOffset" /> object that has new a date and time.</summary>
      <param name="dateTimeOffset">The object to add the time interval to.</param>
      <param name="timeSpan">The time interval to add.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.  
  
 -or-  
  
 The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      <returns>An object whose value is the sum of the values of <paramref name="dateTimeTz" /> and <paramref name="timeSpan" />.</returns>
    </member>
    <member name="M:System.DateTimeOffset.op_Equality(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Determines whether two specified <see cref="T:System.DateTimeOffset" /> objects represent the same point in time.</summary>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
      <returns>
        <see langword="true" /> if both <see cref="T:System.DateTimeOffset" /> objects have the same <see cref="P:System.DateTimeOffset.UtcDateTime" /> value; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.DateTimeOffset.op_GreaterThan(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Determines whether one specified <see cref="T:System.DateTimeOffset" /> object is greater than (or later than) a second specified <see cref="T:System.DateTimeOffset" /> object.</summary>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
      <returns>
        <see langword="true" /> if the <see cref="P:System.DateTimeOffset.UtcDateTime" /> value of <paramref name="left" /> is later than the <see cref="P:System.DateTimeOffset.UtcDateTime" /> value of <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.DateTimeOffset.op_GreaterThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Determines whether one specified <see cref="T:System.DateTimeOffset" /> object is greater than or equal to a second specified <see cref="T:System.DateTimeOffset" /> object.</summary>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
      <returns>
        <see langword="true" /> if the <see cref="P:System.DateTimeOffset.UtcDateTime" /> value of <paramref name="left" /> is the same as or later than the <see cref="P:System.DateTimeOffset.UtcDateTime" /> value of <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.DateTimeOffset.op_Implicit(System.DateTime)~System.DateTimeOffset">
      <summary>Defines an implicit conversion of a <see cref="T:System.DateTime" /> object to a <see cref="T:System.DateTimeOffset" /> object.</summary>
      <param name="dateTime">The object to convert.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The Coordinated Universal Time (UTC) date and time that results from applying the offset is earlier than <see cref="F:System.DateTimeOffset.MinValue" />.  
  
 -or-  
  
 The UTC date and time that results from applying the offset is later than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      <returns>The converted object.</returns>
    </member>
    <member name="M:System.DateTimeOffset.op_Inequality(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Determines whether two specified <see cref="T:System.DateTimeOffset" /> objects refer to different points in time.</summary>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> do not have the same <see cref="P:System.DateTimeOffset.UtcDateTime" /> value; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.DateTimeOffset.op_LessThan(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Determines whether one specified <see cref="T:System.DateTimeOffset" /> object is less than a second specified <see cref="T:System.DateTimeOffset" /> object.</summary>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
      <returns>
        <see langword="true" /> if the <see cref="P:System.DateTimeOffset.UtcDateTime" /> value of <paramref name="left" /> is earlier than the <see cref="P:System.DateTimeOffset.UtcDateTime" /> value of <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.DateTimeOffset.op_LessThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Determines whether one specified <see cref="T:System.DateTimeOffset" /> object is less than a second specified <see cref="T:System.DateTimeOffset" /> object.</summary>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
      <returns>
        <see langword="true" /> if the <see cref="P:System.DateTimeOffset.UtcDateTime" /> value of <paramref name="left" /> is earlier than the <see cref="P:System.DateTimeOffset.UtcDateTime" /> value of <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Subtracts one <see cref="T:System.DateTimeOffset" /> object from another and yields a time interval.</summary>
      <param name="left">The minuend.</param>
      <param name="right">The subtrahend.</param>
      <returns>An object that represents the difference between <paramref name="left" /> and <paramref name="right" />.</returns>
    </member>
    <member name="M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.TimeSpan)">
      <summary>Subtracts a specified time interval from a specified date and time, and yields a new date and time.</summary>
      <param name="dateTimeOffset">The date and time object to subtract from.</param>
      <param name="timeSpan">The time interval to subtract.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" /> or greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      <returns>An object that is equal to the value of <paramref name="dateTimeOffset" /> minus <paramref name="timeSpan" />.</returns>
    </member>
    <member name="M:System.DateTimeOffset.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>Converts the specified span representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified culture-specific format information and formatting style.</summary>
      <param name="input">A span containing the characters that represent a date and time to convert.</param>
      <param name="formatProvider">An object that provides culture-specific format information about <paramref name="input" />.</param>
      <param name="styles">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="input" />. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
      <returns>An object that is equivalent to the date and time that is contained in <paramref name="input" /> as specified by <paramref name="formatProvider" /> and <paramref name="styles" />.</returns>
    </member>
    <member name="M:System.DateTimeOffset.Parse(System.String)">
      <summary>Converts the specified string representation of a date, time, and offset to its <see cref="T:System.DateTimeOffset" /> equivalent.</summary>
      <param name="input">A string that contains a date and time to convert.</param>
      <exception cref="T:System.ArgumentException">The offset is greater than 14 hours or less than -14 hours.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> does not contain a valid string representation of a date and time.  
  
 -or-  
  
 <paramref name="input" /> contains the string representation of an offset value without a date or time.</exception>
      <returns>An object that is equivalent to the date and time that is contained in <paramref name="input" />.</returns>
    </member>
    <member name="M:System.DateTimeOffset.Parse(System.String,System.IFormatProvider)">
      <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified culture-specific format information.</summary>
      <param name="input">A string that contains a date and time to convert.</param>
      <param name="formatProvider">An object that provides culture-specific format information about <paramref name="input" />.</param>
      <exception cref="T:System.ArgumentException">The offset is greater than 14 hours or less than -14 hours.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> does not contain a valid string representation of a date and time.  
  
 -or-  
  
 <paramref name="input" /> contains the string representation of an offset value without a date or time.</exception>
      <returns>An object that is equivalent to the date and time that is contained in <paramref name="input" />, as specified by <paramref name="formatProvider" />.</returns>
    </member>
    <member name="M:System.DateTimeOffset.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified culture-specific format information and formatting style.</summary>
      <param name="input">A string that contains a date and time to convert.</param>
      <param name="formatProvider">An object that provides culture-specific format information about <paramref name="input" />.</param>
      <param name="styles">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="input" />. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
      <exception cref="T:System.ArgumentException">The offset is greater than 14 hours or less than -14 hours.  
  
 -or-  
  
 <paramref name="styles" /> is not a valid <see cref="T:System.Globalization.DateTimeStyles" /> value.  
  
 -or-  
  
 <paramref name="styles" /> includes an unsupported <see cref="T:System.Globalization.DateTimeStyles" /> value.  
  
 -or-  
  
 <paramref name="styles" /> includes <see cref="T:System.Globalization.DateTimeStyles" /> values that cannot be used together.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> does not contain a valid string representation of a date and time.  
  
 -or-  
  
 <paramref name="input" /> contains the string representation of an offset value without a date or time.</exception>
      <returns>An object that is equivalent to the date and time that is contained in <paramref name="input" /> as specified by <paramref name="formatProvider" /> and <paramref name="styles" />.</returns>
    </member>
    <member name="M:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>Converts a character span that represents a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified format, culture-specific format information, and style. The format of the date and time representation must match the specified format exactly.</summary>
      <param name="input">A character span that represents a date and time.</param>
      <param name="format">A character span that contains a format specifier that defines the expected format of <paramref name="input" />.</param>
      <param name="formatProvider">An object that provides culture-specific formatting information about <paramref name="input" />.</param>
      <param name="styles">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="input" />.</param>
      <exception cref="T:System.ArgumentException">The offset is greater than 14 hours or less than -14 hours.  
-or-  
The <paramref name="styles" /> parameter includes an unsupported value.  
-or-  
The <paramref name="styles" /> parameter contains <see cref="T:System.Globalization.DateTimeStyles" /> values that cannot be used together.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> is an empty character span.  
 -or-  
 <paramref name="input" /> does not contain a valid string representation of a date and time.  
 -or-  
 <paramref name="format" /> is an empty character span.  
 -or-  
 The hour component and the AM/PM designator in <paramref name="input" /> do not agree.</exception>
      <returns>An object that is equivalent to the date and time that is contained in the <paramref name="input" /> parameter, as specified by the <paramref name="format" />, <paramref name="formatProvider" />, and <paramref name="styles" /> parameters.</returns>
    </member>
    <member name="M:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>Converts a character span that contains the string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified formats, culture-specific format information, and style. The format of the date and time representation must match one of the specified formats exactly.</summary>
      <param name="input">A character span that contains a date and time to convert.</param>
      <param name="formats">An array of format specifiers that define the expected formats of <paramref name="input" />.</param>
      <param name="formatProvider">An object that supplies culture-specific formatting information about <paramref name="input" />.</param>
      <param name="styles">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="input" />.</param>
      <exception cref="T:System.ArgumentException">The offset is greater than 14 hours or less than -14 hours.  
-or-  
<paramref name="styles" /> includes an unsupported value.  
-or-  
The <paramref name="styles" /> parameter contains <see cref="T:System.Globalization.DateTimeStyles" /> values that cannot be used together.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> is an empty character span.  
-or-  
<paramref name="input" /> does not contain a valid string representation of a date and time.  
-or-  
No element of <paramref name="formats" /> contains a valid format specifier.  
-or-  
The hour component and the AM/PM designator in <paramref name="input" /> do not agree.</exception>
      <returns>An object that is equivalent to the date and time that is contained in the <paramref name="input" /> parameter, as specified by the <paramref name="formats" />, <paramref name="formatProvider" />, and <paramref name="styles" /> parameters.</returns>
    </member>
    <member name="M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider)">
      <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified format and culture-specific format information. The format of the string representation must match the specified format exactly.</summary>
      <param name="input">A string that contains a date and time to convert.</param>
      <param name="format">A format specifier that defines the expected format of <paramref name="input" />.</param>
      <param name="formatProvider">An object that supplies culture-specific formatting information about <paramref name="input" />.</param>
      <exception cref="T:System.ArgumentException">The offset is greater than 14 hours or less than -14 hours.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="format" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> is an empty string ("").  
  
 -or-  
  
 <paramref name="input" /> does not contain a valid string representation of a date and time.  
  
 -or-  
  
 <paramref name="format" /> is an empty string.  
  
 -or-  
  
 The hour component and the AM/PM designator in <paramref name="input" /> do not agree.</exception>
      <returns>An object that is equivalent to the date and time that is contained in <paramref name="input" /> as specified by <paramref name="format" /> and <paramref name="formatProvider" />.</returns>
    </member>
    <member name="M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified format, culture-specific format information, and style. The format of the string representation must match the specified format exactly.</summary>
      <param name="input">A string that contains a date and time to convert.</param>
      <param name="format">A format specifier that defines the expected format of <paramref name="input" />.</param>
      <param name="formatProvider">An object that supplies culture-specific formatting information about <paramref name="input" />.</param>
      <param name="styles">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="input" />.</param>
      <exception cref="T:System.ArgumentException">The offset is greater than 14 hours or less than -14 hours.  
  
 -or-  
  
 The <paramref name="styles" /> parameter includes an unsupported value.  
  
 -or-  
  
 The <paramref name="styles" /> parameter contains <see cref="T:System.Globalization.DateTimeStyles" /> values that cannot be used together.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="format" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> is an empty string ("").  
  
 -or-  
  
 <paramref name="input" /> does not contain a valid string representation of a date and time.  
  
 -or-  
  
 <paramref name="format" /> is an empty string.  
  
 -or-  
  
 The hour component and the AM/PM designator in <paramref name="input" /> do not agree.</exception>
      <returns>An object that is equivalent to the date and time that is contained in the <paramref name="input" /> parameter, as specified by the <paramref name="format" />, <paramref name="formatProvider" />, and <paramref name="styles" /> parameters.</returns>
    </member>
    <member name="M:System.DateTimeOffset.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified formats, culture-specific format information, and style. The format of the string representation must match one of the specified formats exactly.</summary>
      <param name="input">A string that contains a date and time to convert.</param>
      <param name="formats">An array of format specifiers that define the expected formats of <paramref name="input" />.</param>
      <param name="formatProvider">An object that supplies culture-specific formatting information about <paramref name="input" />.</param>
      <param name="styles">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="input" />.</param>
      <exception cref="T:System.ArgumentException">The offset is greater than 14 hours or less than -14 hours.  
  
 -or-  
  
 <paramref name="styles" /> includes an unsupported value.  
  
 -or-  
  
 The <paramref name="styles" /> parameter contains <see cref="T:System.Globalization.DateTimeStyles" /> values that cannot be used together.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> is an empty string ("").  
  
 -or-  
  
 <paramref name="input" /> does not contain a valid string representation of a date and time.  
  
 -or-  
  
 No element of <paramref name="formats" /> contains a valid format specifier.  
  
 -or-  
  
 The hour component and the AM/PM designator in <paramref name="input" /> do not agree.</exception>
      <returns>An object that is equivalent to the date and time that is contained in the <paramref name="input" /> parameter, as specified by the <paramref name="formats" />, <paramref name="formatProvider" />, and <paramref name="styles" /> parameters.</returns>
    </member>
    <member name="M:System.DateTimeOffset.Subtract(System.DateTimeOffset)">
      <summary>Subtracts a <see cref="T:System.DateTimeOffset" /> value that represents a specific date and time from the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <param name="value">An object that represents the value to subtract.</param>
      <returns>An object that specifies the interval between the two <see cref="T:System.DateTimeOffset" /> objects.</returns>
    </member>
    <member name="M:System.DateTimeOffset.Subtract(System.TimeSpan)">
      <summary>Subtracts a specified time interval from the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <param name="value">The time interval to subtract.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.  
  
 -or-  
  
 The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      <returns>An object that is equal to the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object, minus the time interval represented by <paramref name="value" />.</returns>
    </member>
    <member name="M:System.DateTimeOffset.System#IComparable#CompareTo(System.Object)">
      <summary>Compares the value of the current <see cref="T:System.DateTimeOffset" /> object with another object of the same type.</summary>
      <param name="obj">The object to compare with the current <see cref="T:System.DateTimeOffset" /> object.</param>
      <returns>A 32-bit signed integer that indicates whether the current <see cref="T:System.DateTimeOffset" /> object is less than, equal to, or greater than <paramref name="obj" />. The return values of the method are interpreted as follows:  
  
 <list type="table"><listheader><term> Return Value</term><description> Description</description></listheader><item><term> Less than zero</term><description> The current <see cref="T:System.DateTimeOffset" /> object is less than (earlier than) <paramref name="obj" />.</description></item><item><term> Zero</term><description> The current <see cref="T:System.DateTimeOffset" /> object is equal to (the same point in time as) <paramref name="obj" />.</description></item><item><term> Greater than zero</term><description> The current <see cref="T:System.DateTimeOffset" /> object is greater than (later than) <paramref name="obj" />.</description></item></list></returns>
    </member>
    <member name="M:System.DateTimeOffset.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary>Runs when the deserialization of an object has been completed.</summary>
      <param name="sender">The object that initiated the callback. The functionality for this parameter is not currently implemented.</param>
    </member>
    <member name="M:System.DateTimeOffset.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the data required to serialize the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <param name="info">The object to populate with data.</param>
      <param name="context">The destination for this serialization (see <see cref="T:System.Runtime.Serialization.StreamingContext" />).</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is <see langword="null" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.ToFileTime">
      <summary>Converts the value of the current <see cref="T:System.DateTimeOffset" /> object to a Windows file time.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting file time would represent a date and time before midnight on January 1, 1601 C.E. Coordinated Universal Time (UTC).</exception>
      <returns>The value of the current <see cref="T:System.DateTimeOffset" /> object, expressed as a Windows file time.</returns>
    </member>
    <member name="M:System.DateTimeOffset.ToLocalTime">
      <summary>Converts the current <see cref="T:System.DateTimeOffset" /> object to a <see cref="T:System.DateTimeOffset" /> object that represents the local time.</summary>
      <returns>An object that represents the date and time of the current <see cref="T:System.DateTimeOffset" /> object converted to local time.</returns>
    </member>
    <member name="M:System.DateTimeOffset.ToOffset(System.TimeSpan)">
      <summary>Converts the value of the current <see cref="T:System.DateTimeOffset" /> object to the date and time specified by an offset value.</summary>
      <param name="offset">The offset to convert the <see cref="T:System.DateTimeOffset" /> value to.</param>
      <exception cref="T:System.ArgumentException">The resulting <see cref="T:System.DateTimeOffset" /> object has a <see cref="P:System.DateTimeOffset.DateTime" /> value earlier than <see cref="F:System.DateTimeOffset.MinValue" />.  
  
 -or-  
  
 The resulting <see cref="T:System.DateTimeOffset" /> object has a <see cref="P:System.DateTimeOffset.DateTime" /> value later than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is less than -14 hours.  
  
 -or-  
  
 <paramref name="offset" /> is greater than 14 hours.</exception>
      <returns>An object that is equal to the original <see cref="T:System.DateTimeOffset" /> object (that is, their <see cref="M:System.DateTimeOffset.ToUniversalTime" /> methods return identical points in time) but whose <see cref="P:System.DateTimeOffset.Offset" /> property is set to <paramref name="offset" />.</returns>
    </member>
    <member name="M:System.DateTimeOffset.ToString">
      <summary>Converts the value of the current <see cref="T:System.DateTimeOffset" /> object to its equivalent string representation.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">The date and time is outside the range of dates supported by the calendar used by the current culture.</exception>
      <returns>A string representation of a <see cref="T:System.DateTimeOffset" /> object that includes the offset appended at the end of the string.</returns>
    </member>
    <member name="M:System.DateTimeOffset.ToString(System.IFormatProvider)">
      <summary>Converts the value of the current <see cref="T:System.DateTimeOffset" /> object to its equivalent string representation using the specified culture-specific formatting information.</summary>
      <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The date and time is outside the range of dates supported by the calendar used by <paramref name="formatProvider" />.</exception>
      <returns>A string representation of the value of the current <see cref="T:System.DateTimeOffset" /> object, as specified by <paramref name="formatProvider" />.</returns>
    </member>
    <member name="M:System.DateTimeOffset.ToString(System.String)">
      <summary>Converts the value of the current <see cref="T:System.DateTimeOffset" /> object to its equivalent string representation using the specified format.</summary>
      <param name="format">A format string.</param>
      <exception cref="T:System.FormatException">The length of <paramref name="format" /> is one, and it is not one of the standard format specifier characters defined for <see cref="T:System.Globalization.DateTimeFormatInfo" />.  
  
 -or-  
  
 <paramref name="format" /> does not contain a valid custom format pattern.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The date and time is outside the range of dates supported by the calendar used by the current culture.</exception>
      <returns>A string representation of the value of the current <see cref="T:System.DateTimeOffset" /> object, as specified by <paramref name="format" />.</returns>
    </member>
    <member name="M:System.DateTimeOffset.ToString(System.String,System.IFormatProvider)">
      <summary>Converts the value of the current <see cref="T:System.DateTimeOffset" /> object to its equivalent string representation using the specified format and culture-specific format information.</summary>
      <param name="format">A format string.</param>
      <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
      <exception cref="T:System.FormatException">The length of <paramref name="format" /> is one, and it is not one of the standard format specifier characters defined for <see cref="T:System.Globalization.DateTimeFormatInfo" />.  
  
 -or-  
  
 <paramref name="format" /> does not contain a valid custom format pattern.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The date and time is outside the range of dates supported by the calendar used by <paramref name="formatProvider" />.</exception>
      <returns>A string representation of the value of the current <see cref="T:System.DateTimeOffset" /> object, as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
    </member>
    <member name="M:System.DateTimeOffset.ToUniversalTime">
      <summary>Converts the current <see cref="T:System.DateTimeOffset" /> object to a <see cref="T:System.DateTimeOffset" /> value that represents the Coordinated Universal Time (UTC).</summary>
      <returns>An object that represents the date and time of the current <see cref="T:System.DateTimeOffset" /> object converted to Coordinated Universal Time (UTC).</returns>
    </member>
    <member name="M:System.DateTimeOffset.ToUnixTimeMilliseconds">
      <summary>Returns the number of milliseconds that have elapsed since 1970-01-01T00:00:00.000Z.</summary>
      <returns>The number of milliseconds that have elapsed since 1970-01-01T00:00:00.000Z.</returns>
    </member>
    <member name="M:System.DateTimeOffset.ToUnixTimeSeconds">
      <summary>Returns the number of seconds that have elapsed since 1970-01-01T00:00:00Z.</summary>
      <returns>The number of seconds that have elapsed since 1970-01-01T00:00:00Z.</returns>
    </member>
    <member name="M:System.DateTimeOffset.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <summary>Tries to format the value of the current datetime offset instance into the provided span of characters.</summary>
      <param name="destination">When this method returns, this instance's value formatted as a span of characters.</param>
      <param name="charsWritten">When this method returns, the number of characters that were written in <paramref name="destination" />.</param>
      <param name="format">A span containing the charactes that represent a standard or custom format string that defines the acceptable format for <paramref name="destination" />.</param>
      <param name="formatProvider">An optional object that supplies culture-specific formatting information for <paramref name="destination" />.</param>
      <returns>
        <see langword="true" /> if the formatting was successful; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.DateTimeOffset.TryParse(System.ReadOnlySpan{System.Char},System.DateTimeOffset@)">
      <summary>Tries to convert a specified span representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
      <param name="input">A span containing the characters representing the date and time to convert.</param>
      <param name="result">When the method returns, contains the <see cref="T:System.DateTimeOffset" /> equivalent to the date and time of <paramref name="input" />, if the conversion succeeded, or <see cref="F:System.DateTimeOffset.MinValue" />, if the conversion failed. The conversion fails if the <paramref name="input" /> parameter is <see langword="null" /> or does not contain a valid string representation of a date and time. This parameter is passed uninitialized.</param>
      <returns>
        <see langword="true" /> if the <paramref name="input" /> parameter is successfully converted; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.DateTimeOffset.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)">
      <summary>Tries to convert a specified span representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
      <param name="input">A span containing the characters representing the date and time to convert.</param>
      <param name="formatProvider">An object that provides culture-specific formatting information about <paramref name="input" />.</param>
      <param name="styles">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="input" />.</param>
      <param name="result">When the method returns, contains the <see cref="T:System.DateTimeOffset" /> value equivalent to the date and time of <paramref name="input" />, if the conversion succeeded, or <see cref="F:System.DateTimeOffset.MinValue" />, if the conversion failed. The conversion fails if the <paramref name="input" /> parameter is <see langword="null" /> or does not contain a valid string representation of a date and time. This parameter is passed uninitialized.</param>
      <returns>
        <see langword="true" /> if the <paramref name="input" /> parameter is successfully converted; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.DateTimeOffset.TryParse(System.String,System.DateTimeOffset@)">
      <summary>Tries to converts a specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
      <param name="input">A string that contains a date and time to convert.</param>
      <param name="result">When the method returns, contains the <see cref="T:System.DateTimeOffset" /> equivalent to the date and time of <paramref name="input" />, if the conversion succeeded, or <see cref="F:System.DateTimeOffset.MinValue" />, if the conversion failed. The conversion fails if the <paramref name="input" /> parameter is <see langword="null" /> or does not contain a valid string representation of a date and time. This parameter is passed uninitialized.</param>
      <returns>
        <see langword="true" /> if the <paramref name="input" /> parameter is successfully converted; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.DateTimeOffset.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)">
      <summary>Tries to convert a specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
      <param name="input">A string that contains a date and time to convert.</param>
      <param name="formatProvider">An object that provides culture-specific formatting information about <paramref name="input" />.</param>
      <param name="styles">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="input" />.</param>
      <param name="result">When the method returns, contains the <see cref="T:System.DateTimeOffset" /> value equivalent to the date and time of <paramref name="input" />, if the conversion succeeded, or <see cref="F:System.DateTimeOffset.MinValue" />, if the conversion failed. The conversion fails if the <paramref name="input" /> parameter is <see langword="null" /> or does not contain a valid string representation of a date and time. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> includes an undefined <see cref="T:System.Globalization.DateTimeStyles" /> value.  
  
 -or-  
  
 <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" /> is not supported.  
  
 -or-  
  
 <paramref name="styles" /> includes mutually exclusive <see cref="T:System.Globalization.DateTimeStyles" /> values.</exception>
      <returns>
        <see langword="true" /> if the <paramref name="input" /> parameter is successfully converted; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.DateTimeOffset.TryParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)">
      <summary>Converts the representation of a date and time in a character span to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified format, culture-specific format information, and style. The format of the date and time representation must match the specified format exactly.</summary>
      <param name="input">A span containing the characters that represent a date and time to convert.</param>
      <param name="format">A format specifier that defines the required format of <paramref name="input" />.</param>
      <param name="formatProvider">An object that supplies culture-specific formatting information about <paramref name="input" />.</param>
      <param name="styles">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="input" />. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" /></param>
      <param name="result">When the method returns, contains the <see cref="T:System.DateTimeOffset" /> equivalent to the date and time of <paramref name="input" />, if the conversion succeeded, or <see cref="F:System.DateTimeOffset.MinValue" /> if the conversion failed. The conversion fails if the</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> includes an undefined <see cref="T:System.Globalization.DateTimeStyles" /> value.  
-or-  
<see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" /> is not supported.  
-or-  
<paramref name="styles" /> includes mutually exclusive <see cref="T:System.Globalization.DateTimeStyles" /> values.</exception>
      <returns>
        <see langword="true" /> if the <paramref name="input" /> parameter is successfully converted; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.DateTimeOffset.TryParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)">
      <summary>Converts the representation of a date and time in a character span to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified formats, culture-specific format information, and style. The format of the date and time representation must match one of the specified formats exactly.</summary>
      <param name="input">A span containing the characters that represent a date and time to convert.</param>
      <param name="formats">A array of standard or custom format strings that define the acceptable formats of <paramref name="input" />.</param>
      <param name="formatProvider">An object that supplies culture-specific formatting information about <paramref name="input" />.</param>
      <param name="styles">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="input" />. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" /></param>
      <param name="result">When the method returns, contains the <see cref="T:System.DateTimeOffset" /> equivalent to the date and time of <paramref name="input" />, if the conversion succeeded, or <see cref="F:System.DateTimeOffset.MinValue" /> if the conversion failed. The conversion fails if the</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> includes an undefined <see cref="T:System.Globalization.DateTimeStyles" /> value.  
-or-  
<see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" /> is not supported.  
-or-  
<paramref name="styles" /> includes mutually exclusive <see cref="T:System.Globalization.DateTimeStyles" /> values.</exception>
      <returns>
        <see langword="true" /> if the <paramref name="input" /> parameter is successfully converted; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.DateTimeOffset.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)">
      <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified format, culture-specific format information, and style. The format of the string representation must match the specified format exactly.</summary>
      <param name="input">A string that contains a date and time to convert.</param>
      <param name="format">A format specifier that defines the required format of <paramref name="input" />.</param>
      <param name="formatProvider">An object that supplies culture-specific formatting information about <paramref name="input" />.</param>
      <param name="styles">A bitwise combination of enumeration values that indicates the permitted format of input. A typical value to specify is <see langword="None" />.</param>
      <param name="result">When the method returns, contains the <see cref="T:System.DateTimeOffset" /> equivalent to the date and time of <paramref name="input" />, if the conversion succeeded, or <see cref="F:System.DateTimeOffset.MinValue" />, if the conversion failed. The conversion fails if the <paramref name="input" /> parameter is <see langword="null" />, or does not contain a valid string representation of a date and time in the expected format defined by <paramref name="format" /> and <c>provider</c>. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> includes an undefined <see cref="T:System.Globalization.DateTimeStyles" /> value.  
  
 -or-  
  
 <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" /> is not supported.  
  
 -or-  
  
 <paramref name="styles" /> includes mutually exclusive <see cref="T:System.Globalization.DateTimeStyles" /> values.</exception>
      <returns>
        <see langword="true" /> if the <paramref name="input" /> parameter is successfully converted; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.DateTimeOffset.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)">
      <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified array of formats, culture-specific format information, and style. The format of the string representation must match one of the specified formats exactly.</summary>
      <param name="input">A string that contains a date and time to convert.</param>
      <param name="formats">An array that defines the expected formats of <paramref name="input" />.</param>
      <param name="formatProvider">An object that supplies culture-specific formatting information about <paramref name="input" />.</param>
      <param name="styles">A bitwise combination of enumeration values that indicates the permitted format of input. A typical value to specify is <see langword="None" />.</param>
      <param name="result">When the method returns, contains the <see cref="T:System.DateTimeOffset" /> equivalent to the date and time of <paramref name="input" />, if the conversion succeeded, or <see cref="F:System.DateTimeOffset.MinValue" />, if the conversion failed. The conversion fails if the <paramref name="input" /> does not contain a valid string representation of a date and time, or does not contain the date and time in the expected format defined by <paramref name="format" />, or if <paramref name="formats" /> is <see langword="null" />. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> includes an undefined <see cref="T:System.Globalization.DateTimeStyles" /> value.  
  
 -or-  
  
 <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" /> is not supported.  
  
 -or-  
  
 <paramref name="styles" /> includes mutually exclusive <see cref="T:System.Globalization.DateTimeStyles" /> values.</exception>
      <returns>
        <see langword="true" /> if the <paramref name="input" /> parameter is successfully converted; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.DateTimeOffset.Date">
      <summary>Gets a <see cref="T:System.DateTime" /> value that represents the date component of the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>A <see cref="T:System.DateTime" /> value that represents the date component of the current <see cref="T:System.DateTimeOffset" /> object.</returns>
    </member>
    <member name="P:System.DateTimeOffset.DateTime">
      <summary>Gets a <see cref="T:System.DateTime" /> value that represents the date and time of the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>The date and time of the current <see cref="T:System.DateTimeOffset" /> object.</returns>
    </member>
    <member name="P:System.DateTimeOffset.Day">
      <summary>Gets the day of the month represented by the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>The day component of the current <see cref="T:System.DateTimeOffset" /> object, expressed as a value between 1 and 31.</returns>
    </member>
    <member name="P:System.DateTimeOffset.DayOfWeek">
      <summary>Gets the day of the week represented by the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>One of the enumeration values that indicates the day of the week of the current <see cref="T:System.DateTimeOffset" /> object.</returns>
    </member>
    <member name="P:System.DateTimeOffset.DayOfYear">
      <summary>Gets the day of the year represented by the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>The day of the year of the current <see cref="T:System.DateTimeOffset" /> object, expressed as a value between 1 and 366.</returns>
    </member>
    <member name="P:System.DateTimeOffset.Hour">
      <summary>Gets the hour component of the time represented by the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>The hour component of the current <see cref="T:System.DateTimeOffset" /> object. This property uses a 24-hour clock; the value ranges from 0 to 23.</returns>
    </member>
    <member name="P:System.DateTimeOffset.LocalDateTime">
      <summary>Gets a <see cref="T:System.DateTime" /> value that represents the local date and time of the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>The local date and time of the current <see cref="T:System.DateTimeOffset" /> object.</returns>
    </member>
    <member name="P:System.DateTimeOffset.Millisecond">
      <summary>Gets the millisecond component of the time represented by the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>The millisecond component of the current <see cref="T:System.DateTimeOffset" /> object, expressed as an integer between 0 and 999.</returns>
    </member>
    <member name="P:System.DateTimeOffset.Minute">
      <summary>Gets the minute component of the time represented by the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>The minute component of the current <see cref="T:System.DateTimeOffset" /> object, expressed as an integer between 0 and 59.</returns>
    </member>
    <member name="P:System.DateTimeOffset.Month">
      <summary>Gets the month component of the date represented by the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>The month component of the current <see cref="T:System.DateTimeOffset" /> object, expressed as an integer between 1 and 12.</returns>
    </member>
    <member name="P:System.DateTimeOffset.Now">
      <summary>Gets a <see cref="T:System.DateTimeOffset" /> object that is set to the current date and time on the current computer, with the offset set to the local time's offset from Coordinated Universal Time (UTC).</summary>
      <returns>A <see cref="T:System.DateTimeOffset" /> object whose date and time is the current local time and whose offset is the local time zone's offset from Coordinated Universal Time (UTC).</returns>
    </member>
    <member name="P:System.DateTimeOffset.Offset">
      <summary>Gets the time's offset from Coordinated Universal Time (UTC).</summary>
      <returns>The difference between the current <see cref="T:System.DateTimeOffset" /> object's time value and Coordinated Universal Time (UTC).</returns>
    </member>
    <member name="P:System.DateTimeOffset.Second">
      <summary>Gets the second component of the clock time represented by the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>The second component of the <see cref="T:System.DateTimeOffset" /> object, expressed as an integer value between 0 and 59.</returns>
    </member>
    <member name="P:System.DateTimeOffset.Ticks">
      <summary>Gets the number of ticks that represents the date and time of the current <see cref="T:System.DateTimeOffset" /> object in clock time.</summary>
      <returns>The number of ticks in the <see cref="T:System.DateTimeOffset" /> object's clock time.</returns>
    </member>
    <member name="P:System.DateTimeOffset.TimeOfDay">
      <summary>Gets the time of day for the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>The time interval of the current date that has elapsed since midnight.</returns>
    </member>
    <member name="P:System.DateTimeOffset.UtcDateTime">
      <summary>Gets a <see cref="T:System.DateTime" /> value that represents the Coordinated Universal Time (UTC) date and time of the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>The Coordinated Universal Time (UTC) date and time of the current <see cref="T:System.DateTimeOffset" /> object.</returns>
    </member>
    <member name="P:System.DateTimeOffset.UtcNow">
      <summary>Gets a <see cref="T:System.DateTimeOffset" /> object whose date and time are set to the current Coordinated Universal Time (UTC) date and time and whose offset is <see cref="F:System.TimeSpan.Zero" />.</summary>
      <returns>An object whose date and time is the current Coordinated Universal Time (UTC) and whose offset is <see cref="F:System.TimeSpan.Zero" />.</returns>
    </member>
    <member name="P:System.DateTimeOffset.UtcTicks">
      <summary>Gets the number of ticks that represents the date and time of the current <see cref="T:System.DateTimeOffset" /> object in Coordinated Universal Time (UTC).</summary>
      <returns>The number of ticks in the <see cref="T:System.DateTimeOffset" /> object's Coordinated Universal Time (UTC).</returns>
    </member>
    <member name="P:System.DateTimeOffset.Year">
      <summary>Gets the year component of the date represented by the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>The year component of the current <see cref="T:System.DateTimeOffset" /> object, expressed as an integer value between 0 and 9999.</returns>
    </member>
    <member name="T:System.DayOfWeek">
      <summary>Specifies the day of the week.</summary>
    </member>
    <member name="F:System.DayOfWeek.Friday">
      <summary>Indicates Friday.</summary>
    </member>
    <member name="F:System.DayOfWeek.Monday">
      <summary>Indicates Monday.</summary>
    </member>
    <member name="F:System.DayOfWeek.Saturday">
      <summary>Indicates Saturday.</summary>
    </member>
    <member name="F:System.DayOfWeek.Sunday">
      <summary>Indicates Sunday.</summary>
    </member>
    <member name="F:System.DayOfWeek.Thursday">
      <summary>Indicates Thursday.</summary>
    </member>
    <member name="F:System.DayOfWeek.Tuesday">
      <summary>Indicates Tuesday.</summary>
    </member>
    <member name="F:System.DayOfWeek.Wednesday">
      <summary>Indicates Wednesday.</summary>
    </member>
    <member name="T:System.Decimal">
      <summary>Represents a decimal floating-point number.</summary>
    </member>
    <member name="F:System.Decimal.MaxValue">
      <summary>Represents the largest possible value of <see cref="T:System.Decimal" />. This field is constant and read-only.</summary>
    </member>
    <member name="F:System.Decimal.MinusOne">
      <summary>Represents the number negative one (-1).</summary>
    </member>
    <member name="F:System.Decimal.MinValue">
      <summary>Represents the smallest possible value of <see cref="T:System.Decimal" />. This field is constant and read-only.</summary>
    </member>
    <member name="F:System.Decimal.One">
      <summary>Represents the number one (1).</summary>
    </member>
    <member name="F:System.Decimal.Zero">
      <summary>Represents the number zero (0).</summary>
    </member>
    <member name="M:System.Decimal.#ctor(System.Double)">
      <summary>Initializes a new instance of <see cref="T:System.Decimal" /> to the value of the specified double-precision floating-point number.</summary>
      <param name="value">The value to represent as a <see cref="T:System.Decimal" />.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Decimal.MaxValue" /> or less than <see cref="F:System.Decimal.MinValue" />.  
  
 -or-  
  
 <paramref name="value" /> is <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.PositiveInfinity" />, or <see cref="F:System.Double.NegativeInfinity" />.</exception>
    </member>
    <member name="M:System.Decimal.#ctor(System.Int32)">
      <summary>Initializes a new instance of <see cref="T:System.Decimal" /> to the value of the specified 32-bit signed integer.</summary>
      <param name="value">The value to represent as a <see cref="T:System.Decimal" />.</param>
    </member>
    <member name="M:System.Decimal.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean,System.Byte)">
      <summary>Initializes a new instance of <see cref="T:System.Decimal" /> from parameters specifying the instance's constituent parts.</summary>
      <param name="lo">The low 32 bits of a 96-bit integer.</param>
      <param name="mid">The middle 32 bits of a 96-bit integer.</param>
      <param name="hi">The high 32 bits of a 96-bit integer.</param>
      <param name="isNegative">
        <see langword="true" /> to indicate a negative number; <see langword="false" /> to indicate a positive number.</param>
      <param name="scale">A power of 10 ranging from 0 to 28.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="scale" /> is greater than 28.</exception>
    </member>
    <member name="M:System.Decimal.#ctor(System.Int32[])">
      <summary>Initializes a new instance of <see cref="T:System.Decimal" /> to a decimal value represented in binary and contained in a specified array.</summary>
      <param name="bits">An array of 32-bit signed integers containing a representation of a decimal value.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bits" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The length of the <paramref name="bits" /> is not 4.  
  
 -or-  
  
 The representation of the decimal value in <paramref name="bits" /> is not valid.</exception>
    </member>
    <member name="M:System.Decimal.#ctor(System.Int64)">
      <summary>Initializes a new instance of <see cref="T:System.Decimal" /> to the value of the specified 64-bit signed integer.</summary>
      <param name="value">The value to represent as a <see cref="T:System.Decimal" />.</param>
    </member>
    <member name="M:System.Decimal.#ctor(System.ReadOnlySpan{System.Int32})">
      <summary>Initializes a new instance of <see cref="T:System.Decimal" /> to a decimal value represented in binary and contained in the specified span.</summary>
      <param name="bits">A span of four <see cref="T:System.Int32" /> values that contains a binary representation of a decimal value.</param>
      <exception cref="T:System.ArgumentException">The length of <paramref name="bits" /> is not 4, or the representation of the decimal value in <paramref name="bits" /> is not valid.</exception>
    </member>
    <member name="M:System.Decimal.#ctor(System.Single)">
      <summary>Initializes a new instance of <see cref="T:System.Decimal" /> to the value of the specified single-precision floating-point number.</summary>
      <param name="value">The value to represent as a <see cref="T:System.Decimal" />.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Decimal.MaxValue" /> or less than <see cref="F:System.Decimal.MinValue" />.  
  
 -or-  
  
 <paramref name="value" /> is <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.PositiveInfinity" />, or <see cref="F:System.Single.NegativeInfinity" />.</exception>
    </member>
    <member name="M:System.Decimal.#ctor(System.UInt32)">
      <summary>Initializes a new instance of <see cref="T:System.Decimal" /> to the value of the specified 32-bit unsigned integer.</summary>
      <param name="value">The value to represent as a <see cref="T:System.Decimal" />.</param>
    </member>
    <member name="M:System.Decimal.#ctor(System.UInt64)">
      <summary>Initializes a new instance of <see cref="T:System.Decimal" /> to the value of the specified 64-bit unsigned integer.</summary>
      <param name="value">The value to represent as a <see cref="T:System.Decimal" />.</param>
    </member>
    <member name="M:System.Decimal.Add(System.Decimal,System.Decimal)">
      <summary>Adds two specified <see cref="T:System.Decimal" /> values.</summary>
      <param name="d1">The first value to add.</param>
      <param name="d2">The second value to add.</param>
      <exception cref="T:System.OverflowException">The sum of <paramref name="d1" /> and <paramref name="d2" /> is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />.</exception>
      <returns>The sum of <paramref name="d1" /> and <paramref name="d2" />.</returns>
    </member>
    <member name="M:System.Decimal.Ceiling(System.Decimal)">
      <summary>Returns the smallest integral value that is greater than or equal to the specified decimal number.</summary>
      <param name="d">A decimal number.</param>
      <returns>The smallest integral value that is greater than or equal to the <paramref name="d" /> parameter. Note that this method returns a <see cref="T:System.Decimal" /> instead of an integral type.</returns>
    </member>
    <member name="M:System.Decimal.Compare(System.Decimal,System.Decimal)">
      <summary>Compares two specified <see cref="T:System.Decimal" /> values.</summary>
      <param name="d1">The first value to compare.</param>
      <param name="d2">The second value to compare.</param>
      <returns>A signed number indicating the relative values of <paramref name="d1" /> and <paramref name="d2" />.  
  
 <list type="table"><listheader><term> Return value</term><description> Meaning</description></listheader><item><term> Less than zero</term><description><paramref name="d1" /> is less than <paramref name="d2" />.</description></item><item><term> Zero</term><description><paramref name="d1" /> and <paramref name="d2" /> are equal.</description></item><item><term> Greater than zero</term><description><paramref name="d1" /> is greater than <paramref name="d2" />.</description></item></list></returns>
    </member>
    <member name="M:System.Decimal.CompareTo(System.Decimal)">
      <summary>Compares this instance to a specified <see cref="T:System.Decimal" /> object and returns a comparison of their relative values.</summary>
      <param name="value">The object to compare with this instance.</param>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.  
  
 <list type="table"><listheader><term> Return value</term><description> Meaning</description></listheader><item><term> Less than zero</term><description> This instance is less than <paramref name="value" />.</description></item><item><term> Zero</term><description> This instance is equal to <paramref name="value" />.</description></item><item><term> Greater than zero</term><description> This instance is greater than <paramref name="value" />.</description></item></list></returns>
    </member>
    <member name="M:System.Decimal.CompareTo(System.Object)">
      <summary>Compares this instance to a specified object and returns a comparison of their relative values.</summary>
      <param name="value">The object to compare with this instance, or <see langword="null" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.Decimal" />.</exception>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.  
  
 <list type="table"><listheader><term> Return value</term><description> Meaning</description></listheader><item><term> Less than zero</term><description> This instance is less than <paramref name="value" />.</description></item><item><term> Zero</term><description> This instance is equal to <paramref name="value" />.</description></item><item><term> Greater than zero</term><description> This instance is greater than <paramref name="value" />, or <paramref name="value" /> is <see langword="null" />.</description></item></list></returns>
    </member>
    <member name="M:System.Decimal.Divide(System.Decimal,System.Decimal)">
      <summary>Divides two specified <see cref="T:System.Decimal" /> values.</summary>
      <param name="d1">The dividend.</param>
      <param name="d2">The divisor.</param>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="d2" /> is zero.</exception>
      <exception cref="T:System.OverflowException">The return value (that is, the quotient) is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />.</exception>
      <returns>The result of dividing <paramref name="d1" /> by <paramref name="d2" />.</returns>
    </member>
    <member name="M:System.Decimal.Equals(System.Decimal)">
      <summary>Returns a value indicating whether this instance and a specified <see cref="T:System.Decimal" /> object represent the same value.</summary>
      <param name="value">An object to compare to this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is equal to this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Decimal.Equals(System.Decimal,System.Decimal)">
      <summary>Returns a value indicating whether two specified instances of <see cref="T:System.Decimal" /> represent the same value.</summary>
      <param name="d1">The first value to compare.</param>
      <param name="d2">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="d1" /> and <paramref name="d2" /> are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Decimal.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance and a specified <see cref="T:System.Object" /> represent the same type and value.</summary>
      <param name="value">The object to compare with this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is a <see cref="T:System.Decimal" /> and equal to this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Decimal.Floor(System.Decimal)">
      <summary>Rounds a specified <see cref="T:System.Decimal" /> number to the closest integer toward negative infinity.</summary>
      <param name="d">The value to round.</param>
      <returns>If <paramref name="d" /> has a fractional part, the next whole <see cref="T:System.Decimal" /> number toward negative infinity that is less than <paramref name="d" />.  
  
 -or-  
  
 If <paramref name="d" /> doesn't have a fractional part, <paramref name="d" /> is returned unchanged. Note that the method returns an integral value of type <see cref="T:System.Decimal" />.</returns>
    </member>
    <member name="M:System.Decimal.FromOACurrency(System.Int64)">
      <summary>Converts the specified 64-bit signed integer, which contains an OLE Automation Currency value, to the equivalent <see cref="T:System.Decimal" /> value.</summary>
      <param name="cy">An OLE Automation Currency value.</param>
      <returns>A <see cref="T:System.Decimal" /> that contains the equivalent of <paramref name="cy" />.</returns>
    </member>
    <member name="M:System.Decimal.GetBits(System.Decimal)">
      <summary>Converts the value of a specified instance of <see cref="T:System.Decimal" /> to its equivalent binary representation.</summary>
      <param name="d">The value to convert.</param>
      <returns>A 32-bit signed integer array with four elements that contain the binary representation of <paramref name="d" />.</returns>
    </member>
    <member name="M:System.Decimal.GetBits(System.Decimal,System.Span{System.Int32})">
      <summary>Converts the value of a specified instance of <see cref="T:System.Decimal" /> to its equivalent binary representation.</summary>
      <param name="d">The value to convert.</param>
      <param name="destination">The span into which to store the four-integer binary representation.</param>
      <exception cref="T:System.ArgumentException">The destination span was not long enough to store the binary representation.</exception>
      <returns>
        <see langword="4" />, which is the number of integers in the binary representation.</returns>
    </member>
    <member name="M:System.Decimal.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Decimal.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Decimal" />.</summary>
      <returns>The enumerated constant <see cref="F:System.TypeCode.Decimal" />.</returns>
    </member>
    <member name="M:System.Decimal.Multiply(System.Decimal,System.Decimal)">
      <summary>Multiplies two specified <see cref="T:System.Decimal" /> values.</summary>
      <param name="d1">The multiplicand.</param>
      <param name="d2">The multiplier.</param>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />.</exception>
      <returns>The result of multiplying <paramref name="d1" /> and <paramref name="d2" />.</returns>
    </member>
    <member name="M:System.Decimal.Negate(System.Decimal)">
      <summary>Returns the result of multiplying the specified <see cref="T:System.Decimal" /> value by negative one.</summary>
      <param name="d">The value to negate.</param>
      <returns>A decimal number with the value of <paramref name="d" />, but the opposite sign.  
  
 -or-  
  
 Zero, if <paramref name="d" /> is zero.</returns>
    </member>
    <member name="M:System.Decimal.op_Addition(System.Decimal,System.Decimal)">
      <summary>Adds two specified <see cref="T:System.Decimal" /> values.</summary>
      <param name="d1">The first value to add.</param>
      <param name="d2">The second value to add.</param>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />.</exception>
      <returns>The result of adding <paramref name="d1" /> and <paramref name="d2" />.</returns>
    </member>
    <member name="M:System.Decimal.op_Decrement(System.Decimal)">
      <summary>Decrements the <see cref="T:System.Decimal" /> operand by one.</summary>
      <param name="d">The value to decrement.</param>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />.</exception>
      <returns>The value of <paramref name="d" /> decremented by 1.</returns>
    </member>
    <member name="M:System.Decimal.op_Division(System.Decimal,System.Decimal)">
      <summary>Divides two specified <see cref="T:System.Decimal" /> values.</summary>
      <param name="d1">The dividend.</param>
      <param name="d2">The divisor.</param>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="d2" /> is zero.</exception>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />.</exception>
      <returns>The result of dividing <paramref name="d1" /> by <paramref name="d2" />.</returns>
    </member>
    <member name="M:System.Decimal.op_Equality(System.Decimal,System.Decimal)">
      <summary>Returns a value that indicates whether two <see cref="T:System.Decimal" /> values are equal.</summary>
      <param name="d1">The first value to compare.</param>
      <param name="d2">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="d1" /> and <paramref name="d2" /> are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Byte">
      <summary>Defines an explicit conversion of a <see cref="T:System.Decimal" /> to an 8-bit unsigned integer.</summary>
      <param name="value">The value to convert.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />.</exception>
      <returns>An 8-bit unsigned integer that represents the converted <see cref="T:System.Decimal" />.</returns>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Char">
      <summary>Defines an explicit conversion of a <see cref="T:System.Decimal" /> to a Unicode character.</summary>
      <param name="value">The value to convert.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Char.MinValue" /> or greater than <see cref="F:System.Char.MaxValue" />.</exception>
      <returns>A Unicode character that represents the converted <see cref="T:System.Decimal" />.</returns>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Double">
      <summary>Defines an explicit conversion of a <see cref="T:System.Decimal" /> to a double-precision floating-point number.</summary>
      <param name="value">The value to convert.</param>
      <returns>A double-precision floating-point number that represents the converted <see cref="T:System.Decimal" />.</returns>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Int16">
      <summary>Defines an explicit conversion of a <see cref="T:System.Decimal" /> to a 16-bit signed integer.</summary>
      <param name="value">The value to convert.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />.</exception>
      <returns>A 16-bit signed integer that represents the converted <see cref="T:System.Decimal" />.</returns>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Int32">
      <summary>Defines an explicit conversion of a <see cref="T:System.Decimal" /> to a 32-bit signed integer.</summary>
      <param name="value">The value to convert.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <returns>A 32-bit signed integer that represents the converted <see cref="T:System.Decimal" />.</returns>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Int64">
      <summary>Defines an explicit conversion of a <see cref="T:System.Decimal" /> to a 64-bit signed integer.</summary>
      <param name="value">The value to convert.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />.</exception>
      <returns>A 64-bit signed integer that represents the converted <see cref="T:System.Decimal" />.</returns>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.SByte">
      <summary>Defines an explicit conversion of a <see cref="T:System.Decimal" /> to an 8-bit signed integer.  
  
 This API is not CLS-compliant.</summary>
      <param name="value">The value to convert.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />.</exception>
      <returns>An 8-bit signed integer that represents the converted <see cref="T:System.Decimal" />.</returns>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Single">
      <summary>Defines an explicit conversion of a <see cref="T:System.Decimal" /> to a single-precision floating-point number.</summary>
      <param name="value">The value to convert.</param>
      <returns>A single-precision floating-point number that represents the converted <see cref="T:System.Decimal" />.</returns>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.UInt16">
      <summary>Defines an explicit conversion of a <see cref="T:System.Decimal" /> to a 16-bit unsigned integer.  
  
 This API is not CLS-compliant.</summary>
      <param name="value">The value to convert.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />.</exception>
      <returns>A 16-bit unsigned integer that represents the converted <see cref="T:System.Decimal" />.</returns>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.UInt32">
      <summary>Defines an explicit conversion of a <see cref="T:System.Decimal" /> to a 32-bit unsigned integer.  
  
 This API is not CLS-compliant.</summary>
      <param name="value">The value to convert.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />.</exception>
      <returns>A 32-bit unsigned integer that represents the converted <see cref="T:System.Decimal" />.</returns>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.UInt64">
      <summary>Defines an explicit conversion of a <see cref="T:System.Decimal" /> to a 64-bit unsigned integer.  
  
 This API is not CLS-compliant.</summary>
      <param name="value">The value to convert.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is negative or greater than <see cref="F:System.UInt64.MaxValue" />.</exception>
      <returns>A 64-bit unsigned integer that represents the converted <see cref="T:System.Decimal" />.</returns>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Double)~System.Decimal">
      <summary>Defines an explicit conversion of a double-precision floating-point number to a <see cref="T:System.Decimal" />.</summary>
      <param name="value">The double-precision floating-point number to convert.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Decimal.MaxValue" /> or less than <see cref="F:System.Decimal.MinValue" />.  
  
 -or-  
  
 <paramref name="value" /> is <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.PositiveInfinity" />, or <see cref="F:System.Double.NegativeInfinity" />.</exception>
      <returns>The converted double-precision floating point number.</returns>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Single)~System.Decimal">
      <summary>Defines an explicit conversion of a single-precision floating-point number to a <see cref="T:System.Decimal" />.</summary>
      <param name="value">The single-precision floating-point number to convert.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Decimal.MaxValue" /> or less than <see cref="F:System.Decimal.MinValue" />.  
  
 -or-  
  
 <paramref name="value" /> is <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.PositiveInfinity" />, or <see cref="F:System.Single.NegativeInfinity" />.</exception>
      <returns>The converted single-precision floating point number.</returns>
    </member>
    <member name="M:System.Decimal.op_GreaterThan(System.Decimal,System.Decimal)">
      <summary>Returns a value indicating whether a specified <see cref="T:System.Decimal" /> is greater than another specified <see cref="T:System.Decimal" />.</summary>
      <param name="d1">The first value to compare.</param>
      <param name="d2">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="d1" /> is greater than <paramref name="d2" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Decimal.op_GreaterThanOrEqual(System.Decimal,System.Decimal)">
      <summary>Returns a value indicating whether a specified <see cref="T:System.Decimal" /> is greater than or equal to another specified <see cref="T:System.Decimal" />.</summary>
      <param name="d1">The first value to compare.</param>
      <param name="d2">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="d1" /> is greater than or equal to <paramref name="d2" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Byte)~System.Decimal">
      <summary>Defines an implicit conversion of an 8-bit unsigned integer to a <see cref="T:System.Decimal" />.</summary>
      <param name="value">The 8-bit unsigned integer to convert.</param>
      <returns>The converted 8-bit unsigned integer.</returns>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Char)~System.Decimal">
      <summary>Defines an implicit conversion of a Unicode character to a <see cref="T:System.Decimal" />.</summary>
      <param name="value">The Unicode character to convert.</param>
      <returns>The converted Unicode character.</returns>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Int16)~System.Decimal">
      <summary>Defines an implicit conversion of a 16-bit signed integer to a <see cref="T:System.Decimal" />.</summary>
      <param name="value">The 16-bit signed integer to convert.</param>
      <returns>The converted 16-bit signed integer.</returns>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Int32)~System.Decimal">
      <summary>Defines an implicit conversion of a 32-bit signed integer to a <see cref="T:System.Decimal" />.</summary>
      <param name="value">The 32-bit signed integer to convert.</param>
      <returns>The converted 32-bit signed integer.</returns>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Int64)~System.Decimal">
      <summary>Defines an implicit conversion of a 64-bit signed integer to a <see cref="T:System.Decimal" />.</summary>
      <param name="value">The 64-bit signed integer to convert.</param>
      <returns>The converted 64-bit signed integer.</returns>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.SByte)~System.Decimal">
      <summary>Defines an implicit conversion of an 8-bit signed integer to a <see cref="T:System.Decimal" />.  
  
 This API is not CLS-compliant.</summary>
      <param name="value">The 8-bit signed integer to convert.</param>
      <returns>The converted 8-bit signed integer.</returns>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.UInt16)~System.Decimal">
      <summary>Defines an implicit conversion of a 16-bit unsigned integer to a <see cref="T:System.Decimal" />.  
  
 This API is not CLS-compliant.</summary>
      <param name="value">The 16-bit unsigned integer to convert.</param>
      <returns>The converted 16-bit unsigned integer.</returns>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.UInt32)~System.Decimal">
      <summary>Defines an implicit conversion of a 32-bit unsigned integer to a <see cref="T:System.Decimal" />.  
  
 This API is not CLS-compliant.</summary>
      <param name="value">The 32-bit unsigned integer to convert.</param>
      <returns>The converted 32-bit unsigned integer.</returns>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.UInt64)~System.Decimal">
      <summary>Defines an implicit conversion of a 64-bit unsigned integer to a <see cref="T:System.Decimal" />.  
  
 This API is not CLS-compliant.</summary>
      <param name="value">The 64-bit unsigned integer to convert.</param>
      <returns>The converted 64-bit unsigned integer.</returns>
    </member>
    <member name="M:System.Decimal.op_Increment(System.Decimal)">
      <summary>Increments the <see cref="T:System.Decimal" /> operand by 1.</summary>
      <param name="d">The value to increment.</param>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />.</exception>
      <returns>The value of <paramref name="d" /> incremented by 1.</returns>
    </member>
    <member name="M:System.Decimal.op_Inequality(System.Decimal,System.Decimal)">
      <summary>Returns a value that indicates whether two <see cref="T:System.Decimal" /> objects have different values.</summary>
      <param name="d1">The first value to compare.</param>
      <param name="d2">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="d1" /> and <paramref name="d2" /> are not equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Decimal.op_LessThan(System.Decimal,System.Decimal)">
      <summary>Returns a value indicating whether a specified <see cref="T:System.Decimal" /> is less than another specified <see cref="T:System.Decimal" />.</summary>
      <param name="d1">The first value to compare.</param>
      <param name="d2">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="d1" /> is less than <paramref name="d2" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Decimal.op_LessThanOrEqual(System.Decimal,System.Decimal)">
      <summary>Returns a value indicating whether a specified <see cref="T:System.Decimal" /> is less than or equal to another specified <see cref="T:System.Decimal" />.</summary>
      <param name="d1">The first value to compare.</param>
      <param name="d2">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="d1" /> is less than or equal to <paramref name="d2" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Decimal.op_Modulus(System.Decimal,System.Decimal)">
      <summary>Returns the remainder resulting from dividing two specified <see cref="T:System.Decimal" /> values.</summary>
      <param name="d1">The dividend.</param>
      <param name="d2">The divisor.</param>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="d2" /> is <see langword="zero" />.</exception>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />.</exception>
      <returns>The remainder resulting from dividing <paramref name="d1" /> by <paramref name="d2" />.</returns>
    </member>
    <member name="M:System.Decimal.op_Multiply(System.Decimal,System.Decimal)">
      <summary>Multiplies two specified <see cref="T:System.Decimal" /> values.</summary>
      <param name="d1">The first value to multiply.</param>
      <param name="d2">The second value to multiply.</param>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />.</exception>
      <returns>The result of multiplying <paramref name="d1" /> by <paramref name="d2" />.</returns>
    </member>
    <member name="M:System.Decimal.op_Subtraction(System.Decimal,System.Decimal)">
      <summary>Subtracts two specified <see cref="T:System.Decimal" /> values.</summary>
      <param name="d1">The minuend.</param>
      <param name="d2">The subtrahend.</param>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />.</exception>
      <returns>The result of subtracting <paramref name="d2" /> from <paramref name="d1" />.</returns>
    </member>
    <member name="M:System.Decimal.op_UnaryNegation(System.Decimal)">
      <summary>Negates the value of the specified <see cref="T:System.Decimal" /> operand.</summary>
      <param name="d">The value to negate.</param>
      <returns>The result of <paramref name="d" /> multiplied by negative one (-1).</returns>
    </member>
    <member name="M:System.Decimal.op_UnaryPlus(System.Decimal)">
      <summary>Returns the value of the <see cref="T:System.Decimal" /> operand (the sign of the operand is unchanged).</summary>
      <param name="d">The operand to return.</param>
      <returns>The value of the operand, <paramref name="d" />.</returns>
    </member>
    <member name="M:System.Decimal.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Converts the span representation of a number to its <see cref="T:System.Decimal" /> equivalent using the specified style and culture-specific format.</summary>
      <param name="s">The span containing the characters representing the number to convert.</param>
      <param name="style">A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Number" />.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> object that supplies culture-specific information about the format of <paramref name="s" />.</param>
      <returns>The <see cref="T:System.Decimal" /> number equivalent to the number contained in <paramref name="s" /> as specified by <paramref name="style" /> and <paramref name="provider" />.</returns>
    </member>
    <member name="M:System.Decimal.Parse(System.String)">
      <summary>Converts the string representation of a number to its <see cref="T:System.Decimal" /> equivalent.</summary>
      <param name="s">The string representation of the number to convert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />.</exception>
      <returns>The equivalent to the number contained in <paramref name="s" />.</returns>
    </member>
    <member name="M:System.Decimal.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>Converts the string representation of a number in a specified style to its <see cref="T:System.Decimal" /> equivalent.</summary>
      <param name="s">The string representation of the number to convert.</param>
      <param name="style">A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Number" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  
  
 -or-  
  
 <paramref name="style" /> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" /></exception>
      <returns>The <see cref="T:System.Decimal" /> number equivalent to the number contained in <paramref name="s" /> as specified by <paramref name="style" />.</returns>
    </member>
    <member name="M:System.Decimal.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Converts the string representation of a number to its <see cref="T:System.Decimal" /> equivalent using the specified style and culture-specific format.</summary>
      <param name="s">The string representation of the number to convert.</param>
      <param name="style">A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Number" />.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> object that supplies culture-specific information about the format of <paramref name="s" />.</param>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  
  
 -or-  
  
 <paramref name="style" /> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
      <returns>The <see cref="T:System.Decimal" /> number equivalent to the number contained in <paramref name="s" /> as specified by <paramref name="style" /> and <paramref name="provider" />.</returns>
    </member>
    <member name="M:System.Decimal.Parse(System.String,System.IFormatProvider)">
      <summary>Converts the string representation of a number to its <see cref="T:System.Decimal" /> equivalent using the specified culture-specific format information.</summary>
      <param name="s">The string representation of the number to convert.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific parsing information about <paramref name="s" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not of the correct format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />.</exception>
      <returns>The <see cref="T:System.Decimal" /> number equivalent to the number contained in <paramref name="s" /> as specified by <paramref name="provider" />.</returns>
    </member>
    <member name="M:System.Decimal.Remainder(System.Decimal,System.Decimal)">
      <summary>Computes the remainder after dividing two <see cref="T:System.Decimal" /> values.</summary>
      <param name="d1">The dividend.</param>
      <param name="d2">The divisor.</param>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="d2" /> is zero.</exception>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />.</exception>
      <returns>The remainder after dividing <paramref name="d1" /> by <paramref name="d2" />.</returns>
    </member>
    <member name="M:System.Decimal.Round(System.Decimal)">
      <summary>Rounds a decimal value to the nearest integer.</summary>
      <param name="d">A decimal number to round.</param>
      <exception cref="T:System.OverflowException">The result is outside the range of a <see cref="T:System.Decimal" /> value.</exception>
      <returns>The integer that is nearest to the <paramref name="d" /> parameter. If <paramref name="d" /> is halfway between two integers, one of which is even and the other odd, the even number is returned.</returns>
    </member>
    <member name="M:System.Decimal.Round(System.Decimal,System.Int32)">
      <summary>Rounds a <see cref="T:System.Decimal" /> value to a specified number of decimal places.</summary>
      <param name="d">A decimal number to round.</param>
      <param name="decimals">A value from 0 to 28 that specifies the number of decimal places to round to.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="decimals" /> is not a value from 0 to 28.</exception>
      <returns>The decimal number equivalent to <paramref name="d" /> rounded to <paramref name="decimals" /> number of decimal places.</returns>
    </member>
    <member name="M:System.Decimal.Round(System.Decimal,System.Int32,System.MidpointRounding)">
      <summary>Rounds a decimal value to a specified precision. A parameter specifies how to round the value if it is midway between two other numbers.</summary>
      <param name="d">A decimal number to round.</param>
      <param name="decimals">The number of significant decimal places (precision) in the return value.</param>
      <param name="mode">A value that specifies how to round <paramref name="d" /> if it is midway between two other numbers.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="decimals" /> is less than 0 or greater than 28.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" /> is not a <see cref="T:System.MidpointRounding" /> value.</exception>
      <exception cref="T:System.OverflowException">The result is outside the range of a <see cref="T:System.Decimal" /> object.</exception>
      <returns>The number that is nearest to the <paramref name="d" /> parameter with a precision equal to the <paramref name="decimals" /> parameter. If <paramref name="d" /> is halfway between two numbers, one of which is even and the other odd, the <paramref name="mode" /> parameter determines which of the two numbers is returned. If the precision of <paramref name="d" /> is less than <paramref name="decimals" />, <paramref name="d" /> is returned unchanged.</returns>
    </member>
    <member name="M:System.Decimal.Round(System.Decimal,System.MidpointRounding)">
      <summary>Rounds a decimal value to the nearest integer. A parameter specifies how to round the value if it is midway between two other numbers.</summary>
      <param name="d">A decimal number to round.</param>
      <param name="mode">A value that specifies how to round <paramref name="d" /> if it is midway between two other numbers.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" /> is not a <see cref="T:System.MidpointRounding" /> value.</exception>
      <exception cref="T:System.OverflowException">The result is outside the range of a <see cref="T:System.Decimal" /> object.</exception>
      <returns>The integer that is nearest to the <paramref name="d" /> parameter. If <paramref name="d" /> is halfway between two numbers, one of which is even and the other odd, the <paramref name="mode" /> parameter determines which of the two numbers is returned.</returns>
    </member>
    <member name="M:System.Decimal.Subtract(System.Decimal,System.Decimal)">
      <summary>Subtracts one specified <see cref="T:System.Decimal" /> value from another.</summary>
      <param name="d1">The minuend.</param>
      <param name="d2">The subtrahend.</param>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />.</exception>
      <returns>The result of subtracting <paramref name="d2" /> from <paramref name="d1" />.</returns>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>
        <see langword="true" /> if the value of the current instance is not zero; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.OverflowException">The resulting integer value is less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />.</exception>
      <returns>The value of the current instance, converted to a <see cref="T:System.Byte" />.</returns>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
      <returns>None. This conversion is not supported.</returns>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
      <returns>None. This conversion is not supported.</returns>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, unchanged.</returns>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Double" />.</returns>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.OverflowException">The resulting integer value is less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />.</exception>
      <returns>The value of the current instance, converted to a <see cref="T:System.Int16" />.</returns>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.</summary>
      <param name="provider">The parameter is ignored.</param>
      <exception cref="T:System.OverflowException">The resulting integer value is less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <returns>The value of the current instance, converted to a <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.OverflowException">The resulting integer value is less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />.</exception>
      <returns>The value of the current instance, converted to a <see cref="T:System.Int64" />.</returns>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.OverflowException">The resulting integer value is less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />.</exception>
      <returns>The value of the current instance, converted to a <see cref="T:System.SByte" />.</returns>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Single" />.</returns>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />.</summary>
      <param name="type">The type to which to convert the value of this <see cref="T:System.Decimal" /> instance.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> implementation that supplies culture-specific information about the format of the returned value.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidCastException">The requested type conversion is not supported.</exception>
      <returns>The value of the current instance, converted to a <paramref name="type" />.</returns>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.OverflowException">The resulting integer value is less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />.</exception>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt16" />.</returns>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.OverflowException">The resulting integer value is less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />.</exception>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt32" />.</returns>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.OverflowException">The resulting integer value is less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />.</exception>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt64" />.</returns>
    </member>
    <member name="M:System.Decimal.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary>Runs when the deserialization of an object has been completed.</summary>
      <param name="sender">The object that initiated the callback. The functionality for this parameter is not currently implemented.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The <see cref="T:System.Decimal" /> object contains invalid or corrupted data.</exception>
    </member>
    <member name="M:System.Decimal.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.</param>
    </member>
    <member name="M:System.Decimal.ToByte(System.Decimal)">
      <summary>Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent 8-bit unsigned integer.</summary>
      <param name="value">The decimal number to convert.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />.</exception>
      <returns>An 8-bit unsigned integer equivalent to <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Decimal.ToDouble(System.Decimal)">
      <summary>Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent double-precision floating-point number.</summary>
      <param name="d">The decimal number to convert.</param>
      <returns>A double-precision floating-point number equivalent to <paramref name="d" />.</returns>
    </member>
    <member name="M:System.Decimal.ToInt16(System.Decimal)">
      <summary>Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent 16-bit signed integer.</summary>
      <param name="value">The decimal number to convert.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />.</exception>
      <returns>A 16-bit signed integer equivalent to <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Decimal.ToInt32(System.Decimal)">
      <summary>Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent 32-bit signed integer.</summary>
      <param name="d">The decimal number to convert.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="d" /> is less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <returns>A 32-bit signed integer equivalent to the value of <paramref name="d" />.</returns>
    </member>
    <member name="M:System.Decimal.ToInt64(System.Decimal)">
      <summary>Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent 64-bit signed integer.</summary>
      <param name="d">The decimal number to convert.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="d" /> is less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />.</exception>
      <returns>A 64-bit signed integer equivalent to the value of <paramref name="d" />.</returns>
    </member>
    <member name="M:System.Decimal.ToOACurrency(System.Decimal)">
      <summary>Converts the specified <see cref="T:System.Decimal" /> value to the equivalent OLE Automation Currency value, which is contained in a 64-bit signed integer.</summary>
      <param name="value">The decimal number to convert.</param>
      <returns>A 64-bit signed integer that contains the OLE Automation equivalent of <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Decimal.ToSByte(System.Decimal)">
      <summary>Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent 8-bit signed integer.</summary>
      <param name="value">The decimal number to convert.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />.</exception>
      <returns>An 8-bit signed integer equivalent to <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Decimal.ToSingle(System.Decimal)">
      <summary>Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent single-precision floating-point number.</summary>
      <param name="d">The decimal number to convert.</param>
      <returns>A single-precision floating-point number equivalent to the value of <paramref name="d" />.</returns>
    </member>
    <member name="M:System.Decimal.ToString">
      <summary>Converts the numeric value of this instance to its equivalent string representation.</summary>
      <returns>A string that represents the value of this instance.</returns>
    </member>
    <member name="M:System.Decimal.ToString(System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>The string representation of the value of this instance as specified by <paramref name="provider" />.</returns>
    </member>
    <member name="M:System.Decimal.ToString(System.String)">
      <summary>Converts the numeric value of this instance to its equivalent string representation, using the specified format.</summary>
      <param name="format">A standard or custom numeric format string.</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.</exception>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" />.</returns>
    </member>
    <member name="M:System.Decimal.ToString(System.String,System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.</summary>
      <param name="format">A numeric format string.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.</exception>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
    </member>
    <member name="M:System.Decimal.ToUInt16(System.Decimal)">
      <summary>Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent 16-bit unsigned integer.</summary>
      <param name="value">The decimal number to convert.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.UInt16.MaxValue" /> or less than <see cref="F:System.UInt16.MinValue" />.</exception>
      <returns>A 16-bit unsigned integer equivalent to the value of <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Decimal.ToUInt32(System.Decimal)">
      <summary>Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent 32-bit unsigned integer.</summary>
      <param name="d">The decimal number to convert.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="d" /> is negative or greater than <see cref="F:System.UInt32.MaxValue" />.</exception>
      <returns>A 32-bit unsigned integer equivalent to the value of <paramref name="d" />.</returns>
    </member>
    <member name="M:System.Decimal.ToUInt64(System.Decimal)">
      <summary>Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent 64-bit unsigned integer.</summary>
      <param name="d">The decimal number to convert.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="d" /> is negative or greater than <see cref="F:System.UInt64.MaxValue" />.</exception>
      <returns>A 64-bit unsigned integer equivalent to the value of <paramref name="d" />.</returns>
    </member>
    <member name="M:System.Decimal.Truncate(System.Decimal)">
      <summary>Returns the integral digits of the specified <see cref="T:System.Decimal" />; any fractional digits are discarded.</summary>
      <param name="d">The decimal number to truncate.</param>
      <returns>The result of <paramref name="d" /> rounded toward zero, to the nearest whole number.</returns>
    </member>
    <member name="M:System.Decimal.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <summary>Tries to format the value of the current decimal instance into the provided span of characters.</summary>
      <param name="destination">When this method returns, this instance's value formatted as a span of characters.</param>
      <param name="charsWritten">When this method returns, the number of characters that were written in <paramref name="destination" />.</param>
      <param name="format">A span containing the charactes that represent a standard or custom format string that defines the acceptable format for <paramref name="destination" />.</param>
      <param name="provider">An optional object that supplies culture-specific formatting information for <paramref name="destination" />.</param>
      <returns>
        <see langword="true" /> if the formatting was successful; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Decimal.TryGetBits(System.Decimal,System.Span{System.Int32},System.Int32@)">
      <summary>Tries to convert the value of a specified instance of <see cref="T:System.Decimal" /> to its equivalent binary representation.</summary>
      <param name="d">The value to convert.</param>
      <param name="destination">The span into which to store the binary representation.</param>
      <param name="valuesWritten">The number of integers written to the destination.</param>
      <returns>
        <see langword="true" /> if the decimal's binary representation was written to the destination; <see langword="false" /> if the destination wasn't long enough.</returns>
    </member>
    <member name="M:System.Decimal.TryParse(System.ReadOnlySpan{System.Char},System.Decimal@)">
      <summary>Converts the span representation of a number to its <see cref="T:System.Decimal" /> equivalent using the specified style and culture-specific format. A return value indicates whether the conversion succeeded or failed.</summary>
      <param name="s">A span containing the characters representing the number to convert.</param>
      <param name="result">When this method returns, contains the <see cref="T:System.Decimal" /> number that is equivalent to the numeric value contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not a number in a format compliant with <paramref name="style" />, or represents a number less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. This parameter is passed uininitialized; any value originally supplied in <paramref name="result" /> is overwritten.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Decimal.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Decimal@)">
      <summary>Converts the span representation of a number to its <see cref="T:System.Decimal" /> equivalent using the specified style and culture-specific format. A return value indicates whether the conversion succeeded or failed.</summary>
      <param name="s">A span containing the characters representing the number to convert.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Number" />.</param>
      <param name="provider">An object that supplies culture-specific parsing information about <paramref name="s" />.</param>
      <param name="result">When this method returns, contains the <see cref="T:System.Decimal" /> number that is equivalent to the numeric value contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not a number in a format compliant with <paramref name="style" />, or represents a number less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. This parameter is passed uininitialized; any value originally supplied in <paramref name="result" /> is overwritten.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Decimal.TryParse(System.String,System.Decimal@)">
      <summary>Converts the string representation of a number to its <see cref="T:System.Decimal" /> equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <param name="s">The string representation of the number to convert.</param>
      <param name="result">When this method returns, contains the <see cref="T:System.Decimal" /> number that is equivalent to the numeric value contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not a number in a valid format, or represents a number less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. This parameter is passed uininitialized; any value originally supplied in <paramref name="result" /> is overwritten.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Decimal.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Decimal@)">
      <summary>Converts the string representation of a number to its <see cref="T:System.Decimal" /> equivalent using the specified style and culture-specific format. A return value indicates whether the conversion succeeded or failed.</summary>
      <param name="s">The string representation of the number to convert.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Number" />.</param>
      <param name="provider">An object that supplies culture-specific parsing information about <paramref name="s" />.</param>
      <param name="result">When this method returns, contains the <see cref="T:System.Decimal" /> number that is equivalent to the numeric value contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not a number in a format compliant with <paramref name="style" />, or represents a number less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. This parameter is passed uininitialized; any value originally supplied in <paramref name="result" /> is overwritten.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  
  
 -or-  
  
 <paramref name="style" /> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Delegate">
      <summary>Represents a delegate, which is a data structure that refers to a static method or to a class instance and an instance method of that class.</summary>
    </member>
    <member name="M:System.Delegate.#ctor(System.Object,System.String)">
      <summary>Initializes a delegate that invokes the specified instance method on the specified class instance.</summary>
      <param name="target">The class instance on which the delegate invokes <paramref name="method" />.</param>
      <param name="method">The name of the instance method that the delegate represents.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="method" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">There was an error binding to the target method.</exception>
    </member>
    <member name="M:System.Delegate.#ctor(System.Type,System.String)">
      <summary>Initializes a delegate that invokes the specified static method from the specified class.</summary>
      <param name="target">The <see cref="T:System.Type" /> representing the class that defines <paramref name="method" />.</param>
      <param name="method">The name of the static method that the delegate represents.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="method" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> is not a <see langword="RuntimeType" />. See Runtime Types in Reflection.  
  
 -or-  
  
 <paramref name="target" /> represents an open generic type.</exception>
    </member>
    <member name="M:System.Delegate.Clone">
      <summary>Creates a shallow copy of the delegate.</summary>
      <returns>A shallow copy of the delegate.</returns>
    </member>
    <member name="M:System.Delegate.Combine(System.Delegate,System.Delegate)">
      <summary>Concatenates the invocation lists of two delegates.</summary>
      <param name="a">The delegate whose invocation list comes first.</param>
      <param name="b">The delegate whose invocation list comes last.</param>
      <exception cref="T:System.ArgumentException">Both <paramref name="a" /> and <paramref name="b" /> are not <see langword="null" />, and <paramref name="a" /> and <paramref name="b" /> are not instances of the same delegate type.</exception>
      <returns>A new delegate with an invocation list that concatenates the invocation lists of <paramref name="a" /> and <paramref name="b" /> in that order. Returns <paramref name="a" /> if <paramref name="b" /> is <see langword="null" />, returns <paramref name="b" /> if <paramref name="a" /> is a null reference, and returns a null reference if both <paramref name="a" /> and <paramref name="b" /> are null references.</returns>
    </member>
    <member name="M:System.Delegate.Combine(System.Delegate[])">
      <summary>Concatenates the invocation lists of an array of delegates.</summary>
      <param name="delegates">The array of delegates to combine.</param>
      <exception cref="T:System.ArgumentException">Not all the non-null entries in <paramref name="delegates" /> are instances of the same delegate type.</exception>
      <returns>A new delegate with an invocation list that concatenates the invocation lists of the delegates in the <paramref name="delegates" /> array. Returns <see langword="null" /> if <paramref name="delegates" /> is <see langword="null" />, if <paramref name="delegates" /> contains zero elements, or if every entry in <paramref name="delegates" /> is <see langword="null" />.</returns>
    </member>
    <member name="M:System.Delegate.CombineImpl(System.Delegate)">
      <summary>Concatenates the invocation lists of the specified multicast (combinable) delegate and the current multicast (combinable) delegate.</summary>
      <param name="d">The multicast (combinable) delegate whose invocation list to append to the end of the invocation list of the current multicast (combinable) delegate.</param>
      <exception cref="T:System.MulticastNotSupportedException">Always thrown.</exception>
      <returns>A new multicast (combinable) delegate with an invocation list that concatenates the invocation list of the current multicast (combinable) delegate and the invocation list of <paramref name="d" />, or the current multicast (combinable) delegate if <paramref name="d" /> is <see langword="null" />.</returns>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.Reflection.MethodInfo)">
      <summary>Creates a delegate of the specified type that represents the specified static or instance method, with the specified first argument.</summary>
      <param name="type">The <see cref="T:System.Type" /> of delegate to create.</param>
      <param name="firstArgument">The object to which the delegate is bound, or <see langword="null" /> to treat <paramref name="method" /> as <see langword="static" /> (<see langword="Shared" /> in Visual Basic).</param>
      <param name="method">The <see cref="T:System.Reflection.MethodInfo" /> describing the static or instance method the delegate is to represent.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="method" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.  
  
 -or-  
  
 <paramref name="type" /> is not a <see langword="RuntimeType" />. See Runtime Types in Reflection.  
  
 -or-  
  
 <paramref name="method" /> cannot be bound.  
  
 -or-  
  
 <paramref name="method" /> is not a <see langword="RuntimeMethodInfo" />. See Runtime Types in Reflection.</exception>
      <exception cref="T:System.MissingMethodException">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</exception>
      <exception cref="T:System.MethodAccessException">The caller does not have the permissions necessary to access <paramref name="method" />.</exception>
      <returns>A delegate of the specified type that represents the specified static or instance method.</returns>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.Reflection.MethodInfo,System.Boolean)">
      <summary>Creates a delegate of the specified type that represents the specified static or instance method, with the specified first argument and the specified behavior on failure to bind.</summary>
      <param name="type">A <see cref="T:System.Type" /> representing the type of delegate to create.</param>
      <param name="firstArgument">An <see cref="T:System.Object" /> that is the first argument of the method the delegate represents. For instance methods, it must be compatible with the instance type.</param>
      <param name="method">The <see cref="T:System.Reflection.MethodInfo" /> describing the static or instance method the delegate is to represent.</param>
      <param name="throwOnBindFailure">
        <see langword="true" /> to throw an exception if <paramref name="method" /> cannot be bound; otherwise, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="method" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.  
  
 -or-  
  
 <paramref name="type" /> is not a <see langword="RuntimeType" />. See Runtime Types in Reflection.  
  
 -or-  
  
 <paramref name="method" /> cannot be bound, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.  
  
 -or-  
  
 <paramref name="method" /> is not a <see langword="RuntimeMethodInfo" />. See Runtime Types in Reflection.</exception>
      <exception cref="T:System.MissingMethodException">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</exception>
      <exception cref="T:System.MethodAccessException">The caller does not have the permissions necessary to access <paramref name="method" />.</exception>
      <returns>A delegate of the specified type that represents the specified static or instance method, or <see langword="null" /> if <paramref name="throwOnBindFailure" /> is <see langword="false" /> and the delegate cannot be bound to <paramref name="method" />.</returns>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String)">
      <summary>Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</summary>
      <param name="type">The <see cref="T:System.Type" /> of delegate to create.</param>
      <param name="target">The class instance on which <paramref name="method" /> is invoked.</param>
      <param name="method">The name of the instance method that the delegate is to represent.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="target" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="method" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.  
  
 -or-  
  
 <paramref name="type" /> is not a <see langword="RuntimeType" />. See Runtime Types in Reflection.  
  
 -or-  
  
 <paramref name="method" /> is not an instance method.  
  
 -or-  
  
 <paramref name="method" /> cannot be bound, for example because it cannot be found.</exception>
      <exception cref="T:System.MissingMethodException">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</exception>
      <exception cref="T:System.MethodAccessException">The caller does not have the permissions necessary to access <paramref name="method" />.</exception>
      <returns>A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</returns>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String,System.Boolean)">
      <summary>Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance with the specified case-sensitivity.</summary>
      <param name="type">The <see cref="T:System.Type" /> of delegate to create.</param>
      <param name="target">The class instance on which <paramref name="method" /> is invoked.</param>
      <param name="method">The name of the instance method that the delegate is to represent.</param>
      <param name="ignoreCase">A Boolean indicating whether to ignore the case when comparing the name of the method.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="target" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="method" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.  
  
 -or-  
  
 <paramref name="type" /> is not a <see langword="RuntimeType" />. See Runtime Types in Reflection.  
  
 -or-  
  
 <paramref name="method" /> is not an instance method.  
  
 -or-  
  
 <paramref name="method" /> cannot be bound, for example because it cannot be found.</exception>
      <exception cref="T:System.MissingMethodException">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</exception>
      <exception cref="T:System.MethodAccessException">The caller does not have the permissions necessary to access <paramref name="method" />.</exception>
      <returns>A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</returns>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String,System.Boolean,System.Boolean)">
      <summary>Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance, with the specified case-sensitivity and the specified behavior on failure to bind.</summary>
      <param name="type">The <see cref="T:System.Type" /> of delegate to create.</param>
      <param name="target">The class instance on which <paramref name="method" /> is invoked.</param>
      <param name="method">The name of the instance method that the delegate is to represent.</param>
      <param name="ignoreCase">A Boolean indicating whether to ignore the case when comparing the name of the method.</param>
      <param name="throwOnBindFailure">
        <see langword="true" /> to throw an exception if <paramref name="method" /> cannot be bound; otherwise, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="target" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="method" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.  
  
 -or-  
  
 <paramref name="type" /> is not a <see langword="RuntimeType" />. See Runtime Types in Reflection.  
  
 -or-  
  
 <paramref name="method" /> is not an instance method.  
  
 -or-  
  
 <paramref name="method" /> cannot be bound, for example because it cannot be found, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</exception>
      <exception cref="T:System.MissingMethodException">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</exception>
      <exception cref="T:System.MethodAccessException">The caller does not have the permissions necessary to access <paramref name="method" />.</exception>
      <returns>A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</returns>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Reflection.MethodInfo)">
      <summary>Creates a delegate of the specified type to represent the specified static method.</summary>
      <param name="type">The <see cref="T:System.Type" /> of delegate to create.</param>
      <param name="method">The <see cref="T:System.Reflection.MethodInfo" /> describing the static or instance method the delegate is to represent. Only static methods are supported in the .NET Framework version 1.0 and 1.1.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="method" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.  
  
 -or-  
  
 <paramref name="type" /> is not a <see langword="RuntimeType" />. See Runtime Types in Reflection.  
  
 -or-  
  
 <paramref name="method" /> is not a static method, and the .NET Framework version is 1.0 or 1.1.  
  
 -or-  
  
 <paramref name="method" /> cannot be bound.  
  
 -or-  
  
 <paramref name="method" /> is not a <see langword="RuntimeMethodInfo" />. See Runtime Types in Reflection.</exception>
      <exception cref="T:System.MissingMethodException">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</exception>
      <exception cref="T:System.MethodAccessException">The caller does not have the permissions necessary to access <paramref name="method" />.</exception>
      <returns>A delegate of the specified type to represent the specified static method.</returns>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Reflection.MethodInfo,System.Boolean)">
      <summary>Creates a delegate of the specified type to represent the specified static method, with the specified behavior on failure to bind.</summary>
      <param name="type">The <see cref="T:System.Type" /> of delegate to create.</param>
      <param name="method">The <see cref="T:System.Reflection.MethodInfo" /> describing the static or instance method the delegate is to represent.</param>
      <param name="throwOnBindFailure">
        <see langword="true" /> to throw an exception if <paramref name="method" /> cannot be bound; otherwise, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="method" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.  
  
 -or-  
  
 <paramref name="type" /> is not a <see langword="RuntimeType" />. See Runtime Types in Reflection.  
  
 -or-  
  
 <paramref name="method" /> cannot be bound, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.  
  
 -or-  
  
 <paramref name="method" /> is not a <see langword="RuntimeMethodInfo" />. See Runtime Types in Reflection.</exception>
      <exception cref="T:System.MissingMethodException">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</exception>
      <exception cref="T:System.MethodAccessException">The caller does not have the permissions necessary to access <paramref name="method" />.</exception>
      <returns>A delegate of the specified type to represent the specified static method.</returns>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String)">
      <summary>Creates a delegate of the specified type that represents the specified static method of the specified class.</summary>
      <param name="type">The <see cref="T:System.Type" /> of delegate to create.</param>
      <param name="target">The <see cref="T:System.Type" /> representing the class that implements <paramref name="method" />.</param>
      <param name="method">The name of the static method that the delegate is to represent.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="target" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="method" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.  
  
 -or-  
  
 <paramref name="type" /> is not a <see langword="RuntimeType" />. See Runtime Types in Reflection.  
  
 -or-  
  
 <paramref name="target" /> is not a <see langword="RuntimeType" />.  
  
 -or-  
  
 <paramref name="target" /> is an open generic type. That is, its <see cref="P:System.Type.ContainsGenericParameters" /> property is <see langword="true" />.  
  
 -or-  
  
 <paramref name="method" /> is not a <see langword="static" /> method (<see langword="Shared" /> method in Visual Basic).  
  
 -or-  
  
 <paramref name="method" /> cannot be bound, for example because it cannot be found, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</exception>
      <exception cref="T:System.MissingMethodException">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</exception>
      <exception cref="T:System.MethodAccessException">The caller does not have the permissions necessary to access <paramref name="method" />.</exception>
      <returns>A delegate of the specified type that represents the specified static method of the specified class.</returns>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String,System.Boolean)">
      <summary>Creates a delegate of the specified type that represents the specified static method of the specified class, with the specified case-sensitivity.</summary>
      <param name="type">The <see cref="T:System.Type" /> of delegate to create.</param>
      <param name="target">The <see cref="T:System.Type" /> representing the class that implements <paramref name="method" />.</param>
      <param name="method">The name of the static method that the delegate is to represent.</param>
      <param name="ignoreCase">A Boolean indicating whether to ignore the case when comparing the name of the method.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="target" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="method" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.  
  
 -or-  
  
 <paramref name="type" /> is not a <see langword="RuntimeType" />. See Runtime Types in Reflection.  
  
 -or-  
  
 <paramref name="target" /> is not a <see langword="RuntimeType" />.  
  
 -or-  
  
 <paramref name="target" /> is an open generic type. That is, its <see cref="P:System.Type.ContainsGenericParameters" /> property is <see langword="true" />.  
  
 -or-  
  
 <paramref name="method" /> is not a <see langword="static" /> method (<see langword="Shared" /> method in Visual Basic).  
  
 -or-  
  
 <paramref name="method" /> cannot be bound, for example because it cannot be found.</exception>
      <exception cref="T:System.MissingMethodException">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</exception>
      <exception cref="T:System.MethodAccessException">The caller does not have the permissions necessary to access <paramref name="method" />.</exception>
      <returns>A delegate of the specified type that represents the specified static method of the specified class.</returns>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String,System.Boolean,System.Boolean)">
      <summary>Creates a delegate of the specified type that represents the specified static method of the specified class, with the specified case-sensitivity and the specified behavior on failure to bind.</summary>
      <param name="type">The <see cref="T:System.Type" /> of delegate to create.</param>
      <param name="target">The <see cref="T:System.Type" /> representing the class that implements <paramref name="method" />.</param>
      <param name="method">The name of the static method that the delegate is to represent.</param>
      <param name="ignoreCase">A Boolean indicating whether to ignore the case when comparing the name of the method.</param>
      <param name="throwOnBindFailure">
        <see langword="true" /> to throw an exception if <paramref name="method" /> cannot be bound; otherwise, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="target" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="method" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.  
  
 -or-  
  
 <paramref name="type" /> is not a <see langword="RuntimeType" />. See Runtime Types in Reflection.  
  
 -or-  
  
 <paramref name="target" /> is not a <see langword="RuntimeType" />.  
  
 -or-  
  
 <paramref name="target" /> is an open generic type. That is, its <see cref="P:System.Type.ContainsGenericParameters" /> property is <see langword="true" />.  
  
 -or-  
  
 <paramref name="method" /> is not a <see langword="static" /> method (<see langword="Shared" /> method in Visual Basic).  
  
 -or-  
  
 <paramref name="method" /> cannot be bound, for example because it cannot be found, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</exception>
      <exception cref="T:System.MissingMethodException">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</exception>
      <exception cref="T:System.MethodAccessException">The caller does not have the permissions necessary to access <paramref name="method" />.</exception>
      <returns>A delegate of the specified type that represents the specified static method of the specified class.</returns>
    </member>
    <member name="M:System.Delegate.DynamicInvoke(System.Object[])">
      <summary>Dynamically invokes (late-bound) the method represented by the current delegate.</summary>
      <param name="args">An array of objects that are the arguments to pass to the method represented by the current delegate.  
  
 -or-  
  
 <see langword="null" />, if the method represented by the current delegate does not require arguments.</param>
      <exception cref="T:System.MemberAccessException">The caller does not have access to the method represented by the delegate (for example, if the method is private).  
  
 -or-  
  
 The number, order, or type of parameters listed in <paramref name="args" /> is invalid.</exception>
      <exception cref="T:System.ArgumentException">The method represented by the delegate is invoked on an object or a class that does not support it.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">The method represented by the delegate is an instance method and the target object is <see langword="null" />.  
  
 -or-  
  
 One of the encapsulated methods throws an exception.</exception>
      <returns>The object returned by the method represented by the delegate.</returns>
    </member>
    <member name="M:System.Delegate.DynamicInvokeImpl(System.Object[])">
      <summary>Dynamically invokes (late-bound) the method represented by the current delegate.</summary>
      <param name="args">An array of objects that are the arguments to pass to the method represented by the current delegate.  
  
 -or-  
  
 <see langword="null" />, if the method represented by the current delegate does not require arguments.</param>
      <exception cref="T:System.MemberAccessException">The caller does not have access to the method represented by the delegate (for example, if the method is private).  
  
 -or-  
  
 The number, order, or type of parameters listed in <paramref name="args" /> is invalid.</exception>
      <exception cref="T:System.ArgumentException">The method represented by the delegate is invoked on an object or a class that does not support it.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">The method represented by the delegate is an instance method and the target object is <see langword="null" />.  
  
 -or-  
  
 One of the encapsulated methods throws an exception.</exception>
      <returns>The object returned by the method represented by the delegate.</returns>
    </member>
    <member name="M:System.Delegate.Equals(System.Object)">
      <summary>Determines whether the specified object and the current delegate are of the same type and share the same targets, methods, and invocation list.</summary>
      <param name="obj">The object to compare with the current delegate.</param>
      <exception cref="T:System.MemberAccessException">The caller does not have access to the method represented by the delegate (for example, if the method is private).</exception>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> and the current delegate have the same targets, methods, and invocation list; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Delegate.GetHashCode">
      <summary>Returns a hash code for the delegate.</summary>
      <returns>A hash code for the delegate.</returns>
    </member>
    <member name="M:System.Delegate.GetInvocationList">
      <summary>Returns the invocation list of the delegate.</summary>
      <returns>An array of delegates representing the invocation list of the current delegate.</returns>
    </member>
    <member name="M:System.Delegate.GetMethodImpl">
      <summary>Gets the static method represented by the current delegate.</summary>
      <exception cref="T:System.MemberAccessException">The caller does not have access to the method represented by the delegate (for example, if the method is private).</exception>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> describing the static method represented by the current delegate.</returns>
    </member>
    <member name="M:System.Delegate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Not supported.</summary>
      <param name="info">Not supported.</param>
      <param name="context">Not supported.</param>
      <exception cref="T:System.NotSupportedException">This method is not supported.</exception>
    </member>
    <member name="M:System.Delegate.op_Equality(System.Delegate,System.Delegate)">
      <summary>Determines whether the specified delegates are equal.</summary>
      <param name="d1">The first delegate to compare.</param>
      <param name="d2">The second delegate to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="d1" /> is equal to <paramref name="d2" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Delegate.op_Inequality(System.Delegate,System.Delegate)">
      <summary>Determines whether the specified delegates are not equal.</summary>
      <param name="d1">The first delegate to compare.</param>
      <param name="d2">The second delegate to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="d1" /> is not equal to <paramref name="d2" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Delegate.Remove(System.Delegate,System.Delegate)">
      <summary>Removes the last occurrence of the invocation list of a delegate from the invocation list of another delegate.</summary>
      <param name="source">The delegate from which to remove the invocation list of <paramref name="value" />.</param>
      <param name="value">The delegate that supplies the invocation list to remove from the invocation list of <paramref name="source" />.</param>
      <exception cref="T:System.MemberAccessException">The caller does not have access to the method represented by the delegate (for example, if the method is private).</exception>
      <exception cref="T:System.ArgumentException">The delegate types do not match.</exception>
      <returns>A new delegate with an invocation list formed by taking the invocation list of <paramref name="source" /> and removing the last occurrence of the invocation list of <paramref name="value" />, if the invocation list of <paramref name="value" /> is found within the invocation list of <paramref name="source" />. Returns <paramref name="source" /> if <paramref name="value" /> is <see langword="null" /> or if the invocation list of <paramref name="value" /> is not found within the invocation list of <paramref name="source" />. Returns a null reference if the invocation list of <paramref name="value" /> is equal to the invocation list of <paramref name="source" /> or if <paramref name="source" /> is a null reference.</returns>
    </member>
    <member name="M:System.Delegate.RemoveAll(System.Delegate,System.Delegate)">
      <summary>Removes all occurrences of the invocation list of a delegate from the invocation list of another delegate.</summary>
      <param name="source">The delegate from which to remove the invocation list of <paramref name="value" />.</param>
      <param name="value">The delegate that supplies the invocation list to remove from the invocation list of <paramref name="source" />.</param>
      <exception cref="T:System.MemberAccessException">The caller does not have access to the method represented by the delegate (for example, if the method is private).</exception>
      <exception cref="T:System.ArgumentException">The delegate types do not match.</exception>
      <returns>A new delegate with an invocation list formed by taking the invocation list of <paramref name="source" /> and removing all occurrences of the invocation list of <paramref name="value" />, if the invocation list of <paramref name="value" /> is found within the invocation list of <paramref name="source" />. Returns <paramref name="source" /> if <paramref name="value" /> is <see langword="null" /> or if the invocation list of <paramref name="value" /> is not found within the invocation list of <paramref name="source" />. Returns a null reference if the invocation list of <paramref name="value" /> is equal to the invocation list of <paramref name="source" />, if <paramref name="source" /> contains only a series of invocation lists that are equal to the invocation list of <paramref name="value" />, or if <paramref name="source" /> is a null reference.</returns>
    </member>
    <member name="M:System.Delegate.RemoveImpl(System.Delegate)">
      <summary>Removes the invocation list of a delegate from the invocation list of another delegate.</summary>
      <param name="d">The delegate that supplies the invocation list to remove from the invocation list of the current delegate.</param>
      <exception cref="T:System.MemberAccessException">The caller does not have access to the method represented by the delegate (for example, if the method is private).</exception>
      <returns>A new delegate with an invocation list formed by taking the invocation list of the current delegate and removing the invocation list of <paramref name="value" />, if the invocation list of <paramref name="value" /> is found within the current delegate's invocation list. Returns the current delegate if <paramref name="value" /> is <see langword="null" /> or if the invocation list of <paramref name="value" /> is not found within the current delegate's invocation list. Returns <see langword="null" /> if the invocation list of <paramref name="value" /> is equal to the current delegate's invocation list.</returns>
    </member>
    <member name="P:System.Delegate.Method">
      <summary>Gets the method represented by the delegate.</summary>
      <exception cref="T:System.MemberAccessException">The caller does not have access to the method represented by the delegate (for example, if the method is private).</exception>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> describing the method represented by the delegate.</returns>
    </member>
    <member name="P:System.Delegate.Target">
      <summary>Gets the class instance on which the current delegate invokes the instance method.</summary>
      <returns>The object on which the current delegate invokes the instance method, if the delegate represents an instance method; <see langword="null" /> if the delegate represents a static method.</returns>
    </member>
    <member name="T:System.Diagnostics.ConditionalAttribute">
      <summary>Indicates to compilers that a method call or attribute should be ignored unless a specified conditional compilation symbol is defined.</summary>
    </member>
    <member name="M:System.Diagnostics.ConditionalAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.ConditionalAttribute" /> class.</summary>
      <param name="conditionString">A string that specifies the case-sensitive conditional compilation symbol that is associated with the attribute.</param>
    </member>
    <member name="P:System.Diagnostics.ConditionalAttribute.ConditionString">
      <summary>Gets the conditional compilation symbol that is associated with the <see cref="T:System.Diagnostics.ConditionalAttribute" /> attribute.</summary>
      <returns>A string that specifies the case-sensitive conditional compilation symbol that is associated with the <see cref="T:System.Diagnostics.ConditionalAttribute" /> attribute.</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.Contract">
      <summary>Contains static methods for representing program contracts such as preconditions, postconditions, and object invariants.</summary>
    </member>
    <member name="E:System.Diagnostics.Contracts.Contract.ContractFailed">
      <summary>Occurs when a contract fails.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean)">
      <summary>Checks for a condition; if the condition is <see langword="false" />, follows the escalation policy set for the analyzer.</summary>
      <param name="condition">The conditional expression to test.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean,System.String)">
      <summary>Checks for a condition; if the condition is <see langword="false" />, follows the escalation policy set by the analyzer and displays the specified message.</summary>
      <param name="condition">The conditional expression to test.</param>
      <param name="userMessage">A message to display if the condition is not met.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean)">
      <summary>Instructs code analysis tools to assume that the specified condition is <see langword="true" />, even if it cannot be statically proven to always be <see langword="true" />.</summary>
      <param name="condition">The conditional expression to assume <see langword="true" />.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean,System.String)">
      <summary>Instructs code analysis tools to assume that a condition is <see langword="true" />, even if it cannot be statically proven to always be <see langword="true" />, and displays a message if the assumption fails.</summary>
      <param name="condition">The conditional expression to assume <see langword="true" />.</param>
      <param name="userMessage">The message to post if the assumption fails.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.EndContractBlock">
      <summary>Marks the end of the contract section when a method's contracts contain only preconditions in the <see langword="if" />-<see langword="then" />-<see langword="throw" /> form.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)">
      <summary>Specifies a postcondition contract for the enclosing method or property.</summary>
      <param name="condition">The conditional expression to test. The expression may include <see cref="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)" />, <see cref="M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)" />, and <see cref="M:System.Diagnostics.Contracts.Contract.Result``1" /> values.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean,System.String)">
      <summary>Specifies a postcondition contract for a provided exit condition and a message to display if the condition is <see langword="false" />.</summary>
      <param name="condition">The conditional expression to test. The expression may include <see cref="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)" /> and <see cref="M:System.Diagnostics.Contracts.Contract.Result``1" /> values.</param>
      <param name="userMessage">The message to display if the expression is not <see langword="true" />.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean)">
      <summary>Specifies a postcondition contract for the enclosing method or property, based on the provided exception and condition.</summary>
      <param name="condition">The conditional expression to test.</param>
      <typeparam name="TException">The type of exception that invokes the postcondition check.</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean,System.String)">
      <summary>Specifies a postcondition contract and a message to display if the condition is <see langword="false" /> for the enclosing method or property, based on the provided exception and condition.</summary>
      <param name="condition">The conditional expression to test.</param>
      <param name="userMessage">The message to display if the expression is <see langword="false" />.</param>
      <typeparam name="TException">The type of exception that invokes the postcondition check.</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Exists(System.Int32,System.Int32,System.Predicate{System.Int32})">
      <summary>Determines whether a specified test is true for any integer within a range of integers.</summary>
      <param name="fromInclusive">The first integer to pass to <paramref name="predicate" />.</param>
      <param name="toExclusive">One more than the last integer to pass to <paramref name="predicate" />.</param>
      <param name="predicate">The function to evaluate for any value of the integer in the specified range.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="toExclusive" /> is less than <paramref name="fromInclusive" />.</exception>
      <returns>
        <see langword="true" /> if <paramref name="predicate" /> returns <see langword="true" /> for any integer starting from <paramref name="fromInclusive" /> to <paramref name="toExclusive" /> - 1.</returns>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Exists``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
      <summary>Determines whether an element within a collection of elements exists within a function.</summary>
      <param name="collection">The collection from which elements of type <c>T</c> will be drawn to pass to <paramref name="predicate" />.</param>
      <param name="predicate">The function to evaluate for an element in <paramref name="collection" />.</param>
      <typeparam name="T">The type that is contained in <paramref name="collection" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> or <paramref name="predicate" /> is <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> if and only if <paramref name="predicate" /> returns <see langword="true" /> for any element of type <paramref name="T" /> in <paramref name="collection" />.</returns>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.ForAll(System.Int32,System.Int32,System.Predicate{System.Int32})">
      <summary>Determines whether a particular condition is valid for all integers in a specified range.</summary>
      <param name="fromInclusive">The first integer to pass to <paramref name="predicate" />.</param>
      <param name="toExclusive">One more than the last integer to pass to <paramref name="predicate" />.</param>
      <param name="predicate">The function to evaluate for the existence of the integers in the specified range.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="toExclusive" /> is less than <paramref name="fromInclusive" />.</exception>
      <returns>
        <see langword="true" /> if <paramref name="predicate" /> returns <see langword="true" /> for all integers starting from <paramref name="fromInclusive" /> to <paramref name="toExclusive" /> - 1.</returns>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.ForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
      <summary>Determines whether all the elements in a collection exist within a function.</summary>
      <param name="collection">The collection from which elements of type <c>T</c> will be drawn to pass to <paramref name="predicate" />.</param>
      <param name="predicate">The function to evaluate for the existence of all the elements in <paramref name="collection" />.</param>
      <typeparam name="T">The type that is contained in <paramref name="collection" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> or <paramref name="predicate" /> is <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> if and only if <paramref name="predicate" /> returns <see langword="true" /> for all elements of type <paramref name="T" /> in <paramref name="collection" />.</returns>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean)">
      <summary>Specifies an invariant contract for the enclosing method or property.</summary>
      <param name="condition">The conditional expression to test.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean,System.String)">
      <summary>Specifies an invariant contract for the enclosing method or property, and displays a message if the condition for the contract fails.</summary>
      <param name="condition">The conditional expression to test.</param>
      <param name="userMessage">The message to display if the condition is <see langword="false" />.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)">
      <summary>Represents values as they were at the start of a method or property.</summary>
      <param name="value">The value to represent (field or parameter).</param>
      <typeparam name="T">The type of value.</typeparam>
      <returns>The value of the parameter or field at the start of a method or property.</returns>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean)">
      <summary>Specifies a precondition contract for the enclosing method or property.</summary>
      <param name="condition">The conditional expression to test.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean,System.String)">
      <summary>Specifies a precondition contract for the enclosing method or property, and displays a message if the condition for the contract fails.</summary>
      <param name="condition">The conditional expression to test.</param>
      <param name="userMessage">The message to display if the condition is <see langword="false" />.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean)">
      <summary>Specifies a precondition contract for the enclosing method or property, and throws an exception if the condition for the contract fails.</summary>
      <param name="condition">The conditional expression to test.</param>
      <typeparam name="TException">The exception to throw if the condition is <see langword="false" />.</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean,System.String)">
      <summary>Specifies a precondition contract for the enclosing method or property, and throws an exception with the provided message if the condition for the contract fails.</summary>
      <param name="condition">The conditional expression to test.</param>
      <param name="userMessage">The message to display if the condition is <see langword="false" />.</param>
      <typeparam name="TException">The exception to throw if the condition is <see langword="false" />.</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Result``1">
      <summary>Represents the return value of a method or property.</summary>
      <typeparam name="T">Type of return value of the enclosing method or property.</typeparam>
      <returns>Return value of the enclosing method or property.</returns>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)">
      <summary>Represents the final (output) value of an <see langword="out" /> parameter when returning from a method.</summary>
      <param name="value">The <see langword="out" /> parameter.</param>
      <typeparam name="T">The type of the <see langword="out" /> parameter.</typeparam>
      <returns>The output value of the <see langword="out" /> parameter.</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractAbbreviatorAttribute">
      <summary>Defines abbreviations that you can use in place of the full contract syntax.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractAbbreviatorAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Contracts.ContractAbbreviatorAttribute" /> class.</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute">
      <summary>Enables the factoring of legacy <see langword="if-then-throw" /> code into separate methods for reuse, and provides full control over thrown exceptions and arguments.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute" /> class.</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractClassAttribute">
      <summary>Specifies that a separate type contains the code contracts for this type.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractClassAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Contracts.ContractClassAttribute" /> class.</summary>
      <param name="typeContainingContracts">The type that contains the code contracts for this type.</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractClassAttribute.TypeContainingContracts">
      <summary>Gets the type that contains the code contracts for this type.</summary>
      <returns>The type that contains the code contracts for this type.</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractClassForAttribute">
      <summary>Specifies that a class is a contract for a type.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractClassForAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Contracts.ContractClassForAttribute" /> class, specifying the type the current class is a contract for.</summary>
      <param name="typeContractsAreFor">The type the current class is a contract for.</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractClassForAttribute.TypeContractsAreFor">
      <summary>Gets the type that this code contract applies to.</summary>
      <returns>The type that this contract applies to.</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractFailedEventArgs">
      <summary>Provides methods and data for the <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" /> event.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractFailedEventArgs.#ctor(System.Diagnostics.Contracts.ContractFailureKind,System.String,System.String,System.Exception)">
      <summary>Provides data for the <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" /> event.</summary>
      <param name="failureKind">One of the enumeration values that specifies the contract that failed.</param>
      <param name="message">The message for the event.</param>
      <param name="condition">The condition for the event.</param>
      <param name="originalException">The exception that caused the event.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractFailedEventArgs.SetHandled">
      <summary>Sets the <see cref="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Handled" /> property to <see langword="true" />.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractFailedEventArgs.SetUnwind">
      <summary>Sets the <see cref="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Unwind" /> property to <see langword="true" />.</summary>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Condition">
      <summary>Gets the condition for the failure of the contract.</summary>
      <returns>The condition for the failure.</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.FailureKind">
      <summary>Gets the type of contract that failed.</summary>
      <returns>One of the enumeration values that specifies the type of contract that failed.</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Handled">
      <summary>Indicates whether the <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" /> event has been handled.</summary>
      <returns>
        <see langword="true" /> if the event has been handled; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Message">
      <summary>Gets the message that describes the <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" /> event.</summary>
      <returns>The message that describes the event.</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.OriginalException">
      <summary>Gets the original exception that caused the <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" /> event.</summary>
      <returns>The exception that caused the event.</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Unwind">
      <summary>Indicates whether the code contract escalation policy should be applied.</summary>
      <returns>
        <see langword="true" /> to apply the escalation policy; otherwise, <see langword="false" />. The default is <see langword="false" />.</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractFailureKind">
      <summary>Specifies the type of contract that failed.</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Assert">
      <summary>An <see cref="Overload:System.Diagnostics.Contracts.Contract.Assert" /> contract failed.</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Assume">
      <summary>An <see cref="Overload:System.Diagnostics.Contracts.Contract.Assume" /> contract failed.</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Invariant">
      <summary>An <see cref="Overload:System.Diagnostics.Contracts.Contract.Invariant" /> contract failed.</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Postcondition">
      <summary>An <see cref="Overload:System.Diagnostics.Contracts.Contract.Ensures" /> contract failed.</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.PostconditionOnException">
      <summary>An <see cref="Overload:System.Diagnostics.Contracts.Contract.EnsuresOnThrow" /> contract failed.</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Precondition">
      <summary>A <see cref="Overload:System.Diagnostics.Contracts.Contract.Requires" /> contract failed.</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractInvariantMethodAttribute">
      <summary>Marks a method as being the invariant method for a class.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractInvariantMethodAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Contracts.ContractInvariantMethodAttribute" /> class.</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractOptionAttribute">
      <summary>Enables you to set contract and tool options at assembly, type, or method granularity.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractOptionAttribute.#ctor(System.String,System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Contracts.ContractOptionAttribute" /> class by using the provided category, setting, and enable/disable value.</summary>
      <param name="category">The category for the option to be set.</param>
      <param name="setting">The option setting.</param>
      <param name="enabled">
        <see langword="true" /> to enable the option; <see langword="false" /> to disable the option.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractOptionAttribute.#ctor(System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Contracts.ContractOptionAttribute" /> class by using the provided category, setting, and value.</summary>
      <param name="category">The category of the option to be set.</param>
      <param name="setting">The option setting.</param>
      <param name="value">The value for the setting.</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractOptionAttribute.Category">
      <summary>Gets the category of the option.</summary>
      <returns>The category of the option.</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractOptionAttribute.Enabled">
      <summary>Determines if an option is enabled.</summary>
      <returns>
        <see langword="true" /> if the option is enabled; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractOptionAttribute.Setting">
      <summary>Gets the setting for the option.</summary>
      <returns>The setting for the option.</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractOptionAttribute.Value">
      <summary>Gets the value for the option.</summary>
      <returns>The value for the option.</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute">
      <summary>Specifies that a field can be used in method contracts when the field has less visibility than the method.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute" /> class.</summary>
      <param name="name">The property name to apply to the field.</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute.Name">
      <summary>Gets the property name to be applied to the field.</summary>
      <returns>The property name to be applied to the field.</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute">
      <summary>Specifies that an assembly is a reference assembly that contains contracts.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute" /> class.</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute">
      <summary>Identifies a member that has no run-time behavior.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute" /> class.</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractVerificationAttribute">
      <summary>Instructs analysis tools to assume the correctness of an assembly, type, or member without performing static verification.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractVerificationAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Contracts.ContractVerificationAttribute" /> class.</summary>
      <param name="value">
        <see langword="true" /> to require verification; otherwise, <see langword="false" />.</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractVerificationAttribute.Value">
      <summary>Gets the value that indicates whether to verify the contract of the target.</summary>
      <returns>
        <see langword="true" /> if verification is required; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.PureAttribute">
      <summary>Indicates that a type or method is pure, that is, it does not make any visible state changes.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.PureAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Contracts.PureAttribute" /> class.</summary>
    </member>
    <member name="T:System.Diagnostics.DebuggableAttribute">
      <summary>Modifies code generation for runtime just-in-time (JIT) debugging. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Diagnostics.DebuggableAttribute.#ctor(System.Boolean,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.DebuggableAttribute" /> class, using the specified tracking and optimization options for the just-in-time (JIT) compiler.</summary>
      <param name="isJITTrackingEnabled">
        <see langword="true" /> to enable debugging; otherwise, <see langword="false" />.</param>
      <param name="isJITOptimizerDisabled">
        <see langword="true" /> to disable the optimizer for execution; otherwise, <see langword="false" />.</param>
    </member>
    <member name="M:System.Diagnostics.DebuggableAttribute.#ctor(System.Diagnostics.DebuggableAttribute.DebuggingModes)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.DebuggableAttribute" /> class, using the specified debugging modes for the just-in-time (JIT) compiler.</summary>
      <param name="modes">A bitwise combination of the <see cref="T:System.Diagnostics.DebuggableAttribute.DebuggingModes" /> values specifying the debugging mode for the JIT compiler.</param>
    </member>
    <member name="P:System.Diagnostics.DebuggableAttribute.DebuggingFlags">
      <summary>Gets the debugging modes for the attribute.</summary>
      <returns>A bitwise combination of the <see cref="T:System.Diagnostics.DebuggableAttribute.DebuggingModes" /> values describing the debugging mode for the just-in-time (JIT) compiler. The default is <see cref="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.Default" />.</returns>
    </member>
    <member name="P:System.Diagnostics.DebuggableAttribute.IsJITOptimizerDisabled">
      <summary>Gets a value that indicates whether the runtime optimizer is disabled.</summary>
      <returns>
        <see langword="true" /> if the runtime optimizer is disabled; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Diagnostics.DebuggableAttribute.IsJITTrackingEnabled">
      <summary>Gets a value that indicates whether the runtime will track information during code generation for the debugger.</summary>
      <returns>
        <see langword="true" /> if the runtime will track information during code generation for the debugger; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Diagnostics.DebuggableAttribute.DebuggingModes">
      <summary>Specifies the debugging mode for the just-in-time (JIT) compiler.</summary>
    </member>
    <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.Default">
      <summary>Instructs the just-in-time (JIT) compiler to use its default behavior, which includes enabling optimizations, disabling Edit and Continue support, and using symbol store sequence points if present. Starting with the .NET Framework version 2.0, JIT tracking information, the Microsoft intermediate language (MSIL) offset to the native-code offset within a method, is always generated.</summary>
    </member>
    <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.DisableOptimizations">
      <summary>Disable optimizations performed by the compiler to make your output file smaller, faster, and more efficient. Optimizations result in code rearrangement in the output file, which can make debugging difficult. Typically optimization should be disabled while debugging. In versions 2.0 or later, combine this value with Default (Default | DisableOptimizations) to enable JIT tracking and disable optimizations.</summary>
    </member>
    <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.EnableEditAndContinue">
      <summary>Enable edit and continue. Edit and continue enables you to make changes to your source code while your program is in break mode. The ability to edit and continue is compiler dependent.</summary>
    </member>
    <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints">
      <summary>Use the implicit MSIL sequence points, not the program database (PDB) sequence points. The symbolic information normally includes at least one Microsoft intermediate language (MSIL) offset for each source line. When the just-in-time (JIT) compiler is about to compile a method, it asks the profiling services for a list of MSIL offsets that should be preserved. These MSIL offsets are called sequence points.</summary>
    </member>
    <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.None">
      <summary>Starting with the .NET Framework version 2.0, JIT tracking information is always generated, and this flag has the same effect as <see cref="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.Default" />, except that it sets the <see cref="P:System.Diagnostics.DebuggableAttribute.IsJITTrackingEnabled" /> property to <see langword="false" />. However, because JIT tracking is always enabled, the property value is ignored in version 2.0 or later.  
  
 Note that, unlike the <see cref="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.DisableOptimizations" /> flag, the <see cref="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.None" /> flag cannot be used to disable JIT optimizations.</summary>
    </member>
    <member name="T:System.Diagnostics.Tracing.EventAttribute">
      <summary>Specifies additional event schema information for an event.</summary>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventAttribute.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Tracing.EventAttribute" /> class with the specified event identifier.</summary>
      <param name="eventId">The event identifier for the event.</param>
    </member>
    <member name="P:System.Diagnostics.Tracing.EventAttribute.ActivityOptions">
      <summary>Specifies the behavior of the start and stop events of an activity. An activity is the region of time in an app between the start and the stop.</summary>
      <returns>Returns <see cref="T:System.Diagnostics.Tracing.EventActivityOptions" />.</returns>
    </member>
    <member name="P:System.Diagnostics.Tracing.EventAttribute.Channel">
      <summary>Gets or sets an additional event log where the event should be written.</summary>
      <returns>An additional event log where the event should be written.</returns>
    </member>
    <member name="P:System.Diagnostics.Tracing.EventAttribute.EventId">
      <summary>Gets or sets the identifier for the event.</summary>
      <returns>The event identifier. This value should be between 0 and 65535.</returns>
    </member>
    <member name="P:System.Diagnostics.Tracing.EventAttribute.Keywords">
      <summary>Gets or sets the keywords for the event.</summary>
      <returns>A bitwise combination of the enumeration values.</returns>
    </member>
    <member name="P:System.Diagnostics.Tracing.EventAttribute.Level">
      <summary>Gets or sets the level for the event.</summary>
      <returns>One of the enumeration values that specifies the level for the event.</returns>
    </member>
    <member name="P:System.Diagnostics.Tracing.EventAttribute.Message">
      <summary>Gets or sets the message for the event.</summary>
      <returns>The message for the event.</returns>
    </member>
    <member name="P:System.Diagnostics.Tracing.EventAttribute.Opcode">
      <summary>Gets or sets the operation code for the event.</summary>
      <returns>One of the enumeration values that specifies the operation code.</returns>
    </member>
    <member name="P:System.Diagnostics.Tracing.EventAttribute.Tags">
      <summary>Gets or sets the <see cref="T:System.Diagnostics.Tracing.EventTags" /> value for this <see cref="T:System.Diagnostics.Tracing.EventAttribute" /> object. An event tag is a user-defined value that is passed through when the event is logged.</summary>
      <returns>The <see cref="T:System.Diagnostics.Tracing.EventTags" /> value for this <see cref="T:System.Diagnostics.Tracing.EventAttribute" /> object. An event tag is a user-defined value that is passed through when the event is logged.</returns>
    </member>
    <member name="P:System.Diagnostics.Tracing.EventAttribute.Task">
      <summary>Gets or sets the task for the event.</summary>
      <returns>The task for the event.</returns>
    </member>
    <member name="P:System.Diagnostics.Tracing.EventAttribute.Version">
      <summary>Gets or sets the version of the event.</summary>
      <returns>The version of the event.</returns>
    </member>
    <member name="T:System.Diagnostics.Tracing.EventCommand">
      <summary>Describes the command (<see cref="P:System.Diagnostics.Tracing.EventCommandEventArgs.Command" /> property) that is passed to the <see cref="M:System.Diagnostics.Tracing.EventSource.OnEventCommand(System.Diagnostics.Tracing.EventCommandEventArgs)" /> callback.</summary>
    </member>
    <member name="F:System.Diagnostics.Tracing.EventCommand.Disable">
      <summary>Disable the event.</summary>
    </member>
    <member name="F:System.Diagnostics.Tracing.EventCommand.Enable">
      <summary>Enable the event.</summary>
    </member>
    <member name="F:System.Diagnostics.Tracing.EventCommand.SendManifest">
      <summary>Send the manifest.</summary>
    </member>
    <member name="F:System.Diagnostics.Tracing.EventCommand.Update">
      <summary>Update the event.</summary>
    </member>
    <member name="T:System.Diagnostics.Tracing.EventCommandEventArgs">
      <summary>Provides the arguments for the <see cref="M:System.Diagnostics.Tracing.EventSource.OnEventCommand(System.Diagnostics.Tracing.EventCommandEventArgs)" /> callback.</summary>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventCommandEventArgs.DisableEvent(System.Int32)">
      <summary>Disables the event that have the specified identifier.</summary>
      <param name="eventId">The identifier of the event to disable.</param>
      <returns>
        <see langword="true" /> if <paramref name="eventId" /> is in range; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventCommandEventArgs.EnableEvent(System.Int32)">
      <summary>Enables the event that has the specified identifier.</summary>
      <param name="eventId">The identifier of the event to enable.</param>
      <returns>
        <see langword="true" /> if <paramref name="eventId" /> is in range; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Diagnostics.Tracing.EventCommandEventArgs.Arguments">
      <summary>Gets the array of arguments for the callback.</summary>
      <returns>An array of callback arguments.</returns>
    </member>
    <member name="P:System.Diagnostics.Tracing.EventCommandEventArgs.Command">
      <summary>Gets the command for the callback.</summary>
      <returns>The callback command.</returns>
    </member>
    <member name="T:System.Diagnostics.Tracing.EventKeywords">
      <summary>Defines the standard keywords that apply to events.</summary>
    </member>
    <member name="F:System.Diagnostics.Tracing.EventKeywords.All">
      <summary>All the bits are set to 1, representing every possible group of events.</summary>
    </member>
    <member name="F:System.Diagnostics.Tracing.EventKeywords.AuditFailure">
      <summary>Attached to all failed security audit events. Use this keyword only  for events in the security log.</summary>
    </member>
    <member name="F:System.Diagnostics.Tracing.EventKeywords.AuditSuccess">
      <summary>Attached to all successful security audit events. Use this keyword only for events in the security log.</summary>
    </member>
    <member name="F:System.Diagnostics.Tracing.EventKeywords.CorrelationHint">
      <summary>Attached to transfer events where the related activity ID (correlation ID) is a computed value and is not guaranteed to be unique (that is, it is not a real GUID).</summary>
    </member>
    <member name="F:System.Diagnostics.Tracing.EventKeywords.EventLogClassic">
      <summary>Attached to events that are raised by using the <see langword="RaiseEvent" /> function.</summary>
    </member>
    <member name="F:System.Diagnostics.Tracing.EventKeywords.MicrosoftTelemetry">
      <summary>Attached to all Microsoft telemetry events.</summary>
    </member>
    <member name="F:System.Diagnostics.Tracing.EventKeywords.None">
      <summary>No filtering on keywords is performed when the event is published.</summary>
    </member>
    <member name="F:System.Diagnostics.Tracing.EventKeywords.Sqm">
      <summary>Attached to all Service Quality Mechanism (SQM) events.</summary>
    </member>
    <member name="F:System.Diagnostics.Tracing.EventKeywords.WdiContext">
      <summary>Attached to all Windows Diagnostics Infrastructure (WDI) context events.</summary>
    </member>
    <member name="F:System.Diagnostics.Tracing.EventKeywords.WdiDiagnostic">
      <summary>Attached to all Windows Diagnostics Infrastructure (WDI) diagnostic events.</summary>
    </member>
    <member name="T:System.Diagnostics.Tracing.EventLevel">
      <summary>Identifies the level of an event.</summary>
    </member>
    <member name="F:System.Diagnostics.Tracing.EventLevel.Critical">
      <summary>This level corresponds to a critical error, which is a serious error that has caused a major failure.</summary>
    </member>
    <member name="F:System.Diagnostics.Tracing.EventLevel.Error">
      <summary>This level adds standard errors that signify a problem.</summary>
    </member>
    <member name="F:System.Diagnostics.Tracing.EventLevel.Informational">
      <summary>This level adds informational events or messages that are not errors. These events can help trace the progress or state of an application.</summary>
    </member>
    <member name="F:System.Diagnostics.Tracing.EventLevel.LogAlways">
      <summary>No level filtering is done on the event.</summary>
    </member>
    <member name="F:System.Diagnostics.Tracing.EventLevel.Verbose">
      <summary>This level adds lengthy events or messages. It causes all events to be logged.</summary>
    </member>
    <member name="F:System.Diagnostics.Tracing.EventLevel.Warning">
      <summary>This level adds warning events (for example, events that are published because a disk is nearing full capacity).</summary>
    </member>
    <member name="T:System.Diagnostics.Tracing.EventListener">
      <summary>Provides methods for enabling and disabling events from event sources.</summary>
    </member>
    <member name="E:System.Diagnostics.Tracing.EventListener.EventSourceCreated">
      <summary>Occurs when an event source (<see cref="T:System.Diagnostics.Tracing.EventSource" /> object) is attached to the dispatcher.</summary>
    </member>
    <member name="E:System.Diagnostics.Tracing.EventListener.EventWritten">
      <summary>Occurs when an event has been written by an event source (<see cref="T:System.Diagnostics.Tracing.EventSource" /> object) for which the event listener has enabled events.</summary>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventListener.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Diagnostics.Tracing.EventListener" /> class.</summary>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventListener.DisableEvents(System.Diagnostics.Tracing.EventSource)">
      <summary>Disables all events for the specified event source.</summary>
      <param name="eventSource">The event source to disable events for.</param>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventListener.Dispose">
      <summary>Releases the resources used by the current instance of the <see cref="T:System.Diagnostics.Tracing.EventListener" /> class.</summary>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel)">
      <summary>Enables events for the specified event source that has the specified verbosity level or lower.</summary>
      <param name="eventSource">The event source to enable events for.</param>
      <param name="level">The level of events to enable.</param>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords)">
      <summary>Enables events for the specified event source that has the specified verbosity level or lower, and matching keyword flags.</summary>
      <param name="eventSource">The event source to enable events for.</param>
      <param name="level">The level of events to enable.</param>
      <param name="matchAnyKeyword">The keyword flags necessary to enable the events.</param>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords,System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>Enables events for the specified event source that has the specified verbosity level or lower, matching event keyword flag, and matching arguments.</summary>
      <param name="eventSource">The event source to enable events for.</param>
      <param name="level">The level of events to enable.</param>
      <param name="matchAnyKeyword">The keyword flags necessary to enable the events.</param>
      <param name="arguments">The arguments to be matched to enable the events.</param>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventListener.EventSourceIndex(System.Diagnostics.Tracing.EventSource)">
      <summary>Gets a small non-negative number that represents the specified event source.</summary>
      <param name="eventSource">The event source to find the index for.</param>
      <returns>A small non-negative number that represents the specified event source.</returns>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventListener.OnEventSourceCreated(System.Diagnostics.Tracing.EventSource)">
      <summary>Called for all existing event sources when the event listener is created and when a new event source is attached to the listener.</summary>
      <param name="eventSource">The event source.</param>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventListener.OnEventWritten(System.Diagnostics.Tracing.EventWrittenEventArgs)">
      <summary>Called whenever an event has been written by an event source for which the event listener has enabled events.</summary>
      <param name="eventData">The event arguments that describe the event.</param>
    </member>
    <member name="T:System.Diagnostics.Tracing.EventOpcode">
      <summary>Defines the standard operation codes that the event source attaches to events.</summary>
    </member>
    <member name="F:System.Diagnostics.Tracing.EventOpcode.DataCollectionStart">
      <summary>A trace collection start event.</summary>
    </member>
    <member name="F:System.Diagnostics.Tracing.EventOpcode.DataCollectionStop">
      <summary>A trace collection stop event.</summary>
    </member>
    <member name="F:System.Diagnostics.Tracing.EventOpcode.Extension">
      <summary>An extension event.</summary>
    </member>
    <member name="F:System.Diagnostics.Tracing.EventOpcode.Info">
      <summary>An informational event.</summary>
    </member>
    <member name="F:System.Diagnostics.Tracing.EventOpcode.Receive">
      <summary>An event that is published when one activity in an application receives data.</summary>
    </member>
    <member name="F:System.Diagnostics.Tracing.EventOpcode.Reply">
      <summary>An event that is published after an activity in an application replies to an event.</summary>
    </member>
    <member name="F:System.Diagnostics.Tracing.EventOpcode.Resume">
      <summary>An event that is published after an activity in an application resumes from a suspended state. The event should follow an event that has the <see cref="F:System.Diagnostics.Tracing.EventOpcode.Suspend" /> operation code.</summary>
    </member>
    <member name="F:System.Diagnostics.Tracing.EventOpcode.Send">
      <summary>An event that is published when one activity in an application transfers data or system resources to another activity.</summary>
    </member>
    <member name="F:System.Diagnostics.Tracing.EventOpcode.Start">
      <summary>An event that is published when an application starts a new transaction or activity. This operation code can be embedded within another transaction or activity when multiple events that have the <see cref="F:System.Diagnostics.Tracing.EventOpcode.Start" /> code follow each other without an intervening event that has a <see cref="F:System.Diagnostics.Tracing.EventOpcode.Stop" /> code.</summary>
    </member>
    <member name="F:System.Diagnostics.Tracing.EventOpcode.Stop">
      <summary>An event that is published when an activity or a transaction in an application ends. The event corresponds to the last unpaired event that has a <see cref="F:System.Diagnostics.Tracing.EventOpcode.Start" /> operation code.</summary>
    </member>
    <member name="F:System.Diagnostics.Tracing.EventOpcode.Suspend">
      <summary>An event that is published when an activity in an application is suspended.</summary>
    </member>
    <member name="T:System.Diagnostics.Tracing.EventSource">
      <summary>Provides the ability to create events for event tracing for Windows (ETW).</summary>
    </member>
    <member name="E:System.Diagnostics.Tracing.EventSource.EventCommandExecuted">
      <summary>Occurs when a command comes from an event listener.</summary>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Diagnostics.Tracing.EventSource" /> class.</summary>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.#ctor(System.Boolean)">
      <summary>Creates a new instance of the <see cref="T:System.Diagnostics.Tracing.EventSource" /> class and specifies whether to throw an exception when an error occurs in the underlying Windows code.</summary>
      <param name="throwOnEventWriteErrors">
        <see langword="true" /> to throw an exception when an error occurs in the underlying Windows code; otherwise, <see langword="false" />.</param>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.#ctor(System.Diagnostics.Tracing.EventSourceSettings)">
      <summary>Creates a new instance of the <see cref="T:System.Diagnostics.Tracing.EventSource" /> class with the specified configuration settings.</summary>
      <param name="settings">A bitwise combination of the enumeration values that specify the configuration settings to apply to the event source.</param>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.#ctor(System.Diagnostics.Tracing.EventSourceSettings,System.String[])">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Tracing.EventSource" /> to be used with non-contract events that contains the specified settings and traits.</summary>
      <param name="settings">A bitwise combination of the enumeration values that specify the configuration settings to apply to the event source.</param>
      <param name="traits">The key-value pairs that specify traits for the event source.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="traits" /> is not specified in key-value pairs.</exception>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.#ctor(System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Diagnostics.Tracing.EventSource" /> class with the specified name.</summary>
      <param name="eventSourceName">The name to apply to the event source. Must not be <see langword="null" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="eventSourceName" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.#ctor(System.String,System.Diagnostics.Tracing.EventSourceSettings)">
      <summary>Creates a new instance of the <see cref="T:System.Diagnostics.Tracing.EventSource" /> class with the specified name and settings.</summary>
      <param name="eventSourceName">The name to apply to the event source. Must not be <see langword="null" />.</param>
      <param name="config">A bitwise combination of the enumeration values that specify the configuration settings to apply to the event source.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="eventSourceName" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.#ctor(System.String,System.Diagnostics.Tracing.EventSourceSettings,System.String[])">
      <summary>Creates a new instance of the <see cref="T:System.Diagnostics.Tracing.EventSource" /> class with the specified configuration settings.</summary>
      <param name="eventSourceName">The name to apply to the event source. Must not be <see langword="null" />.</param>
      <param name="config">A bitwise combination of the enumeration values that specify the configuration settings to apply to the event source.</param>
      <param name="traits">The key-value pairs that specify traits for the event source.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="eventSourceName" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="traits" /> is not specified in key-value pairs.</exception>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.Diagnostics.Tracing.EventSource" /> class.</summary>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Diagnostics.Tracing.EventSource" /> class and optionally releases the managed resources.</summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.Finalize">
      <summary>Allows the <see cref="T:System.Diagnostics.Tracing.EventSource" /> object to attempt to free resources and perform other cleanup operations before the  object is reclaimed by garbage collection.</summary>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.GenerateManifest(System.Type,System.String)">
      <summary>Returns a string of the XML manifest that is associated with the current event source.</summary>
      <param name="eventSourceType">The type of the event source.</param>
      <param name="assemblyPathToIncludeInManifest">The path to the assembly file (.dll) to include in the provider element of the manifest.</param>
      <returns>The XML data string.</returns>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.GenerateManifest(System.Type,System.String,System.Diagnostics.Tracing.EventManifestOptions)">
      <summary>Returns a string of the XML manifest that is associated with the current event source.</summary>
      <param name="eventSourceType">The type of the event source.</param>
      <param name="assemblyPathToIncludeInManifest">The path to the assembly file (.dll) file to include in the provider element of the manifest.</param>
      <param name="flags">A bitwise combination of the enumeration values that specify how the manifest is generated.</param>
      <returns>The XML data string or <see langword="null" />.</returns>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.GetGuid(System.Type)">
      <summary>Gets the unique identifier for this implementation of the event source.</summary>
      <param name="eventSourceType">The type of the event source.</param>
      <returns>A unique identifier for this event source type.</returns>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.GetName(System.Type)">
      <summary>Gets the friendly name of the event source.</summary>
      <param name="eventSourceType">The type of the event source.</param>
      <returns>The friendly name of the event source. The default is the simple name of the class.</returns>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.GetSources">
      <summary>Gets a snapshot of all the event sources for the application domain.</summary>
      <returns>An enumeration of all the event sources in the application domain.</returns>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.GetTrait(System.String)">
      <summary>Gets the trait value associated with the specified key.</summary>
      <param name="key">The key of the trait to get.</param>
      <returns>The trait value associated with the specified key. If the key is not found, returns <see langword="null" />.</returns>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.IsEnabled">
      <summary>Determines whether the current event source is enabled.</summary>
      <returns>
        <see langword="true" /> if the current event source is enabled; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.IsEnabled(System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords)">
      <summary>Determines whether the current event source that has the specified level and keyword is enabled.</summary>
      <param name="level">The level of the event source.</param>
      <param name="keywords">The keyword of the event source.</param>
      <returns>
        <see langword="true" /> if the event source is enabled; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.IsEnabled(System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords,System.Diagnostics.Tracing.EventChannel)">
      <summary>Determines whether the current event source is enabled for events with the specified level, keywords and channel.</summary>
      <param name="level">The event level to check. An event source will be considered enabled when its level is greater than or equal to <paramref name="level" />.</param>
      <param name="keywords">The event keywords to check.</param>
      <param name="channel">The event channel to check.</param>
      <returns>
        <see langword="true" /> if the event source is enabled for the specified event level, keywords and channel; otherwise, <see langword="false" />.  
  
 The result of this method is only an approximation of whether a particular event is active.  Use it to avoid expensive computation for logging when logging is disabled. Event sources may have additional filtering that determines their activity.</returns>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.OnEventCommand(System.Diagnostics.Tracing.EventCommandEventArgs)">
      <summary>Called when the current event source is updated by the controller.</summary>
      <param name="command">The arguments for the event.</param>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.SendCommand(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventCommand,System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>Sends a command to a specified event source.</summary>
      <param name="eventSource">The event source to send the command to.</param>
      <param name="command">The event command to send.</param>
      <param name="commandArguments">The arguments for the event command.</param>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId(System.Guid)">
      <summary>Sets the activity ID on the current thread.</summary>
      <param name="activityId">The current thread's new activity ID, or <see cref="F:System.Guid.Empty" /> to indicate that work on the current thread is not associated with any activity.</param>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId(System.Guid,System.Guid@)">
      <summary>Sets the activity ID on the current thread, and returns the previous activity ID.</summary>
      <param name="activityId">The current thread's new activity ID, or <see cref="F:System.Guid.Empty" /> to indicate that work on the current thread is not associated with any activity.</param>
      <param name="oldActivityThatWillContinue">When this method returns, contains the previous activity ID on the current thread.</param>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.ToString">
      <summary>Obtains a string representation of the current event source instance.</summary>
      <returns>The name and unique identifier that identify the current event source.</returns>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.Write(System.String)">
      <summary>Writes an event without fields, but with the specified name and default options.</summary>
      <param name="eventName">The name of the event to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="eventName" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.Write(System.String,System.Diagnostics.Tracing.EventSourceOptions)">
      <summary>Writes an event without fields, but with the specified name and options.</summary>
      <param name="eventName">The name of the event to write.</param>
      <param name="options">The options such as level, keywords and operation code for the event.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="eventName" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.Write``1(System.String,``0)">
      <summary>Writes an event with the specified name and data.</summary>
      <param name="eventName">The name of the event.</param>
      <param name="data">The event data. This type must be an anonymous type or marked with the <see cref="T:System.Diagnostics.Tracing.EventDataAttribute" /> attribute.</param>
      <typeparam name="T">The type that defines the event and its associated data. This type must be an anonymous type or marked with the <see cref="T:System.Diagnostics.Tracing.EventSourceAttribute" /> attribute.</typeparam>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.Write``1(System.String,System.Diagnostics.Tracing.EventSourceOptions,``0)">
      <summary>Writes an event with the specified name, event data and options.</summary>
      <param name="eventName">The name of the event.</param>
      <param name="options">The event options.</param>
      <param name="data">The event data. This type must be an anonymous type or marked with the <see cref="T:System.Diagnostics.Tracing.EventDataAttribute" /> attribute.</param>
      <typeparam name="T">The type that defines the event and its associated data. This type must be an anonymous type or marked with the <see cref="T:System.Diagnostics.Tracing.EventSourceAttribute" /> attribute.</typeparam>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.Write``1(System.String,System.Diagnostics.Tracing.EventSourceOptions@,``0@)">
      <summary>Writes an event with the specified name, options and event data.</summary>
      <param name="eventName">The name of the event.</param>
      <param name="options">The event options.</param>
      <param name="data">The event data. This type must be an anonymous type or marked with the <see cref="T:System.Diagnostics.Tracing.EventDataAttribute" /> attribute.</param>
      <typeparam name="T">The type that defines the event and its associated data. This type must be an anonymous type or marked with the <see cref="T:System.Diagnostics.Tracing.EventSourceAttribute" /> attribute.</typeparam>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.Write``1(System.String,System.Diagnostics.Tracing.EventSourceOptions@,System.Guid@,System.Guid@,``0@)">
      <summary>Writes an event with the specified name, options, related activity and event data.</summary>
      <param name="eventName">The name of the event.</param>
      <param name="options">The event options.</param>
      <param name="activityId">The ID of the activity associated with the event.</param>
      <param name="relatedActivityId">The ID of an associated activity, or <see cref="F:System.Guid.Empty" /> if there is no associated activity.</param>
      <param name="data">The event data. This type must be an anonymous type or marked with the <see cref="T:System.Diagnostics.Tracing.EventDataAttribute" /> attribute.</param>
      <typeparam name="T">The type that defines the event and its associated data. This type must be an anonymous type or marked with the <see cref="T:System.Diagnostics.Tracing.EventSourceAttribute" /> attribute.</typeparam>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32)">
      <summary>Writes an event by using the provided event identifier.</summary>
      <param name="eventId">The event identifier. This value should be between 0 and 65535.</param>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Byte[])">
      <summary>Writes an event by using the provided event identifier and byte array argument.</summary>
      <param name="eventId">The event identifier.  This value should be between 0 and 65535.</param>
      <param name="arg1">A byte array argument.</param>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int32)">
      <summary>Writes an event by using the provided event identifier and 32-bit integer argument.</summary>
      <param name="eventId">The event identifier.  This value should be between 0 and 65535.</param>
      <param name="arg1">An integer argument.</param>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int32,System.Int32)">
      <summary>Writes an event by using the provided event identifier and 32-bit integer arguments.</summary>
      <param name="eventId">The event identifier.  This value should be between 0 and 65535.</param>
      <param name="arg1">An integer argument.</param>
      <param name="arg2">An integer argument.</param>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Writes an event by using the provided event identifier and 32-bit integer arguments.</summary>
      <param name="eventId">The event identifier.  This value should be between 0 and 65535.</param>
      <param name="arg1">An integer argument.</param>
      <param name="arg2">An integer argument.</param>
      <param name="arg3">An integer argument.</param>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int32,System.String)">
      <summary>Writes an event by using the provided event identifier and 32-bit integer and string arguments.</summary>
      <param name="eventId">The event identifier. This value should be between 0 and 65535.</param>
      <param name="arg1">A 32-bit integer argument.</param>
      <param name="arg2">A string argument.</param>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64)">
      <summary>Writes an event by using the provided event identifier and 64-bit integer argument.</summary>
      <param name="eventId">The event identifier.  This value should be between 0 and 65535.</param>
      <param name="arg1">A 64 bit integer argument.</param>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64,System.Byte[])">
      <summary>Writes the event data using the specified identifier and 64-bit integer and byte array arguments.</summary>
      <param name="eventId">The event identifier.  This value should be between 0 and 65535.</param>
      <param name="arg1">A 64-bit integer argument.</param>
      <param name="arg2">A byte array argument.</param>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64,System.Int64)">
      <summary>Writes an event by using the provided event identifier and 64-bit arguments.</summary>
      <param name="eventId">The event identifier.  This value should be between 0 and 65535.</param>
      <param name="arg1">A 64 bit integer argument.</param>
      <param name="arg2">A 64 bit integer argument.</param>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64,System.Int64,System.Int64)">
      <summary>Writes an event by using the provided event identifier and 64-bit arguments.</summary>
      <param name="eventId">The event identifier.  This value should be between 0 and 65535.</param>
      <param name="arg1">A 64 bit integer argument.</param>
      <param name="arg2">A 64 bit integer argument.</param>
      <param name="arg3">A 64 bit integer argument.</param>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64,System.String)">
      <summary>Writes an event by using the provided event identifier and 64-bit integer, and string arguments.</summary>
      <param name="eventId">The event identifier.  This value should be between 0 and 65535.</param>
      <param name="arg1">A 64-bit integer argument.</param>
      <param name="arg2">A string argument.</param>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Object[])">
      <summary>Writes an event by using the provided event identifier and array of arguments.</summary>
      <param name="eventId">The event identifier.  This value should be between 0 and 65535.</param>
      <param name="args">An array of objects.</param>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String)">
      <summary>Writes an event by using the provided event identifier and string argument.</summary>
      <param name="eventId">The event identifier.  This value should be between 0 and 65535.</param>
      <param name="arg1">A string argument.</param>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.Int32)">
      <summary>Writes an event by using the provided event identifier and arguments.</summary>
      <param name="eventId">The event identifier.  This value should be between 0 and 65535.</param>
      <param name="arg1">A string argument.</param>
      <param name="arg2">A 32 bit integer argument.</param>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.Int32,System.Int32)">
      <summary>Writes an event by using the provided event identifier and arguments.</summary>
      <param name="eventId">The event identifier.  This value should be between 0 and 65535.</param>
      <param name="arg1">A string argument.</param>
      <param name="arg2">A 32 bit integer argument.</param>
      <param name="arg3">A 32 bit integer argument.</param>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.Int64)">
      <summary>Writes an event by using the provided event identifier and arguments.</summary>
      <param name="eventId">The event identifier.  This value should be between 0 and 65535.</param>
      <param name="arg1">A string argument.</param>
      <param name="arg2">A 64 bit integer argument.</param>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.String)">
      <summary>Writes an event by using the provided event identifier and string arguments.</summary>
      <param name="eventId">The event identifier.  This value should be between 0 and 65535.</param>
      <param name="arg1">A string argument.</param>
      <param name="arg2">A string argument.</param>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.String,System.String)">
      <summary>Writes an event by using the provided event identifier and string arguments.</summary>
      <param name="eventId">The event identifier.  This value should be between 0 and 65535.</param>
      <param name="arg1">A string argument.</param>
      <param name="arg2">A string argument.</param>
      <param name="arg3">A string argument.</param>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.WriteEventCore(System.Int32,System.Int32,System.Diagnostics.Tracing.EventSource.EventData*)">
      <summary>Creates a new <see cref="Overload:System.Diagnostics.Tracing.EventSource.WriteEvent" /> overload by using the provided event identifier and event data.</summary>
      <param name="eventId">The event identifier.</param>
      <param name="eventDataCount">The number of event data items.</param>
      <param name="data">The structure that contains the event data.</param>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityId(System.Int32,System.Guid,System.Object[])">
      <summary>Writes an event that indicates that the current activity is related to another activity.</summary>
      <param name="eventId">An identifier that uniquely identifies this event within the <see cref="T:System.Diagnostics.Tracing.EventSource" />.</param>
      <param name="relatedActivityId">The related activity identifier.</param>
      <param name="args">An array of objects that contain data about the event.</param>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityIdCore(System.Int32,System.Guid*,System.Int32,System.Diagnostics.Tracing.EventSource.EventData*)">
      <summary>Writes an event that indicates that the current activity is related to another activity.</summary>
      <param name="eventId">An identifier that uniquely identifies this event within the <see cref="T:System.Diagnostics.Tracing.EventSource" />.</param>
      <param name="relatedActivityId">A pointer to the GUID of the related activity ID.</param>
      <param name="eventDataCount">The number of items in the <paramref name="data" /> field.</param>
      <param name="data">A pointer to the first item in the event data field.</param>
    </member>
    <member name="P:System.Diagnostics.Tracing.EventSource.ConstructionException">
      <summary>Gets any exception that was thrown during the construction of the event source.</summary>
      <returns>The exception that was thrown during the construction of the event source, or <see langword="null" /> if no exception was thrown.</returns>
    </member>
    <member name="P:System.Diagnostics.Tracing.EventSource.CurrentThreadActivityId">
      <summary>Gets the activity ID of the current thread.</summary>
      <returns>The activity ID of the current thread.</returns>
    </member>
    <member name="P:System.Diagnostics.Tracing.EventSource.Guid">
      <summary>The unique identifier for the event source.</summary>
      <returns>A unique identifier for the event source.</returns>
    </member>
    <member name="P:System.Diagnostics.Tracing.EventSource.Name">
      <summary>The friendly name of the class that is derived from the event source.</summary>
      <returns>The friendly name of the derived class.  The default is the simple name of the class.</returns>
    </member>
    <member name="P:System.Diagnostics.Tracing.EventSource.Settings">
      <summary>Gets the settings applied to this event source.</summary>
      <returns>The settings applied to this event source.</returns>
    </member>
    <member name="T:System.Diagnostics.Tracing.EventSource.EventData">
      <summary>Provides the event data for creating fast <see cref="Overload:System.Diagnostics.Tracing.EventSource.WriteEvent" /> overloads by using the <see cref="M:System.Diagnostics.Tracing.EventSource.WriteEventCore(System.Int32,System.Int32,System.Diagnostics.Tracing.EventSource.EventData*)" /> method.</summary>
    </member>
    <member name="P:System.Diagnostics.Tracing.EventSource.EventData.DataPointer">
      <summary>Gets or sets the pointer to the data for the new <see cref="Overload:System.Diagnostics.Tracing.EventSource.WriteEvent" /> overload.</summary>
      <returns>The pointer to the data.</returns>
    </member>
    <member name="P:System.Diagnostics.Tracing.EventSource.EventData.Size">
      <summary>Gets or sets the number of payload items in the new <see cref="Overload:System.Diagnostics.Tracing.EventSource.WriteEvent" /> overload.</summary>
      <returns>The number of payload items in the new overload.</returns>
    </member>
    <member name="T:System.Diagnostics.Tracing.EventSourceAttribute">
      <summary>Allows the event tracing for Windows (ETW) name to be defined independently of the name of the event source class.</summary>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSourceAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Tracing.EventSourceAttribute" /> class.</summary>
    </member>
    <member name="P:System.Diagnostics.Tracing.EventSourceAttribute.Guid">
      <summary>Gets or sets the event source identifier.</summary>
      <returns>The event source identifier.</returns>
    </member>
    <member name="P:System.Diagnostics.Tracing.EventSourceAttribute.LocalizationResources">
      <summary>Gets or sets the name of the localization resource file.</summary>
      <returns>The name of the localization resource file, or <see langword="null" /> if the localization resource file does not exist.</returns>
    </member>
    <member name="P:System.Diagnostics.Tracing.EventSourceAttribute.Name">
      <summary>Gets or sets the name of the event source.</summary>
      <returns>The name of the event source.</returns>
    </member>
    <member name="T:System.Diagnostics.Tracing.EventSourceException">
      <summary>The exception that is thrown when an error occurs during event tracing for Windows (ETW).</summary>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSourceException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Tracing.EventSourceException" /> class.</summary>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSourceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Tracing.EventSourceException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSourceException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Tracing.EventSourceException" /> class with a specified error message.</summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.Diagnostics.Tracing.EventSourceException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Tracing.EventSourceException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or <see langword="null" /> if no inner exception is specified.</param>
    </member>
    <member name="T:System.Diagnostics.Tracing.EventTask">
      <summary>Defines the tasks that apply to events.</summary>
    </member>
    <member name="F:System.Diagnostics.Tracing.EventTask.None">
      <summary>Undefined task.</summary>
    </member>
    <member name="T:System.Diagnostics.Tracing.EventWrittenEventArgs">
      <summary>Provides data for the <see cref="M:System.Diagnostics.Tracing.EventListener.OnEventWritten(System.Diagnostics.Tracing.EventWrittenEventArgs)" /> callback.</summary>
    </member>
    <member name="P:System.Diagnostics.Tracing.EventWrittenEventArgs.ActivityId">
      <summary>Gets the activity ID on the thread that the event was written to.</summary>
      <returns>The activity ID on the thread that the event was written to.</returns>
    </member>
    <member name="P:System.Diagnostics.Tracing.EventWrittenEventArgs.Channel">
      <summary>Gets the channel for the event.</summary>
      <returns>The channel for the event.</returns>
    </member>
    <member name="P:System.Diagnostics.Tracing.EventWrittenEventArgs.EventId">
      <summary>Gets the event identifier.</summary>
      <returns>The event identifier.</returns>
    </member>
    <member name="P:System.Diagnostics.Tracing.EventWrittenEventArgs.EventName">
      <summary>Gets the name of the event.</summary>
      <returns>The name of the event.</returns>
    </member>
    <member name="P:System.Diagnostics.Tracing.EventWrittenEventArgs.EventSource">
      <summary>Gets the event source object.</summary>
      <returns>The event source object.</returns>
    </member>
    <member name="P:System.Diagnostics.Tracing.EventWrittenEventArgs.Keywords">
      <summary>Gets the keywords for the event.</summary>
      <returns>The keywords for the event.</returns>
    </member>
    <member name="P:System.Diagnostics.Tracing.EventWrittenEventArgs.Level">
      <summary>Gets the level of the event.</summary>
      <returns>The level of the event.</returns>
    </member>
    <member name="P:System.Diagnostics.Tracing.EventWrittenEventArgs.Message">
      <summary>Gets the message for the event.</summary>
      <returns>The message for the event.</returns>
    </member>
    <member name="P:System.Diagnostics.Tracing.EventWrittenEventArgs.Opcode">
      <summary>Gets the operation code for the event.</summary>
      <returns>The operation code for the event.</returns>
    </member>
    <member name="P:System.Diagnostics.Tracing.EventWrittenEventArgs.OSThreadId">
      <summary>Gets the thread identifier for the OS thread that wrote the event. (.NET Core 2.2 and later only.)</summary>
      <returns>The thread identifier for the OS thread that wrote the event.</returns>
    </member>
    <member name="P:System.Diagnostics.Tracing.EventWrittenEventArgs.Payload">
      <summary>Gets the payload for the event.</summary>
      <returns>The payload for the event.</returns>
    </member>
    <member name="P:System.Diagnostics.Tracing.EventWrittenEventArgs.PayloadNames">
      <summary>Returns a list of strings that represent the property names of the event.</summary>
      <returns>Returns <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.</returns>
    </member>
    <member name="P:System.Diagnostics.Tracing.EventWrittenEventArgs.RelatedActivityId">
      <summary>Gets the identifier of an activity that is related to the activity represented by the current instance.</summary>
      <returns>The identifier of the related activity, or <see cref="F:System.Guid.Empty" /> if there is no related activity.</returns>
    </member>
    <member name="P:System.Diagnostics.Tracing.EventWrittenEventArgs.Tags">
      <summary>Returns the tags specified in the call to the <see cref="M:System.Diagnostics.Tracing.EventSource.Write(System.String,System.Diagnostics.Tracing.EventSourceOptions)" /> method.</summary>
      <returns>Returns <see cref="T:System.Diagnostics.Tracing.EventTags" />.</returns>
    </member>
    <member name="P:System.Diagnostics.Tracing.EventWrittenEventArgs.Task">
      <summary>Gets the task for the event.</summary>
      <returns>The task for the event.</returns>
    </member>
    <member name="P:System.Diagnostics.Tracing.EventWrittenEventArgs.TimeStamp">
      <summary>Gets the time that the event was originally generated as a <see cref="T:System.DateTime" /> timestamp. (.NET Core 2.2 and later only.)</summary>
      <returns>The date and time when the event was logged. The system tries to be as precise as possible.</returns>
    </member>
    <member name="P:System.Diagnostics.Tracing.EventWrittenEventArgs.Version">
      <summary>Gets the version of the event.</summary>
      <returns>The version of the event.</returns>
    </member>
    <member name="T:System.Diagnostics.Tracing.NonEventAttribute">
      <summary>Identifies a method that is not generating an event.</summary>
    </member>
    <member name="M:System.Diagnostics.Tracing.NonEventAttribute.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Diagnostics.Tracing.NonEventAttribute" /> class.</summary>
    </member>
    <member name="T:System.DivideByZeroException">
      <summary>The exception that is thrown when there is an attempt to divide an integral or <see cref="T:System.Decimal" /> value by zero.</summary>
    </member>
    <member name="M:System.DivideByZeroException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.DivideByZeroException" /> class.</summary>
    </member>
    <member name="M:System.DivideByZeroException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.DivideByZeroException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.DivideByZeroException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.DivideByZeroException" /> class with a specified error message.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error.</param>
    </member>
    <member name="M:System.DivideByZeroException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.DivideByZeroException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.DllNotFoundException">
      <summary>The exception that is thrown when a DLL specified in a DLL import cannot be found.</summary>
    </member>
    <member name="M:System.DllNotFoundException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.DllNotFoundException" /> class with default properties.</summary>
    </member>
    <member name="M:System.DllNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.DllNotFoundException" /> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.DllNotFoundException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.DllNotFoundException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.DllNotFoundException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.DllNotFoundException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.Double">
      <summary>Represents a double-precision floating-point number.</summary>
    </member>
    <member name="F:System.Double.Epsilon">
      <summary>Represents the smallest positive <see cref="T:System.Double" /> value that is greater than zero. This field is constant.</summary>
    </member>
    <member name="F:System.Double.MaxValue">
      <summary>Represents the largest possible value of a <see cref="T:System.Double" />. This field is constant.</summary>
    </member>
    <member name="F:System.Double.MinValue">
      <summary>Represents the smallest possible value of a <see cref="T:System.Double" />. This field is constant.</summary>
    </member>
    <member name="F:System.Double.NaN">
      <summary>Represents a value that is not a number (<see langword="NaN" />). This field is constant.</summary>
    </member>
    <member name="F:System.Double.NegativeInfinity">
      <summary>Represents negative infinity. This field is constant.</summary>
    </member>
    <member name="F:System.Double.PositiveInfinity">
      <summary>Represents positive infinity. This field is constant.</summary>
    </member>
    <member name="M:System.Double.CompareTo(System.Double)">
      <summary>Compares this instance to a specified double-precision floating-point number and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified double-precision floating-point number.</summary>
      <param name="value">A double-precision floating-point number to compare.</param>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.  
  
 <list type="table"><listheader><term> Return Value</term><description> Description</description></listheader><item><term> Less than zero</term><description> This instance is less than <paramref name="value" />, or this instance is not a number (<see cref="F:System.Double.NaN" />) and <paramref name="value" /> is a number.</description></item><item><term> Zero</term><description> This instance is equal to <paramref name="value" />, or both this instance and <paramref name="value" /> are not a number (<see cref="F:System.Double.NaN" />), <see cref="F:System.Double.PositiveInfinity" />, or <see cref="F:System.Double.NegativeInfinity" />.</description></item><item><term> Greater than zero</term><description> This instance is greater than <paramref name="value" />, or this instance is a number and <paramref name="value" /> is not a number (<see cref="F:System.Double.NaN" />).</description></item></list></returns>
    </member>
    <member name="M:System.Double.CompareTo(System.Object)">
      <summary>Compares this instance to a specified object and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object.</summary>
      <param name="value">An object to compare, or <see langword="null" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.Double" />.</exception>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.  
  
 <list type="table"><listheader><term> Value</term><description> Description</description></listheader><item><term> A negative integer</term><description> This instance is less than <paramref name="value" />, or this instance is not a number (<see cref="F:System.Double.NaN" />) and <paramref name="value" /> is a number.</description></item><item><term> Zero</term><description> This instance is equal to <paramref name="value" />, or this instance and <paramref name="value" /> are both <see langword="Double.NaN" />, <see cref="F:System.Double.PositiveInfinity" />, or <see cref="F:System.Double.NegativeInfinity" /></description></item><item><term> A positive integer</term><description> This instance is greater than <paramref name="value" />, OR this instance is a number and <paramref name="value" /> is not a number (<see cref="F:System.Double.NaN" />), OR <paramref name="value" /> is <see langword="null" />.</description></item></list></returns>
    </member>
    <member name="M:System.Double.Equals(System.Double)">
      <summary>Returns a value indicating whether this instance and a specified <see cref="T:System.Double" /> object represent the same value.</summary>
      <param name="obj">A <see cref="T:System.Double" /> object to compare to this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> is equal to this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Double.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="obj">An object to compare with this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> is an instance of <see cref="T:System.Double" /> and equals the value of this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Double.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Double.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Double" />.</summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.Double" />.</returns>
    </member>
    <member name="M:System.Double.IsFinite(System.Double)">
      <summary>Determines whether the specified value is finite (zero, subnormal, or normal).</summary>
      <param name="d">A double-precision floating-point number.</param>
      <returns>
        <see langword="true" /> if the value is finite (zero, subnormal or normal); <see langword="false" /> otherwise.</returns>
    </member>
    <member name="M:System.Double.IsInfinity(System.Double)">
      <summary>Returns a value indicating whether the specified number evaluates to negative or positive infinity.</summary>
      <param name="d">A double-precision floating-point number.</param>
      <returns>
        <see langword="true" /> if <paramref name="d" /> evaluates to <see cref="F:System.Double.PositiveInfinity" /> or <see cref="F:System.Double.NegativeInfinity" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Double.IsNaN(System.Double)">
      <summary>Returns a value that indicates whether the specified value is not a number (<see cref="F:System.Double.NaN" />).</summary>
      <param name="d">A double-precision floating-point number.</param>
      <returns>
        <see langword="true" /> if <paramref name="d" /> evaluates to <see cref="F:System.Double.NaN" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Double.IsNegative(System.Double)">
      <summary>Determines whether the specified value is negative.</summary>
      <param name="d">A double-precision floating-point number.</param>
      <returns>
        <see langword="true" /> if the value is negative; <see langword="false" /> otherwise.</returns>
    </member>
    <member name="M:System.Double.IsNegativeInfinity(System.Double)">
      <summary>Returns a value indicating whether the specified number evaluates to negative infinity.</summary>
      <param name="d">A double-precision floating-point number.</param>
      <returns>
        <see langword="true" /> if <paramref name="d" /> evaluates to <see cref="F:System.Double.NegativeInfinity" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Double.IsNormal(System.Double)">
      <summary>Determines whether the specified value is normal.</summary>
      <param name="d">A double-precision floating-point number.</param>
      <returns>
        <see langword="true" /> if the value is normal; <see langword="false" /> otherwise.</returns>
    </member>
    <member name="M:System.Double.IsPositiveInfinity(System.Double)">
      <summary>Returns a value indicating whether the specified number evaluates to positive infinity.</summary>
      <param name="d">A double-precision floating-point number.</param>
      <returns>
        <see langword="true" /> if <paramref name="d" /> evaluates to <see cref="F:System.Double.PositiveInfinity" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Double.IsSubnormal(System.Double)">
      <summary>Determines whether the specified value is subnormal.</summary>
      <param name="d">A double-precision floating-point number.</param>
      <returns>
        <see langword="true" /> if the value is subnormal; <see langword="false" /> otherwise.</returns>
    </member>
    <member name="M:System.Double.op_Equality(System.Double,System.Double)">
      <summary>Returns a value that indicates whether two specified <see cref="T:System.Double" /> values are equal.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Double.op_GreaterThan(System.Double,System.Double)">
      <summary>Returns a value that indicates whether a specified <see cref="T:System.Double" /> value is greater than another specified <see cref="T:System.Double" /> value.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Double.op_GreaterThanOrEqual(System.Double,System.Double)">
      <summary>Returns a value that indicates whether a specified <see cref="T:System.Double" /> value is greater than or equal to another specified <see cref="T:System.Double" /> value.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is greater than or equal to <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Double.op_Inequality(System.Double,System.Double)">
      <summary>Returns a value that indicates whether two specified <see cref="T:System.Double" /> values are not equal.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Double.op_LessThan(System.Double,System.Double)">
      <summary>Returns a value that indicates whether a specified <see cref="T:System.Double" /> value is less than another specified <see cref="T:System.Double" /> value.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is less than <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Double.op_LessThanOrEqual(System.Double,System.Double)">
      <summary>Returns a value that indicates whether a specified <see cref="T:System.Double" /> value is less than or equal to another specified <see cref="T:System.Double" /> value.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Double.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Converts a character span that contains the string representation of a number in a specified style and culture-specific format to its double-precision floating-point number equivalent.</summary>
      <param name="s">A character span that contains the number to convert.</param>
      <param name="style">A bitwise combination of enumeration values that indicate the style elements that can be present in <paramref name="s" />.  A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Float" /> combined with <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not represent a numeric value.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  
  
 -or-  
  
 <paramref name="style" /> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
      <returns>A double-precision floating-point number that is equivalent to the numeric value or symbol specified in <paramref name="s" />.</returns>
    </member>
    <member name="M:System.Double.Parse(System.String)">
      <summary>Converts the string representation of a number to its double-precision floating-point number equivalent.</summary>
      <param name="s">A string that contains a number to convert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not represent a number in a valid format.</exception>
      <exception cref="T:System.OverflowException">
          .NET Framework and .NET Core 2.2 and earlier versions only: <paramref name="s" /> represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />.</exception>
      <returns>A double-precision floating-point number that is equivalent to the numeric value or symbol specified in <paramref name="s" />.</returns>
    </member>
    <member name="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>Converts the string representation of a number in a specified style to its double-precision floating-point number equivalent.</summary>
      <param name="s">A string that contains a number to convert.</param>
      <param name="style">A bitwise combination of enumeration values that indicate the style elements that can be present in <paramref name="s" />. A typical value to specify is a combination of <see cref="F:System.Globalization.NumberStyles.Float" /> combined with <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not represent a number in a valid format.</exception>
      <exception cref="T:System.OverflowException">
          .NET Framework and .NET Core 2.2 and earlier versions only: <paramref name="s" /> represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  
  
 -or-  
  
 <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
      <returns>A double-precision floating-point number that is equivalent to the numeric value or symbol specified in <paramref name="s" />.</returns>
    </member>
    <member name="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its double-precision floating-point number equivalent.</summary>
      <param name="s">A string that contains a number to convert.</param>
      <param name="style">A bitwise combination of enumeration values that indicate the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Float" /> combined with <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not represent a numeric value.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  
  
 -or-  
  
 <paramref name="style" /> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
      <exception cref="T:System.OverflowException">
          .NET Framework and .NET Core 2.2 and earlier versions only: <paramref name="s" /> represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />.</exception>
      <returns>A double-precision floating-point number that is equivalent to the numeric value or symbol specified in <paramref name="s" />.</returns>
    </member>
    <member name="M:System.Double.Parse(System.String,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified culture-specific format to its double-precision floating-point number equivalent.</summary>
      <param name="s">A string that contains a number to convert.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not represent a number in a valid format.</exception>
      <exception cref="T:System.OverflowException">
          .NET Framework and .NET Core 2.2 and earlier versions only: <paramref name="s" /> represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />.</exception>
      <returns>A double-precision floating-point number that is equivalent to the numeric value or symbol specified in <paramref name="s" />.</returns>
    </member>
    <member name="M:System.Double.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>
        <see langword="true" /> if the value of the current instance is not zero; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Double.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Byte" />.</returns>
    </member>
    <member name="M:System.Double.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
      <returns>This conversion is not supported. No value is returned.</returns>
    </member>
    <member name="M:System.Double.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" /></summary>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
      <returns>This conversion is not supported. No value is returned.</returns>
    </member>
    <member name="M:System.Double.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Decimal" />.</returns>
    </member>
    <member name="M:System.Double.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, unchanged.</returns>
    </member>
    <member name="M:System.Double.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int16" />.</returns>
    </member>
    <member name="M:System.Double.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Double.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int64" />.</returns>
    </member>
    <member name="M:System.Double.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to an <see cref="T:System.SByte" />.</returns>
    </member>
    <member name="M:System.Double.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Single" />.</returns>
    </member>
    <member name="M:System.Double.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />.</summary>
      <param name="type">The type to which to convert this <see cref="T:System.Double" /> value.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> implementation that supplies culture-specific information about the format of the returned value.</param>
      <returns>The value of the current instance, converted to <paramref name="type" />.</returns>
    </member>
    <member name="M:System.Double.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt16" />.</returns>
    </member>
    <member name="M:System.Double.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt32" />.</returns>
    </member>
    <member name="M:System.Double.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt64" />.</returns>
    </member>
    <member name="M:System.Double.ToString">
      <summary>Converts the numeric value of this instance to its equivalent string representation.</summary>
      <returns>The string representation of the value of this instance.</returns>
    </member>
    <member name="M:System.Double.ToString(System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>The string representation of the value of this instance as specified by <paramref name="provider" />.</returns>
    </member>
    <member name="M:System.Double.ToString(System.String)">
      <summary>Converts the numeric value of this instance to its equivalent string representation, using the specified format.</summary>
      <param name="format">A numeric format string.</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.</exception>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" />.</returns>
    </member>
    <member name="M:System.Double.ToString(System.String,System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.</summary>
      <param name="format">A numeric format string.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
    </member>
    <member name="M:System.Double.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <summary>Tries to format the value of the current double instance into the provided span of characters.</summary>
      <param name="destination">When this method returns, this instance's value formatted as a span of characters.</param>
      <param name="charsWritten">When this method returns, the number of characters that were written in <paramref name="destination" />.</param>
      <param name="format">A span containing the characters that represent a standard or custom format string that defines the acceptable format for <paramref name="destination" />.</param>
      <param name="provider">An optional object that supplies culture-specific formatting information for <paramref name="destination" />.</param>
      <returns>
        <see langword="true" /> if the formatting was successful; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Double.TryParse(System.ReadOnlySpan{System.Char},System.Double@)">
      <summary>Converts the span representation of a number in a specified style and culture-specific format to its double-precision floating-point number equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <param name="s">A character span that contains the string representation of the number to convert.</param>
      <param name="result">When this method returns, contains the double-precision floating-point number equivalent of the numeric value or symbol contained in <paramref name="s" /> parameter, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or empty, or is not in a format compliant with <paramref name="style" />. The conversion also fails if <paramref name="style" /> is not a valid combination of <see cref="T:System.Globalization.NumberStyles" /> enumerated constants. If <paramref name="s" /> is a valid number less than <see cref="F:System.Double.MinValue" />, <paramref name="result" /> is <see cref="F:System.Double.NegativeInfinity" />. If <paramref name="s" /> is a valid number greater than <see cref="F:System.Double.MaxValue" />, <paramref name="result" /> is <see cref="F:System.Double.PositiveInfinity" />. This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Double.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
      <summary>Converts a character span containing the string representation of a number in a specified style and culture-specific format to its double-precision floating-point number equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <param name="s">A read-only character span that contains the number to convert.</param>
      <param name="style">A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Float" /> combined with <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <param name="result">When this method returns and if the conversion succeeded, contains a double-precision floating-point number equivalent of the numeric value or symbol contained in <paramref name="s" />. Contains zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" />, an empty character span, or not a number in a format compliant with <paramref name="style" />. If <paramref name="s" /> is a valid number less than <see cref="F:System.Double.MinValue" />, <paramref name="result" /> is <see cref="F:System.Double.NegativeInfinity" />. If <paramref name="s" /> is a valid number greater than <see cref="F:System.Double.MaxValue" />, <paramref name="result" /> is <see cref="F:System.Double.PositiveInfinity" />. This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Double.TryParse(System.String,System.Double@)">
      <summary>Converts the string representation of a number to its double-precision floating-point number equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="result">When this method returns, contains the double-precision floating-point number equivalent of the <paramref name="s" /> parameter, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" /> or is not a number in a valid format. It also fails on .NET Framework and .NET Core 2.2 and earlier versions if <paramref name="s" /> represents a number less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />. This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its double-precision floating-point number equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Float" /> combined with <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <param name="result">When this method returns, contains a double-precision floating-point number equivalent of the numeric value or symbol contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" /> or is not in a format compliant with <paramref name="style" />, or if <paramref name="style" /> is not a valid combination of <see cref="T:System.Globalization.NumberStyles" /> enumeration constants. It also fails on .NET Framework or .NET Core 2.2 and earlier versions if <paramref name="s" /> represents a number less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />. This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  
  
 -or-  
  
 <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Enum">
      <summary>Provides the base class for enumerations.</summary>
    </member>
    <member name="M:System.Enum.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Enum" /> class.</summary>
    </member>
    <member name="M:System.Enum.CompareTo(System.Object)">
      <summary>Compares this instance to a specified object and returns an indication of their relative values.</summary>
      <param name="target">An object to compare, or <see langword="null" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> and this instance are not the same type.</exception>
      <exception cref="T:System.InvalidOperationException">This instance is not type <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" />, or <see cref="T:System.UInt64" />.</exception>
      <exception cref="T:System.NullReferenceException">This instance is null.</exception>
      <returns>A signed number that indicates the relative values of this instance and <paramref name="target" />.  
  
 <list type="table"><listheader><term> Value</term><description> Meaning</description></listheader><item><term> Less than zero</term><description> The value of this instance is less than the value of <paramref name="target" />.</description></item><item><term> Zero</term><description> The value of this instance is equal to the value of <paramref name="target" />.</description></item><item><term> Greater than zero</term><description> The value of this instance is greater than the value of <paramref name="target" />, or <paramref name="target" /> is <see langword="null" />.</description></item></list></returns>
    </member>
    <member name="M:System.Enum.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="obj">An object to compare with this instance, or <see langword="null" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> is an enumeration value of the same type and with the same underlying value as this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Enum.Format(System.Type,System.Object,System.String)">
      <summary>Converts the specified value of a specified enumerated type to its equivalent string representation according to the specified format.</summary>
      <param name="enumType">The enumeration type of the value to convert.</param>
      <param name="value">The value to convert.</param>
      <param name="format">The output format to use.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="enumType" />, <paramref name="value" />, or <paramref name="format" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="enumType" /> parameter is not an <see cref="T:System.Enum" /> type.  
  
 -or-  
  
 The <paramref name="value" /> is from an enumeration that differs in type from <paramref name="enumType" />.  
  
 -or-  
  
 The type of <paramref name="value" /> is not an underlying type of <paramref name="enumType" />.</exception>
      <exception cref="T:System.FormatException">The <paramref name="format" /> parameter contains an invalid value.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="format" /> equals "X", but the enumeration type is unknown.</exception>
      <returns>A string representation of <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Enum.GetHashCode">
      <summary>Returns the hash code for the value of this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Enum.GetName(System.Type,System.Object)">
      <summary>Retrieves the name of the constant in the specified enumeration that has the specified value.</summary>
      <param name="enumType">An enumeration type.</param>
      <param name="value">The value of a particular enumerated constant in terms of its underlying type.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> or <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.  
  
 -or-  
  
 <paramref name="value" /> is neither of type <paramref name="enumType" /> nor does it have the same underlying type as <paramref name="enumType" />.</exception>
      <returns>A string containing the name of the enumerated constant in <paramref name="enumType" /> whose value is <paramref name="value" />; or <see langword="null" /> if no such constant is found.</returns>
    </member>
    <member name="M:System.Enum.GetName``1(``0)">
      <summary>Retrieves the name of the constant in the specified enumeration type that has the specified value.</summary>
      <param name="value">The value of a particular enumerated constant in terms of its underlying type.</param>
      <typeparam name="TEnum">The type of the enumeration.</typeparam>
      <returns>A string containing the name of the enumerated constant in <paramref name="enumType" /> whose value is <paramref name="value" />; or <see langword="null" /> if no such constant is found.</returns>
    </member>
    <member name="M:System.Enum.GetNames(System.Type)">
      <summary>Retrieves an array of the names of the constants in a specified enumeration.</summary>
      <param name="enumType">An enumeration type.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> parameter is not an <see cref="T:System.Enum" />.</exception>
      <returns>A string array of the names of the constants in <paramref name="enumType" />.</returns>
    </member>
    <member name="M:System.Enum.GetNames``1">
      <summary>Retrieves an array of the names of the constants in a specified enumeration type.</summary>
      <typeparam name="TEnum">The type of the enumeration.</typeparam>
      <returns>A string array of the names of the constants in <typeparamref name="TEnum" />.</returns>
    </member>
    <member name="M:System.Enum.GetTypeCode">
      <summary>Returns the type code of the underlying type of this enumeration member.</summary>
      <exception cref="T:System.InvalidOperationException">The enumeration type is unknown.</exception>
      <returns>The type code of the underlying type of this instance.</returns>
    </member>
    <member name="M:System.Enum.GetUnderlyingType(System.Type)">
      <summary>Returns the underlying type of the specified enumeration.</summary>
      <param name="enumType">The enumeration whose underlying type will be retrieved.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</exception>
      <returns>The underlying type of <paramref name="enumType" />.</returns>
    </member>
    <member name="M:System.Enum.GetValues(System.Type)">
      <summary>Retrieves an array of the values of the constants in a specified enumeration.</summary>
      <param name="enumType">An enumeration type.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</exception>
      <exception cref="T:System.InvalidOperationException">The method is invoked by reflection in a reflection-only context,  
  
 -or-  
  
 <paramref name="enumType" /> is a type from an assembly loaded in a reflection-only context.</exception>
      <returns>An array that contains the values of the constants in <paramref name="enumType" />.</returns>
    </member>
    <member name="M:System.Enum.GetValues``1">
      <summary>Retrieves an array of the values of the constants in a specified enumeration type.</summary>
      <typeparam name="TEnum">The type of the enumeration.</typeparam>
      <returns>An array that contains the values of the constants in <typeparamref name="TEnum" />.</returns>
    </member>
    <member name="M:System.Enum.HasFlag(System.Enum)">
      <summary>Determines whether one or more bit fields are set in the current instance.</summary>
      <param name="flag">An enumeration value.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="flag" /> is a different type than the current instance.</exception>
      <returns>
        <see langword="true" /> if the bit field or bit fields that are set in <paramref name="flag" /> are also set in the current instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Enum.IsDefined(System.Type,System.Object)">
      <summary>Returns a Boolean telling whether a given integral value, or its name as a string, exists in a specified enumeration.</summary>
      <param name="enumType">An enumeration type.</param>
      <param name="value">The value or name of a constant in <paramref name="enumType" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> or <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> is not an <see langword="Enum" />.  
  
 -or-  
  
 The type of <paramref name="value" /> is an enumeration, but it is not an enumeration of type <paramref name="enumType" />.  
  
 -or-  
  
 The type of <paramref name="value" /> is not an underlying type of <paramref name="enumType" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> is not type <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" />, or <see cref="T:System.UInt64" />, or <see cref="T:System.String" />.</exception>
      <returns>
        <see langword="true" /> if a constant in <paramref name="enumType" /> has a value equal to <paramref name="value" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Enum.IsDefined``1(``0)">
      <summary>Returns a boolean telling whether a given integral value, or its name as a string, exists in a specified enumeration.</summary>
      <param name="value">The value or name of a constant in <typeparamref name="TEnum" />.</param>
      <typeparam name="TEnum">The type of the enumeration.</typeparam>
      <returns>
        <see langword="true" /> if a given integral value, or its name as a string, exists in a specified enumeration; <see langword="false" /> otherwise.</returns>
    </member>
    <member name="M:System.Enum.Parse(System.Type,System.String)">
      <summary>Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</summary>
      <param name="enumType">An enumeration type.</param>
      <param name="value">A string containing the name or value to convert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> or <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.  
  
 -or-  
  
 <paramref name="value" /> is either an empty string or only contains white space.  
  
 -or-  
  
 <paramref name="value" /> is a name, but not one of the named constants defined for the enumeration.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is outside the range of the underlying type of <paramref name="enumType" />.</exception>
      <returns>An object of type <paramref name="enumType" /> whose value is represented by <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
      <summary>Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object. A parameter specifies whether the operation is case-insensitive.</summary>
      <param name="enumType">An enumeration type.</param>
      <param name="value">A string containing the name or value to convert.</param>
      <param name="ignoreCase">
        <see langword="true" /> to ignore case; <see langword="false" /> to regard case.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> or <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.  
  
 -or-  
  
 <paramref name="value" /> is either an empty string ("") or only contains white space.  
  
 -or-  
  
 <paramref name="value" /> is a name, but not one of the named constants defined for the enumeration.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is outside the range of the underlying type of <paramref name="enumType" />.</exception>
      <returns>An object of type <paramref name="enumType" /> whose value is represented by <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Enum.Parse``1(System.String)">
      <summary>Converts the string representation of the name or numeric value of one or more enumerated constants specified by <typeparamref name="TEnum" /> to an equivalent enumerated object.</summary>
      <param name="value">A string containing the name or value to convert.</param>
      <typeparam name="TEnum">An enumeration type.</typeparam>
      <exception cref="T:System.ArgumentException">
        <typeparamref name="TEnum" /> is not an <see cref="T:System.Enum" /> type.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> does not contain enumeration information.</exception>
      <returns>An object of type <paramref name="TEnum" /> whose value is represented by <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Enum.Parse``1(System.String,System.Boolean)">
      <summary>Converts the string representation of the name or numeric value of one or more enumerated constants specified by <typeparamref name="TEnum" /> to an equivalent enumerated object. A parameter specifies whether the operation is case-insensitive.</summary>
      <param name="value">A string containing the name or value to convert.</param>
      <param name="ignoreCase">
        <see langword="true" /> to ignore case; <see langword="false" /> to regard case.</param>
      <typeparam name="TEnum">An enumeration type.</typeparam>
      <exception cref="T:System.ArgumentException">
        <typeparamref name="TEnum" /> is not an <see cref="T:System.Enum" /> type.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> does not contain enumeration information.</exception>
      <returns>An object of type <paramref name="TEnum" /> whose value is represented by <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>Converts the current value to a Boolean value based on the underlying type.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
      <returns>This member always throws an exception.</returns>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>Converts the current value to an 8-bit unsigned integer based on the underlying type.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>The converted value.</returns>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>Converts the current value to a Unicode character based on the underlying type.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
      <returns>This member always throws an exception.</returns>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>Converts the current value to a <see cref="T:System.DateTime" /> based on the underlying type.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
      <returns>This member always throws an exception.</returns>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>Converts the current value to a <see cref="T:System.Decimal" /> based on the underlying type.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
      <returns>This member always throws an exception.</returns>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>Converts the current value to a double-precision floating point number based on the underlying type.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
      <returns>This member always throws an exception.</returns>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>Converts the current value to a 16-bit signed integer based on the underlying type.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>The converted value.</returns>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>Converts the current value to a 32-bit signed integer based on the underlying type.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>The converted value.</returns>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>Converts the current value to a 64-bit signed integer based on the underlying type.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>The converted value.</returns>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>Converts the current value to an 8-bit signed integer based on the underlying type.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>The converted value.</returns>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>Converts the current value to a single-precision floating-point number based on the underlying type.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
      <returns>This member always throws an exception.</returns>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>Converts the current value to a specified type based on the underlying type.</summary>
      <param name="type">The type to convert to.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>The converted value.</returns>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>Converts the current value to a 16-bit unsigned integer based on the underlying type.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>The converted value.</returns>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>Converts the current value to a 32-bit unsigned integer based on the underlying type.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>The converted value.</returns>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>Converts the current value to a 64-bit unsigned integer based on the underlying type.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>The converted value.</returns>
    </member>
    <member name="M:System.Enum.ToObject(System.Type,System.Byte)">
      <summary>Converts the specified 8-bit unsigned integer to an enumeration member.</summary>
      <param name="enumType">The enumeration type to return.</param>
      <param name="value">The value to convert to an enumeration member.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</exception>
      <returns>An instance of the enumeration set to <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Enum.ToObject(System.Type,System.Int16)">
      <summary>Converts the specified 16-bit signed integer to an enumeration member.</summary>
      <param name="enumType">The enumeration type to return.</param>
      <param name="value">The value to convert to an enumeration member.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</exception>
      <returns>An instance of the enumeration set to <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Enum.ToObject(System.Type,System.Int32)">
      <summary>Converts the specified 32-bit signed integer to an enumeration member.</summary>
      <param name="enumType">The enumeration type to return.</param>
      <param name="value">The value to convert to an enumeration member.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</exception>
      <returns>An instance of the enumeration set to <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Enum.ToObject(System.Type,System.Int64)">
      <summary>Converts the specified 64-bit signed integer to an enumeration member.</summary>
      <param name="enumType">The enumeration type to return.</param>
      <param name="value">The value to convert to an enumeration member.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</exception>
      <returns>An instance of the enumeration set to <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Enum.ToObject(System.Type,System.Object)">
      <summary>Converts the specified object with an integer value to an enumeration member.</summary>
      <param name="enumType">The enumeration type to return.</param>
      <param name="value">The value convert to an enumeration member.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> or <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.  
  
 -or-  
  
 <paramref name="value" /> is not type <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" />, or <see cref="T:System.UInt64" />.</exception>
      <returns>An enumeration object whose value is <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Enum.ToObject(System.Type,System.SByte)">
      <summary>Converts the specified 8-bit signed integer value to an enumeration member.</summary>
      <param name="enumType">The enumeration type to return.</param>
      <param name="value">The value to convert to an enumeration member.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</exception>
      <returns>An instance of the enumeration set to <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Enum.ToObject(System.Type,System.UInt16)">
      <summary>Converts the specified 16-bit unsigned integer value to an enumeration member.</summary>
      <param name="enumType">The enumeration type to return.</param>
      <param name="value">The value to convert to an enumeration member.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</exception>
      <returns>An instance of the enumeration set to <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Enum.ToObject(System.Type,System.UInt32)">
      <summary>Converts the specified 32-bit unsigned integer value to an enumeration member.</summary>
      <param name="enumType">The enumeration type to return.</param>
      <param name="value">The value to convert to an enumeration member.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</exception>
      <returns>An instance of the enumeration set to <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Enum.ToObject(System.Type,System.UInt64)">
      <summary>Converts the specified 64-bit unsigned integer value to an enumeration member.</summary>
      <param name="enumType">The enumeration type to return.</param>
      <param name="value">The value to convert to an enumeration member.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</exception>
      <returns>An instance of the enumeration set to <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Enum.ToString">
      <summary>Converts the value of this instance to its equivalent string representation.</summary>
      <returns>The string representation of the value of this instance.</returns>
    </member>
    <member name="M:System.Enum.ToString(System.IFormatProvider)">
      <summary>This method overload is obsolete; use <see cref="M:System.Enum.ToString" />.</summary>
      <param name="provider">(obsolete)</param>
      <returns>The string representation of the value of this instance.</returns>
    </member>
    <member name="M:System.Enum.ToString(System.String)">
      <summary>Converts the value of this instance to its equivalent string representation using the specified format.</summary>
      <param name="format">A format string.</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> contains an invalid specification.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="format" /> equals "X", but the enumeration type is unknown.</exception>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" />.</returns>
    </member>
    <member name="M:System.Enum.ToString(System.String,System.IFormatProvider)">
      <summary>This method overload is obsolete; use <see cref="M:System.Enum.ToString(System.String)" />.</summary>
      <param name="format">A format specification.</param>
      <param name="provider">(Obsolete.)</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> does not contain a valid format specification.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="format" /> equals "X", but the enumeration type is unknown.</exception>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" />.</returns>
    </member>
    <member name="M:System.Enum.TryParse(System.Type,System.String,System.Boolean,System.Object@)">
      <summary>Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</summary>
      <param name="enumType">The enum type to use for parsing.</param>
      <param name="value">The string representation of the name or numeric value of one or more enumerated constants.</param>
      <param name="ignoreCase">
        <see langword="true" /> to read <paramref name="value" /> in case insensitive mode; <see langword="false" /> to read <paramref name="value" /> in case sensitive mode.</param>
      <param name="result">When this method returns <see langword="true" />, an object containing an enumeration constant representing the parsed value.</param>
      <returns>
        <see langword="true" /> if the conversion succeeded; <see langword="false" /> otherwise.</returns>
    </member>
    <member name="M:System.Enum.TryParse(System.Type,System.String,System.Object@)">
      <summary>Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</summary>
      <param name="enumType">The enum type to use for parsing.</param>
      <param name="value">The string representation of the name or numeric value of one or more enumerated constants.</param>
      <param name="result">When this method returns <see langword="true" />, an object containing an enumeration constant representing the parsed value.</param>
      <returns>
        <see langword="true" /> if the conversion succeeded; <see langword="false" /> otherwise.</returns>
    </member>
    <member name="M:System.Enum.TryParse``1(System.String,``0@)">
      <summary>Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object. The return value indicates whether the conversion succeeded.</summary>
      <param name="value">The case-sensitive string representation of the enumeration name or underlying value to convert.</param>
      <param name="result">When this method returns, <paramref name="result" /> contains an object of type <c>TEnum</c> whose value is represented by <paramref name="value" /> if the parse operation succeeds. If the parse operation fails, <paramref name="result" /> contains the default value of the underlying type of <c>TEnum</c>. Note that this value need not be a member of the <c>TEnum</c> enumeration. This parameter is passed uninitialized.</param>
      <typeparam name="TEnum">The enumeration type to which to convert <paramref name="value" />.</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="TEnum" /> is not an enumeration type.</exception>
      <returns>
        <see langword="true" /> if the <paramref name="value" /> parameter was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
      <summary>Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object. A parameter specifies whether the operation is case-sensitive. The return value indicates whether the conversion succeeded.</summary>
      <param name="value">The string representation of the enumeration name or underlying value to convert.</param>
      <param name="ignoreCase">
        <see langword="true" /> to ignore case; <see langword="false" /> to consider case.</param>
      <param name="result">When this method returns, <paramref name="result" /> contains an object of type <c>TEnum</c> whose value is represented by <paramref name="value" /> if the parse operation succeeds. If the parse operation fails, <paramref name="result" /> contains the default value of the underlying type of <c>TEnum</c>. Note that this value need not be a member of the <c>TEnum</c> enumeration. This parameter is passed uninitialized.</param>
      <typeparam name="TEnum">The enumeration type to which to convert <paramref name="value" />.</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="TEnum" /> is not an enumeration type.</exception>
      <returns>
        <see langword="true" /> if the <paramref name="value" /> parameter was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.EventArgs">
      <summary>Represents the base class for classes that contain event data, and provides a value to use for events that do not include event data.</summary>
    </member>
    <member name="F:System.EventArgs.Empty">
      <summary>Provides a value to use with events that do not have event data.</summary>
    </member>
    <member name="M:System.EventArgs.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.EventArgs" /> class.</summary>
    </member>
    <member name="T:System.EventHandler">
      <summary>Represents the method that will handle an event that has no event data.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">An object that contains no event data.</param>
    </member>
    <member name="T:System.EventHandler`1">
      <summary>Represents the method that will handle an event when the event provides data.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">An object that contains the event data.</param>
      <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
    </member>
    <member name="T:System.Exception">
      <summary>Represents errors that occur during application execution.</summary>
    </member>
    <member name="E:System.Exception.SerializeObjectState">
      <summary>Occurs when an exception is serialized to create an exception state object that contains serialized data about the exception.</summary>
    </member>
    <member name="M:System.Exception.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Exception" /> class.</summary>
    </member>
    <member name="M:System.Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Exception" /> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is <see langword="null" /> or <see cref="P:System.Exception.HResult" /> is zero (0).</exception>
    </member>
    <member name="M:System.Exception.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message.</summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.Exception.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:System.Exception.GetBaseException">
      <summary>When overridden in a derived class, returns the <see cref="T:System.Exception" /> that is the root cause of one or more subsequent exceptions.</summary>
      <returns>The first exception thrown in a chain of exceptions. If the <see cref="P:System.Exception.InnerException" /> property of the current exception is a null reference (<see langword="Nothing" /> in Visual Basic), this property returns the current exception.</returns>
    </member>
    <member name="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (<see langword="Nothing" /> in Visual Basic).</exception>
    </member>
    <member name="M:System.Exception.GetType">
      <summary>Gets the runtime type of the current instance.</summary>
      <returns>A <see cref="T:System.Type" /> object that represents the exact runtime type of the current instance.</returns>
    </member>
    <member name="M:System.Exception.ToString">
      <summary>Creates and returns a string representation of the current exception.</summary>
      <returns>A string representation of the current exception.</returns>
    </member>
    <member name="P:System.Exception.Data">
      <summary>Gets a collection of key/value pairs that provide additional user-defined information about the exception.</summary>
      <returns>An object that implements the <see cref="T:System.Collections.IDictionary" /> interface and contains a collection of user-defined key/value pairs. The default is an empty collection.</returns>
    </member>
    <member name="P:System.Exception.HelpLink">
      <summary>Gets or sets a link to the help file associated with this exception.</summary>
      <returns>The Uniform Resource Name (URN) or Uniform Resource Locator (URL).</returns>
    </member>
    <member name="P:System.Exception.HResult">
      <summary>Gets or sets HRESULT, a coded numerical value that is assigned to a specific exception.</summary>
      <returns>The HRESULT value.</returns>
    </member>
    <member name="P:System.Exception.InnerException">
      <summary>Gets the <see cref="T:System.Exception" /> instance that caused the current exception.</summary>
      <returns>An object that describes the error that caused the current exception. The <see cref="P:System.Exception.InnerException" /> property returns the same value as was passed into the <see cref="M:System.Exception.#ctor(System.String,System.Exception)" /> constructor, or <see langword="null" /> if the inner exception value was not supplied to the constructor. This property is read-only.</returns>
    </member>
    <member name="P:System.Exception.Message">
      <summary>Gets a message that describes the current exception.</summary>
      <returns>The error message that explains the reason for the exception, or an empty string ("").</returns>
    </member>
    <member name="P:System.Exception.Source">
      <summary>Gets or sets the name of the application or the object that causes the error.</summary>
      <exception cref="T:System.ArgumentException">The object must be a runtime <see cref="N:System.Reflection" /> object.</exception>
      <returns>The name of the application or the object that causes the error.</returns>
    </member>
    <member name="P:System.Exception.StackTrace">
      <summary>Gets a string representation of the immediate frames on the call stack.</summary>
      <returns>A string that describes the immediate frames of the call stack.</returns>
    </member>
    <member name="P:System.Exception.TargetSite">
      <summary>Gets the method that throws the current exception.</summary>
      <returns>The <see cref="T:System.Reflection.MethodBase" /> that threw the current exception.</returns>
    </member>
    <member name="T:System.FieldAccessException">
      <summary>The exception that is thrown when there is an invalid attempt to access a private or protected field inside a class.</summary>
    </member>
    <member name="M:System.FieldAccessException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.FieldAccessException" /> class.</summary>
    </member>
    <member name="M:System.FieldAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.FieldAccessException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.FieldAccessException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.FieldAccessException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.FieldAccessException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.FieldAccessException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.FlagsAttribute">
      <summary>Indicates that an enumeration can be treated as a bit field; that is, a set of flags.</summary>
    </member>
    <member name="M:System.FlagsAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.FlagsAttribute" /> class.</summary>
    </member>
    <member name="T:System.FormatException">
      <summary>The exception that is thrown when the format of an argument is invalid, or when a composite format string is not well formed.</summary>
    </member>
    <member name="M:System.FormatException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.FormatException" /> class.</summary>
    </member>
    <member name="M:System.FormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.FormatException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.FormatException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.FormatException" /> class with a specified error message.</summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.FormatException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.FormatException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.Func`1">
      <summary>Encapsulates a method that has no parameters and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.</summary>
      <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
      <returns>The return value of the method that this delegate encapsulates.</returns>
    </member>
    <member name="T:System.Func`2">
      <summary>Encapsulates a method that has one parameter and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.</summary>
      <param name="arg">The parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T">The type of the parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
      <returns>The return value of the method that this delegate encapsulates.</returns>
    </member>
    <member name="T:System.Func`3">
      <summary>Encapsulates a method that has two parameters and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
      <returns>The return value of the method that this delegate encapsulates.</returns>
    </member>
    <member name="T:System.Func`4">
      <summary>Encapsulates a method that has three parameters and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
      <returns>The return value of the method that this delegate encapsulates.</returns>
    </member>
    <member name="T:System.Func`5">
      <summary>Encapsulates a method that has four parameters and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
      <returns>The return value of the method that this delegate encapsulates.</returns>
    </member>
    <member name="T:System.Func`6">
      <summary>Encapsulates a method that has five parameters and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
      <returns>The return value of the method that this delegate encapsulates.</returns>
    </member>
    <member name="T:System.Func`7">
      <summary>Encapsulates a method that has six parameters and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
      <returns>The return value of the method that this delegate encapsulates.</returns>
    </member>
    <member name="T:System.Func`8">
      <summary>Encapsulates a method that has seven parameters and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
      <returns>The return value of the method that this delegate encapsulates.</returns>
    </member>
    <member name="T:System.Func`9">
      <summary>Encapsulates a method that has eight parameters and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
      <returns>The return value of the method that this delegate encapsulates.</returns>
    </member>
    <member name="T:System.GC">
      <summary>Controls the system garbage collector, a service that automatically reclaims unused memory.</summary>
    </member>
    <member name="M:System.GC.AddMemoryPressure(System.Int64)">
      <summary>Informs the runtime of a large allocation of unmanaged memory that should be taken into account when scheduling garbage collection.</summary>
      <param name="bytesAllocated">The incremental amount of unmanaged memory that has been allocated.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bytesAllocated" /> is less than or equal to 0.  
  
 -or-  
  
 On a 32-bit computer, <paramref name="bytesAllocated" /> is larger than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.GC.AllocateArray``1(System.Int32,System.Boolean)">
      <summary>Allocates an array.</summary>
      <param name="length">Specifies the length of the array.</param>
      <param name="pinned">Specifies whether the allocated array must be pinned.</param>
      <typeparam name="T">Specifies the type of the array element.</typeparam>
      <returns>An array object.</returns>
    </member>
    <member name="M:System.GC.AllocateUninitializedArray``1(System.Int32,System.Boolean)">
      <summary>Allocates an array while skipping zero-initialization, if possible.</summary>
      <param name="length">Specifies the length of the array.</param>
      <param name="pinned">Specifies whether the allocated array must be pinned.</param>
      <typeparam name="T">Specifies the type of the array element.</typeparam>
      <returns>An array object with uninitialized memory except if it contains references or if it's too small for unpinned.</returns>
    </member>
    <member name="M:System.GC.CancelFullGCNotification">
      <summary>Cancels the registration of a garbage collection notification.</summary>
      <exception cref="T:System.InvalidOperationException">This member is not available when concurrent garbage collection is enabled. See the &lt;gcConcurrent&gt; runtime setting for information about how to disable concurrent garbage collection.</exception>
    </member>
    <member name="M:System.GC.Collect">
      <summary>Forces an immediate garbage collection of all generations.</summary>
    </member>
    <member name="M:System.GC.Collect(System.Int32)">
      <summary>Forces an immediate garbage collection from generation 0 through a specified generation.</summary>
      <param name="generation">The number of the oldest generation to be garbage collected.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="generation" /> is not valid.</exception>
    </member>
    <member name="M:System.GC.Collect(System.Int32,System.GCCollectionMode)">
      <summary>Forces a garbage collection from generation 0 through a specified generation, at a time specified by a <see cref="T:System.GCCollectionMode" /> value.</summary>
      <param name="generation">The number of the oldest generation to be garbage collected.</param>
      <param name="mode">An enumeration value that specifies whether the garbage collection is forced (<see cref="F:System.GCCollectionMode.Default" /> or <see cref="F:System.GCCollectionMode.Forced" />) or optimized (<see cref="F:System.GCCollectionMode.Optimized" />).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="generation" /> is not valid.  
  
 -or-  
  
 <paramref name="mode" /> is not one of the <see cref="T:System.GCCollectionMode" /> values.</exception>
    </member>
    <member name="M:System.GC.Collect(System.Int32,System.GCCollectionMode,System.Boolean)">
      <summary>Forces a garbage collection from generation 0 through a specified generation, at a time specified by a <see cref="T:System.GCCollectionMode" /> value, with a value specifying whether the collection should be blocking.</summary>
      <param name="generation">The number of the oldest generation to be garbage collected.</param>
      <param name="mode">An enumeration value that specifies whether the garbage collection is forced (<see cref="F:System.GCCollectionMode.Default" /> or <see cref="F:System.GCCollectionMode.Forced" />) or optimized (<see cref="F:System.GCCollectionMode.Optimized" />).</param>
      <param name="blocking">
        <see langword="true" /> to perform a blocking garbage collection; <see langword="false" /> to perform a background garbage collection where possible.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="generation" /> is not valid.  
  
 -or-  
  
 <paramref name="mode" /> is not one of the <see cref="T:System.GCCollectionMode" /> values.</exception>
    </member>
    <member name="M:System.GC.Collect(System.Int32,System.GCCollectionMode,System.Boolean,System.Boolean)">
      <summary>Forces a garbage collection from generation 0 through a specified generation, at a time specified by a <see cref="T:System.GCCollectionMode" /> value, with values that specify whether the collection should be blocking and compacting.</summary>
      <param name="generation">The number of the oldest generation to be garbage collected.</param>
      <param name="mode">An enumeration value that specifies whether the garbage collection is forced (<see cref="F:System.GCCollectionMode.Default" /> or <see cref="F:System.GCCollectionMode.Forced" />) or optimized (<see cref="F:System.GCCollectionMode.Optimized" />).</param>
      <param name="blocking">
        <see langword="true" /> to perform a blocking garbage collection; <see langword="false" /> to perform a background garbage collection where possible.</param>
      <param name="compacting">
        <see langword="true" /> to compact the small object heap; <see langword="false" /> to sweep only.</param>
    </member>
    <member name="M:System.GC.CollectionCount(System.Int32)">
      <summary>Returns the number of times garbage collection has occurred for the specified generation of objects.</summary>
      <param name="generation">The generation of objects for which the garbage collection count is to be determined.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="generation" /> is less than 0.</exception>
      <returns>The number of times garbage collection has occurred for the specified generation since the process was started.</returns>
    </member>
    <member name="M:System.GC.EndNoGCRegion">
      <summary>Ends the no GC region latency mode.</summary>
      <exception cref="T:System.InvalidOperationException">The garbage collector is not in no GC region latency mode.  
  
 -or-  
  
 The no GC region latency mode was ended previously because a garbage collection was induced.  
  
 -or-  
  
 A memory allocation exceeded the amount specified in the call to the <see cref="M:System.GC.TryStartNoGCRegion(System.Int64)" /> method.</exception>
    </member>
    <member name="M:System.GC.GetAllocatedBytesForCurrentThread">
      <summary>Gets the total number of bytes allocated to the current thread since the beginning of its lifetime.</summary>
      <returns>The total number of bytes allocated to the current thread since the beginning of its lifetime.</returns>
    </member>
    <member name="M:System.GC.GetGCMemoryInfo">
      <summary>Gets garbage collection memory information.</summary>
      <returns>An object that contains information about the garbage collector's memory usage.</returns>
    </member>
    <member name="M:System.GC.GetGCMemoryInfo(System.GCKind)">
      <summary>Gets garbage collection memory information.</summary>
      <param name="kind">The kind of collection for which to retrieve memory information.</param>
      <returns>An object that contains information about the garbage collector's memory usage.</returns>
    </member>
    <member name="M:System.GC.GetGeneration(System.Object)">
      <summary>Returns the current generation number of the specified object.</summary>
      <param name="obj">The object that generation information is retrieved for.</param>
      <returns>The current generation number of <paramref name="obj" />.</returns>
    </member>
    <member name="M:System.GC.GetGeneration(System.WeakReference)">
      <summary>Returns the current generation number of the target of a specified weak reference.</summary>
      <param name="wo">A <see cref="T:System.WeakReference" /> that refers to the target object whose generation number is to be determined.</param>
      <exception cref="T:System.ArgumentException">Garbage collection has already been performed on <paramref name="wo" />.</exception>
      <returns>The current generation number of the target of <paramref name="wo" />.</returns>
    </member>
    <member name="M:System.GC.GetTotalAllocatedBytes(System.Boolean)">
      <summary>Gets a count of the bytes allocated over the lifetime of the process.</summary>
      <param name="precise">If <see langword="true" />, gather a precise number; otherwise, gather an approximate count. Gathering a precise value entails a significant performance penalty.</param>
      <returns>The total number of bytes allocated over the lifetime of the process.</returns>
    </member>
    <member name="M:System.GC.GetTotalMemory(System.Boolean)">
      <summary>Retrieves the number of bytes currently thought to be allocated. A parameter indicates whether this method can wait a short interval before returning, to allow the system to collect garbage and finalize objects.</summary>
      <param name="forceFullCollection">
        <see langword="true" /> to indicate that this method can wait for garbage collection to occur before returning; otherwise, <see langword="false" />.</param>
      <returns>A number that is the best available approximation of the number of bytes currently allocated in managed memory.</returns>
    </member>
    <member name="M:System.GC.KeepAlive(System.Object)">
      <summary>References the specified object, which makes it ineligible for garbage collection from the start of the current routine to the point where this method is called.</summary>
      <param name="obj">The object to reference.</param>
    </member>
    <member name="M:System.GC.RegisterForFullGCNotification(System.Int32,System.Int32)">
      <summary>Specifies that a garbage collection notification should be raised when conditions favor full garbage collection and when the collection has been completed.</summary>
      <param name="maxGenerationThreshold">A number between 1 and 99 that specifies when the notification should be raised based on the objects allocated in generation 2.</param>
      <param name="largeObjectHeapThreshold">A number between 1 and 99 that specifies when the notification should be raised based on objects allocated in the large object heap.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxGenerationThreshold" /> or <paramref name="largeObjectHeapThreshold" /> is not between 1 and 99.</exception>
      <exception cref="T:System.InvalidOperationException">This member is not available when concurrent garbage collection is enabled. See the &lt;gcConcurrent&gt; runtime setting for information about how to disable concurrent garbage collection.</exception>
    </member>
    <member name="M:System.GC.RemoveMemoryPressure(System.Int64)">
      <summary>Informs the runtime that unmanaged memory has been released and no longer needs to be taken into account when scheduling garbage collection.</summary>
      <param name="bytesAllocated">The amount of unmanaged memory that has been released.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bytesAllocated" /> is less than or equal to 0.  
  
 -or-  
  
 On a 32-bit computer, <paramref name="bytesAllocated" /> is larger than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.GC.ReRegisterForFinalize(System.Object)">
      <summary>Requests that the system call the finalizer for the specified object for which <see cref="M:System.GC.SuppressFinalize(System.Object)" /> has previously been called.</summary>
      <param name="obj">The object that a finalizer must be called for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.GC.SuppressFinalize(System.Object)">
      <summary>Requests that the common language runtime not call the finalizer for the specified object.</summary>
      <param name="obj">The object whose finalizer must not be executed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.GC.TryStartNoGCRegion(System.Int64)">
      <summary>Attempts to disallow garbage collection during the execution of a critical path if a specified amount of memory is available.</summary>
      <param name="totalSize">The amount of memory in bytes to allocate without triggering a garbage collection. It must be less than or equal to the size of an ephemeral segment. For information on the size of an ephemeral segment, see the "Ephemeral generations and segments" section in the Fundamentals of Garbage Collection article.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="totalSize" /> exceeds the ephemeral segment size.</exception>
      <exception cref="T:System.InvalidOperationException">The process is already in no GC region latency mode.</exception>
      <returns>
        <see langword="true" /> if the runtime was able to commit the required amount of memory and the garbage collector is able to enter no GC region latency mode; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.GC.TryStartNoGCRegion(System.Int64,System.Boolean)">
      <summary>Attempts to disallow garbage collection during the execution of a critical path if a specified amount of memory is available, and controls whether the garbage collector does a full blocking garbage collection if not enough memory is initially available.</summary>
      <param name="totalSize">The amount of memory in bytes to allocate without triggering a garbage collection. It must be less than or equal to the size of an ephemeral segment. For information on the size of an ephemeral segment, see the "Ephemeral generations and segments" section in the Fundamentals of Garbage Collection article.</param>
      <param name="disallowFullBlockingGC">
        <see langword="true" /> to omit a full blocking garbage collection if the garbage collector is initially unable to allocate <paramref name="totalSize" /> bytes; otherwise, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="totalSize" /> exceeds the ephemeral segment size.</exception>
      <exception cref="T:System.InvalidOperationException">The process is already in no GC region latency mode.</exception>
      <returns>
        <see langword="true" /> if the runtime was able to commit the required amount of memory and the garbage collector is able to enter no GC region latency mode; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.GC.TryStartNoGCRegion(System.Int64,System.Int64)">
      <summary>Attempts to disallow garbage collection during the execution of a critical path if a specified amount of memory is available for the large object heap and the small object heap.</summary>
      <param name="totalSize">The amount of memory in bytes to allocate without triggering a garbage collection. <paramref name="totalSize" /> -<paramref name="lohSize" /> must be less than or equal to the size of an ephemeral segment. For information on the size of an ephemeral segment, see the "Ephemeral generations and segments" section in the Fundamentals of Garbage Collection article.</param>
      <param name="lohSize">The number of bytes in <paramref name="totalSize" /> to use for large object heap (LOH) allocations.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="totalSize" /> - <paramref name="lohSize" /> exceeds the ephemeral segment size.</exception>
      <exception cref="T:System.InvalidOperationException">The process is already in no GC region latency mode.</exception>
      <returns>
        <see langword="true" /> if the runtime was able to commit the required amount of memory and the garbage collector is able to enter no GC region latency mode; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.GC.TryStartNoGCRegion(System.Int64,System.Int64,System.Boolean)">
      <summary>Attempts to disallow garbage collection during the execution of a critical path if a specified amount of memory is available for the large object heap and the small object heap, and controls whether the garbage collector does a full blocking garbage collection if not enough memory is initially available.</summary>
      <param name="totalSize">The amount of memory in bytes to allocate without triggering a garbage collection. <paramref name="totalSize" /> -<paramref name="lohSize" /> must be less than or equal to the size of an ephemeral segment. For information on the size of an ephemeral segment, see the "Ephemeral generations and segments" section in the Fundamentals of Garbage Collection article.</param>
      <param name="lohSize">The number of bytes in <paramref name="totalSize" /> to use for large object heap (LOH) allocations.</param>
      <param name="disallowFullBlockingGC">
        <see langword="true" /> to omit a full blocking garbage collection if the garbage collector is initially unable to allocate the specified memory on the small object heap (SOH) and LOH; otherwise, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="totalSize" /> - <paramref name="lohSize" /> exceeds the ephemeral segment size.</exception>
      <exception cref="T:System.InvalidOperationException">The process is already in no GC region latency mode.</exception>
      <returns>
        <see langword="true" /> if the runtime was able to commit the required amount of memory and the garbage collector is able to enter no GC region latency mode; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.GC.WaitForFullGCApproach">
      <summary>Returns the status of a registered notification for determining whether a full, blocking garbage collection by the common language runtime is imminent.</summary>
      <returns>The status of the registered garbage collection notification.</returns>
    </member>
    <member name="M:System.GC.WaitForFullGCApproach(System.Int32)">
      <summary>Returns, in a specified time-out period, the status of a registered notification for determining whether a full, blocking garbage collection by the common language runtime is imminent.</summary>
      <param name="millisecondsTimeout">The length of time to wait before a notification status can be obtained. Specify -1 to wait indefinitely.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> must be either non-negative or less than or equal to <see cref="F:System.Int32.MaxValue" /> or -1.</exception>
      <returns>The status of the registered garbage collection notification.</returns>
    </member>
    <member name="M:System.GC.WaitForFullGCComplete">
      <summary>Returns the status of a registered notification for determining whether a full, blocking garbage collection by the common language runtime has completed.</summary>
      <returns>The status of the registered garbage collection notification.</returns>
    </member>
    <member name="M:System.GC.WaitForFullGCComplete(System.Int32)">
      <summary>Returns, in a specified time-out period, the status of a registered notification for determining whether a full, blocking garbage collection by common language the runtime has completed.</summary>
      <param name="millisecondsTimeout">The length of time to wait before a notification status can be obtained. Specify -1 to wait indefinitely.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="millisecondsTimeout" /> must be either non-negative or less than or equal to <see cref="F:System.Int32.MaxValue" /> or -1.</exception>
      <returns>The status of the registered garbage collection notification.</returns>
    </member>
    <member name="M:System.GC.WaitForPendingFinalizers">
      <summary>Suspends the current thread until the thread that is processing the queue of finalizers has emptied that queue.</summary>
    </member>
    <member name="P:System.GC.MaxGeneration">
      <summary>Gets the maximum number of generations that the system currently supports.</summary>
      <returns>A value that ranges from zero to the maximum number of supported generations.</returns>
    </member>
    <member name="T:System.GCCollectionMode">
      <summary>Specifies the behavior for a forced garbage collection.</summary>
    </member>
    <member name="F:System.GCCollectionMode.Default">
      <summary>The default setting for this enumeration, which is currently <see cref="F:System.GCCollectionMode.Forced" />.</summary>
    </member>
    <member name="F:System.GCCollectionMode.Forced">
      <summary>Forces the garbage collection to occur immediately.</summary>
    </member>
    <member name="F:System.GCCollectionMode.Optimized">
      <summary>Allows the garbage collector to determine whether the current time is optimal to reclaim objects.</summary>
    </member>
    <member name="T:System.Globalization.DateTimeStyles">
      <summary>Defines the formatting options that customize string parsing for some date and time parsing methods.</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AdjustToUniversal">
      <summary>Date and time are returned as a Coordinated Universal Time (UTC). If the input string denotes a local time, through a time zone specifier or <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" />, the date and time are converted from the local time to UTC. If the input string denotes a UTC time, through a time zone specifier or <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />, no conversion occurs. If the input string does not denote a local or UTC time, no conversion occurs and the resulting <see cref="P:System.DateTime.Kind" /> property is <see cref="F:System.DateTimeKind.Unspecified" />. This value cannot be used with <see cref="F:System.Globalization.DateTimeStyles.RoundtripKind" />.</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AllowInnerWhite">
      <summary>Extra white-space characters in the middle of the string must be ignored during parsing, except if they occur in the <see cref="T:System.Globalization.DateTimeFormatInfo" /> format patterns.</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AllowLeadingWhite">
      <summary>Leading white-space characters must be ignored during parsing, except if they occur in the <see cref="T:System.Globalization.DateTimeFormatInfo" /> format patterns.</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AllowTrailingWhite">
      <summary>Trailing white-space characters must be ignored during parsing, except if they occur in the <see cref="T:System.Globalization.DateTimeFormatInfo" /> format patterns.</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AllowWhiteSpaces">
      <summary>Extra white-space characters anywhere in the string must be ignored during parsing, except if they occur in the <see cref="T:System.Globalization.DateTimeFormatInfo" /> format patterns. This value is a combination of the <see cref="F:System.Globalization.DateTimeStyles.AllowLeadingWhite" />, <see cref="F:System.Globalization.DateTimeStyles.AllowTrailingWhite" />, and <see cref="F:System.Globalization.DateTimeStyles.AllowInnerWhite" /> values.</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AssumeLocal">
      <summary>If no time zone is specified in the parsed string, the string is assumed to denote a local time. This value cannot be used with <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" /> or <see cref="F:System.Globalization.DateTimeStyles.RoundtripKind" />.</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AssumeUniversal">
      <summary>If no time zone is specified in the parsed string, the string is assumed to denote a UTC. This value cannot be used with <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> or <see cref="F:System.Globalization.DateTimeStyles.RoundtripKind" />.</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault">
      <summary>If the parsed string contains only the time and not the date, the parsing methods assume the Gregorian date with year = 1, month = 1, and day = 1. If this value is not used, the current date is assumed.</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.None">
      <summary>Default formatting options must be used. This value represents the default style for the <see cref="M:System.DateTime.Parse(System.String)" />, <see cref="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)" />, and <see cref="M:System.DateTime.TryParse(System.String,System.DateTime@)" /> methods.</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.RoundtripKind">
      <summary>The <see cref="T:System.DateTimeKind" /> field of a date is preserved when a <see cref="T:System.DateTime" /> object is converted to a string using the "o" or "r" standard format specifier, and the string is then converted back to a <see cref="T:System.DateTime" /> object.</summary>
    </member>
    <member name="T:System.Globalization.NumberStyles">
      <summary>Determines the styles permitted in numeric string arguments that are passed to the <see langword="Parse" /> and <see langword="TryParse" /> methods of the integral and floating-point numeric types.</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowCurrencySymbol">
      <summary>Indicates that the numeric string can contain a currency symbol. Valid currency symbols are determined by the <see cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" /> property.</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowDecimalPoint">
      <summary>Indicates that the numeric string can have a decimal point. If the <see cref="T:System.Globalization.NumberStyles" /> value includes the <see cref="F:System.Globalization.NumberStyles.AllowCurrencySymbol" /> flag and the parsed string includes a currency symbol, the decimal separator character is determined by the <see cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" /> property. Otherwise, the decimal separator character is determined by the <see cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" /> property.</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowExponent">
      <summary>Indicates that the numeric string can be in exponential notation. The <see cref="F:System.Globalization.NumberStyles.AllowExponent" /> flag allows the parsed string to contain an exponent that begins with the "E" or "e" character and that is followed by an optional positive or negative sign and an integer. In other words, it successfully parses strings in the form nnnExx, nnnE+xx, and nnnE-xx. It does not allow a decimal separator or sign in the significand or mantissa; to allow these elements in the string to be parsed, use the <see cref="F:System.Globalization.NumberStyles.AllowDecimalPoint" /> and <see cref="F:System.Globalization.NumberStyles.AllowLeadingSign" /> flags, or use a composite style that includes these individual flags.</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowHexSpecifier">
      <summary>Indicates that the numeric string represents a hexadecimal value. Valid hexadecimal values include the numeric digits 0-9 and the hexadecimal digits A-F and a-f. Strings that are parsed using this style cannot be prefixed with "0x" or "&amp;h". A string that is parsed with the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> style will always be interpreted as a hexadecimal value. The only flags that can be combined with <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> are <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" /> and <see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" />. The <see cref="T:System.Globalization.NumberStyles" /> enumeration includes a composite style, <see cref="F:System.Globalization.NumberStyles.HexNumber" />, that consists of these three flags.</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowLeadingSign">
      <summary>Indicates that the numeric string can have a leading sign. Valid leading sign characters are determined by the <see cref="P:System.Globalization.NumberFormatInfo.PositiveSign" /> and <see cref="P:System.Globalization.NumberFormatInfo.NegativeSign" /> properties.</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowLeadingWhite">
      <summary>Indicates that leading white-space characters can be present in the parsed string. Valid white-space characters have the Unicode values U+0009, U+000A, U+000B, U+000C, U+000D, and U+0020. Note that this is a subset of the characters for which the <see cref="M:System.Char.IsWhiteSpace(System.Char)" /> method returns <see langword="true" />.</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowParentheses">
      <summary>Indicates that the numeric string can have one pair of parentheses enclosing the number. The parentheses indicate that the string to be parsed represents a negative number.</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowThousands">
      <summary>Indicates that the numeric string can have group separators, such as symbols that separate hundreds from thousands. If the <see cref="T:System.Globalization.NumberStyles" /> value includes the <see cref="F:System.Globalization.NumberStyles.AllowCurrencySymbol" /> flag and the string to be parsed includes a currency symbol, the valid group separator character is determined by the <see cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" /> property,  and the number of digits in each group is determined by the <see cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" /> property. Otherwise, the valid group separator character is determined by the <see cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" /> property, and the number of digits in each group is determined by the <see cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" /> property.</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowTrailingSign">
      <summary>Indicates that the numeric string can have a trailing sign. Valid trailing sign characters are determined by the <see cref="P:System.Globalization.NumberFormatInfo.PositiveSign" /> and <see cref="P:System.Globalization.NumberFormatInfo.NegativeSign" /> properties.</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowTrailingWhite">
      <summary>Indicates that trailing white-space characters can be present in the parsed string. Valid white-space characters have the Unicode values U+0009, U+000A, U+000B, U+000C, U+000D, and U+0020. Note that this is a subset of the characters for which the <see cref="M:System.Char.IsWhiteSpace(System.Char)" /> method returns <see langword="true" />.</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Any">
      <summary>Indicates that all styles except <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> are used. This is a composite number style.</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Currency">
      <summary>Indicates that all styles except <see cref="F:System.Globalization.NumberStyles.AllowExponent" /> and <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> are used. This is a composite number style.</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Float">
      <summary>Indicates that the <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" />, <see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" />, <see cref="F:System.Globalization.NumberStyles.AllowLeadingSign" />, <see cref="F:System.Globalization.NumberStyles.AllowDecimalPoint" />, and <see cref="F:System.Globalization.NumberStyles.AllowExponent" /> styles are used. This is a composite number style.</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.HexNumber">
      <summary>Indicates that the <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" />, <see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" />, and <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> styles are used. This is a composite number style.</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Integer">
      <summary>Indicates that the <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" />, <see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" />, and <see cref="F:System.Globalization.NumberStyles.AllowLeadingSign" /> styles are used. This is a composite number style.</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.None">
      <summary>Indicates that no style elements, such as leading or trailing white space, thousands separators, or a decimal separator, can be present in the parsed string. The string to be parsed must consist of integral decimal digits only.</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Number">
      <summary>Indicates that the <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" />, <see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" />, <see cref="F:System.Globalization.NumberStyles.AllowLeadingSign" />, <see cref="F:System.Globalization.NumberStyles.AllowTrailingSign" />, <see cref="F:System.Globalization.NumberStyles.AllowDecimalPoint" />, and <see cref="F:System.Globalization.NumberStyles.AllowThousands" /> styles are used. This is a composite number style.</summary>
    </member>
    <member name="T:System.Globalization.TimeSpanStyles">
      <summary>Defines the formatting options that customize string parsing for the <see cref="Overload:System.TimeSpan.ParseExact" /> and <see cref="Overload:System.TimeSpan.TryParseExact" /> methods.</summary>
    </member>
    <member name="F:System.Globalization.TimeSpanStyles.AssumeNegative">
      <summary>Indicates that input is always interpreted as a negative time interval.</summary>
    </member>
    <member name="F:System.Globalization.TimeSpanStyles.None">
      <summary>Indicates that input is interpreted as a negative time interval only if a negative sign is present.</summary>
    </member>
    <member name="T:System.Guid">
      <summary>Represents a globally unique identifier (GUID).</summary>
    </member>
    <member name="F:System.Guid.Empty">
      <summary>A read-only instance of the <see cref="T:System.Guid" /> structure whose value is all zeros.</summary>
    </member>
    <member name="M:System.Guid.#ctor(System.Byte[])">
      <summary>Initializes a new instance of the <see cref="T:System.Guid" /> structure by using the specified array of bytes.</summary>
      <param name="b">A 16-element byte array containing values with which to initialize the GUID.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="b" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="b" /> is not 16 bytes long.</exception>
    </member>
    <member name="M:System.Guid.#ctor(System.Int32,System.Int16,System.Int16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>Initializes a new instance of the <see cref="T:System.Guid" /> structure by using the specified integers and bytes.</summary>
      <param name="a">The first 4 bytes of the GUID.</param>
      <param name="b">The next 2 bytes of the GUID.</param>
      <param name="c">The next 2 bytes of the GUID.</param>
      <param name="d">The next byte of the GUID.</param>
      <param name="e">The next byte of the GUID.</param>
      <param name="f">The next byte of the GUID.</param>
      <param name="g">The next byte of the GUID.</param>
      <param name="h">The next byte of the GUID.</param>
      <param name="i">The next byte of the GUID.</param>
      <param name="j">The next byte of the GUID.</param>
      <param name="k">The next byte of the GUID.</param>
    </member>
    <member name="M:System.Guid.#ctor(System.Int32,System.Int16,System.Int16,System.Byte[])">
      <summary>Initializes a new instance of the <see cref="T:System.Guid" /> structure by using the specified integers and byte array.</summary>
      <param name="a">The first 4 bytes of the GUID.</param>
      <param name="b">The next 2 bytes of the GUID.</param>
      <param name="c">The next 2 bytes of the GUID.</param>
      <param name="d">The remaining 8 bytes of the GUID.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="d" /> is not 8 bytes long.</exception>
    </member>
    <member name="M:System.Guid.#ctor(System.ReadOnlySpan{System.Byte})">
      <summary>Initializes a new instance of the <see cref="T:System.Guid" /> structure by using the value represented by the specified read-only span of bytes.</summary>
      <param name="b">A read-only span containing the bytes representing the GUID. The span must be exactly 16 bytes long.</param>
      <exception cref="T:System.ArgumentException">The span must be exactly 16 bytes long.</exception>
    </member>
    <member name="M:System.Guid.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Guid" /> structure by using the value represented by the specified string.</summary>
      <param name="g">A string that contains a GUID in one of the following formats ("d" represents a hexadecimal digit whose case is ignored):  
  
 32 contiguous digits:  
  
 dddddddddddddddddddddddddddddddd  
  
 -or-  
  
 Groups of 8, 4, 4, 4, and 12 digits with hyphens between the groups. The entire GUID can optionally be enclosed in matching braces or parentheses:  
  
 dddddddd-dddd-dddd-dddd-dddddddddddd  
  
 -or-  
  
 {dddddddd-dddd-dddd-dddd-dddddddddddd}  
  
 -or-  
  
 (dddddddd-dddd-dddd-dddd-dddddddddddd)  
  
 -or-  
  
 Groups of 8, 4, and 4 digits, and a subset of eight groups of 2 digits, with each group prefixed by "0x" or "0X", and separated by commas. The entire GUID, as well as the subset, is enclosed in matching braces:  
  
 {0xdddddddd, 0xdddd, 0xdddd,{0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd}}  
  
 All braces, commas, and "0x" prefixes are required. All embedded spaces are ignored. All leading zeros in a group are ignored.  
  
 The digits shown in a group are the maximum number of meaningful digits that can appear in that group. You can specify from 1 to the number of digits shown for a group. The specified digits are assumed to be the low-order digits of the group.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="g" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">The format of <paramref name="g" /> is invalid.</exception>
      <exception cref="T:System.OverflowException">The format of <paramref name="g" /> is invalid.</exception>
    </member>
    <member name="M:System.Guid.#ctor(System.UInt32,System.UInt16,System.UInt16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>Initializes a new instance of the <see cref="T:System.Guid" /> structure by using the specified unsigned integers and bytes.</summary>
      <param name="a">The first 4 bytes of the GUID.</param>
      <param name="b">The next 2 bytes of the GUID.</param>
      <param name="c">The next 2 bytes of the GUID.</param>
      <param name="d">The next byte of the GUID.</param>
      <param name="e">The next byte of the GUID.</param>
      <param name="f">The next byte of the GUID.</param>
      <param name="g">The next byte of the GUID.</param>
      <param name="h">The next byte of the GUID.</param>
      <param name="i">The next byte of the GUID.</param>
      <param name="j">The next byte of the GUID.</param>
      <param name="k">The next byte of the GUID.</param>
    </member>
    <member name="M:System.Guid.CompareTo(System.Guid)">
      <summary>Compares this instance to a specified <see cref="T:System.Guid" /> object and returns an indication of their relative values.</summary>
      <param name="value">An object to compare to this instance.</param>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.  
  
 <list type="table"><listheader><term> Return value</term><description> Description</description></listheader><item><term> A negative integer</term><description> This instance is less than <paramref name="value" />.</description></item><item><term> Zero</term><description> This instance is equal to <paramref name="value" />.</description></item><item><term> A positive integer</term><description> This instance is greater than <paramref name="value" />.</description></item></list></returns>
    </member>
    <member name="M:System.Guid.CompareTo(System.Object)">
      <summary>Compares this instance to a specified object and returns an indication of their relative values.</summary>
      <param name="value">An object to compare, or <see langword="null" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.Guid" />.</exception>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.  
  
 <list type="table"><listheader><term> Return value</term><description> Description</description></listheader><item><term> A negative integer</term><description> This instance is less than <paramref name="value" />.</description></item><item><term> Zero</term><description> This instance is equal to <paramref name="value" />.</description></item><item><term> A positive integer</term><description> This instance is greater than <paramref name="value" />, or <paramref name="value" /> is <see langword="null" />.</description></item></list></returns>
    </member>
    <member name="M:System.Guid.Equals(System.Guid)">
      <summary>Returns a value indicating whether this instance and a specified <see cref="T:System.Guid" /> object represent the same value.</summary>
      <param name="g">An object to compare to this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="g" /> is equal to this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Guid.Equals(System.Object)">
      <summary>Returns a value that indicates whether this instance is equal to a specified object.</summary>
      <param name="o">The object to compare with this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="o" /> is a <see cref="T:System.Guid" /> that has the same value as this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Guid.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>The hash code for this instance.</returns>
    </member>
    <member name="M:System.Guid.NewGuid">
      <summary>Initializes a new instance of the <see cref="T:System.Guid" /> structure.</summary>
      <returns>A new GUID object.</returns>
    </member>
    <member name="M:System.Guid.op_Equality(System.Guid,System.Guid)">
      <summary>Indicates whether the values of two specified <see cref="T:System.Guid" /> objects are equal.</summary>
      <param name="a">The first object to compare.</param>
      <param name="b">The second object to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="a" /> and <paramref name="b" /> are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Guid.op_Inequality(System.Guid,System.Guid)">
      <summary>Indicates whether the values of two specified <see cref="T:System.Guid" /> objects are not equal.</summary>
      <param name="a">The first object to compare.</param>
      <param name="b">The second object to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="a" /> and <paramref name="b" /> are not equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Guid.Parse(System.ReadOnlySpan{System.Char})">
      <summary>Converts a read-only character span that represents a GUID to the equivalent <see cref="T:System.Guid" /> structure.</summary>
      <param name="input">A read-only span containing the bytes representing a GUID.</param>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> is not in a recognized format.

-or-

After trimming, the length of the read-only character span is 0.</exception>
      <returns>A structure that contains the value that was parsed.</returns>
    </member>
    <member name="M:System.Guid.Parse(System.String)">
      <summary>Converts the string representation of a GUID to the equivalent <see cref="T:System.Guid" /> structure.</summary>
      <param name="input">The string to convert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> is not in a recognized format.</exception>
      <returns>A structure that contains the value that was parsed.</returns>
    </member>
    <member name="M:System.Guid.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>Converts the character span representation of a GUID to the equivalent <see cref="T:System.Guid" /> structure, provided that the string is in the specified format.</summary>
      <param name="input">A read-only span containing the characters representing the GUID to convert.</param>
      <param name="format">A read-only span of characters representing one of the following specifiers that indicates the exact format to use when interpreting <paramref name="input" />: "N", "D", "B", "P", or "X".</param>
      <returns>A structure that contains the value that was parsed.</returns>
    </member>
    <member name="M:System.Guid.ParseExact(System.String,System.String)">
      <summary>Converts the string representation of a GUID to the equivalent <see cref="T:System.Guid" /> structure, provided that the string is in the specified format.</summary>
      <param name="input">The GUID to convert.</param>
      <param name="format">One of the following specifiers that indicates the exact format to use when interpreting <paramref name="input" />: "N", "D", "B", "P", or "X".</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> or <paramref name="format" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> is not in the format specified by <paramref name="format" />.</exception>
      <returns>A structure that contains the value that was parsed.</returns>
    </member>
    <member name="M:System.Guid.ToByteArray">
      <summary>Returns a 16-element byte array that contains the value of this instance.</summary>
      <returns>A 16-element byte array.</returns>
    </member>
    <member name="M:System.Guid.ToString">
      <summary>Returns a string representation of the value of this instance in registry format.</summary>
      <returns>The value of this <see cref="T:System.Guid" />, formatted by using the "D" format specifier as follows:  
  
 <c>xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx</c>  
  
 where the value of the GUID is represented as a series of lowercase hexadecimal digits in groups of 8, 4, 4, 4, and 12 digits and separated by hyphens. An example of a return value is "382c74c3-721d-4f34-80e5-57657b6cbc27". To convert the hexadecimal digits from a through f to uppercase, call the <see cref="M:System.String.ToUpper" /> method on the returned string.</returns>
    </member>
    <member name="M:System.Guid.ToString(System.String)">
      <summary>Returns a string representation of the value of this <see cref="T:System.Guid" /> instance, according to the provided format specifier.</summary>
      <param name="format">A single format specifier that indicates how to format the value of this <see cref="T:System.Guid" />. The <paramref name="format" /> parameter can be "N", "D", "B", "P", or "X". If <paramref name="format" /> is <see langword="null" /> or an empty string (""), "D" is used.</param>
      <exception cref="T:System.FormatException">The value of <paramref name="format" /> is not <see langword="null" />, an empty string (""), "N", "D", "B", "P", or "X".</exception>
      <returns>The value of this <see cref="T:System.Guid" />, represented as a series of lowercase hexadecimal digits in the specified format.</returns>
    </member>
    <member name="M:System.Guid.ToString(System.String,System.IFormatProvider)">
      <summary>Returns a string representation of the value of this instance of the <see cref="T:System.Guid" /> class, according to the provided format specifier and culture-specific format information.</summary>
      <param name="format">A single format specifier that indicates how to format the value of this <see cref="T:System.Guid" />. The <paramref name="format" /> parameter can be "N", "D", "B", "P", or "X". If <paramref name="format" /> is <see langword="null" /> or an empty string (""), "D" is used.</param>
      <param name="provider">(Reserved) An object that supplies culture-specific formatting information.</param>
      <exception cref="T:System.FormatException">The value of <paramref name="format" /> is not <see langword="null" />, an empty string (""), "N", "D", "B", "P", or "X".</exception>
      <returns>The value of this <see cref="T:System.Guid" />, represented as a series of lowercase hexadecimal digits in the specified format.</returns>
    </member>
    <member name="M:System.Guid.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char})">
      <summary>Tries to format the current GUID instance into the provided character span.</summary>
      <param name="destination">When this method returns, the GUID as a span of characters.</param>
      <param name="charsWritten">When this method returns, the number of characters written into the span.</param>
      <param name="format">A read-only span containing the character representing one of the following specifiers that indicates the exact format to use when interpreting <paramref name="input" />: "N", "D", "B", "P", or "X".</param>
      <returns>
        <see langword="true" /> if the formatting operation was successful; <see langword="false" /> otherwise.</returns>
    </member>
    <member name="M:System.Guid.TryParse(System.ReadOnlySpan{System.Char},System.Guid@)">
      <summary>Converts the specified read-only span of characters containing the representation of a GUID to the equivalent <see cref="T:System.Guid" /> structure.</summary>
      <param name="input">A span containing the characters representing the GUID to convert.</param>
      <param name="result">A <see cref="T:System.Guid" /> instance to contain the parsed value. If the method returns <see langword="true" />, <paramref name="result" /> contains a valid <see cref="T:System.Guid" />. If the method returns <see langword="false" />, <paramref name="result" /> equals <see cref="F:System.Guid.Empty" />.</param>
      <returns>
        <see langword="true" /> if the parse operation was successful; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Guid.TryParse(System.String,System.Guid@)">
      <summary>Converts the string representation of a GUID to the equivalent <see cref="T:System.Guid" /> structure.</summary>
      <param name="input">A string containing the GUID to convert.</param>
      <param name="result">A <see cref="T:System.Guid" /> instance to contain the parsed value. If the method returns <see langword="true" />, <paramref name="result" /> contains a valid <see cref="T:System.Guid" />. If the method returns <see langword="false" />, <paramref name="result" /> equals <see cref="F:System.Guid.Empty" />.</param>
      <returns>
        <see langword="true" /> if the parse operation was successful; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Guid.TryParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Guid@)">
      <summary>Converts span of characters representing the GUID to the equivalent <see cref="T:System.Guid" /> structure, provided that the string is in the specified format.</summary>
      <param name="input">A read-only span containing the characters representing the GUID to convert.</param>
      <param name="format">A read-only span containing a character representing one of the following specifiers that indicates the exact format to use when interpreting <paramref name="input" />: "N", "D", "B", "P", or "X".</param>
      <param name="result">The structure to contain the parsed value. If the method returns <see langword="true" />, <paramref name="result" /> contains a valid <see cref="T:System.Guid" />. If the method returns <see langword="false" />, <paramref name="result" /> equals <see cref="F:System.Guid.Empty" />.</param>
      <returns>
        <see langword="true" /> if the parse operation was successful; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Guid.TryParseExact(System.String,System.String,System.Guid@)">
      <summary>Converts the string representation of a GUID to the equivalent <see cref="T:System.Guid" /> structure, provided that the string is in the specified format.</summary>
      <param name="input">The GUID to convert.</param>
      <param name="format">One of the following specifiers that indicates the exact format to use when interpreting <paramref name="input" />: "N", "D", "B", "P", or "X".</param>
      <param name="result">The structure that will contain the parsed value. If the method returns <see langword="true" />, <paramref name="result" /> contains a valid <see cref="T:System.Guid" />. If the method returns <see langword="false" />, <paramref name="result" /> equals <see cref="F:System.Guid.Empty" />.</param>
      <returns>
        <see langword="true" /> if the parse operation was successful; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Guid.TryWriteBytes(System.Span{System.Byte})">
      <summary>Tries to write the current GUID instance into a span of bytes.</summary>
      <param name="destination">When this method returns, the GUID as a span of bytes.</param>
      <returns>
        <see langword="true" /> if the GUID is successfully written to the specified span; <see langword="false" /> otherwise.</returns>
    </member>
    <member name="T:System.IAsyncResult">
      <summary>Represents the status of an asynchronous operation.</summary>
    </member>
    <member name="P:System.IAsyncResult.AsyncState">
      <summary>Gets a user-defined object that qualifies or contains information about an asynchronous operation.</summary>
      <returns>A user-defined object that qualifies or contains information about an asynchronous operation.</returns>
    </member>
    <member name="P:System.IAsyncResult.AsyncWaitHandle">
      <summary>Gets a <see cref="T:System.Threading.WaitHandle" /> that is used to wait for an asynchronous operation to complete.</summary>
      <returns>A <see cref="T:System.Threading.WaitHandle" /> that is used to wait for an asynchronous operation to complete.</returns>
    </member>
    <member name="P:System.IAsyncResult.CompletedSynchronously">
      <summary>Gets a value that indicates whether the asynchronous operation completed synchronously.</summary>
      <returns>
        <see langword="true" /> if the asynchronous operation completed synchronously; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.IAsyncResult.IsCompleted">
      <summary>Gets a value that indicates whether the asynchronous operation has completed.</summary>
      <returns>
        <see langword="true" /> if the operation is complete; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.IComparable">
      <summary>Defines a generalized type-specific comparison method that a value type or class implements to order or sort its instances.</summary>
    </member>
    <member name="M:System.IComparable.CompareTo(System.Object)">
      <summary>Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.</summary>
      <param name="obj">An object to compare with this instance.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not the same type as this instance.</exception>
      <returns>A value that indicates the relative order of the objects being compared. The return value has these meanings:  
  
 <list type="table"><listheader><term> Value</term><description> Meaning</description></listheader><item><term> Less than zero</term><description> This instance precedes <paramref name="obj" /> in the sort order.</description></item><item><term> Zero</term><description> This instance occurs in the same position in the sort order as <paramref name="obj" />.</description></item><item><term> Greater than zero</term><description> This instance follows <paramref name="obj" /> in the sort order.</description></item></list></returns>
    </member>
    <member name="T:System.IComparable`1">
      <summary>Defines a generalized comparison method that a value type or class implements to create a type-specific comparison method for ordering or sorting its instances.</summary>
      <typeparam name="T">The type of object to compare.</typeparam>
    </member>
    <member name="M:System.IComparable`1.CompareTo(`0)">
      <summary>Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.</summary>
      <param name="other">An object to compare with this instance.</param>
      <returns>A value that indicates the relative order of the objects being compared. The return value has these meanings:  
  
 <list type="table"><listheader><term> Value</term><description> Meaning</description></listheader><item><term> Less than zero</term><description> This instance precedes <paramref name="other" /> in the sort order.</description></item><item><term> Zero</term><description> This instance occurs in the same position in the sort order as <paramref name="other" />.</description></item><item><term> Greater than zero</term><description> This instance follows <paramref name="other" /> in the sort order.</description></item></list></returns>
    </member>
    <member name="T:System.IConvertible">
      <summary>Defines methods that convert the value of the implementing reference or value type to a common language runtime type that has an equivalent value.</summary>
    </member>
    <member name="M:System.IConvertible.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for this instance.</summary>
      <returns>The enumerated constant that is the <see cref="T:System.TypeCode" /> of the class or value type that implements this interface.</returns>
    </member>
    <member name="M:System.IConvertible.ToBoolean(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent Boolean value using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>A Boolean value equivalent to the value of this instance.</returns>
    </member>
    <member name="M:System.IConvertible.ToByte(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 8-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>An 8-bit unsigned integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:System.IConvertible.ToChar(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent Unicode character using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>A Unicode character equivalent to the value of this instance.</returns>
    </member>
    <member name="M:System.IConvertible.ToDateTime(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent <see cref="T:System.DateTime" /> using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>A <see cref="T:System.DateTime" /> instance equivalent to the value of this instance.</returns>
    </member>
    <member name="M:System.IConvertible.ToDecimal(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent <see cref="T:System.Decimal" /> number using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>A <see cref="T:System.Decimal" /> number equivalent to the value of this instance.</returns>
    </member>
    <member name="M:System.IConvertible.ToDouble(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent double-precision floating-point number using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>A double-precision floating-point number equivalent to the value of this instance.</returns>
    </member>
    <member name="M:System.IConvertible.ToInt16(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 16-bit signed integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>An 16-bit signed integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:System.IConvertible.ToInt32(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 32-bit signed integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>An 32-bit signed integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:System.IConvertible.ToInt64(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 64-bit signed integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>An 64-bit signed integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:System.IConvertible.ToSByte(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 8-bit signed integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>An 8-bit signed integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:System.IConvertible.ToSingle(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent single-precision floating-point number using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>A single-precision floating-point number equivalent to the value of this instance.</returns>
    </member>
    <member name="M:System.IConvertible.ToString(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent <see cref="T:System.String" /> using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>A <see cref="T:System.String" /> instance equivalent to the value of this instance.</returns>
    </member>
    <member name="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)">
      <summary>Converts the value of this instance to an <see cref="T:System.Object" /> of the specified <see cref="T:System.Type" /> that has an equivalent value, using the specified culture-specific formatting information.</summary>
      <param name="conversionType">The <see cref="T:System.Type" /> to which the value of this instance is converted.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>An <see cref="T:System.Object" /> instance of type <paramref name="conversionType" /> whose value is equivalent to the value of this instance.</returns>
    </member>
    <member name="M:System.IConvertible.ToUInt16(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 16-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>An 16-bit unsigned integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:System.IConvertible.ToUInt32(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 32-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>An 32-bit unsigned integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:System.IConvertible.ToUInt64(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 64-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>An 64-bit unsigned integer equivalent to the value of this instance.</returns>
    </member>
    <member name="T:System.ICustomFormatter">
      <summary>Defines a method that supports custom formatting of the value of an object.</summary>
    </member>
    <member name="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
      <summary>Converts the value of a specified object to an equivalent string representation using specified format and culture-specific formatting information.</summary>
      <param name="format">A format string containing formatting specifications.</param>
      <param name="arg">An object to format.</param>
      <param name="formatProvider">An object that supplies format information about the current instance.</param>
      <returns>The string representation of the value of <paramref name="arg" />, formatted as specified by <paramref name="format" /> and <paramref name="formatProvider" />.</returns>
    </member>
    <member name="T:System.IDisposable">
      <summary>Provides a mechanism for releasing unmanaged resources.</summary>
    </member>
    <member name="M:System.IDisposable.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="T:System.IEquatable`1">
      <summary>Defines a generalized method that a value type or class implements to create a type-specific method for determining equality of instances.</summary>
      <typeparam name="T">The type of objects to compare.</typeparam>
    </member>
    <member name="M:System.IEquatable`1.Equals(`0)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
        <see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.IFormatProvider">
      <summary>Provides a mechanism for retrieving an object to control formatting.</summary>
    </member>
    <member name="M:System.IFormatProvider.GetFormat(System.Type)">
      <summary>Returns an object that provides formatting services for the specified type.</summary>
      <param name="formatType">An object that specifies the type of format object to return.</param>
      <returns>An instance of the object specified by <paramref name="formatType" />, if the <see cref="T:System.IFormatProvider" /> implementation can supply that type of object; otherwise, <see langword="null" />.</returns>
    </member>
    <member name="T:System.IFormattable">
      <summary>Provides functionality to format the value of an object into a string representation.</summary>
    </member>
    <member name="M:System.IFormattable.ToString(System.String,System.IFormatProvider)">
      <summary>Formats the value of the current instance using the specified format.</summary>
      <param name="format">The format to use.  
  
 -or-  
  
 A null reference (<see langword="Nothing" /> in Visual Basic) to use the default format defined for the type of the <see cref="T:System.IFormattable" /> implementation.</param>
      <param name="formatProvider">The provider to use to format the value.  
  
 -or-  
  
 A null reference (<see langword="Nothing" /> in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system.</param>
      <returns>The value of the current instance in the specified format.</returns>
    </member>
    <member name="T:System.IndexOutOfRangeException">
      <summary>The exception that is thrown when an attempt is made to access an element of an array or collection with an index that is outside its bounds.</summary>
    </member>
    <member name="M:System.IndexOutOfRangeException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IndexOutOfRangeException" /> class.</summary>
    </member>
    <member name="M:System.IndexOutOfRangeException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IndexOutOfRangeException" /> class with a specified error message.</summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.IndexOutOfRangeException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.IndexOutOfRangeException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.InsufficientExecutionStackException">
      <summary>The exception that is thrown when there is insufficient execution stack available to allow most methods to execute.</summary>
    </member>
    <member name="M:System.InsufficientExecutionStackException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.InsufficientExecutionStackException" /> class.</summary>
    </member>
    <member name="M:System.InsufficientExecutionStackException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.InsufficientExecutionStackException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.InsufficientExecutionStackException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.InsufficientExecutionStackException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <c>inner</c> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.Int16">
      <summary>Represents a 16-bit signed integer.</summary>
    </member>
    <member name="F:System.Int16.MaxValue">
      <summary>Represents the largest possible value of an <see cref="T:System.Int16" />. This field is constant.</summary>
    </member>
    <member name="F:System.Int16.MinValue">
      <summary>Represents the smallest possible value of <see cref="T:System.Int16" />. This field is constant.</summary>
    </member>
    <member name="M:System.Int16.CompareTo(System.Int16)">
      <summary>Compares this instance to a specified 16-bit signed integer and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified 16-bit signed integer.</summary>
      <param name="value">An integer to compare.</param>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.  
  
 <list type="table"><listheader><term> Return Value</term><description> Description</description></listheader><item><term> Less than zero</term><description> This instance is less than <paramref name="value" />.</description></item><item><term> Zero</term><description> This instance is equal to <paramref name="value" />.</description></item><item><term> Greater than zero</term><description> This instance is greater than <paramref name="value" />.</description></item></list></returns>
    </member>
    <member name="M:System.Int16.CompareTo(System.Object)">
      <summary>Compares this instance to a specified object and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the object.</summary>
      <param name="value">An object to compare, or <see langword="null" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not an <see cref="T:System.Int16" />.</exception>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.  
  
 <list type="table"><listheader><term> Return Value</term><description> Description</description></listheader><item><term> Less than zero</term><description> This instance is less than <paramref name="value" />.</description></item><item><term> Zero</term><description> This instance is equal to <paramref name="value" />.</description></item><item><term> Greater than zero</term><description> This instance is greater than <paramref name="value" />, or <paramref name="value" /> is <see langword="null" />.</description></item></list></returns>
    </member>
    <member name="M:System.Int16.Equals(System.Int16)">
      <summary>Returns a value indicating whether this instance is equal to a specified <see cref="T:System.Int16" /> value.</summary>
      <param name="obj">An <see cref="T:System.Int16" /> value to compare to this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> has the same value as this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Int16.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="obj">An object to compare to this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> is an instance of <see cref="T:System.Int16" /> and equals the value of this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Int16.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Int16.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Int16" />.</summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.Int16" />.</returns>
    </member>
    <member name="M:System.Int16.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Converts the span representation of a number in a specified style and culture-specific format to its 16-bit signed integer equivalent.</summary>
      <param name="s">A span containing the characters representing the number to convert.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <returns>A 16-bit signed integer equivalent to the number specified in <paramref name="s" />.</returns>
    </member>
    <member name="M:System.Int16.Parse(System.String)">
      <summary>Converts the string representation of a number to its 16-bit signed integer equivalent.</summary>
      <param name="s">A string containing a number to convert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />.</exception>
      <returns>A 16-bit signed integer equivalent to the number contained in <paramref name="s" />.</returns>
    </member>
    <member name="M:System.Int16.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>Converts the string representation of a number in a specified style to its 16-bit signed integer equivalent.</summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">A bitwise combination of the enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  
  
 -or-  
  
 <paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />.  
  
 -or-  
  
 <paramref name="s" /> includes non-zero fractional digits.</exception>
      <returns>A 16-bit signed integer equivalent to the number specified in <paramref name="s" />.</returns>
    </member>
    <member name="M:System.Int16.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its 16-bit signed integer equivalent.</summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  
  
 -or-  
  
 <paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />.  
  
 -or-  
  
 <paramref name="s" /> includes non-zero fractional digits.</exception>
      <returns>A 16-bit signed integer equivalent to the number specified in <paramref name="s" />.</returns>
    </member>
    <member name="M:System.Int16.Parse(System.String,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified culture-specific format to its 16-bit signed integer equivalent.</summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />.</exception>
      <returns>A 16-bit signed integer equivalent to the number specified in <paramref name="s" />.</returns>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>
        <see langword="true" /> if the value of the current instance is not zero; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Byte" />.</returns>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Char" />.</returns>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
      <returns>This conversion is not supported. No value is returned.</returns>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Decimal" />.</returns>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Double" />.</returns>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, unchanged.</returns>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int64" />.</returns>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to an <see cref="T:System.SByte" />.</returns>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Single" />.</returns>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />.</summary>
      <param name="type">The type to which to convert this <see cref="T:System.Int16" /> value.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> implementation that supplies information about the format of the returned value.</param>
      <returns>The value of the current instance, converted to <paramref name="type" />.</returns>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, unchanged.</returns>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt32" />.</returns>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt64" />.</returns>
    </member>
    <member name="M:System.Int16.ToString">
      <summary>Converts the numeric value of this instance to its equivalent string representation.</summary>
      <returns>The string representation of the value of this instance, consisting of a minus sign if the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeroes.</returns>
    </member>
    <member name="M:System.Int16.ToString(System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <returns>The string representation of the value of this instance as specified by <paramref name="provider" />.</returns>
    </member>
    <member name="M:System.Int16.ToString(System.String)">
      <summary>Converts the numeric value of this instance to its equivalent string representation, using the specified format.</summary>
      <param name="format">A numeric format string.</param>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" />.</returns>
    </member>
    <member name="M:System.Int16.ToString(System.String,System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific formatting information.</summary>
      <param name="format">A numeric format string.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
    </member>
    <member name="M:System.Int16.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <summary>Tries to format the value of the current short number instance into the provided span of characters.</summary>
      <param name="destination">When this method returns, this instance's value formatted as a span of characters.</param>
      <param name="charsWritten">When this method returns, the number of characters that were written in <paramref name="destination" />.</param>
      <param name="format">A span containing the charactes that represent a standard or custom format string that defines the acceptable format for <paramref name="destination" />.</param>
      <param name="provider">An optional object that supplies culture-specific formatting information for <paramref name="destination" />.</param>
      <returns>
        <see langword="true" /> if the formatting was successful; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Int16.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Int16@)">
      <summary>Converts the span representation of a number in a specified style and culture-specific format to its 16-bit signed integer equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <param name="s">A span containing the characters representing the number to convert. The span is interpreted using the style specified by <paramref name="style" />.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <param name="result">When this method returns, contains the 16-bit signed integer value equivalent to the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not in a format compliant with <paramref name="style" />, or represents a number less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Int16.TryParse(System.ReadOnlySpan{System.Char},System.Int16@)">
      <summary>Converts the span representation of a number in a specified style and culture-specific format to its 16-bit signed integer equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <param name="s">A span containing the characters representing the number to convert.</param>
      <param name="result">When this method returns, contains the 16-bit signed integer value equivalent to the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not in a format compliant with <paramref name="style" />, or represents a number less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Int16.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int16@)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its 16-bit signed integer equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <param name="s">A string containing a number to convert. The string is interpreted using the style specified by <paramref name="style" />.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <param name="result">When this method returns, contains the 16-bit signed integer value equivalent to the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not in a format compliant with <paramref name="style" />, or represents a number less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  
  
 -or-  
  
 <paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Int16.TryParse(System.String,System.Int16@)">
      <summary>Converts the string representation of a number to its 16-bit signed integer equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="result">When this method returns, contains the 16-bit signed integer value equivalent to the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not of the correct format, or represents a number less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Int32">
      <summary>Represents a 32-bit signed integer.</summary>
    </member>
    <member name="F:System.Int32.MaxValue">
      <summary>Represents the largest possible value of an <see cref="T:System.Int32" />. This field is constant.</summary>
    </member>
    <member name="F:System.Int32.MinValue">
      <summary>Represents the smallest possible value of <see cref="T:System.Int32" />. This field is constant.</summary>
    </member>
    <member name="M:System.Int32.CompareTo(System.Int32)">
      <summary>Compares this instance to a specified 32-bit signed integer and returns an indication of their relative values.</summary>
      <param name="value">An integer to compare.</param>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.  
  
 <list type="table"><listheader><term> Return Value</term><description> Description</description></listheader><item><term> Less than zero</term><description> This instance is less than <paramref name="value" />.</description></item><item><term> Zero</term><description> This instance is equal to <paramref name="value" />.</description></item><item><term> Greater than zero</term><description> This instance is greater than <paramref name="value" />.</description></item></list></returns>
    </member>
    <member name="M:System.Int32.CompareTo(System.Object)">
      <summary>Compares this instance to a specified object and returns an indication of their relative values.</summary>
      <param name="value">An object to compare, or <see langword="null" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not an <see cref="T:System.Int32" />.</exception>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.  
  
 <list type="table"><listheader><term> Return Value</term><description> Description</description></listheader><item><term> Less than zero</term><description> This instance is less than <paramref name="value" />.</description></item><item><term> Zero</term><description> This instance is equal to <paramref name="value" />.</description></item><item><term> Greater than zero</term><description> This instance is greater than <paramref name="value" />, or <paramref name="value" /> is <see langword="null" />.</description></item></list></returns>
    </member>
    <member name="M:System.Int32.Equals(System.Int32)">
      <summary>Returns a value indicating whether this instance is equal to a specified <see cref="T:System.Int32" /> value.</summary>
      <param name="obj">An <see cref="T:System.Int32" /> value to compare to this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> has the same value as this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Int32.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="obj">An object to compare with this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> is an instance of <see cref="T:System.Int32" /> and equals the value of this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Int32.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Int32.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Int32" />.</summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.Int32" />.</returns>
    </member>
    <member name="M:System.Int32.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Converts the span representation of a number in a specified style and culture-specific format to its 32-bit signed integer equivalent.</summary>
      <param name="s">A span containing the characters representing the number to convert.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An object that supplies culture-specific information about the format of <paramref name="s" />.</param>
      <returns>A 32-bit signed integer equivalent to the number specified in <paramref name="s" />.</returns>
    </member>
    <member name="M:System.Int32.Parse(System.String)">
      <summary>Converts the string representation of a number to its 32-bit signed integer equivalent.</summary>
      <param name="s">A string containing a number to convert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <returns>A 32-bit signed integer equivalent to the number contained in <paramref name="s" />.</returns>
    </member>
    <member name="M:System.Int32.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>Converts the string representation of a number in a specified style to its 32-bit signed integer equivalent.</summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">A bitwise combination of the enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  
  
 -or-  
  
 <paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />.  
  
 -or-  
  
 <paramref name="s" /> includes non-zero, fractional digits.</exception>
      <returns>A 32-bit signed integer equivalent to the number specified in <paramref name="s" />.</returns>
    </member>
    <member name="M:System.Int32.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its 32-bit signed integer equivalent.</summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An object that supplies culture-specific information about the format of <paramref name="s" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  
  
 -or-  
  
 <paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />.  
  
 -or-  
  
 <paramref name="s" /> includes non-zero, fractional digits.</exception>
      <returns>A 32-bit signed integer equivalent to the number specified in <paramref name="s" />.</returns>
    </member>
    <member name="M:System.Int32.Parse(System.String,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified culture-specific format to its 32-bit signed integer equivalent.</summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not of the correct format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <returns>A 32-bit signed integer equivalent to the number specified in <paramref name="s" />.</returns>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>
        <see langword="true" /> if the value of the current instance is not zero; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Byte" />.</returns>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Char" />.</returns>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
      <returns>This conversion is not supported. No value is returned.</returns>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Decimal" />.</returns>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Double" />.</returns>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int16" />.</returns>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, unchanged.</returns>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int64" />.</returns>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to an <see cref="T:System.SByte" />.</returns>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Single" />.</returns>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />.</summary>
      <param name="type">The type to which to convert this <see cref="T:System.Int32" /> value.</param>
      <param name="provider">An object that provides information about the format of the returned value.</param>
      <returns>The value of the current instance, converted to <paramref name="type" />.</returns>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt16" />.</returns>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt32" />.</returns>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt64" />.</returns>
    </member>
    <member name="M:System.Int32.ToString">
      <summary>Converts the numeric value of this instance to its equivalent string representation.</summary>
      <returns>The string representation of the value of this instance, consisting of a negative sign if the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeroes.</returns>
    </member>
    <member name="M:System.Int32.ToString(System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>The string representation of the value of this instance as specified by <paramref name="provider" />.</returns>
    </member>
    <member name="M:System.Int32.ToString(System.String)">
      <summary>Converts the numeric value of this instance to its equivalent string representation, using the specified format.</summary>
      <param name="format">A standard or custom numeric format string.</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid or not supported.</exception>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" />.</returns>
    </member>
    <member name="M:System.Int32.ToString(System.String,System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.</summary>
      <param name="format">A standard or custom numeric format string.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid or not supported.</exception>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
    </member>
    <member name="M:System.Int32.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <summary>Tries to format the value of the current integer number instance into the provided span of characters.</summary>
      <param name="destination">When this method returns, this instance's value formatted as a span of characters.</param>
      <param name="charsWritten">When this method returns, the number of characters that were written in <paramref name="destination" />.</param>
      <param name="format">A span containing the charactes that represent a standard or custom format string that defines the acceptable format for <paramref name="destination" />.</param>
      <param name="provider">An optional object that supplies culture-specific formatting information for <paramref name="destination" />.</param>
      <returns>
        <see langword="true" /> if the formatting was successful; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Int32.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Int32@)">
      <summary>Converts the span representation of a number in a specified style and culture-specific format to its 32-bit signed integer equivalent. A return value indicates whether the conversion succeeded.</summary>
      <param name="s">A span containing the characters that represent the number to convert. The span is interpreted using the style specified by <paramref name="style" /></param>
      <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <param name="result">When this method returns, contains the 32-bit signed integer value equivalent of the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not in a format compliant with <paramref name="style" />, or represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />. This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Int32.TryParse(System.ReadOnlySpan{System.Char},System.Int32@)">
      <summary>Converts the span representation of a number in a specified style and culture-specific format to its 32-bit signed integer equivalent. A return value indicates whether the conversion succeeded.</summary>
      <param name="s">A span containing the characters that represent the number to convert.</param>
      <param name="result">When this method returns, contains the 32-bit signed integer value equivalent of the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not in a format compliant with <paramref name="style" />, or represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />. This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Int32.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int32@)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its 32-bit signed integer equivalent. A return value indicates whether the conversion succeeded.</summary>
      <param name="s">A string containing a number to convert. The string is interpreted using the style specified by <paramref name="style" />.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <param name="result">When this method returns, contains the 32-bit signed integer value equivalent of the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not in a format compliant with <paramref name="style" />, or represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />. This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  
  
 -or-  
  
 <paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Int32.TryParse(System.String,System.Int32@)">
      <summary>Converts the string representation of a number to its 32-bit signed integer equivalent. A return value indicates whether the conversion succeeded.</summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="result">When this method returns, contains the 32-bit signed integer value equivalent of the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not of the correct format, or represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />. This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Int64">
      <summary>Represents a 64-bit signed integer.</summary>
    </member>
    <member name="F:System.Int64.MaxValue">
      <summary>Represents the largest possible value of an <see cref="T:System.Int64" />. This field is constant.</summary>
    </member>
    <member name="F:System.Int64.MinValue">
      <summary>Represents the smallest possible value of an <see cref="T:System.Int64" />. This field is constant.</summary>
    </member>
    <member name="M:System.Int64.CompareTo(System.Int64)">
      <summary>Compares this instance to a specified 64-bit signed integer and returns an indication of their relative values.</summary>
      <param name="value">An integer to compare.</param>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.  
  
 <list type="table"><listheader><term> Return Value</term><description> Description</description></listheader><item><term> Less than zero</term><description> This instance is less than <paramref name="value" />.</description></item><item><term> Zero</term><description> This instance is equal to <paramref name="value" />.</description></item><item><term> Greater than zero</term><description> This instance is greater than <paramref name="value" />.</description></item></list></returns>
    </member>
    <member name="M:System.Int64.CompareTo(System.Object)">
      <summary>Compares this instance to a specified object and returns an indication of their relative values.</summary>
      <param name="value">An object to compare, or <see langword="null" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not an <see cref="T:System.Int64" />.</exception>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.  
  
 <list type="table"><listheader><term> Return Value</term><description> Description</description></listheader><item><term> Less than zero</term><description> This instance is less than <paramref name="value" />.</description></item><item><term> Zero</term><description> This instance is equal to <paramref name="value" />.</description></item><item><term> Greater than zero</term><description> This instance is greater than <paramref name="value" />, or <paramref name="value" /> is <see langword="null" />.</description></item></list></returns>
    </member>
    <member name="M:System.Int64.Equals(System.Int64)">
      <summary>Returns a value indicating whether this instance is equal to a specified <see cref="T:System.Int64" /> value.</summary>
      <param name="obj">An <see cref="T:System.Int64" /> value to compare to this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> has the same value as this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Int64.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="obj">An object to compare with this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> is an instance of an <see cref="T:System.Int64" /> and equals the value of this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Int64.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Int64.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Int64" />.</summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.Int64" />.</returns>
    </member>
    <member name="M:System.Int64.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Converts the span representation of a number in a specified style and culture-specific format to its 64-bit signed integer equivalent.</summary>
      <param name="s">A span containing the characters representing the number to convert.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <returns>A 64-bit signed integer equivalent to the number specified in <paramref name="s" />.</returns>
    </member>
    <member name="M:System.Int64.Parse(System.String)">
      <summary>Converts the string representation of a number to its 64-bit signed integer equivalent.</summary>
      <param name="s">A string containing a number to convert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />.</exception>
      <returns>A 64-bit signed integer equivalent to the number contained in <paramref name="s" />.</returns>
    </member>
    <member name="M:System.Int64.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>Converts the string representation of a number in a specified style to its 64-bit signed integer equivalent.</summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  
  
 -or-  
  
 <paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />.  
  
 -or-  
  
 <paramref name="style" /> supports fractional digits but <paramref name="s" /> includes non-zero fractional digits.</exception>
      <returns>A 64-bit signed integer equivalent to the number specified in <paramref name="s" />.</returns>
    </member>
    <member name="M:System.Int64.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its 64-bit signed integer equivalent.</summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  
  
 -or-  
  
 <paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />.  
  
 -or-  
  
 <paramref name="style" /> supports fractional digits, but <paramref name="s" /> includes non-zero fractional digits.</exception>
      <returns>A 64-bit signed integer equivalent to the number specified in <paramref name="s" />.</returns>
    </member>
    <member name="M:System.Int64.Parse(System.String,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified culture-specific format to its 64-bit signed integer equivalent.</summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />.</exception>
      <returns>A 64-bit signed integer equivalent to the number specified in <paramref name="s" />.</returns>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>
        <see langword="true" /> if the value of the current instance is not zero; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Byte" />.</returns>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Char" />.</returns>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
      <returns>This conversion is not supported. No value is returned.</returns>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Decimal" />.</returns>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Double" />.</returns>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int16" />.</returns>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, unchanged.</returns>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to an <see cref="T:System.SByte" />.</returns>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Single" />.</returns>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />.</summary>
      <param name="type">The type to which to convert this <see cref="T:System.Int64" /> value.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> implementation that provides information about the format of the returned value.</param>
      <returns>The value of the current instance, converted to <paramref name="type" />.</returns>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt16" />.</returns>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt32" />.</returns>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt64" />.</returns>
    </member>
    <member name="M:System.Int64.ToString">
      <summary>Converts the numeric value of this instance to its equivalent string representation.</summary>
      <returns>The string representation of the value of this instance, consisting of a minus sign if the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeroes.</returns>
    </member>
    <member name="M:System.Int64.ToString(System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <returns>The string representation of the value of this instance as specified by <paramref name="provider" />.</returns>
    </member>
    <member name="M:System.Int64.ToString(System.String)">
      <summary>Converts the numeric value of this instance to its equivalent string representation, using the specified format.</summary>
      <param name="format">A numeric format string.</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid or not supported.</exception>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" />.</returns>
    </member>
    <member name="M:System.Int64.ToString(System.String,System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.</summary>
      <param name="format">A numeric format string.</param>
      <param name="provider">An object that supplies culture-specific formatting information about this instance.</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid or not supported.</exception>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
    </member>
    <member name="M:System.Int64.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <summary>Tries to format the value of the current long number instance into the provided span of characters.</summary>
      <param name="destination">When this method returns, this instance's value formatted as a span of characters.</param>
      <param name="charsWritten">When this method returns, the number of characters that were written in <paramref name="destination" />.</param>
      <param name="format">A span containing the charactes that represent a standard or custom format string that defines the acceptable format for <paramref name="destination" />.</param>
      <param name="provider">An optional object that supplies culture-specific formatting information for <paramref name="destination" />.</param>
      <returns>
        <see langword="true" /> if the formatting was successful; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Int64.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Int64@)">
      <summary>Converts the span representation of a number in a specified style and culture-specific format to its 64-bit signed integer equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <param name="s">A span containing the characters representing the number to convert. The span is interpreted using the style specified by <paramref name="style" />.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <param name="result">When this method returns, contains the 64-bit signed integer value equivalent of the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not in a format compliant with <paramref name="style" />, or represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Int64.TryParse(System.ReadOnlySpan{System.Char},System.Int64@)">
      <summary>Converts the span representation of a number to its 64-bit signed integer equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <param name="s">A span containing the characters representing the number to convert.</param>
      <param name="result">When this method returns, contains the 64-bit signed integer value equivalent of the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not of the correct format, or represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Int64.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int64@)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its 64-bit signed integer equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <param name="s">A string containing a number to convert. The string is interpreted using the style specified by <paramref name="style" />.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <param name="result">When this method returns, contains the 64-bit signed integer value equivalent of the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not in a format compliant with <paramref name="style" />, or represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  
  
 -or-  
  
 <paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Int64.TryParse(System.String,System.Int64@)">
      <summary>Converts the string representation of a number to its 64-bit signed integer equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="result">When this method returns, contains the 64-bit signed integer value equivalent of the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not of the correct format, or represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.IntPtr">
      <summary>A platform-specific type that is used to represent a pointer or a handle.</summary>
    </member>
    <member name="F:System.IntPtr.Zero">
      <summary>A read-only field that represents a pointer or handle that has been initialized to zero.</summary>
    </member>
    <member name="M:System.IntPtr.#ctor(System.Int32)">
      <summary>Initializes a new instance of <see cref="T:System.IntPtr" /> using the specified 32-bit pointer or handle.</summary>
      <param name="value">A pointer or handle contained in a 32-bit signed integer.</param>
    </member>
    <member name="M:System.IntPtr.#ctor(System.Int64)">
      <summary>Initializes a new instance of <see cref="T:System.IntPtr" /> using the specified 64-bit pointer.</summary>
      <param name="value">A pointer or handle contained in a 64-bit signed integer.</param>
      <exception cref="T:System.OverflowException">On a 32-bit platform, <paramref name="value" /> is too large or too small to represent as an <see cref="T:System.IntPtr" />.</exception>
    </member>
    <member name="M:System.IntPtr.#ctor(System.Void*)">
      <summary>Initializes a new instance of <see cref="T:System.IntPtr" /> using the specified pointer to an unspecified type.</summary>
      <param name="value">A pointer to an unspecified type.</param>
    </member>
    <member name="M:System.IntPtr.Add(System.IntPtr,System.Int32)">
      <summary>Adds an offset to the value of a pointer.</summary>
      <param name="pointer">The pointer to add the offset to.</param>
      <param name="offset">The offset to add.</param>
      <returns>A new pointer that reflects the addition of <paramref name="offset" /> to <paramref name="pointer" />.</returns>
    </member>
    <member name="M:System.IntPtr.CompareTo(System.IntPtr)">
      <summary>Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.</summary>
      <param name="value">A signed native integer to compare.</param>
      <returns>A value that indicates the relative order of the objects being compared. The return value has these meanings:   
 <list type="table"><listheader><term> Value</term><description> Meaning</description></listheader><item><term> Less than zero</term><description> This instance precedes <paramref name="other" /> in the sort order.</description></item><item><term> Zero</term><description> This instance occurs in the same position in the sort order as <paramref name="other" />.</description></item><item><term> Greater than zero</term><description> This instance follows <paramref name="other" /> in the sort order.</description></item></list></returns>
    </member>
    <member name="M:System.IntPtr.CompareTo(System.Object)">
      <summary>Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.</summary>
      <param name="value">An object to compare, or <see langword="null" />.</param>
      <returns>A value that indicates the relative order of the objects being compared. The return value has these meanings:   
 <list type="table"><listheader><term> Value</term><description> Meaning</description></listheader><item><term> Less than zero</term><description> This instance precedes <paramref name="obj" /> in the sort order.</description></item><item><term> Zero</term><description> This instance occurs in the same position in the sort order as <paramref name="obj" />.</description></item><item><term> Greater than zero</term><description> This instance follows <paramref name="obj" /> in the sort order.</description></item></list></returns>
    </member>
    <member name="M:System.IntPtr.Equals(System.IntPtr)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
        <see langword="true" /> if the current object is equal to <paramref name="other" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.IntPtr.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="obj">An object to compare with this instance or <see langword="null" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> is an instance of <see cref="T:System.IntPtr" /> and equals the value of this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.IntPtr.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.IntPtr.op_Addition(System.IntPtr,System.Int32)">
      <summary>Adds an offset to the value of a pointer.</summary>
      <param name="pointer">The pointer to add the offset to.</param>
      <param name="offset">The offset to add.</param>
      <returns>A new pointer that reflects the addition of <paramref name="offset" /> to <paramref name="pointer" />.</returns>
    </member>
    <member name="M:System.IntPtr.op_Equality(System.IntPtr,System.IntPtr)">
      <summary>Determines whether two specified instances of <see cref="T:System.IntPtr" /> are equal.</summary>
      <param name="value1">The first pointer or handle to compare.</param>
      <param name="value2">The second pointer or handle to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="value1" /> equals <paramref name="value2" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.Int32)~System.IntPtr">
      <summary>Converts the value of a 32-bit signed integer to an <see cref="T:System.IntPtr" />.</summary>
      <param name="value">A 32-bit signed integer.</param>
      <returns>A new instance of <see cref="T:System.IntPtr" /> initialized to <paramref name="value" />.</returns>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.Int64)~System.IntPtr">
      <summary>Converts the value of a 64-bit signed integer to an <see cref="T:System.IntPtr" />.</summary>
      <param name="value">A 64-bit signed integer.</param>
      <exception cref="T:System.OverflowException">On a 32-bit platform, <paramref name="value" /> is too large to represent as an <see cref="T:System.IntPtr" />.</exception>
      <returns>A new instance of <see cref="T:System.IntPtr" /> initialized to <paramref name="value" />.</returns>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Int32">
      <summary>Converts the value of the specified <see cref="T:System.IntPtr" /> to a 32-bit signed integer.</summary>
      <param name="value">The pointer or handle to convert.</param>
      <exception cref="T:System.OverflowException">On a 64-bit platform, the value of <paramref name="value" /> is too large to represent as a 32-bit signed integer.</exception>
      <returns>The contents of <paramref name="value" />.</returns>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Int64">
      <summary>Converts the value of the specified <see cref="T:System.IntPtr" /> to a 64-bit signed integer.</summary>
      <param name="value">The pointer or handle to convert.</param>
      <returns>The contents of <paramref name="value" />.</returns>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Void*">
      <summary>Converts the value of the specified <see cref="T:System.IntPtr" /> to a pointer to an unspecified type.  
  
 This API is not CLS-compliant.</summary>
      <param name="value">The pointer or handle to convert.</param>
      <returns>The contents of <paramref name="value" />.</returns>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.Void*)~System.IntPtr">
      <summary>Converts the specified pointer to an unspecified type to an <see cref="T:System.IntPtr" />.  
  
 This API is not CLS-compliant.</summary>
      <param name="value">A pointer to an unspecified type.</param>
      <returns>A new instance of <see cref="T:System.IntPtr" /> initialized to <paramref name="value" />.</returns>
    </member>
    <member name="M:System.IntPtr.op_Inequality(System.IntPtr,System.IntPtr)">
      <summary>Determines whether two specified instances of <see cref="T:System.IntPtr" /> are not equal.</summary>
      <param name="value1">The first pointer or handle to compare.</param>
      <param name="value2">The second pointer or handle to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="value1" /> does not equal <paramref name="value2" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.IntPtr.op_Subtraction(System.IntPtr,System.Int32)">
      <summary>Subtracts an offset from the value of a pointer.</summary>
      <param name="pointer">The pointer to subtract the offset from.</param>
      <param name="offset">The offset to subtract.</param>
      <returns>A new pointer that reflects the subtraction of <paramref name="offset" /> from <paramref name="pointer" />.</returns>
    </member>
    <member name="M:System.IntPtr.Parse(System.String)">
      <summary>Converts the string representation of a number to its signed native integer equivalent.</summary>
      <param name="s">A string containing a number to convert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="P:System.IntPtr.MinValue" /> or greater than <see cref="P:System.IntPtr.MaxValue" />.</exception>
      <returns>A signed native integer equivalent to the number contained in <paramref name="s" />.</returns>
    </member>
    <member name="M:System.IntPtr.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>Converts the string representation of a number in a specified style to its signed native integer equivalent.</summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">A bitwise combination of the enumeration values that indicates the style elements that can be present in <paramref name="s" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value or <paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="P:System.IntPtr.MinValue" /> or greater than <see cref="P:System.IntPtr.MaxValue" />.</exception>
      <returns>A signed native integer equivalent to the number contained in <paramref name="s" />.</returns>
    </member>
    <member name="M:System.IntPtr.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its signed native integer equivalent.</summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">A bitwise combination of the enumeration values that indicates the style elements that can be present in <paramref name="s" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value or <paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="P:System.IntPtr.MinValue" /> or greater than <see cref="P:System.IntPtr.MaxValue" />.</exception>
      <returns>A signed native integer equivalent to the number contained in <paramref name="s" />.</returns>
    </member>
    <member name="M:System.IntPtr.Parse(System.String,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified culture-specific format to its signed native integer equivalent.</summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="P:System.IntPtr.MinValue" /> or greater than <see cref="P:System.IntPtr.MaxValue" />.</exception>
      <returns>A signed native integer equivalent to the number contained in <paramref name="s" />.</returns>
    </member>
    <member name="M:System.IntPtr.Subtract(System.IntPtr,System.Int32)">
      <summary>Subtracts an offset from the value of a pointer.</summary>
      <param name="pointer">The pointer to subtract the offset from.</param>
      <param name="offset">The offset to subtract.</param>
      <returns>A new pointer that reflects the subtraction of <paramref name="offset" /> from <paramref name="pointer" />.</returns>
    </member>
    <member name="M:System.IntPtr.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the data needed to serialize the current <see cref="T:System.IntPtr" /> object.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object to populate with data.</param>
      <param name="context">The destination for this serialization. (This parameter is not used; specify <see langword="null" />.)</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.IntPtr.ToInt32">
      <summary>Converts the value of this instance to a 32-bit signed integer.</summary>
      <exception cref="T:System.OverflowException">On a 64-bit platform, the value of this instance is too large or too small to represent as a 32-bit signed integer.</exception>
      <returns>A 32-bit signed integer equal to the value of this instance.</returns>
    </member>
    <member name="M:System.IntPtr.ToInt64">
      <summary>Converts the value of this instance to a 64-bit signed integer.</summary>
      <returns>A 64-bit signed integer equal to the value of this instance.</returns>
    </member>
    <member name="M:System.IntPtr.ToPointer">
      <summary>Converts the value of this instance to a pointer to an unspecified type.</summary>
      <returns>A pointer to <see cref="T:System.Void" />; that is, a pointer to memory containing data of an unspecified type.</returns>
    </member>
    <member name="M:System.IntPtr.ToString">
      <summary>Converts the numeric value of the current <see cref="T:System.IntPtr" /> object to its equivalent string representation.</summary>
      <returns>The string representation of the value of this instance.</returns>
    </member>
    <member name="M:System.IntPtr.ToString(System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>The string representation of the value of this instance as specified by <paramref name="provider" />.</returns>
    </member>
    <member name="M:System.IntPtr.ToString(System.String)">
      <summary>Converts the numeric value of the current <see cref="T:System.IntPtr" /> object to its equivalent string representation.</summary>
      <param name="format">A format specification that governs how the current <see cref="T:System.IntPtr" /> object is converted.</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid or not supported.</exception>
      <returns>The string representation of the value of the current <see cref="T:System.IntPtr" /> object.</returns>
    </member>
    <member name="M:System.IntPtr.ToString(System.String,System.IFormatProvider)">
      <summary>Formats the value of the current instance using the specified format.</summary>
      <param name="format">The format to use.   
 -or-   
 A <see langword="null" /> reference (<see langword="Nothing" /> in Visual Basic) to use the default format defined for the type of the <see cref="T:System.IFormattable" /> implementation.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>The value of the current instance in the specified format.</returns>
    </member>
    <member name="M:System.IntPtr.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.IntPtr@)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its signed native integer equivalent. A return value indicates whether the conversion succeeded.</summary>
      <param name="s">A string containing a number to convert. The string is interpreted using the style specified by <paramref name="style" />.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="s" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <param name="result">When this method returns, contains the signed native integer value equivalent of the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or Empty, is not of the correct format, or represents a number less than <see cref="P:System.IntPtr.MinValue" /> or greater than <see cref="P:System.IntPtr.MaxValue" />. This parameter is passed uninitialized; any value originally supplied in result will be overwritten.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.IntPtr.TryParse(System.String,System.IntPtr@)">
      <summary>Converts the string representation of a number to its signed native integer equivalent. A return value indicates whether the conversion succeeded.</summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="result">When this method returns, contains the signed native integer value equivalent of the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or Empty, is not of the correct format, or represents a number less than <see cref="P:System.IntPtr.MinValue" /> or greater than <see cref="P:System.IntPtr.MaxValue" />. This parameter is passed uninitialized; any value originally supplied in result will be overwritten.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.IntPtr.MaxValue">
      <summary>Represents the largest possible value of <see cref="T:System.IntPtr" />.</summary>
    </member>
    <member name="P:System.IntPtr.MinValue">
      <summary>Represents the smallest possible value of <see cref="T:System.IntPtr" />.</summary>
    </member>
    <member name="P:System.IntPtr.Size">
      <summary>Gets the size of this instance.</summary>
      <returns>The size of a pointer or handle in this process, measured in bytes. The value of this property is 4 in a 32-bit process, and 8 in a 64-bit process. You can define the process type by setting the <see langword="/platform" /> switch when you compile your code with the C# and Visual Basic compilers.</returns>
    </member>
    <member name="T:System.InvalidCastException">
      <summary>The exception that is thrown for invalid casting or explicit conversion.</summary>
    </member>
    <member name="M:System.InvalidCastException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.InvalidCastException" /> class.</summary>
    </member>
    <member name="M:System.InvalidCastException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.InvalidCastException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.InvalidCastException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.InvalidCastException" /> class with a specified error message.</summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.InvalidCastException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.InvalidCastException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.InvalidCastException.#ctor(System.String,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.InvalidCastException" /> class with a specified message and error code.</summary>
      <param name="message">The message that indicates the reason the exception occurred.</param>
      <param name="errorCode">The error code (HRESULT) value associated with the exception.</param>
    </member>
    <member name="T:System.InvalidOperationException">
      <summary>The exception that is thrown when a method call is invalid for the object's current state.</summary>
    </member>
    <member name="M:System.InvalidOperationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.InvalidOperationException" /> class.</summary>
    </member>
    <member name="M:System.InvalidOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.InvalidOperationException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.InvalidOperationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.InvalidOperationException" /> class with a specified error message.</summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.InvalidOperationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.InvalidOperationException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.InvalidProgramException">
      <summary>The exception that is thrown when a program contains invalid Microsoft intermediate language (MSIL) or metadata. Generally this indicates a bug in the compiler that generated the program.</summary>
    </member>
    <member name="M:System.InvalidProgramException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.InvalidProgramException" /> class with default properties.</summary>
    </member>
    <member name="M:System.InvalidProgramException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.InvalidProgramException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.InvalidProgramException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.InvalidProgramException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.InvalidTimeZoneException">
      <summary>The exception that is thrown when time zone information is invalid.</summary>
    </member>
    <member name="M:System.InvalidTimeZoneException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.InvalidTimeZoneException" /> class with a system-supplied message.</summary>
    </member>
    <member name="M:System.InvalidTimeZoneException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.InvalidTimeZoneException" /> class from serialized data.</summary>
      <param name="info">The object that contains the serialized data.</param>
      <param name="context">The stream that contains the serialized data.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is <see langword="null" />.  
  
 -or-  
  
 The <paramref name="context" /> parameter is <see langword="null" />.</exception>
    </member>
    <member name="M:System.InvalidTimeZoneException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.InvalidTimeZoneException" /> class with the specified message string.</summary>
      <param name="message">A string that describes the exception.</param>
    </member>
    <member name="M:System.InvalidTimeZoneException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.InvalidTimeZoneException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A string that describes the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception.</param>
    </member>
    <member name="T:System.IO.DirectoryNotFoundException">
      <summary>The exception that is thrown when part of a file or directory cannot be found.</summary>
    </member>
    <member name="M:System.IO.DirectoryNotFoundException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IO.DirectoryNotFoundException" /> class with its message string set to a system-supplied message and its HRESULT set to COR_E_DIRECTORYNOTFOUND.</summary>
    </member>
    <member name="M:System.IO.DirectoryNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.DirectoryNotFoundException" /> class with the specified serialization and context information.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.IO.DirectoryNotFoundException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.DirectoryNotFoundException" /> class with its message string set to <paramref name="message" /> and its HRESULT set to COR_E_DIRECTORYNOTFOUND.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.IO.DirectoryNotFoundException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.DirectoryNotFoundException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.IO.FileLoadException">
      <summary>The exception that is thrown when a managed assembly is found but cannot be loaded.</summary>
    </member>
    <member name="M:System.IO.FileLoadException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IO.FileLoadException" /> class, setting the <see cref="P:System.Exception.Message" /> property of the new instance to a system-supplied message that describes the error, such as "Could not load the specified file." This message takes into account the current system culture.</summary>
    </member>
    <member name="M:System.IO.FileLoadException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.FileLoadException" /> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.IO.FileLoadException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.FileLoadException" /> class with the specified error message.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.IO.FileLoadException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.FileLoadException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.IO.FileLoadException.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.FileLoadException" /> class with a specified error message and the name of the file that could not be loaded.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
      <param name="fileName">A <see cref="T:System.String" /> containing the name of the file that was not loaded.</param>
    </member>
    <member name="M:System.IO.FileLoadException.#ctor(System.String,System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.FileLoadException" /> class with a specified error message, the name of the file that could not be loaded, and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
      <param name="fileName">A <see cref="T:System.String" /> containing the name of the file that was not loaded.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.IO.FileLoadException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the file name and additional exception information.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.IO.FileLoadException.ToString">
      <summary>Returns the fully qualified name of the current exception, and possibly the error message, the name of the inner exception, and the stack trace.</summary>
      <returns>A string containing the fully qualified name of this exception, and possibly the error message, the name of the inner exception, and the stack trace, depending on which <see cref="T:System.IO.FileLoadException" /> constructor is used.</returns>
    </member>
    <member name="P:System.IO.FileLoadException.FileName">
      <summary>Gets the name of the file that causes this exception.</summary>
      <returns>A <see cref="T:System.String" /> containing the name of the file with the invalid image, or a null reference if no file name was passed to the constructor for the current instance.</returns>
    </member>
    <member name="P:System.IO.FileLoadException.FusionLog">
      <summary>Gets the log file that describes why an assembly load failed.</summary>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
      <returns>A string containing errors reported by the assembly cache.</returns>
    </member>
    <member name="P:System.IO.FileLoadException.Message">
      <summary>Gets the error message and the name of the file that caused this exception.</summary>
      <returns>A string containing the error message and the name of the file that caused this exception.</returns>
    </member>
    <member name="T:System.IO.FileNotFoundException">
      <summary>The exception that is thrown when an attempt to access a file that does not exist on disk fails.</summary>
    </member>
    <member name="M:System.IO.FileNotFoundException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IO.FileNotFoundException" /> class with its message string set to a system-supplied message.</summary>
    </member>
    <member name="M:System.IO.FileNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.FileNotFoundException" /> class with the specified serialization and context information.</summary>
      <param name="info">An object that holds the serialized object data about the exception being thrown.</param>
      <param name="context">An object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.IO.FileNotFoundException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.FileNotFoundException" /> class with a specified error message.</summary>
      <param name="message">A description of the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.IO.FileNotFoundException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.FileNotFoundException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A description of the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.IO.FileNotFoundException.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.FileNotFoundException" /> class with a specified error message, and the file name that cannot be found.</summary>
      <param name="message">A description of the error, or <see langword="null" /> to use a system-supplied message with the given <paramref name="fileName" />. The content of <paramref name="message" /> should be understood by humans. The caller of this constructor must ensure that this string has been localized for the current system culture.</param>
      <param name="fileName">The full name of the file with the invalid image.</param>
    </member>
    <member name="M:System.IO.FileNotFoundException.#ctor(System.String,System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.FileNotFoundException" /> class with a specified error message, the file name that cannot be found, and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="fileName">The full name of the file with the invalid image.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.IO.FileNotFoundException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the file name and additional exception information.</summary>
      <param name="info">The object that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.IO.FileNotFoundException.ToString">
      <summary>Returns the fully qualified name of this exception and possibly the error message, the name of the inner exception, and the stack trace.</summary>
      <returns>The fully qualified name of this exception and possibly the error message, the name of the inner exception, and the stack trace.</returns>
    </member>
    <member name="P:System.IO.FileNotFoundException.FileName">
      <summary>Gets the name of the file that cannot be found.</summary>
      <returns>The name of the file, or <see langword="null" /> if no file name was passed to the constructor for this instance.</returns>
    </member>
    <member name="P:System.IO.FileNotFoundException.FusionLog">
      <summary>Gets the log file that describes why loading of an assembly failed.</summary>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
      <returns>The errors reported by the assembly cache.</returns>
    </member>
    <member name="P:System.IO.FileNotFoundException.Message">
      <summary>Gets the error message that explains the reason for the exception.</summary>
      <returns>The error message.</returns>
    </member>
    <member name="T:System.IO.IOException">
      <summary>The exception that is thrown when an I/O error occurs.</summary>
    </member>
    <member name="M:System.IO.IOException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IO.IOException" /> class with its message string set to the empty string (""), its HRESULT set to COR_E_IO, and its inner exception set to a null reference.</summary>
    </member>
    <member name="M:System.IO.IOException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.IOException" /> class with the specified serialization and context information.</summary>
      <param name="info">The data for serializing or deserializing the object.</param>
      <param name="context">The source and destination for the object.</param>
    </member>
    <member name="M:System.IO.IOException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.IOException" /> class with its message string set to <paramref name="message" />, its HRESULT set to COR_E_IO, and its inner exception set to <see langword="null" />.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.IO.IOException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.IOException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.IO.IOException.#ctor(System.String,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.IOException" /> class with its message string set to <paramref name="message" /> and its HRESULT user-defined.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
      <param name="hresult">An integer identifying the error that has occurred.</param>
    </member>
    <member name="T:System.IO.PathTooLongException">
      <summary>The exception that is thrown when a path or fully qualified file name is longer than the system-defined maximum length.</summary>
    </member>
    <member name="M:System.IO.PathTooLongException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IO.PathTooLongException" /> class with its HRESULT set to COR_E_PATHTOOLONG.</summary>
    </member>
    <member name="M:System.IO.PathTooLongException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.PathTooLongException" /> class with the specified serialization and context information.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.IO.PathTooLongException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.PathTooLongException" /> class with its message string set to <paramref name="message" /> and its HRESULT set to COR_E_PATHTOOLONG.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.IO.PathTooLongException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.PathTooLongException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.IObservable`1">
      <summary>Defines a provider for push-based notification.</summary>
      <typeparam name="T">The object that provides notification information.</typeparam>
    </member>
    <member name="M:System.IObservable`1.Subscribe(System.IObserver{`0})">
      <summary>Notifies the provider that an observer is to receive notifications.</summary>
      <param name="observer">The object that is to receive notifications.</param>
      <returns>A reference to an interface that allows observers to stop receiving notifications before the provider has finished sending them.</returns>
    </member>
    <member name="T:System.IObserver`1">
      <summary>Provides a mechanism for receiving push-based notifications.</summary>
      <typeparam name="T">The object that provides notification information.</typeparam>
    </member>
    <member name="M:System.IObserver`1.OnCompleted">
      <summary>Notifies the observer that the provider has finished sending push-based notifications.</summary>
    </member>
    <member name="M:System.IObserver`1.OnError(System.Exception)">
      <summary>Notifies the observer that the provider has experienced an error condition.</summary>
      <param name="error">An object that provides additional information about the error.</param>
    </member>
    <member name="M:System.IObserver`1.OnNext(`0)">
      <summary>Provides the observer with new data.</summary>
      <param name="value">The current notification information.</param>
    </member>
    <member name="T:System.IProgress`1">
      <summary>Defines a provider for progress updates.</summary>
      <typeparam name="T">The type of progress update value.</typeparam>
    </member>
    <member name="M:System.IProgress`1.Report(`0)">
      <summary>Reports a progress update.</summary>
      <param name="value">The value of the updated progress.</param>
    </member>
    <member name="T:System.IServiceProvider">
      <summary>Defines a mechanism for retrieving a service object; that is, an object that provides custom support to other objects.</summary>
    </member>
    <member name="M:System.IServiceProvider.GetService(System.Type)">
      <summary>Gets the service object of the specified type.</summary>
      <param name="serviceType">An object that specifies the type of service object to get.</param>
      <returns>A service object of type <paramref name="serviceType" />.  
  
 -or-  
  
 <see langword="null" /> if there is no service object of type <paramref name="serviceType" />.</returns>
    </member>
    <member name="T:System.Lazy`1">
      <summary>Provides support for lazy initialization.</summary>
      <typeparam name="T">The type of object that is being lazily initialized.</typeparam>
    </member>
    <member name="M:System.Lazy`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Lazy`1" /> class. When lazy initialization occurs, the parameterless constructor of the target type is used.</summary>
    </member>
    <member name="M:System.Lazy`1.#ctor(`0)">
      <summary>Initializes a new instance of the <see cref="T:System.Lazy`1" /> class that uses a preinitialized specified value.</summary>
      <param name="value">The preinitialized value to be used.</param>
    </member>
    <member name="M:System.Lazy`1.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Lazy`1" /> class. When lazy initialization occurs, the parameterless constructor of the target type and the specified initialization mode are used.</summary>
      <param name="isThreadSafe">
        <see langword="true" /> to make this instance usable concurrently by multiple threads; <see langword="false" /> to make the instance usable by only one thread at a time.</param>
    </member>
    <member name="M:System.Lazy`1.#ctor(System.Func{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Lazy`1" /> class. When lazy initialization occurs, the specified initialization function is used.</summary>
      <param name="valueFactory">The delegate that is invoked to produce the lazily initialized value when it is needed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="valueFactory" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Lazy`1" /> class. When lazy initialization occurs, the specified initialization function and initialization mode are used.</summary>
      <param name="valueFactory">The delegate that is invoked to produce the lazily initialized value when it is needed.</param>
      <param name="isThreadSafe">
        <see langword="true" /> to make this instance usable concurrently by multiple threads; <see langword="false" /> to make this instance usable by only one thread at a time.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="valueFactory" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
      <summary>Initializes a new instance of the <see cref="T:System.Lazy`1" /> class that uses the specified initialization function and thread-safety mode.</summary>
      <param name="valueFactory">The delegate that is invoked to produce the lazily initialized value when it is needed.</param>
      <param name="mode">One of the enumeration values that specifies the thread safety mode.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode" /> contains an invalid value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="valueFactory" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
      <summary>Initializes a new instance of the <see cref="T:System.Lazy`1" /> class that uses the parameterless constructor of <paramref name="T" /> and the specified thread-safety mode.</summary>
      <param name="mode">One of the enumeration values that specifies the thread safety mode.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode" /> contains an invalid value.</exception>
    </member>
    <member name="M:System.Lazy`1.ToString">
      <summary>Creates and returns a string representation of the <see cref="P:System.Lazy`1.Value" /> property for this instance.</summary>
      <exception cref="T:System.NullReferenceException">The <see cref="P:System.Lazy`1.Value" /> property is <see langword="null" />.</exception>
      <returns>The result of calling the <see cref="M:System.Object.ToString" /> method on the <see cref="P:System.Lazy`1.Value" /> property for this instance, if the value has been created (that is, if the <see cref="P:System.Lazy`1.IsValueCreated" /> property returns <see langword="true" />). Otherwise, a string indicating that the value has not been created.</returns>
    </member>
    <member name="P:System.Lazy`1.IsValueCreated">
      <summary>Gets a value that indicates whether a value has been created for this <see cref="T:System.Lazy`1" /> instance.</summary>
      <returns>
        <see langword="true" /> if a value has been created for this <see cref="T:System.Lazy`1" /> instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Lazy`1.Value">
      <summary>Gets the lazily initialized value of the current <see cref="T:System.Lazy`1" /> instance.</summary>
      <exception cref="T:System.MemberAccessException">The <see cref="T:System.Lazy`1" /> instance is initialized to use the parameterless constructor of the type that is being lazily initialized, and permissions to access the constructor are missing.</exception>
      <exception cref="T:System.MissingMemberException">The <see cref="T:System.Lazy`1" /> instance is initialized to use the parameterless constructor of the type that is being lazily initialized, and that type does not have a public, parameterless constructor.</exception>
      <exception cref="T:System.InvalidOperationException">The initialization function tries to access <see cref="P:System.Lazy`1.Value" /> on this instance.</exception>
      <returns>The lazily initialized value of the current <see cref="T:System.Lazy`1" /> instance.</returns>
    </member>
    <member name="T:System.MemberAccessException">
      <summary>The exception that is thrown when an attempt to access a class member fails.</summary>
    </member>
    <member name="M:System.MemberAccessException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.MemberAccessException" /> class.</summary>
    </member>
    <member name="M:System.MemberAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.MemberAccessException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.MemberAccessException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.MemberAccessException" /> class with a specified error message.</summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.MemberAccessException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.MemberAccessException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.MethodAccessException">
      <summary>The exception that is thrown when there is an invalid attempt to access a method, such as accessing a private method from partially trusted code.</summary>
    </member>
    <member name="M:System.MethodAccessException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.MethodAccessException" /> class, setting the <see cref="P:System.Exception.Message" /> property of the new instance to a system-supplied message that describes the error, such as "Attempt to access the method failed." This message takes into account the current system culture.</summary>
    </member>
    <member name="M:System.MethodAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.MethodAccessException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.MethodAccessException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.MethodAccessException" /> class with a specified error message.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error.</param>
    </member>
    <member name="M:System.MethodAccessException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.MethodAccessException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.MissingFieldException">
      <summary>The exception that is thrown when there is an attempt to dynamically access a field that does not exist. If a field in a class library has been removed or renamed, recompile any assemblies that reference that library.</summary>
    </member>
    <member name="M:System.MissingFieldException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.MissingFieldException" /> class.</summary>
    </member>
    <member name="M:System.MissingFieldException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.MissingFieldException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.MissingFieldException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.MissingFieldException" /> class with a specified error message.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error.</param>
    </member>
    <member name="M:System.MissingFieldException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.MissingFieldException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.MissingFieldException.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.MissingFieldException" /> class with the specified class name and field name.</summary>
      <param name="className">The name of the class in which access to a nonexistent field was attempted.</param>
      <param name="fieldName">The name of the field that cannot be accessed.</param>
    </member>
    <member name="P:System.MissingFieldException.Message">
      <summary>Gets the text string showing the signature of the missing field, the class name, and the field name. This property is read-only.</summary>
      <returns>The error message string.</returns>
    </member>
    <member name="T:System.MissingMemberException">
      <summary>The exception that is thrown when there is an attempt to dynamically access a class member that does not exist or that is not declared as public. If a member in a class library has been removed or renamed, recompile any assemblies that reference that library.</summary>
    </member>
    <member name="F:System.MissingMemberException.ClassName">
      <summary>Holds the class name of the missing member.</summary>
    </member>
    <member name="F:System.MissingMemberException.MemberName">
      <summary>Holds the name of the missing member.</summary>
    </member>
    <member name="F:System.MissingMemberException.Signature">
      <summary>Holds the signature of the missing member.</summary>
    </member>
    <member name="M:System.MissingMemberException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.MissingMemberException" /> class.</summary>
    </member>
    <member name="M:System.MissingMemberException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.MissingMemberException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.MissingMemberException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.MissingMemberException" /> class with a specified error message.</summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.MissingMemberException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.MissingMemberException" /> class with a specified error message and a reference to the inner exception that is the root cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">An instance of <see cref="T:System.Exception" /> that is the cause of the current <see langword="Exception" />. If <paramref name="inner" /> is not a null reference (<see langword="Nothing" /> in Visual Basic), then the current <see langword="Exception" /> is raised in a catch block handling <paramref name="inner" />.</param>
    </member>
    <member name="M:System.MissingMemberException.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.MissingMemberException" /> class with the specified class name and member name.</summary>
      <param name="className">The name of the class in which access to a nonexistent member was attempted.</param>
      <param name="memberName">The name of the member that cannot be accessed.</param>
    </member>
    <member name="M:System.MissingMemberException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the class name, the member name, the signature of the missing member, and additional exception information.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> object is <see langword="null" />.</exception>
    </member>
    <member name="P:System.MissingMemberException.Message">
      <summary>Gets the text string showing the class name, the member name, and the signature of the missing member.</summary>
      <returns>The error message string.</returns>
    </member>
    <member name="T:System.MissingMethodException">
      <summary>The exception that is thrown when there is an attempt to dynamically access a method that does not exist.</summary>
    </member>
    <member name="M:System.MissingMethodException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.MissingMethodException" /> class.</summary>
    </member>
    <member name="M:System.MissingMethodException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.MissingMethodException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.MissingMethodException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.MissingMethodException" /> class with a specified error message.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error.</param>
    </member>
    <member name="M:System.MissingMethodException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.MissingMethodException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.MissingMethodException.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.MissingMethodException" /> class with the specified class name and method name.</summary>
      <param name="className">The name of the class in which access to a nonexistent method was attempted.</param>
      <param name="methodName">The name of the method that cannot be accessed.</param>
    </member>
    <member name="P:System.MissingMethodException.Message">
      <summary>Gets the text string showing the class name, the method name, and the signature of the missing method. This property is read-only.</summary>
      <returns>The error message string.</returns>
    </member>
    <member name="T:System.MTAThreadAttribute">
      <summary>Indicates that the COM threading model for an application is multithreaded apartment (MTA).</summary>
    </member>
    <member name="M:System.MTAThreadAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.MTAThreadAttribute" /> class.</summary>
    </member>
    <member name="T:System.MulticastDelegate">
      <summary>Represents a multicast delegate; that is, a delegate that can have more than one element in its invocation list.</summary>
    </member>
    <member name="M:System.MulticastDelegate.#ctor(System.Object,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.MulticastDelegate" /> class.</summary>
      <param name="target">The object on which <paramref name="method" /> is defined.</param>
      <param name="method">The name of the method for which a delegate is created.</param>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</exception>
    </member>
    <member name="M:System.MulticastDelegate.#ctor(System.Type,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.MulticastDelegate" /> class.</summary>
      <param name="target">The type of object on which <paramref name="method" /> is defined.</param>
      <param name="method">The name of the static method for which a delegate is created.</param>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</exception>
    </member>
    <member name="M:System.MulticastDelegate.CombineImpl(System.Delegate)">
      <summary>Combines this <see cref="T:System.Delegate" /> with the specified <see cref="T:System.Delegate" /> to form a new delegate.</summary>
      <param name="follow">The delegate to combine with this delegate.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="follow" /> does not have the same type as this instance.</exception>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</exception>
      <returns>A delegate that is the new root of the <see cref="T:System.MulticastDelegate" /> invocation list.</returns>
    </member>
    <member name="M:System.MulticastDelegate.Equals(System.Object)">
      <summary>Determines whether this multicast delegate and the specified object are equal.</summary>
      <param name="obj">The object to compare with this instance.</param>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</exception>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> and this instance have the same invocation lists; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.MulticastDelegate.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</exception>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.MulticastDelegate.GetInvocationList">
      <summary>Returns the invocation list of this multicast delegate, in invocation order.</summary>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</exception>
      <returns>An array of delegates whose invocation lists collectively match the invocation list of this instance.</returns>
    </member>
    <member name="M:System.MulticastDelegate.GetMethodImpl">
      <summary>Returns a static method represented by the current <see cref="T:System.MulticastDelegate" />.</summary>
      <returns>A static method represented by the current <see cref="T:System.MulticastDelegate" />.</returns>
    </member>
    <member name="M:System.MulticastDelegate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with all the data needed to serialize this instance.</summary>
      <param name="info">An object that holds all the data needed to serialize or deserialize this instance.</param>
      <param name="context">(Reserved) The location where serialized data is stored and retrieved.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is <see langword="null" />.</exception>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">A serialization error occurred.</exception>
    </member>
    <member name="M:System.MulticastDelegate.op_Equality(System.MulticastDelegate,System.MulticastDelegate)">
      <summary>Determines whether two <see cref="T:System.MulticastDelegate" /> objects are equal.</summary>
      <param name="d1">The left operand.</param>
      <param name="d2">The right operand.</param>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</exception>
      <returns>
        <see langword="true" /> if <paramref name="d1" /> and <paramref name="d2" /> have the same invocation lists; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.MulticastDelegate.op_Inequality(System.MulticastDelegate,System.MulticastDelegate)">
      <summary>Determines whether two <see cref="T:System.MulticastDelegate" /> objects are not equal.</summary>
      <param name="d1">The left operand.</param>
      <param name="d2">The right operand.</param>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</exception>
      <returns>
        <see langword="true" /> if <paramref name="d1" /> and <paramref name="d2" /> do not have the same invocation lists; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.MulticastDelegate.RemoveImpl(System.Delegate)">
      <summary>Removes an element from the invocation list of this <see cref="T:System.MulticastDelegate" /> that is equal to the specified delegate.</summary>
      <param name="value">The delegate to search for in the invocation list.</param>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</exception>
      <returns>If <paramref name="value" /> is found in the invocation list for this instance, then a new <see cref="T:System.Delegate" /> without <paramref name="value" /> in its invocation list; otherwise, this instance with its original invocation list.</returns>
    </member>
    <member name="T:System.NotImplementedException">
      <summary>The exception that is thrown when a requested method or operation is not implemented.</summary>
    </member>
    <member name="M:System.NotImplementedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.NotImplementedException" /> class with default properties.</summary>
    </member>
    <member name="M:System.NotImplementedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.NotImplementedException" /> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.NotImplementedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.NotImplementedException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.NotImplementedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.NotImplementedException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.NotSupportedException">
      <summary>The exception that is thrown when an invoked method is not supported, or when there is an attempt to read, seek, or write to a stream that does not support the invoked functionality.</summary>
    </member>
    <member name="M:System.NotSupportedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.NotSupportedException" /> class, setting the <see cref="P:System.Exception.Message" /> property of the new instance to a system-supplied message that describes the error. This message takes into account the current system culture.</summary>
    </member>
    <member name="M:System.NotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.NotSupportedException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.NotSupportedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.NotSupportedException" /> class with a specified error message.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.NotSupportedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.NotSupportedException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.Nullable">
      <summary>Supports a value type that can be assigned <see langword="null" />. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Nullable.Compare``1(System.Nullable{``0},System.Nullable{``0})">
      <summary>Compares the relative values of two <see cref="T:System.Nullable`1" /> objects.</summary>
      <param name="n1">A <see cref="T:System.Nullable`1" /> object.</param>
      <param name="n2">A <see cref="T:System.Nullable`1" /> object.</param>
      <typeparam name="T">The underlying value type of the <paramref name="n1" /> and <paramref name="n2" /> parameters.</typeparam>
      <returns>An integer that indicates the relative values of the <paramref name="n1" /> and <paramref name="n2" /> parameters.  
  
 <list type="table"><listheader><term> Return Value</term><description> Description</description></listheader><item><term> Less than zero</term><description> The <see cref="P:System.Nullable`1.HasValue" /> property for <paramref name="n1" /> is <see langword="false" />, and the <see cref="P:System.Nullable`1.HasValue" /> property for <paramref name="n2" /> is <see langword="true" />, or the <see cref="P:System.Nullable`1.HasValue" /> properties for <paramref name="n1" /> and <paramref name="n2" /> are <see langword="true" />, and the value of the <see cref="P:System.Nullable`1.Value" /> property for <paramref name="n1" /> is less than the value of the <see cref="P:System.Nullable`1.Value" /> property for <paramref name="n2" />.</description></item><item><term> Zero</term><description> The <see cref="P:System.Nullable`1.HasValue" /> properties for <paramref name="n1" /> and <paramref name="n2" /> are <see langword="false" />, or the <see cref="P:System.Nullable`1.HasValue" /> properties for <paramref name="n1" /> and <paramref name="n2" /> are <see langword="true" />, and the value of the <see cref="P:System.Nullable`1.Value" /> property for <paramref name="n1" /> is equal to the value of the <see cref="P:System.Nullable`1.Value" /> property for <paramref name="n2" />.</description></item><item><term> Greater than zero</term><description> The <see cref="P:System.Nullable`1.HasValue" /> property for <paramref name="n1" /> is <see langword="true" />, and the <see cref="P:System.Nullable`1.HasValue" /> property for <paramref name="n2" /> is <see langword="false" />, or the <see cref="P:System.Nullable`1.HasValue" /> properties for <paramref name="n1" /> and <paramref name="n2" /> are <see langword="true" />, and the value of the <see cref="P:System.Nullable`1.Value" /> property for <paramref name="n1" /> is greater than the value of the <see cref="P:System.Nullable`1.Value" /> property for <paramref name="n2" />.</description></item></list></returns>
    </member>
    <member name="M:System.Nullable.Equals``1(System.Nullable{``0},System.Nullable{``0})">
      <summary>Indicates whether two specified <see cref="T:System.Nullable`1" /> objects are equal.</summary>
      <param name="n1">A <see cref="T:System.Nullable`1" /> object.</param>
      <param name="n2">A <see cref="T:System.Nullable`1" /> object.</param>
      <typeparam name="T">The underlying value type of the <paramref name="n1" /> and <paramref name="n2" /> parameters.</typeparam>
      <returns>
        <see langword="true" /> if the <paramref name="n1" /> parameter is equal to the <paramref name="n2" /> parameter; otherwise, <see langword="false" />.  
  
 The return value depends on the <see cref="P:System.Nullable`1.HasValue" /> and <see cref="P:System.Nullable`1.Value" /> properties of the two parameters that are compared.  
  
 <list type="table"><listheader><term> Return Value</term><description> Description</description></listheader><item><term><see langword="true" /></term><description> The <see cref="P:System.Nullable`1.HasValue" /> properties for <paramref name="n1" /> and <paramref name="n2" /> are <see langword="false" />, or the <see cref="P:System.Nullable`1.HasValue" /> properties for <paramref name="n1" /> and <paramref name="n2" /> are <see langword="true" />, and the <see cref="P:System.Nullable`1.Value" /> properties of the parameters are equal.</description></item><item><term><see langword="false" /></term><description> The <see cref="P:System.Nullable`1.HasValue" /> property is <see langword="true" /> for one parameter and <see langword="false" /> for the other parameter, or the <see cref="P:System.Nullable`1.HasValue" /> properties for <paramref name="n1" /> and <paramref name="n2" /> are <see langword="true" />, and the <see cref="P:System.Nullable`1.Value" /> properties of the parameters are unequal.</description></item></list></returns>
    </member>
    <member name="M:System.Nullable.GetUnderlyingType(System.Type)">
      <summary>Returns the underlying type argument of the specified nullable type.</summary>
      <param name="nullableType">A <see cref="T:System.Type" /> object that describes a closed generic nullable type.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nullableType" /> is <see langword="null" />.</exception>
      <returns>The type argument of the <paramref name="nullableType" /> parameter, if the <paramref name="nullableType" /> parameter is a closed generic nullable type; otherwise, <see langword="null" />.</returns>
    </member>
    <member name="T:System.Nullable`1">
      <summary>Represents a value type that can be assigned <see langword="null" />.</summary>
      <typeparam name="T">The underlying value type of the <see cref="T:System.Nullable`1" /> generic type.</typeparam>
    </member>
    <member name="M:System.Nullable`1.#ctor(`0)">
      <summary>Initializes a new instance of the <see cref="T:System.Nullable`1" /> structure to the specified value.</summary>
      <param name="value">A value type.</param>
    </member>
    <member name="M:System.Nullable`1.Equals(System.Object)">
      <summary>Indicates whether the current <see cref="T:System.Nullable`1" /> object is equal to a specified object.</summary>
      <param name="other">An object.</param>
      <returns>
        <see langword="true" /> if the <paramref name="other" /> parameter is equal to the current <see cref="T:System.Nullable`1" /> object; otherwise, <see langword="false" />.  
  
 This table describes how equality is defined for the compared values:  
  
 <list type="table"><listheader><term> Return Value</term><description> Description</description></listheader><item><term><see langword="true" /></term><description> The <see cref="P:System.Nullable`1.HasValue" /> property is <see langword="false" />, and the <paramref name="other" /> parameter is <see langword="null" /> (that is, two null values are equal by definition), OR the <see cref="P:System.Nullable`1.HasValue" /> property is <see langword="true" />, and the value returned by the <see cref="P:System.Nullable`1.Value" /> property is equal to the <paramref name="other" /> parameter.</description></item><item><term><see langword="false" /></term><description> The <see cref="P:System.Nullable`1.HasValue" /> property for the current <see cref="T:System.Nullable`1" /> structure is <see langword="true" />, and the <paramref name="other" /> parameter is <see langword="null" />, OR the <see cref="P:System.Nullable`1.HasValue" /> property for the current <see cref="T:System.Nullable`1" /> structure is <see langword="false" />, and the <paramref name="other" /> parameter is not <see langword="null" />, OR the <see cref="P:System.Nullable`1.HasValue" /> property for the current <see cref="T:System.Nullable`1" /> structure is <see langword="true" />, and the value returned by the <see cref="P:System.Nullable`1.Value" /> property is not equal to the <paramref name="other" /> parameter.</description></item></list></returns>
    </member>
    <member name="M:System.Nullable`1.GetHashCode">
      <summary>Retrieves the hash code of the object returned by the <see cref="P:System.Nullable`1.Value" /> property.</summary>
      <returns>The hash code of the object returned by the <see cref="P:System.Nullable`1.Value" /> property if the <see cref="P:System.Nullable`1.HasValue" /> property is <see langword="true" />, or zero if the <see cref="P:System.Nullable`1.HasValue" /> property is <see langword="false" />.</returns>
    </member>
    <member name="M:System.Nullable`1.GetValueOrDefault">
      <summary>Retrieves the value of the current <see cref="T:System.Nullable`1" /> object, or the default value of the underlying type.</summary>
      <returns>The value of the <see cref="P:System.Nullable`1.Value" /> property if the  <see cref="P:System.Nullable`1.HasValue" /> property is <see langword="true" />; otherwise, the default value of the underlying type.</returns>
    </member>
    <member name="M:System.Nullable`1.GetValueOrDefault(`0)">
      <summary>Retrieves the value of the current <see cref="T:System.Nullable`1" /> object, or the specified default value.</summary>
      <param name="defaultValue">A value to return if the <see cref="P:System.Nullable`1.HasValue" /> property is <see langword="false" />.</param>
      <returns>The value of the <see cref="P:System.Nullable`1.Value" /> property if the <see cref="P:System.Nullable`1.HasValue" /> property is <see langword="true" />; otherwise, the <paramref name="defaultValue" /> parameter.</returns>
    </member>
    <member name="M:System.Nullable`1.op_Explicit(System.Nullable{`0})~T">
      <summary>Defines an explicit conversion of a <see cref="T:System.Nullable`1" /> instance to its underlying value.</summary>
      <param name="value">A nullable value.</param>
      <returns>The value of the <see cref="P:System.Nullable`1.Value" /> property for the <paramref name="value" /> parameter.</returns>
    </member>
    <member name="M:System.Nullable`1.op_Implicit(T)~System.Nullable{`0}">
      <summary>Creates a new <see cref="T:System.Nullable`1" /> object initialized to a specified value.</summary>
      <param name="value">A value type.</param>
      <returns>A <see cref="T:System.Nullable`1" /> object whose <see cref="P:System.Nullable`1.Value" /> property is initialized with the <paramref name="value" /> parameter.</returns>
    </member>
    <member name="M:System.Nullable`1.ToString">
      <summary>Returns the text representation of the value of the current <see cref="T:System.Nullable`1" /> object.</summary>
      <returns>The text representation of the value of the current <see cref="T:System.Nullable`1" /> object if the <see cref="P:System.Nullable`1.HasValue" /> property is <see langword="true" />, or an empty string ("") if the <see cref="P:System.Nullable`1.HasValue" /> property is <see langword="false" />.</returns>
    </member>
    <member name="P:System.Nullable`1.HasValue">
      <summary>Gets a value indicating whether the current <see cref="T:System.Nullable`1" /> object has a valid value of its underlying type.</summary>
      <returns>
        <see langword="true" /> if the current <see cref="T:System.Nullable`1" /> object has a value; <see langword="false" /> if the current <see cref="T:System.Nullable`1" /> object has no value.</returns>
    </member>
    <member name="P:System.Nullable`1.Value">
      <summary>Gets the value of the current <see cref="T:System.Nullable`1" /> object if it has been assigned a valid underlying value.</summary>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Nullable`1.HasValue" /> property is <see langword="false" />.</exception>
      <returns>The value of the current <see cref="T:System.Nullable`1" /> object if the <see cref="P:System.Nullable`1.HasValue" /> property is <see langword="true" />. An exception is thrown if the <see cref="P:System.Nullable`1.HasValue" /> property is <see langword="false" />.</returns>
    </member>
    <member name="T:System.NullReferenceException">
      <summary>The exception that is thrown when there is an attempt to dereference a null object reference.</summary>
    </member>
    <member name="M:System.NullReferenceException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.NullReferenceException" /> class, setting the <see cref="P:System.Exception.Message" /> property of the new instance to a system-supplied message that describes the error, such as "The value 'null' was found where an instance of an object was required." This message takes into account the current system culture.</summary>
    </member>
    <member name="M:System.NullReferenceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.NullReferenceException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.NullReferenceException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.NullReferenceException" /> class with a specified error message.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.NullReferenceException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.NullReferenceException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.Object">
      <summary>Supports all classes in the .NET class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all .NET classes; it is the root of the type hierarchy.</summary>
    </member>
    <member name="M:System.Object.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Object" /> class.</summary>
    </member>
    <member name="M:System.Object.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current object.</summary>
      <param name="obj">The object to compare with the current object.</param>
      <returns>
        <see langword="true" /> if the specified object  is equal to the current object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Object.Equals(System.Object,System.Object)">
      <summary>Determines whether the specified object instances are considered equal.</summary>
      <param name="objA">The first object to compare.</param>
      <param name="objB">The second object to compare.</param>
      <returns>
        <see langword="true" /> if the objects are considered equal; otherwise, <see langword="false" />. If both <paramref name="objA" /> and <paramref name="objB" /> are null, the method returns <see langword="true" />.</returns>
    </member>
    <member name="M:System.Object.Finalize">
      <summary>Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</summary>
    </member>
    <member name="M:System.Object.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:System.Object.GetType">
      <summary>Gets the <see cref="T:System.Type" /> of the current instance.</summary>
      <returns>The exact runtime type of the current instance.</returns>
    </member>
    <member name="M:System.Object.MemberwiseClone">
      <summary>Creates a shallow copy of the current <see cref="T:System.Object" />.</summary>
      <returns>A shallow copy of the current <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:System.Object.ReferenceEquals(System.Object,System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> instances are the same instance.</summary>
      <param name="objA">The first object to compare.</param>
      <param name="objB">The second object  to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="objA" /> is the same instance as <paramref name="objB" /> or if both are null; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Object.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="T:System.ObjectDisposedException">
      <summary>The exception that is thrown when an operation is performed on a disposed object.</summary>
    </member>
    <member name="M:System.ObjectDisposedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.ObjectDisposedException" /> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.ObjectDisposedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ObjectDisposedException" /> class with a string containing the name of the disposed object.</summary>
      <param name="objectName">A string containing the name of the disposed object.</param>
    </member>
    <member name="M:System.ObjectDisposedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ObjectDisposedException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If <paramref name="innerException" /> is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.ObjectDisposedException.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ObjectDisposedException" /> class with the specified object name and message.</summary>
      <param name="objectName">The name of the disposed object.</param>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.ObjectDisposedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Retrieves the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the parameter name and additional exception information.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="P:System.ObjectDisposedException.Message">
      <summary>Gets the message that describes the error.</summary>
      <returns>A string that describes the error.</returns>
    </member>
    <member name="P:System.ObjectDisposedException.ObjectName">
      <summary>Gets the name of the disposed object.</summary>
      <returns>A string containing the name of the disposed object.</returns>
    </member>
    <member name="T:System.ObsoleteAttribute">
      <summary>Marks the program elements that are no longer in use. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.ObsoleteAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ObsoleteAttribute" /> class with default properties.</summary>
    </member>
    <member name="M:System.ObsoleteAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ObsoleteAttribute" /> class with a specified workaround message.</summary>
      <param name="message">The text string that describes alternative workarounds.</param>
    </member>
    <member name="M:System.ObsoleteAttribute.#ctor(System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ObsoleteAttribute" /> class with a workaround message and a Boolean value indicating whether the obsolete element usage is considered an error.</summary>
      <param name="message">The text string that describes alternative workarounds.</param>
      <param name="error">
        <see langword="true" /> if the obsolete element usage generates a compiler error; <see langword="false" /> if it generates a compiler warning.</param>
    </member>
    <member name="P:System.ObsoleteAttribute.DiagnosticId">
      <summary>Gets or sets the ID the compiler will use when reporting a use of the API.</summary>
      <returns>The unique diagnostic ID.</returns>
    </member>
    <member name="P:System.ObsoleteAttribute.IsError">
      <summary>Gets a Boolean value indicating whether the compiler will treat usage of the obsolete program element as an error.</summary>
      <returns>
        <see langword="true" /> if the obsolete element usage is considered an error; otherwise, <see langword="false" />. The default is <see langword="false" />.</returns>
    </member>
    <member name="P:System.ObsoleteAttribute.Message">
      <summary>Gets the workaround message, including a description of the alternative program elements.</summary>
      <returns>The workaround text string.</returns>
    </member>
    <member name="P:System.ObsoleteAttribute.UrlFormat">
      <summary>Gets or sets the URL for corresponding documentation. The API accepts a format string instead of an actual URL, creating a generic URL that includes the diagnostic ID.</summary>
      <returns>The format string that represents a URL to corresponding documentation.</returns>
    </member>
    <member name="T:System.OutOfMemoryException">
      <summary>The exception that is thrown when there is not enough memory to continue the execution of a program.</summary>
    </member>
    <member name="M:System.OutOfMemoryException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.OutOfMemoryException" /> class.</summary>
    </member>
    <member name="M:System.OutOfMemoryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.OutOfMemoryException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.OutOfMemoryException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.OutOfMemoryException" /> class with a specified error message.</summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.OutOfMemoryException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.OutOfMemoryException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.OverflowException">
      <summary>The exception that is thrown when an arithmetic, casting, or conversion operation in a checked context results in an overflow.</summary>
    </member>
    <member name="M:System.OverflowException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.OverflowException" /> class.</summary>
    </member>
    <member name="M:System.OverflowException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.OverflowException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.OverflowException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.OverflowException" /> class with a specified error message.</summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.OverflowException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.OverflowException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.ParamArrayAttribute">
      <summary>Indicates that a method will allow a variable number of arguments in its invocation. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.ParamArrayAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ParamArrayAttribute" /> class with default properties.</summary>
    </member>
    <member name="T:System.PlatformNotSupportedException">
      <summary>The exception that is thrown when a feature does not run on a particular platform.</summary>
    </member>
    <member name="M:System.PlatformNotSupportedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.PlatformNotSupportedException" /> class with default properties.</summary>
    </member>
    <member name="M:System.PlatformNotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.PlatformNotSupportedException" /> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.PlatformNotSupportedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.PlatformNotSupportedException" /> class with a specified error message.</summary>
      <param name="message">The text message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.PlatformNotSupportedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.PlatformNotSupportedException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.Predicate`1">
      <summary>Represents the method that defines a set of criteria and determines whether the specified object meets those criteria.</summary>
      <param name="obj">The object to compare against the criteria defined within the method represented by this delegate.</param>
      <typeparam name="T">The type of the object to compare.</typeparam>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> meets the criteria defined within the method represented by this delegate; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.RankException">
      <summary>The exception that is thrown when an array with the wrong number of dimensions is passed to a method.</summary>
    </member>
    <member name="M:System.RankException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.RankException" /> class.</summary>
    </member>
    <member name="M:System.RankException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.RankException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.RankException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.RankException" /> class with a specified error message.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error.</param>
    </member>
    <member name="M:System.RankException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.RankException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.Reflection.AssemblyCompanyAttribute">
      <summary>Defines a company name custom attribute for an assembly manifest.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyCompanyAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyCompanyAttribute" /> class.</summary>
      <param name="company">The company name information.</param>
    </member>
    <member name="P:System.Reflection.AssemblyCompanyAttribute.Company">
      <summary>Gets company name information.</summary>
      <returns>A string containing the company name.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyConfigurationAttribute">
      <summary>Specifies the build configuration, such as retail or debug, for an assembly.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyConfigurationAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyConfigurationAttribute" /> class.</summary>
      <param name="configuration">The assembly configuration.</param>
    </member>
    <member name="P:System.Reflection.AssemblyConfigurationAttribute.Configuration">
      <summary>Gets assembly configuration information.</summary>
      <returns>A string containing the assembly configuration information.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyCopyrightAttribute">
      <summary>Defines a copyright custom attribute for an assembly manifest.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyCopyrightAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyCopyrightAttribute" /> class.</summary>
      <param name="copyright">The copyright information.</param>
    </member>
    <member name="P:System.Reflection.AssemblyCopyrightAttribute.Copyright">
      <summary>Gets copyright information.</summary>
      <returns>A string containing the copyright information.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyCultureAttribute">
      <summary>Specifies which culture the assembly supports.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyCultureAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyCultureAttribute" /> class with the culture supported by the assembly being attributed.</summary>
      <param name="culture">The culture supported by the attributed assembly.</param>
    </member>
    <member name="P:System.Reflection.AssemblyCultureAttribute.Culture">
      <summary>Gets the supported culture of the attributed assembly.</summary>
      <returns>A string containing the name of the supported culture.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyDefaultAliasAttribute">
      <summary>Defines a friendly default alias for an assembly manifest.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyDefaultAliasAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyDefaultAliasAttribute" /> class.</summary>
      <param name="defaultAlias">The assembly default alias information.</param>
    </member>
    <member name="P:System.Reflection.AssemblyDefaultAliasAttribute.DefaultAlias">
      <summary>Gets default alias information.</summary>
      <returns>A string containing the default alias information.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyDelaySignAttribute">
      <summary>Specifies that the assembly is not fully signed when created.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyDelaySignAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyDelaySignAttribute" /> class.</summary>
      <param name="delaySign">
        <see langword="true" /> if the feature this attribute represents is activated; otherwise, <see langword="false" />.</param>
    </member>
    <member name="P:System.Reflection.AssemblyDelaySignAttribute.DelaySign">
      <summary>Gets a value indicating the state of the attribute.</summary>
      <returns>
        <see langword="true" /> if this assembly has been built as delay-signed; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyDescriptionAttribute">
      <summary>Provides a text description for an assembly.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyDescriptionAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyDescriptionAttribute" /> class.</summary>
      <param name="description">The assembly description.</param>
    </member>
    <member name="P:System.Reflection.AssemblyDescriptionAttribute.Description">
      <summary>Gets assembly description information.</summary>
      <returns>A string containing the assembly description.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyFileVersionAttribute">
      <summary>Instructs a compiler to use a specific version number for the Win32 file version resource. The Win32 file version is not required to be the same as the assembly's version number.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyFileVersionAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyFileVersionAttribute" /> class, specifying the file version.</summary>
      <param name="version">The file version.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" /> is <see langword="null" />.</exception>
    </member>
    <member name="P:System.Reflection.AssemblyFileVersionAttribute.Version">
      <summary>Gets the Win32 file version resource name.</summary>
      <returns>A string containing the file version resource name.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyFlagsAttribute">
      <summary>Specifies a bitwise combination of <see cref="T:System.Reflection.AssemblyNameFlags" /> flags for an assembly, describing just-in-time (JIT) compiler options, whether the assembly is retargetable, and whether it has a full or tokenized public key. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyFlagsAttribute.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyFlagsAttribute" /> class with the specified combination of <see cref="T:System.Reflection.AssemblyNameFlags" /> flags, cast as an integer value.</summary>
      <param name="assemblyFlags">A bitwise combination of <see cref="T:System.Reflection.AssemblyNameFlags" /> flags, cast as an integer value, representing just-in-time (JIT) compiler options, longevity, whether an assembly is retargetable, and whether it has a full or tokenized public key.</param>
    </member>
    <member name="M:System.Reflection.AssemblyFlagsAttribute.#ctor(System.Reflection.AssemblyNameFlags)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyFlagsAttribute" /> class with the specified combination of <see cref="T:System.Reflection.AssemblyNameFlags" /> flags.</summary>
      <param name="assemblyFlags">A bitwise combination of <see cref="T:System.Reflection.AssemblyNameFlags" /> flags representing just-in-time (JIT) compiler options, longevity, whether an assembly is retargetable, and whether it has a full or tokenized public key.</param>
    </member>
    <member name="M:System.Reflection.AssemblyFlagsAttribute.#ctor(System.UInt32)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyFlagsAttribute" /> class with the specified combination of <see cref="T:System.Reflection.AssemblyNameFlags" /> flags, cast as an unsigned integer value.</summary>
      <param name="flags">A bitwise combination of <see cref="T:System.Reflection.AssemblyNameFlags" /> flags, cast as an unsigned integer value, representing just-in-time (JIT) compiler options, longevity, whether an assembly is retargetable, and whether it has a full or tokenized public key.</param>
    </member>
    <member name="P:System.Reflection.AssemblyFlagsAttribute.AssemblyFlags">
      <summary>Gets an integer value representing the combination of <see cref="T:System.Reflection.AssemblyNameFlags" /> flags specified when this attribute instance was created.</summary>
      <returns>An integer value representing a bitwise combination of <see cref="T:System.Reflection.AssemblyNameFlags" /> flags.</returns>
    </member>
    <member name="P:System.Reflection.AssemblyFlagsAttribute.Flags">
      <summary>Gets an unsigned integer value representing the combination of <see cref="T:System.Reflection.AssemblyNameFlags" /> flags specified when this attribute instance was created.</summary>
      <returns>An unsigned integer value representing a bitwise combination of <see cref="T:System.Reflection.AssemblyNameFlags" /> flags.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyInformationalVersionAttribute">
      <summary>Defines additional version information for an assembly manifest.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyInformationalVersionAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyInformationalVersionAttribute" /> class.</summary>
      <param name="informationalVersion">The assembly version information.</param>
    </member>
    <member name="P:System.Reflection.AssemblyInformationalVersionAttribute.InformationalVersion">
      <summary>Gets version information.</summary>
      <returns>A string containing the version information.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyKeyFileAttribute">
      <summary>Specifies the name of a file containing the key pair used to generate a strong name.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyKeyFileAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see langword="AssemblyKeyFileAttribute" /> class with the name of the file containing the key pair to generate a strong name for the assembly being attributed.</summary>
      <param name="keyFile">The name of the file containing the key pair.</param>
    </member>
    <member name="P:System.Reflection.AssemblyKeyFileAttribute.KeyFile">
      <summary>Gets the name of the file containing the key pair used to generate a strong name for the attributed assembly.</summary>
      <returns>A string containing the name of the file that contains the key pair.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyKeyNameAttribute">
      <summary>Specifies the name of a key container within the CSP containing the key pair used to generate a strong name.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyKeyNameAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyKeyNameAttribute" /> class with the name of the container holding the key pair used to generate a strong name for the assembly being attributed.</summary>
      <param name="keyName">The name of the container containing the key pair.</param>
    </member>
    <member name="P:System.Reflection.AssemblyKeyNameAttribute.KeyName">
      <summary>Gets the name of the container having the key pair that is used to generate a strong name for the attributed assembly.</summary>
      <returns>A string containing the name of the container that has the relevant key pair.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyMetadataAttribute">
      <summary>Defines a key/value metadata pair for the decorated assembly.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyMetadataAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyMetadataAttribute" /> class by using the specified metadata key and value.</summary>
      <param name="key">The metadata key.</param>
      <param name="value">The metadata value.</param>
    </member>
    <member name="P:System.Reflection.AssemblyMetadataAttribute.Key">
      <summary>Gets the metadata key.</summary>
      <returns>The metadata key.</returns>
    </member>
    <member name="P:System.Reflection.AssemblyMetadataAttribute.Value">
      <summary>Gets the metadata value.</summary>
      <returns>The metadata value.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyNameFlags">
      <summary>Provides information about an <see cref="T:System.Reflection.Assembly" /> reference.</summary>
    </member>
    <member name="F:System.Reflection.AssemblyNameFlags.EnableJITcompileOptimizer">
      <summary>Specifies that just-in-time (JIT) compiler optimization is disabled for the assembly. This is the exact opposite of the meaning that is suggested by the member name.</summary>
    </member>
    <member name="F:System.Reflection.AssemblyNameFlags.EnableJITcompileTracking">
      <summary>Specifies that just-in-time (JIT) compiler tracking is enabled for the assembly.</summary>
    </member>
    <member name="F:System.Reflection.AssemblyNameFlags.None">
      <summary>Specifies that no flags are in effect.</summary>
    </member>
    <member name="F:System.Reflection.AssemblyNameFlags.PublicKey">
      <summary>Specifies that a public key is formed from the full public key rather than the public key token.</summary>
    </member>
    <member name="F:System.Reflection.AssemblyNameFlags.Retargetable">
      <summary>Specifies that the assembly can be retargeted at runtime to an assembly from a different publisher. This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:System.Reflection.AssemblyProductAttribute">
      <summary>Defines a product name custom attribute for an assembly manifest.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyProductAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyProductAttribute" /> class.</summary>
      <param name="product">The product name information.</param>
    </member>
    <member name="P:System.Reflection.AssemblyProductAttribute.Product">
      <summary>Gets product name information.</summary>
      <returns>A string containing the product name.</returns>
    </member>
    <member name="T:System.Reflection.AssemblySignatureKeyAttribute">
      <summary>Provides migration from an older, simpler strong name key to a larger key with a stronger hashing algorithm.</summary>
    </member>
    <member name="M:System.Reflection.AssemblySignatureKeyAttribute.#ctor(System.String,System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Reflection.AssemblySignatureKeyAttribute" /> class by using the specified public key and countersignature.</summary>
      <param name="publicKey">The public or identity key.</param>
      <param name="countersignature">The countersignature, which is the signature key portion of the strong-name key.</param>
    </member>
    <member name="P:System.Reflection.AssemblySignatureKeyAttribute.Countersignature">
      <summary>Gets the countersignature for the strong name for this assembly.</summary>
      <returns>The countersignature for this signature key.</returns>
    </member>
    <member name="P:System.Reflection.AssemblySignatureKeyAttribute.PublicKey">
      <summary>Gets the public key for the strong name used to sign the assembly.</summary>
      <returns>The public key for this assembly.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyTitleAttribute">
      <summary>Specifies a description for an assembly.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyTitleAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyTitleAttribute" /> class.</summary>
      <param name="title">The assembly title.</param>
    </member>
    <member name="P:System.Reflection.AssemblyTitleAttribute.Title">
      <summary>Gets assembly title information.</summary>
      <returns>The assembly title.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyTrademarkAttribute">
      <summary>Defines a trademark custom attribute for an assembly manifest.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyTrademarkAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyTrademarkAttribute" /> class.</summary>
      <param name="trademark">The trademark information.</param>
    </member>
    <member name="P:System.Reflection.AssemblyTrademarkAttribute.Trademark">
      <summary>Gets trademark information.</summary>
      <returns>A <see langword="String" /> containing trademark information.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyVersionAttribute">
      <summary>Specifies the version of the assembly being attributed.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyVersionAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see langword="AssemblyVersionAttribute" /> class with the version number of the assembly being attributed.</summary>
      <param name="version">The version number of the attributed assembly.</param>
    </member>
    <member name="P:System.Reflection.AssemblyVersionAttribute.Version">
      <summary>Gets the version number of the attributed assembly.</summary>
      <returns>A string containing the assembly version number.</returns>
    </member>
    <member name="T:System.Reflection.DefaultMemberAttribute">
      <summary>Defines the member of a type that is the default member used by <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</summary>
    </member>
    <member name="M:System.Reflection.DefaultMemberAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.DefaultMemberAttribute" /> class.</summary>
      <param name="memberName">A <see langword="String" /> containing the name of the member to invoke. This may be a constructor, method, property, or field. A suitable invocation attribute must be specified when the member is invoked. The default member of a class can be specified by passing an empty <see langword="String" /> as the name of the member.  
  
 The default member of a type is marked with the <see langword="DefaultMemberAttribute" /> custom attribute or marked in COM in the usual way.</param>
    </member>
    <member name="P:System.Reflection.DefaultMemberAttribute.MemberName">
      <summary>Gets the name from the attribute.</summary>
      <returns>A string representing the member name.</returns>
    </member>
    <member name="T:System.Reflection.Emit.FlowControl">
      <summary>Describes how an instruction alters the flow of control.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Branch">
      <summary>Branch instruction.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Break">
      <summary>Break instruction.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Call">
      <summary>Call instruction.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Cond_Branch">
      <summary>Conditional branch instruction.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Meta">
      <summary>Provides information about a subsequent instruction. For example, the <see langword="Unaligned" /> instruction of <see langword="Reflection.Emit.Opcodes" /> has <see langword="FlowControl.Meta" /> and specifies that the subsequent pointer instruction might be unaligned.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Next">
      <summary>Normal flow of control.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Phi">
      <summary>This enumerator value is reserved and should not be used.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Return">
      <summary>Return instruction.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Throw">
      <summary>Exception throw instruction.</summary>
    </member>
    <member name="T:System.Reflection.Emit.OpCode">
      <summary>Describes an intermediate language (IL) instruction.</summary>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.Equals(System.Object)">
      <summary>Tests whether the given object is equal to this <see langword="Opcode" />.</summary>
      <param name="obj">The object to compare to this object.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> is an instance of <see langword="Opcode" /> and is equal to this object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.Equals(System.Reflection.Emit.OpCode)">
      <summary>Indicates whether the current instance is equal to the specified <see cref="T:System.Reflection.Emit.OpCode" />.</summary>
      <param name="obj">The <see cref="T:System.Reflection.Emit.OpCode" /> to compare to the current instance.</param>
      <returns>
        <see langword="true" /> if the value of <paramref name="obj" /> is equal to the value of the current instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.GetHashCode">
      <summary>Returns the generated hash code for this <see langword="Opcode" />.</summary>
      <returns>The hash code for this instance.</returns>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.op_Equality(System.Reflection.Emit.OpCode,System.Reflection.Emit.OpCode)">
      <summary>Indicates whether two <see cref="T:System.Reflection.Emit.OpCode" /> structures are equal.</summary>
      <param name="a">The <see cref="T:System.Reflection.Emit.OpCode" /> to compare to <paramref name="b" />.</param>
      <param name="b">The <see cref="T:System.Reflection.Emit.OpCode" /> to compare to <paramref name="a" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="a" /> is equal to <paramref name="b" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.op_Inequality(System.Reflection.Emit.OpCode,System.Reflection.Emit.OpCode)">
      <summary>Indicates whether two <see cref="T:System.Reflection.Emit.OpCode" /> structures are not equal.</summary>
      <param name="a">The <see cref="T:System.Reflection.Emit.OpCode" /> to compare to <paramref name="b" />.</param>
      <param name="b">The <see cref="T:System.Reflection.Emit.OpCode" /> to compare to <paramref name="a" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="a" /> is not equal to <paramref name="b" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.ToString">
      <summary>Returns this <see langword="Opcode" /> as a <see cref="T:System.String" />.</summary>
      <returns>A string containing the name of this <see langword="Opcode" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.FlowControl">
      <summary>The flow control characteristics of the intermediate language (IL) instruction.</summary>
      <returns>Read-only. The type of flow control.</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.Name">
      <summary>The name of the intermediate language (IL) instruction.</summary>
      <returns>Read-only. The name of the IL instruction.</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.OpCodeType">
      <summary>The type of intermediate language (IL) instruction.</summary>
      <returns>Read-only. The type of intermediate language (IL) instruction.</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.OperandType">
      <summary>The operand type of an intermediate language (IL) instruction.</summary>
      <returns>Read-only. The operand type of an IL instruction.</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.Size">
      <summary>The size of the intermediate language (IL) instruction.</summary>
      <returns>Read-only. The size of the IL instruction.</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.StackBehaviourPop">
      <summary>How the intermediate language (IL) instruction pops the stack.</summary>
      <returns>Read-only. The way the IL instruction pops the stack.</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.StackBehaviourPush">
      <summary>How the intermediate language (IL) instruction pushes operand onto the stack.</summary>
      <returns>Read-only. The way the IL instruction pushes operand onto the stack.</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.Value">
      <summary>Gets the numeric value of the intermediate language (IL) instruction.</summary>
      <returns>Read-only. The numeric value of the IL instruction.</returns>
    </member>
    <member name="T:System.Reflection.Emit.OpCodes">
      <summary>Provides field representations of the Microsoft Intermediate Language (MSIL) instructions for emission by the <see cref="T:System.Reflection.Emit.ILGenerator" /> class members (such as <see cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)" />).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Add">
      <summary>Adds two values and pushes the result onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Add_Ovf">
      <summary>Adds two integers, performs an overflow check, and pushes the result onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Add_Ovf_Un">
      <summary>Adds two unsigned integer values, performs an overflow check, and pushes the result onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.And">
      <summary>Computes the bitwise AND of two values and pushes the result onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Arglist">
      <summary>Returns an unmanaged pointer to the argument list of the current method.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Beq">
      <summary>Transfers control to a target instruction if two values are equal.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Beq_S">
      <summary>Transfers control to a target instruction (short form) if two values are equal.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bge">
      <summary>Transfers control to a target instruction if the first value is greater than or equal to the second value.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bge_S">
      <summary>Transfers control to a target instruction (short form) if the first value is greater than or equal to the second value.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bge_Un">
      <summary>Transfers control to a target instruction if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bge_Un_S">
      <summary>Transfers control to a target instruction (short form) if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bgt">
      <summary>Transfers control to a target instruction if the first value is greater than the second value.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bgt_S">
      <summary>Transfers control to a target instruction (short form) if the first value is greater than the second value.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bgt_Un">
      <summary>Transfers control to a target instruction if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bgt_Un_S">
      <summary>Transfers control to a target instruction (short form) if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ble">
      <summary>Transfers control to a target instruction if the first value is less than or equal to the second value.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ble_S">
      <summary>Transfers control to a target instruction (short form) if the first value is less than or equal to the second value.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ble_Un">
      <summary>Transfers control to a target instruction if the first value is less than or equal to the second value, when comparing unsigned integer values or unordered float values.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ble_Un_S">
      <summary>Transfers control to a target instruction (short form) if the first value is less than or equal to the second value, when comparing unsigned integer values or unordered float values.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Blt">
      <summary>Transfers control to a target instruction if the first value is less than the second value.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Blt_S">
      <summary>Transfers control to a target instruction (short form) if the first value is less than the second value.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Blt_Un">
      <summary>Transfers control to a target instruction if the first value is less than the second value, when comparing unsigned integer values or unordered float values.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Blt_Un_S">
      <summary>Transfers control to a target instruction (short form) if the first value is less than the second value, when comparing unsigned integer values or unordered float values.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bne_Un">
      <summary>Transfers control to a target instruction when two unsigned integer values or unordered float values are not equal.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bne_Un_S">
      <summary>Transfers control to a target instruction (short form) when two unsigned integer values or unordered float values are not equal.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Box">
      <summary>Converts a value type to an object reference (type <see langword="O" />).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Br">
      <summary>Unconditionally transfers control to a target instruction.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Br_S">
      <summary>Unconditionally transfers control to a target instruction (short form).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Break">
      <summary>Signals the Common Language Infrastructure (CLI) to inform the debugger that a break point has been tripped.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Brfalse">
      <summary>Transfers control to a target instruction if <paramref name="value" /> is <see langword="false" />, a null reference (<see langword="Nothing" /> in Visual Basic), or zero.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Brfalse_S">
      <summary>Transfers control to a target instruction if <paramref name="value" /> is <see langword="false" />, a null reference, or zero.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Brtrue">
      <summary>Transfers control to a target instruction if <paramref name="value" /> is <see langword="true" />, not null, or non-zero.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Brtrue_S">
      <summary>Transfers control to a target instruction (short form) if <paramref name="value" /> is <see langword="true" />, not null, or non-zero.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Call">
      <summary>Calls the method indicated by the passed method descriptor.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Calli">
      <summary>Calls the method indicated on the evaluation stack (as a pointer to an entry point) with arguments described by a calling convention.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Callvirt">
      <summary>Calls a late-bound method on an object, pushing the return value onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Castclass">
      <summary>Attempts to cast an object passed by reference to the specified class.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ceq">
      <summary>Compares two values. If they are equal, the integer value 1 <see langword="(int32" />) is pushed onto the evaluation stack; otherwise 0 (<see langword="int32" />) is pushed onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Cgt">
      <summary>Compares two values. If the first value is greater than the second, the integer value 1 <see langword="(int32" />) is pushed onto the evaluation stack; otherwise 0 (<see langword="int32" />) is pushed onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Cgt_Un">
      <summary>Compares two unsigned or unordered values. If the first value is greater than the second, the integer value 1 <see langword="(int32" />) is pushed onto the evaluation stack; otherwise 0 (<see langword="int32" />) is pushed onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ckfinite">
      <summary>Throws <see cref="T:System.ArithmeticException" /> if value is not a finite number.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Clt">
      <summary>Compares two values. If the first value is less than the second, the integer value 1 <see langword="(int32" />) is pushed onto the evaluation stack; otherwise 0 (<see langword="int32" />) is pushed onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Clt_Un">
      <summary>Compares the unsigned or unordered values <paramref name="value1" /> and <paramref name="value2" />. If <paramref name="value1" /> is less than <paramref name="value2" />, then the integer value 1 <see langword="(int32" />) is pushed onto the evaluation stack; otherwise 0 (<see langword="int32" />) is pushed onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Constrained">
      <summary>Constrains the type on which a virtual method call is made.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_I">
      <summary>Converts the value on top of the evaluation stack to <see langword="native int" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_I1">
      <summary>Converts the value on top of the evaluation stack to <see langword="int8" />, then extends (pads) it to <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_I2">
      <summary>Converts the value on top of the evaluation stack to <see langword="int16" />, then extends (pads) it to <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_I4">
      <summary>Converts the value on top of the evaluation stack to <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_I8">
      <summary>Converts the value on top of the evaluation stack to <see langword="int64" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I">
      <summary>Converts the signed value on top of the evaluation stack to signed <see langword="native int" />, throwing <see cref="T:System.OverflowException" /> on overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un">
      <summary>Converts the unsigned value on top of the evaluation stack to signed <see langword="native int" />, throwing <see cref="T:System.OverflowException" /> on overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1">
      <summary>Converts the signed value on top of the evaluation stack to signed <see langword="int8" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un">
      <summary>Converts the unsigned value on top of the evaluation stack to signed <see langword="int8" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2">
      <summary>Converts the signed value on top of the evaluation stack to signed <see langword="int16" /> and extending it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un">
      <summary>Converts the unsigned value on top of the evaluation stack to signed <see langword="int16" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4">
      <summary>Converts the signed value on top of the evaluation stack to signed <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un">
      <summary>Converts the unsigned value on top of the evaluation stack to signed <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8">
      <summary>Converts the signed value on top of the evaluation stack to signed <see langword="int64" />, throwing <see cref="T:System.OverflowException" /> on overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un">
      <summary>Converts the unsigned value on top of the evaluation stack to signed <see langword="int64" />, throwing <see cref="T:System.OverflowException" /> on overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U">
      <summary>Converts the signed value on top of the evaluation stack to <see langword="unsigned native int" />, throwing <see cref="T:System.OverflowException" /> on overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U_Un">
      <summary>Converts the unsigned value on top of the evaluation stack to <see langword="unsigned native int" />, throwing <see cref="T:System.OverflowException" /> on overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1">
      <summary>Converts the signed value on top of the evaluation stack to <see langword="unsigned int8" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1_Un">
      <summary>Converts the unsigned value on top of the evaluation stack to <see langword="unsigned int8" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2">
      <summary>Converts the signed value on top of the evaluation stack to <see langword="unsigned int16" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2_Un">
      <summary>Converts the unsigned value on top of the evaluation stack to <see langword="unsigned int16" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4">
      <summary>Converts the signed value on top of the evaluation stack to <see langword="unsigned int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4_Un">
      <summary>Converts the unsigned value on top of the evaluation stack to <see langword="unsigned int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8">
      <summary>Converts the signed value on top of the evaluation stack to <see langword="unsigned int64" />, throwing <see cref="T:System.OverflowException" /> on overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8_Un">
      <summary>Converts the unsigned value on top of the evaluation stack to <see langword="unsigned int64" />, throwing <see cref="T:System.OverflowException" /> on overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_R_Un">
      <summary>Converts the unsigned integer value on top of the evaluation stack to <see langword="float32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_R4">
      <summary>Converts the value on top of the evaluation stack to <see langword="float32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_R8">
      <summary>Converts the value on top of the evaluation stack to <see langword="float64" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_U">
      <summary>Converts the value on top of the evaluation stack to <see langword="unsigned native int" />, and extends it to <see langword="native int" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_U1">
      <summary>Converts the value on top of the evaluation stack to <see langword="unsigned int8" />, and extends it to <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_U2">
      <summary>Converts the value on top of the evaluation stack to <see langword="unsigned int16" />, and extends it to <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_U4">
      <summary>Converts the value on top of the evaluation stack to <see langword="unsigned int32" />, and extends it to <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_U8">
      <summary>Converts the value on top of the evaluation stack to <see langword="unsigned int64" />, and extends it to <see langword="int64" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Cpblk">
      <summary>Copies a specified number bytes from a source address to a destination address.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Cpobj">
      <summary>Copies the value type located at the address of an object (type <see langword="&amp;" />, <see langword="*" /> or <see langword="native int" />) to the address of the destination object (type <see langword="&amp;" />, <see langword="*" /> or <see langword="native int" />).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Div">
      <summary>Divides two values and pushes the result as a floating-point (type <see langword="F" />) or quotient (type <see langword="int32" />) onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Div_Un">
      <summary>Divides two unsigned integer values and pushes the result (<see langword="int32" />) onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Dup">
      <summary>Copies the current topmost value on the evaluation stack, and then pushes the copy onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Endfilter">
      <summary>Transfers control from the <see langword="filter" /> clause of an exception back to the Common Language Infrastructure (CLI) exception handler.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Endfinally">
      <summary>Transfers control from the <see langword="fault" /> or <see langword="finally" /> clause of an exception block back to the Common Language Infrastructure (CLI) exception handler.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Initblk">
      <summary>Initializes a specified block of memory at a specific address to a given size and initial value.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Initobj">
      <summary>Initializes each field of the value type at a specified address to a null reference or a 0 of the appropriate primitive type.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Isinst">
      <summary>Tests whether an object reference (type <see langword="O" />) is an instance of a particular class.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Jmp">
      <summary>Exits current method and jumps to specified method.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg">
      <summary>Loads an argument (referenced by a specified index value) onto the stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg_0">
      <summary>Loads the argument at index 0 onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg_1">
      <summary>Loads the argument at index 1 onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg_2">
      <summary>Loads the argument at index 2 onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg_3">
      <summary>Loads the argument at index 3 onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg_S">
      <summary>Loads the argument (referenced by a specified short form index) onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarga">
      <summary>Load an argument address onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarga_S">
      <summary>Load an argument address, in short form, onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4">
      <summary>Pushes a supplied value of type <see langword="int32" /> onto the evaluation stack as an <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_0">
      <summary>Pushes the integer value of 0 onto the evaluation stack as an <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_1">
      <summary>Pushes the integer value of 1 onto the evaluation stack as an <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_2">
      <summary>Pushes the integer value of 2 onto the evaluation stack as an <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_3">
      <summary>Pushes the integer value of 3 onto the evaluation stack as an <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_4">
      <summary>Pushes the integer value of 4 onto the evaluation stack as an <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_5">
      <summary>Pushes the integer value of 5 onto the evaluation stack as an <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_6">
      <summary>Pushes the integer value of 6 onto the evaluation stack as an <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_7">
      <summary>Pushes the integer value of 7 onto the evaluation stack as an <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_8">
      <summary>Pushes the integer value of 8 onto the evaluation stack as an <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_M1">
      <summary>Pushes the integer value of -1 onto the evaluation stack as an <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_S">
      <summary>Pushes the supplied <see langword="int8" /> value onto the evaluation stack as an <see langword="int32" />, short form.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I8">
      <summary>Pushes a supplied value of type <see langword="int64" /> onto the evaluation stack as an <see langword="int64" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_R4">
      <summary>Pushes a supplied value of type <see langword="float32" /> onto the evaluation stack as type <see langword="F" /> (float).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_R8">
      <summary>Pushes a supplied value of type <see langword="float64" /> onto the evaluation stack as type <see langword="F" /> (float).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem">
      <summary>Loads the element at a specified array index onto the top of the evaluation stack as the type specified in the instruction.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_I">
      <summary>Loads the element with type <see langword="native int" /> at a specified array index onto the top of the evaluation stack as a <see langword="native int" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_I1">
      <summary>Loads the element with type <see langword="int8" /> at a specified array index onto the top of the evaluation stack as an <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_I2">
      <summary>Loads the element with type <see langword="int16" /> at a specified array index onto the top of the evaluation stack as an <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_I4">
      <summary>Loads the element with type <see langword="int32" /> at a specified array index onto the top of the evaluation stack as an <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_I8">
      <summary>Loads the element with type <see langword="int64" /> at a specified array index onto the top of the evaluation stack as an <see langword="int64" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_R4">
      <summary>Loads the element with type <see langword="float32" /> at a specified array index onto the top of the evaluation stack as type <see langword="F" /> (float).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_R8">
      <summary>Loads the element with type <see langword="float64" /> at a specified array index onto the top of the evaluation stack as type <see langword="F" /> (float).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_Ref">
      <summary>Loads the element containing an object reference at a specified array index onto the top of the evaluation stack as type <see langword="O" /> (object reference).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_U1">
      <summary>Loads the element with type <see langword="unsigned int8" /> at a specified array index onto the top of the evaluation stack as an <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_U2">
      <summary>Loads the element with type <see langword="unsigned int16" /> at a specified array index onto the top of the evaluation stack as an <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_U4">
      <summary>Loads the element with type <see langword="unsigned int32" /> at a specified array index onto the top of the evaluation stack as an <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelema">
      <summary>Loads the address of the array element at a specified array index onto the top of the evaluation stack as type <see langword="&amp;" /> (managed pointer).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldfld">
      <summary>Finds the value of a field in the object whose reference is currently on the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldflda">
      <summary>Finds the address of a field in the object whose reference is currently on the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldftn">
      <summary>Pushes an unmanaged pointer (type <see langword="native int" />) to the native code implementing a specific method onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_I">
      <summary>Loads a value of type <see langword="native int" /> as a <see langword="native int" /> onto the evaluation stack indirectly.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_I1">
      <summary>Loads a value of type <see langword="int8" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_I2">
      <summary>Loads a value of type <see langword="int16" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_I4">
      <summary>Loads a value of type <see langword="int32" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_I8">
      <summary>Loads a value of type <see langword="int64" /> as an <see langword="int64" /> onto the evaluation stack indirectly.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_R4">
      <summary>Loads a value of type <see langword="float32" /> as a type <see langword="F" /> (float) onto the evaluation stack indirectly.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_R8">
      <summary>Loads a value of type <see langword="float64" /> as a type <see langword="F" /> (float) onto the evaluation stack indirectly.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_Ref">
      <summary>Loads an object reference as a type <see langword="O" /> (object reference) onto the evaluation stack indirectly.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_U1">
      <summary>Loads a value of type <see langword="unsigned int8" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_U2">
      <summary>Loads a value of type <see langword="unsigned int16" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_U4">
      <summary>Loads a value of type <see langword="unsigned int32" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldlen">
      <summary>Pushes the number of elements of a zero-based, one-dimensional array onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc">
      <summary>Loads the local variable at a specific index onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc_0">
      <summary>Loads the local variable at index 0 onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc_1">
      <summary>Loads the local variable at index 1 onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc_2">
      <summary>Loads the local variable at index 2 onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc_3">
      <summary>Loads the local variable at index 3 onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc_S">
      <summary>Loads the local variable at a specific index onto the evaluation stack, short form.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloca">
      <summary>Loads the address of the local variable at a specific index onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloca_S">
      <summary>Loads the address of the local variable at a specific index onto the evaluation stack, short form.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldnull">
      <summary>Pushes a null reference (type <see langword="O" />) onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldobj">
      <summary>Copies the value type object pointed to by an address to the top of the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldsfld">
      <summary>Pushes the value of a static field onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldsflda">
      <summary>Pushes the address of a static field onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldstr">
      <summary>Pushes a new object reference to a string literal stored in the metadata.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldtoken">
      <summary>Converts a metadata token to its runtime representation, pushing it onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldvirtftn">
      <summary>Pushes an unmanaged pointer (type <see langword="native int" />) to the native code implementing a particular virtual method associated with a specified object onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Leave">
      <summary>Exits a protected region of code, unconditionally transferring control to a specific target instruction.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Leave_S">
      <summary>Exits a protected region of code, unconditionally transferring control to a target instruction (short form).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Localloc">
      <summary>Allocates a certain number of bytes from the local dynamic memory pool and pushes the address (a transient pointer, type <see langword="*" />) of the first allocated byte onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Mkrefany">
      <summary>Pushes a typed reference to an instance of a specific type onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Mul">
      <summary>Multiplies two values and pushes the result on the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Mul_Ovf">
      <summary>Multiplies two integer values, performs an overflow check, and pushes the result onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Mul_Ovf_Un">
      <summary>Multiplies two unsigned integer values, performs an overflow check, and pushes the result onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Neg">
      <summary>Negates a value and pushes the result onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Newarr">
      <summary>Pushes an object reference to a new zero-based, one-dimensional array whose elements are of a specific type onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Newobj">
      <summary>Creates a new object or a new instance of a value type, pushing an object reference (type <see langword="O" />) onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Nop">
      <summary>Fills space if opcodes are patched. No meaningful operation is performed although a processing cycle can be consumed.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Not">
      <summary>Computes the bitwise complement of the integer value on top of the stack and pushes the result onto the evaluation stack as the same type.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Or">
      <summary>Compute the bitwise complement of the two integer values on top of the stack and pushes the result onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Pop">
      <summary>Removes the value currently on top of the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix1">
      <summary>This is a reserved instruction.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix2">
      <summary>This is a reserved instruction.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix3">
      <summary>This is a reserved instruction.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix4">
      <summary>This is a reserved instruction.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix5">
      <summary>This is a reserved instruction.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix6">
      <summary>This is a reserved instruction.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix7">
      <summary>This is a reserved instruction.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefixref">
      <summary>This is a reserved instruction.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Readonly">
      <summary>Specifies that the subsequent array address operation performs no type check at run time, and that it returns a managed pointer whose mutability is restricted.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Refanytype">
      <summary>Retrieves the type token embedded in a typed reference.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Refanyval">
      <summary>Retrieves the address (type <see langword="&amp;" />) embedded in a typed reference.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Rem">
      <summary>Divides two values and pushes the remainder onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Rem_Un">
      <summary>Divides two unsigned values and pushes the remainder onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ret">
      <summary>Returns from the current method, pushing a return value (if present) from the callee's evaluation stack onto the caller's evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Rethrow">
      <summary>Rethrows the current exception.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Shl">
      <summary>Shifts an integer value to the left (in zeroes) by a specified number of bits, pushing the result onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Shr">
      <summary>Shifts an integer value (in sign) to the right by a specified number of bits, pushing the result onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Shr_Un">
      <summary>Shifts an unsigned integer value (in zeroes) to the right by a specified number of bits, pushing the result onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Sizeof">
      <summary>Pushes the size, in bytes, of a supplied value type onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Starg">
      <summary>Stores the value on top of the evaluation stack in the argument slot at a specified index.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Starg_S">
      <summary>Stores the value on top of the evaluation stack in the argument slot at a specified index, short form.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem">
      <summary>Replaces the array element at a given index with the value on the evaluation stack, whose type is specified in the instruction.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_I">
      <summary>Replaces the array element at a given index with the <see langword="native int" /> value on the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_I1">
      <summary>Replaces the array element at a given index with the <see langword="int8" /> value on the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_I2">
      <summary>Replaces the array element at a given index with the <see langword="int16" /> value on the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_I4">
      <summary>Replaces the array element at a given index with the <see langword="int32" /> value on the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_I8">
      <summary>Replaces the array element at a given index with the <see langword="int64" /> value on the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_R4">
      <summary>Replaces the array element at a given index with the <see langword="float32" /> value on the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_R8">
      <summary>Replaces the array element at a given index with the <see langword="float64" /> value on the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_Ref">
      <summary>Replaces the array element at a given index with the object ref value (type <see langword="O" />) on the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stfld">
      <summary>Replaces the value stored in the field of an object reference or pointer with a new value.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_I">
      <summary>Stores a value of type <see langword="native int" /> at a supplied address.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_I1">
      <summary>Stores a value of type <see langword="int8" /> at a supplied address.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_I2">
      <summary>Stores a value of type <see langword="int16" /> at a supplied address.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_I4">
      <summary>Stores a value of type <see langword="int32" /> at a supplied address.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_I8">
      <summary>Stores a value of type <see langword="int64" /> at a supplied address.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_R4">
      <summary>Stores a value of type <see langword="float32" /> at a supplied address.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_R8">
      <summary>Stores a value of type <see langword="float64" /> at a supplied address.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_Ref">
      <summary>Stores a object reference value at a supplied address.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc">
      <summary>Pops the current value from the top of the evaluation stack and stores it in a the local variable list at a specified index.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc_0">
      <summary>Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 0.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc_1">
      <summary>Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 1.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc_2">
      <summary>Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 2.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc_3">
      <summary>Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 3.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc_S">
      <summary>Pops the current value from the top of the evaluation stack and stores it in a the local variable list at <paramref name="index" /> (short form).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stobj">
      <summary>Copies a value of a specified type from the evaluation stack into a supplied memory address.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stsfld">
      <summary>Replaces the value of a static field with a value from the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Sub">
      <summary>Subtracts one value from another and pushes the result onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Sub_Ovf">
      <summary>Subtracts one integer value from another, performs an overflow check, and pushes the result onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Sub_Ovf_Un">
      <summary>Subtracts one unsigned integer value from another, performs an overflow check, and pushes the result onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Switch">
      <summary>Implements a jump table.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Tailcall">
      <summary>Performs a postfixed method call instruction such that the current method's stack frame is removed before the actual call instruction is executed.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Throw">
      <summary>Throws the exception object currently on the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Unaligned">
      <summary>Indicates that an address currently atop the evaluation stack might not be aligned to the natural size of the immediately following <see langword="ldind" />, <see langword="stind" />, <see langword="ldfld" />, <see langword="stfld" />, <see langword="ldobj" />, <see langword="stobj" />, <see langword="initblk" />, or <see langword="cpblk" /> instruction.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Unbox">
      <summary>Converts the boxed representation of a value type to its unboxed form.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Unbox_Any">
      <summary>Converts the boxed representation of a type specified in the instruction to its unboxed form.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Volatile">
      <summary>Specifies that an address currently atop the evaluation stack might be volatile, and the results of reading that location cannot be cached or that multiple stores to that location cannot be suppressed.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Xor">
      <summary>Computes the bitwise XOR of the top two values on the evaluation stack, pushing the result onto the evaluation stack.</summary>
    </member>
    <member name="M:System.Reflection.Emit.OpCodes.TakesSingleByteArgument(System.Reflection.Emit.OpCode)">
      <summary>Returns true or false if the supplied opcode takes a single byte argument.</summary>
      <param name="inst">An instance of an Opcode object.</param>
      <returns>
        <see langword="true" /> or <see langword="false" />.</returns>
    </member>
    <member name="T:System.Reflection.Emit.OpCodeType">
      <summary>Describes the types of the Microsoft intermediate language (MSIL) instructions.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Annotation">
      <summary>This enumerator value is reserved and should not be used.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Macro">
      <summary>These are Microsoft intermediate language (MSIL) instructions that are used as a synonym for other MSIL instructions. For example, <see langword="ldarg.0" /> represents the <see langword="ldarg" /> instruction with an argument of 0.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Nternal">
      <summary>Describes a reserved Microsoft intermediate language (MSIL) instruction.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Objmodel">
      <summary>Describes a Microsoft intermediate language (MSIL) instruction that applies to objects.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Prefix">
      <summary>Describes a prefix instruction that modifies the behavior of the following instruction.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Primitive">
      <summary>Describes a built-in instruction.</summary>
    </member>
    <member name="T:System.Reflection.Emit.OperandType">
      <summary>Describes the operand type of Microsoft intermediate language (MSIL) instruction.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineBrTarget">
      <summary>The operand is a 32-bit integer branch target.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineField">
      <summary>The operand is a 32-bit metadata token.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineI">
      <summary>The operand is a 32-bit integer.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineI8">
      <summary>The operand is a 64-bit integer.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineMethod">
      <summary>The operand is a 32-bit metadata token.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineNone">
      <summary>No operand.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlinePhi">
      <summary>The operand is reserved and should not be used.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineR">
      <summary>The operand is a 64-bit IEEE floating point number.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineSig">
      <summary>The operand is a 32-bit metadata signature token.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineString">
      <summary>The operand is a 32-bit metadata string token.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineSwitch">
      <summary>The operand is the 32-bit integer argument to a switch instruction.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineTok">
      <summary>The operand is a <see langword="FieldRef" />, <see langword="MethodRef" />, or <see langword="TypeRef" /> token.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineType">
      <summary>The operand is a 32-bit metadata token.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineVar">
      <summary>The operand is 16-bit integer containing the ordinal of a local variable or an argument.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.ShortInlineBrTarget">
      <summary>The operand is an 8-bit integer branch target.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.ShortInlineI">
      <summary>The operand is an 8-bit integer.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.ShortInlineR">
      <summary>The operand is a 32-bit IEEE floating point number.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.ShortInlineVar">
      <summary>The operand is an 8-bit integer containing the ordinal of a local variable or an argumenta.</summary>
    </member>
    <member name="T:System.Reflection.Emit.PackingSize">
      <summary>Specifies one of two factors that determine the memory alignment of fields when a type is marshaled.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size1">
      <summary>The packing size is 1 byte.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size128">
      <summary>The packing size is 128 bytes.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size16">
      <summary>The packing size is 16 bytes.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size2">
      <summary>The packing size is 2 bytes.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size32">
      <summary>The packing size is 32 bytes.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size4">
      <summary>The packing size is 4 bytes.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size64">
      <summary>The packing size is 64 bytes.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size8">
      <summary>The packing size is 8 bytes.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Unspecified">
      <summary>The packing size is not specified.</summary>
    </member>
    <member name="T:System.Reflection.Emit.StackBehaviour">
      <summary>Describes how values are pushed onto a stack or popped off a stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pop0">
      <summary>No values are popped off the stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pop1">
      <summary>Pops one value off the stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pop1_pop1">
      <summary>Pops 1 value off the stack for the first operand, and 1 value of the stack for the second operand.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi">
      <summary>Pops a 32-bit integer off the stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_pop1">
      <summary>Pops a 32-bit integer off the stack for the first operand, and a value off the stack for the second operand.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popi">
      <summary>Pops a 32-bit integer off the stack for the first operand, and a 32-bit integer off the stack for the second operand.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popi_popi">
      <summary>Pops a 32-bit integer off the stack for the first operand, a 32-bit integer off the stack for the second operand, and a 32-bit integer off the stack for the third operand.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popi8">
      <summary>Pops a 32-bit integer off the stack for the first operand, and a 64-bit integer off the stack for the second operand.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popr4">
      <summary>Pops a 32-bit integer off the stack for the first operand, and a 32-bit floating point number off the stack for the second operand.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popr8">
      <summary>Pops a 32-bit integer off the stack for the first operand, and a 64-bit floating point number off the stack for the second operand.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref">
      <summary>Pops a reference off the stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_pop1">
      <summary>Pops a reference off the stack for the first operand, and a value off the stack for the second operand.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi">
      <summary>Pops a reference off the stack for the first operand, and a 32-bit integer off the stack for the second operand.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_pop1">
      <summary>Pops a reference off the stack for the first operand, a value off the stack for the second operand, and a 32-bit integer off the stack for the third operand.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popi">
      <summary>Pops a reference off the stack for the first operand, a value off the stack for the second operand, and a value off the stack for the third operand.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popi8">
      <summary>Pops a reference off the stack for the first operand, a value off the stack for the second operand, and a 64-bit integer off the stack for the third operand.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popr4">
      <summary>Pops a reference off the stack for the first operand, a value off the stack for the second operand, and a 32-bit integer off the stack for the third operand.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popr8">
      <summary>Pops a reference off the stack for the first operand, a value off the stack for the second operand, and a 64-bit floating point number off the stack for the third operand.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popref">
      <summary>Pops a reference off the stack for the first operand, a value off the stack for the second operand, and a reference off the stack for the third operand.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Push0">
      <summary>No values are pushed onto the stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Push1">
      <summary>Pushes one value onto the stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Push1_push1">
      <summary>Pushes 1 value onto the stack for the first operand, and 1 value onto the stack for the second operand.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushi">
      <summary>Pushes a 32-bit integer onto the stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushi8">
      <summary>Pushes a 64-bit integer onto the stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushr4">
      <summary>Pushes a 32-bit floating point number onto the stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushr8">
      <summary>Pushes a 64-bit floating point number onto the stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushref">
      <summary>Pushes a reference onto the stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Varpop">
      <summary>Pops a variable off the stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Varpush">
      <summary>Pushes a variable onto the stack.</summary>
    </member>
    <member name="T:System.Reflection.ProcessorArchitecture">
      <summary>Identifies the processor and bits-per-word of the platform targeted by an executable.</summary>
    </member>
    <member name="F:System.Reflection.ProcessorArchitecture.Amd64">
      <summary>A 64-bit processor based on the x64 architecture.</summary>
    </member>
    <member name="F:System.Reflection.ProcessorArchitecture.Arm">
      <summary>An ARM processor.</summary>
    </member>
    <member name="F:System.Reflection.ProcessorArchitecture.IA64">
      <summary>A 64-bit Intel Itanium processor only.</summary>
    </member>
    <member name="F:System.Reflection.ProcessorArchitecture.MSIL">
      <summary>Neutral with respect to processor and bits-per-word.</summary>
    </member>
    <member name="F:System.Reflection.ProcessorArchitecture.None">
      <summary>An unknown or unspecified combination of processor and bits-per-word.</summary>
    </member>
    <member name="F:System.Reflection.ProcessorArchitecture.X86">
      <summary>A 32-bit Intel processor, either native or in the Windows on Windows environment on a 64-bit platform (WOW64).</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.AccessedThroughPropertyAttribute">
      <summary>Specifies the name of the property that accesses the attributed field.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AccessedThroughPropertyAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see langword="AccessedThroughPropertyAttribute" /> class with the name of the property used to access the attributed field.</summary>
      <param name="propertyName">The name of the property used to access the attributed field.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.AccessedThroughPropertyAttribute.PropertyName">
      <summary>Gets the name of the property used to access the attributed field.</summary>
      <returns>The name of the property used to access the attributed field.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.AsyncStateMachineAttribute">
      <summary>Indicates whether a method is marked with either the Async or async modifier.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncStateMachineAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.AsyncStateMachineAttribute" /> class.</summary>
      <param name="stateMachineType">The type object for the underlying state machine type that's used to implement a state machine method.</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallerFilePathAttribute">
      <summary>Allows you to obtain the full path of the source file that contains the caller. This is the file path at the time of compile.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallerFilePathAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CallerFilePathAttribute" /> class.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallerLineNumberAttribute">
      <summary>Allows you to obtain the line number in the source file at which the method is called.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallerLineNumberAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CallerLineNumberAttribute" /> class.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallerMemberNameAttribute">
      <summary>Allows you to obtain the method or property name of the caller to the method.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallerMemberNameAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute" /> class.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.CompilationRelaxationsAttribute">
      <summary>Controls the strictness of the code generated by the common language runtime's just-in-time (JIT) compiler.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CompilationRelaxationsAttribute.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CompilationRelaxationsAttribute" /> class with the specified compilation relaxations.</summary>
      <param name="relaxations">The compilation relaxations.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.CompilationRelaxationsAttribute.#ctor(System.Runtime.CompilerServices.CompilationRelaxations)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CompilationRelaxationsAttribute" /> class with the specified <see cref="T:System.Runtime.CompilerServices.CompilationRelaxations" /> value.</summary>
      <param name="relaxations">One of the <see cref="T:System.Runtime.CompilerServices.CompilationRelaxations" /> values.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.CompilationRelaxationsAttribute.CompilationRelaxations">
      <summary>Gets the compilation relaxations specified when the current object was constructed.</summary>
      <returns>The compilation relaxations specified when the current object was constructed.  
  
 Use the <see cref="T:System.Runtime.CompilerServices.CompilationRelaxations" /> enumeration with the <see cref="P:System.Runtime.CompilerServices.CompilationRelaxationsAttribute.CompilationRelaxations" /> property.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CompilerGeneratedAttribute">
      <summary>Distinguishes a compiler-generated element from a user-generated element. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CompilerGeneratedAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CompilerGeneratedAttribute" /> class.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConditionalWeakTable`2">
      <summary>Enables compilers to dynamically attach object fields to managed objects.</summary>
      <typeparam name="TKey">The reference type to which the field is attached.</typeparam>
      <typeparam name="TValue">The field's type. This must be a reference type.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.ConditionalWeakTable`2" /> class.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Add(`0,`1)">
      <summary>Adds a key to the table.</summary>
      <param name="key">The key to add. <paramref name="key" /> represents the object to which the property is attached.</param>
      <param name="value">The key's property value.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> already exists.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.AddOrUpdate(`0,`1)">
      <summary>Adds the key and value if the key doesn't exist, or updates the existing key's value if it does exist.</summary>
      <param name="key">The key to add or update. May not be <see langword="null" />.</param>
      <param name="value">The value to associate with <paramref name="key" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Clear">
      <summary>Clears all the key/value pairs.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)">
      <summary>Atomically searches for a specified key in the table and returns the corresponding value. If the key does not exist in the table, the method invokes the parameterless constructor of the class that represents the table's value to create a value that is bound to the specified key.</summary>
      <param name="key">The key to search for. <paramref name="key" /> represents the object to which the property is attached.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <exception cref="T:System.MissingMethodException">
        <block subset="none" type="note">
          <para>  
 In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.MissingMemberException" />, instead.</para>
        </block>  
  
 The class that represents the table's value does not define a parameterless constructor.</exception>
      <returns>The value that corresponds to <paramref name="key" />, if <paramref name="key" /> already exists in the table; otherwise, a new value created by the parameterless constructor of the class defined by the <paramref name="TValue" /> generic type parameter.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1}.CreateValueCallback)">
      <summary>Atomically searches for a specified key in the table and returns the corresponding value. If the key does not exist in the table, the method invokes a callback method to create a value that is bound to the specified key.</summary>
      <param name="key">The key to search for. <paramref name="key" /> represents the object to which the property is attached.</param>
      <param name="createValueCallback">A delegate to a method that can create a value for the given <paramref name="key" />. It has a single parameter of type <c>TKey</c>, and returns a value of type <c>TValue</c>.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> or <paramref name="createValueCallback" /> is <see langword="null" />.</exception>
      <returns>The value attached to <paramref name="key" />, if <paramref name="key" /> already exists in the table; otherwise, the new value returned by the <paramref name="createValueCallback" /> delegate.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Remove(`0)">
      <summary>Removes a key and its value from the table.</summary>
      <param name="key">The key to remove.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> if the key is found and removed; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator">
      <summary>Returns an enumerator that can be used to iterate through the <see cref="T:System.Runtime.CompilerServices.ConditionalWeakTable`2" /> table.</summary>
      <returns>An enumerator that can be used to iterate through the <see cref="T:System.Runtime.CompilerServices.ConditionalWeakTable`2" /> table.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that can be used to iterate through the <see cref="T:System.Runtime.CompilerServices.ConditionalWeakTable`2" /> table.</summary>
      <returns>An enumerator that can be used to iterate through the <see cref="T:System.Runtime.CompilerServices.ConditionalWeakTable`2" /> table.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)">
      <summary>Gets the value of the specified key.</summary>
      <param name="key">The key that represents an object with an attached property.</param>
      <param name="value">When this method returns, contains the attached property value. If <paramref name="key" /> is not found, <paramref name="value" /> contains the default value.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> if <paramref name="key" /> is found; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback">
      <summary>Represents a method that creates a non-default value to add as part of a key/value pair to a <see cref="T:System.Runtime.CompilerServices.ConditionalWeakTable`2" /> object.</summary>
      <param name="key">The key that belongs to the value to create.</param>
      <returns>An instance of a reference type that represents the value to attach to the specified key.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.ContractHelper">
      <summary>Provides methods that the binary rewriter uses to handle contract failures.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ContractHelper.RaiseContractFailedEvent(System.Diagnostics.Contracts.ContractFailureKind,System.String,System.String,System.Exception)">
      <summary>Used by the binary rewriter to activate the default failure behavior.</summary>
      <param name="failureKind">One of the enumeration values that specifies the type of failure.</param>
      <param name="userMessage">Additional user information.</param>
      <param name="conditionText">The description of the condition that caused the failure.</param>
      <param name="innerException">The inner exception that caused the current exception.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="failureKind" /> is not a valid <see cref="T:System.Diagnostics.Contracts.ContractFailureKind" /> value.</exception>
      <returns>A null reference (<see langword="Nothing" /> in Visual Basic) if the event was handled and should not trigger a failure; otherwise, returns the localized failure message.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ContractHelper.TriggerFailure(System.Diagnostics.Contracts.ContractFailureKind,System.String,System.String,System.String,System.Exception)">
      <summary>Triggers the default failure behavior.</summary>
      <param name="kind">One of the enumeration values that specifies the type of failure.</param>
      <param name="displayMessage">The message to display.</param>
      <param name="userMessage">Additional user information.</param>
      <param name="conditionText">The description of the condition that caused the failure.</param>
      <param name="innerException">The inner exception that caused the current exception.</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.CustomConstantAttribute">
      <summary>Defines a constant value that a compiler can persist for a field or method parameter.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CustomConstantAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CustomConstantAttribute" /> class.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.CustomConstantAttribute.Value">
      <summary>Gets the constant value stored by this attribute.</summary>
      <returns>The constant value stored by this attribute.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.DateTimeConstantAttribute">
      <summary>Persists an 8-byte <see cref="T:System.DateTime" /> constant for a field or parameter.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DateTimeConstantAttribute.#ctor(System.Int64)">
      <summary>Initializes a new instance of the <see langword="DateTimeConstantAttribute" /> class with the number of 100-nanosecond ticks that represent the date and time of this instance.</summary>
      <param name="ticks">The number of 100-nanosecond ticks that represent the date and time of this instance.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.DateTimeConstantAttribute.Value">
      <summary>Gets the number of 100-nanosecond ticks that represent the date and time of this instance.</summary>
      <returns>The number of 100-nanosecond ticks that represent the date and time of this instance.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.DecimalConstantAttribute">
      <summary>Stores the value of a <see cref="T:System.Decimal" /> constant in metadata. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DecimalConstantAttribute.#ctor(System.Byte,System.Byte,System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.DecimalConstantAttribute" /> class with the specified signed integer values.</summary>
      <param name="scale">The power of 10 scaling factor that indicates the number of digits to the right of the decimal point. Valid values are 0 through 28 inclusive.</param>
      <param name="sign">A value of 0 indicates a positive value, and a value of 1 indicates a negative value.</param>
      <param name="hi">The high 32 bits of the 96-bit <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" />.</param>
      <param name="mid">The middle 32 bits of the 96-bit <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" />.</param>
      <param name="low">The low 32 bits of the 96-bit <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" />.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.DecimalConstantAttribute.#ctor(System.Byte,System.Byte,System.UInt32,System.UInt32,System.UInt32)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.DecimalConstantAttribute" /> class with the specified unsigned integer values.</summary>
      <param name="scale">The power of 10 scaling factor that indicates the number of digits to the right of the decimal point. Valid values are 0 through 28 inclusive.</param>
      <param name="sign">A value of 0 indicates a positive value, and a value of 1 indicates a negative value.</param>
      <param name="hi">The high 32 bits of the 96-bit <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" />.</param>
      <param name="mid">The middle 32 bits of the 96-bit <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" />.</param>
      <param name="low">The low 32 bits of the 96-bit <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="scale" /> &gt; 28.</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value">
      <summary>Gets the decimal constant stored in this attribute.</summary>
      <returns>The decimal constant stored in this attribute.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.ExtensionAttribute">
      <summary>Indicates that a method is an extension method, or that a class or assembly contains extension methods.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ExtensionAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.ExtensionAttribute" /> class.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.FixedBufferAttribute">
      <summary>Indicates that a field should be treated as containing a fixed number of elements of the specified primitive type. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.FixedBufferAttribute.#ctor(System.Type,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.FixedBufferAttribute" /> class.</summary>
      <param name="elementType">The type of the elements contained in the buffer.</param>
      <param name="length">The number of elements in the buffer.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.FixedBufferAttribute.ElementType">
      <summary>Gets the type of the elements contained in the fixed buffer.</summary>
      <returns>The type of the elements.</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.FixedBufferAttribute.Length">
      <summary>Gets the number of elements in the fixed buffer.</summary>
      <returns>The number of elements in the fixed buffer.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.IndexerNameAttribute">
      <summary>Indicates the name by which an indexer is known in programming languages that do not support indexers directly.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IndexerNameAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.IndexerNameAttribute" /> class.</summary>
      <param name="indexerName">The name of the indexer, as shown to other languages.</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
      <summary>Specifies that types that are ordinarily visible only within the current assembly are visible to a specified assembly.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute" /> class with the name of the specified friend assembly.</summary>
      <param name="assemblyName">The name of a friend assembly.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.InternalsVisibleToAttribute.AllInternalsVisible">
      <summary>This property is not implemented.</summary>
      <returns>This property does not return a value.</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.InternalsVisibleToAttribute.AssemblyName">
      <summary>Gets the name of the friend assembly to which all types and type members that are marked with the <see langword="internal" /> keyword are to be made visible.</summary>
      <returns>A string that represents the name of the friend assembly.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.IsConst">
      <summary>Indicates that the modified type has a <see langword="const" /> modifier. This class cannot be inherited.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IsVolatile">
      <summary>Marks a field as volatile. This class cannot be inherited.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IteratorStateMachineAttribute">
      <summary>Indicates whether a method in Visual Basic is marked with the <see langword="Iterator" /> modifier.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IteratorStateMachineAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.IteratorStateMachineAttribute" /> class.</summary>
      <param name="stateMachineType">The type object for the underlying state machine type that's used to implement a state machine method.</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.MethodImplAttribute">
      <summary>Specifies the details of how a method is implemented. This class cannot be inherited.</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplAttribute.MethodCodeType">
      <summary>A <see cref="T:System.Runtime.CompilerServices.MethodCodeType" /> value indicating what kind of implementation is provided for this method.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.MethodImplAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.MethodImplAttribute" /> class.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.MethodImplAttribute.#ctor(System.Int16)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.MethodImplAttribute" /> class with the specified <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> value.</summary>
      <param name="value">A bitmask representing the desired <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> value which specifies properties of the attributed method.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.MethodImplAttribute.#ctor(System.Runtime.CompilerServices.MethodImplOptions)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.MethodImplAttribute" /> class with the specified <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> value.</summary>
      <param name="methodImplOptions">A <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> value specifying properties of the attributed method.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.MethodImplAttribute.Value">
      <summary>Gets the <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> value describing the attributed method.</summary>
      <returns>The <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> value describing the attributed method.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.MethodImplOptions">
      <summary>Specifies constants that define the details of how a method is implemented.</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining">
      <summary>The method should be inlined if possible.</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.AggressiveOptimization">
      <summary>The method contains a hot path and should be optimized.</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.ForwardRef">
      <summary>The method is declared, but its implementation is provided elsewhere.</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.InternalCall">
      <summary>The call is internal, that is, it calls a method that's implemented within the common language runtime.</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.NoInlining">
      <summary>The method cannot be inlined. Inlining is an optimization by which a method call is replaced with the method body.</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.NoOptimization">
      <summary>The method is not optimized by the just-in-time (JIT) compiler or by native code generation (see Ngen.exe) when debugging possible code generation problems.</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.PreserveSig">
      <summary>The method signature is exported exactly as declared.</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.Synchronized">
      <summary>The method can be executed by only one thread at a time. Static methods lock on the type, whereas instance methods lock on the instance. Only one thread can execute in any of the instance functions, and only one thread can execute in any of a class's static functions.</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.Unmanaged">
      <summary>The method is implemented in unmanaged code.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.ReferenceAssemblyAttribute">
      <summary>Identifies an assembly as a reference assembly, which contains metadata but no executable code.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReferenceAssemblyAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.ReferenceAssemblyAttribute" /> class.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReferenceAssemblyAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.ReferenceAssemblyAttribute" /> class by using the specified description.</summary>
      <param name="description">The description of the reference assembly.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReferenceAssemblyAttribute.Description">
      <summary>Gets the description of the reference assembly.</summary>
      <returns>The description of the reference assembly.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute">
      <summary>Specifies whether to wrap exceptions that do not derive from the <see cref="T:System.Exception" /> class with a <see cref="T:System.Runtime.CompilerServices.RuntimeWrappedException" /> object. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute" /> class.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.WrapNonExceptionThrows">
      <summary>Gets or sets a value that indicates whether to wrap exceptions that do not derive from the <see cref="T:System.Exception" /> class with a <see cref="T:System.Runtime.CompilerServices.RuntimeWrappedException" /> object.</summary>
      <returns>
        <see langword="true" /> if exceptions that do not derive from the <see cref="T:System.Exception" /> class should appear wrapped with a <see cref="T:System.Runtime.CompilerServices.RuntimeWrappedException" /> object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.RuntimeHelpers">
      <summary>Provides a set of static methods and properties that provide support for compilers. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.AllocateTypeAssociatedMemory(System.Type,System.Int32)">
      <summary>Allocates memory that's associated with the <paramref name="type" /> and is freed if and when the <see cref="T:System.Type" /> is unloaded.</summary>
      <param name="type">The type associated with the allocated memory.</param>
      <param name="size">The amount of memory to allocate, in bytes.</param>
      <returns>The allocated memory.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.EnsureSufficientExecutionStack">
      <summary>Ensures that the remaining stack space is large enough to execute the average .NET Framework function.</summary>
      <exception cref="T:System.InsufficientExecutionStackException">The available stack space is insufficient to execute the average .NET Framework function.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.Equals(System.Object,System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> instances are considered equal.</summary>
      <param name="o1">The first object to compare.</param>
      <param name="o2">The second object to compare.</param>
      <returns>
        <see langword="true" /> if the <paramref name="o1" /> parameter is the same instance as the <paramref name="o2" /> parameter, or if both are <see langword="null" />, or if <c>o1.Equals(o2)</c> returns <see langword="true" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.ExecuteCodeWithGuaranteedCleanup(System.Runtime.CompilerServices.RuntimeHelpers.TryCode,System.Runtime.CompilerServices.RuntimeHelpers.CleanupCode,System.Object)">
      <summary>Executes code using a <see cref="T:System.Delegate" /> while using another <see cref="T:System.Delegate" /> to execute additional code in case of an exception.</summary>
      <param name="code">A delegate to the code to try.</param>
      <param name="backoutCode">A delegate to the code to run if an exception occurs.</param>
      <param name="userData">The data to pass to <paramref name="code" /> and <paramref name="backoutCode" />.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(System.Object)">
      <summary>Serves as a hash function for a particular object, and is suitable for use in algorithms and data structures that use hash codes, such as a hash table.</summary>
      <param name="o">An object to retrieve the hash code for.</param>
      <returns>A hash code for the object identified by the <paramref name="o" /> parameter.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.GetObjectValue(System.Object)">
      <summary>Boxes a value type.</summary>
      <param name="obj">The value type to be boxed.</param>
      <returns>A boxed copy of <paramref name="obj" /> if it is a value class; otherwise, <paramref name="obj" /> itself.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.GetSubArray``1(``0[],System.Range)">
      <summary>Slices the specified array using the specified range.</summary>
      <param name="array">The array to slice.</param>
      <param name="range">An object that determines the portion of <paramref name="array" /> to include in the slice.</param>
      <typeparam name="T">The type of the elements in the array.</typeparam>
      <returns>The subarray defined by <paramref name="range" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.GetUninitializedObject(System.Type)">
      <summary>Returns an uninitialized instance of the system-provided type.</summary>
      <param name="type">A system-provided type.</param>
      <returns>An object representing the uninitialized system-provided type instance.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.InitializeArray(System.Array,System.RuntimeFieldHandle)">
      <summary>Provides a fast way to initialize an array from data that is stored in a module.</summary>
      <param name="array">The array to be initialized.</param>
      <param name="fldHandle">A field handle that specifies the location of the data used to initialize the array.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.IsReferenceOrContainsReferences``1">
      <summary>Returns a value that indicates whether the specified type is a reference type or a value type that contains references.</summary>
      <typeparam name="T">The type.</typeparam>
      <returns>
        <see langword="true" /> if the given type is reference type or value type that contains references; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.PrepareConstrainedRegions">
      <summary>Designates a body of code as a constrained execution region (CER).</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.PrepareConstrainedRegionsNoOP">
      <summary>Designates a body of code as a constrained execution region (CER) without performing any probing.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.PrepareContractedDelegate(System.Delegate)">
      <summary>Provides a way for applications to dynamically prepare <see cref="T:System.AppDomain" /> event delegates.</summary>
      <param name="d">The event delegate to prepare.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.PrepareDelegate(System.Delegate)">
      <summary>Indicates that the specified delegate should be prepared for inclusion in a constrained execution region (CER).</summary>
      <param name="d">The delegate type to prepare.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.PrepareMethod(System.RuntimeMethodHandle)">
      <summary>Prepares a method for inclusion in a constrained execution region (CER).</summary>
      <param name="method">A handle to the method to prepare.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.PrepareMethod(System.RuntimeMethodHandle,System.RuntimeTypeHandle[])">
      <summary>Prepares a method for inclusion in a constrained execution region (CER) with the specified instantiation.</summary>
      <param name="method">A handle to the method to prepare.</param>
      <param name="instantiation">The instantiation to pass to the method.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.ProbeForSufficientStack">
      <summary>Probes for a certain amount of stack space to ensure that a stack overflow cannot happen within a subsequent block of code (assuming that your code uses only a finite and moderate amount of stack space). We recommend that you use a constrained execution region (CER) instead of this method.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(System.RuntimeTypeHandle)">
      <summary>Ensures that the type initializer (also known as a static constructor) for the specified type has been run.</summary>
      <param name="type">A type handle that specifies the type for which a type initializer should be run.</param>
      <exception cref="T:System.TypeInitializationException">The type initializer throws an exception.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.RunModuleConstructor(System.ModuleHandle)">
      <summary>Runs a specified module constructor method.</summary>
      <param name="module">A handle that specifies the module constructor method to run.</param>
      <exception cref="T:System.TypeInitializationException">The module constructor throws an exception.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.TryEnsureSufficientExecutionStack">
      <summary>Tries to ensure there is sufficient stack to execute the average .NET Core library function.</summary>
      <returns>
        <see langword="true" /> if sufficient stack is present; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.RuntimeHelpers.OffsetToStringData">
      <summary>Gets the offset, in bytes, to the data in the given string.</summary>
      <returns>The byte offset, from the start of the <see cref="T:System.String" /> object to the first character in the string.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.StateMachineAttribute">
      <summary>Allows you to determine whether a method is a state machine method.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.StateMachineAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.StateMachineAttribute" /> class.</summary>
      <param name="stateMachineType">The type object for the underlying state machine type that was generated by the compiler to implement the state machine method.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.StateMachineAttribute.StateMachineType">
      <summary>Returns the type object for the underlying state machine type that was generated by the compiler to implement the state machine method.</summary>
      <returns>Gets the type object for the underlying state machine type that was generated by the compiler to implement the state machine method.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.TypeForwardedFromAttribute">
      <summary>Specifies a source <see cref="T:System.Type" /> in another assembly.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.TypeForwardedFromAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.TypeForwardedFromAttribute" /> class.</summary>
      <param name="assemblyFullName">The source <see cref="T:System.Type" /> in another assembly.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFullName" /> is <see langword="null" /> or empty.</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.TypeForwardedFromAttribute.AssemblyFullName">
      <summary>Gets the assembly-qualified name of the source type.</summary>
      <returns>The assembly-qualified name of the source type.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.TypeForwardedToAttribute">
      <summary>Specifies a destination <see cref="T:System.Type" /> in another assembly.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.TypeForwardedToAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.TypeForwardedToAttribute" /> class specifying a destination <see cref="T:System.Type" />.</summary>
      <param name="destination">The destination <see cref="T:System.Type" /> in another assembly.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.TypeForwardedToAttribute.Destination">
      <summary>Gets the destination <see cref="T:System.Type" /> in another assembly.</summary>
      <returns>The destination <see cref="T:System.Type" /> in another assembly.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.UnsafeValueTypeAttribute">
      <summary>Specifies that a type contains an unmanaged array that might potentially overflow. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.UnsafeValueTypeAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.UnsafeValueTypeAttribute" /> class.</summary>
    </member>
    <member name="T:System.Runtime.ExceptionServices.ExceptionDispatchInfo">
      <summary>Represents an exception whose state is captured at a certain point in code.</summary>
    </member>
    <member name="M:System.Runtime.ExceptionServices.ExceptionDispatchInfo.Capture(System.Exception)">
      <summary>Creates an <see cref="T:System.Runtime.ExceptionServices.ExceptionDispatchInfo" /> object that represents the specified exception at the current point in code.</summary>
      <param name="source">The exception whose state is captured, and which is represented by the returned object.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <returns>An object that represents the specified exception at the current point in code.</returns>
    </member>
    <member name="M:System.Runtime.ExceptionServices.ExceptionDispatchInfo.SetCurrentStackTrace(System.Exception)">
      <summary>Stores the current stack trace into the specified <see cref="T:System.Exception" /> instance.</summary>
      <param name="source">The unthrown exception.</param>
      <returns>The <paramref name="source" /> exception instance with the stack trace included.</returns>
    </member>
    <member name="M:System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw">
      <summary>Throws the exception that is represented by the current <see cref="T:System.Runtime.ExceptionServices.ExceptionDispatchInfo" /> object, after restoring the state that was saved when the exception was captured.</summary>
    </member>
    <member name="M:System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw(System.Exception)">
      <summary>Throws the source exception, maintaining the original Watson information and augmenting rather than replacing the original stack trace.</summary>
      <param name="source">The exception whose state is captured, then rethrown.</param>
    </member>
    <member name="P:System.Runtime.ExceptionServices.ExceptionDispatchInfo.SourceException">
      <summary>Gets the exception that is represented by the current instance.</summary>
      <returns>The exception that is represented by the current instance.</returns>
    </member>
    <member name="T:System.Runtime.GCLatencyMode">
      <summary>Adjusts the time that the garbage collector intrudes in your application.</summary>
    </member>
    <member name="F:System.Runtime.GCLatencyMode.Batch">
      <summary>Disables garbage collection concurrency and reclaims objects in a batch call. This is the most intrusive mode. This mode is designed for maximum throughput at the expense of responsiveness.</summary>
    </member>
    <member name="F:System.Runtime.GCLatencyMode.Interactive">
      <summary>Enables garbage collection concurrency and reclaims objects while the application is running. This is the default mode for garbage collection on a workstation and is less intrusive than <see cref="F:System.Runtime.GCLatencyMode.Batch" />. It balances responsiveness with throughput. This mode is equivalent to garbage collection on a workstation that is concurrent.</summary>
    </member>
    <member name="F:System.Runtime.GCLatencyMode.LowLatency">
      <summary>Enables garbage collection that is more conservative in reclaiming objects. Full collections occur only if the system is under memory pressure, whereas generation 0 and generation 1 collections might occur more frequently. This mode is not available for the server garbage collector.</summary>
    </member>
    <member name="F:System.Runtime.GCLatencyMode.NoGCRegion">
      <summary>Indicates that garbage collection is suspended while the app is executing a critical path.  
  
 <see cref="F:System.Runtime.GCLatencyMode.NoGCRegion" /> is a read-only value; that is, you cannot assign the <see cref="F:System.Runtime.GCLatencyMode.NoGCRegion" /> value to the <see cref="P:System.Runtime.GCSettings.LatencyMode" /> property. You specify the no GC region latency mode by calling the <see cref="Overload:System.GC.TryStartNoGCRegion" /> method and terminate it by calling the <see cref="M:System.GC.EndNoGCRegion" /> method.</summary>
    </member>
    <member name="F:System.Runtime.GCLatencyMode.SustainedLowLatency">
      <summary>Enables garbage collection that tries to minimize latency over an extended period. The collector tries to perform only generation 0, generation 1, and concurrent generation 2 collections. Full blocking collections may still occur if the system is under memory pressure.</summary>
    </member>
    <member name="T:System.Runtime.GCSettings">
      <summary>Specifies the garbage collection settings for the current process.</summary>
    </member>
    <member name="P:System.Runtime.GCSettings.IsServerGC">
      <summary>Gets a value that indicates whether server garbage collection is enabled.</summary>
      <returns>
        <see langword="true" /> if server garbage collection is enabled; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Runtime.GCSettings.LargeObjectHeapCompactionMode">
      <summary>Gets or sets a value that indicates whether a full blocking garbage collection compacts the large object heap (LOH).</summary>
      <returns>One of the enumeration values that indicates whether a full blocking garbage collection compacts the LOH.</returns>
    </member>
    <member name="P:System.Runtime.GCSettings.LatencyMode">
      <summary>Gets or sets the current latency mode for garbage collection.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">The <see cref="P:System.Runtime.GCSettings.LatencyMode" /> property is being set to an invalid value.  
  
 -or-  
  
 The <see cref="P:System.Runtime.GCSettings.LatencyMode" /> property cannot be set to <see cref="F:System.Runtime.GCLatencyMode.NoGCRegion" />.</exception>
      <returns>One of the enumeration values that specifies the latency mode.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ArrayWithOffset">
      <summary>Encapsulates an array and an offset within the specified array.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.#ctor(System.Object,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> structure.</summary>
      <param name="array">A managed array.</param>
      <param name="offset">The offset in bytes, of the element to be passed through platform invoke.</param>
      <exception cref="T:System.ArgumentException">The array is larger than 2 gigabytes (GB).</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.Equals(System.Object)">
      <summary>Indicates whether the specified object matches the current <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> object.</summary>
      <param name="obj">Object to compare with this instance.</param>
      <returns>
        <see langword="true" /> if the object matches this <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.Equals(System.Runtime.InteropServices.ArrayWithOffset)">
      <summary>Indicates whether the specified <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> object matches the current instance.</summary>
      <param name="obj">An <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> object to compare with this instance.</param>
      <returns>
        <see langword="true" /> if the specified <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> object matches the current instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.GetArray">
      <summary>Returns the managed array referenced by this <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />.</summary>
      <returns>The managed array this instance references.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.GetHashCode">
      <summary>Returns a hash code for this value type.</summary>
      <returns>The hash code for this instance.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.GetOffset">
      <summary>Returns the offset provided when this <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> was constructed.</summary>
      <returns>The offset for this instance.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.op_Equality(System.Runtime.InteropServices.ArrayWithOffset,System.Runtime.InteropServices.ArrayWithOffset)">
      <summary>Determines whether two specified <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> objects have the same value.</summary>
      <param name="a">An <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> object to compare with the <paramref name="b" /> parameter.</param>
      <param name="b">An <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> object to compare with the <paramref name="a" /> parameter.</param>
      <returns>
        <see langword="true" /> if the value of <paramref name="a" /> is the same as the value of <paramref name="b" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.op_Inequality(System.Runtime.InteropServices.ArrayWithOffset,System.Runtime.InteropServices.ArrayWithOffset)">
      <summary>Determines whether two specified <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> objects no not have the same value.</summary>
      <param name="a">An <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> object to compare with the <paramref name="b" /> parameter.</param>
      <param name="b">An <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> object to compare with the <paramref name="a" /> parameter.</param>
      <returns>
        <see langword="true" /> if the value of <paramref name="a" /> is not the same as the value of <paramref name="b" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.BestFitMappingAttribute">
      <summary>Controls whether Unicode characters are converted to the closest matching ANSI characters.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.BestFitMappingAttribute.ThrowOnUnmappableChar">
      <summary>Enables or disables the throwing of an exception on an unmappable Unicode character that is converted to an ANSI '?' character.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.BestFitMappingAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.BestFitMappingAttribute" /> class set to the value of the <see cref="P:System.Runtime.InteropServices.BestFitMappingAttribute.BestFitMapping" /> property.</summary>
      <param name="BestFitMapping">
        <see langword="true" /> to indicate that best-fit mapping is enabled; otherwise, <see langword="false" />. The default is <see langword="true" />.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.BestFitMappingAttribute.BestFitMapping">
      <summary>Gets the best-fit mapping behavior when converting Unicode characters to ANSI characters.</summary>
      <returns>
        <see langword="true" /> if best-fit mapping is enabled; otherwise, <see langword="false" />. The default is <see langword="true" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.BStrWrapper">
      <summary>Marshals data of type <see langword="VT_BSTR" /> from managed to unmanaged code. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.BStrWrapper.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.BStrWrapper" /> class with the specified <see cref="T:System.Object" /> object.</summary>
      <param name="value">The object to wrap and marshal as <see langword="VT_BSTR" />.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.BStrWrapper.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.BStrWrapper" /> class with the specified <see cref="T:System.String" /> object.</summary>
      <param name="value">The object to wrap and marshal as <see langword="VT_BSTR" />.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.BStrWrapper.WrappedObject">
      <summary>Gets the wrapped <see cref="T:System.String" /> object to marshal as type <see langword="VT_BSTR" />.</summary>
      <returns>The object that is wrapped by <see cref="T:System.Runtime.InteropServices.BStrWrapper" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.CallingConvention">
      <summary>Specifies the calling convention required to call methods implemented in unmanaged code.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.Cdecl">
      <summary>The caller cleans the stack. This enables calling functions with <see langword="varargs" />, which makes it appropriate to use for methods that accept a variable number of parameters, such as <see langword="Printf" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.FastCall">
      <summary>This calling convention is not supported.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.StdCall">
      <summary>The callee cleans the stack.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.ThisCall">
      <summary>The first parameter is the <see langword="this" /> pointer and is stored in register ECX. Other parameters are pushed on the stack. This calling convention is used to call methods on classes exported from an unmanaged DLL.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.Winapi">
      <summary>This member is not actually a calling convention, but instead uses the default platform calling convention. For example, on Windows x86 the default is <see cref="F:System.Runtime.InteropServices.CallingConvention.StdCall" /> and on Linux x86 it is <see cref="F:System.Runtime.InteropServices.CallingConvention.Cdecl" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CharSet">
      <summary>Dictates which character set marshaled strings should use.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CharSet.Ansi">
      <summary>Marshal strings as multiple-byte character strings: the system default Windows (ANSI) code page on Windows, and UTF-8 on Unix.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CharSet.Auto">
      <summary>Automatically marshal strings appropriately for the target operating system. See Charsets and marshaling for details. Although the common language runtime default is <see cref="F:System.Runtime.InteropServices.CharSet.Auto" />, languages may override this default. For example, by default C# and Visual Basic mark all methods and types as <see cref="F:System.Runtime.InteropServices.CharSet.Ansi" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CharSet.None">
      <summary>This value is obsolete and has the same behavior as <see cref="F:System.Runtime.InteropServices.CharSet.Ansi" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CharSet.Unicode">
      <summary>Marshal strings as Unicode 2-byte character strings.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
      <summary>Indicates the type of class interface to be generated for a class exposed to COM, if an interface is generated at all.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ClassInterfaceAttribute.#ctor(System.Int16)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> class with the specified <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> enumeration value.</summary>
      <param name="classInterfaceType">Describes the type of interface that is generated for a class.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ClassInterfaceAttribute.#ctor(System.Runtime.InteropServices.ClassInterfaceType)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> class with the specified <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> enumeration member.</summary>
      <param name="classInterfaceType">One of the <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> values that describes the type of interface that is generated for a class.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ClassInterfaceAttribute.Value">
      <summary>Gets the <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> value that describes which type of interface should be generated for the class.</summary>
      <returns>The <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> value that describes which type of interface should be generated for the class.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ClassInterfaceType">
      <summary>Identifies the type of class interface that is generated for a class.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch">
      <summary>
        <para>Indicates that the class only supports late binding for COM clients. A <see langword="dispinterface" /> for the class is automatically exposed to COM clients on request. The type library produced by Tlbexp.exe (Type Library Exporter) does not contain type information for the <see langword="dispinterface" /> in order to prevent clients from caching the DISPIDs of the interface. The <see langword="dispinterface" /> does not exhibit the versioning problems described in <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> because clients can only late-bind to the interface.</para>
        <para>This is the default setting for <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" />.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.AutoDual">
      <summary>Indicates that a dual class interface is automatically generated for the class and exposed to COM. Type information is produced for the class interface and published in the type library. Using <see langword="AutoDual" /> is strongly discouraged because of the versioning limitations described in <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.None">
      <summary>Indicates that no class interface is generated for the class. If no interfaces are implemented explicitly, the class can only provide late-bound access through the <see langword="IDispatch" /> interface. This is the recommended setting for <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" />. Using <see langword="ClassInterfaceType.None" /> is the only way to expose functionality through interfaces implemented explicitly by the class.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CoClassAttribute">
      <summary>Specifies the class identifier of a coclass imported from a type library.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CoClassAttribute.#ctor(System.Type)">
      <summary>Initializes new instance of the <see cref="T:System.Runtime.InteropServices.CoClassAttribute" /> with the class identifier of the original coclass.</summary>
      <param name="coClass">A <see cref="T:System.Type" /> that contains the class identifier of the original coclass.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.CoClassAttribute.CoClass">
      <summary>Gets the class identifier of the original coclass.</summary>
      <returns>A <see cref="T:System.Type" /> containing the class identifier of the original coclass.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComDefaultInterfaceAttribute">
      <summary>Specifies a default interface to expose to COM. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComDefaultInterfaceAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ComDefaultInterfaceAttribute" /> class with the specified <see cref="T:System.Type" /> object as the default interface exposed to COM.</summary>
      <param name="defaultInterface">A <see cref="T:System.Type" /> value indicating the default interface to expose to COM.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComDefaultInterfaceAttribute.Value">
      <summary>Gets the <see cref="T:System.Type" /> object that specifies the default interface to expose to COM.</summary>
      <returns>The <see cref="T:System.Type" /> object that specifies the default interface to expose to COM.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComEventInterfaceAttribute">
      <summary>Identifies the source interface and the class that implements the methods of the event interface that is generated when a coclass is imported from a COM type library.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComEventInterfaceAttribute.#ctor(System.Type,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ComEventInterfaceAttribute" /> class with the source interface and event provider class.</summary>
      <param name="SourceInterface">A <see cref="T:System.Type" /> that contains the original source interface from the type library. COM uses this interface to call back to the managed class.</param>
      <param name="EventProvider">A <see cref="T:System.Type" /> that contains the class that implements the methods of the event interface.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComEventInterfaceAttribute.EventProvider">
      <summary>Gets the class that implements the methods of the event interface.</summary>
      <returns>A <see cref="T:System.Type" /> that contains the class that implements the methods of the event interface.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComEventInterfaceAttribute.SourceInterface">
      <summary>Gets the original source interface from the type library.</summary>
      <returns>A <see cref="T:System.Type" /> containing the source interface.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComEventsHelper">
      <summary>Provides methods that enable .NET Framework delegates that handle events to be added and removed from COM objects.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComEventsHelper.Combine(System.Object,System.Guid,System.Int32,System.Delegate)">
      <summary>Adds a delegate to the invocation list of events originating from a COM object.</summary>
      <param name="rcw">The COM object that triggers the events the caller would like to respond to.</param>
      <param name="iid">The identifier of the source interface used by the COM object to trigger events.</param>
      <param name="dispid">The dispatch identifier of the method on the source interface.</param>
      <param name="d">The delegate to invoke when the COM event is fired.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComEventsHelper.Remove(System.Object,System.Guid,System.Int32,System.Delegate)">
      <summary>Removes a delegate from the invocation list of events originating from a COM object.</summary>
      <param name="rcw">The COM object the delegate is attached to.</param>
      <param name="iid">The identifier of the source interface used by the COM object to trigger events.</param>
      <param name="dispid">The dispatch identifier of the method on the source interface.</param>
      <param name="d">The delegate to remove from the invocation list.</param>
      <returns>The delegate that was removed from the invocation list.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.COMException">
      <summary>The exception that is thrown when an unrecognized HRESULT is returned from a COM method call.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.COMException" /> class with default values.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.COMException" /> class from serialization data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that supplies the contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.COMException" /> class with a specified message.</summary>
      <param name="message">The message that indicates the reason for the exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.COMException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.String,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.COMException" /> class with a specified message and error code.</summary>
      <param name="message">The message that indicates the reason the exception occurred.</param>
      <param name="errorCode">The error code (HRESULT) value associated with this exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.ToString">
      <summary>Converts the contents of the exception to a string.</summary>
      <returns>A string containing the <see cref="P:System.Exception.HResult" />, <see cref="P:System.Exception.Message" />, <see cref="P:System.Exception.InnerException" />, and <see cref="P:System.Exception.StackTrace" /> properties of the exception.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComImportAttribute">
      <summary>Indicates that the attributed type was previously defined in COM.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComImportAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ComImportAttribute" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComInterfaceType">
      <summary>Identifies how to expose an interface to COM.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual">
      <summary>Indicates that the interface is exposed to COM as a dual interface, which enables both early and late binding. <see cref="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual" /> is the default value.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIDispatch">
      <summary>Indicates that an interface is exposed to COM as a dispinterface, which enables late binding only.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIInspectable">
      <summary>Indicates that an interface is exposed to COM as a Windows Runtime interface.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown">
      <summary>Indicates that an interface is exposed to COM as an interface that is derived from IUnknown, which enables only early binding.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComMemberType">
      <summary>Describes the type of a COM member.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComMemberType.Method">
      <summary>The member is a normal method.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComMemberType.PropGet">
      <summary>The member gets properties.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComMemberType.PropSet">
      <summary>The member sets properties.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute">
      <summary>Identifies a list of interfaces that are exposed as COM event sources for the attributed class.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" /> class with the name of the event source interface.</summary>
      <param name="sourceInterfaces">A null-delimited list of fully qualified event source interface names.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" /> class with the type to use as a source interface.</summary>
      <param name="sourceInterface">The <see cref="T:System.Type" /> of the source interface.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" /> class with the types to use as source interfaces.</summary>
      <param name="sourceInterface1">The <see cref="T:System.Type" /> of the default source interface.</param>
      <param name="sourceInterface2">The <see cref="T:System.Type" /> of a source interface.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type,System.Type,System.Type)">
      <summary>Initializes a new instance of the <see langword="ComSourceInterfacesAttribute" /> class with the types to use as source interfaces.</summary>
      <param name="sourceInterface1">The <see cref="T:System.Type" /> of the default source interface.</param>
      <param name="sourceInterface2">The <see cref="T:System.Type" /> of a source interface.</param>
      <param name="sourceInterface3">The <see cref="T:System.Type" /> of a source interface.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type,System.Type,System.Type,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" /> class with the types to use as source interfaces.</summary>
      <param name="sourceInterface1">The <see cref="T:System.Type" /> of the default source interface.</param>
      <param name="sourceInterface2">The <see cref="T:System.Type" /> of a source interface.</param>
      <param name="sourceInterface3">The <see cref="T:System.Type" /> of a source interface.</param>
      <param name="sourceInterface4">The <see cref="T:System.Type" /> of a source interface.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComSourceInterfacesAttribute.Value">
      <summary>Gets the fully qualified name of the event source interface.</summary>
      <returns>The fully qualified name of the event source interface.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.BIND_OPTS">
      <summary>Stores the parameters that are used during a moniker binding operation.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BIND_OPTS.cbStruct">
      <summary>Specifies the size, in bytes, of the <see langword="BIND_OPTS" /> structure.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BIND_OPTS.dwTickCountDeadline">
      <summary>Indicates the amount of time (clock time in milliseconds, as returned by the <see langword="GetTickCount" /> function) that the caller specified to complete the binding operation.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BIND_OPTS.grfFlags">
      <summary>Controls aspects of moniker binding operations.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BIND_OPTS.grfMode">
      <summary>Represents flags that should be used when opening the file that contains the object identified by the moniker.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.BINDPTR">
      <summary>Contains a pointer to a bound-to <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> structure, <see cref="T:System.Runtime.InteropServices.VARDESC" /> structure, or an <see langword="ITypeComp" /> interface.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BINDPTR.lpfuncdesc">
      <summary>Represents a pointer to a <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> structure.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BINDPTR.lptcomp">
      <summary>Represents a pointer to an <see cref="T:System.Runtime.InteropServices.ComTypes.ITypeComp" /> interface.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BINDPTR.lpvardesc">
      <summary>Represents a pointer to a <see cref="T:System.Runtime.InteropServices.VARDESC" /> structure.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.CALLCONV">
      <summary>Identifies the calling convention used by a method described in a METHODDATA structure.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_CDECL">
      <summary>Indicates that the C declaration (CDECL) calling convention is used for a method.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MACPASCAL">
      <summary>Indicates that the Macintosh Pascal (MACPASCAL) calling convention is used for a method.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MAX">
      <summary>Indicates the end of the <see cref="T:System.Runtime.InteropServices.ComTypes.CALLCONV" /> enumeration.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MPWCDECL">
      <summary>Indicates that the Macintosh Programmers' Workbench (MPW) CDECL calling convention is used for a method.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MPWPASCAL">
      <summary>Indicates that the Macintosh Programmers' Workbench (MPW) PASCAL calling convention is used for a method.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MSCPASCAL">
      <summary>Indicates that the MSC Pascal (MSCPASCAL) calling convention is used for a method.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_PASCAL">
      <summary>Indicates that the Pascal calling convention is used for a method.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_RESERVED">
      <summary>This value is reserved for future use.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_STDCALL">
      <summary>Indicates that the standard calling convention (STDCALL) is used for a method.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_SYSCALL">
      <summary>Indicates that the standard SYSCALL calling convention is used for a method.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.CONNECTDATA">
      <summary>Describes a connection that exists to a given connection point.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CONNECTDATA.dwCookie">
      <summary>Represents a connection token that is returned from a call to <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CONNECTDATA.pUnk">
      <summary>Represents a pointer to the <see langword="IUnknown" /> interface on a connected advisory sink. The caller must call <see langword="IUnknown::Release" /> on this pointer when the <see langword="CONNECTDATA" /> structure is no longer needed.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DESCKIND">
      <summary>Identifies the type description being bound to.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_FUNCDESC">
      <summary>Indicates that a <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> structure was returned.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_IMPLICITAPPOBJ">
      <summary>Indicates that an <see langword="IMPLICITAPPOBJ" /> was returned.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_MAX">
      <summary>Indicates an end-of-enumeration marker.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_NONE">
      <summary>Indicates that no match was found.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_TYPECOMP">
      <summary>Indicates that a <see langword="TYPECOMP" /> was returned.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_VARDESC">
      <summary>Indicates that a <see langword="VARDESC" /> was returned.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DISPPARAMS">
      <summary>Contains the arguments passed to a method or property by <see langword="IDispatch::Invoke" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DISPPARAMS.cArgs">
      <summary>Represents the count of arguments.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DISPPARAMS.cNamedArgs">
      <summary>Represents the count of named arguments.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DISPPARAMS.rgdispidNamedArgs">
      <summary>Represents the dispatch IDs of named arguments.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DISPPARAMS.rgvarg">
      <summary>Represents a reference to the array of arguments.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ELEMDESC">
      <summary>Contains the type description and process transfer information for a variable, function, or a function parameter.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ELEMDESC.desc">
      <summary>Contains information about an element.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ELEMDESC.tdesc">
      <summary>Identifies the type of the element.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ELEMDESC.DESCUNION">
      <summary>Contains information about an element.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ELEMDESC.DESCUNION.idldesc">
      <summary>Contains information for remoting the element.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ELEMDESC.DESCUNION.paramdesc">
      <summary>Contains information about the parameter.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.EXCEPINFO">
      <summary>Describes the exceptions that occur during <see langword="IDispatch::Invoke" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.bstrDescription">
      <summary>Describes the error intended for the customer.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.bstrHelpFile">
      <summary>Contains the fully-qualified drive, path, and file name of a Help file that contains more information about the error.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.bstrSource">
      <summary>Indicates the name of the source of the exception. Typically, this is an application name.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.dwHelpContext">
      <summary>Indicates the Help context ID of the topic within the Help file.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.pfnDeferredFillIn">
      <summary>Represents a pointer to a function that takes an <see cref="T:System.Runtime.InteropServices.EXCEPINFO" /> structure as an argument and returns an HRESULT value. If deferred fill-in is not desired, this field is set to <see langword="null" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.pvReserved">
      <summary>This field is reserved; it must be set to <see langword="null" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.scode">
      <summary>A return value describing the error.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.wCode">
      <summary>Represents an error code identifying the error.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.wReserved">
      <summary>This field is reserved; it must be set to 0.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FILETIME">
      <summary>Represents the number of 100-nanosecond intervals since January 1, 1601. This structure is a 64-bit value.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FILETIME.dwHighDateTime">
      <summary>Specifies the high 32 bits of the <see langword="FILETIME" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FILETIME.dwLowDateTime">
      <summary>Specifies the low 32 bits of the <see langword="FILETIME" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FUNCDESC">
      <summary>Defines a function description.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.callconv">
      <summary>Specifies the calling convention of a function.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.cParams">
      <summary>Counts the total number of parameters.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.cParamsOpt">
      <summary>Counts the optional parameters.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.cScodes">
      <summary>Counts the permitted return values.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.elemdescFunc">
      <summary>Contains the return type of the function.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.funckind">
      <summary>Specifies whether the function is virtual, static, or dispatch-only.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.invkind">
      <summary>Specifies the type of a property function.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.lprgelemdescParam">
      <summary>Indicates the size of <see cref="F:System.Runtime.InteropServices.FUNCDESC.cParams" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.lprgscode">
      <summary>Stores the count of errors a function can return on a 16-bit system.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.memid">
      <summary>Identifies the function member ID.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.oVft">
      <summary>Specifies the offset in the VTBL for <see cref="F:System.Runtime.InteropServices.FUNCKIND.FUNC_VIRTUAL" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.wFuncFlags">
      <summary>Indicates the <see cref="T:System.Runtime.InteropServices.FUNCFLAGS" /> of a function.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FUNCFLAGS">
      <summary>Identifies the constants that define the properties of a function.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FBINDABLE">
      <summary>The function that supports data binding.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FDEFAULTBIND">
      <summary>The function that best represents the object. Only one function in a type can have this attribute.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FDEFAULTCOLLELEM">
      <summary>Permits an optimization in which the compiler looks for a member named "xyz" on the type of "abc". If such a member is found, and is flagged as an accessor function for an element of the default collection, a call is generated to that member function. Permitted on members in dispinterfaces and interfaces; not permitted on modules.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FDISPLAYBIND">
      <summary>The function that is displayed to the user as bindable. <see cref="F:System.Runtime.InteropServices.FUNCFLAGS.FUNCFLAG_FBINDABLE" /> must also be set.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FHIDDEN">
      <summary>The function should not be displayed to the user, although it exists and is bindable.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FIMMEDIATEBIND">
      <summary>Mapped as individual bindable properties.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FNONBROWSABLE">
      <summary>The property appears in an object browser, but not in a properties browser.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FREPLACEABLE">
      <summary>Tags the interface as having default behaviors.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FREQUESTEDIT">
      <summary>When set, any call to a method that sets the property results first in a call to <see langword="IPropertyNotifySink::OnRequestEdit" />. The implementation of <see langword="OnRequestEdit" /> determines if the call is allowed to set the property.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FRESTRICTED">
      <summary>The function should not be accessible from macro languages. This flag is intended for system-level functions or functions that type browsers should not display.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FSOURCE">
      <summary>The function returns an object that is a source of events.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FUIDEFAULT">
      <summary>The type information member is the default member for display in the user interface.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FUSESGETLASTERROR">
      <summary>The function supports <see langword="GetLastError" />. If an error occurs during the function, the caller can call <see langword="GetLastError" /> to retrieve the error code.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FUNCKIND">
      <summary>Defines how to access a function.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_DISPATCH">
      <summary>The function can be accessed only through <see langword="IDispatch" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_NONVIRTUAL">
      <summary>The function is accessed by <see langword="static" /> address and takes an implicit <see langword="this" /> pointer.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_PUREVIRTUAL">
      <summary>The function is accessed through the virtual function table (VTBL), and takes an implicit <see langword="this" /> pointer.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_STATIC">
      <summary>The function is accessed by <see langword="static" /> address and does not take an implicit <see langword="this" /> pointer.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_VIRTUAL">
      <summary>The function is accessed in the same way as <see cref="F:System.Runtime.InteropServices.FUNCKIND.FUNC_PUREVIRTUAL" />, except the function has an implementation.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IBindCtx">
      <summary>Provides the managed definition of the <see langword="IBindCtx" /> interface.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.EnumObjectParam(System.Runtime.InteropServices.ComTypes.IEnumString@)">
      <summary>Enumerates the strings that are the keys of the internally maintained table of contextual object parameters.</summary>
      <param name="ppenum">When this method returns, contains a reference to the object parameter enumerator. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.GetBindOptions(System.Runtime.InteropServices.ComTypes.BIND_OPTS@)">
      <summary>Returns the current binding options stored in the current bind context.</summary>
      <param name="pbindopts">A pointer to the structure to receive the binding options.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.GetObjectParam(System.String,System.Object@)">
      <summary>Looks up the given key in the internally maintained table of contextual object parameters and returns the corresponding object, if one exists.</summary>
      <param name="pszKey">The name of the object to search for.</param>
      <param name="ppunk">When this method returns, contains the object interface pointer. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.GetRunningObjectTable(System.Runtime.InteropServices.ComTypes.IRunningObjectTable@)">
      <summary>Returns access to the Running Object Table (ROT) relevant to this binding process.</summary>
      <param name="pprot">When this method returns, contains a reference to the Running Object Table (ROT). This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RegisterObjectBound(System.Object)">
      <summary>Registers the passed object as one of the objects that has been bound during a moniker operation and that should be released when the operation is complete.</summary>
      <param name="punk">The object to register for release.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RegisterObjectParam(System.String,System.Object)">
      <summary>Registers the specified object pointer under the specified name in the internally maintained table of object pointers.</summary>
      <param name="pszKey">The name to register <paramref name="punk" /> with.</param>
      <param name="punk">The object to register.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.ReleaseBoundObjects">
      <summary>Releases all the objects currently registered with the bind context by using the <see cref="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RegisterObjectBound(System.Object)" /> method.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RevokeObjectBound(System.Object)">
      <summary>Removes the object from the set of registered objects that need to be released.</summary>
      <param name="punk">The object to unregister for release.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RevokeObjectParam(System.String)">
      <summary>Revokes the registration of the object currently found under the specified key in the internally maintained table of contextual object parameters, if that key is currently registered.</summary>
      <param name="pszKey">The key to unregister.</param>
      <returns>An <see langword="S_OK" /><see langword="HRESULT" /> value if the specified key was successfully removed from the table; otherwise, an <see langword="S_FALSE" /><see langword="HRESULT" /> value.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.SetBindOptions(System.Runtime.InteropServices.ComTypes.BIND_OPTS@)">
      <summary>Stores a block of parameters in the bind context. These parameters will apply to later <see langword="UCOMIMoniker" /> operations that use this bind context.</summary>
      <param name="pbindopts">The structure containing the binding options to set.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IConnectionPoint">
      <summary>Provides the managed definition of the <see langword="IConnectionPoint" /> interface.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)">
      <summary>Establishes an advisory connection between the connection point and the caller's sink object.</summary>
      <param name="pUnkSink">A reference to the sink to receive calls for the outgoing interface managed by this connection point.</param>
      <param name="pdwCookie">When this method returns, contains the connection cookie. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.EnumConnections(System.Runtime.InteropServices.ComTypes.IEnumConnections@)">
      <summary>Creates an enumerator object for iteration through the connections that exist to this connection point.</summary>
      <param name="ppEnum">When this method returns, contains the newly created enumerator. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.GetConnectionInterface(System.Guid@)">
      <summary>Returns the IID of the outgoing interface managed by this connection point.</summary>
      <param name="pIID">When this parameter returns, contains the IID of the outgoing interface managed by this connection point. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.GetConnectionPointContainer(System.Runtime.InteropServices.ComTypes.IConnectionPointContainer@)">
      <summary>Retrieves the <see langword="IConnectionPointContainer" /> interface pointer to the connectable object that conceptually owns this connection point.</summary>
      <param name="ppCPC">When this parameter returns, contains the connectable object's <see langword="IConnectionPointContainer" /> interface. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Unadvise(System.Int32)">
      <summary>Terminates an advisory connection previously established through the <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)" /> method.</summary>
      <param name="dwCookie">The connection cookie previously returned from the <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)" /> method.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IConnectionPointContainer">
      <summary>Provides the managed definition of the <see langword="IConnectionPointContainer" /> interface.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPointContainer.EnumConnectionPoints(System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints@)">
      <summary>Creates an enumerator of all the connection points supported in the connectable object, one connection point per IID.</summary>
      <param name="ppEnum">When this method returns, contains the interface pointer of the enumerator. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPointContainer.FindConnectionPoint(System.Guid@,System.Runtime.InteropServices.ComTypes.IConnectionPoint@)">
      <summary>Asks the connectable object if it has a connection point for a particular IID, and if so, returns the <see langword="IConnectionPoint" /> interface pointer to that connection point.</summary>
      <param name="riid">A reference to the outgoing interface IID whose connection point is being requested.</param>
      <param name="ppCP">When this method returns, contains the connection point that manages the outgoing interface <paramref name="riid" />. This parameter is passed uninitialized.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IDLDESC">
      <summary>Contains information needed for transferring a structure element, parameter, or function return value between processes.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLDESC.dwReserved">
      <summary>Reserved; set to <see langword="null" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLDESC.wIDLFlags">
      <summary>Indicates an <see cref="T:System.Runtime.InteropServices.IDLFLAG" /> value describing the type.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IDLFLAG">
      <summary>Describes how to transfer a structure element, parameter, or function return value between processes.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_FIN">
      <summary>The parameter passes information from the caller to the callee.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_FLCID">
      <summary>The parameter is the local identifier of a client application.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_FOUT">
      <summary>The parameter returns information from the callee to the caller.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_FRETVAL">
      <summary>The parameter is the return value of the member.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_NONE">
      <summary>Does not specify whether the parameter passes or receives information.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints">
      <summary>Manages the definition of the <see langword="IEnumConnectionPoints" /> interface.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Clone(System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints@)">
      <summary>Creates a new enumerator that contains the same enumeration state as the current one.</summary>
      <param name="ppenum">When this method returns, contains a reference to the newly created enumerator. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Next(System.Int32,System.Runtime.InteropServices.ComTypes.IConnectionPoint[],System.IntPtr)">
      <summary>Retrieves a specified number of items in the enumeration sequence.</summary>
      <param name="celt">The number of <see langword="IConnectionPoint" /> references to return in <paramref name="rgelt" />.</param>
      <param name="rgelt">When this method returns, contains a reference to the enumerated connections. This parameter is passed uninitialized.</param>
      <param name="pceltFetched">When this method returns, contains a reference to the actual number of connections enumerated in <paramref name="rgelt" />.</param>
      <returns>
        <see langword="S_OK" /> if the <paramref name="pceltFetched" /> parameter equals the <paramref name="celt" /> parameter; otherwise, <see langword="S_FALSE" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Reset">
      <summary>Resets the enumeration sequence to the beginning.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Skip(System.Int32)">
      <summary>Skips a specified number of items in the enumeration sequence.</summary>
      <param name="celt">The number of elements to skip in the enumeration.</param>
      <returns>
        <see langword="S_OK" /> if the number of elements skipped equals the <paramref name="celt" /> parameter; otherwise, <see langword="S_FALSE" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumConnections">
      <summary>Manages the definition of the <see langword="IEnumConnections" /> interface.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Clone(System.Runtime.InteropServices.ComTypes.IEnumConnections@)">
      <summary>Creates a new enumerator that contains the same enumeration state as the current one.</summary>
      <param name="ppenum">When this method returns, contains a reference to the newly created enumerator. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Next(System.Int32,System.Runtime.InteropServices.ComTypes.CONNECTDATA[],System.IntPtr)">
      <summary>Retrieves a specified number of items in the enumeration sequence.</summary>
      <param name="celt">The number of <see cref="T:System.Runtime.InteropServices.CONNECTDATA" /> structures to return in <paramref name="rgelt" />.</param>
      <param name="rgelt">When this method returns, contains a reference to the enumerated connections. This parameter is passed uninitialized.</param>
      <param name="pceltFetched">When this method returns, contains a reference to the actual number of connections enumerated in <paramref name="rgelt" />.</param>
      <returns>
        <see langword="S_OK" /> if the <paramref name="pceltFetched" /> parameter equals the <paramref name="celt" /> parameter; otherwise, <see langword="S_FALSE" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Reset">
      <summary>Resets the enumeration sequence to the beginning.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Skip(System.Int32)">
      <summary>Skips a specified number of items in the enumeration sequence.</summary>
      <param name="celt">The number of elements to skip in the enumeration.</param>
      <returns>
        <see langword="S_OK" /> if the number of elements skipped equals the <paramref name="celt" /> parameter; otherwise, <see langword="S_FALSE" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumMoniker">
      <summary>Manages the definition of the <see langword="IEnumMoniker" /> interface.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Clone(System.Runtime.InteropServices.ComTypes.IEnumMoniker@)">
      <summary>Creates a new enumerator that contains the same enumeration state as the current one.</summary>
      <param name="ppenum">When this method returns, contains a reference to the newly created enumerator. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Next(System.Int32,System.Runtime.InteropServices.ComTypes.IMoniker[],System.IntPtr)">
      <summary>Retrieves a specified number of items in the enumeration sequence.</summary>
      <param name="celt">The number of monikers to return in <paramref name="rgelt" />.</param>
      <param name="rgelt">When this method returns, contains a reference to the enumerated monikers. This parameter is passed uninitialized.</param>
      <param name="pceltFetched">When this method returns, contains a reference to the actual number of monikers enumerated in <paramref name="rgelt" />.</param>
      <returns>
        <see langword="S_OK" /> if the <paramref name="pceltFetched" /> parameter equals the <paramref name="celt" /> parameter; otherwise, <see langword="S_FALSE" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Reset">
      <summary>Resets the enumeration sequence to the beginning.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Skip(System.Int32)">
      <summary>Skips a specified number of items in the enumeration sequence.</summary>
      <param name="celt">The number of elements to skip in the enumeration.</param>
      <returns>
        <see langword="S_OK" /> if the number of elements skipped equals the <paramref name="celt" /> parameter; otherwise, <see langword="S_FALSE" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumString">
      <summary>Manages the definition of the <see langword="IEnumString" /> interface.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumString.Clone(System.Runtime.InteropServices.ComTypes.IEnumString@)">
      <summary>Creates a new enumerator that contains the same enumeration state as the current one.</summary>
      <param name="ppenum">When this method returns, contains a reference to the newly created enumerator. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumString.Next(System.Int32,System.String[],System.IntPtr)">
      <summary>Retrieves a specified number of items in the enumeration sequence.</summary>
      <param name="celt">The number of strings to return in <paramref name="rgelt" />.</param>
      <param name="rgelt">When this method returns, contains a reference to the enumerated strings. This parameter is passed uninitialized.</param>
      <param name="pceltFetched">When this method returns, contains a reference to the actual number of strings enumerated in <paramref name="rgelt" />.</param>
      <returns>
        <see langword="S_OK" /> if the <paramref name="pceltFetched" /> parameter equals the <paramref name="celt" /> parameter; otherwise, <see langword="S_FALSE" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumString.Reset">
      <summary>Resets the enumeration sequence to the beginning.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumString.Skip(System.Int32)">
      <summary>Skips a specified number of items in the enumeration sequence.</summary>
      <param name="celt">The number of elements to skip in the enumeration.</param>
      <returns>
        <see langword="S_OK" /> if the number of elements skipped equals the <paramref name="celt" /> parameter; otherwise, <see langword="S_FALSE" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumVARIANT">
      <summary>Manages the definition of the <see langword="IEnumVARIANT" /> interface.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Clone">
      <summary>Creates a new enumerator that contains the same enumeration state as the current one.</summary>
      <returns>An <see cref="T:System.Runtime.InteropServices.ComTypes.IEnumVARIANT" /> reference to the newly created enumerator.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Next(System.Int32,System.Object[],System.IntPtr)">
      <summary>Retrieves a specified number of items in the enumeration sequence.</summary>
      <param name="celt">The number of elements to return in <c>rgelt</c>.</param>
      <param name="rgVar">When this method returns, contains a reference to the enumerated elements. This parameter is passed uninitialized.</param>
      <param name="pceltFetched">When this method returns, contains a reference to the actual number of elements enumerated in <c>rgelt</c>.</param>
      <returns>
        <see langword="S_OK" /> if the <paramref name="pceltFetched" /> parameter equals the <paramref name="celt" /> parameter; otherwise, <see langword="S_FALSE" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Reset">
      <summary>Resets the enumeration sequence to the beginning.</summary>
      <returns>An HRESULT with the value <see langword="S_OK" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Skip(System.Int32)">
      <summary>Skips a specified number of items in the enumeration sequence.</summary>
      <param name="celt">The number of elements to skip in the enumeration.</param>
      <returns>
        <see langword="S_OK" /> if the number of elements skipped equals <paramref name="celt" /> parameter; otherwise, <see langword="S_FALSE" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IMoniker">
      <summary>Provides the managed definition of the <see langword="IMoniker" /> interface, with COM functionality from <see langword="IPersist" /> and <see langword="IPersistStream" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.BindToObject(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Guid@,System.Object@)">
      <summary>Uses the moniker to bind to the object that it identifies.</summary>
      <param name="pbc">A reference to the <see langword="IBindCtx" /> interface on the bind context object used in this binding operation.</param>
      <param name="pmkToLeft">A reference to the moniker to the left of the current moniker, if the moniker is part of a composite moniker.</param>
      <param name="riidResult">The interface identifier (IID) of the interface that the client intends to use to communicate with the object that the moniker identifies.</param>
      <param name="ppvResult">When this method returns, contains a reference to the interface requested by <paramref name="riidResult" />. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.BindToStorage(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Guid@,System.Object@)">
      <summary>Retrieves an interface pointer to the storage that contains the object identified by the moniker.</summary>
      <param name="pbc">A reference to the <see langword="IBindCtx" /> interface on the bind context object used during this binding operation.</param>
      <param name="pmkToLeft">A reference to the moniker to the left of the current moniker, if the moniker is part of a composite moniker.</param>
      <param name="riid">The interface identifier (IID) of the storage interface requested.</param>
      <param name="ppvObj">When this method returns, contains a reference to the interface requested by <paramref name="riid" />. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.CommonPrefixWith(System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary>Creates a new moniker based on the common prefix that this moniker shares with another moniker.</summary>
      <param name="pmkOther">A reference to the <see langword="IMoniker" /> interface on another moniker to compare with the current moniker for a common prefix.</param>
      <param name="ppmkPrefix">When this method returns, contains the moniker that is the common prefix of the current moniker and <paramref name="pmkOther" />. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.ComposeWith(System.Runtime.InteropServices.ComTypes.IMoniker,System.Boolean,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary>Combines the current moniker with another moniker, creating a new composite moniker.</summary>
      <param name="pmkRight">A reference to the <see langword="IMoniker" /> interface on a moniker to append to the end of the current moniker.</param>
      <param name="fOnlyIfNotGeneric">
        <see langword="true" /> to indicate that the caller requires a nongeneric composition. The operation proceeds only if <paramref name="pmkRight" /> is a moniker class that the current moniker can combine with in some way other than forming a generic composite. <see langword="false" /> to indicate that the method can create a generic composite if necessary.</param>
      <param name="ppmkComposite">When this method returns, contains a reference to the resulting composite moniker. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Enum(System.Boolean,System.Runtime.InteropServices.ComTypes.IEnumMoniker@)">
      <summary>Supplies a pointer to an enumerator that can enumerate the components of a composite moniker.</summary>
      <param name="fForward">
        <see langword="true" /> to enumerate the monikers from left to right. <see langword="false" /> to enumerate from right to left.</param>
      <param name="ppenumMoniker">When this method returns, contains a reference to the enumerator object for the moniker. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.GetClassID(System.Guid@)">
      <summary>Retrieves the class identifier (CLSID) of an object.</summary>
      <param name="pClassID">When this method returns, contains the CLSID. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.GetDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.String@)">
      <summary>Gets the display name, which is a user-readable representation of the current moniker.</summary>
      <param name="pbc">A reference to the bind context to use in this operation.</param>
      <param name="pmkToLeft">A reference to the moniker to the left of the current moniker, if the moniker is part of a composite moniker.</param>
      <param name="ppszDisplayName">When this method returns, contains the display name string. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.GetSizeMax(System.Int64@)">
      <summary>Returns the size, in bytes, of the stream needed to save the object.</summary>
      <param name="pcbSize">When this method returns, contains a <see langword="long" /> value indicating the size, in bytes, of the stream needed to save this object. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.GetTimeOfLastChange(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.FILETIME@)">
      <summary>Provides a number representing the time that the object identified by the current moniker was last changed.</summary>
      <param name="pbc">A reference to the bind context to use in this binding operation.</param>
      <param name="pmkToLeft">A reference to the moniker to the left of the current moniker, if the moniker is part of a composite moniker.</param>
      <param name="pFileTime">When this method returns, contains the time of the last change. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Hash(System.Int32@)">
      <summary>Calculates a 32-bit integer using the internal state of the moniker.</summary>
      <param name="pdwHash">When this method returns, contains the hash value for this moniker. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Inverse(System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary>Provides a moniker that, when composed to the right of the current moniker or one of similar structure, composes to nothing.</summary>
      <param name="ppmk">When this method returns, contains a moniker that is the inverse of the current moniker. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.IsDirty">
      <summary>Checks the object for changes since it was last saved.</summary>
      <returns>An <see langword="S_OK" /><see langword="HRESULT" /> value if the object has changed; otherwise, an <see langword="S_FALSE" /><see langword="HRESULT" /> value.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.IsEqual(System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary>Compares the current moniker with a specified moniker and indicates whether they are identical.</summary>
      <param name="pmkOtherMoniker">A reference to the moniker to use for comparison.</param>
      <returns>An <see langword="S_OK" /><see langword="HRESULT" /> value if the monikers are identical; otherwise, an <see langword="S_FALSE" /><see langword="HRESULT" /> value.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.IsRunning(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary>Determines whether the object that is identified by the current moniker is currently loaded and running.</summary>
      <param name="pbc">A reference to the bind context to use in this binding operation.</param>
      <param name="pmkToLeft">A reference to the moniker to the left of the current moniker if the current moniker is part of a composite.</param>
      <param name="pmkNewlyRunning">A reference to the moniker most recently added to the Running Object Table (ROT).</param>
      <returns>An <see langword="S_OK" /><see langword="HRESULT" /> value if the moniker is running; an <see langword="S_FALSE" /><see langword="HRESULT" /> value if the moniker is not running; or an <see langword="E_UNEXPECTED" /><see langword="HRESULT" /> value.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.IsSystemMoniker(System.Int32@)">
      <summary>Indicates whether this moniker is of one of the system-supplied moniker classes.</summary>
      <param name="pdwMksys">When this method returns, contains a pointer to an integer that is one of the values from the <see langword="MKSYS" /> enumeration, and refers to one of the COM moniker classes. This parameter is passed uninitialized.</param>
      <returns>An <see langword="S_OK" /><see langword="HRESULT" /> value if the moniker is a system moniker; otherwise, an <see langword="S_FALSE" /><see langword="HRESULT" /> value.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Load(System.Runtime.InteropServices.ComTypes.IStream)">
      <summary>Initializes an object from the stream where it was previously saved.</summary>
      <param name="pStm">The stream that the object is loaded from.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.ParseDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.String,System.Int32@,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary>Reads as many characters of the specified display name as the <see cref="M:System.Runtime.InteropServices.ComTypes.IMoniker.ParseDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.String,System.Int32@,System.Runtime.InteropServices.ComTypes.IMoniker@)" /> understands and builds a moniker corresponding to the portion read.</summary>
      <param name="pbc">A reference to the bind context to use in this binding operation.</param>
      <param name="pmkToLeft">A reference to the moniker that has been built from the display name up to this point.</param>
      <param name="pszDisplayName">A reference to the string containing the remaining display name to parse.</param>
      <param name="pchEaten">When this method returns, contains the number of characters that were consumed in parsing <paramref name="pszDisplayName" />. This parameter is passed uninitialized.</param>
      <param name="ppmkOut">When this method returns, contains a reference to the moniker that was built from <paramref name="pszDisplayName" />. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Reduce(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Int32,System.Runtime.InteropServices.ComTypes.IMoniker@,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary>Returns a reduced moniker, which is another moniker that refers to the same object as the current moniker but can be bound with equal or greater efficiency.</summary>
      <param name="pbc">A reference to the <see langword="IBindCtx" /> interface on the bind context to use in this binding operation.</param>
      <param name="dwReduceHowFar">A value that specifies how far the current moniker should be reduced.</param>
      <param name="ppmkToLeft">A reference to the moniker to the left of the current moniker.</param>
      <param name="ppmkReduced">When this method returns, contains a reference to the reduced form of the current moniker, which can be <see langword="null" /> if an error occurs or if the current moniker is reduced to nothing. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.RelativePathTo(System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary>Supplies a moniker that, when appended to the current moniker (or one with a similar structure), yields the specified moniker.</summary>
      <param name="pmkOther">A reference to the moniker to which a relative path should be taken.</param>
      <param name="ppmkRelPath">When this method returns, contains a reference to the relative moniker. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Save(System.Runtime.InteropServices.ComTypes.IStream,System.Boolean)">
      <summary>Saves an object to the specified stream.</summary>
      <param name="pStm">The stream to which the object is saved.</param>
      <param name="fClearDirty">
        <see langword="true" /> to clear the modified flag after the save is complete; otherwise <see langword="false" /></param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS">
      <summary>Defines the attributes of an implemented or inherited interface of a type.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS.IMPLTYPEFLAG_FDEFAULT">
      <summary>The interface or dispinterface represents the default for the source or sink.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS.IMPLTYPEFLAG_FDEFAULTVTABLE">
      <summary>Sinks receive events through the virtual function table (VTBL).</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS.IMPLTYPEFLAG_FRESTRICTED">
      <summary>The member should not be displayed or programmable by users.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS.IMPLTYPEFLAG_FSOURCE">
      <summary>This member of a coclass is called rather than implemented.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND">
      <summary>Specifies how to invoke a function by <see langword="IDispatch::Invoke" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.INVOKEKIND.INVOKE_FUNC">
      <summary>The member is called using a normal function invocation syntax.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.INVOKEKIND.INVOKE_PROPERTYGET">
      <summary>The function is invoked using a normal property access syntax.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.INVOKEKIND.INVOKE_PROPERTYPUT">
      <summary>The function is invoked using a property value assignment syntax.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.INVOKEKIND.INVOKE_PROPERTYPUTREF">
      <summary>The function is invoked using a property reference assignment syntax.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IPersistFile">
      <summary>Provides the managed definition of the <see langword="IPersistFile" /> interface, with functionality from <see langword="IPersist" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.GetClassID(System.Guid@)">
      <summary>Retrieves the class identifier (CLSID) of an object.</summary>
      <param name="pClassID">When this method returns, contains a reference to the CLSID. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.GetCurFile(System.String@)">
      <summary>Retrieves either the absolute path to the current working file of the object or, if there is no current working file, the default file name prompt of the object.</summary>
      <param name="ppszFileName">When this method returns, contains the address of a pointer to a zero-terminated string containing the path for the current file, or the default file name prompt (such as *.txt). This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.IsDirty">
      <summary>Checks an object for changes since it was last saved to its current file.</summary>
      <returns>
        <see langword="S_OK" /> if the file has changed since it was last saved; <see langword="S_FALSE" /> if the file has not changed since it was last saved.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.Load(System.String,System.Int32)">
      <summary>Opens the specified file and initializes an object from the file contents.</summary>
      <param name="pszFileName">A zero-terminated string containing the absolute path of the file to open.</param>
      <param name="dwMode">A combination of values from the <see langword="STGM" /> enumeration to indicate the access mode in which to open <paramref name="pszFileName" />.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.Save(System.String,System.Boolean)">
      <summary>Saves a copy of the object into the specified file.</summary>
      <param name="pszFileName">A zero-terminated string containing the absolute path of the file to which the object is saved.</param>
      <param name="fRemember">
        <see langword="true" /> to used the <paramref name="pszFileName" /> parameter as the current working file; otherwise <see langword="false" />.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.SaveCompleted(System.String)">
      <summary>Notifies the object that it can write to its file.</summary>
      <param name="pszFileName">The absolute path of the file where the object was previously saved.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IRunningObjectTable">
      <summary>Provides the managed definition of the <see langword="IRunningObjectTable" /> interface.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.EnumRunning(System.Runtime.InteropServices.ComTypes.IEnumMoniker@)">
      <summary>Enumerates the objects currently registered as running.</summary>
      <param name="ppenumMoniker">When this method returns, contains the new enumerator for the Running Object Table (ROT). This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.GetObject(System.Runtime.InteropServices.ComTypes.IMoniker,System.Object@)">
      <summary>Returns the registered object if the supplied object name is registered as running.</summary>
      <param name="pmkObjectName">A reference to the moniker to search for in the Running Object Table (ROT).</param>
      <param name="ppunkObject">When this method returns, contains the requested running object. This parameter is passed uninitialized.</param>
      <returns>An <see langword="HRESULT" /> value that indicates the success or failure of the operation.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.GetTimeOfLastChange(System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.FILETIME@)">
      <summary>Searches for this moniker in the Running Object Table (ROT) and reports the recorded time of change, if present.</summary>
      <param name="pmkObjectName">A reference to the moniker to search for in the Running Object Table (ROT).</param>
      <param name="pfiletime">When this object returns, contains the objects last change time. This parameter is passed uninitialized.</param>
      <returns>An <see langword="HRESULT" /> value that indicates the success or failure of the operation.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.IsRunning(System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary>Determines whether the specified moniker is currently registered in the Running Object Table (ROT).</summary>
      <param name="pmkObjectName">A reference to the moniker to search for in the Running Object Table (ROT).</param>
      <returns>An <see langword="HRESULT" /> value that indicates the success or failure of the operation.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.NoteChangeTime(System.Int32,System.Runtime.InteropServices.ComTypes.FILETIME@)">
      <summary>Notes the time that a particular object changed so <see langword="IMoniker::GetTimeOfLastChange" /> can report an appropriate change time.</summary>
      <param name="dwRegister">The Running Object Table (ROT) entry of the changed object.</param>
      <param name="pfiletime">A reference to the object's last change time.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.Register(System.Int32,System.Object,System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary>Registers that the supplied object has entered the running state.</summary>
      <param name="grfFlags">Specifies whether the Running Object Table's (ROT) reference to <paramref name="punkObject" /> is weak or strong, and controls access to the object through its entry in the ROT.</param>
      <param name="punkObject">A reference to the object being registered as running.</param>
      <param name="pmkObjectName">A reference to the moniker that identifies <paramref name="punkObject" />.</param>
      <returns>A value that can be used to identify this ROT entry in subsequent calls to <see cref="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.Revoke(System.Int32)" /> or <see cref="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.NoteChangeTime(System.Int32,System.Runtime.InteropServices.ComTypes.FILETIME@)" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.Revoke(System.Int32)">
      <summary>Unregisters the specified object from the Running Object Table (ROT).</summary>
      <param name="dwRegister">The Running Object Table (ROT) entry to revoke.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IStream">
      <summary>Provides the managed definition of the <see langword="IStream" /> interface, with <see langword="ISequentialStream" /> functionality.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Clone(System.Runtime.InteropServices.ComTypes.IStream@)">
      <summary>Creates a new stream object with its own seek pointer that references the same bytes as the original stream.</summary>
      <param name="ppstm">When this method returns, contains the new stream object. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Commit(System.Int32)">
      <summary>Ensures that any changes made to a stream object that is open in transacted mode are reflected in the parent storage.</summary>
      <param name="grfCommitFlags">A value that controls how the changes for the stream object are committed.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.CopyTo(System.Runtime.InteropServices.ComTypes.IStream,System.Int64,System.IntPtr,System.IntPtr)">
      <summary>Copies a specified number of bytes from the current seek pointer in the stream to the current seek pointer in another stream.</summary>
      <param name="pstm">A reference to the destination stream.</param>
      <param name="cb">The number of bytes to copy from the source stream.</param>
      <param name="pcbRead">On successful return, contains the actual number of bytes read from the source.</param>
      <param name="pcbWritten">On successful return, contains the actual number of bytes written to the destination.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.LockRegion(System.Int64,System.Int64,System.Int32)">
      <summary>Restricts access to a specified range of bytes in the stream.</summary>
      <param name="libOffset">The byte offset for the beginning of the range.</param>
      <param name="cb">The length of the range, in bytes, to restrict.</param>
      <param name="dwLockType">The requested restrictions on accessing the range.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Read(System.Byte[],System.Int32,System.IntPtr)">
      <summary>Reads a specified number of bytes from the stream object into memory starting at the current seek pointer.</summary>
      <param name="pv">When this method returns, contains the data read from the stream. This parameter is passed uninitialized.</param>
      <param name="cb">The number of bytes to read from the stream object.</param>
      <param name="pcbRead">A pointer to a <see langword="ULONG" /> variable that receives the actual number of bytes read from the stream object.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Revert">
      <summary>Discards all changes that have been made to a transacted stream since the last <see cref="M:System.Runtime.InteropServices.ComTypes.IStream.Commit(System.Int32)" /> call.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Seek(System.Int64,System.Int32,System.IntPtr)">
      <summary>Changes the seek pointer to a new location relative to the beginning of the stream, to the end of the stream, or to the current seek pointer.</summary>
      <param name="dlibMove">The displacement to add to <paramref name="dwOrigin" />.</param>
      <param name="dwOrigin">The origin of the seek. The origin can be the beginning of the file, the current seek pointer, or the end of the file.</param>
      <param name="plibNewPosition">On successful return, contains the offset of the seek pointer from the beginning of the stream.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.SetSize(System.Int64)">
      <summary>Changes the size of the stream object.</summary>
      <param name="libNewSize">The new size of the stream as a number of bytes.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Stat(System.Runtime.InteropServices.ComTypes.STATSTG@,System.Int32)">
      <summary>Retrieves the <see cref="T:System.Runtime.InteropServices.STATSTG" /> structure for this stream.</summary>
      <param name="pstatstg">When this method returns, contains a <see langword="STATSTG" /> structure that describes this stream object. This parameter is passed uninitialized.</param>
      <param name="grfStatFlag">Members in the <see langword="STATSTG" /> structure that this method does not return, thus saving some memory allocation operations.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.UnlockRegion(System.Int64,System.Int64,System.Int32)">
      <summary>Removes the access restriction on a range of bytes previously restricted with the <see cref="M:System.Runtime.InteropServices.ComTypes.IStream.LockRegion(System.Int64,System.Int64,System.Int32)" /> method.</summary>
      <param name="libOffset">The byte offset for the beginning of the range.</param>
      <param name="cb">The length, in bytes, of the range to restrict.</param>
      <param name="dwLockType">The access restrictions previously placed on the range.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Write(System.Byte[],System.Int32,System.IntPtr)">
      <summary>Writes a specified number of bytes into the stream object starting at the current seek pointer.</summary>
      <param name="pv">The buffer to write this stream to.</param>
      <param name="cb">The number of bytes to write to the stream.</param>
      <param name="pcbWritten">On successful return, contains the actual number of bytes written to the stream object. If the caller sets this pointer to <see cref="F:System.IntPtr.Zero" />, this method does not provide the actual number of bytes written.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeComp">
      <summary>Provides the managed definition of the <see langword="ITypeComp" /> interface.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeComp.Bind(System.String,System.Int32,System.Int16,System.Runtime.InteropServices.ComTypes.ITypeInfo@,System.Runtime.InteropServices.ComTypes.DESCKIND@,System.Runtime.InteropServices.ComTypes.BINDPTR@)">
      <summary>Maps a name to a member of a type, or binds global variables and functions contained in a type library.</summary>
      <param name="szName">The name to bind.</param>
      <param name="lHashVal">A hash value for <paramref name="szName" /> computed by <see langword="LHashValOfNameSys" />.</param>
      <param name="wFlags">A flags word containing one or more of the invoke flags defined in the <see langword="INVOKEKIND" /> enumeration.</param>
      <param name="ppTInfo">When this method returns, contains a reference to the type description that contains the item to which it is bound, if a <see langword="FUNCDESC" /> or <see langword="VARDESC" /> was returned. This parameter is passed uninitialized.</param>
      <param name="pDescKind">When this method returns, contains a reference to a <see langword="DESCKIND" /> enumerator that indicates whether the name bound-to is a <see langword="VARDESC" />, <see langword="FUNCDESC" />, or <see langword="TYPECOMP" />. This parameter is passed uninitialized.</param>
      <param name="pBindPtr">When this method returns, contains a reference to the bound-to <see langword="VARDESC" />, <see langword="FUNCDESC" />, or <see langword="ITypeComp" /> interface. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeComp.BindType(System.String,System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@,System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary>Binds to the type descriptions contained within a type library.</summary>
      <param name="szName">The name to bind.</param>
      <param name="lHashVal">A hash value for <paramref name="szName" /> determined by <see langword="LHashValOfNameSys" />.</param>
      <param name="ppTInfo">When this method returns, contains a reference to an <see langword="ITypeInfo" /> of the type to which <paramref name="szName" /> was bound. This parameter is passed uninitialized.</param>
      <param name="ppTComp">When this method returns, contains a reference to an <see langword="ITypeComp" /> variable. This parameter is passed uninitialized.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeInfo">
      <summary>Provides the managed definition of the Component Automation ITypeInfo interface.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.AddressOfMember(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr@)">
      <summary>Retrieves the addresses of static functions or variables, such as those defined in a DLL.</summary>
      <param name="memid">The member ID of the <see langword="static" /> member's address to retrieve.</param>
      <param name="invKind">One of the <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> values that specifies whether the member is a property, and if so, what kind.</param>
      <param name="ppv">When this method returns, contains a reference to the <see langword="static" /> member. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.CreateInstance(System.Object,System.Guid@,System.Object@)">
      <summary>Creates a new instance of a type that describes a component class (coclass).</summary>
      <param name="pUnkOuter">The object that acts as the controlling <see langword="IUnknown" />.</param>
      <param name="riid">The IID of the interface that the caller uses to communicate with the resulting object.</param>
      <param name="ppvObj">When this method returns, contains a reference to the created object. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetContainingTypeLib(System.Runtime.InteropServices.ComTypes.ITypeLib@,System.Int32@)">
      <summary>Retrieves the type library that contains this type description and its index within that type library.</summary>
      <param name="ppTLB">When this method returns, contains a reference to the containing type library. This parameter is passed uninitialized.</param>
      <param name="pIndex">When this method returns, contains a reference to the index of the type description within the containing type library. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetDllEntry(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>Retrieves a description or specification of an entry point for a function in a DLL.</summary>
      <param name="memid">The ID of the member function whose DLL entry description is to be returned.</param>
      <param name="invKind">One of the <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> values that specifies the kind of member identified by <paramref name="memid" />.</param>
      <param name="pBstrDllName">If not <see langword="null" />, the function sets <paramref name="pBstrDllName" /> to a <see langword="BSTR" /> that contains the name of the DLL.</param>
      <param name="pBstrName">If not <see langword="null" />, the function sets <c>lpbstrName</c> to a <see langword="BSTR" /> that contains the name of the entry point.</param>
      <param name="pwOrdinal">If not <see langword="null" />, and the function is defined by an ordinal, then <c>lpwOrdinal</c> is set to point to the ordinal.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary>Retrieves the documentation string, the complete Help file name and path, and the context ID for the Help topic for a specified type description.</summary>
      <param name="index">The ID of the member whose documentation is to be returned.</param>
      <param name="strName">When this method returns, contains the name of the item method. This parameter is passed uninitialized.</param>
      <param name="strDocString">When this method returns, contains the documentation string for the specified item. This parameter is passed uninitialized.</param>
      <param name="dwHelpContext">When this method returns, contains a reference to the Help context associated with the specified item. This parameter is passed uninitialized.</param>
      <param name="strHelpFile">When this method returns, contains the fully qualified name of the Help file. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetFuncDesc(System.Int32,System.IntPtr@)">
      <summary>Retrieves the <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> structure that contains information about a specified function.</summary>
      <param name="index">The index of the function description to return.</param>
      <param name="ppFuncDesc">When this method returns, contains a reference to a <see langword="FUNCDESC" /> structure that describes the specified function. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetIDsOfNames(System.String[],System.Int32,System.Int32[])">
      <summary>Maps between member names and member IDs, and parameter names and parameter IDs.</summary>
      <param name="rgszNames">An array of names to map.</param>
      <param name="cNames">The count of names to map.</param>
      <param name="pMemId">When this method returns, contains a reference to an array in which name mappings are placed. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetImplTypeFlags(System.Int32,System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS@)">
      <summary>Retrieves the <see cref="T:System.Runtime.InteropServices.IMPLTYPEFLAGS" /> value for one implemented interface or base interface in a type description.</summary>
      <param name="index">The index of the implemented interface or base interface.</param>
      <param name="pImplTypeFlags">When this method returns, contains a reference to the <see langword="IMPLTYPEFLAGS" /> enumeration. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetMops(System.Int32,System.String@)">
      <summary>Retrieves marshaling information.</summary>
      <param name="memid">The member ID that indicates which marshaling information is needed.</param>
      <param name="pBstrMops">When this method returns, contains a reference to the <see langword="opcode" /> string used in marshaling the fields of the structure described by the referenced type description, or returns <see langword="null" /> if there is no information to return. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetNames(System.Int32,System.String[],System.Int32,System.Int32@)">
      <summary>Retrieves the variable with the specified member ID (or the name of the property or method and its parameters) that corresponds to the specified function ID.</summary>
      <param name="memid">The ID of the member whose name (or names) is to be returned.</param>
      <param name="rgBstrNames">When this method returns, contains the name (or names) associated with the member. This parameter is passed uninitialized.</param>
      <param name="cMaxNames">The length of the <paramref name="rgBstrNames" /> array.</param>
      <param name="pcNames">When this method returns, contains the number of names in the <paramref name="rgBstrNames" /> array. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetRefTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary>Retrieves the referenced type descriptions if a type description references other type descriptions.</summary>
      <param name="hRef">A handle to the referenced type description to return.</param>
      <param name="ppTI">When this method returns, contains the referenced type description. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetRefTypeOfImplType(System.Int32,System.Int32@)">
      <summary>Retrieves the type description of the implemented interface types if a type description describes a COM class.</summary>
      <param name="index">The index of the implemented type whose handle is returned.</param>
      <param name="href">When this method returns, contains a reference to a handle for the implemented interface. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeAttr(System.IntPtr@)">
      <summary>Retrieves a <see cref="T:System.Runtime.InteropServices.TYPEATTR" /> structure that contains the attributes of the type description.</summary>
      <param name="ppTypeAttr">When this method returns, contains a reference to the structure that contains the attributes of this type description. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary>Retrieves the <see langword="ITypeComp" /> interface for the type description, which enables a client compiler to bind to the type description's members.</summary>
      <param name="ppTComp">When this method returns, contains a reference to the <see langword="ITypeComp" /> interface of the containing type library. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetVarDesc(System.Int32,System.IntPtr@)">
      <summary>Retrieves a <see langword="VARDESC" /> structure that describes the specified variable.</summary>
      <param name="index">The index of the variable description to return.</param>
      <param name="ppVarDesc">When this method returns, contains a reference to the <see langword="VARDESC" /> structure that describes the specified variable. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.Invoke(System.Object,System.Int32,System.Int16,System.Runtime.InteropServices.ComTypes.DISPPARAMS@,System.IntPtr,System.IntPtr,System.Int32@)">
      <summary>Invokes a method, or accesses a property of an object, that implements the interface described by the type description.</summary>
      <param name="pvInstance">A reference to the interface described by this type description.</param>
      <param name="memid">A value that identifies the interface member.</param>
      <param name="wFlags">Flags that describe the context of the invoke call.</param>
      <param name="pDispParams">A reference to a structure that contains an array of arguments, an array of DISPIDs for named arguments, and counts of the number of elements in each array.</param>
      <param name="pVarResult">A reference to the location at which the result is to be stored. If <paramref name="wFlags" /> specifies <see langword="DISPATCH_PROPERTYPUT" /> or <see langword="DISPATCH_PROPERTYPUTREF" />, <paramref name="pVarResult" /> is ignored. Set to <see langword="null" /> if no result is desired.</param>
      <param name="pExcepInfo">A pointer to an exception information structure, which is filled in only if <see langword="DISP_E_EXCEPTION" /> is returned.</param>
      <param name="puArgErr">If <see langword="Invoke" /> returns <see langword="DISP_E_TYPEMISMATCH" />, <paramref name="puArgErr" /> indicates the index within <c>rgvarg</c> of the argument with the incorrect type. If more than one argument returns an error, <paramref name="puArgErr" /> indicates only the first argument with an error. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.ReleaseFuncDesc(System.IntPtr)">
      <summary>Releases a <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> structure previously returned by the <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetFuncDesc(System.Int32,System.IntPtr@)" /> method.</summary>
      <param name="pFuncDesc">A reference to the <see langword="FUNCDESC" /> structure to release.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.ReleaseTypeAttr(System.IntPtr)">
      <summary>Releases a <see cref="T:System.Runtime.InteropServices.TYPEATTR" /> structure previously returned by the <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeAttr(System.IntPtr@)" /> method.</summary>
      <param name="pTypeAttr">A reference to the <see langword="TYPEATTR" /> structure to release.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.ReleaseVarDesc(System.IntPtr)">
      <summary>Releases a <see langword="VARDESC" /> structure previously returned by the <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetVarDesc(System.Int32,System.IntPtr@)" /> method.</summary>
      <param name="pVarDesc">A reference to the <see langword="VARDESC" /> structure to release.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeInfo2">
      <summary>Provides the managed definition of the <see langword="ITypeInfo2" /> interface.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.AddressOfMember(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr@)">
      <summary>Retrieves the addresses of static functions or variables, such as those defined in a DLL.</summary>
      <param name="memid">The member ID of the <see langword="static" /> member's address to retrieve.</param>
      <param name="invKind">One of the <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> values that specifies whether the member is a property, and if so, what kind.</param>
      <param name="ppv">When this method returns, contains a reference to the <see langword="static" /> member. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.CreateInstance(System.Object,System.Guid@,System.Object@)">
      <summary>Creates a new instance of a type that describes a component class (coclass).</summary>
      <param name="pUnkOuter">An object that acts as the controlling <see langword="IUnknown" />.</param>
      <param name="riid">The IID of the interface that the caller uses to communicate with the resulting object.</param>
      <param name="ppvObj">When this method returns, contains a reference to the created object. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllCustData(System.IntPtr)">
      <summary>Gets all custom data items for the library.</summary>
      <param name="pCustData">A pointer to <see langword="CUSTDATA" />, which holds all custom data items.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllFuncCustData(System.Int32,System.IntPtr)">
      <summary>Gets all custom data from the specified function.</summary>
      <param name="index">The index of the function to get the custom data for.</param>
      <param name="pCustData">A pointer to <see langword="CUSTDATA" />, which holds all custom data items.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllImplTypeCustData(System.Int32,System.IntPtr)">
      <summary>Gets all custom data for the specified implementation type.</summary>
      <param name="index">The index of the implementation type for the custom data.</param>
      <param name="pCustData">A pointer to <see langword="CUSTDATA" /> which holds all custom data items.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllParamCustData(System.Int32,System.Int32,System.IntPtr)">
      <summary>Gets all of the custom data for the specified function parameter.</summary>
      <param name="indexFunc">The index of the function to get the custom data for.</param>
      <param name="indexParam">The index of the parameter of this function to get the custom data for.</param>
      <param name="pCustData">A pointer to <see langword="CUSTDATA" />, which holds all custom data items.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllVarCustData(System.Int32,System.IntPtr)">
      <summary>Gets the variable for the custom data.</summary>
      <param name="index">The index of the variable to get the custom data for.</param>
      <param name="pCustData">A pointer to <see langword="CUSTDATA" />, which holds all custom data items.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetContainingTypeLib(System.Runtime.InteropServices.ComTypes.ITypeLib@,System.Int32@)">
      <summary>Retrieves the type library that contains this type description and its index within that type library.</summary>
      <param name="ppTLB">When this method returns, contains a reference to the containing type library. This parameter is passed uninitialized.</param>
      <param name="pIndex">When this method returns, contains a reference to the index of the type description within the containing type library. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetCustData(System.Guid@,System.Object@)">
      <summary>Gets the custom data.</summary>
      <param name="guid">The GUID used to identify the data.</param>
      <param name="pVarVal">When this method returns, contains an <see langword="Object" /> that specifies where to put the retrieved data. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetDllEntry(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>Retrieves a description or specification of an entry point for a function in a DLL.</summary>
      <param name="memid">The ID of the member function whose DLL entry description is to be returned.</param>
      <param name="invKind">One of the <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> values that specifies the kind of member identified by <paramref name="memid" />.</param>
      <param name="pBstrDllName">If not <see langword="null" />, the function sets <paramref name="pBstrDllName" /> to a <see langword="BSTR" /> that contains the name of the DLL.</param>
      <param name="pBstrName">If not <see langword="null" />, the function sets <c>lpbstrName</c> to a <see langword="BSTR" /> that contains the name of the entry point.</param>
      <param name="pwOrdinal">If not <see langword="null" />, and the function is defined by an ordinal, then <c>lpwOrdinal</c> is set to point to the ordinal.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary>Retrieves the documentation string, the complete Help file name and path, and the context ID for the Help topic for a specified type description.</summary>
      <param name="index">The ID of the member whose documentation is to be returned.</param>
      <param name="strName">When this method returns, contains the name of the item method. This parameter is passed uninitialized.</param>
      <param name="strDocString">When this method returns, contains the documentation string for the specified item. This parameter is passed uninitialized.</param>
      <param name="dwHelpContext">When this method returns, contains a reference to the Help context associated with the specified item. This parameter is passed uninitialized.</param>
      <param name="strHelpFile">When this method returns, contains the fully qualified name of the Help file. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetDocumentation2(System.Int32,System.String@,System.Int32@,System.String@)">
      <summary>Retrieves the documentation string, the complete Help file name and path, the localization context to use, and the context ID for the library Help topic in the Help file.</summary>
      <param name="memid">The member identifier for the type description.</param>
      <param name="pbstrHelpString">When this method returns, contains a <see langword="BSTR" /> that contains the name of the specified item. If the caller does not need the item name, <paramref name="pbstrHelpString" /> can be <see langword="null" />. This parameter is passed uninitialized.</param>
      <param name="pdwHelpStringContext">When this method returns, contains the Help localization context. If the caller does not need the Help context, <paramref name="pdwHelpStringContext" /> can be <see langword="null" />. This parameter is passed uninitialized.</param>
      <param name="pbstrHelpStringDll">When this method returns, contains a <see langword="BSTR" /> that contains the fully qualified name of the file containing the DLL used for the Help file. If the caller does not need the file name, <paramref name="pbstrHelpStringDll" /> can be <see langword="null" />. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetFuncCustData(System.Int32,System.Guid@,System.Object@)">
      <summary>Gets the custom data from the specified function.</summary>
      <param name="index">The index of the function to get the custom data for.</param>
      <param name="guid">The GUID used to identify the data.</param>
      <param name="pVarVal">When this method returns, contains an <see langword="Object" /> that specified where to put the data. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetFuncDesc(System.Int32,System.IntPtr@)">
      <summary>Retrieves the <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> structure that contains information about a specified function.</summary>
      <param name="index">The index of the function description to return.</param>
      <param name="ppFuncDesc">When this method returns, contains a reference to a <see langword="FUNCDESC" /> structure that describes the specified function. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetFuncIndexOfMemId(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.Int32@)">
      <summary>Binds to a specific member based on a known DISPID, where the member name is not known (for example, when binding to a default member).</summary>
      <param name="memid">The member identifier.</param>
      <param name="invKind">One of the <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> values that specifies the kind of member identified by memid.</param>
      <param name="pFuncIndex">When this method returns, contains an index into the function. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetIDsOfNames(System.String[],System.Int32,System.Int32[])">
      <summary>Maps between member names and member IDs, and parameter names and parameter IDs.</summary>
      <param name="rgszNames">An array of names to map.</param>
      <param name="cNames">The count of names to map.</param>
      <param name="pMemId">When this method returns, contains a reference to an array in which name mappings are placed. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetImplTypeCustData(System.Int32,System.Guid@,System.Object@)">
      <summary>Gets the implementation type of the custom data.</summary>
      <param name="index">The index of the implementation type for the custom data.</param>
      <param name="guid">The GUID used to identify the data.</param>
      <param name="pVarVal">When this method returns, contains an <see langword="Object" /> that specifies where to put the retrieved data. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetImplTypeFlags(System.Int32,System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS@)">
      <summary>Retrieves the <see cref="T:System.Runtime.InteropServices.IMPLTYPEFLAGS" /> value for one implemented interface or base interface in a type description.</summary>
      <param name="index">The index of the implemented interface or base interface.</param>
      <param name="pImplTypeFlags">When this method returns, contains a reference to the <see langword="IMPLTYPEFLAGS" /> enumeration. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetMops(System.Int32,System.String@)">
      <summary>Retrieves marshaling information.</summary>
      <param name="memid">The member ID that indicates which marshaling information is needed.</param>
      <param name="pBstrMops">When this method returns, contains a reference to the <see langword="opcode" /> string used in marshaling the fields of the structure described by the referenced type description, or returns <see langword="null" /> if there is no information to return. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetNames(System.Int32,System.String[],System.Int32,System.Int32@)">
      <summary>Retrieves the variable with the specified member ID (or the name of the property or method and its parameters) that corresponds to the specified function ID.</summary>
      <param name="memid">The ID of the member whose name (or names) is to be returned.</param>
      <param name="rgBstrNames">When this method returns, contains the name (or names) associated with the member. This parameter is passed uninitialized.</param>
      <param name="cMaxNames">The length of the <paramref name="rgBstrNames" /> array.</param>
      <param name="pcNames">When this method returns, contains the number of names in the <paramref name="rgBstrNames" /> array. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetParamCustData(System.Int32,System.Int32,System.Guid@,System.Object@)">
      <summary>Gets the specified custom data parameter.</summary>
      <param name="indexFunc">The index of the function to get the custom data for.</param>
      <param name="indexParam">The index of the parameter of this function to get the custom data for.</param>
      <param name="guid">The GUID used to identify the data.</param>
      <param name="pVarVal">When this method returns, contains an <see langword="Object" /> that specifies where to put the retrieved data. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetRefTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary>Retrieves the referenced type descriptions, if a type description references other type descriptions.</summary>
      <param name="hRef">A handle to the referenced type description to return.</param>
      <param name="ppTI">When this method returns, contains the referenced type description. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetRefTypeOfImplType(System.Int32,System.Int32@)">
      <summary>Retrieves the type description of the implemented interface types, if a type description describes a COM class.</summary>
      <param name="index">The index of the implemented type whose handle is returned.</param>
      <param name="href">When this method returns, contains a reference to a handle for the implemented interface. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeAttr(System.IntPtr@)">
      <summary>Retrieves a <see cref="T:System.Runtime.InteropServices.TYPEATTR" /> structure that contains the attributes of the type description.</summary>
      <param name="ppTypeAttr">When this method returns, contains a reference to the structure that contains the attributes of this type description. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary>Retrieves the <see langword="ITypeComp" /> interface for the type description, which enables a client compiler to bind to the type description's members.</summary>
      <param name="ppTComp">When this method returns, contains a reference to the <see langword="ITypeComp" /> of the containing type library. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeFlags(System.Int32@)">
      <summary>Returns the type flags without any allocations. This method returns a <see langword="DWORD" /> type flag, which expands the type flags without growing the <see langword="TYPEATTR" /> (type attribute).</summary>
      <param name="pTypeFlags">When this method returns, contains a <see langword="DWORD" /> reference to a <see langword="TYPEFLAG" />. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeKind(System.Runtime.InteropServices.ComTypes.TYPEKIND@)">
      <summary>Returns the <see langword="TYPEKIND" /> enumeration quickly, without doing any allocations.</summary>
      <param name="pTypeKind">When this method returns, contains a reference to a <see langword="TYPEKIND" /> enumeration. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetVarCustData(System.Int32,System.Guid@,System.Object@)">
      <summary>Gets the variable for the custom data.</summary>
      <param name="index">The index of the variable to get the custom data for.</param>
      <param name="guid">The GUID used to identify the data.</param>
      <param name="pVarVal">When this method returns, contains an <see langword="Object" /> that specifies where to put the retrieved data. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetVarDesc(System.Int32,System.IntPtr@)">
      <summary>Retrieves a <see langword="VARDESC" /> structure that describes the specified variable.</summary>
      <param name="index">The index of the variable description to return.</param>
      <param name="ppVarDesc">When this method returns, contains a reference to the <see langword="VARDESC" /> structure that describes the specified variable. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetVarIndexOfMemId(System.Int32,System.Int32@)">
      <summary>Binds to a specific member based on a known <see langword="DISPID" />, where the member name is not known (for example, when binding to a default member).</summary>
      <param name="memid">The member identifier.</param>
      <param name="pVarIndex">When this method returns, contains an index of <paramref name="memid" />. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.Invoke(System.Object,System.Int32,System.Int16,System.Runtime.InteropServices.ComTypes.DISPPARAMS@,System.IntPtr,System.IntPtr,System.Int32@)">
      <summary>Invokes a method, or accesses a property of an object, that implements the interface described by the type description.</summary>
      <param name="pvInstance">A reference to the interface described by this type description.</param>
      <param name="memid">Identifier of the interface member.</param>
      <param name="wFlags">Flags describing the context of the invoke call.</param>
      <param name="pDispParams">A reference to a structure that contains an array of arguments, an array of DISPIDs for named arguments, and counts of the number of elements in each array.</param>
      <param name="pVarResult">A reference to the location at which the result is to be stored. If <paramref name="wFlags" /> specifies <see langword="DISPATCH_PROPERTYPUT" /> or <see langword="DISPATCH_PROPERTYPUTREF" />, <paramref name="pVarResult" /> is ignored. Set to <see langword="null" /> if no result is desired.</param>
      <param name="pExcepInfo">A pointer to an exception information structure, which is filled in only if <see langword="DISP_E_EXCEPTION" /> is returned.</param>
      <param name="puArgErr">If <see langword="Invoke" /> returns <see langword="DISP_E_TYPEMISMATCH" />, <paramref name="puArgErr" /> indicates the index of the argument with incorrect type. If more than one argument returns an error, <paramref name="puArgErr" /> indicates only the first argument with an error.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.ReleaseFuncDesc(System.IntPtr)">
      <summary>Releases a <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> structure previously returned by the <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetFuncDesc(System.Int32,System.IntPtr@)" /> method.</summary>
      <param name="pFuncDesc">A reference to the <see langword="FUNCDESC" /> structure to release.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.ReleaseTypeAttr(System.IntPtr)">
      <summary>Releases a <see cref="T:System.Runtime.InteropServices.TYPEATTR" /> structure previously returned by the <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeAttr(System.IntPtr@)" /> method.</summary>
      <param name="pTypeAttr">A reference to the <see langword="TYPEATTR" /> structure to release.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.ReleaseVarDesc(System.IntPtr)">
      <summary>Releases a <see langword="VARDESC" /> structure previously returned by the <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetVarDesc(System.Int32,System.IntPtr@)" /> method.</summary>
      <param name="pVarDesc">A reference to the <see langword="VARDESC" /> structure to release.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeLib">
      <summary>Provides the managed definition of the <see langword="ITypeLib" /> interface.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.FindName(System.String,System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo[],System.Int32[],System.Int16@)">
      <summary>Finds occurrences of a type description in a type library.</summary>
      <param name="szNameBuf">The name to search for. This is an in/out parameter.</param>
      <param name="lHashVal">A hash value to speed up the search, computed by the <see langword="LHashValOfNameSys" /> function. If <paramref name="lHashVal" /> is 0, a value is computed.</param>
      <param name="ppTInfo">When this method returns, contains an array of pointers to the type descriptions that contain the name specified in <paramref name="szNameBuf" />. This parameter is passed uninitialized.</param>
      <param name="rgMemId">An array of the <see langword="MEMBERID" /> 's of the found items; <paramref name="rgMemId" /> [i] is the <see langword="MEMBERID" /> that indexes into the type description specified by <paramref name="ppTInfo" /> [i]. Cannot be <see langword="null" />.</param>
      <param name="pcFound">On entry, indicates how many instances to look for. For example, <paramref name="pcFound" /> = 1 can be called to find the first occurrence. The search stops when one instance is found.  
  
 On exit, indicates the number of instances that were found. If the <see langword="in" /> and <see langword="out" /> values of <paramref name="pcFound" /> are identical, there might be more type descriptions that contain the name.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary>Retrieves the library's documentation string, the complete Help file name and path, and the context identifier for the library Help topic in the Help file.</summary>
      <param name="index">The index of the type description whose documentation is to be returned.</param>
      <param name="strName">When this method returns, contains a string that represents the name of the specified item. This parameter is passed uninitialized.</param>
      <param name="strDocString">When this method returns, contains a string that represents the documentation string for the specified item. This parameter is passed uninitialized.</param>
      <param name="dwHelpContext">When this method returns, contains the Help context identifier associated with the specified item. This parameter is passed uninitialized.</param>
      <param name="strHelpFile">When this method returns, contains a string that represents the fully qualified name of the Help file. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetLibAttr(System.IntPtr@)">
      <summary>Retrieves the structure that contains the library's attributes.</summary>
      <param name="ppTLibAttr">When this method returns, contains a structure that contains the library's attributes. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary>Enables a client compiler to bind to a library's types, variables, constants, and global functions.</summary>
      <param name="ppTComp">When this method returns, contains an instance of a <see langword="ITypeComp" /> instance for this <see langword="ITypeLib" />. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary>Retrieves the specified type description in the library.</summary>
      <param name="index">The index of the <see langword="ITypeInfo" /> interface to return.</param>
      <param name="ppTI">When this method returns, contains an <see langword="ITypeInfo" /> describing the type referenced by <paramref name="index" />. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfoCount">
      <summary>Returns the number of type descriptions in the type library.</summary>
      <returns>The number of type descriptions in the type library.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfoOfGuid(System.Guid@,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary>Retrieves the type description that corresponds to the specified GUID.</summary>
      <param name="guid">The IID of the interface or CLSID of the class whose type info is requested.</param>
      <param name="ppTInfo">When this method returns, contains the requested <see langword="ITypeInfo" /> interface. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfoType(System.Int32,System.Runtime.InteropServices.ComTypes.TYPEKIND@)">
      <summary>Retrieves the type of a type description.</summary>
      <param name="index">The index of the type description within the type library.</param>
      <param name="pTKind">When this method returns, contains a reference to the <see langword="TYPEKIND" /> enumeration for the type description. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.IsName(System.String,System.Int32)">
      <summary>Indicates whether a passed-in string contains the name of a type or member described in the library.</summary>
      <param name="szNameBuf">The string to test. This is an in/out parameter.</param>
      <param name="lHashVal">The hash value of <paramref name="szNameBuf" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="szNameBuf" /> was found in the type library; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.ReleaseTLibAttr(System.IntPtr)">
      <summary>Releases the <see cref="T:System.Runtime.InteropServices.TYPELIBATTR" /> structure originally obtained from the <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetLibAttr(System.IntPtr@)" /> method.</summary>
      <param name="pTLibAttr">The <see langword="TLIBATTR" /> structure to release.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeLib2">
      <summary>Provides a managed definition of the <see langword="ITypeLib2" /> interface.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.FindName(System.String,System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo[],System.Int32[],System.Int16@)">
      <summary>Finds occurrences of a type description in a type library.</summary>
      <param name="szNameBuf">The name to search for.</param>
      <param name="lHashVal">A hash value to speed up the search, computed by the <see langword="LHashValOfNameSys" /> function. If <paramref name="lHashVal" /> is 0, a value is computed.</param>
      <param name="ppTInfo">When this method returns, contains an array of pointers to the type descriptions that contain the name specified in <paramref name="szNameBuf" />. This parameter is passed uninitialized.</param>
      <param name="rgMemId">When this method returns, contains an array of the <see langword="MEMBERID" />s of the found items; <paramref name="rgMemId" /> [i] is the <see langword="MEMBERID" /> that indexes into the type description specified by <paramref name="ppTInfo" /> [i]. This parameter cannot be <see langword="null" />. This parameter is passed uninitialized.</param>
      <param name="pcFound">On entry, a value, passed by reference, that indicates how many instances to look for. For example, <paramref name="pcFound" /> = 1 can be called to find the first occurrence. The search stops when one instance is found.  
  
 On exit, indicates the number of instances that were found. If the <see langword="in" /> and <see langword="out" /> values of <paramref name="pcFound" /> are identical, there might be more type descriptions that contain the name.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetAllCustData(System.IntPtr)">
      <summary>Gets all custom data items for the library.</summary>
      <param name="pCustData">A pointer to <see langword="CUSTDATA" />, which holds all custom data items.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetCustData(System.Guid@,System.Object@)">
      <summary>Gets the custom data.</summary>
      <param name="guid">A <see cref="T:System.Guid" /> , passed by reference, that is used to identify the data.</param>
      <param name="pVarVal">When this method returns, contains an object that specifies where to put the retrieved data. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary>Retrieves the library's documentation string, the complete Help file name and path, and the context identifier for the library Help topic in the Help file.</summary>
      <param name="index">An index of the type description whose documentation is to be returned.</param>
      <param name="strName">When this method returns, contains a string that specifies the name of the specified item. This parameter is passed uninitialized.</param>
      <param name="strDocString">When this method returns, contains the documentation string for the specified item. This parameter is passed uninitialized.</param>
      <param name="dwHelpContext">When this method returns, contains the Help context identifier associated with the specified item. This parameter is passed uninitialized.</param>
      <param name="strHelpFile">When this method returns, contains a string that specifies the fully qualified name of the Help file. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetDocumentation2(System.Int32,System.String@,System.Int32@,System.String@)">
      <summary>Retrieves the library's documentation string, the complete Help file name and path, the localization context to use, and the context ID for the library Help topic in the Help file.</summary>
      <param name="index">An index of the type description whose documentation is to be returned; if <paramref name="index" /> is -1, the documentation for the library is returned.</param>
      <param name="pbstrHelpString">When this method returns, contains a BSTR that specifies the name of the specified item. If the caller does not need the item name, <paramref name="pbstrHelpString" /> can be <see langword="null" />. This parameter is passed uninitialized.</param>
      <param name="pdwHelpStringContext">When this method returns, contains the Help localization context. If the caller does not need the Help context, <paramref name="pdwHelpStringContext" /> can be <see langword="null" />. This parameter is passed uninitialized.</param>
      <param name="pbstrHelpStringDll">When this method returns, contains a BSTR that specifies the fully qualified name of the file containing the DLL used for Help file. If the caller does not need the file name, <paramref name="pbstrHelpStringDll" /> can be <see langword="null" />. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetLibAttr(System.IntPtr@)">
      <summary>Retrieves the structure that contains the library's attributes.</summary>
      <param name="ppTLibAttr">When this method returns, contains a structure that contains the library's attributes. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetLibStatistics(System.IntPtr,System.Int32@)">
      <summary>Returns statistics about a type library that are required for efficient sizing of hash tables.</summary>
      <param name="pcUniqueNames">A pointer to a count of unique names. If the caller does not need this information, set to <see langword="null" />.</param>
      <param name="pcchUniqueNames">When this method returns, contains a pointer to a change in the count of unique names. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary>Enables a client compiler to bind to a library's types, variables, constants, and global functions.</summary>
      <param name="ppTComp">When this method returns, contains an <see langword="ITypeComp" /> instance for this <see langword="ITypeLib" />. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary>Retrieves the specified type description in the library.</summary>
      <param name="index">An index of the <see langword="ITypeInfo" /> interface to return.</param>
      <param name="ppTI">When this method returns, contains an <see langword="ITypeInfo" /> describing the type referenced by <paramref name="index" />. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfoCount">
      <summary>Returns the number of type descriptions in the type library.</summary>
      <returns>The number of type descriptions in the type library.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfoOfGuid(System.Guid@,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary>Retrieves the type description that corresponds to the specified GUID.</summary>
      <param name="guid">The <see cref="T:System.Guid" />, passed by reference, that represents the IID of the <see langword="CLSID" /> interface of the class whose type info is requested.</param>
      <param name="ppTInfo">When this method returns, contains the requested <see langword="ITypeInfo" /> interface. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfoType(System.Int32,System.Runtime.InteropServices.ComTypes.TYPEKIND@)">
      <summary>Retrieves the type of a type description.</summary>
      <param name="index">The index of the type description within the type library.</param>
      <param name="pTKind">When this method returns, contains a reference to the <see langword="TYPEKIND" /> enumeration for the type description. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.IsName(System.String,System.Int32)">
      <summary>Indicates whether a passed-in string contains the name of a type or member described in the library.</summary>
      <param name="szNameBuf">The string to test.</param>
      <param name="lHashVal">The hash value of <paramref name="szNameBuf" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="szNameBuf" /> was found in the type library; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.ReleaseTLibAttr(System.IntPtr)">
      <summary>Releases the <see cref="T:System.Runtime.InteropServices.TYPELIBATTR" /> structure originally obtained from the <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetLibAttr(System.IntPtr@)" /> method.</summary>
      <param name="pTLibAttr">The <see langword="TLIBATTR" /> structure to release.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.LIBFLAGS">
      <summary>Defines flags that apply to type libraries.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.LIBFLAGS.LIBFLAG_FCONTROL">
      <summary>The type library describes controls and should not be displayed in type browsers intended for nonvisual objects.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.LIBFLAGS.LIBFLAG_FHASDISKIMAGE">
      <summary>The type library exists in a persisted form on disk.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.LIBFLAGS.LIBFLAG_FHIDDEN">
      <summary>The type library should not be displayed to users, although its use is not restricted. The type library should be used by controls. Hosts should create a new type library that wraps the control with extended properties.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.LIBFLAGS.LIBFLAG_FRESTRICTED">
      <summary>The type library is restricted, and should not be displayed to users.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.PARAMDESC">
      <summary>Contains information about how to transfer a structure element, parameter, or function return value between processes.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMDESC.lpVarValue">
      <summary>Represents a pointer to a value that is being passed between processes.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMDESC.wParamFlags">
      <summary>Represents bitmask values that describe the structure element, parameter, or return value.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.PARAMFLAG">
      <summary>Describes how to transfer a structure element, parameter, or function return value between processes.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FHASCUSTDATA">
      <summary>The parameter has custom data.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FHASDEFAULT">
      <summary>The parameter has default behaviors defined.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FIN">
      <summary>The parameter passes information from the caller to the callee.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FLCID">
      <summary>The parameter is the local identifier of a client application.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FOPT">
      <summary>The parameter is optional.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FOUT">
      <summary>The parameter returns information from the callee to the caller.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FRETVAL">
      <summary>The parameter is the return value of the member.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_NONE">
      <summary>Does not specify whether the parameter passes or receives information.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.STATSTG">
      <summary>Contains statistical information about an open storage, stream, or byte-array object.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.atime">
      <summary>Specifies the last access time for this storage, stream, or byte array.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.cbSize">
      <summary>Specifies the size, in bytes, of the stream or byte array.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.clsid">
      <summary>Indicates the class identifier for the storage object.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.ctime">
      <summary>Indicates the creation time for this storage, stream, or byte array.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.grfLocksSupported">
      <summary>Indicates the types of region locking supported by the stream or byte array.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.grfMode">
      <summary>Indicates the access mode that was specified when the object was opened.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.grfStateBits">
      <summary>Indicates the current state bits of the storage object (the value most recently set by the <see langword="IStorage::SetStateBits" /> method).</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.mtime">
      <summary>Indicates the last modification time for this storage, stream, or byte array.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.pwcsName">
      <summary>Represents a pointer to a null-terminated string containing the name of the object described by this structure.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.reserved">
      <summary>Reserved for future use.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.type">
      <summary>Indicates the type of storage object, which is one of the values from the <see langword="STGTY" /> enumeration.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.SYSKIND">
      <summary>Identifies the target operating system platform.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.SYSKIND.SYS_MAC">
      <summary>The target operating system for the type library is Apple Macintosh. By default, all data fields are aligned on even-byte boundaries.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.SYSKIND.SYS_WIN16">
      <summary>The target operating system for the type library is 16-bit Windows systems. By default, data fields are packed.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.SYSKIND.SYS_WIN32">
      <summary>The target operating system for the type library is 32-bit Windows systems. By default, data fields are naturally aligned (for example, 2-byte integers are aligned on even-byte boundaries; 4-byte integers are aligned on quad-word boundaries, and so on).</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.SYSKIND.SYS_WIN64">
      <summary>The target operating system for the type library is 64-bit Windows systems.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPEATTR">
      <summary>Contains attributes of a <see langword="UCOMITypeInfo" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cbAlignment">
      <summary>Specifies the byte alignment for an instance of this type.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cbSizeInstance">
      <summary>The size of an instance of this type.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cbSizeVft">
      <summary>The size of this type's virtual method table (VTBL).</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cFuncs">
      <summary>Indicates the number of functions on the interface this structure describes.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cImplTypes">
      <summary>Indicates the number of implemented interfaces on the interface this structure describes.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cVars">
      <summary>Indicates the number of variables and data fields on the interface described by this structure.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.dwReserved">
      <summary>Reserved for future use.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.guid">
      <summary>The GUID of the type information.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.idldescType">
      <summary>IDL attributes of the described type.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.lcid">
      <summary>Locale of member names and documentation strings.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.lpstrSchema">
      <summary>Reserved for future use.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.MEMBER_ID_NIL">
      <summary>A constant used with the <see cref="F:System.Runtime.InteropServices.TYPEATTR.memidConstructor" /> and <see cref="F:System.Runtime.InteropServices.TYPEATTR.memidDestructor" /> fields.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.memidConstructor">
      <summary>ID of constructor, or <see cref="F:System.Runtime.InteropServices.TYPEATTR.MEMBER_ID_NIL" /> if none.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.memidDestructor">
      <summary>ID of destructor, or <see cref="F:System.Runtime.InteropServices.TYPEATTR.MEMBER_ID_NIL" /> if none.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.tdescAlias">
      <summary>If <see cref="F:System.Runtime.InteropServices.TYPEATTR.typekind" /> == <see cref="F:System.Runtime.InteropServices.TYPEKIND.TKIND_ALIAS" />, specifies the type for which this type is an alias.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.typekind">
      <summary>A <see cref="T:System.Runtime.InteropServices.TYPEKIND" /> value describing the type this information describes.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.wMajorVerNum">
      <summary>Major version number.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.wMinorVerNum">
      <summary>Minor version number.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.wTypeFlags">
      <summary>A <see cref="T:System.Runtime.InteropServices.TYPEFLAGS" /> value describing this information.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPEDESC">
      <summary>Describes the type of a variable, return type of a function, or the type of a function parameter.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEDESC.lpValue">
      <summary>If the variable is <see langword="VT_SAFEARRAY" /> or <see langword="VT_PTR" />, the <see langword="lpValue" /> field contains a pointer to a <see langword="TYPEDESC" /> that specifies the element type.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEDESC.vt">
      <summary>Indicates the variant type for the item described by this <see langword="TYPEDESC" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPEFLAGS">
      <summary>Defines the properties and attributes of a type description.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FAGGREGATABLE">
      <summary>The class supports aggregation.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FAPPOBJECT">
      <summary>A type description that describes an <see langword="Application" /> object.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FCANCREATE">
      <summary>Instances of the type can be created by <see langword="ITypeInfo::CreateInstance" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FCONTROL">
      <summary>The type is a control from which other types will be derived and should not be displayed to users.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FDISPATCHABLE">
      <summary>Indicates that the interface derives from <see langword="IDispatch" />, either directly or indirectly. This flag is computed; there is no Object Description Language for the flag.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FDUAL">
      <summary>The interface supplies both <see langword="IDispatch" /> and VTBL binding.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FHIDDEN">
      <summary>The type should not be displayed to browsers.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FLICENSED">
      <summary>The type is licensed.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FNONEXTENSIBLE">
      <summary>The interface cannot add members at run time.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FOLEAUTOMATION">
      <summary>The types used in the interface are fully compatible with Automation, including VTBL binding support. Setting dual on an interface sets both this flag and the  <see cref="F:System.Runtime.InteropServices.TYPEFLAGS.TYPEFLAG_FDUAL" />. This flag is not allowed on dispinterfaces.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FPREDECLID">
      <summary>The type is predefined. The client application should automatically create a single instance of the object that has this attribute. The name of the variable that points to the object is the same as the class name of the object.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FPROXY">
      <summary>Indicates that the interface will be using a proxy/stub dynamic link library. This flag specifies that the type library proxy should not be unregistered when the type library is unregistered.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FREPLACEABLE">
      <summary>The object supports <see langword="IConnectionPointWithDefault" />, and has default behaviors.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FRESTRICTED">
      <summary>Should not be accessible from macro languages. This flag is intended for system-level types or types that type browsers should not display.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FREVERSEBIND">
      <summary>Indicates base interfaces should be checked for name resolution before checking children, which is the reverse of the default behavior.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPEKIND">
      <summary>Specifies various types of data and functions.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_ALIAS">
      <summary>A type that is an alias for another type.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_COCLASS">
      <summary>A set of implemented components interfaces.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_DISPATCH">
      <summary>A set of methods and properties that are accessible through <see langword="IDispatch::Invoke" />. By default, dual interfaces return <see langword="TKIND_DISPATCH" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_ENUM">
      <summary>A set of enumerators.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_INTERFACE">
      <summary>A type that has virtual functions, all of which are pure.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_MAX">
      <summary>End-of-enumeration marker.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_MODULE">
      <summary>A module that can have only static functions and data (for example, a DLL).</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_RECORD">
      <summary>A structure with no methods.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_UNION">
      <summary>A union of all members that have an offset of zero.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPELIBATTR">
      <summary>Identifies a particular type library and provides localization support for member names.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.guid">
      <summary>Represents a globally unique library ID of a type library.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.lcid">
      <summary>Represents a locale ID of a type library.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.syskind">
      <summary>Represents the target hardware platform of a type library.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.wLibFlags">
      <summary>Represents library flags.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.wMajorVerNum">
      <summary>Represents the major version number of a type library.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.wMinorVerNum">
      <summary>Represents the minor version number of a type library.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.VARDESC">
      <summary>Describes a variable, constant, or data member.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.desc">
      <summary>Contains information about a variable.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.elemdescVar">
      <summary>Contains the variable type.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.lpstrSchema">
      <summary>This field is reserved for future use.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.memid">
      <summary>Indicates the member ID of a variable.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.varkind">
      <summary>Defines how to marshal a variable.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.wVarFlags">
      <summary>Defines the properties of a variable.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.VARDESC.DESCUNION">
      <summary>Contains information about a variable.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.DESCUNION.lpvarValue">
      <summary>Describes a symbolic constant.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.DESCUNION.oInst">
      <summary>Indicates the offset of this variable within the instance.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.VARFLAGS">
      <summary>Identifies the constants that define the properties of a variable.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FBINDABLE">
      <summary>The variable supports data binding.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FDEFAULTBIND">
      <summary>The variable is the single property that best represents the object. Only one variable in type information can have this attribute.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FDEFAULTCOLLELEM">
      <summary>Permits an optimization in which the compiler looks for a member named "xyz" on the type of "abc". If such a member is found and is flagged as an accessor function for an element of the default collection, then a call is generated to that member function. Permitted on members in dispinterfaces and interfaces; not permitted on modules.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FDISPLAYBIND">
      <summary>The variable is displayed to the user as bindable. <see cref="F:System.Runtime.InteropServices.VARFLAGS.VARFLAG_FBINDABLE" /> must also be set.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FHIDDEN">
      <summary>The variable should not be displayed to the user in a browser, although it exists and is bindable.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FIMMEDIATEBIND">
      <summary>The variable is mapped as individual bindable properties.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FNONBROWSABLE">
      <summary>The variable appears in an object browser, but not in a properties browser.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FREADONLY">
      <summary>Assignment to the variable should not be allowed.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FREPLACEABLE">
      <summary>Tags the interface as having default behaviors.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FREQUESTEDIT">
      <summary>When set, any attempt to directly change the property results in a call to <see langword="IPropertyNotifySink::OnRequestEdit" />. The implementation of <see langword="OnRequestEdit" /> determines if the change is accepted.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FRESTRICTED">
      <summary>The variable should not be accessible from macro languages. This flag is intended for system-level variables or variables that you do not want type browsers to display.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FSOURCE">
      <summary>The variable returns an object that is a source of events.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FUIDEFAULT">
      <summary>The variable is the default display in the user interface.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.VARKIND">
      <summary>Defines the kind of variable.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARKIND.VAR_CONST">
      <summary>The <see langword="VARDESC" /> structure describes a symbolic constant. There is no memory associated with it.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARKIND.VAR_DISPATCH">
      <summary>The variable can be accessed only through <see langword="IDispatch::Invoke" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARKIND.VAR_PERINSTANCE">
      <summary>The variable is a field or member of the type. It exists at a fixed offset within each instance of the type.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARKIND.VAR_STATIC">
      <summary>There is only one instance of the variable.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComVisibleAttribute">
      <summary>Controls accessibility of an individual managed type or member, or of all types within an assembly, to COM.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComVisibleAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see langword="ComVisibleAttribute" /> class.</summary>
      <param name="visibility">
        <see langword="true" /> to indicate that the type is visible to COM; otherwise, <see langword="false" />. The default is <see langword="true" />.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComVisibleAttribute.Value">
      <summary>Gets a value that indicates whether the COM type is visible.</summary>
      <returns>
        <see langword="true" /> if the type is visible; otherwise, <see langword="false" />. The default value is <see langword="true" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.CurrencyWrapper">
      <summary>Wraps objects the marshaler should marshal as a <see langword="VT_CY" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CurrencyWrapper.#ctor(System.Decimal)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.CurrencyWrapper" /> class with the <see langword="Decimal" /> to be wrapped and marshaled as type <see langword="VT_CY" />.</summary>
      <param name="obj">The <see langword="Decimal" /> to be wrapped and marshaled as <see langword="VT_CY" />.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.CurrencyWrapper.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.CurrencyWrapper" /> class with the object containing the <see langword="Decimal" /> to be wrapped and marshaled as type <see langword="VT_CY" />.</summary>
      <param name="obj">The object containing the <see langword="Decimal" /> to be wrapped and marshaled as <see langword="VT_CY" />.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="obj" /> parameter is not a <see cref="T:System.Decimal" /> type.</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.CurrencyWrapper.WrappedObject">
      <summary>Gets the wrapped object to be marshaled as type <see langword="VT_CY" />.</summary>
      <returns>The wrapped object to be marshaled as type <see langword="VT_CY" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.CustomQueryInterfaceMode">
      <summary>Indicates whether the <see cref="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)" /> method's IUnknown::QueryInterface calls can use the <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" /> interface.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceMode.Allow">
      <summary>IUnknown::QueryInterface method calls can use the <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" /> interface. When you use this value, the <see cref="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)" /> method overload functions like the <see cref="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)" /> overload.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceMode.Ignore">
      <summary>IUnknown::QueryInterface method calls should ignore the <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" /> interface.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CustomQueryInterfaceResult">
      <summary>Provides return values for the <see cref="M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)" /> method.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceResult.Failed">
      <summary>The interface for a specific interface ID is not available. In this case, the returned interface is <see langword="null" />. E_NOINTERFACE is returned to the caller of IUnknown::QueryInterface.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled">
      <summary>The interface pointer that is returned from the <see cref="M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)" /> method can be used as the result of IUnknown::QueryInterface.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled">
      <summary>The custom <see langword="QueryInterface" /> was not used. Instead, the default implementation of IUnknown::QueryInterface should be used.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.DefaultCharSetAttribute">
      <summary>Specifies the value of the <see cref="T:System.Runtime.InteropServices.CharSet" /> enumeration. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DefaultCharSetAttribute.#ctor(System.Runtime.InteropServices.CharSet)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.DefaultCharSetAttribute" /> class with the specified <see cref="T:System.Runtime.InteropServices.CharSet" /> value.</summary>
      <param name="charSet">One of the <see cref="T:System.Runtime.InteropServices.CharSet" /> values.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DefaultCharSetAttribute.CharSet">
      <summary>Gets the default value of <see cref="T:System.Runtime.InteropServices.CharSet" /> for any call to <see cref="T:System.Runtime.InteropServices.DllImportAttribute" />.</summary>
      <returns>The default value of <see cref="T:System.Runtime.InteropServices.CharSet" /> for any call to <see cref="T:System.Runtime.InteropServices.DllImportAttribute" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute">
      <summary>Specifies the paths that are used to search for DLLs that provide functions for platform invokes.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute.#ctor(System.Runtime.InteropServices.DllImportSearchPath)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute" /> class, specifying the paths to use when searching for the targets of platform invokes.</summary>
      <param name="paths">A bitwise combination of enumeration values that specify the paths that the <c>LoadLibraryEx</c> function searches during platform invokes.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute.Paths">
      <summary>Gets a bitwise combination of enumeration values that specify the paths that the <c>LoadLibraryEx</c> function searches during platform invokes.</summary>
      <returns>A bitwise combination of enumeration values that specify search paths for platform invokes.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DispatchWrapper">
      <summary>Wraps objects the marshaler should marshal as a <see langword="VT_DISPATCH" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DispatchWrapper.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.DispatchWrapper" /> class with the object being wrapped.</summary>
      <param name="obj">The object to be wrapped and converted to <see cref="F:System.Runtime.InteropServices.VarEnum.VT_DISPATCH" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not a class or an array.  
  
 -or-  
  
 <paramref name="obj" /> does not support <see langword="IDispatch" />.</exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="obj" /> parameter was marked with a <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> attribute that was passed a value of <see langword="false" />.  
  
 -or-  
  
 The <paramref name="obj" /> parameter inherits from a type marked with a <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> attribute that was passed a value of <see langword="false" />.</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.DispatchWrapper.WrappedObject">
      <summary>Gets the object wrapped by the <see cref="T:System.Runtime.InteropServices.DispatchWrapper" />.</summary>
      <returns>The object wrapped by the <see cref="T:System.Runtime.InteropServices.DispatchWrapper" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DispIdAttribute">
      <summary>Specifies the COM dispatch identifier (DISPID) of a method, field, or property.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DispIdAttribute.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see langword="DispIdAttribute" /> class with the specified DISPID.</summary>
      <param name="dispId">The DISPID for the member.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DispIdAttribute.Value">
      <summary>Gets the DISPID for the member.</summary>
      <returns>The DISPID for the member.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DllImportAttribute">
      <summary>Indicates that the attributed method is exposed by an unmanaged dynamic-link library (DLL) as a static entry point.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
      <summary>Enables or disables best-fit mapping behavior when converting Unicode characters to ANSI characters.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention">
      <summary>Indicates the calling convention of an entry point.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.CharSet">
      <summary>Indicates how to marshal string parameters to the method and controls name mangling.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint">
      <summary>Indicates the name or ordinal of the DLL entry point to be called.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
      <summary>Controls whether the <see cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" /> field causes the common language runtime to search an unmanaged DLL for entry-point names other than the one specified.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
      <summary>Indicates whether unmanaged methods that have <see langword="HRESULT" /> or <see langword="retval" /> return values are directly translated or whether <see langword="HRESULT" /> or <see langword="retval" /> return values are automatically converted to exceptions.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError">
      <summary>Indicates whether the callee calls the <see langword="SetLastError" /> Windows API function before returning from the attributed method.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
      <summary>Enables or disables the throwing of an exception on an unmappable Unicode character that is converted to an ANSI "?" character.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.DllImportAttribute" /> class with the name of the DLL containing the method to import.</summary>
      <param name="dllName">The name of the DLL that contains the unmanaged method. This can include an assembly display name, if the DLL is included in an assembly.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DllImportAttribute.Value">
      <summary>Gets the name of the DLL file that contains the entry point.</summary>
      <returns>The name of the DLL file that contains the entry point.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DllImportSearchPath">
      <summary>Specifies the paths that are used to search for DLLs that provide functions for platform invokes.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.ApplicationDirectory">
      <summary>Include the application directory in the DLL search path.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.AssemblyDirectory">
      <summary>When searching for assembly dependencies, include the directory that contains the assembly itself, and search that directory first. This value is used by the .NET Framework, before the paths are passed to the Win32 LoadLibraryEx function.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior">
      <summary>Search the application directory, and then call the Win32 LoadLibraryEx function with the <c>LOAD_WITH_ALTERED_SEARCH_PATH</c> flag. This value is ignored if any other value is specified. Operating systems that do not support the <see cref="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute" /> attribute use this value, and ignore other values.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.SafeDirectories">
      <summary>Include the application directory, the <see langword="%WinDir%\System32" /> directory, and user directories in the DLL search path.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.System32">
      <summary>Include the <see langword="%WinDir%\System32" /> directory in the DLL search path.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.UseDllDirectoryForDependencies">
      <summary>Search for the dependencies of a DLL in the folder where the DLL is located before searching other folders.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.UserDirectories">
      <summary>Include any path that was explicitly added to the process-wide search path by using the Win32 <c>AddDllDirectory</c> function.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ErrorWrapper">
      <summary>Wraps objects the marshaler should marshal as a <see langword="VT_ERROR" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ErrorWrapper" /> class with the HRESULT that corresponds to the exception supplied.</summary>
      <param name="e">The exception to be converted to an error code.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ErrorWrapper" /> class with the HRESULT of the error.</summary>
      <param name="errorCode">The HRESULT of the error.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ErrorWrapper" /> class with an object containing the HRESULT of the error.</summary>
      <param name="errorCode">The object containing the HRESULT of the error.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="errorCode" /> parameter is not an <see cref="T:System.Int32" /> type.</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.ErrorWrapper.ErrorCode">
      <summary>Gets the error code of the wrapper.</summary>
      <returns>The HRESULT of the error.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.FieldOffsetAttribute">
      <summary>Indicates the physical position of fields within the unmanaged representation of a class or structure.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.FieldOffsetAttribute.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.FieldOffsetAttribute" /> class with the offset in the structure to the beginning of the field.</summary>
      <param name="offset">The offset in bytes from the beginning of the structure to the beginning of the field.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.FieldOffsetAttribute.Value">
      <summary>Gets the offset from the beginning of the structure to the beginning of the field.</summary>
      <returns>The offset from the beginning of the structure to the beginning of the field.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.GuidAttribute">
      <summary>Supplies an explicit <see cref="T:System.Guid" /> when an automatic GUID is undesirable.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.GuidAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.GuidAttribute" /> class with the specified GUID.</summary>
      <param name="guid">The <see cref="T:System.Guid" /> to be assigned.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.GuidAttribute.Value">
      <summary>Gets the <see cref="T:System.Guid" /> of the class.</summary>
      <returns>The <see cref="T:System.Guid" /> of the class.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomAdapter">
      <summary>Provides a way for clients to access the actual object, rather than the adapter object handed out by a custom marshaler.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomAdapter.GetUnderlyingObject">
      <summary>Provides access to the underlying object wrapped by a custom marshaler.</summary>
      <returns>The object contained by the adapter object.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomQueryInterface">
      <summary>Enables developers to provide a custom, managed implementation of the IUnknown::QueryInterface(REFIID riid, void **ppvObject) method.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)">
      <summary>Returns an interface according to a specified interface ID.</summary>
      <param name="iid">The GUID of the requested interface.</param>
      <param name="ppv">A reference to the requested interface, when this method returns.</param>
      <returns>One of the enumeration values that indicates whether a custom implementation of IUnknown::QueryInterface was used.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.InterfaceTypeAttribute">
      <summary>Indicates whether a managed interface is dual, dispatch-only, or <see langword="IUnknown" /> -only when exposed to COM.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InterfaceTypeAttribute.#ctor(System.Int16)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.InterfaceTypeAttribute" /> class with the specified <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> enumeration member.</summary>
      <param name="interfaceType">Describes how the interface should be exposed to COM clients.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.InterfaceTypeAttribute.#ctor(System.Runtime.InteropServices.ComInterfaceType)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.InterfaceTypeAttribute" /> class with the specified <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> enumeration member.</summary>
      <param name="interfaceType">One of the <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> values that describes how the interface should be exposed to COM clients.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.InterfaceTypeAttribute.Value">
      <summary>Gets the <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> value that describes how the interface should be exposed to COM.</summary>
      <returns>The <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> value that describes how the interface should be exposed to COM.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.InvalidComObjectException">
      <summary>The exception thrown when an invalid COM object is used.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor">
      <summary>Initializes an instance of the <see langword="InvalidComObjectException" /> with default properties.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see langword="COMException" /> class from serialization data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor(System.String)">
      <summary>Initializes an instance of the <see langword="InvalidComObjectException" /> with a message.</summary>
      <param name="message">The message that indicates the reason for the exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.InvalidComObjectException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.InvalidOleVariantTypeException">
      <summary>The exception thrown by the marshaler when it encounters an argument of a variant type that can not be marshaled to managed code.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor">
      <summary>Initializes a new instance of the <see langword="InvalidOleVariantTypeException" /> class with default values.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see langword="InvalidOleVariantTypeException" /> class from serialization data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see langword="InvalidOleVariantTypeException" /> class with a specified message.</summary>
      <param name="message">The message that indicates the reason for the exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.InvalidOleVariantTypeException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.LayoutKind">
      <summary>Controls the layout of an object when exported to unmanaged code.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.LayoutKind.Auto">
      <summary>The runtime automatically chooses an appropriate layout for the members of an object in unmanaged memory. Objects defined with this enumeration member cannot be exposed outside of managed code. Attempting to do so generates an exception.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.LayoutKind.Explicit">
      <summary>The precise position of each member of an object in unmanaged memory is explicitly controlled, subject to the setting of the <see cref="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack" /> field. Each member must use the <see cref="T:System.Runtime.InteropServices.FieldOffsetAttribute" /> to indicate the position of that field within the type.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.LayoutKind.Sequential">
      <summary>The members of the object are laid out sequentially, in the order in which they appear when exported to unmanaged memory. The members are laid out according to the packing specified in <see cref="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack" />, and can be noncontiguous.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.Marshal">
      <summary>Provides a collection of methods for allocating unmanaged memory, copying unmanaged memory blocks, and converting managed to unmanaged types, as well as other miscellaneous methods used when interacting with unmanaged code.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.Marshal.SystemDefaultCharSize">
      <summary>Represents the default character size on the system; the default is 2 for Unicode systems and 1 for ANSI systems. This field is read-only.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.Marshal.SystemMaxDBCSCharSize">
      <summary>Represents the maximum size of a double byte character set (DBCS) size, in bytes, for the current operating system. This field is read-only.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AddRef(System.IntPtr)">
      <summary>Increments the reference count on the specified interface.</summary>
      <param name="pUnk">The interface reference count to increment.</param>
      <returns>The new value of the reference count on the <paramref name="pUnk" /> parameter.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)">
      <summary>Allocates a block of memory of specified size from the COM task memory allocator.</summary>
      <param name="cb">The size of the block of memory to be allocated.</param>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory to satisfy the request.</exception>
      <returns>An integer representing the address of the block of memory allocated. This memory must be released with <see cref="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.Int32)">
      <summary>Allocates memory from the unmanaged memory of the process by using the specified number of bytes.</summary>
      <param name="cb">The required number of bytes in memory.</param>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory to satisfy the request.</exception>
      <returns>A pointer to the newly allocated memory. This memory must be released using the <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" /> method.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)">
      <summary>Allocates memory from the unmanaged memory of the process by using the pointer to the specified number of bytes.</summary>
      <param name="cb">The required number of bytes in memory.</param>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory to satisfy the request.</exception>
      <returns>A pointer to the newly allocated memory. This memory must be released using the <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" /> method.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AreComObjectsAvailableForCleanup">
      <summary>Indicates whether runtime callable wrappers (RCWs) from any context are available for cleanup.</summary>
      <returns>
        <see langword="true" /> if there are any RCWs available for cleanup; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.BindToMoniker(System.String)">
      <summary>Gets an interface pointer identified by the specified moniker.</summary>
      <param name="monikerName">The moniker corresponding to the desired interface pointer.</param>
      <exception cref="T:System.Runtime.InteropServices.COMException">An unrecognized HRESULT was returned by the unmanaged <see langword="BindToMoniker" /> method.</exception>
      <returns>An object containing a reference to the interface pointer identified by the <paramref name="monikerName" /> parameter. A moniker is a name, and in this case, the moniker is defined by an interface.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ChangeWrapperHandleStrength(System.Object,System.Boolean)">
      <summary>Changes the strength of an object's COM Callable Wrapper (CCW) handle.</summary>
      <param name="otp">The object whose CCW holds a reference counted handle. The handle is strong if the reference count on the CCW is greater than zero; otherwise, it is weak.</param>
      <param name="fIsWeak">
        <see langword="true" /> to change the strength of the handle on the <paramref name="otp" /> parameter to weak, regardless of its reference count; <see langword="false" /> to reset the handle strength on <paramref name="otp" /> to be reference counted.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CleanupUnusedObjectsInCurrentContext">
      <summary>Notifies the runtime to clean up all Runtime Callable Wrappers (RCWs) allocated in the current context.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Byte[],System.Int32,System.IntPtr,System.Int32)">
      <summary>Copies data from a one-dimensional, managed 8-bit unsigned integer array to an unmanaged memory pointer.</summary>
      <param name="source">The one-dimensional array to copy from.</param>
      <param name="startIndex">The zero-based index in the source array where copying should start.</param>
      <param name="destination">The memory pointer to copy to.</param>
      <param name="length">The number of array elements to copy.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> and <paramref name="length" /> are not valid.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="startIndex" />, <paramref name="destination" />, or <paramref name="length" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Char[],System.Int32,System.IntPtr,System.Int32)">
      <summary>Copies data from a one-dimensional, managed character array to an unmanaged memory pointer.</summary>
      <param name="source">The one-dimensional array to copy from.</param>
      <param name="startIndex">The zero-based index in the source array where copying should start.</param>
      <param name="destination">The memory pointer to copy to.</param>
      <param name="length">The number of array elements to copy.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> and <paramref name="length" /> are not valid.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="startIndex" />, <paramref name="destination" />, or <paramref name="length" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Double[],System.Int32,System.IntPtr,System.Int32)">
      <summary>Copies data from a one-dimensional, managed double-precision floating-point number array to an unmanaged memory pointer.</summary>
      <param name="source">The one-dimensional array to copy from.</param>
      <param name="startIndex">The zero-based index in the source array where copying should start.</param>
      <param name="destination">The memory pointer to copy to.</param>
      <param name="length">The number of array elements to copy.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> and <paramref name="length" /> are not valid.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="startIndex" />, <paramref name="destination" />, or <paramref name="length" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int16[],System.Int32,System.IntPtr,System.Int32)">
      <summary>Copies data from a one-dimensional, managed 16-bit signed integer array to an unmanaged memory pointer.</summary>
      <param name="source">The one-dimensional array to copy from.</param>
      <param name="startIndex">The zero-based index in the source array where copying should start.</param>
      <param name="destination">The memory pointer to copy to.</param>
      <param name="length">The number of array elements to copy.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> and <paramref name="length" /> are not valid.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="startIndex" />, <paramref name="destination" />, or <paramref name="length" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)">
      <summary>Copies data from a one-dimensional, managed 32-bit signed integer array to an unmanaged memory pointer.</summary>
      <param name="source">The one-dimensional array to copy from.</param>
      <param name="startIndex">The zero-based index in the source array where copying should start.</param>
      <param name="destination">The memory pointer to copy to.</param>
      <param name="length">The number of array elements to copy.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> and <paramref name="length" /> are not valid.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="startIndex" /> or <paramref name="length" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int64[],System.Int32,System.IntPtr,System.Int32)">
      <summary>Copies data from a one-dimensional, managed 64-bit signed integer array to an unmanaged memory pointer.</summary>
      <param name="source">The one-dimensional array to copy from.</param>
      <param name="startIndex">The zero-based index in the source array where copying should start.</param>
      <param name="destination">The memory pointer to copy to.</param>
      <param name="length">The number of array elements to copy.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> and <paramref name="length" /> are not valid.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="startIndex" />, <paramref name="destination" />, or <paramref name="length" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Byte[],System.Int32,System.Int32)">
      <summary>Copies data from an unmanaged memory pointer to a managed 8-bit unsigned integer array.</summary>
      <param name="source">The memory pointer to copy from.</param>
      <param name="destination">The array to copy to.</param>
      <param name="startIndex">The zero-based index in the destination array where copying should start.</param>
      <param name="length">The number of array elements to copy.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" />, or <paramref name="length" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Char[],System.Int32,System.Int32)">
      <summary>Copies data from an unmanaged memory pointer to a managed character array.</summary>
      <param name="source">The memory pointer to copy from.</param>
      <param name="destination">The array to copy to.</param>
      <param name="startIndex">The zero-based index in the destination array where copying should start.</param>
      <param name="length">The number of array elements to copy.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" />, or <paramref name="length" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Double[],System.Int32,System.Int32)">
      <summary>Copies data from an unmanaged memory pointer to a managed double-precision floating-point number array.</summary>
      <param name="source">The memory pointer to copy from.</param>
      <param name="destination">The array to copy to.</param>
      <param name="startIndex">The zero-based index in the destination array where copying should start.</param>
      <param name="length">The number of array elements to copy.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" />, or <paramref name="length" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int16[],System.Int32,System.Int32)">
      <summary>Copies data from an unmanaged memory pointer to a managed 16-bit signed integer array.</summary>
      <param name="source">The memory pointer to copy from.</param>
      <param name="destination">The array to copy to.</param>
      <param name="startIndex">The zero-based index in the destination array where copying should start.</param>
      <param name="length">The number of array elements to copy.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" />, or <paramref name="length" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int32[],System.Int32,System.Int32)">
      <summary>Copies data from an unmanaged memory pointer to a managed 32-bit signed integer array.</summary>
      <param name="source">The memory pointer to copy from.</param>
      <param name="destination">The array to copy to.</param>
      <param name="startIndex">The zero-based index in the destination array where copying should start.</param>
      <param name="length">The number of array elements to copy.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" />, or <paramref name="length" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int64[],System.Int32,System.Int32)">
      <summary>Copies data from an unmanaged memory pointer to a managed 64-bit signed integer array.</summary>
      <param name="source">The memory pointer to copy from.</param>
      <param name="destination">The array to copy to.</param>
      <param name="startIndex">The zero-based index in the destination array where copying should start.</param>
      <param name="length">The number of array elements to copy.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" />, or <paramref name="length" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.IntPtr[],System.Int32,System.Int32)">
      <summary>Copies data from an unmanaged memory pointer to a managed <see cref="T:System.IntPtr" /> array.</summary>
      <param name="source">The memory pointer to copy from.</param>
      <param name="destination">The array to copy to.</param>
      <param name="startIndex">The zero-based index in the destination array where copying should start.</param>
      <param name="length">The number of array elements to copy.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" />, or <paramref name="length" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Single[],System.Int32,System.Int32)">
      <summary>Copies data from an unmanaged memory pointer to a managed single-precision floating-point number array.</summary>
      <param name="source">The memory pointer to copy from.</param>
      <param name="destination">The array to copy to.</param>
      <param name="startIndex">The zero-based index in the destination array where copying should start.</param>
      <param name="length">The number of array elements to copy.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" />, or <paramref name="length" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr[],System.Int32,System.IntPtr,System.Int32)">
      <summary>Copies data from a one-dimensional, managed <see cref="T:System.IntPtr" /> array to an unmanaged memory pointer.</summary>
      <param name="source">The one-dimensional array to copy from.</param>
      <param name="startIndex">The zero-based index in the source array where copying should start.</param>
      <param name="destination">The memory pointer to copy to.</param>
      <param name="length">The number of array elements to copy.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" />, or <paramref name="length" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Single[],System.Int32,System.IntPtr,System.Int32)">
      <summary>Copies data from a one-dimensional, managed single-precision floating-point number array to an unmanaged memory pointer.</summary>
      <param name="source">The one-dimensional array to copy from.</param>
      <param name="startIndex">The zero-based index in the source array where copying should start.</param>
      <param name="destination">The memory pointer to copy to.</param>
      <param name="length">The number of array elements to copy.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> and <paramref name="length" /> are not valid.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="startIndex" />, <paramref name="destination" />, or <paramref name="length" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateAggregatedObject(System.IntPtr,System.Object)">
      <summary>Aggregates a managed object with the specified COM object.</summary>
      <param name="pOuter">The outer <see langword="IUnknown" /> pointer.</param>
      <param name="o">An object to aggregate.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="o" /> is a Windows Runtime object.</exception>
      <returns>The inner <see langword="IUnknown" /> pointer of the managed object.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateAggregatedObject``1(System.IntPtr,``0)">
      <summary>[Supported in the .NET Framework 4.5.1 and later versions]  
  
 Aggregates a managed object of the specified type with the specified COM object.</summary>
      <param name="pOuter">The outer IUnknown pointer.</param>
      <param name="o">The managed object to aggregate.</param>
      <typeparam name="T">The type of the managed object to aggregate.</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="o" /> is a Windows Runtime object.</exception>
      <returns>The inner IUnknown pointer of the managed object.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateWrapperOfType(System.Object,System.Type)">
      <summary>Wraps the specified COM object in an object of the specified type.</summary>
      <param name="o">The object to be wrapped.</param>
      <param name="t">The type of wrapper to create.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="t" /> must derive from <see langword="__ComObject" />.  
  
 -or-  
  
 <paramref name="t" /> is a Windows Runtime type.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="t" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="o" /> cannot be converted to the destination type because it does not support all required interfaces.</exception>
      <returns>The newly wrapped object that is an instance of the desired type.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateWrapperOfType``2(``0)">
      <summary>[Supported in the .NET Framework 4.5.1 and later versions]  
  
 Wraps the specified COM object in an object of the specified type.</summary>
      <param name="o">The object to be wrapped.</param>
      <typeparam name="T">The type of object to wrap.</typeparam>
      <typeparam name="TWrapper">The type of object to return.</typeparam>
      <exception cref="T:System.ArgumentException">
        <typeparamref name="T" /> must derive from <see langword="__ComObject" />.  
  
 -or-  
  
 <typeparamref name="T" /> is a Windows Runtime type.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="o" /> cannot be converted to the <paramref name="TWrapper" /> because it does not support all required interfaces.</exception>
      <returns>The newly wrapped object.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)">
      <summary>Frees all substructures that the specified unmanaged memory block points to.</summary>
      <param name="ptr">A pointer to an unmanaged block of memory.</param>
      <param name="structuretype">Type of a formatted class. This provides the layout information necessary to delete the buffer in the <paramref name="ptr" /> parameter.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="structureType" /> has an automatic layout. Use sequential or explicit instead.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)">
      <summary>[Supported in the .NET Framework 4.5.1 and later versions]  
  
 Frees all substructures of a specified type that the specified unmanaged memory block points to.</summary>
      <param name="ptr">A pointer to an unmanaged block of memory.</param>
      <typeparam name="T">The type of the formatted structure. This provides the layout information necessary to delete the buffer in the <paramref name="ptr" /> parameter.</typeparam>
      <exception cref="T:System.ArgumentException">
        <typeparamref name="T" /> has an automatic layout. Use sequential or explicit instead.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FinalReleaseComObject(System.Object)">
      <summary>Releases all references to a Runtime Callable Wrapper (RCW) by setting its reference count to 0.</summary>
      <param name="o">The RCW to be released.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="o" /> is not a valid COM object.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="o" /> is <see langword="null" />.</exception>
      <returns>The new value of the reference count of the RCW associated with the <paramref name="o" /> parameter, which is 0 (zero) if the release is successful.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FreeBSTR(System.IntPtr)">
      <summary>Frees a <see langword="BSTR" /> using the COM SysFreeString function.</summary>
      <param name="ptr">The address of the BSTR to be freed.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)">
      <summary>Frees a block of memory allocated by the unmanaged COM task memory allocator.</summary>
      <param name="ptr">The address of the memory to be freed.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)">
      <summary>Frees memory previously allocated from the unmanaged memory of the process.</summary>
      <param name="hglobal">The handle returned by the original matching call to <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" />.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GenerateGuidForType(System.Type)">
      <summary>Returns the globally unique identifier (GUID) for the specified type, or generates a GUID using the algorithm used by the Type Library Exporter (Tlbexp.exe).</summary>
      <param name="type">The type to generate a GUID for.</param>
      <returns>An identifier for the specified type.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GenerateProgIdForType(System.Type)">
      <summary>Returns a programmatic identifier (ProgID) for the specified type.</summary>
      <param name="type">The type to get a ProgID for.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="type" /> parameter is not a class that can be create by COM. The class must be public, have a public parameterless constructor, and be COM visible.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is <see langword="null" />.</exception>
      <returns>The ProgID of the specified type.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)">
      <summary>Returns a pointer to an IUnknown interface that represents the specified interface on the specified object. Custom query interface access is enabled by default.</summary>
      <param name="o">The object that provides the interface.</param>
      <param name="T">The type of interface that is requested.</param>
      <exception cref="T:System.ArgumentException">The <typeparamref name="T" /> parameter is not an interface.  
  
 -or-  
  
 The type is not visible to COM.  
  
 -or-  
  
 The <typeparamref name="T" /> parameter is a generic type definition.</exception>
      <exception cref="T:System.InvalidCastException">The <paramref name="o" /> parameter does not support the requested interface.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="o" /> parameter is <see langword="null" />.  
  
 -or-  
  
 The <typeparamref name="T" /> parameter is <see langword="null" />.</exception>
      <returns>The interface pointer that represents the specified interface for the object.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)">
      <summary>Returns a pointer to an IUnknown interface that represents the specified interface on the specified object. Custom query interface access is controlled by the specified customization mode.</summary>
      <param name="o">The object that provides the interface.</param>
      <param name="T">The type of interface that is requested.</param>
      <param name="mode">One of the enumeration values that indicates whether to apply an <see langword="IUnknown::QueryInterface" /> customization that is supplied by an <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" />.</param>
      <exception cref="T:System.ArgumentException">The <typeparamref name="T" /> parameter is not an interface.  
  
 -or-  
  
 The type is not visible to COM.  
  
 -or-  
  
 The <typeparamref name="T" /> parameter is a generic type definition.</exception>
      <exception cref="T:System.InvalidCastException">The object <paramref name="o" /> does not support the requested interface.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="o" /> parameter is <see langword="null" />.  
  
 -or-  
  
 The <typeparamref name="T" /> parameter is <see langword="null" />.</exception>
      <returns>The interface pointer that represents the interface for the object.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject``2(``0)">
      <summary>[Supported in the .NET Framework 4.5.1 and later versions]  
  
 Returns a pointer to an IUnknown interface that represents the specified interface on an object of the specified type. Custom query interface access is enabled by default.</summary>
      <param name="o">The object that provides the interface.</param>
      <typeparam name="T">The type of <paramref name="o" />.</typeparam>
      <typeparam name="TInterface">The type of interface to return.</typeparam>
      <exception cref="T:System.ArgumentException">The <paramref name="TInterface" /> parameter is not an interface.  
  
 -or-  
  
 The type is not visible to COM.  
  
 -or-  
  
 The <typeparamref name="T" /> parameter is an open generic type.</exception>
      <exception cref="T:System.InvalidCastException">The <paramref name="o" /> parameter does not support the <paramref name="TInterface" /> interface.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="o" /> parameter is <see langword="null" />.</exception>
      <returns>The interface pointer that represents the <paramref name="TInterface" /> interface.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComObjectData(System.Object,System.Object)">
      <summary>Retrieves data that is referenced by the specified key from the specified COM object.</summary>
      <param name="obj">The COM object that contains the data that you want.</param>
      <param name="key">The key in the internal hash table of <paramref name="obj" /> to retrieve the data from.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="key" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not a COM object.  
  
 -or-  
  
 <paramref name="obj" /> is a Windows Runtime object.</exception>
      <returns>The data represented by the <paramref name="key" /> parameter in the internal hash table of the <paramref name="obj" /> parameter.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer(System.IntPtr,System.Type)">
      <summary>Converts an unmanaged function pointer to a delegate.</summary>
      <param name="ptr">The unmanaged function pointer to be converted.</param>
      <param name="t">The type of the delegate to be returned.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="t" /> parameter is not a delegate or is generic.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="ptr" /> parameter is <see langword="null" />.  
  
 -or-  
  
 The <paramref name="t" /> parameter is <see langword="null" />.</exception>
      <returns>A delegate instance that can be cast to the appropriate delegate type.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer``1(System.IntPtr)">
      <summary>[Supported in the .NET Framework 4.5.1 and later versions]  
  
 Converts an unmanaged function pointer to a delegate of a specified type.</summary>
      <param name="ptr">The unmanaged function pointer to convert.</param>
      <typeparam name="TDelegate">The type of the delegate to return.</typeparam>
      <exception cref="T:System.ArgumentException">The <paramref name="TDelegate" /> generic parameter is not a delegate, or it is an open generic type.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="ptr" /> parameter is <see langword="null" />.</exception>
      <returns>A instance of the specified delegate type.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetEndComSlot(System.Type)">
      <summary>Retrieves the last slot in the virtual function table (v-table or VTBL) of a type when exposed to COM.</summary>
      <param name="t">A type that represents an interface or class.</param>
      <returns>The last VTBL slot of the interface when exposed to COM. If the <paramref name="t" /> parameter is a class, the returned VTBL slot is the last slot in the interface that is generated from the class.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionCode">
      <summary>Retrieves a code that identifies the type of the exception that occurred.</summary>
      <returns>The type of the exception.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32)">
      <summary>Converts the specified HRESULT error code to a corresponding <see cref="T:System.Exception" /> object.</summary>
      <param name="errorCode">The HRESULT to be converted.</param>
      <returns>An object that represents the converted HRESULT, or <see langword="null" /> if the HRESULT value doesn't represent an error code (for example, <see langword="S_OK" /> or <see langword="S_FALSE" />).</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32,System.IntPtr)">
      <summary>Converts the specified HRESULT error code to a corresponding <see cref="T:System.Exception" /> object, with additional error information passed in an IErrorInfo interface for the exception object.</summary>
      <param name="errorCode">The HRESULT to be converted.</param>
      <param name="errorInfo">A pointer to the <see langword="IErrorInfo" /> interface that provides more information about the error. You can specify <c>IntPtr(0)</c> to use the current <see langword="IErrorInfo" /> interface, or <c>IntPtr(-1)</c> to ignore the current <see langword="IErrorInfo" /> interface and construct the exception just from the error code.</param>
      <returns>An object that represents the converted HRESULT and information obtained from <paramref name="errorInfo" />, or <see langword="null" /> if an HRESULT value doesn't represent an error code (for example, <see langword="S_OK" /> or <see langword="S_FALSE" />).</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionPointers">
      <summary>Retrieves a computer-independent description of an exception, and information about the state that existed for the thread when the exception occurred.</summary>
      <returns>A pointer to an EXCEPTION_POINTERS structure.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate(System.Delegate)">
      <summary>Converts a delegate into a function pointer that is callable from unmanaged code.</summary>
      <param name="d">The delegate to be passed to unmanaged code.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="d" /> parameter is a generic type definition.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="d" /> parameter is <see langword="null" />.</exception>
      <returns>A value that can be passed to unmanaged code, which, in turn, can use it to call the underlying managed delegate.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate``1(``0)">
      <summary>[Supported in the .NET Framework 4.5.1 and later versions]  
  
 Converts a delegate of a specified type to a function pointer that is callable from unmanaged code.</summary>
      <param name="d">The delegate to be passed to unmanaged code.</param>
      <typeparam name="TDelegate">The type of delegate to convert.</typeparam>
      <exception cref="T:System.ArgumentException">The <paramref name="d" /> parameter is a generic type definition.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="d" /> parameter is <see langword="null" />.</exception>
      <returns>A value that can be passed to unmanaged code, which, in turn, can use it to call the underlying managed delegate.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetHINSTANCE(System.Reflection.Module)">
      <summary>Returns the instance handle (HINSTANCE) for the specified module.</summary>
      <param name="m">The module whose HINSTANCE is desired.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="m" /> parameter is <see langword="null" />.</exception>
      <returns>The HINSTANCE for <paramref name="m" />; or -1 if the module does not have an HINSTANCE.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetHRForException(System.Exception)">
      <summary>Converts the specified exception to an HRESULT.</summary>
      <param name="e">The exception to convert to an HRESULT.</param>
      <returns>The HRESULT mapped to the supplied exception.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error">
      <summary>Returns the HRESULT corresponding to the last error incurred by Win32 code executed using <see cref="T:System.Runtime.InteropServices.Marshal" />.</summary>
      <returns>The HRESULT corresponding to the last Win32 error code.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetIDispatchForObject(System.Object)">
      <summary>Returns an IDispatch interface from a managed object.</summary>
      <param name="o">The object whose <see langword="IDispatch" /> interface is requested.</param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="o" /> does not support the requested interface.</exception>
      <returns>The <see langword="IDispatch" /> pointer for the <paramref name="o" /> parameter.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetIUnknownForObject(System.Object)">
      <summary>Returns an IUnknown interface from a managed object.</summary>
      <param name="o">The object whose <see langword="IUnknown" /> interface is requested.</param>
      <returns>The <see langword="IUnknown" /> pointer for the <paramref name="o" /> parameter.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error">
      <summary>Returns the error code returned by the last unmanaged function that was called using platform invoke that has the <see cref="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" /> flag set.</summary>
      <returns>The last error code set by a call to the Win32 SetLastError function.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject(System.Object,System.IntPtr)">
      <summary>Converts an object to a COM VARIANT.</summary>
      <param name="obj">The object for which to get a COM VARIANT.</param>
      <param name="pDstNativeVariant">A pointer to receive the VARIANT that corresponds to the <paramref name="obj" /> parameter.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="obj" /> parameter is an instance of a generic type.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject``1(``0,System.IntPtr)">
      <summary>[Supported in the .NET Framework 4.5.1 and later versions]  
  
 Converts an object of a specified type to a COM VARIANT.</summary>
      <param name="obj">The object for which to get a COM VARIANT.</param>
      <param name="pDstNativeVariant">A pointer to receive the VARIANT that corresponds to the <paramref name="obj" /> parameter.</param>
      <typeparam name="T">The type of the object to convert.</typeparam>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectForIUnknown(System.IntPtr)">
      <summary>Returns an instance of a type that represents a COM object by a pointer to its IUnknown interface.</summary>
      <param name="pUnk">A pointer to the <see langword="IUnknown" /> interface.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pUnk" /> is <see cref="F:System.IntPtr.Zero" />.</exception>
      <returns>An object that represents the specified unmanaged COM object.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant(System.IntPtr)">
      <summary>Converts a COM VARIANT to an object.</summary>
      <param name="pSrcNativeVariant">A pointer to a COM VARIANT.</param>
      <exception cref="T:System.Runtime.InteropServices.InvalidOleVariantTypeException">
        <paramref name="pSrcNativeVariant" /> is not a valid VARIANT type.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="pSrcNativeVariant" /> has an unsupported type.</exception>
      <returns>An object that corresponds to the <paramref name="pSrcNativeVariant" /> parameter.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant``1(System.IntPtr)">
      <summary>[Supported in the .NET Framework 4.5.1 and later versions]  
  
 Converts a COM VARIANT to an object of a specified type.</summary>
      <param name="pSrcNativeVariant">A pointer to a COM VARIANT.</param>
      <typeparam name="T">The type to which to convert the COM VARIANT.</typeparam>
      <exception cref="T:System.Runtime.InteropServices.InvalidOleVariantTypeException">
        <paramref name="pSrcNativeVariant" /> is not a valid VARIANT type.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="pSrcNativeVariant" /> has an unsupported type.</exception>
      <returns>An object of the specified type that corresponds to the <paramref name="pSrcNativeVariant" /> parameter.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants(System.IntPtr,System.Int32)">
      <summary>Converts an array of COM VARIANTs to an array of objects.</summary>
      <param name="aSrcNativeVariant">A pointer to the first element of an array of COM VARIANTs.</param>
      <param name="cVars">The count of COM VARIANTs in <paramref name="aSrcNativeVariant" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="cVars" /> is a negative number.</exception>
      <returns>An object array that corresponds to <paramref name="aSrcNativeVariant" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants``1(System.IntPtr,System.Int32)">
      <summary>[Supported in the .NET Framework 4.5.1 and later versions]  
  
 Converts an array of COM VARIANTs to an array of a specified type.</summary>
      <param name="aSrcNativeVariant">A pointer to the first element of an array of COM VARIANTs.</param>
      <param name="cVars">The count of COM VARIANTs in <paramref name="aSrcNativeVariant" />.</param>
      <typeparam name="T">The type of the array to return.</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="cVars" /> is a negative number.</exception>
      <returns>An array of <typeparamref name="T" /> objects that corresponds to <paramref name="aSrcNativeVariant" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetStartComSlot(System.Type)">
      <summary>Gets the first slot in the virtual function table (v-table or VTBL) that contains user-defined methods.</summary>
      <param name="t">A type that represents an interface or a class.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="t" /> is not visible from COM.</exception>
      <returns>The first VTBL slot that contains user-defined methods. The first slot is 3 if the interface is based on IUnknown, and 7 if the interface is based on IDispatch.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetTypedObjectForIUnknown(System.IntPtr,System.Type)">
      <summary>Returns a managed object of a specified type that represents a COM object.</summary>
      <param name="pUnk">A pointer to the <see langword="IUnknown" /> interface of the unmanaged object.</param>
      <param name="t">The type of the requested managed class.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="t" /> is not attributed with <see cref="T:System.Runtime.InteropServices.ComImportAttribute" />.  
  
 -or-  
  
 <paramref name="t" /> is a Windows Runtime type.</exception>
      <returns>An instance of the class corresponding to the <see cref="T:System.Type" /> object that represents the requested unmanaged COM object.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetTypeFromCLSID(System.Guid)">
      <summary>Returns the type associated with the specified class identifier (CLSID).</summary>
      <param name="clsid">The CLSID of the type to return.</param>
      <returns>
        <see langword="System.__ComObject" /> regardless of whether the CLSID is valid.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetTypeInfoName(System.Runtime.InteropServices.ComTypes.ITypeInfo)">
      <summary>Retrieves the name of the type represented by an ITypeInfo object.</summary>
      <param name="typeInfo">An object that represents an <see langword="ITypeInfo" /> pointer.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeInfo" /> parameter is <see langword="null" />.</exception>
      <returns>The name of the type that the <paramref name="typeInfo" /> parameter points to.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetUniqueObjectForIUnknown(System.IntPtr)">
      <summary>Creates a unique Runtime Callable Wrapper (RCW) object for a given IUnknown interface.</summary>
      <param name="unknown">A managed pointer to an <see langword="IUnknown" /> interface.</param>
      <returns>A unique RCW for the specified <see langword="IUnknown" /> interface.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.IsComObject(System.Object)">
      <summary>Indicates whether a specified object represents a COM object.</summary>
      <param name="o">The object to check.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="o" /> is <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> if the <paramref name="o" /> parameter is a COM type; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.IsTypeVisibleFromCom(System.Type)">
      <summary>Indicates whether a type is visible to COM clients.</summary>
      <param name="t">The type to check for COM visibility.</param>
      <returns>
        <see langword="true" /> if the type is visible to COM; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.OffsetOf(System.Type,System.String)">
      <summary>Returns the field offset of the unmanaged form of the managed class.</summary>
      <param name="t">A value type or formatted reference type that specifies the managed class. You must apply the <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> to the class.</param>
      <param name="fieldName">The field within the <paramref name="t" /> parameter.</param>
      <exception cref="T:System.ArgumentException">The class cannot be exported as a structure or the field is nonpublic. Beginning with the .NET Framework version 2.0, the field may be private.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="t" /> parameter is <see langword="null" />.</exception>
      <returns>The offset, in bytes, for the <paramref name="fieldName" /> parameter within the specified class that is declared by platform invoke.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.OffsetOf``1(System.String)">
      <summary>[Supported in the .NET Framework 4.5.1 and later versions]  
  
 Returns the field offset of the unmanaged form of a specified managed class.</summary>
      <param name="fieldName">The name of the field in the <paramref name="T" /> type.</param>
      <typeparam name="T">A managed value type or formatted reference type. You must apply the <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> attribute to the class.</typeparam>
      <returns>The offset, in bytes, for the <paramref name="fieldName" /> parameter within the specified class that is declared by platform invoke.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Prelink(System.Reflection.MethodInfo)">
      <summary>Executes one-time method setup tasks without calling the method.</summary>
      <param name="m">The method to be checked.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="m" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="m" /> parameter is not a <see cref="T:System.Reflection.MethodInfo" /> object.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PrelinkAll(System.Type)">
      <summary>Performs a pre-link check for all methods on a class.</summary>
      <param name="c">The class whose methods are to be checked.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="c" /> parameter is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr)">
      <summary>Copies all characters up to the first null character from an unmanaged ANSI or UTF-8 string to a managed <see cref="T:System.String" />, and widens each character to UTF-16.</summary>
      <param name="ptr">The address of the first character of the unmanaged string.</param>
      <returns>A managed string that holds a copy of the unmanaged string. If <paramref name="ptr" /> is <see langword="null" />, the method returns a null string.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr,System.Int32)">
      <summary>Allocates a managed <see cref="T:System.String" />, copies a specified number of characters from an unmanaged ANSI or UTF-8 string into it, and widens each character to UTF-16.</summary>
      <param name="ptr">The address of the first character of the unmanaged string.</param>
      <param name="len">The byte count of the input string to copy.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="len" /> is less than zero.</exception>
      <returns>A managed string that holds a copy of the native string if the value of the <paramref name="ptr" /> parameter is not <see langword="null" />; otherwise, this method returns <see langword="null" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAuto(System.IntPtr)">
      <summary>Allocates a managed <see cref="T:System.String" /> and copies all characters up to the first null character from a string stored in unmanaged memory into it.</summary>
      <param name="ptr">For Unicode platforms, the address of the first Unicode character.  
  
 -or-  
  
 For ANSI platforms, the address of the first ANSI character.</param>
      <returns>A managed string that holds a copy of the unmanaged string if the value of the <paramref name="ptr" /> parameter is not <see langword="null" />; otherwise, this method returns <see langword="null" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAuto(System.IntPtr,System.Int32)">
      <summary>Allocates a managed <see cref="T:System.String" /> and copies the specified number of characters from a string stored in unmanaged memory into it.</summary>
      <param name="ptr">For Unicode platforms, the address of the first Unicode character.  
  
 -or-  
  
 For ANSI platforms, the address of the first ANSI character.</param>
      <param name="len">The number of characters to copy.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="len" /> is less than zero.</exception>
      <returns>A managed string that holds a copy of the native string if the value of the <paramref name="ptr" /> parameter is not <see langword="null" />; otherwise, this method returns <see langword="null" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringBSTR(System.IntPtr)">
      <summary>Allocates a managed <see cref="T:System.String" /> and copies a binary string (BSTR) stored in unmanaged memory into it.</summary>
      <param name="ptr">The address of the first character of the unmanaged string.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ptr" /> equals <see cref="F:System.IntPtr.Zero" />.</exception>
      <returns>A managed string that holds a copy of the unmanaged string.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr)">
      <summary>Allocates a managed <see cref="T:System.String" /> and copies all characters up to the first null character from an unmanaged Unicode string into it.</summary>
      <param name="ptr">The address of the first character of the unmanaged string.</param>
      <returns>A managed string that holds a copy of the unmanaged string if the value of the <paramref name="ptr" /> parameter is not <see langword="null" />; otherwise, this method returns <see langword="null" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr,System.Int32)">
      <summary>Allocates a managed <see cref="T:System.String" /> and copies a specified number of characters from an unmanaged Unicode string into it.</summary>
      <param name="ptr">The address of the first character of the unmanaged string.</param>
      <param name="len">The number of Unicode characters to copy.</param>
      <returns>A managed string that holds a copy of the unmanaged string if the value of the <paramref name="ptr" /> parameter is not <see langword="null" />; otherwise, this method returns <see langword="null" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr)">
      <summary>Allocates a managed <see cref="T:System.String" /> and copies all characters up to the first null character from an unmanaged UTF-8 string into it.</summary>
      <param name="ptr">The address of the first character of the unmanaged string.</param>
      <returns>A managed string that holds a copy of the unmanaged string if the value of the <paramref name="ptr" /> parameter is not <see langword="null" />; otherwise, this method returns <see langword="null" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr,System.Int32)">
      <summary>Allocates a managed <see cref="T:System.String" /> and copies a specified number of bytes from an unmanaged UTF8 string into it.</summary>
      <param name="ptr">The address of the first character of the unmanaged string.</param>
      <param name="byteLen">The number of bytes to copy.</param>
      <returns>A managed string that holds a copy of the unmanaged string if the value of the <paramref name="ptr" /> parameter is not <see langword="null" />; otherwise, this method returns <see langword="null" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Object)">
      <summary>Marshals data from an unmanaged block of memory to a managed object.</summary>
      <param name="ptr">A pointer to an unmanaged block of memory.</param>
      <param name="structure">The object to which the data is to be copied. This must be an instance of a formatted class.</param>
      <exception cref="T:System.ArgumentException">Structure layout is not sequential or explicit.  
  
 -or-  
  
 Structure is a boxed value type.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Type)">
      <summary>Marshals data from an unmanaged block of memory to a newly allocated managed object of the specified type.</summary>
      <param name="ptr">A pointer to an unmanaged block of memory.</param>
      <param name="structureType">The type of object to be created. This object must represent a formatted class or a structure.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="structureType" /> parameter layout is not sequential or explicit.  
  
 -or-  
  
 The <paramref name="structureType" /> parameter is a generic type definition.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="structureType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.MissingMethodException">The class specified by <paramref name="structureType" /> does not have an accessible parameterless constructor.</exception>
      <returns>A managed object containing the data pointed to by the <paramref name="ptr" /> parameter.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure``1(System.IntPtr)">
      <summary>[Supported in the .NET Framework 4.5.1 and later versions]  
  
 Marshals data from an unmanaged block of memory to a newly allocated managed object of the type specified by a generic type parameter.</summary>
      <param name="ptr">A pointer to an unmanaged block of memory.</param>
      <typeparam name="T">The type of the object to which the data is to be copied. This must be a formatted class or a structure.</typeparam>
      <exception cref="T:System.ArgumentException">The layout of <typeparamref name="T" /> is not sequential or explicit.</exception>
      <exception cref="T:System.MissingMethodException">The class specified by <typeparamref name="T" /> does not have an accessible parameterless constructor.</exception>
      <returns>A managed object that contains the data that the <paramref name="ptr" /> parameter points to.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure``1(System.IntPtr,``0)">
      <summary>[Supported in the .NET Framework 4.5.1 and later versions]  
  
 Marshals data from an unmanaged block of memory to a managed object of the specified type.</summary>
      <param name="ptr">A pointer to an unmanaged block of memory.</param>
      <param name="structure">The object to which the data is to be copied.</param>
      <typeparam name="T">The type of <paramref name="structure" />. This must be a formatted class.</typeparam>
      <exception cref="T:System.ArgumentException">Structure layout is not sequential or explicit.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.QueryInterface(System.IntPtr,System.Guid@,System.IntPtr@)">
      <summary>Requests a pointer to a specified interface from a COM object.</summary>
      <param name="pUnk">The interface to be queried.</param>
      <param name="iid">The interface identifier (IID) of the requested interface.</param>
      <param name="ppv">When this method returns, contains a reference to the returned interface.</param>
      <returns>An HRESULT that indicates the success or failure of the call.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr)">
      <summary>Reads a single byte from unmanaged memory.</summary>
      <param name="ptr">The address in unmanaged memory from which to read.</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> is not a recognized format.  
  
 -or-  
  
 <paramref name="ptr" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="ptr" /> is invalid.</exception>
      <returns>The byte read from unmanaged memory.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr,System.Int32)">
      <summary>Reads a single byte at a given offset (or index) from unmanaged memory.</summary>
      <param name="ptr">The base address in unmanaged memory from which to read.</param>
      <param name="ofs">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before reading.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</exception>
      <returns>The byte read from unmanaged memory at the given offset.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadByte(System.Object,System.Int32)">
      <summary>Reads a single byte at a given offset (or index) from unmanaged memory.</summary>
      <param name="ptr">The base address in unmanaged memory of the source object.</param>
      <param name="ofs">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before reading.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> is an <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> object. This method does not accept <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> parameters.</exception>
      <returns>The byte read from unmanaged memory at the given offset.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr)">
      <summary>Reads a 16-bit signed integer from unmanaged memory.</summary>
      <param name="ptr">The address in unmanaged memory from which to read.</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> is not a recognized format.  
  
 -or-  
  
 <paramref name="ptr" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="ptr" /> is invalid.</exception>
      <returns>The 16-bit signed integer read from unmanaged memory.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr,System.Int32)">
      <summary>Reads a 16-bit signed integer at a given offset from unmanaged memory.</summary>
      <param name="ptr">The base address in unmanaged memory from which to read.</param>
      <param name="ofs">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before reading.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</exception>
      <returns>The 16-bit signed integer read from unmanaged memory at the given offset.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.Object,System.Int32)">
      <summary>Reads a 16-bit signed integer at a given offset from unmanaged memory.</summary>
      <param name="ptr">The base address in unmanaged memory of the source object.</param>
      <param name="ofs">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before reading.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> is an <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> object. This method does not accept <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> parameters.</exception>
      <returns>The 16-bit signed integer read from unmanaged memory at the given offset.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr)">
      <summary>Reads a 32-bit signed integer from unmanaged memory.</summary>
      <param name="ptr">The address in unmanaged memory from which to read.</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> is not a recognized format.  
  
 -or-  
  
 <paramref name="ptr" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="ptr" /> is invalid.</exception>
      <returns>The 32-bit signed integer read from unmanaged memory.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr,System.Int32)">
      <summary>Reads a 32-bit signed integer at a given offset from unmanaged memory.</summary>
      <param name="ptr">The base address in unmanaged memory from which to read.</param>
      <param name="ofs">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before reading.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</exception>
      <returns>The 32-bit signed integer read from unmanaged memory.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.Object,System.Int32)">
      <summary>Reads a 32-bit signed integer at a given offset from unmanaged memory.</summary>
      <param name="ptr">The base address in unmanaged memory of the source object.</param>
      <param name="ofs">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before reading.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> is an <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> object. This method does not accept <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> parameters.</exception>
      <returns>The 32-bit signed integer read from unmanaged memory at the given offset.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr)">
      <summary>Reads a 64-bit signed integer from unmanaged memory.</summary>
      <param name="ptr">The address in unmanaged memory from which to read.</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> is not a recognized format.  
  
 -or-  
  
 <paramref name="ptr" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="ptr" /> is invalid.</exception>
      <returns>The 64-bit signed integer read from unmanaged memory.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr,System.Int32)">
      <summary>Reads a 64-bit signed integer at a given offset from unmanaged memory.</summary>
      <param name="ptr">The base address in unmanaged memory from which to read.</param>
      <param name="ofs">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before reading.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</exception>
      <returns>The 64-bit signed integer read from unmanaged memory at the given offset.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.Object,System.Int32)">
      <summary>Reads a 64-bit signed integer at a given offset from unmanaged memory.</summary>
      <param name="ptr">The base address in unmanaged memory of the source object.</param>
      <param name="ofs">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before reading.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> is an <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> object. This method does not accept <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> parameters.</exception>
      <returns>The 64-bit signed integer read from unmanaged memory at the given offset.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr)">
      <summary>Reads a processor native-sized integer from unmanaged memory.</summary>
      <param name="ptr">The address in unmanaged memory from which to read.</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> is not a recognized format.  
  
 -or-  
  
 <paramref name="ptr" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="ptr" /> is invalid.</exception>
      <returns>The integer read from unmanaged memory. A 32 bit integer is returned on 32 bit machines and a 64 bit integer is returned on 64 bit machines.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr,System.Int32)">
      <summary>Reads a processor native sized integer at a given offset from unmanaged memory.</summary>
      <param name="ptr">The base address in unmanaged memory from which to read.</param>
      <param name="ofs">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before reading.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</exception>
      <returns>The integer read from unmanaged memory at the given offset.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.Object,System.Int32)">
      <summary>Reads a processor native sized integer from unmanaged memory.</summary>
      <param name="ptr">The base address in unmanaged memory of the source object.</param>
      <param name="ofs">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before reading.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> is an <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> object. This method does not accept <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> parameters.</exception>
      <returns>The integer read from unmanaged memory at the given offset.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem(System.IntPtr,System.Int32)">
      <summary>Resizes a block of memory previously allocated with <see cref="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)" />.</summary>
      <param name="pv">A pointer to memory allocated with <see cref="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)" />.</param>
      <param name="cb">The new size of the allocated block.</param>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory to satisfy the request.</exception>
      <returns>An integer representing the address of the reallocated block of memory. This memory must be released with <see cref="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReAllocHGlobal(System.IntPtr,System.IntPtr)">
      <summary>Resizes a block of memory previously allocated with <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" />.</summary>
      <param name="pv">A pointer to memory allocated with <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" />.</param>
      <param name="cb">The new size of the allocated block. This is not a pointer; it is the byte count you are requesting, cast to type <see cref="T:System.IntPtr" />. If you pass a pointer, it is treated as a size.</param>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory to satisfy the request.</exception>
      <returns>A pointer to the reallocated memory. This memory must be released using <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Release(System.IntPtr)">
      <summary>Decrements the reference count on the specified interface.</summary>
      <param name="pUnk">The interface to release.</param>
      <returns>The new value of the reference count on the interface specified by the <paramref name="pUnk" /> parameter.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReleaseComObject(System.Object)">
      <summary>Decrements the reference count of the Runtime Callable Wrapper (RCW) associated with the specified COM object.</summary>
      <param name="o">The COM object to release.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="o" /> is not a valid COM object.</exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="o" /> is <see langword="null" />.</exception>
      <returns>The new value of the reference count of the RCW associated with <paramref name="o" />. This value is typically zero since the RCW keeps just one reference to the wrapped COM object regardless of the number of managed clients calling it.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToBSTR(System.Security.SecureString)">
      <summary>Allocates an unmanaged binary string (BSTR) and copies the contents of a managed <see cref="T:System.Security.SecureString" /> object into it.</summary>
      <param name="s">The managed object to copy.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="s" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory available.</exception>
      <returns>The address, in unmanaged memory, where the <paramref name="s" /> parameter was copied to, or 0 if a null object was supplied.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)">
      <summary>Copies the contents of a managed <see cref="T:System.Security.SecureString" /> object to a block of memory allocated from the unmanaged COM task allocator.</summary>
      <param name="s">The managed object to copy.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="s" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory available.</exception>
      <returns>The address, in unmanaged memory, where the <paramref name="s" /> parameter was copied to, or 0 if a null object was supplied.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)">
      <summary>Copies the contents of a managed <see cref="T:System.Security.SecureString" /> object to a block of memory allocated from the unmanaged COM task allocator.</summary>
      <param name="s">The managed object to copy.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="s" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory available.</exception>
      <returns>The address, in unmanaged memory, where the <paramref name="s" /> parameter was copied to, or 0 if a null object was supplied.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)">
      <summary>Copies the contents of a managed <see cref="T:System.Security.SecureString" /> into unmanaged memory, converting into ANSI format as it copies.</summary>
      <param name="s">The managed object to copy.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="s" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory available.</exception>
      <returns>The address, in unmanaged memory, to where the <paramref name="s" /> parameter was copied, or 0 if a null object was supplied.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)">
      <summary>Copies the contents of a managed <see cref="T:System.Security.SecureString" /> object into unmanaged memory.</summary>
      <param name="s">The managed object to copy.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="s" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory available.</exception>
      <returns>The address, in unmanaged memory, where <paramref name="s" /> was copied, or 0 if <paramref name="s" /> is a <see cref="T:System.Security.SecureString" /> object whose length is 0.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SetComObjectData(System.Object,System.Object,System.Object)">
      <summary>Sets data referenced by the specified key in the specified COM object.</summary>
      <param name="obj">The COM object in which to store the data.</param>
      <param name="key">The key in the internal hash table of the COM object in which to store the data.</param>
      <param name="data">The data to set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="key" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not a COM object.  
  
 -or-  
  
 <paramref name="obj" /> is a Windows Runtime object.</exception>
      <returns>
        <see langword="true" /> if the data was set successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf(System.Object)">
      <summary>Returns the unmanaged size of an object in bytes.</summary>
      <param name="structure">The object whose size is to be returned.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="structure" /> parameter is <see langword="null" />.</exception>
      <returns>The size of the specified object in unmanaged code.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf(System.Type)">
      <summary>Returns the size of an unmanaged type in bytes.</summary>
      <param name="t">The type whose size is to be returned.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="t" /> parameter is a generic type definition.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="t" /> parameter is <see langword="null" />.</exception>
      <returns>The size of the specified type in unmanaged code.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf``1">
      <summary>[Supported in the .NET Framework 4.5.1 and later versions]  
  
 Returns the size of an unmanaged type in bytes.</summary>
      <typeparam name="T">The type whose size is to be returned.</typeparam>
      <returns>The size, in bytes, of the type that is specified by the <typeparamref name="T" /> generic type parameter.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf``1(``0)">
      <summary>[Supported in the .NET Framework 4.5.1 and later versions]  
  
 Returns the unmanaged size of an object of a specified type in bytes.</summary>
      <param name="structure">The object whose size is to be returned.</param>
      <typeparam name="T">The type of the <paramref name="structure" /> parameter.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="structure" /> parameter is <see langword="null" />.</exception>
      <returns>The size, in bytes, of the specified object in unmanaged code.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToBSTR(System.String)">
      <summary>Allocates a BSTR and copies the contents of a managed <see cref="T:System.String" /> into it.</summary>
      <param name="s">The managed string to be copied.</param>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory available.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The length for <paramref name="s" /> is out of range.</exception>
      <returns>An unmanaged pointer to the <see langword="BSTR" />, or 0 if <paramref name="s" /> is null.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(System.String)">
      <summary>Copies the contents of a managed <see cref="T:System.String" /> to a block of memory allocated from the unmanaged COM task allocator.</summary>
      <param name="s">A managed string to be copied.</param>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory available.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="s" /> parameter exceeds the maximum length allowed by the operating system.</exception>
      <returns>An integer representing a pointer to the block of memory allocated for the string, or 0 if <paramref name="s" /> is <see langword="null" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto(System.String)">
      <summary>Copies the contents of a managed <see cref="T:System.String" /> to a block of memory allocated from the unmanaged COM task allocator.</summary>
      <param name="s">A managed string to be copied.</param>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory available.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The length for <paramref name="s" /> is out of range.</exception>
      <returns>The allocated memory block, or 0 if <paramref name="s" /> is <see langword="null" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni(System.String)">
      <summary>Copies the contents of a managed <see cref="T:System.String" /> to a block of memory allocated from the unmanaged COM task allocator.</summary>
      <param name="s">A managed string to be copied.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="s" /> parameter exceeds the maximum length allowed by the operating system.</exception>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory available.</exception>
      <returns>An integer representing a pointer to the block of memory allocated for the string, or 0 if s is <see langword="null" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUTF8(System.String)">
      <summary>Copies the contents of a managed <see cref="T:System.String" /> to a block of memory allocated from the unmanaged COM task allocator.</summary>
      <param name="s">A managed string to be copied.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="s" /> parameter exceeds the maximum length allowed by the operating system.</exception>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory available.</exception>
      <returns>An integer representing a pointer to the block of memory allocated for the string, or 0 if <paramref name="s" /> is <see langword="null" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(System.String)">
      <summary>Copies the contents of a managed <see cref="T:System.String" /> into unmanaged memory, converting into ANSI format as it copies.</summary>
      <param name="s">A managed string to be copied.</param>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory available.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="s" /> parameter exceeds the maximum length allowed by the operating system.</exception>
      <returns>The address, in unmanaged memory, to where <paramref name="s" /> was copied, or 0 if <paramref name="s" /> is <see langword="null" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToHGlobalAuto(System.String)">
      <summary>Copies the contents of a managed <see cref="T:System.String" /> into unmanaged memory, converting into ANSI format if required.</summary>
      <param name="s">A managed string to be copied.</param>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory available.</exception>
      <returns>The address, in unmanaged memory, to where the string was copied, or 0 if <paramref name="s" /> is <see langword="null" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToHGlobalUni(System.String)">
      <summary>Copies the contents of a managed <see cref="T:System.String" /> into unmanaged memory.</summary>
      <param name="s">A managed string to be copied.</param>
      <exception cref="T:System.OutOfMemoryException">The method could not allocate enough native heap memory.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="s" /> parameter exceeds the maximum length allowed by the operating system.</exception>
      <returns>The address, in unmanaged memory, to where the <paramref name="s" /> was copied, or 0 if <paramref name="s" /> is <see langword="null" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StructureToPtr(System.Object,System.IntPtr,System.Boolean)">
      <summary>Marshals data from a managed object to an unmanaged block of memory.</summary>
      <param name="structure">A managed object that holds the data to be marshaled. This object must be a structure or an instance of a formatted class.</param>
      <param name="ptr">A pointer to an unmanaged block of memory, which must be allocated before this method is called.</param>
      <param name="fDeleteOld">
        <see langword="true" /> to call the <see cref="M:System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)" /> method on the <paramref name="ptr" /> parameter before this method copies the data. The block must contain valid data. Note that passing <see langword="false" /> when the memory block already contains data can lead to a memory leak.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="structure" /> is a reference type that is not a formatted class.  
  
 -or-  
  
 <paramref name="structure" /> is an instance of a generic type (in the .NET Framework 4.5 and earlier versions only).</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StructureToPtr``1(``0,System.IntPtr,System.Boolean)">
      <summary>[Supported in the .NET Framework 4.5.1 and later versions]  
  
 Marshals data from a managed object of a specified type to an unmanaged block of memory.</summary>
      <param name="structure">A managed object that holds the data to be marshaled. The object must be a structure or an instance of a formatted class.</param>
      <param name="ptr">A pointer to an unmanaged block of memory, which must be allocated before this method is called.</param>
      <param name="fDeleteOld">
        <see langword="true" /> to call the <see cref="M:System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)" /> method on the <paramref name="ptr" /> parameter before this method copies the data. The block must contain valid data. Note that passing <see langword="false" /> when the memory block already contains data can lead to a memory leak.</param>
      <typeparam name="T">The type of the managed object.</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="structure" /> is a reference type that is not a formatted class.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32)">
      <summary>Throws an exception with a specific failure HRESULT value.</summary>
      <param name="errorCode">The HRESULT corresponding to the desired exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32,System.IntPtr)">
      <summary>Throws an exception with a specific failure HRESULT, based on the specified IErrorInfo interface.</summary>
      <param name="errorCode">The HRESULT corresponding to the desired exception.</param>
      <param name="errorInfo">A pointer to the IErrorInfo interface that provides more information about the error. You can specify <c>IntPtr(0)</c> to use the current IErrorInfo interface, or <c>IntPtr(-1)</c> to ignore the current IErrorInfo interface and construct the exception just from the error code.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement(System.Array,System.Int32)">
      <summary>Gets the address of the element at the specified index inside the specified array.</summary>
      <param name="arr">The array that contains the desired element.</param>
      <param name="index">The index in the <paramref name="arr" /> parameter of the desired element.</param>
      <returns>The address of <paramref name="index" /> inside <paramref name="arr" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement``1(``0[],System.Int32)">
      <summary>[Supported in the .NET Framework 4.5.1 and later versions]  
  
 Gets the address of the element at the specified index in an array of a specified type.</summary>
      <param name="arr">The array that contains the desired element.</param>
      <param name="index">The index of the desired element in the <paramref name="arr" /> array.</param>
      <typeparam name="T">The type of the array.</typeparam>
      <returns>The address of <paramref name="index" /> in <paramref name="arr" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Byte)">
      <summary>Writes a single byte value to unmanaged memory.</summary>
      <param name="ptr">The address in unmanaged memory to write to.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> is not a recognized format.  
  
 -or-  
  
 <paramref name="ptr" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="ptr" /> is invalid.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)">
      <summary>Writes a single byte value to unmanaged memory at a specified offset.</summary>
      <param name="ptr">The base address in unmanaged memory to write to.</param>
      <param name="ofs">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before writing.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteByte(System.Object,System.Int32,System.Byte)">
      <summary>Writes a single byte value to unmanaged memory at a specified offset.</summary>
      <param name="ptr">The base address in unmanaged memory of the target object.</param>
      <param name="ofs">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before writing.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> is an <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> object. This method does not accept <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> parameters.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Char)">
      <summary>Writes a character as a 16-bit integer value to unmanaged memory.</summary>
      <param name="ptr">The address in unmanaged memory to write to.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> is not a recognized format.  
  
 -or-  
  
 <paramref name="ptr" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="ptr" /> is invalid.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int16)">
      <summary>Writes a 16-bit integer value to unmanaged memory.</summary>
      <param name="ptr">The address in unmanaged memory to write to.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> is not a recognized format.  
  
 -or-  
  
 <paramref name="ptr" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="ptr" /> is invalid.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Char)">
      <summary>Writes a 16-bit signed integer value to unmanaged memory at a specified offset.</summary>
      <param name="ptr">The base address in the native heap to write to.</param>
      <param name="ofs">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before writing.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Int16)">
      <summary>Writes a 16-bit signed integer value into unmanaged memory at a specified offset.</summary>
      <param name="ptr">The base address in unmanaged memory to write to.</param>
      <param name="ofs">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before writing.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Char)">
      <summary>Writes a 16-bit signed integer value to unmanaged memory at a specified offset.</summary>
      <param name="ptr">The base address in unmanaged memory of the target object.</param>
      <param name="ofs">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before writing.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> is an <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> object. This method does not accept <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> parameters.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Int16)">
      <summary>Writes a 16-bit signed integer value to unmanaged memory at a specified offset.</summary>
      <param name="ptr">The base address in unmanaged memory of the target object.</param>
      <param name="ofs">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before writing.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> is an <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> object. This method does not accept <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> parameters.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32)">
      <summary>Writes a 32-bit signed integer value to unmanaged memory.</summary>
      <param name="ptr">The address in unmanaged memory to write to.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> is not a recognized format.  
  
 -or-  
  
 <paramref name="ptr" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="ptr" /> is invalid.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32,System.Int32)">
      <summary>Writes a 32-bit signed integer value into unmanaged memory at a specified offset.</summary>
      <param name="ptr">The base address in unmanaged memory to write to.</param>
      <param name="ofs">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before writing.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.Object,System.Int32,System.Int32)">
      <summary>Writes a 32-bit signed integer value to unmanaged memory at a specified offset.</summary>
      <param name="ptr">The base address in unmanaged memory of the target object.</param>
      <param name="ofs">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before writing.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> is an <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> object. This method does not accept <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> parameters.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int32,System.Int64)">
      <summary>Writes a 64-bit signed integer value to unmanaged memory at a specified offset.</summary>
      <param name="ptr">The base address in unmanaged memory to write.</param>
      <param name="ofs">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before writing.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int64)">
      <summary>Writes a 64-bit signed integer value to unmanaged memory.</summary>
      <param name="ptr">The address in unmanaged memory to write to.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> is not a recognized format.  
  
 -or-  
  
 <paramref name="ptr" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="ptr" /> is invalid.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.Object,System.Int32,System.Int64)">
      <summary>Writes a 64-bit signed integer value to unmanaged memory at a specified offset.</summary>
      <param name="ptr">The base address in unmanaged memory of the target object.</param>
      <param name="ofs">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before writing.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> is an <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> object. This method does not accept <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> parameters.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.Int32,System.IntPtr)">
      <summary>Writes a processor native-sized integer value to unmanaged memory at a specified offset.</summary>
      <param name="ptr">The base address in unmanaged memory to write to.</param>
      <param name="ofs">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before writing.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.IntPtr)">
      <summary>Writes a processor native sized integer value into unmanaged memory.</summary>
      <param name="ptr">The address in unmanaged memory to write to.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> is not a recognized format.  
  
 -or-  
  
 <paramref name="ptr" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="ptr" /> is invalid.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.Object,System.Int32,System.IntPtr)">
      <summary>Writes a processor native sized integer value to unmanaged memory.</summary>
      <param name="ptr">The base address in unmanaged memory of the target object.</param>
      <param name="ofs">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before writing.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> is an <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> object. This method does not accept <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> parameters.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR(System.IntPtr)">
      <summary>Frees a BSTR pointer that was allocated using the <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToBSTR(System.Security.SecureString)" /> method.</summary>
      <param name="s">The address of the <see langword="BSTR" /> to free.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi(System.IntPtr)">
      <summary>Frees an unmanaged string pointer that was allocated using the <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)" /> method.</summary>
      <param name="s">The address of the unmanaged string to free.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode(System.IntPtr)">
      <summary>Frees an unmanaged string pointer that was allocated using the <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)" /> method.</summary>
      <param name="s">The address of the unmanaged string to free.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUTF8(System.IntPtr)">
      <summary>Frees an unmanaged string pointer that was allocated using the <see cref="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUTF8(System.String)" /> method.</summary>
      <param name="s">The address of the unmanaged string to free.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi(System.IntPtr)">
      <summary>Frees an unmanaged string pointer that was allocated using the <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)" /> method.</summary>
      <param name="s">The address of the unmanaged string to free.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode(System.IntPtr)">
      <summary>Frees an unmanaged string pointer that was allocated using the <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)" /> method.</summary>
      <param name="s">The address of the unmanaged string to free.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.MarshalAsAttribute">
      <summary>Indicates how to marshal the data between managed and unmanaged code.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.ArraySubType">
      <summary>Specifies the element type of the unmanaged <see cref="F:System.Runtime.InteropServices.UnmanagedType.LPArray" /> or <see cref="F:System.Runtime.InteropServices.UnmanagedType.ByValArray" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.IidParameterIndex">
      <summary>Specifies the parameter index of the unmanaged <see langword="iid_is" /> attribute used by COM.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie">
      <summary>Provides additional information to a custom marshaler.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType">
      <summary>Specifies the fully qualified name of a custom marshaler.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef">
      <summary>Implements <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType" /> as a type.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SafeArraySubType">
      <summary>Indicates the element type of the <see cref="F:System.Runtime.InteropServices.UnmanagedType.SafeArray" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SafeArrayUserDefinedSubType">
      <summary>Indicates the user-defined element type of the <see cref="F:System.Runtime.InteropServices.UnmanagedType.SafeArray" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst">
      <summary>Indicates the number of elements in the fixed-length array or the number of characters (not bytes) in a string to import.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeParamIndex">
      <summary>Indicates the zero-based parameter that contains the count of array elements, similar to <see langword="size_is" /> in COM.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Int16)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.MarshalAsAttribute" /> class with the specified <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> value.</summary>
      <param name="unmanagedType">The value the data is to be marshaled as.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Runtime.InteropServices.UnmanagedType)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.MarshalAsAttribute" /> class with the specified <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> enumeration member.</summary>
      <param name="unmanagedType">The value the data is to be marshaled as.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.MarshalAsAttribute.Value">
      <summary>Gets the <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> value the data is to be marshaled as.</summary>
      <returns>The <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> value the data is to be marshaled as.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.MarshalDirectiveException">
      <summary>The exception that is thrown by the marshaler when it encounters a <see cref="T:System.Runtime.InteropServices.MarshalAsAttribute" /> it does not support.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor">
      <summary>Initializes a new instance of the <see langword="MarshalDirectiveException" /> class with default properties.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see langword="MarshalDirectiveException" /> class from serialization data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see langword="MarshalDirectiveException" /> class with a specified error message.</summary>
      <param name="message">The error message that specifies the reason for the exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.MarshalDirectiveException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.OptionalAttribute">
      <summary>Indicates that a parameter is optional.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.OptionalAttribute.#ctor">
      <summary>Initializes a new instance of the <see langword="OptionalAttribute" /> class with default values.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.OutAttribute">
      <summary>Indicates that data should be marshaled from callee back to caller.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.OutAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.OutAttribute" /> class.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.PreserveSigAttribute">
      <summary>Indicates that the HRESULT or <see langword="retval" /> signature transformation that takes place during COM interop calls should be suppressed.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.PreserveSigAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.PreserveSigAttribute" /> class.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.SafeArrayRankMismatchException">
      <summary>The exception thrown when the rank of an incoming <see langword="SAFEARRAY" /> does not match the rank specified in the managed signature.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor">
      <summary>Initializes a new instance of the <see langword="SafeArrayTypeMismatchException" /> class with default values.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see langword="SafeArrayTypeMismatchException" /> class from serialization data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see langword="SafeArrayRankMismatchException" /> class with the specified message.</summary>
      <param name="message">The message that indicates the reason for the exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.SafeArrayRankMismatchException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.SafeArrayTypeMismatchException">
      <summary>The exception thrown when the type of the incoming <see langword="SAFEARRAY" /> does not match the type specified in the managed signature.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor">
      <summary>Initializes a new instance of the <see langword="SafeArrayTypeMismatchException" /> class with default values.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see langword="SafeArrayTypeMismatchException" /> class from serialization data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see langword="SafeArrayTypeMismatchException" /> class with the specified message.</summary>
      <param name="message">The message that indicates the reason for the exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.SafeArrayTypeMismatchException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.SEHException">
      <summary>Represents structured exception handling (SEH) errors.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.SEHException" /> class.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.SEHException" /> class from serialization data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.SEHException" /> class with a specified message.</summary>
      <param name="message">The message that indicates the reason for the exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.SEHException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.CanResume">
      <summary>Indicates whether the exception can be recovered from, and whether the code can continue from the point at which the exception was thrown.</summary>
      <returns>Always <see langword="false" />, because resumable exceptions are not implemented.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.StructLayoutAttribute">
      <summary>Lets you control the physical layout of the data fields of a class or structure in memory.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.StructLayoutAttribute.CharSet">
      <summary>Indicates whether string data fields within the class should be marshaled as <see langword="LPWSTR" /> or <see langword="LPSTR" /> by default.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack">
      <summary>Controls the alignment of data fields of a class or structure in memory.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.StructLayoutAttribute.Size">
      <summary>Indicates the absolute size of the class or structure.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Int16)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> class with the specified <see cref="T:System.Runtime.InteropServices.LayoutKind" /> enumeration member.</summary>
      <param name="layoutKind">A 16-bit integer that represents one of the <see cref="T:System.Runtime.InteropServices.LayoutKind" /> values that specifies how the class or structure should be arranged.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> class with the specified <see cref="T:System.Runtime.InteropServices.LayoutKind" /> enumeration member.</summary>
      <param name="layoutKind">One of the enumeration values that specifies how the class or structure should be arranged.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.StructLayoutAttribute.Value">
      <summary>Gets the <see cref="T:System.Runtime.InteropServices.LayoutKind" /> value that specifies how the class or structure is arranged.</summary>
      <returns>One of the enumeration values that specifies how the class or structure is arranged.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeIdentifierAttribute">
      <summary>Provides support for type equivalence.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Runtime.InteropServices.TypeIdentifierAttribute" /> class.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Runtime.InteropServices.TypeIdentifierAttribute" /> class with the specified scope and identifier.</summary>
      <param name="scope">The first type equivalence string.</param>
      <param name="identifier">The second type equivalence string.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeIdentifierAttribute.Identifier">
      <summary>Gets the value of the <paramref name="identifier" /> parameter that was passed to the <see cref="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)" /> constructor.</summary>
      <returns>The value of the constructor's <paramref name="identifier" /> parameter.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeIdentifierAttribute.Scope">
      <summary>Gets the value of the <paramref name="scope" /> parameter that was passed to the <see cref="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)" /> constructor.</summary>
      <returns>The value of the constructor's <paramref name="scope" /> parameter.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.UCOMITypeLib">
      <summary>Use <see cref="T:System.Runtime.InteropServices.ComTypes.ITypeLib" /> instead.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMITypeLib.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary>Retrieves the library's documentation string, the complete Help file name and path, and the context identifier for the library Help topic in the Help file.</summary>
      <param name="index">Index of the type description whose documentation is to be returned.</param>
      <param name="strName">Returns a string that contains the name of the specified item.</param>
      <param name="strDocString">Returns a string that contains the documentation string for the specified item.</param>
      <param name="dwHelpContext">Returns the Help context identifier associated with the specified item.</param>
      <param name="strHelpFile">Returns a string that contains the fully qualified name of the Help file.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMITypeLib.GetLibAttr(System.IntPtr@)">
      <summary>Retrieves the structure that contains the library's attributes.</summary>
      <param name="ppTLibAttr">On successful return, a structure that contains the library's attributes.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMITypeLib.GetTypeInfoCount">
      <summary>Returns the number of type descriptions in the type library.</summary>
      <returns>The number of type descriptions in the type library.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMITypeLib.GetTypeInfoType(System.Int32,System.Runtime.InteropServices.ComTypes.TYPEKIND@)">
      <summary>Retrieves the type of a type description.</summary>
      <param name="index">The index of the type description within the type library</param>
      <param name="pTKind">A reference to the <see langword="TYPEKIND" /> enumeration for the type description.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMITypeLib.IsName(System.String,System.Int32)">
      <summary>Indicates whether a passed-in string contains the name of a type or member described in the library.</summary>
      <param name="szNameBuf">The string to test.</param>
      <param name="lHashVal">The hash value of <paramref name="szNameBuf" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="szNameBuf" /> was found in the type library; otherwise <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMITypeLib.ReleaseTLibAttr(System.IntPtr)">
      <summary>Releases the <see cref="T:System.Runtime.InteropServices.TYPELIBATTR" /> originally obtained from <see cref="M:System.Runtime.InteropServices.UCOMITypeLib.GetLibAttr(System.IntPtr@)" />.</summary>
      <param name="pTLibAttr">The <see langword="TLIBATTR" /> to release.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.UnknownWrapper">
      <summary>Wraps objects the marshaler should marshal as a <see langword="VT_UNKNOWN" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.UnknownWrapper.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.UnknownWrapper" /> class with the object to be wrapped.</summary>
      <param name="obj">The object being wrapped.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.UnknownWrapper.WrappedObject">
      <summary>Gets the object contained by this wrapper.</summary>
      <returns>The wrapped object.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute">
      <summary>Controls the marshaling behavior of a delegate signature passed as an unmanaged function pointer to or from unmanaged code. This class cannot be inherited.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.BestFitMapping">
      <summary>Enables or disables best-fit mapping behavior when converting Unicode characters to ANSI characters.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.CharSet">
      <summary>Indicates how to marshal string parameters to the method, and controls name mangling.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.SetLastError">
      <summary>Indicates whether the callee calls the <see langword="SetLastError" /> Windows API function before returning from the attributed method.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.ThrowOnUnmappableChar">
      <summary>Enables or disables the throwing of an exception on an unmappable Unicode character that is converted to an ANSI "?" character.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.#ctor(System.Runtime.InteropServices.CallingConvention)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute" /> class with the specified calling convention.</summary>
      <param name="callingConvention">The specified calling convention.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.CallingConvention">
      <summary>Gets the value of the calling convention.</summary>
      <returns>The value of the calling convention specified by the <see cref="M:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.#ctor(System.Runtime.InteropServices.CallingConvention)" /> constructor.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.UnmanagedType">
      <summary>Identifies how to marshal parameters or fields to unmanaged code.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.AnsiBStr">
      <summary>An ANSI character string that is a length-prefixed single byte. You can use this member on the <see cref="T:System.String" /> data type.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.AsAny">
      <summary>A dynamic type that determines the type of an object at run time and marshals the object as that type. This member is valid for platform invoke methods only.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Bool">
      <summary>A 4-byte Boolean value (<see langword="true" /> != 0, <see langword="false" /> = 0). This is the Win32 BOOL type.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.BStr">
      <summary>A Unicode character string that is a length-prefixed double byte. You can use this member, which is the default string in COM, on the <see cref="T:System.String" /> data type.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.ByValArray">
      <summary>When the <see cref="P:System.Runtime.InteropServices.MarshalAsAttribute.Value" /> property is set to <see langword="ByValArray" />, the <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst" /> field must be set to indicate the number of elements in the array. The <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.ArraySubType" /> field can optionally contain the <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> of the array elements when it is necessary to differentiate among string types. You can use this <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> only on an array that whose elements appear as fields in a structure.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.ByValTStr">
      <summary>Used for in-line, fixed-length character arrays that appear within a structure. <see langword="ByValTStr" /> types behave like C-style, fixed-size strings inside a structure (for example, <c>char s[5]</c>). The character type used with <see langword="ByValTStr" /> is determined by the <see cref="T:System.Runtime.InteropServices.CharSet" /> argument of the <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> attribute applied to the containing structure. Always use the <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst" /> field to indicate the size of the array.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Currency">
      <summary>A currency type. Used on a <see cref="T:System.Decimal" /> to marshal the decimal value as a COM currency type instead of as a <see langword="Decimal" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler">
      <summary>Specifies the custom marshaler class when used with the <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType" /> or <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef" /> field. The <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie" /> field can be used to pass additional information to the custom marshaler. You can use this member on any reference type. This member is valid for parameters and return values only. It cannot be used on fields.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Error">
      <summary>A native type that is associated with an <see cref="F:System.Runtime.InteropServices.UnmanagedType.I4" /> or an <see cref="F:System.Runtime.InteropServices.UnmanagedType.U4" /> and that causes the parameter to be exported as an HRESULT in the exported type library.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.FunctionPtr">
      <summary>An integer that can be used as a C-style function pointer. You can use this member on a <see cref="T:System.Delegate" /> data type or on a type that inherits from a <see cref="T:System.Delegate" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.HString">
      <summary>A Windows Runtime string. You can use this member on the <see cref="T:System.String" /> data type.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I1">
      <summary>A 1-byte signed integer. You can use this member to transform a Boolean value into a 1-byte, C-style <see langword="bool" /> (<see langword="true" /> = 1, <see langword="false" /> = 0).</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I2">
      <summary>A 2-byte signed integer.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I4">
      <summary>A 4-byte signed integer.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I8">
      <summary>An 8-byte signed integer.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.IDispatch">
      <summary>A COM <see langword="IDispatch" /> pointer (<see langword="Object" /> in Microsoft Visual Basic 6.0).</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.IInspectable">
      <summary>A Windows Runtime interface pointer. You can use this member on the <see cref="T:System.Object" /> data type.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Interface">
      <summary>A COM interface pointer. The <see cref="T:System.Guid" /> of the interface is obtained from the class metadata. Use this member to specify the exact interface type or the default interface type if you apply it to a class. This member produces the same behavior as <see cref="F:System.Runtime.InteropServices.UnmanagedType.IUnknown" /> when you apply it to the <see cref="T:System.Object" /> data type.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.IUnknown">
      <summary>A COM <see langword="IUnknown" /> pointer. You can use this member on the <see cref="T:System.Object" /> data type.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPArray">
      <summary>A pointer to the first element of a C-style array. When marshaling from managed to unmanaged code, the length of the array is determined by the length of the managed array. When marshaling from unmanaged to managed code, the length of the array is determined from the <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst" /> and <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeParamIndex" /> fields, optionally followed by the unmanaged type of the elements within the array when it is necessary to differentiate among string types.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPStr">
      <summary>A single byte, null-terminated ANSI character string. You can use this member on the <see cref="T:System.String" /> and <see cref="T:System.Text.StringBuilder" /> data types.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPStruct">
      <summary>A pointer to a C-style structure that you use to marshal managed formatted classes. This member is valid for platform invoke methods only.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPTStr">
      <summary>A platform-dependent character string: ANSI on Windows 98, and Unicode on Windows NT and Windows XP. This value is supported only for platform invoke and not for COM interop, because exporting a string of type <see langword="LPTStr" /> is not supported.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPUTF8Str">
      <summary>A pointer to a UTF-8 encoded string.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPWStr">
      <summary>A 2-byte, null-terminated Unicode character string. You cannot use the <see langword="LPWStr" /> value with an unmanaged string unless the string was created by using the unmanaged <see langword="CoTaskMemAlloc" /> function.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.R4">
      <summary>A 4-byte floating-point number.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.R8">
      <summary>An 8-byte floating-point number.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.SafeArray">
      <summary>A <see langword="SafeArray" />, which is a self-describing array that carries the type, rank, and bounds of the associated array data. You can use this member with the <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SafeArraySubType" /> field to override the default element type.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Struct">
      <summary>A VARIANT, which is used to marshal managed formatted classes and value types.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.SysInt">
      <summary>A platform-dependent, signed integer: 4 bytes on 32-bit Windows, 8 bytes on 64-bit Windows.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.SysUInt">
      <summary>A platform-dependent, unsigned integer: 4 bytes on 32-bit Windows, 8 bytes on 64-bit Windows.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.TBStr">
      <summary>A length-prefixed, platform-dependent <see langword="char" /> string: ANSI on Windows 98, Unicode on Windows NT. You rarely use this BSTR-like member.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U1">
      <summary>A 1-byte unsigned integer.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U2">
      <summary>A 2-byte unsigned integer.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U4">
      <summary>A 4-byte unsigned integer.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U8">
      <summary>An 8-byte unsigned integer.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.VariantBool">
      <summary>A 2-byte, OLE-defined VARIANT_BOOL type (<see langword="true" /> = -1, <see langword="false" /> = 0).</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.VBByRefStr">
      <summary>A value that enables Visual Basic to change a string in unmanaged code and have the results reflected in managed code. This value is only supported for platform invoke.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.VarEnum">
      <summary>Indicates how to marshal the array elements when an array is marshaled from managed to unmanaged code as a <see cref="F:System.Runtime.InteropServices.UnmanagedType.SafeArray" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_ARRAY">
      <summary>Indicates a <see langword="SAFEARRAY" /> pointer.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BLOB">
      <summary>Indicates length prefixed bytes.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BLOB_OBJECT">
      <summary>Indicates that a blob contains an object.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BOOL">
      <summary>Indicates a Boolean value.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BSTR">
      <summary>Indicates a BSTR string.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BYREF">
      <summary>Indicates that a value is a reference.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CARRAY">
      <summary>Indicates a C style array.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CF">
      <summary>Indicates the clipboard format.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CLSID">
      <summary>Indicates a class ID.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CY">
      <summary>Indicates a currency value.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_DATE">
      <summary>Indicates a DATE value.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_DECIMAL">
      <summary>Indicates a <see langword="decimal" /> value.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_DISPATCH">
      <summary>Indicates an <see langword="IDispatch" /> pointer.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_EMPTY">
      <summary>Indicates that a value was not specified.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_ERROR">
      <summary>Indicates an SCODE.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_FILETIME">
      <summary>Indicates a FILETIME value.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_HRESULT">
      <summary>Indicates an HRESULT.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I1">
      <summary>Indicates a <see langword="char" /> value.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I2">
      <summary>Indicates a <see langword="short" /> integer.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I4">
      <summary>Indicates a <see langword="long" /> integer.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I8">
      <summary>Indicates a 64-bit integer.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_INT">
      <summary>Indicates an integer value.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_LPSTR">
      <summary>Indicates a null-terminated string.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_LPWSTR">
      <summary>Indicates a wide string terminated by <see langword="null" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_NULL">
      <summary>Indicates a null value, similar to a null value in SQL.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_PTR">
      <summary>Indicates a pointer type.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_R4">
      <summary>Indicates a <see langword="float" /> value.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_R8">
      <summary>Indicates a <see langword="double" /> value.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_RECORD">
      <summary>Indicates a user defined type.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_SAFEARRAY">
      <summary>Indicates a SAFEARRAY. Not valid in a VARIANT.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STORAGE">
      <summary>Indicates that the name of a storage follows.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STORED_OBJECT">
      <summary>Indicates that a storage contains an object.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STREAM">
      <summary>Indicates that the name of a stream follows.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STREAMED_OBJECT">
      <summary>Indicates that a stream contains an object.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI1">
      <summary>Indicates a <see langword="byte" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI2">
      <summary>Indicates an <see langword="unsigned" /><see langword="short" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI4">
      <summary>Indicates an <see langword="unsigned" /><see langword="long" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI8">
      <summary>Indicates an 64-bit unsigned integer.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UINT">
      <summary>Indicates an <see langword="unsigned" /> integer value.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UNKNOWN">
      <summary>Indicates an <see langword="IUnknown" /> pointer.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_USERDEFINED">
      <summary>Indicates a user defined type.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_VARIANT">
      <summary>Indicates a VARIANT <see langword="far" /> pointer.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_VECTOR">
      <summary>Indicates a simple, counted array.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_VOID">
      <summary>Indicates a C style <see langword="void" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.VariantWrapper">
      <summary>Marshals data of type <see langword="VT_VARIANT | VT_BYREF" /> from managed to unmanaged code. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.VariantWrapper.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.VariantWrapper" /> class for the specified <see cref="T:System.Object" /> parameter.</summary>
      <param name="obj">The object to marshal.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.VariantWrapper.WrappedObject">
      <summary>Gets the object wrapped by the <see cref="T:System.Runtime.InteropServices.VariantWrapper" /> object.</summary>
      <returns>The object wrapped by the <see cref="T:System.Runtime.InteropServices.VariantWrapper" /> object.</returns>
    </member>
    <member name="T:System.Runtime.Versioning.TargetFrameworkAttribute">
      <summary>Identifies the version of the .NET Framework that a particular assembly was compiled against.</summary>
    </member>
    <member name="M:System.Runtime.Versioning.TargetFrameworkAttribute.#ctor(System.String)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Versioning.TargetFrameworkAttribute" /> class by specifying the .NET Framework version against which an assembly was built.</summary>
      <param name="frameworkName">The version of the .NET Framework against which the assembly was built.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="frameworkName" /> is <see langword="null" />.</exception>
    </member>
    <member name="P:System.Runtime.Versioning.TargetFrameworkAttribute.FrameworkDisplayName">
      <summary>Gets the display name of the .NET Framework version against which an assembly was built.</summary>
      <returns>The display name of the .NET Framework version.</returns>
    </member>
    <member name="P:System.Runtime.Versioning.TargetFrameworkAttribute.FrameworkName">
      <summary>Gets the name of the .NET Framework version against which a particular assembly was compiled.</summary>
      <returns>The name of the .NET Framework version with which the assembly was compiled.</returns>
    </member>
    <member name="T:System.RuntimeFieldHandle">
      <summary>Represents a field using an internal metadata token.</summary>
    </member>
    <member name="M:System.RuntimeFieldHandle.Equals(System.Object)">
      <summary>Indicates whether the current instance is equal to the specified object.</summary>
      <param name="obj">The object to compare to the current instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> is a <see cref="T:System.RuntimeFieldHandle" /> and equal to the value of the current instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.RuntimeFieldHandle.Equals(System.RuntimeFieldHandle)">
      <summary>Indicates whether the current instance is equal to the specified <see cref="T:System.RuntimeFieldHandle" />.</summary>
      <param name="handle">The <see cref="T:System.RuntimeFieldHandle" /> to compare to the current instance.</param>
      <returns>
        <see langword="true" /> if the value of <paramref name="handle" /> is equal to the value of the current instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.RuntimeFieldHandle.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
    </member>
    <member name="M:System.RuntimeFieldHandle.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data necessary to deserialize the field represented by the current instance.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object to populate with serialization information.</param>
      <param name="context">(Reserved) The place to store and retrieve serialized data.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The <see cref="P:System.RuntimeFieldHandle.Value" /> property of the current instance is not a valid handle.</exception>
    </member>
    <member name="M:System.RuntimeFieldHandle.op_Equality(System.RuntimeFieldHandle,System.RuntimeFieldHandle)">
      <summary>Indicates whether two <see cref="T:System.RuntimeFieldHandle" /> structures are equal.</summary>
      <param name="left">The <see cref="T:System.RuntimeFieldHandle" /> to compare to <paramref name="right" />.</param>
      <param name="right">The <see cref="T:System.RuntimeFieldHandle" /> to compare to <paramref name="left" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is equal to <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.RuntimeFieldHandle.op_Inequality(System.RuntimeFieldHandle,System.RuntimeFieldHandle)">
      <summary>Indicates whether two <see cref="T:System.RuntimeFieldHandle" /> structures are not equal.</summary>
      <param name="left">The <see cref="T:System.RuntimeFieldHandle" /> to compare to <paramref name="right" />.</param>
      <param name="right">The <see cref="T:System.RuntimeFieldHandle" /> to compare to <paramref name="left" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is not equal to <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.RuntimeFieldHandle.Value">
      <summary>Gets a handle to the field represented by the current instance.</summary>
      <returns>An <see cref="T:System.IntPtr" /> that contains the handle to the field represented by the current instance.</returns>
    </member>
    <member name="T:System.RuntimeMethodHandle">
      <summary>
        <see cref="T:System.RuntimeMethodHandle" /> is a handle to the internal metadata representation of a method.</summary>
    </member>
    <member name="M:System.RuntimeMethodHandle.Equals(System.Object)">
      <summary>Indicates whether this instance is equal to a specified object.</summary>
      <param name="obj">A <see cref="T:System.Object" /> to compare to this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> is a <see cref="T:System.RuntimeMethodHandle" /> and equal to the value of this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.RuntimeMethodHandle.Equals(System.RuntimeMethodHandle)">
      <summary>Indicates whether this instance is equal to a specified <see cref="T:System.RuntimeMethodHandle" />.</summary>
      <param name="handle">A <see cref="T:System.RuntimeMethodHandle" /> to compare to this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="handle" /> is equal to the value of this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.RuntimeMethodHandle.GetFunctionPointer">
      <summary>Obtains a pointer to the method represented by this instance.</summary>
      <exception cref="T:System.Security.SecurityException">The caller does not have the necessary permission to perform this operation.</exception>
      <returns>A pointer to the method represented by this instance.</returns>
    </member>
    <member name="M:System.RuntimeMethodHandle.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.RuntimeMethodHandle.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data necessary to deserialize the field represented by this instance.</summary>
      <param name="info">The object to populate with serialization information.</param>
      <param name="context">(Reserved) The place to store and retrieve serialized data.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <see cref="P:System.RuntimeMethodHandle.Value" /> is invalid.</exception>
    </member>
    <member name="M:System.RuntimeMethodHandle.op_Equality(System.RuntimeMethodHandle,System.RuntimeMethodHandle)">
      <summary>Indicates whether two instances of <see cref="T:System.RuntimeMethodHandle" /> are equal.</summary>
      <param name="left">A <see cref="T:System.RuntimeMethodHandle" /> to compare to <paramref name="right" />.</param>
      <param name="right">A <see cref="T:System.RuntimeMethodHandle" /> to compare to <paramref name="left" />.</param>
      <returns>
        <see langword="true" /> if the value of <paramref name="left" /> is equal to the value of <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.RuntimeMethodHandle.op_Inequality(System.RuntimeMethodHandle,System.RuntimeMethodHandle)">
      <summary>Indicates whether two instances of <see cref="T:System.RuntimeMethodHandle" /> are not equal.</summary>
      <param name="left">A <see cref="T:System.RuntimeMethodHandle" /> to compare to <paramref name="right" />.</param>
      <param name="right">A <see cref="T:System.RuntimeMethodHandle" /> to compare to <paramref name="left" />.</param>
      <returns>
        <see langword="true" /> if the value of <paramref name="left" /> is unequal to the value of <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.RuntimeMethodHandle.Value">
      <summary>Gets the value of this instance.</summary>
      <returns>A <see cref="T:System.RuntimeMethodHandle" /> that is the internal metadata representation of a method.</returns>
    </member>
    <member name="T:System.RuntimeTypeHandle">
      <summary>Represents a type using an internal metadata token.</summary>
    </member>
    <member name="M:System.RuntimeTypeHandle.Equals(System.Object)">
      <summary>Indicates whether the specified object is equal to the current <see cref="T:System.RuntimeTypeHandle" /> structure.</summary>
      <param name="obj">An object to compare to the current instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> is a <see cref="T:System.RuntimeTypeHandle" /> structure and is equal to the value of this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.RuntimeTypeHandle.Equals(System.RuntimeTypeHandle)">
      <summary>Indicates whether the specified <see cref="T:System.RuntimeTypeHandle" /> structure is equal to the current <see cref="T:System.RuntimeTypeHandle" /> structure.</summary>
      <param name="handle">The <see cref="T:System.RuntimeTypeHandle" /> structure to compare to the current instance.</param>
      <returns>
        <see langword="true" /> if the value of <paramref name="handle" /> is equal to the value of this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.RuntimeTypeHandle.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.RuntimeTypeHandle.GetModuleHandle">
      <summary>Gets a handle to the module that contains the type represented by the current instance.</summary>
      <returns>A <see cref="T:System.ModuleHandle" /> structure representing a handle to the module that contains the type represented by the current instance.</returns>
    </member>
    <member name="M:System.RuntimeTypeHandle.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data necessary to deserialize the type represented by the current instance.</summary>
      <param name="info">The object to be populated with serialization information.</param>
      <param name="context">(Reserved) The location where serialized data will be stored and retrieved.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <see cref="P:System.RuntimeTypeHandle.Value" /> is invalid.</exception>
    </member>
    <member name="M:System.RuntimeTypeHandle.op_Equality(System.Object,System.RuntimeTypeHandle)">
      <summary>Indicates whether an object and a <see cref="T:System.RuntimeTypeHandle" /> structure are equal.</summary>
      <param name="left">An object to compare to <paramref name="right" />.</param>
      <param name="right">A <see cref="T:System.RuntimeTypeHandle" /> structure to compare to <paramref name="left" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is a <see cref="T:System.RuntimeTypeHandle" /> structure and is equal to <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.RuntimeTypeHandle.op_Equality(System.RuntimeTypeHandle,System.Object)">
      <summary>Indicates whether a <see cref="T:System.RuntimeTypeHandle" /> structure is equal to an object.</summary>
      <param name="left">A <see cref="T:System.RuntimeTypeHandle" /> structure to compare to <paramref name="right" />.</param>
      <param name="right">An object to compare to <paramref name="left" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="right" /> is a <see cref="T:System.RuntimeTypeHandle" /> and is equal to <paramref name="left" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.RuntimeTypeHandle.op_Inequality(System.Object,System.RuntimeTypeHandle)">
      <summary>Indicates whether an object and a <see cref="T:System.RuntimeTypeHandle" /> structure are not equal.</summary>
      <param name="left">An object to compare to <paramref name="right" />.</param>
      <param name="right">A <see cref="T:System.RuntimeTypeHandle" /> structure to compare to <paramref name="left" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is a <see cref="T:System.RuntimeTypeHandle" /> and is not equal to <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.RuntimeTypeHandle.op_Inequality(System.RuntimeTypeHandle,System.Object)">
      <summary>Indicates whether a <see cref="T:System.RuntimeTypeHandle" /> structure is not equal to an object.</summary>
      <param name="left">A <see cref="T:System.RuntimeTypeHandle" /> structure to compare to <paramref name="right" />.</param>
      <param name="right">An object to compare to <paramref name="left" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="right" /> is a <see cref="T:System.RuntimeTypeHandle" /> structure and is not equal to <paramref name="left" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.RuntimeTypeHandle.Value">
      <summary>Gets a handle to the type represented by this instance.</summary>
      <returns>A handle to the type represented by this instance.</returns>
    </member>
    <member name="T:System.SByte">
      <summary>Represents an 8-bit signed integer.</summary>
    </member>
    <member name="F:System.SByte.MaxValue">
      <summary>Represents the largest possible value of <see cref="T:System.SByte" />. This field is constant.</summary>
    </member>
    <member name="F:System.SByte.MinValue">
      <summary>Represents the smallest possible value of <see cref="T:System.SByte" />. This field is constant.</summary>
    </member>
    <member name="M:System.SByte.CompareTo(System.Object)">
      <summary>Compares this instance to a specified object and returns an indication of their relative values.</summary>
      <param name="obj">An object to compare, or <see langword="null" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not an <see cref="T:System.SByte" />.</exception>
      <returns>A signed number indicating the relative values of this instance and <paramref name="obj" />.  
  
 <list type="table"><listheader><term> Return Value</term><description> Description</description></listheader><item><term> Less than zero</term><description> This instance is less than <paramref name="obj" />.</description></item><item><term> Zero</term><description> This instance is equal to <paramref name="obj" />.</description></item><item><term> Greater than zero</term><description> This instance is greater than <paramref name="obj" />, or <paramref name="obj" /> is <see langword="null" />.</description></item></list></returns>
    </member>
    <member name="M:System.SByte.CompareTo(System.SByte)">
      <summary>Compares this instance to a specified 8-bit signed integer and returns an indication of their relative values.</summary>
      <param name="value">An 8-bit signed integer to compare.</param>
      <returns>A signed integer that indicates the relative order of this instance and <paramref name="value" />.  
  
 <list type="table"><listheader><term> Return Value</term><description> Description</description></listheader><item><term> Less than zero</term><description> This instance is less than <paramref name="value" />.</description></item><item><term> Zero</term><description> This instance is equal to <paramref name="value" />.</description></item><item><term> Greater than zero</term><description> This instance is greater than <paramref name="value" />.</description></item></list></returns>
    </member>
    <member name="M:System.SByte.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="obj">An object to compare with this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> is an instance of <see cref="T:System.SByte" /> and equals the value of this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.SByte.Equals(System.SByte)">
      <summary>Returns a value indicating whether this instance is equal to a specified <see cref="T:System.SByte" /> value.</summary>
      <param name="obj">An <see cref="T:System.SByte" /> value to compare to this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> has the same value as this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.SByte.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.SByte.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.SByte" />.</summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.SByte" />.</returns>
    </member>
    <member name="M:System.SByte.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Converts the span representation of a number that is in a specified style and culture-specific format to its 8-bit signed equivalent.</summary>
      <param name="s">A span containing the characters representing the number to convert. The span is interpreted by using the style specified by <paramref name="style" />.</param>
      <param name="style">A bitwise combination of the enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />. If <paramref name="provider" /> is <see langword="null" />, the thread current culture is used.</param>
      <returns>An 8-bit signed byte value that is equivalent to the number specified in the <paramref name="s" /> parameter.</returns>
    </member>
    <member name="M:System.SByte.Parse(System.String)">
      <summary>Converts the string representation of a number to its 8-bit signed integer equivalent.</summary>
      <param name="s">A string that represents a number to convert. The string is interpreted using the <see cref="F:System.Globalization.NumberStyles.Integer" /> style.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not consist of an optional sign followed by a sequence of digits (zero through nine).</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />.</exception>
      <returns>An 8-bit signed integer that is equivalent to the number contained in the <paramref name="s" /> parameter.</returns>
    </member>
    <member name="M:System.SByte.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>Converts the string representation of a number in a specified style to its 8-bit signed integer equivalent.</summary>
      <param name="s">A string that contains a number to convert. The string is interpreted using the style specified by <paramref name="style" />.</param>
      <param name="style">A bitwise combination of the enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format that is compliant with <paramref name="style" />.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />.  
  
 -or-  
  
 <paramref name="s" /> includes non-zero, fractional digits.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  
  
 -or-  
  
 <paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <returns>An 8-bit signed integer that is equivalent to the number specified in <paramref name="s" />.</returns>
    </member>
    <member name="M:System.SByte.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Converts the string representation of a number that is in a specified style and culture-specific format to its 8-bit signed equivalent.</summary>
      <param name="s">A string that contains the number to convert. The string is interpreted by using the style specified by <paramref name="style" />.</param>
      <param name="style">A bitwise combination of the enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />. If <paramref name="provider" /> is <see langword="null" />, the thread current culture is used.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  
  
 -or-  
  
 <paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format that is compliant with <paramref name="style" />.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number that is less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />.  
  
 -or-  
  
 <paramref name="s" /> includes non-zero, fractional digits.</exception>
      <returns>An 8-bit signed byte value that is equivalent to the number specified in the <paramref name="s" /> parameter.</returns>
    </member>
    <member name="M:System.SByte.Parse(System.String,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified culture-specific format to its 8-bit signed integer equivalent.</summary>
      <param name="s">A string that represents a number to convert. The string is interpreted using the <see cref="F:System.Globalization.NumberStyles.Integer" /> style.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />. If <paramref name="provider" /> is <see langword="null" />, the thread current culture is used.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />.</exception>
      <returns>An 8-bit signed integer that is equivalent to the number specified in <paramref name="s" />.</returns>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is unused.</param>
      <returns>
        <see langword="true" /> if the value of the current instance is not zero; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is unused.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Byte" />.</returns>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Char" />.</returns>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to do so throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
      <returns>None. This conversion is not supported.</returns>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is unused.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Decimal" />.</returns>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Double" />.</returns>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int16" />.</returns>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int64" />.</returns>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, unchanged.</returns>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Single" />.</returns>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />.</summary>
      <param name="type">The <see cref="T:System.Type" /> to which to convert this <see cref="T:System.SByte" /> value.</param>
      <param name="provider">A <see cref="T:System.IFormatProvider" /> implementation that provides information about the format of the returned value.</param>
      <returns>The value of the current instance, converted to an object of type <paramref name="type" />.</returns>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt16" />.</returns>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt32" />.</returns>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt64" />.</returns>
    </member>
    <member name="M:System.SByte.ToString">
      <summary>Converts the numeric value of this instance to its equivalent string representation.</summary>
      <returns>The string representation of the value of this instance, consisting of a negative sign if the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeroes.</returns>
    </member>
    <member name="M:System.SByte.ToString(System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>The string representation of the value of this instance, as specified by <paramref name="provider" />.</returns>
    </member>
    <member name="M:System.SByte.ToString(System.String)">
      <summary>Converts the numeric value of this instance to its equivalent string representation, using the specified format.</summary>
      <param name="format">A standard or custom numeric format string.</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.</exception>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" />.</returns>
    </member>
    <member name="M:System.SByte.ToString(System.String,System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.</summary>
      <param name="format">A standard or custom numeric format string.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.</exception>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
    </member>
    <member name="M:System.SByte.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <summary>Tries to format the value of the current 8-bit signed integer instance into the provided span of characters.</summary>
      <param name="destination">When this method returns, this instance's value formatted as a span of characters.</param>
      <param name="charsWritten">When this method returns, the number of characters that were written in <paramref name="destination" />.</param>
      <param name="format">A span containing the charactes that represent a standard or custom format string that defines the acceptable format for <paramref name="destination" />.</param>
      <param name="provider">An optional object that supplies culture-specific formatting information for <paramref name="destination" />.</param>
      <returns>
        <see langword="true" /> if the formatting was successful; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.SByte.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.SByte@)">
      <summary>Tries to convert the span representation of a number in a specified style and culture-specific format to its <see cref="T:System.SByte" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
      <param name="s">A span containing the characters that represent the number to convert.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <param name="result">When this method returns, contains the 8-bit signed integer value equivalent to the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not in a format compliant with <paramref name="style" />, or represents a number less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />. This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.SByte.TryParse(System.ReadOnlySpan{System.Char},System.SByte@)">
      <summary>Tries to convert the span representation of a number to its <see cref="T:System.SByte" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
      <param name="s">A span containing the characters representing the number to convert.</param>
      <param name="result">When this method returns, contains the 8-bit signed integer value that is equivalent to the number contained in <paramref name="s" /> if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not in the correct format, or represents a number that is less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />. This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.SByte.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.SByte@)">
      <summary>Tries to convert the string representation of a number in a specified style and culture-specific format to its <see cref="T:System.SByte" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
      <param name="s">A string representing a number to convert.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <param name="result">When this method returns, contains the 8-bit signed integer value equivalent to the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not in a format compliant with <paramref name="style" />, or represents a number less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />. This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  
  
 -or-  
  
 <paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.SByte.TryParse(System.String,System.SByte@)">
      <summary>Tries to convert the string representation of a number to its <see cref="T:System.SByte" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
      <param name="s">A string that contains a number to convert.</param>
      <param name="result">When this method returns, contains the 8-bit signed integer value that is equivalent to the number contained in <paramref name="s" /> if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not in the correct format, or represents a number that is less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />. This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Security.AllowPartiallyTrustedCallersAttribute">
      <summary>Allows an assembly to be called by partially trusted code. Without this declaration, only fully trusted callers are able to use the assembly. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.AllowPartiallyTrustedCallersAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.AllowPartiallyTrustedCallersAttribute" /> class.</summary>
    </member>
    <member name="P:System.Security.AllowPartiallyTrustedCallersAttribute.PartialTrustVisibilityLevel">
      <summary>Gets or sets the default partial trust visibility for code that is marked with the <see cref="T:System.Security.AllowPartiallyTrustedCallersAttribute" /> (APTCA) attribute.</summary>
      <returns>One of the enumeration values. The default is <see cref="F:System.Security.PartialTrustVisibilityLevel.VisibleToAllHosts" />.</returns>
    </member>
    <member name="T:System.Security.SecurityCriticalAttribute">
      <summary>Specifies that code or an assembly performs security-critical operations.</summary>
    </member>
    <member name="M:System.Security.SecurityCriticalAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.SecurityCriticalAttribute" /> class.</summary>
    </member>
    <member name="M:System.Security.SecurityCriticalAttribute.#ctor(System.Security.SecurityCriticalScope)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.SecurityCriticalAttribute" /> class with the specified scope.</summary>
      <param name="scope">One of the enumeration values that specifies the scope of the attribute.</param>
    </member>
    <member name="P:System.Security.SecurityCriticalAttribute.Scope">
      <summary>Gets the scope for the attribute.</summary>
      <returns>One of the enumeration values that specifies the scope of the attribute. The default is <see cref="F:System.Security.SecurityCriticalScope.Explicit" />, which indicates that the attribute applies only to the immediate target.</returns>
    </member>
    <member name="T:System.Security.SecurityException">
      <summary>The exception that is thrown when a security error is detected.</summary>
    </member>
    <member name="M:System.Security.SecurityException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.SecurityException" /> class with default properties.</summary>
    </member>
    <member name="M:System.Security.SecurityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.SecurityException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.SecurityException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.SecurityException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.Security.SecurityException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.SecurityException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.Security.SecurityException.#ctor(System.String,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.SecurityException" /> class with a specified error message and the permission type that caused the exception to be thrown.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="type">The type of the permission that caused the exception to be thrown.</param>
    </member>
    <member name="M:System.Security.SecurityException.#ctor(System.String,System.Type,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.SecurityException" /> class with a specified error message, the permission type that caused the exception to be thrown, and the permission state.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="type">The type of the permission that caused the exception to be thrown.</param>
      <param name="state">The state of the permission that caused the exception to be thrown.</param>
    </member>
    <member name="M:System.Security.SecurityException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the <see cref="T:System.Security.SecurityException" />.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.SecurityException.ToString">
      <summary>Returns a representation of the current <see cref="T:System.Security.SecurityException" />.</summary>
      <returns>A string representation of the current <see cref="T:System.Security.SecurityException" />.</returns>
    </member>
    <member name="P:System.Security.SecurityException.Demanded">
      <summary>Gets or sets the demanded security permission, permission set, or permission set collection that failed.</summary>
      <returns>A permission, permission set, or permission set collection object.</returns>
    </member>
    <member name="P:System.Security.SecurityException.DenySetInstance">
      <summary>Gets or sets the denied security permission, permission set, or permission set collection that caused a demand to fail.</summary>
      <returns>A permission, permission set, or permission set collection object.</returns>
    </member>
    <member name="P:System.Security.SecurityException.FailedAssemblyInfo">
      <summary>Gets or sets information about the failed assembly.</summary>
      <returns>An <see cref="T:System.Reflection.AssemblyName" /> that identifies the failed assembly.</returns>
    </member>
    <member name="P:System.Security.SecurityException.GrantedSet">
      <summary>Gets or sets the granted permission set of the assembly that caused the <see cref="T:System.Security.SecurityException" />.</summary>
      <returns>The XML representation of the granted set of the assembly.</returns>
    </member>
    <member name="P:System.Security.SecurityException.Method">
      <summary>Gets or sets the information about the method associated with the exception.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> object describing the method.</returns>
    </member>
    <member name="P:System.Security.SecurityException.PermissionState">
      <summary>Gets or sets the state of the permission that threw the exception.</summary>
      <returns>The state of the permission at the time the exception was thrown.</returns>
    </member>
    <member name="P:System.Security.SecurityException.PermissionType">
      <summary>Gets or sets the type of the permission that failed.</summary>
      <returns>The type of the permission that failed.</returns>
    </member>
    <member name="P:System.Security.SecurityException.PermitOnlySetInstance">
      <summary>Gets or sets the permission, permission set, or permission set collection that is part of the permit-only stack frame that caused a security check to fail.</summary>
      <returns>A permission, permission set, or permission set collection object.</returns>
    </member>
    <member name="P:System.Security.SecurityException.RefusedSet">
      <summary>Gets or sets the refused permission set of the assembly that caused the <see cref="T:System.Security.SecurityException" />.</summary>
      <returns>The XML representation of the refused permission set of the assembly.</returns>
    </member>
    <member name="P:System.Security.SecurityException.Url">
      <summary>Gets or sets the URL of the assembly that caused the exception.</summary>
      <returns>A URL that identifies the location of the assembly.</returns>
    </member>
    <member name="T:System.Security.SecuritySafeCriticalAttribute">
      <summary>Identifies types or members as security-critical and safely accessible by transparent code.</summary>
    </member>
    <member name="M:System.Security.SecuritySafeCriticalAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.SecuritySafeCriticalAttribute" /> class.</summary>
    </member>
    <member name="T:System.Security.SecurityTransparentAttribute">
      <summary>Specifies that an assembly cannot cause an elevation of privilege.</summary>
    </member>
    <member name="M:System.Security.SecurityTransparentAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.SecurityTransparentAttribute" /> class.</summary>
    </member>
    <member name="T:System.Security.VerificationException">
      <summary>The exception that is thrown when the security policy requires code to be type safe and the verification process is unable to verify that the code is type safe.</summary>
    </member>
    <member name="M:System.Security.VerificationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.VerificationException" /> class with default properties.</summary>
    </member>
    <member name="M:System.Security.VerificationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.VerificationException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Security.VerificationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.VerificationException" /> class with an explanatory message.</summary>
      <param name="message">A message indicating the reason the exception occurred.</param>
    </member>
    <member name="M:System.Security.VerificationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.VerificationException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.Single">
      <summary>Represents a single-precision floating-point number.</summary>
    </member>
    <member name="F:System.Single.Epsilon">
      <summary>Represents the smallest positive <see cref="T:System.Single" /> value that is greater than zero. This field is constant.</summary>
    </member>
    <member name="F:System.Single.MaxValue">
      <summary>Represents the largest possible value of <see cref="T:System.Single" />. This field is constant.</summary>
    </member>
    <member name="F:System.Single.MinValue">
      <summary>Represents the smallest possible value of <see cref="T:System.Single" />. This field is constant.</summary>
    </member>
    <member name="F:System.Single.NaN">
      <summary>Represents not a number (<see langword="NaN" />). This field is constant.</summary>
    </member>
    <member name="F:System.Single.NegativeInfinity">
      <summary>Represents negative infinity. This field is constant.</summary>
    </member>
    <member name="F:System.Single.PositiveInfinity">
      <summary>Represents positive infinity. This field is constant.</summary>
    </member>
    <member name="M:System.Single.CompareTo(System.Object)">
      <summary>Compares this instance to a specified object and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object.</summary>
      <param name="value">An object to compare, or <see langword="null" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.Single" />.</exception>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.  
  
 <list type="table"><listheader><term> Return Value</term><description> Description</description></listheader><item><term> Less than zero</term><description> This instance is less than <paramref name="value" />, or this instance is not a number (<see cref="F:System.Single.NaN" />) and <paramref name="value" /> is a number.</description></item><item><term> Zero</term><description> This instance is equal to <paramref name="value" />, or this instance and value are both not a number (<see cref="F:System.Single.NaN" />), <see cref="F:System.Single.PositiveInfinity" />, or <see cref="F:System.Single.NegativeInfinity" />.</description></item><item><term> Greater than zero</term><description> This instance is greater than <paramref name="value" />, OR this instance is a number and <paramref name="value" /> is not a number (<see cref="F:System.Single.NaN" />), OR <paramref name="value" /> is <see langword="null" />.</description></item></list></returns>
    </member>
    <member name="M:System.Single.CompareTo(System.Single)">
      <summary>Compares this instance to a specified single-precision floating-point number and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified single-precision floating-point number.</summary>
      <param name="value">A single-precision floating-point number to compare.</param>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.  
  
 <list type="table"><listheader><term> Return Value</term><description> Description</description></listheader><item><term> Less than zero</term><description> This instance is less than <paramref name="value" />, or this instance is not a number (<see cref="F:System.Single.NaN" />) and <paramref name="value" /> is a number.</description></item><item><term> Zero</term><description> This instance is equal to <paramref name="value" />, or both this instance and <paramref name="value" /> are not a number (<see cref="F:System.Single.NaN" />), <see cref="F:System.Single.PositiveInfinity" />, or <see cref="F:System.Single.NegativeInfinity" />.</description></item><item><term> Greater than zero</term><description> This instance is greater than <paramref name="value" />, or this instance is a number and <paramref name="value" /> is not a number (<see cref="F:System.Single.NaN" />).</description></item></list></returns>
    </member>
    <member name="M:System.Single.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="obj">An object to compare with this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> is an instance of <see cref="T:System.Single" /> and equals the value of this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Single.Equals(System.Single)">
      <summary>Returns a value indicating whether this instance and a specified <see cref="T:System.Single" /> object represent the same value.</summary>
      <param name="obj">An object to compare with this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> is equal to this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Single.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Single.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Single" />.</summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.Single" />.</returns>
    </member>
    <member name="M:System.Single.IsFinite(System.Single)">
      <summary>Determines whether the specified value is finite (zero, subnormal or normal).</summary>
      <param name="f">A single-precision floating-point number.</param>
      <returns>
        <see langword="true" /> if the specified value is finite (zero, subnormal or normal); otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Single.IsInfinity(System.Single)">
      <summary>Returns a value indicating whether the specified number evaluates to negative or positive infinity.</summary>
      <param name="f">A single-precision floating-point number.</param>
      <returns>
        <see langword="true" /> if <paramref name="f" /> evaluates to <see cref="F:System.Single.PositiveInfinity" /> or <see cref="F:System.Single.NegativeInfinity" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Single.IsNaN(System.Single)">
      <summary>Returns a value that indicates whether the specified value is not a number (<see cref="F:System.Single.NaN" />).</summary>
      <param name="f">A single-precision floating-point number.</param>
      <returns>
        <see langword="true" /> if <paramref name="f" /> evaluates to not a number (<see cref="F:System.Single.NaN" />); otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Single.IsNegative(System.Single)">
      <summary>Determines whether the specified value is negative.</summary>
      <param name="f">A single-precision floating-point number.</param>
      <returns>
        <see langword="true" /> if negative, <see langword="false" /> otherwise.</returns>
    </member>
    <member name="M:System.Single.IsNegativeInfinity(System.Single)">
      <summary>Returns a value indicating whether the specified number evaluates to negative infinity.</summary>
      <param name="f">A single-precision floating-point number.</param>
      <returns>
        <see langword="true" /> if <paramref name="f" /> evaluates to <see cref="F:System.Single.NegativeInfinity" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Single.IsNormal(System.Single)">
      <summary>Determines whether the specified value is normal.</summary>
      <param name="f">A single-precision floating-point number.</param>
      <returns>
        <see langword="true" /> if <paramref name="f" /> is normal; <see langword="false" /> otherwise.</returns>
    </member>
    <member name="M:System.Single.IsPositiveInfinity(System.Single)">
      <summary>Returns a value indicating whether the specified number evaluates to positive infinity.</summary>
      <param name="f">A single-precision floating-point number.</param>
      <returns>
        <see langword="true" /> if <paramref name="f" /> evaluates to <see cref="F:System.Single.PositiveInfinity" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Single.IsSubnormal(System.Single)">
      <summary>Determines whether the specified value is subnormal.</summary>
      <param name="f">A single-precision floating-point number.</param>
      <returns>
        <see langword="true" /> if <paramref name="f" /> is subnormal; <see langword="false" /> otherwise.</returns>
    </member>
    <member name="M:System.Single.op_Equality(System.Single,System.Single)">
      <summary>Returns a value that indicates whether two specified <see cref="T:System.Single" /> values are equal.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Single.op_GreaterThan(System.Single,System.Single)">
      <summary>Returns a value that indicates whether a specified <see cref="T:System.Single" /> value is greater than another specified <see cref="T:System.Single" /> value.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Single.op_GreaterThanOrEqual(System.Single,System.Single)">
      <summary>Returns a value that indicates whether a specified <see cref="T:System.Single" /> value is greater than or equal to another specified <see cref="T:System.Single" /> value.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is greater than or equal to <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Single.op_Inequality(System.Single,System.Single)">
      <summary>Returns a value that indicates whether two specified <see cref="T:System.Single" /> values are not equal.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Single.op_LessThan(System.Single,System.Single)">
      <summary>Returns a value that indicates whether a specified <see cref="T:System.Single" /> value is less than another specified <see cref="T:System.Single" /> value.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is less than <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Single.op_LessThanOrEqual(System.Single,System.Single)">
      <summary>Returns a value that indicates whether a specified <see cref="T:System.Single" /> value is less than or equal to another specified <see cref="T:System.Single" /> value.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Single.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Converts a character span that contains the string representation of a number in a specified style and culture-specific format to its single-precision floating-point number equivalent.</summary>
      <param name="s">A character span that contains the number to convert.</param>
      <param name="style">A bitwise combination of enumeration values that indicate the style elements that can be present in <paramref name="s" />.  A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Float" /> combined with <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not represent a numeric value.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  
  
-or-  
  
<paramref name="style" /> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
      <returns>A single-precision floating-point number that is equivalent to the numeric value or symbol specified in <paramref name="s" />.</returns>
    </member>
    <member name="M:System.Single.Parse(System.String)">
      <summary>Converts the string representation of a number to its single-precision floating-point number equivalent.</summary>
      <param name="s">A string that contains a number to convert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not represent a number in a valid format.</exception>
      <exception cref="T:System.OverflowException">
          .NET Framework and .NET Core 2.2 and earlier versions only: <paramref name="s" /> represents a number less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />.</exception>
      <returns>A single-precision floating-point number equivalent to the numeric value or symbol specified in <paramref name="s" />.</returns>
    </member>
    <member name="M:System.Single.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>Converts the string representation of a number in a specified style to its single-precision floating-point number equivalent.</summary>
      <param name="s">A string that contains a number to convert.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Float" /> combined with <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not a number in a valid format.</exception>
      <exception cref="T:System.OverflowException">
          .NET Framework and .NET Core 2.2 and earlier versions only: <paramref name="s" /> represents a number that is less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  
  
 -or-  
  
 <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
      <returns>A single-precision floating-point number that is equivalent to the numeric value or symbol specified in <paramref name="s" />.</returns>
    </member>
    <member name="M:System.Single.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its single-precision floating-point number equivalent.</summary>
      <param name="s">A string that contains a number to convert.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Float" /> combined with <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not represent a numeric value.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  
  
 -or-  
  
 <paramref name="style" /> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
      <exception cref="T:System.OverflowException">
          .NET Framework and .NET Core 2.2 and earlier versions only: <paramref name="s" /> represents a number that is less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />.</exception>
      <returns>A single-precision floating-point number equivalent to the numeric value or symbol specified in <paramref name="s" />.</returns>
    </member>
    <member name="M:System.Single.Parse(System.String,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified culture-specific format to its single-precision floating-point number equivalent.</summary>
      <param name="s">A string that contains a number to convert.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not represent a number in a valid format.</exception>
      <exception cref="T:System.OverflowException">
          .NET Framework and .NET Core 2.2 and earlier versions only: <paramref name="s" /> represents a number less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />.</exception>
      <returns>A single-precision floating-point number equivalent to the numeric value or symbol specified in <paramref name="s" />.</returns>
    </member>
    <member name="M:System.Single.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>
        <see langword="true" /> if the value of the current instance is not zero; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Single.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Byte" />.</returns>
    </member>
    <member name="M:System.Single.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
      <returns>This conversion is not supported. No value is returned.</returns>
    </member>
    <member name="M:System.Single.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
      <returns>This conversion is not supported. No value is returned.</returns>
    </member>
    <member name="M:System.Single.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Decimal" />.</returns>
    </member>
    <member name="M:System.Single.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Double" />.</returns>
    </member>
    <member name="M:System.Single.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int16" />.</returns>
    </member>
    <member name="M:System.Single.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Single.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int64" />.</returns>
    </member>
    <member name="M:System.Single.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to an <see cref="T:System.SByte" />.</returns>
    </member>
    <member name="M:System.Single.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, unchanged.</returns>
    </member>
    <member name="M:System.Single.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />.</summary>
      <param name="type">The type to which to convert this <see cref="T:System.Single" /> value.</param>
      <param name="provider">An object that supplies information about the format of the returned value.</param>
      <returns>The value of the current instance, converted to <paramref name="type" />.</returns>
    </member>
    <member name="M:System.Single.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt16" />.</returns>
    </member>
    <member name="M:System.Single.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt32" />.</returns>
    </member>
    <member name="M:System.Single.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt64" />.</returns>
    </member>
    <member name="M:System.Single.ToString">
      <summary>Converts the numeric value of this instance to its equivalent string representation.</summary>
      <returns>The string representation of the value of this instance.</returns>
    </member>
    <member name="M:System.Single.ToString(System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>The string representation of the value of this instance as specified by <paramref name="provider" />.</returns>
    </member>
    <member name="M:System.Single.ToString(System.String)">
      <summary>Converts the numeric value of this instance to its equivalent string representation, using the specified format.</summary>
      <param name="format">A numeric format string.</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.</exception>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" />.</returns>
    </member>
    <member name="M:System.Single.ToString(System.String,System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.</summary>
      <param name="format">A numeric format string.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
    </member>
    <member name="M:System.Single.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <summary>Tries to format the value of the current float number instance into the provided span of characters.</summary>
      <param name="destination">When this method returns, this instance's value formatted as a span of characters.</param>
      <param name="charsWritten">When this method returns, the number of characters that were written in <paramref name="destination" />.</param>
      <param name="format">A span containing the charactes that represent a standard or custom format string that defines the acceptable format for <paramref name="destination" />.</param>
      <param name="provider">An optional object that supplies culture-specific formatting information for <paramref name="destination" />.</param>
      <returns>
        <see langword="true" /> if the formatting was successful; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Single.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Single@)">
      <summary>Converts the span representation of a number in a specified style and culture-specific format to its single-precision floating-point number equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <param name="s">A read-only character span that contains the number to convert. The span is interpreted using the style specified by <paramref name="style" /></param>
      <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Float" /> combined with <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <param name="result">When this method returns, contains the single-precision floating-point number equivalent to the numeric value or symbol contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not in a format compliant with <paramref name="style" />, represents a number less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />, or if <paramref name="style" /> is not a valid combination of <see cref="T:System.Globalization.NumberStyles" /> enumerated constants. This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Single.TryParse(System.ReadOnlySpan{System.Char},System.Single@)">
      <summary>Converts the string representation of a number in a character span to its single-precision floating-point number equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <param name="s">&gt;A character span that contains the string representation of the number to convert.</param>
      <param name="result">&gt;When this method returns, contains the single-precision floating-point number equivalent of the <paramref name="s" /> parameter, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or empty or is not a number in a valid format. If <parmref name="s" /> is a valid number less than <see cref="F:System.Single.MinValue" />, <paramref name="result" /> is <see cref="F:System.Single.NegativeInfinity" />. If <parmref name="s" /> is a valid number greater than <see cref="F:System.Single.MaxValue" />, <paramref name="result" /> is <see cref="F:System.Single.PositiveInfinity" />. This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Single.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Single@)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its single-precision floating-point number equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <param name="s">A string representing a number to convert.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Float" /> combined with <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <param name="result">When this method returns, contains the single-precision floating-point number equivalent to the numeric value or symbol contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not in a format compliant with <paramref name="style" />, or if <paramref name="style" /> is not a valid combination of <see cref="T:System.Globalization.NumberStyles" /> enumeration constants. It also fails on .NET Framework or .NET Core 2.2 and earlier versions if <paramref name="s" /> represents a number less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />. This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  
  
 -or-  
  
 <paramref name="style" /> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Single.TryParse(System.String,System.Single@)">
      <summary>Converts the string representation of a number to its single-precision floating-point number equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <param name="s">A string representing a number to convert.</param>
      <param name="result">When this method returns, contains single-precision floating-point number equivalent to the numeric value or symbol contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" /> or is not a number in a valid format. It also fails on .NET Framework and .NET Core 2.2 and earlier versions if <paramref name="s" /> represents a number less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />. This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.STAThreadAttribute">
      <summary>Indicates that the COM threading model for an application is single-threaded apartment (STA).</summary>
    </member>
    <member name="M:System.STAThreadAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.STAThreadAttribute" /> class.</summary>
    </member>
    <member name="T:System.String">
      <summary>Represents text as a sequence of UTF-16 code units.</summary>
    </member>
    <member name="F:System.String.Empty">
      <summary>Represents the empty string. This field is read-only.</summary>
    </member>
    <member name="M:System.String.#ctor(System.Char*)">
      <summary>Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by a specified pointer to an array of Unicode characters.</summary>
      <param name="value">A pointer to a null-terminated array of Unicode characters.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The current process does not have read access to all the addressed characters.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> specifies an array that contains an invalid Unicode character, or <paramref name="value" /> specifies an address less than 64000.</exception>
    </member>
    <member name="M:System.String.#ctor(System.Char*,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by a specified pointer to an array of Unicode characters, a starting character position within that array, and a length.</summary>
      <param name="value">A pointer to an array of Unicode characters.</param>
      <param name="startIndex">The starting position within <paramref name="value" />.</param>
      <param name="length">The number of characters within <paramref name="value" /> to use.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> or <paramref name="length" /> is less than zero, <paramref name="value" /> + <paramref name="startIndex" /> cause a pointer overflow, or the current process does not have read access to all the addressed characters.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> specifies an array that contains an invalid Unicode character, or <paramref name="value" /> + <paramref name="startIndex" /> specifies an address less than 64000.</exception>
    </member>
    <member name="M:System.String.#ctor(System.Char,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by a specified Unicode character repeated a specified number of times.</summary>
      <param name="c">A Unicode character.</param>
      <param name="count">The number of times <paramref name="c" /> occurs.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than zero.</exception>
    </member>
    <member name="M:System.String.#ctor(System.Char[])">
      <summary>Initializes a new instance of the <see cref="T:System.String" /> class to the Unicode characters indicated in the specified character array.</summary>
      <param name="value">An array of Unicode characters.</param>
    </member>
    <member name="M:System.String.#ctor(System.Char[],System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by an array of Unicode characters, a starting character position within that array, and a length.</summary>
      <param name="value">An array of Unicode characters.</param>
      <param name="startIndex">The starting position within <paramref name="value" />.</param>
      <param name="length">The number of characters within <paramref name="value" /> to use.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> or <paramref name="length" /> is less than zero.

 -or-

 The sum of <paramref name="startIndex" /> and <paramref name="length" /> is greater than the number of elements in <paramref name="value" />.</exception>
    </member>
    <member name="M:System.String.#ctor(System.ReadOnlySpan{System.Char})">
      <summary>Initializes a new instance of the <see cref="T:System.String" /> class to the Unicode characters indicated in the specified read-only span.</summary>
      <param name="value">A read-only span of Unicode characters.</param>
    </member>
    <member name="M:System.String.#ctor(System.SByte*)">
      <summary>Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by a pointer to an array of 8-bit signed integers.</summary>
      <param name="value">A pointer to a null-terminated array of 8-bit signed integers. The integers are interpreted using the current system code page encoding (that is, the encoding specified by <see cref="P:System.Text.Encoding.Default" />).</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">A new instance of <see cref="T:System.String" /> could not be initialized using <paramref name="value" />, assuming <paramref name="value" /> is encoded in ANSI.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The length of the new string to initialize, which is determined by the null termination character of <paramref name="value" />, is too large to allocate.</exception>
      <exception cref="T:System.AccessViolationException">
        <paramref name="value" /> specifies an invalid address.</exception>
    </member>
    <member name="M:System.String.#ctor(System.SByte*,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by a specified pointer to an array of 8-bit signed integers, a starting position within that array, and a length.</summary>
      <param name="value">A pointer to an array of 8-bit signed integers. The integers are interpreted using the current system code page encoding (that is, the encoding specified by <see cref="P:System.Text.Encoding.Default" />).</param>
      <param name="startIndex">The starting position within <paramref name="value" />.</param>
      <param name="length">The number of characters within <paramref name="value" /> to use.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> or <paramref name="length" /> is less than zero.

 -or-

 The address specified by <paramref name="value" /> + <paramref name="startIndex" /> is too large for the current platform; that is, the address calculation overflowed.

 -or-

 The length of the new string to initialize is too large to allocate.</exception>
      <exception cref="T:System.ArgumentException">The address specified by <paramref name="value" /> + <paramref name="startIndex" /> is less than 64K.

 -or-

 A new instance of <see cref="T:System.String" /> could not be initialized using <paramref name="value" />, assuming <paramref name="value" /> is encoded in ANSI.</exception>
      <exception cref="T:System.AccessViolationException">
        <paramref name="value" />, <paramref name="startIndex" />, and <paramref name="length" /> collectively specify an invalid address.</exception>
    </member>
    <member name="M:System.String.#ctor(System.SByte*,System.Int32,System.Int32,System.Text.Encoding)">
      <summary>Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by a specified pointer to an array of 8-bit signed integers, a starting position within that array, a length, and an <see cref="T:System.Text.Encoding" /> object.</summary>
      <param name="value">A pointer to an array of 8-bit signed integers.</param>
      <param name="startIndex">The starting position within <paramref name="value" />.</param>
      <param name="length">The number of characters within <paramref name="value" /> to use.</param>
      <param name="enc">An object that specifies how the array referenced by <paramref name="value" /> is encoded. If <paramref name="enc" /> is <see langword="null" />, ANSI encoding is assumed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> or <paramref name="length" /> is less than zero.

 -or-

 The address specified by <paramref name="value" /> + <paramref name="startIndex" /> is too large for the current platform; that is, the address calculation overflowed.

 -or-

 The length of the new string to initialize is too large to allocate.</exception>
      <exception cref="T:System.ArgumentException">The address specified by <paramref name="value" /> + <paramref name="startIndex" /> is less than 64K.

 -or-

 A new instance of <see cref="T:System.String" /> could not be initialized using <paramref name="value" />, assuming <paramref name="value" /> is encoded as specified by <paramref name="enc" />.</exception>
      <exception cref="T:System.AccessViolationException">
        <paramref name="value" />, <paramref name="startIndex" />, and <paramref name="length" /> collectively specify an invalid address.</exception>
    </member>
    <member name="M:System.String.Clone">
      <summary>Returns a reference to this instance of <see cref="T:System.String" />.</summary>
      <returns>This instance of <see cref="T:System.String" />.</returns>
    </member>
    <member name="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)">
      <summary>Compares substrings of two specified <see cref="T:System.String" /> objects and returns an integer that indicates their relative position in the sort order.</summary>
      <param name="strA">The first string to use in the comparison.</param>
      <param name="indexA">The position of the substring within <paramref name="strA" />.</param>
      <param name="strB">The second string to use in the comparison.</param>
      <param name="indexB">The position of the substring within <paramref name="strB" />.</param>
      <param name="length">The maximum number of characters in the substrings to compare.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="indexA" /> is greater than <paramref name="strA" />.<see cref="P:System.String.Length" />.

 -or-

 <paramref name="indexB" /> is greater than <paramref name="strB" />.<see cref="P:System.String.Length" />.

 -or-

 <paramref name="indexA" />, <paramref name="indexB" />, or <paramref name="length" /> is negative.

 -or-

 Either <paramref name="indexA" /> or <paramref name="indexB" /> is <see langword="null" />, and <paramref name="length" /> is greater than zero.</exception>
      <returns>A 32-bit signed integer indicating the lexical relationship between the two comparands.

 <list type="table"><listheader><term> Value</term><description> Condition</description></listheader><item><term> Less than zero</term><description> The substring in <paramref name="strA" /> precedes the substring in <paramref name="strB" /> in the sort order.</description></item><item><term> Zero</term><description> The substrings occur in the same position in the sort order, or <paramref name="length" /> is zero.</description></item><item><term> Greater than zero</term><description> The substring in <paramref name="strA" /> follows the substring in <paramref name="strB" /> in the sort order.</description></item></list></returns>
    </member>
    <member name="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
      <summary>Compares substrings of two specified <see cref="T:System.String" /> objects, ignoring or honoring their case, and returns an integer that indicates their relative position in the sort order.</summary>
      <param name="strA">The first string to use in the comparison.</param>
      <param name="indexA">The position of the substring within <paramref name="strA" />.</param>
      <param name="strB">The second string to use in the comparison.</param>
      <param name="indexB">The position of the substring within <paramref name="strB" />.</param>
      <param name="length">The maximum number of characters in the substrings to compare.</param>
      <param name="ignoreCase">
        <see langword="true" /> to ignore case during the comparison; otherwise, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="indexA" /> is greater than <paramref name="strA" />.<see cref="P:System.String.Length" />.

 -or-

 <paramref name="indexB" /> is greater than <paramref name="strB" />.<see cref="P:System.String.Length" />.

 -or-

 <paramref name="indexA" />, <paramref name="indexB" />, or <paramref name="length" /> is negative.

 -or-

 Either <paramref name="indexA" /> or <paramref name="indexB" /> is <see langword="null" />, and <paramref name="length" /> is greater than zero.</exception>
      <returns>A 32-bit signed integer that indicates the lexical relationship between the two comparands.

 <list type="table"><listheader><term> Value</term><description> Condition</description></listheader><item><term> Less than zero</term><description> The substring in <paramref name="strA" /> precedes the substring in <paramref name="strB" /> in the sort order.</description></item><item><term> Zero</term><description> The substrings occur in the same position in the sort order, or <paramref name="length" /> is zero.</description></item><item><term> Greater than zero</term><description> The substring in <paramref name="strA" /> follows the substring in <paramref name="strB" /> in the sort order.</description></item></list></returns>
    </member>
    <member name="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)">
      <summary>Compares substrings of two specified <see cref="T:System.String" /> objects, ignoring or honoring their case and using culture-specific information to influence the comparison, and returns an integer that indicates their relative position in the sort order.</summary>
      <param name="strA">The first string to use in the comparison.</param>
      <param name="indexA">The position of the substring within <paramref name="strA" />.</param>
      <param name="strB">The second string to use in the comparison.</param>
      <param name="indexB">The position of the substring within <paramref name="strB" />.</param>
      <param name="length">The maximum number of characters in the substrings to compare.</param>
      <param name="ignoreCase">
        <see langword="true" /> to ignore case during the comparison; otherwise, <see langword="false" />.</param>
      <param name="culture">An object that supplies culture-specific comparison information.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="indexA" /> is greater than <paramref name="strA" />.<see cref="P:System.String.Length" />.

 -or-

 <paramref name="indexB" /> is greater than <paramref name="strB" />.<see cref="P:System.String.Length" />.

 -or-

 <paramref name="indexA" />, <paramref name="indexB" />, or <paramref name="length" /> is negative.

 -or-

 Either <paramref name="strA" /> or <paramref name="strB" /> is <see langword="null" />, and <paramref name="length" /> is greater than zero.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> is <see langword="null" />.</exception>
      <returns>An integer that indicates the lexical relationship between the two comparands.

 <list type="table"><listheader><term> Value</term><description> Condition</description></listheader><item><term> Less than zero</term><description> The substring in <paramref name="strA" /> precedes the substring in <paramref name="strB" /> in the sort order.</description></item><item><term> Zero</term><description> The substrings occur in the same position in the sort order, or <paramref name="length" /> is zero.</description></item><item><term> Greater than zero</term><description> The substring in <paramref name="strA" /> follows the substring in <paramref name="strB" /> in the sort order.</description></item></list></returns>
    </member>
    <member name="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
      <summary>Compares substrings of two specified <see cref="T:System.String" /> objects using the specified comparison options and culture-specific information to influence the comparison, and returns an integer that indicates the relationship of the two substrings to each other in the sort order.</summary>
      <param name="strA">The first string to use in the comparison.</param>
      <param name="indexA">The starting position of the substring within <paramref name="strA" />.</param>
      <param name="strB">The second string to use in the comparison.</param>
      <param name="indexB">The starting position of the substring within <paramref name="strB" />.</param>
      <param name="length">The maximum number of characters in the substrings to compare.</param>
      <param name="culture">An object that supplies culture-specific comparison information.</param>
      <param name="options">Options to use when performing the comparison (such as ignoring case or symbols).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> is not a <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="indexA" /> is greater than <paramref name="strA" /><see langword=".Length" />.

 -or-

 <paramref name="indexB" /> is greater than <paramref name="strB" /><see langword=".Length" />.

 -or-

 <paramref name="indexA" />, <paramref name="indexB" />, or <paramref name="length" /> is negative.

 -or-

 Either <paramref name="strA" /> or <paramref name="strB" /> is <see langword="null" />, and <paramref name="length" /> is greater than zero.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> is <see langword="null" />.</exception>
      <returns>An integer that indicates the lexical relationship between the two substrings, as shown in the following table.

 <list type="table"><listheader><term> Value</term><description> Condition</description></listheader><item><term> Less than zero</term><description> The substring in <paramref name="strA" /> precedes the substring in <paramref name="strB" /> in the sort order.</description></item><item><term> Zero</term><description> The substrings occur in the same position in the sort order, or <paramref name="length" /> is zero.</description></item><item><term> Greater than zero</term><description> The substring in <paramref name="strA" /> follows the substring in <paramref name="strB" /> in the sort order.</description></item></list></returns>
    </member>
    <member name="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)">
      <summary>Compares substrings of two specified <see cref="T:System.String" /> objects using the specified rules, and returns an integer that indicates their relative position in the sort order.</summary>
      <param name="strA">The first string to use in the comparison.</param>
      <param name="indexA">The position of the substring within <paramref name="strA" />.</param>
      <param name="strB">The second string to use in the comparison.</param>
      <param name="indexB">The position of the substring within <paramref name="strB" />.</param>
      <param name="length">The maximum number of characters in the substrings to compare.</param>
      <param name="comparisonType">One of the enumeration values that specifies the rules to use in the comparison.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="indexA" /> is greater than <paramref name="strA" />.<see cref="P:System.String.Length" />.

 -or-

 <paramref name="indexB" /> is greater than <paramref name="strB" />.<see cref="P:System.String.Length" />.

 -or-

 <paramref name="indexA" />, <paramref name="indexB" />, or <paramref name="length" /> is negative.

 -or-

 Either <paramref name="indexA" /> or <paramref name="indexB" /> is <see langword="null" />, and <paramref name="length" /> is greater than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value.</exception>
      <returns>A 32-bit signed integer that indicates the lexical relationship between the two comparands.

 <list type="table"><listheader><term> Value</term><description> Condition</description></listheader><item><term> Less than zero</term><description> The substring in <paramref name="strA" /> precedes the substring in <paramref name="strB" /> in the sort order.</description></item><item><term> Zero</term><description> The substrings occur in the same position in the sort order, or the <paramref name="length" /> parameter is zero.</description></item><item><term> Greater than zero</term><description> The substring in <paramref name="strA" /> follows the substring in <paramref name="strB" /> in the sort order.</description></item></list></returns>
    </member>
    <member name="M:System.String.Compare(System.String,System.String)">
      <summary>Compares two specified <see cref="T:System.String" /> objects and returns an integer that indicates their relative position in the sort order.</summary>
      <param name="strA">The first string to compare.</param>
      <param name="strB">The second string to compare.</param>
      <returns>A 32-bit signed integer that indicates the lexical relationship between the two comparands.

 <list type="table"><listheader><term> Value</term><description> Condition</description></listheader><item><term> Less than zero</term><description><paramref name="strA" /> precedes <paramref name="strB" /> in the sort order.</description></item><item><term> Zero</term><description><paramref name="strA" /> occurs in the same position as <paramref name="strB" /> in the sort order.</description></item><item><term> Greater than zero</term><description><paramref name="strA" /> follows <paramref name="strB" /> in the sort order.</description></item></list></returns>
    </member>
    <member name="M:System.String.Compare(System.String,System.String,System.Boolean)">
      <summary>Compares two specified <see cref="T:System.String" /> objects, ignoring or honoring their case, and returns an integer that indicates their relative position in the sort order.</summary>
      <param name="strA">The first string to compare.</param>
      <param name="strB">The second string to compare.</param>
      <param name="ignoreCase">
        <see langword="true" /> to ignore case during the comparison; otherwise, <see langword="false" />.</param>
      <returns>A 32-bit signed integer that indicates the lexical relationship between the two comparands.

 <list type="table"><listheader><term> Value</term><description> Condition</description></listheader><item><term> Less than zero</term><description><paramref name="strA" /> precedes <paramref name="strB" /> in the sort order.</description></item><item><term> Zero</term><description><paramref name="strA" /> occurs in the same position as <paramref name="strB" /> in the sort order.</description></item><item><term> Greater than zero</term><description><paramref name="strA" /> follows <paramref name="strB" /> in the sort order.</description></item></list></returns>
    </member>
    <member name="M:System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
      <summary>Compares two specified <see cref="T:System.String" /> objects, ignoring or honoring their case, and using culture-specific information to influence the comparison, and returns an integer that indicates their relative position in the sort order.</summary>
      <param name="strA">The first string to compare.</param>
      <param name="strB">The second string to compare.</param>
      <param name="ignoreCase">
        <see langword="true" /> to ignore case during the comparison; otherwise, <see langword="false" />.</param>
      <param name="culture">An object that supplies culture-specific comparison information.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> is <see langword="null" />.</exception>
      <returns>A 32-bit signed integer that indicates the lexical relationship between the two comparands.

 <list type="table"><listheader><term> Value</term><description> Condition</description></listheader><item><term> Less than zero</term><description><paramref name="strA" /> precedes <paramref name="strB" /> in the sort order.</description></item><item><term> Zero</term><description><paramref name="strA" /> occurs in the same position as <paramref name="strB" /> in the sort order.</description></item><item><term> Greater than zero</term><description><paramref name="strA" /> follows <paramref name="strB" /> in the sort order.</description></item></list></returns>
    </member>
    <member name="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
      <summary>Compares two specified <see cref="T:System.String" /> objects using the specified comparison options and culture-specific information to influence the comparison, and returns an integer that indicates the relationship of the two strings to each other in the sort order.</summary>
      <param name="strA">The first string to compare.</param>
      <param name="strB">The second string to compare.</param>
      <param name="culture">The culture that supplies culture-specific comparison information.</param>
      <param name="options">Options to use when performing the comparison (such as ignoring case or symbols).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> is not a <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> is <see langword="null" />.</exception>
      <returns>A 32-bit signed integer that indicates the lexical relationship between <paramref name="strA" /> and <paramref name="strB" />, as shown in the following table

 <list type="table"><listheader><term> Value</term><description> Condition</description></listheader><item><term> Less than zero</term><description><paramref name="strA" /> precedes <paramref name="strB" /> in the sort order.</description></item><item><term> Zero</term><description><paramref name="strA" /> occurs in the same position as <paramref name="strB" /> in the sort order.</description></item><item><term> Greater than zero</term><description><paramref name="strA" /> follows <paramref name="strB" /> in the sort order.</description></item></list></returns>
    </member>
    <member name="M:System.String.Compare(System.String,System.String,System.StringComparison)">
      <summary>Compares two specified <see cref="T:System.String" /> objects using the specified rules, and returns an integer that indicates their relative position in the sort order.</summary>
      <param name="strA">The first string to compare.</param>
      <param name="strB">The second string to compare.</param>
      <param name="comparisonType">One of the enumeration values that specifies the rules to use in the comparison.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.StringComparison" /> is not supported.</exception>
      <returns>A 32-bit signed integer that indicates the lexical relationship between the two comparands.

 <list type="table"><listheader><term> Value</term><description> Condition</description></listheader><item><term> Less than zero</term><description><paramref name="strA" /> precedes <paramref name="strB" /> in the sort order.</description></item><item><term> Zero</term><description><paramref name="strA" /> is in the same position as <paramref name="strB" /> in the sort order.</description></item><item><term> Greater than zero</term><description><paramref name="strA" /> follows <paramref name="strB" /> in the sort order.</description></item></list></returns>
    </member>
    <member name="M:System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)">
      <summary>Compares substrings of two specified <see cref="T:System.String" /> objects by evaluating the numeric values of the corresponding <see cref="T:System.Char" /> objects in each substring.</summary>
      <param name="strA">The first string to use in the comparison.</param>
      <param name="indexA">The starting index of the substring in <paramref name="strA" />.</param>
      <param name="strB">The second string to use in the comparison.</param>
      <param name="indexB">The starting index of the substring in <paramref name="strB" />.</param>
      <param name="length">The maximum number of characters in the substrings to compare.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="strA" /> is not <see langword="null" /> and <paramref name="indexA" /> is greater than <paramref name="strA" />.<see cref="P:System.String.Length" />.

 -or-

 <paramref name="strB" /> is not <see langword="null" /> and <paramref name="indexB" /> is greater than <paramref name="strB" />.<see cref="P:System.String.Length" />.

 -or-

 <paramref name="indexA" />, <paramref name="indexB" />, or <paramref name="length" /> is negative.</exception>
      <returns>A 32-bit signed integer that indicates the lexical relationship between the two comparands.

 <list type="table"><listheader><term> Value</term><description> Condition</description></listheader><item><term> Less than zero</term><description> The substring in <paramref name="strA" /> is less than the substring in <paramref name="strB" />.</description></item><item><term> Zero</term><description> The substrings are equal, or <paramref name="length" /> is zero.</description></item><item><term> Greater than zero</term><description> The substring in <paramref name="strA" /> is greater than the substring in <paramref name="strB" />.</description></item></list></returns>
    </member>
    <member name="M:System.String.CompareOrdinal(System.String,System.String)">
      <summary>Compares two specified <see cref="T:System.String" /> objects by evaluating the numeric values of the corresponding <see cref="T:System.Char" /> objects in each string.</summary>
      <param name="strA">The first string to compare.</param>
      <param name="strB">The second string to compare.</param>
      <returns>An integer that indicates the lexical relationship between the two comparands.

 <list type="table"><listheader><term> Value</term><description> Condition</description></listheader><item><term> Less than zero</term><description><paramref name="strA" /> is less than <paramref name="strB" />.</description></item><item><term> Zero</term><description><paramref name="strA" /> and <paramref name="strB" /> are equal.</description></item><item><term> Greater than zero</term><description><paramref name="strA" /> is greater than <paramref name="strB" />.</description></item></list></returns>
    </member>
    <member name="M:System.String.CompareTo(System.Object)">
      <summary>Compares this instance with a specified <see cref="T:System.Object" /> and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified <see cref="T:System.Object" />.</summary>
      <param name="value">An object that evaluates to a <see cref="T:System.String" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.String" />.</exception>
      <returns>A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the <paramref name="value" /> parameter.

 <list type="table"><listheader><term> Value</term><description> Condition</description></listheader><item><term> Less than zero</term><description> This instance precedes <paramref name="value" />.</description></item><item><term> Zero</term><description> This instance has the same position in the sort order as <paramref name="value" />.</description></item><item><term> Greater than zero</term><description> This instance follows <paramref name="value" />.

 -or-

 <paramref name="value" /> is <see langword="null" />.</description></item></list></returns>
    </member>
    <member name="M:System.String.CompareTo(System.String)">
      <summary>Compares this instance with a specified <see cref="T:System.String" /> object and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified string.</summary>
      <param name="strB">The string to compare with this instance.</param>
      <returns>A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the <paramref name="strB" /> parameter.

 <list type="table"><listheader><term> Value</term><description> Condition</description></listheader><item><term> Less than zero</term><description> This instance precedes <paramref name="strB" />.</description></item><item><term> Zero</term><description> This instance has the same position in the sort order as <paramref name="strB" />.</description></item><item><term> Greater than zero</term><description> This instance follows <paramref name="strB" />.

 -or-

 <paramref name="strB" /> is <see langword="null" />.</description></item></list></returns>
    </member>
    <member name="M:System.String.Concat(System.Collections.Generic.IEnumerable{System.String})">
      <summary>Concatenates the members of a constructed <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of type <see cref="T:System.String" />.</summary>
      <param name="values">A collection object that implements <see cref="T:System.Collections.Generic.IEnumerable`1" /> and whose generic type argument is <see cref="T:System.String" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> is <see langword="null" />.</exception>
      <returns>The concatenated strings in <paramref name="values" />, or <see cref="F:System.String.Empty" /> if <paramref name="values" /> is an empty <see langword="IEnumerable(Of String)" />.</returns>
    </member>
    <member name="M:System.String.Concat(System.Object)">
      <summary>Creates the string  representation of a specified object.</summary>
      <param name="arg0">The object to represent, or <see langword="null" />.</param>
      <returns>The string representation of the value of <paramref name="arg0" />, or <see cref="F:System.String.Empty" /> if <paramref name="arg0" /> is <see langword="null" />.</returns>
    </member>
    <member name="M:System.String.Concat(System.Object,System.Object)">
      <summary>Concatenates the string representations of two specified objects.</summary>
      <param name="arg0">The first object to concatenate.</param>
      <param name="arg1">The second object to concatenate.</param>
      <returns>The concatenated string representations of the values of <paramref name="arg0" /> and <paramref name="arg1" />.</returns>
    </member>
    <member name="M:System.String.Concat(System.Object,System.Object,System.Object)">
      <summary>Concatenates the string representations of three specified objects.</summary>
      <param name="arg0">The first object to concatenate.</param>
      <param name="arg1">The second object to concatenate.</param>
      <param name="arg2">The third object to concatenate.</param>
      <returns>The concatenated string representations of the values of <paramref name="arg0" />, <paramref name="arg1" />, and <paramref name="arg2" />.</returns>
    </member>
    <member name="M:System.String.Concat(System.Object[])">
      <summary>Concatenates the string representations of the elements in a specified <see cref="T:System.Object" /> array.</summary>
      <param name="args">An object array that contains the elements to concatenate.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="args" /> is <see langword="null" />.</exception>
      <exception cref="T:System.OutOfMemoryException">Out of memory.</exception>
      <returns>The concatenated string representations of the values of the elements in <paramref name="args" />.</returns>
    </member>
    <member name="M:System.String.Concat(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>Concatenates the string representations of two specified read-only character spans.</summary>
      <param name="str0">The first read-only character span to concatenate.</param>
      <param name="str1">The second read-only character span to concatenate.</param>
      <returns>The concatenated string representations of the values of <paramref name="str0" /> and <paramref name="str1" />.</returns>
    </member>
    <member name="M:System.String.Concat(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>Concatenates the string representations of three specified read-only character spans.</summary>
      <param name="str0">The first read-only character span to concatenate.</param>
      <param name="str1">The second read-only character span to concatenate.</param>
      <param name="str2">The third read-only character span to concatenate.</param>
      <returns>The concatenated string representations of the values of <paramref name="str0" />, <paramref name="str1" /> and <paramref name="str2" />.</returns>
    </member>
    <member name="M:System.String.Concat(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>Concatenates the string representations of four specified read-only character spans.</summary>
      <param name="str0">The first read-only character span to concatenate.</param>
      <param name="str1">The second read-only character span to concatenate.</param>
      <param name="str2">The third read-only character span to concatenate.</param>
      <param name="str3">The fourth read-only character span to concatenate.</param>
      <returns>The concatenated string representations of the values of <paramref name="str0" />, <paramref name="str1" />, <paramref name="str2" /> and <paramref name="str3" />.</returns>
    </member>
    <member name="M:System.String.Concat(System.String,System.String)">
      <summary>Concatenates two specified instances of <see cref="T:System.String" />.</summary>
      <param name="str0">The first string to concatenate.</param>
      <param name="str1">The second string to concatenate.</param>
      <returns>The concatenation of <paramref name="str0" /> and <paramref name="str1" />.</returns>
    </member>
    <member name="M:System.String.Concat(System.String,System.String,System.String)">
      <summary>Concatenates three specified instances of <see cref="T:System.String" />.</summary>
      <param name="str0">The first string to concatenate.</param>
      <param name="str1">The second string to concatenate.</param>
      <param name="str2">The third string to concatenate.</param>
      <returns>The concatenation of <paramref name="str0" />, <paramref name="str1" />, and <paramref name="str2" />.</returns>
    </member>
    <member name="M:System.String.Concat(System.String,System.String,System.String,System.String)">
      <summary>Concatenates four specified instances of <see cref="T:System.String" />.</summary>
      <param name="str0">The first string to concatenate.</param>
      <param name="str1">The second string to concatenate.</param>
      <param name="str2">The third string to concatenate.</param>
      <param name="str3">The fourth string to concatenate.</param>
      <returns>The concatenation of <paramref name="str0" />, <paramref name="str1" />, <paramref name="str2" />, and <paramref name="str3" />.</returns>
    </member>
    <member name="M:System.String.Concat(System.String[])">
      <summary>Concatenates the elements of a specified <see cref="T:System.String" /> array.</summary>
      <param name="values">An array of string instances.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> is <see langword="null" />.</exception>
      <exception cref="T:System.OutOfMemoryException">Out of memory.</exception>
      <returns>The concatenated elements of <paramref name="values" />.</returns>
    </member>
    <member name="M:System.String.Concat``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Concatenates the members of an <see cref="T:System.Collections.Generic.IEnumerable`1" /> implementation.</summary>
      <param name="values">A collection object that implements the <see cref="T:System.Collections.Generic.IEnumerable`1" /> interface.</param>
      <typeparam name="T">The type of the members of <paramref name="values" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> is <see langword="null" />.</exception>
      <returns>The concatenated members in <paramref name="values" />.</returns>
    </member>
    <member name="M:System.String.Contains(System.Char)">
      <summary>Returns a value indicating whether a specified character occurs within this string.</summary>
      <param name="value">The character to seek.</param>
      <returns>
        <see langword="true" /> if the <paramref name="value" /> parameter occurs within this string; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.String.Contains(System.Char,System.StringComparison)">
      <summary>Returns a value indicating whether a specified character occurs within this string, using the specified comparison rules.</summary>
      <param name="value">The character to seek.</param>
      <param name="comparisonType">One of the enumeration values that specifies the rules to use in the comparison.</param>
      <returns>
        <see langword="true" /> if the <paramref name="value" /> parameter occurs within this string; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.String.Contains(System.String)">
      <summary>Returns a value indicating whether a specified substring occurs within this string.</summary>
      <param name="value">The string to seek.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> if the <paramref name="value" /> parameter occurs within this string, or if <paramref name="value" /> is the empty string (""); otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.String.Contains(System.String,System.StringComparison)">
      <summary>Returns a value indicating whether a specified string occurs within this string, using the specified comparison rules.</summary>
      <param name="value">The string to seek.</param>
      <param name="comparisonType">One of the enumeration values that specifies the rules to use in the comparison.</param>
      <returns>
        <see langword="true" /> if the <paramref name="value" /> parameter occurs within this string, or if <paramref name="value" /> is the empty string (""); otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.String.Copy(System.String)">
      <summary>Creates a new instance of <see cref="T:System.String" /> with the same value as a specified <see cref="T:System.String" />.</summary>
      <param name="str">The string to copy.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> is <see langword="null" />.</exception>
      <returns>A new string with the same value as <paramref name="str" />.</returns>
    </member>
    <member name="M:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
      <summary>Copies a specified number of characters from a specified position in this instance to a specified position in an array of Unicode characters.</summary>
      <param name="sourceIndex">The index of the first character in this instance to copy.</param>
      <param name="destination">An array of Unicode characters to which characters in this instance are copied.</param>
      <param name="destinationIndex">The index in <paramref name="destination" /> at which the copy operation begins.</param>
      <param name="count">The number of characters in this instance to copy to <paramref name="destination" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceIndex" />, <paramref name="destinationIndex" />, or <paramref name="count" /> is negative

 -or-

 <paramref name="sourceIndex" /> does not identify a position in the current instance.

 -or-

 <paramref name="destinationIndex" /> does not identify a valid index in the <paramref name="destination" /> array.

 -or-

 <paramref name="count" /> is greater than the length of the substring from <paramref name="sourceIndex" /> to the end of this instance

 -or-

 <paramref name="count" /> is greater than the length of the subarray from <paramref name="destinationIndex" /> to the end of the <paramref name="destination" /> array.</exception>
    </member>
    <member name="M:System.String.Create``1(System.Int32,``0,System.Buffers.SpanAction{System.Char,``0})">
      <summary>Creates a new string with a specific length and initializes it after creation by using the specified callback.</summary>
      <param name="length">The length of the string to create.</param>
      <param name="state">The element to pass to <paramref name="action" />.</param>
      <param name="action">A callback to initialize the string.</param>
      <typeparam name="TState">The type of the element to pass to <paramref name="action" />.</typeparam>
      <returns>The created string.</returns>
    </member>
    <member name="M:System.String.EndsWith(System.Char)">
      <summary>Determines whether the end of this string instance matches the specified character.</summary>
      <param name="value">The character to compare to the character at the end of this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> matches the end of this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.String.EndsWith(System.String)">
      <summary>Determines whether the end of this string instance matches the specified string.</summary>
      <param name="value">The string to compare to the substring at the end of this instance.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> if <paramref name="value" /> matches the end of this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.String.EndsWith(System.String,System.Boolean,System.Globalization.CultureInfo)">
      <summary>Determines whether the end of this string instance matches the specified string when compared using the specified culture.</summary>
      <param name="value">The string to compare to the substring at the end of this instance.</param>
      <param name="ignoreCase">
        <see langword="true" /> to ignore case during the comparison; otherwise, <see langword="false" />.</param>
      <param name="culture">Cultural information that determines how this instance and <paramref name="value" /> are compared. If <paramref name="culture" /> is <see langword="null" />, the current culture is used.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> if the <paramref name="value" /> parameter matches the end of this string; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.String.EndsWith(System.String,System.StringComparison)">
      <summary>Determines whether the end of this string instance matches the specified string when compared using the specified comparison option.</summary>
      <param name="value">The string to compare to the substring at the end of this instance.</param>
      <param name="comparisonType">One of the enumeration values that determines how this string and <paramref name="value" /> are compared.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value.</exception>
      <returns>
        <see langword="true" /> if the <paramref name="value" /> parameter matches the end of this string; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.String.EnumerateRunes">
      <summary>Returns an enumeration of <see cref="T:System.Text.Rune" /> from this string.</summary>
      <returns>A string rune enumerator.</returns>
    </member>
    <member name="M:System.String.Equals(System.Object)">
      <summary>Determines whether this instance and a specified object, which must also be a <see cref="T:System.String" /> object, have the same value.</summary>
      <param name="obj">The string to compare to this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> is a <see cref="T:System.String" /> and its value is the same as this instance; otherwise, <see langword="false" />.  If <paramref name="obj" /> is <see langword="null" />, the method returns <see langword="false" />.</returns>
    </member>
    <member name="M:System.String.Equals(System.String)">
      <summary>Determines whether this instance and another specified <see cref="T:System.String" /> object have the same value.</summary>
      <param name="value">The string to compare to this instance.</param>
      <returns>
        <see langword="true" /> if the value of the <paramref name="value" /> parameter is the same as the value of this instance; otherwise, <see langword="false" />. If <paramref name="value" /> is <see langword="null" />, the method returns <see langword="false" />.</returns>
    </member>
    <member name="M:System.String.Equals(System.String,System.String)">
      <summary>Determines whether two specified <see cref="T:System.String" /> objects have the same value.</summary>
      <param name="a">The first string to compare, or <see langword="null" />.</param>
      <param name="b">The second string to compare, or <see langword="null" />.</param>
      <returns>
        <see langword="true" /> if the value of <paramref name="a" /> is the same as the value of <paramref name="b" />; otherwise, <see langword="false" />. If both <paramref name="a" /> and <paramref name="b" /> are <see langword="null" />, the method returns <see langword="true" />.</returns>
    </member>
    <member name="M:System.String.Equals(System.String,System.String,System.StringComparison)">
      <summary>Determines whether two specified <see cref="T:System.String" /> objects have the same value. A parameter specifies the culture, case, and sort rules used in the comparison.</summary>
      <param name="a">The first string to compare, or <see langword="null" />.</param>
      <param name="b">The second string to compare, or <see langword="null" />.</param>
      <param name="comparisonType">One of the enumeration values that specifies the rules for the comparison.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value.</exception>
      <returns>
        <see langword="true" /> if the value of the <paramref name="a" /> parameter is equal to the value of the <paramref name="b" /> parameter; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.String.Equals(System.String,System.StringComparison)">
      <summary>Determines whether this string and a specified <see cref="T:System.String" /> object have the same value. A parameter specifies the culture, case, and sort rules used in the comparison.</summary>
      <param name="value">The string to compare to this instance.</param>
      <param name="comparisonType">One of the enumeration values that specifies how the strings will be compared.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value.</exception>
      <returns>
        <see langword="true" /> if the value of the <paramref name="value" /> parameter is the same as this string; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.String.Format(System.IFormatProvider,System.String,System.Object)">
      <summary>Replaces the format item or items in a specified string with the string representation of the corresponding object. A parameter supplies culture-specific formatting information.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <param name="format">A composite format string.</param>
      <param name="arg0">The object to format.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.

 -or-

 The index of a format item is not zero.</exception>
      <returns>A copy of <paramref name="format" /> in which the format item or items have been replaced by the string representation of <paramref name="arg0" />.</returns>
    </member>
    <member name="M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object)">
      <summary>Replaces the format items in a string with the string representation of two specified objects. A parameter supplies culture-specific formatting information.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <param name="format">A composite format string.</param>
      <param name="arg0">The first object to format.</param>
      <param name="arg1">The second object to format.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.

 -or-

 The index of a format item is not zero or one.</exception>
      <returns>A copy of <paramref name="format" /> in which format items are replaced by the string representations of <paramref name="arg0" /> and <paramref name="arg1" />.</returns>
    </member>
    <member name="M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)">
      <summary>Replaces the format items in a string with the string representation of three specified objects. An parameter supplies culture-specific formatting information.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <param name="format">A composite format string.</param>
      <param name="arg0">The first object to format.</param>
      <param name="arg1">The second object to format.</param>
      <param name="arg2">The third object to format.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.

 -or-

 The index of a format item is less than zero, or greater than two.</exception>
      <returns>A copy of <paramref name="format" /> in which the format items have been replaced by the string representations of <paramref name="arg0" />, <paramref name="arg1" />, and <paramref name="arg2" />.</returns>
    </member>
    <member name="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])">
      <summary>Replaces the format items in a string with the string representations of corresponding objects in a specified array. A parameter supplies culture-specific formatting information.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <param name="format">A composite format string.</param>
      <param name="args">An object array that contains zero or more objects to format.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> or <paramref name="args" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.

 -or-

 The index of a format item is less than zero, or greater than or equal to the length of the <paramref name="args" /> array.</exception>
      <returns>A copy of <paramref name="format" /> in which the format items have been replaced by the string representation of the corresponding objects in <paramref name="args" />.</returns>
    </member>
    <member name="M:System.String.Format(System.String,System.Object)">
      <summary>Replaces one or more format items in a string with the string representation of a specified object.</summary>
      <param name="format">A composite format string.</param>
      <param name="arg0">The object to format.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">The format item in <paramref name="format" /> is invalid.

 -or-

 The index of a format item is not zero.</exception>
      <returns>A copy of <paramref name="format" /> in which any format items are replaced by the string representation of <paramref name="arg0" />.</returns>
    </member>
    <member name="M:System.String.Format(System.String,System.Object,System.Object)">
      <summary>Replaces the format items in a string with the string representation of two specified objects.</summary>
      <param name="format">A composite format string.</param>
      <param name="arg0">The first object to format.</param>
      <param name="arg1">The second object to format.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.

 -or-

 The index of a format item is not zero or one.</exception>
      <returns>A copy of <paramref name="format" /> in which format items are replaced by the string representations of <paramref name="arg0" /> and <paramref name="arg1" />.</returns>
    </member>
    <member name="M:System.String.Format(System.String,System.Object,System.Object,System.Object)">
      <summary>Replaces the format items in a string with the string representation of three specified objects.</summary>
      <param name="format">A composite format string.</param>
      <param name="arg0">The first object to format.</param>
      <param name="arg1">The second object to format.</param>
      <param name="arg2">The third object to format.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.

 -or-

 The index of a format item is less than zero, or greater than two.</exception>
      <returns>A copy of <paramref name="format" /> in which the format items have been replaced by the string representations of <paramref name="arg0" />, <paramref name="arg1" />, and <paramref name="arg2" />.</returns>
    </member>
    <member name="M:System.String.Format(System.String,System.Object[])">
      <summary>Replaces the format item in a specified string with the string representation of a corresponding object in a specified array.</summary>
      <param name="format">A composite format string.</param>
      <param name="args">An object array that contains zero or more objects to format.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> or <paramref name="args" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.

 -or-

 The index of a format item is less than zero, or greater than or equal to the length of the <paramref name="args" /> array.</exception>
      <returns>A copy of <paramref name="format" /> in which the format items have been replaced by the string representation of the corresponding objects in <paramref name="args" />.</returns>
    </member>
    <member name="M:System.String.GetEnumerator">
      <summary>Retrieves an object that can iterate through the individual characters in this string.</summary>
      <returns>An enumerator object.</returns>
    </member>
    <member name="M:System.String.GetHashCode">
      <summary>Returns the hash code for this string.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.String.GetHashCode(System.ReadOnlySpan{System.Char})">
      <summary>Returns the hash code for the provided read-only character span.</summary>
      <param name="value">A read-only character span.</param>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.String.GetHashCode(System.ReadOnlySpan{System.Char},System.StringComparison)">
      <summary>Returns the hash code for the provided read-only character span using the specified rules.</summary>
      <param name="value">A read-only character span.</param>
      <param name="comparisonType">One of the enumeration values that specifies the rules to use in the comparison.</param>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.String.GetHashCode(System.StringComparison)">
      <summary>Returns the hash code for this string using the specified rules.</summary>
      <param name="comparisonType">One of the enumeration values that specifies the rules to use in the comparison.</param>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.String.GetPinnableReference">
      <summary>Returns a reference to the element of the string at index zero.</summary>
      <exception cref="T:System.NullReferenceException">The string is null.</exception>
      <returns>A character representing the reference to the element of the string at index zero.</returns>
    </member>
    <member name="M:System.String.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for the <see cref="T:System.String" /> class.</summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.String" />.</returns>
    </member>
    <member name="M:System.String.IndexOf(System.Char)">
      <summary>Reports the zero-based index of the first occurrence of the specified Unicode character in this string.</summary>
      <param name="value">A Unicode character to seek.</param>
      <returns>The zero-based index position of <paramref name="value" /> if that character is found, or -1 if it is not.</returns>
    </member>
    <member name="M:System.String.IndexOf(System.Char,System.Int32)">
      <summary>Reports the zero-based index of the first occurrence of the specified Unicode character in this string. The search starts at a specified character position.</summary>
      <param name="value">A Unicode character to seek.</param>
      <param name="startIndex">The search starting position.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than 0 (zero) or greater than the length of the string.</exception>
      <returns>The zero-based index position of <paramref name="value" /> from the start of the string if that character is found, or -1 if it is not.</returns>
    </member>
    <member name="M:System.String.IndexOf(System.Char,System.Int32,System.Int32)">
      <summary>Reports the zero-based index of the first occurrence of the specified character in this instance. The search starts at a specified character position and examines a specified number of character positions.</summary>
      <param name="value">A Unicode character to seek.</param>
      <param name="startIndex">The search starting position.</param>
      <param name="count">The number of character positions to examine.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> or <paramref name="startIndex" /> is negative.

 -or-

 <paramref name="startIndex" /> is greater than the length of this string.

 -or-

 <paramref name="count" /> is greater than the length of this string minus <paramref name="startIndex" />.</exception>
      <returns>The zero-based index position of <paramref name="value" /> from the start of the string if that character is found, or -1 if it is not.</returns>
    </member>
    <member name="M:System.String.IndexOf(System.Char,System.StringComparison)">
      <summary>Reports the zero-based index of the first occurrence of the specified Unicode character in this string. A parameter specifies the type of search to use for the specified character.</summary>
      <param name="value">The character to seek.</param>
      <param name="comparisonType">An enumeration value that specifies the rules for the search.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</exception>
      <returns>The zero-based index of <paramref name="value" /> if that character is found, or -1 if it is not.</returns>
    </member>
    <member name="M:System.String.IndexOf(System.String)">
      <summary>Reports the zero-based index of the first occurrence of the specified string in this instance.</summary>
      <param name="value">The string to seek.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <returns>The zero-based index position of <paramref name="value" /> if that string is found, or -1 if it is not. If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is 0.</returns>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.Int32)">
      <summary>Reports the zero-based index of the first occurrence of the specified string in this instance. The search starts at a specified character position.</summary>
      <param name="value">The string to seek.</param>
      <param name="startIndex">The search starting position.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than 0 (zero) or greater than the length of this string.</exception>
      <returns>The zero-based index position of <paramref name="value" /> from the start of the current instance if that string is found, or -1 if it is not. If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is <paramref name="startIndex" />.</returns>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.Int32,System.Int32)">
      <summary>Reports the zero-based index of the first occurrence of the specified string in this instance. The search starts at a specified character position and examines a specified number of character positions.</summary>
      <param name="value">The string to seek.</param>
      <param name="startIndex">The search starting position.</param>
      <param name="count">The number of character positions to examine.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> or <paramref name="startIndex" /> is negative.

 -or-

 <paramref name="startIndex" /> is greater than the length of this string.

 -or-

 <paramref name="count" /> is greater than the length of this string minus <paramref name="startIndex" />.</exception>
      <returns>The zero-based index position of <paramref name="value" /> from the start of the current instance if that string is found, or -1 if it is not. If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is <paramref name="startIndex" />.</returns>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
      <summary>Reports the zero-based index of the first occurrence of the specified string in the current <see cref="T:System.String" /> object. Parameters specify the starting search position in the current string, the number of characters in the current string to search, and the type of search to use for the specified string.</summary>
      <param name="value">The string to seek.</param>
      <param name="startIndex">The search starting position.</param>
      <param name="count">The number of character positions to examine.</param>
      <param name="comparisonType">One of the enumeration values that specifies the rules for the search.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> or <paramref name="startIndex" /> is negative.

 -or-

 <paramref name="startIndex" /> is greater than the length of this instance.

 -or-

 <paramref name="count" /> is greater than the length of this string minus <paramref name="startIndex" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</exception>
      <returns>The zero-based index position of the <paramref name="value" /> parameter from the start of the current instance if that string is found, or -1 if it is not. If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is <paramref name="startIndex" />.</returns>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)">
      <summary>Reports the zero-based index of the first occurrence of the specified string in the current <see cref="T:System.String" /> object. Parameters specify the starting search position in the current string and the type of search to use for the specified string.</summary>
      <param name="value">The string to seek.</param>
      <param name="startIndex">The search starting position.</param>
      <param name="comparisonType">One of the enumeration values that specifies the rules for the search.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than 0 (zero) or greater than the length of this string.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</exception>
      <returns>The zero-based index position of the <paramref name="value" /> parameter from the start of the current instance if that string is found, or -1 if it is not. If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is <paramref name="startIndex" />.</returns>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.StringComparison)">
      <summary>Reports the zero-based index of the first occurrence of the specified string in the current <see cref="T:System.String" /> object. A parameter specifies the type of search to use for the specified string.</summary>
      <param name="value">The string to seek.</param>
      <param name="comparisonType">One of the enumeration values that specifies the rules for the search.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</exception>
      <returns>The index position of the <paramref name="value" /> parameter if that string is found, or -1 if it is not. If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is 0.</returns>
    </member>
    <member name="M:System.String.IndexOfAny(System.Char[])">
      <summary>Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters.</summary>
      <param name="anyOf">A Unicode character array containing one or more characters to seek.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> is <see langword="null" />.</exception>
      <returns>The zero-based index position of the first occurrence in this instance where any character in <paramref name="anyOf" /> was found; -1 if no character in <paramref name="anyOf" /> was found.</returns>
    </member>
    <member name="M:System.String.IndexOfAny(System.Char[],System.Int32)">
      <summary>Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters. The search starts at a specified character position.</summary>
      <param name="anyOf">A Unicode character array containing one or more characters to seek.</param>
      <param name="startIndex">The search starting position.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is negative.

 -or-

 <paramref name="startIndex" /> is greater than the number of characters in this instance.</exception>
      <returns>The zero-based index position of the first occurrence in this instance where any character in <paramref name="anyOf" /> was found; -1 if no character in <paramref name="anyOf" /> was found.</returns>
    </member>
    <member name="M:System.String.IndexOfAny(System.Char[],System.Int32,System.Int32)">
      <summary>Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters. The search starts at a specified character position and examines a specified number of character positions.</summary>
      <param name="anyOf">A Unicode character array containing one or more characters to seek.</param>
      <param name="startIndex">The search starting position.</param>
      <param name="count">The number of character positions to examine.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> or <paramref name="startIndex" /> is negative.

 -or-

 <paramref name="count" /> + <paramref name="startIndex" /> is greater than the number of characters in this instance.</exception>
      <returns>The zero-based index position of the first occurrence in this instance where any character in <paramref name="anyOf" /> was found; -1 if no character in <paramref name="anyOf" /> was found.</returns>
    </member>
    <member name="M:System.String.Insert(System.Int32,System.String)">
      <summary>Returns a new string in which a specified string is inserted at a specified index position in this instance.</summary>
      <param name="startIndex">The zero-based index position of the insertion.</param>
      <param name="value">The string to insert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is negative or greater than the length of this instance.</exception>
      <returns>A new string that is equivalent to this instance, but with <paramref name="value" /> inserted at position <paramref name="startIndex" />.</returns>
    </member>
    <member name="M:System.String.Intern(System.String)">
      <summary>Retrieves the system's reference to the specified <see cref="T:System.String" />.</summary>
      <param name="str">A string to search for in the intern pool.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> is <see langword="null" />.</exception>
      <returns>The system's reference to <paramref name="str" />, if it is interned; otherwise, a new reference to a string with the value of <paramref name="str" />.</returns>
    </member>
    <member name="M:System.String.IsInterned(System.String)">
      <summary>Retrieves a reference to a specified <see cref="T:System.String" />.</summary>
      <param name="str">The string to search for in the intern pool.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> is <see langword="null" />.</exception>
      <returns>A reference to <paramref name="str" /> if it is in the common language runtime intern pool; otherwise, <see langword="null" />.</returns>
    </member>
    <member name="M:System.String.IsNormalized">
      <summary>Indicates whether this string is in Unicode normalization form C.</summary>
      <exception cref="T:System.ArgumentException">The current instance contains invalid Unicode characters.</exception>
      <returns>
        <see langword="true" /> if this string is in normalization form C; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.String.IsNormalized(System.Text.NormalizationForm)">
      <summary>Indicates whether this string is in the specified Unicode normalization form.</summary>
      <param name="normalizationForm">A Unicode normalization form.</param>
      <exception cref="T:System.ArgumentException">The current instance contains invalid Unicode characters.</exception>
      <returns>
        <see langword="true" /> if this string is in the normalization form specified by the <paramref name="normalizationForm" /> parameter; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.String.IsNullOrEmpty(System.String)">
      <summary>Indicates whether the specified string is <see langword="null" /> or an empty string ("").</summary>
      <param name="value">The string to test.</param>
      <returns>
        <see langword="true" /> if the <paramref name="value" /> parameter is <see langword="null" /> or an empty string (""); otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.String.IsNullOrWhiteSpace(System.String)">
      <summary>Indicates whether a specified string is <see langword="null" />, empty, or consists only of white-space characters.</summary>
      <param name="value">The string to test.</param>
      <returns>
        <see langword="true" /> if the <paramref name="value" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, or if <paramref name="value" /> consists exclusively of white-space characters.</returns>
    </member>
    <member name="M:System.String.Join(System.Char,System.Object[])">
      <summary>Concatenates the string representations of an array of objects, using the specified separator between each member.</summary>
      <param name="separator">The character to use as a separator. <paramref name="separator" /> is included in the returned string only if <paramref name="value" /> has more than one element.</param>
      <param name="values">An array of objects whose string representations will be concatenated.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.OutOfMemoryException">The length of the resulting string overflows the maximum allowed length (<see cref="F:System.Int32.MaxValue" />).</exception>
      <returns>A string that consists of the elements of <paramref name="values" /> delimited by the <paramref name="separator" /> character.

-or-

<see cref="F:System.String.Empty" /> if <paramref name="values" /> has zero elements or all the elements of <paramref name="values" /> are <see langword="null" />.</returns>
    </member>
    <member name="M:System.String.Join(System.Char,System.String[])">
      <summary>Concatenates an array of strings, using the specified separator between each member.</summary>
      <param name="separator">The character to use as a separator. <paramref name="separator" /> is included in the returned string only if <paramref name="value" /> has more than one element.</param>
      <param name="value">An array of strings to concatenate.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.OutOfMemoryException">The length of the resulting string overflows the maximum allowed length (<see cref="F:System.Int32.MaxValue" />).</exception>
      <returns>A string that consists of the elements of <paramref name="value" /> delimited by the <paramref name="separator" /> character.

-or-

<see cref="F:System.String.Empty" /> if <paramref name="value" /> has zero elements or all the elements of <paramref name="value" /> are <see langword="null" />.</returns>
    </member>
    <member name="M:System.String.Join(System.Char,System.String[],System.Int32,System.Int32)">
      <summary>Concatenates an array of strings, using the specified separator between each member, starting with the element in <paramref name="value" /> located at the <paramref name="startIndex" /> position, and concatenating up to <paramref name="count" /> elements.</summary>
      <param name="separator">Concatenates an array of strings, using the specified separator between each member, starting with the element located at the specified index and including a specified number of elements.</param>
      <param name="value">An array of strings to concatenate.</param>
      <param name="startIndex">The first item in <paramref name="value" /> to concatenate.</param>
      <param name="count">The number of elements from <paramref name="value" /> to concatenate, starting with the element in the <paramref name="startIndex" /> position.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> or <paramref name="count" /> are negative.

-or-

<paramref name="startIndex" /> is greater than the length of <paramref name="value" />  - <paramref name="count" />.</exception>
      <exception cref="T:System.OutOfMemoryException">The length of the resulting string overflows the maximum allowed length (<see cref="F:System.Int32.MaxValue" />).</exception>
      <returns>A string that consists of the elements of <paramref name="value" /> delimited by the <paramref name="separator" /> character.

-or-

<see cref="F:System.String.Empty" /> if <paramref name="count" /> is zero, <paramref name="value" /> has no elements, or all the elements of <paramref name="value" /> are <see langword="null" /> or <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="M:System.String.Join(System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>Concatenates the members of a constructed <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of type <see cref="T:System.String" />, using the specified separator between each member.</summary>
      <param name="separator">The string to use as a separator.<paramref name="separator" /> is included in the returned string only if <paramref name="values" /> has more than one element.</param>
      <param name="values">A collection that contains the strings to concatenate.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> is <see langword="null" />.</exception>
      <exception cref="T:System.OutOfMemoryException">The length of the resulting string overflows the maximum allowed length (<see cref="F:System.Int32.MaxValue" />).</exception>
      <returns>A string that consists of the members of <paramref name="values" /> delimited by the <paramref name="separator" /> string.

-or-

<see cref="F:System.String.Empty" /> if <paramref name="values" /> has zero elements or all the elements of <paramref name="values" /> are <see langword="null" />.</returns>
    </member>
    <member name="M:System.String.Join(System.String,System.Object[])">
      <summary>Concatenates the elements of an object array, using the specified separator between each element.</summary>
      <param name="separator">The string to use as a separator. <paramref name="separator" /> is included in the returned string only if <paramref name="values" /> has more than one element.</param>
      <param name="values">An array that contains the elements to concatenate.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> is <see langword="null" />.</exception>
      <exception cref="T:System.OutOfMemoryException">The length of the resulting string overflows the maximum allowed length (<see cref="F:System.Int32.MaxValue" />).</exception>
      <returns>A string that consists of the elements of <paramref name="values" /> delimited by the <paramref name="separator" /> string. If <paramref name="values" /> is an empty array, the method returns <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="M:System.String.Join(System.String,System.String[])">
      <summary>Concatenates all the elements of a string array, using the specified separator between each element.</summary>
      <param name="separator">The string to use as a separator. <paramref name="separator" /> is included in the returned string only if <paramref name="value" /> has more than one element.</param>
      <param name="value">An array that contains the elements to concatenate.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.OutOfMemoryException">The length of the resulting string overflows the maximum allowed length (<see cref="F:System.Int32.MaxValue" />).</exception>
      <returns>A string that consists of the elements in <paramref name="value" /> delimited by the <paramref name="separator" /> string. If <paramref name="value" /> is an empty array, the method returns <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="M:System.String.Join(System.String,System.String[],System.Int32,System.Int32)">
      <summary>Concatenates the specified elements of a string array, using the specified separator between each element.</summary>
      <param name="separator">The string to use as a separator. <paramref name="separator" /> is included in the returned string only if <paramref name="value" /> has more than one element.</param>
      <param name="value">An array that contains the elements to concatenate.</param>
      <param name="startIndex">The first element in <paramref name="value" /> to use.</param>
      <param name="count">The number of elements of <paramref name="value" /> to use.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> or <paramref name="count" /> is less than 0.

-or-

<paramref name="startIndex" /> plus <paramref name="count" /> is greater than the number of elements in <paramref name="value" />.</exception>
      <exception cref="T:System.OutOfMemoryException">Out of memory.</exception>
      <returns>A string that consists of the strings in <paramref name="value" /> delimited by the <paramref name="separator" /> string.

 -or-

 <see cref="F:System.String.Empty" /> if <paramref name="count" /> is zero, <paramref name="value" /> has no elements, or <paramref name="separator" /> and all the elements of <paramref name="value" /> are <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="M:System.String.Join``1(System.Char,System.Collections.Generic.IEnumerable{``0})">
      <summary>Concatenates the members of a collection, using the specified separator between each member.</summary>
      <param name="separator">The character to use as a separator. <paramref name="separator" /> is included in the returned string only if <paramref name="values" /> has more than one element.</param>
      <param name="values">A collection that contains the objects to concatenate.</param>
      <typeparam name="T">The type of the members of <paramref name="values" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> is <see langword="null" />.</exception>
      <exception cref="T:System.OutOfMemoryException">The length of the resulting string overflows the maximum allowed length (<see cref="F:System.Int32.MaxValue" />).</exception>
      <returns>A string that consists of the members of <paramref name="values" /> delimited by the <paramref name="separator" /> character. If <paramref name="values" /> has no members, the method returns <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="M:System.String.Join``1(System.String,System.Collections.Generic.IEnumerable{``0})">
      <summary>Concatenates the members of a collection, using the specified separator between each member.</summary>
      <param name="separator">The string to use as a separator. <paramref name="separator" /> is included in the returned string only if <paramref name="values" /> has more than one element.</param>
      <param name="values">A collection that contains the objects to concatenate.</param>
      <typeparam name="T">The type of the members of <paramref name="values" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> is <see langword="null" />.</exception>
      <exception cref="T:System.OutOfMemoryException">The length of the resulting string overflows the maximum allowed length (<see cref="F:System.Int32.MaxValue" />).</exception>
      <returns>A string that consists of the members of <paramref name="values" /> delimited by the <paramref name="separator" /> string. If <paramref name="values" /> has no members, the method returns <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="M:System.String.LastIndexOf(System.Char)">
      <summary>Reports the zero-based index position of the last occurrence of a specified Unicode character within this instance.</summary>
      <param name="value">The Unicode character to seek.</param>
      <returns>The zero-based index position of <paramref name="value" /> if that character is found, or -1 if it is not.</returns>
    </member>
    <member name="M:System.String.LastIndexOf(System.Char,System.Int32)">
      <summary>Reports the zero-based index position of the last occurrence of a specified Unicode character within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string.</summary>
      <param name="value">The Unicode character to seek.</param>
      <param name="startIndex">The starting position of the search. The search proceeds from <paramref name="startIndex" /> toward the beginning of this instance.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is less than zero or greater than or equal to the length of this instance.</exception>
      <returns>The zero-based index position of <paramref name="value" /> if that character is found, or -1 if it is not found or if the current instance equals <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="M:System.String.LastIndexOf(System.Char,System.Int32,System.Int32)">
      <summary>Reports the zero-based index position of the last occurrence of the specified Unicode character in a substring within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions.</summary>
      <param name="value">The Unicode character to seek.</param>
      <param name="startIndex">The starting position of the search. The search proceeds from <paramref name="startIndex" /> toward the beginning of this instance.</param>
      <param name="count">The number of character positions to examine.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is less than zero or greater than or equal to the length of this instance.

 -or-

 The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> - <paramref name="count" /> + 1 is less than zero.</exception>
      <returns>The zero-based index position of <paramref name="value" /> if that character is found, or -1 if it is not found or if the current instance equals <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="M:System.String.LastIndexOf(System.String)">
      <summary>Reports the zero-based index position of the last occurrence of a specified string within this instance.</summary>
      <param name="value">The string to seek.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <returns>The zero-based starting index position of <paramref name="value" /> if that string is found, or -1 if it is not. If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is the last index position in this instance.</returns>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.Int32)">
      <summary>Reports the zero-based index position of the last occurrence of a specified string within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string.</summary>
      <param name="value">The string to seek.</param>
      <param name="startIndex">The search starting position. The search proceeds from <paramref name="startIndex" /> toward the beginning of this instance.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is less than zero or greater than the length of the current instance.

 -or-

 The current instance equals <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is less than -1 or greater than zero.</exception>
      <returns>The zero-based starting index position of <paramref name="value" /> if that string is found, or -1 if it is not found or if the current instance equals <see cref="F:System.String.Empty" />. If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is the smaller of <paramref name="startIndex" /> and the last index position in this instance.</returns>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32)">
      <summary>Reports the zero-based index position of the last occurrence of a specified string within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions.</summary>
      <param name="value">The string to seek.</param>
      <param name="startIndex">The search starting position. The search proceeds from <paramref name="startIndex" /> toward the beginning of this instance.</param>
      <param name="count">The number of character positions to examine.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is negative.

 -or-

 The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is negative.

 -or-

 The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is greater than the length of this instance.

 -or-

 The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> - <paramref name="count" />+ 1 specifies a position that is not within this instance.

 -or-

 The current instance equals <see cref="F:System.String.Empty" /> and <paramref name="start" /> is less than -1 or greater than zero.

 -or-

 The current instance equals <see cref="F:System.String.Empty" /> and <paramref name="count" /> is greater than 1.</exception>
      <returns>The zero-based starting index position of <paramref name="value" /> if that string is found, or -1 if it is not found or if the current instance equals <see cref="F:System.String.Empty" />. If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is the smaller of <paramref name="startIndex" /> and the last index position in this instance.</returns>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
      <summary>Reports the zero-based index position of the last occurrence of a specified string within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string for the specified number of character positions. A parameter specifies the type of comparison to perform when searching for the specified string.</summary>
      <param name="value">The string to seek.</param>
      <param name="startIndex">The search starting position. The search proceeds from <paramref name="startIndex" /> toward the beginning of this instance.</param>
      <param name="count">The number of character positions to examine.</param>
      <param name="comparisonType">One of the enumeration values that specifies the rules for the search.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is negative.

 -or-

 The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is negative.

 -or-

 The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is greater than the length of this instance.

 -or-

 The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> + 1 - <paramref name="count" /> specifies a position that is not within this instance.

 -or-

 The current instance equals <see cref="F:System.String.Empty" /> and <paramref name="start" /> is less than -1 or greater than zero.

 -or-

 The current instance equals <see cref="F:System.String.Empty" /> and <paramref name="count" /> is greater than 1.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</exception>
      <returns>The zero-based starting index position of the <paramref name="value" /> parameter if that string is found, or -1 if it is not found or if the current instance equals <see cref="F:System.String.Empty" />. If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is the smaller of <paramref name="startIndex" /> and the last index position in this instance.</returns>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)">
      <summary>Reports the zero-based index of the last occurrence of a specified string within the current <see cref="T:System.String" /> object. The search starts at a specified character position and proceeds backward toward the beginning of the string. A parameter specifies the type of comparison to perform when searching for the specified string.</summary>
      <param name="value">The string to seek.</param>
      <param name="startIndex">The search starting position. The search proceeds from <paramref name="startIndex" /> toward the beginning of this instance.</param>
      <param name="comparisonType">One of the enumeration values that specifies the rules for the search.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is less than zero or greater than the length of the current instance.

 -or-

 The current instance equals <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is less than -1 or greater than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</exception>
      <returns>The zero-based starting index position of the <paramref name="value" /> parameter if that string is found, or -1 if it is not found or if the current instance equals <see cref="F:System.String.Empty" />. If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is the smaller of <paramref name="startIndex" /> and the last index position in this instance.</returns>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.StringComparison)">
      <summary>Reports the zero-based index of the last occurrence of a specified string within the current <see cref="T:System.String" /> object. A parameter specifies the type of search to use for the specified string.</summary>
      <param name="value">The string to seek.</param>
      <param name="comparisonType">One of the enumeration values that specifies the rules for the search.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</exception>
      <returns>The zero-based starting index position of the <paramref name="value" /> parameter if that string is found, or -1 if it is not. If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is the last index position in this instance.</returns>
    </member>
    <member name="M:System.String.LastIndexOfAny(System.Char[])">
      <summary>Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array.</summary>
      <param name="anyOf">A Unicode character array containing one or more characters to seek.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> is <see langword="null" />.</exception>
      <returns>The index position of the last occurrence in this instance where any character in <paramref name="anyOf" /> was found; -1 if no character in <paramref name="anyOf" /> was found.</returns>
    </member>
    <member name="M:System.String.LastIndexOfAny(System.Char[],System.Int32)">
      <summary>Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array. The search starts at a specified character position and proceeds backward toward the beginning of the string.</summary>
      <param name="anyOf">A Unicode character array containing one or more characters to seek.</param>
      <param name="startIndex">The search starting position. The search proceeds from <paramref name="startIndex" /> toward the beginning of this instance.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> specifies a position that is not within this instance.</exception>
      <returns>The index position of the last occurrence in this instance where any character in <paramref name="anyOf" /> was found; -1 if no character in <paramref name="anyOf" /> was found or if the current instance equals <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="M:System.String.LastIndexOfAny(System.Char[],System.Int32,System.Int32)">
      <summary>Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array. The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions.</summary>
      <param name="anyOf">A Unicode character array containing one or more characters to seek.</param>
      <param name="startIndex">The search starting position. The search proceeds from <paramref name="startIndex" /> toward the beginning of this instance.</param>
      <param name="count">The number of character positions to examine.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="count" /> or <paramref name="startIndex" /> is negative.

 -or-

 The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> minus <paramref name="count" /> + 1 is less than zero.</exception>
      <returns>The index position of the last occurrence in this instance where any character in <paramref name="anyOf" /> was found; -1 if no character in <paramref name="anyOf" /> was found or if the current instance equals <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="M:System.String.Normalize">
      <summary>Returns a new string whose textual value is the same as this string, but whose binary representation is in Unicode normalization form C.</summary>
      <exception cref="T:System.ArgumentException">The current instance contains invalid Unicode characters.</exception>
      <returns>A new, normalized string whose textual value is the same as this string, but whose binary representation is in normalization form C.</returns>
    </member>
    <member name="M:System.String.Normalize(System.Text.NormalizationForm)">
      <summary>Returns a new string whose textual value is the same as this string, but whose binary representation is in the specified Unicode normalization form.</summary>
      <param name="normalizationForm">A Unicode normalization form.</param>
      <exception cref="T:System.ArgumentException">The current instance contains invalid Unicode characters.</exception>
      <returns>A new string whose textual value is the same as this string, but whose binary representation is in the normalization form specified by the <paramref name="normalizationForm" /> parameter.</returns>
    </member>
    <member name="M:System.String.op_Equality(System.String,System.String)">
      <summary>Determines whether two specified strings have the same value.</summary>
      <param name="a">The first string to compare, or <see langword="null" />.</param>
      <param name="b">The second string to compare, or <see langword="null" />.</param>
      <returns>
        <see langword="true" /> if the value of <paramref name="a" /> is the same as the value of <paramref name="b" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.String.op_Implicit(System.String)~System.ReadOnlySpan{System.Char}">
      <summary>Defines an implicit conversion of a given string to a read-only span of characters.</summary>
      <param name="value">A string to implicitly convert.</param>
      <returns>A new read-only span of characters representing the string.</returns>
    </member>
    <member name="M:System.String.op_Inequality(System.String,System.String)">
      <summary>Determines whether two specified strings have different values.</summary>
      <param name="a">The first string to compare, or <see langword="null" />.</param>
      <param name="b">The second string to compare, or <see langword="null" />.</param>
      <returns>
        <see langword="true" /> if the value of <paramref name="a" /> is different from the value of <paramref name="b" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.String.PadLeft(System.Int32)">
      <summary>Returns a new string that right-aligns the characters in this instance by padding them with spaces on the left, for a specified total length.</summary>
      <param name="totalWidth">The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="totalWidth" /> is less than zero.</exception>
      <returns>A new string that is equivalent to this instance, but right-aligned and padded on the left with as many spaces as needed to create a length of <paramref name="totalWidth" />. However, if <paramref name="totalWidth" /> is less than the length of this instance, the method returns a reference to the existing instance. If <paramref name="totalWidth" /> is equal to the length of this instance, the method returns a new string that is identical to this instance.</returns>
    </member>
    <member name="M:System.String.PadLeft(System.Int32,System.Char)">
      <summary>Returns a new string that right-aligns the characters in this instance by padding them on the left with a specified Unicode character, for a specified total length.</summary>
      <param name="totalWidth">The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.</param>
      <param name="paddingChar">A Unicode padding character.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="totalWidth" /> is less than zero.</exception>
      <returns>A new string that is equivalent to this instance, but right-aligned and padded on the left with as many <paramref name="paddingChar" /> characters as needed to create a length of <paramref name="totalWidth" />. However, if <paramref name="totalWidth" /> is less than the length of this instance, the method returns a reference to the existing instance. If <paramref name="totalWidth" /> is equal to the length of this instance, the method returns a new string that is identical to this instance.</returns>
    </member>
    <member name="M:System.String.PadRight(System.Int32)">
      <summary>Returns a new string that left-aligns the characters in this string by padding them with spaces on the right, for a specified total length.</summary>
      <param name="totalWidth">The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="totalWidth" /> is less than zero.</exception>
      <returns>A new string that is equivalent to this instance, but left-aligned and padded on the right with as many spaces as needed to create a length of <paramref name="totalWidth" />. However, if <paramref name="totalWidth" /> is less than the length of this instance, the method returns a reference to the existing instance. If <paramref name="totalWidth" /> is equal to the length of this instance, the method returns a new string that is identical to this instance.</returns>
    </member>
    <member name="M:System.String.PadRight(System.Int32,System.Char)">
      <summary>Returns a new string that left-aligns the characters in this string by padding them on the right with a specified Unicode character, for a specified total length.</summary>
      <param name="totalWidth">The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.</param>
      <param name="paddingChar">A Unicode padding character.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="totalWidth" /> is less than zero.</exception>
      <returns>A new string that is equivalent to this instance, but left-aligned and padded on the right with as many <paramref name="paddingChar" /> characters as needed to create a length of <paramref name="totalWidth" />. However, if <paramref name="totalWidth" /> is less than the length of this instance, the method returns a reference to the existing instance. If <paramref name="totalWidth" /> is equal to the length of this instance, the method returns a new string that is identical to this instance.</returns>
    </member>
    <member name="M:System.String.Remove(System.Int32)">
      <summary>Returns a new string in which all the characters in the current instance, beginning at a specified position and continuing through the last position, have been deleted.</summary>
      <param name="startIndex">The zero-based position to begin deleting characters.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero.

 -or-

 <paramref name="startIndex" /> specifies a position that is not within this string.</exception>
      <returns>A new string that is equivalent to this string except for the removed characters.</returns>
    </member>
    <member name="M:System.String.Remove(System.Int32,System.Int32)">
      <summary>Returns a new string in which a specified number of characters in the current instance beginning at a specified position have been deleted.</summary>
      <param name="startIndex">The zero-based position to begin deleting characters.</param>
      <param name="count">The number of characters to delete.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Either <paramref name="startIndex" /> or <paramref name="count" /> is less than zero.

 -or-

 <paramref name="startIndex" /> plus <paramref name="count" /> specify a position outside this instance.</exception>
      <returns>A new string that is equivalent to this instance except for the removed characters.</returns>
    </member>
    <member name="M:System.String.Replace(System.Char,System.Char)">
      <summary>Returns a new string in which all occurrences of a specified Unicode character in this instance are replaced with another specified Unicode character.</summary>
      <param name="oldChar">The Unicode character to be replaced.</param>
      <param name="newChar">The Unicode character to replace all occurrences of <paramref name="oldChar" />.</param>
      <returns>A string that is equivalent to this instance except that all instances of <paramref name="oldChar" /> are replaced with <paramref name="newChar" />. If <paramref name="oldChar" /> is not found in the current instance, the method returns the current instance unchanged.</returns>
    </member>
    <member name="M:System.String.Replace(System.String,System.String)">
      <summary>Returns a new string in which all occurrences of a specified string in the current instance are replaced with another specified string.</summary>
      <param name="oldValue">The string to be replaced.</param>
      <param name="newValue">The string to replace all occurrences of <paramref name="oldValue" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oldValue" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" /> is the empty string ("").</exception>
      <returns>A string that is equivalent to the current string except that all instances of <paramref name="oldValue" /> are replaced with <paramref name="newValue" />. If <paramref name="oldValue" /> is not found in the current instance, the method returns the current instance unchanged.</returns>
    </member>
    <member name="M:System.String.Replace(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
      <summary>Returns a new string in which all occurrences of a specified string in the current instance are replaced with another specified string, using the provided culture and case sensitivity.</summary>
      <param name="oldValue">The string to be replaced.</param>
      <param name="newValue">The string to replace all occurrences of <paramref name="oldValue" />.</param>
      <param name="ignoreCase">
        <see langword="true" /> to ignore casing when comparing; <see langword="false" /> otherwise.</param>
      <param name="culture">The culture to use when comparing.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oldValue" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" /> is the empty string ("").</exception>
      <returns>A string that is equivalent to the current string except that all instances of <paramref name="oldValue" /> are replaced with <paramref name="newValue" />. If <paramref name="oldValue" /> is not found in the current instance, the method returns the current instance unchanged.</returns>
    </member>
    <member name="M:System.String.Replace(System.String,System.String,System.StringComparison)">
      <summary>Returns a new string in which all occurrences of a specified string in the current instance are replaced with another specified string, using the provided comparison type.</summary>
      <param name="oldValue">The string to be replaced.</param>
      <param name="newValue">The string to replace all occurrences of <paramref name="oldValue" />.</param>
      <param name="comparisonType">One of the enumeration values that determines how <paramref name="oldValue" /> is searched within this instance.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oldValue" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" /> is the empty string ("").</exception>
      <returns>A string that is equivalent to the current string except that all instances of <paramref name="oldValue" /> are replaced with <paramref name="newValue" />. If <paramref name="oldValue" /> is not found in the current instance, the method returns the current instance unchanged.</returns>
    </member>
    <member name="M:System.String.Split(System.Char,System.Int32,System.StringSplitOptions)">
      <summary>Splits a string into a maximum number substrings based on the provided character separator.</summary>
      <param name="separator">A character that delimits the substrings in this instance.</param>
      <param name="count">The maximum number of elements expected in the array.</param>
      <param name="options">One of the enumeration values that determines whether the split operation should omit empty substrings from the return value.</param>
      <returns>An array whose elements contain at most <paramref name="count" /> substrings from this instance that are delimited by <paramref name="separator" />.</returns>
    </member>
    <member name="M:System.String.Split(System.Char,System.StringSplitOptions)">
      <summary>Splits a string into substrings based on the provided character separator.</summary>
      <param name="separator">A character that delimits the substrings in this string.</param>
      <param name="options">One of the enumeration values that determines whether the split operation should omit empty substrings from the return value.</param>
      <returns>An array whose elements contain the substrings from this instance that are delimited by <paramref name="separator" />.</returns>
    </member>
    <member name="M:System.String.Split(System.Char[])">
      <summary>Splits a string into substrings that are based on the characters in the separator array.</summary>
      <param name="separator">A character array that delimits the substrings in this string, an empty array that contains no delimiters, or <see langword="null" />.</param>
      <returns>An array whose elements contain the substrings from this instance that are delimited by one or more characters in <paramref name="separator" />. For more information, see the Remarks section.</returns>
    </member>
    <member name="M:System.String.Split(System.Char[],System.Int32)">
      <summary>Splits a string into a maximum number of substrings based on the characters in an array. You also specify the maximum number of substrings to return.</summary>
      <param name="separator">A character array that delimits the substrings in this string, an empty array that contains no delimiters, or <see langword="null" />.</param>
      <param name="count">The maximum number of substrings to return.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is negative.</exception>
      <returns>An array whose elements contain the substrings in this instance that are delimited by one or more characters in <paramref name="separator" />. For more information, see the Remarks section.</returns>
    </member>
    <member name="M:System.String.Split(System.Char[],System.Int32,System.StringSplitOptions)">
      <summary>Splits a string into a maximum number of substrings based on the characters in an array.</summary>
      <param name="separator">A character array that delimits the substrings in this string, an empty array that contains no delimiters, or <see langword="null" />.</param>
      <param name="count">The maximum number of substrings to return.</param>
      <param name="options">
        <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" /> to omit empty array elements from the array returned; or <see cref="F:System.StringSplitOptions.None" /> to include empty array elements in the array returned.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is negative.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> is not one of the <see cref="T:System.StringSplitOptions" /> values.</exception>
      <returns>An array whose elements contain the substrings in this string that are delimited by one or more characters in <paramref name="separator" />. For more information, see the Remarks section.</returns>
    </member>
    <member name="M:System.String.Split(System.Char[],System.StringSplitOptions)">
      <summary>Splits a string into substrings based on the characters in an array. You can specify whether the substrings include empty array elements.</summary>
      <param name="separator">A character array that delimits the substrings in this string, an empty array that contains no delimiters, or <see langword="null" />.</param>
      <param name="options">
        <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" /> to omit empty array elements from the array returned; or <see cref="F:System.StringSplitOptions.None" /> to include empty array elements in the array returned.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> is not one of the <see cref="T:System.StringSplitOptions" /> values.</exception>
      <returns>An array whose elements contain the substrings in this string that are delimited by one or more characters in <paramref name="separator" />. For more information, see the Remarks section.</returns>
    </member>
    <member name="M:System.String.Split(System.String,System.Int32,System.StringSplitOptions)">
      <summary>Splits a string into a maximum number of substrings based on the provided string separator.</summary>
      <param name="separator">A string that delimits the substrings in this instance.</param>
      <param name="count">The maximum number of elements expected in the array.</param>
      <param name="options">One of the enumeration values that determines whether the split operation should omit empty substrings from the return value.</param>
      <returns>An array whose elements contain at most <paramref name="count" /> substrings from this instance that are delimited by <paramref name="separator" />.</returns>
    </member>
    <member name="M:System.String.Split(System.String,System.StringSplitOptions)">
      <summary>Splits a string into substrings that are based on the provided string separator.</summary>
      <param name="separator">A string that delimits the substrings in this string.</param>
      <param name="options">One of the enumeration values that determines whether the split operation should omit empty substrings from the return value.</param>
      <returns>An array whose elements contain the substrings from this instance that are delimited by <paramref name="separator" />.</returns>
    </member>
    <member name="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)">
      <summary>Splits a string into a maximum number of substrings based on the strings in an array. You can specify whether the substrings include empty array elements.</summary>
      <param name="separator">A string array that delimits the substrings in this string, an empty array that contains no delimiters, or <see langword="null" />.</param>
      <param name="count">The maximum number of substrings to return.</param>
      <param name="options">
        <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" /> to omit empty array elements from the array returned; or <see cref="F:System.StringSplitOptions.None" /> to include empty array elements in the array returned.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is negative.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> is not one of the <see cref="T:System.StringSplitOptions" /> values.</exception>
      <returns>An array whose elements contain the substrings in this string that are delimited by one or more strings in <paramref name="separator" />. For more information, see the Remarks section.</returns>
    </member>
    <member name="M:System.String.Split(System.String[],System.StringSplitOptions)">
      <summary>Splits a string into substrings based on the strings in an array. You can specify whether the substrings include empty array elements.</summary>
      <param name="separator">A string array that delimits the substrings in this string, an empty array that contains no delimiters, or <see langword="null" />.</param>
      <param name="options">
        <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" /> to omit empty array elements from the array returned; or <see cref="F:System.StringSplitOptions.None" /> to include empty array elements in the array returned.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> is not one of the <see cref="T:System.StringSplitOptions" /> values.</exception>
      <returns>An array whose elements contain the substrings in this string that are delimited by one or more strings in <paramref name="separator" />. For more information, see the Remarks section.</returns>
    </member>
    <member name="M:System.String.StartsWith(System.Char)">
      <summary>Determines whether this string instance starts with the specified character.</summary>
      <param name="value">The character to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> matches the beginning of this string; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.String.StartsWith(System.String)">
      <summary>Determines whether the beginning of this string instance matches the specified string.</summary>
      <param name="value">The string to compare.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> if <paramref name="value" /> matches the beginning of this string; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.String.StartsWith(System.String,System.Boolean,System.Globalization.CultureInfo)">
      <summary>Determines whether the beginning of this string instance matches the specified string when compared using the specified culture.</summary>
      <param name="value">The string to compare.</param>
      <param name="ignoreCase">
        <see langword="true" /> to ignore case during the comparison; otherwise, <see langword="false" />.</param>
      <param name="culture">Cultural information that determines how this string and <paramref name="value" /> are compared. If <paramref name="culture" /> is <see langword="null" />, the current culture is used.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> if the <paramref name="value" /> parameter matches the beginning of this string; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.String.StartsWith(System.String,System.StringComparison)">
      <summary>Determines whether the beginning of this string instance matches the specified string when compared using the specified comparison option.</summary>
      <param name="value">The string to compare.</param>
      <param name="comparisonType">One of the enumeration values that determines how this string and <paramref name="value" /> are compared.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value.</exception>
      <returns>
        <see langword="true" /> if this instance begins with <paramref name="value" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.String.Substring(System.Int32)">
      <summary>Retrieves a substring from this instance. The substring starts at a specified character position and continues to the end of the string.</summary>
      <param name="startIndex">The zero-based starting character position of a substring in this instance.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero or greater than the length of this instance.</exception>
      <returns>A string that is equivalent to the substring that begins at <paramref name="startIndex" /> in this instance, or <see cref="F:System.String.Empty" /> if <paramref name="startIndex" /> is equal to the length of this instance.</returns>
    </member>
    <member name="M:System.String.Substring(System.Int32,System.Int32)">
      <summary>Retrieves a substring from this instance. The substring starts at a specified character position and has a specified length.</summary>
      <param name="startIndex">The zero-based starting character position of a substring in this instance.</param>
      <param name="length">The number of characters in the substring.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> plus <paramref name="length" /> indicates a position not within this instance.

 -or-

 <paramref name="startIndex" /> or <paramref name="length" /> is less than zero.</exception>
      <returns>A string that is equivalent to the substring of length <paramref name="length" /> that begins at <paramref name="startIndex" /> in this instance, or <see cref="F:System.String.Empty" /> if <paramref name="startIndex" /> is equal to the length of this instance and <paramref name="length" /> is zero.</returns>
    </member>
    <member name="M:System.String.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the current <see cref="T:System.String" /> object.</summary>
      <returns>An enumerator that can be used to iterate through the current string.</returns>
    </member>
    <member name="M:System.String.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.FormatException">The value of the current string is not <see cref="F:System.Boolean.TrueString" /> or <see cref="F:System.Boolean.FalseString" />.</exception>
      <returns>
        <see langword="true" /> if the value of the current string is <see cref="F:System.Boolean.TrueString" />; <see langword="false" /> if the value of the current string is <see cref="F:System.Boolean.FalseString" />.</returns>
    </member>
    <member name="M:System.String.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />.</summary>
      <param name="provider">An object that provides culture-specific formatting information.</param>
      <exception cref="T:System.FormatException">The value of the current <see cref="T:System.String" /> object cannot be parsed.</exception>
      <exception cref="T:System.OverflowException">The value of the current <see cref="T:System.String" /> object is a number greater than <see cref="F:System.Byte.MaxValue" /> or less than <see cref="F:System.Byte.MinValue" />.</exception>
      <returns>The converted value of the current <see cref="T:System.String" /> object.</returns>
    </member>
    <member name="M:System.String.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />.</summary>
      <param name="provider">An object that provides culture-specific formatting information.</param>
      <returns>The character at index 0 in the current <see cref="T:System.String" /> object.</returns>
    </member>
    <member name="M:System.String.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDateTime(System.IFormatProvider)" />.</summary>
      <param name="provider">An object that provides culture-specific formatting information.</param>
      <returns>The converted value of the current <see cref="T:System.String" /> object.</returns>
    </member>
    <member name="M:System.String.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />.</summary>
      <param name="provider">An object that provides culture-specific formatting information.</param>
      <exception cref="T:System.FormatException">The value of the current <see cref="T:System.String" /> object cannot be parsed.</exception>
      <exception cref="T:System.OverflowException">The value of the current <see cref="T:System.String" /> object is a number less than <see cref="F:System.Decimal.MinValue" /> or than <see cref="F:System.Decimal.MaxValue" /> greater.</exception>
      <returns>The converted value of the current <see cref="T:System.String" /> object.</returns>
    </member>
    <member name="M:System.String.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />.</summary>
      <param name="provider">An object that provides culture-specific formatting information.</param>
      <exception cref="T:System.FormatException">The value of the current <see cref="T:System.String" /> object cannot be parsed.</exception>
      <exception cref="T:System.OverflowException">The value of the current <see cref="T:System.String" /> object is a number less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />.</exception>
      <returns>The converted value of the current <see cref="T:System.String" /> object.</returns>
    </member>
    <member name="M:System.String.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />.</summary>
      <param name="provider">An object that provides culture-specific formatting information.</param>
      <exception cref="T:System.FormatException">The value of the current <see cref="T:System.String" /> object cannot be parsed.</exception>
      <exception cref="T:System.OverflowException">The value of the current <see cref="T:System.String" /> object is a number greater than <see cref="F:System.Int16.MaxValue" /> or less than <see cref="F:System.Int16.MinValue" />.</exception>
      <returns>The converted value of the current <see cref="T:System.String" /> object.</returns>
    </member>
    <member name="M:System.String.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.</summary>
      <param name="provider">An object that provides culture-specific formatting information.</param>
      <returns>The converted value of the current <see cref="T:System.String" /> object.</returns>
    </member>
    <member name="M:System.String.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.</summary>
      <param name="provider">An object that provides culture-specific formatting information.</param>
      <returns>The converted value of the current <see cref="T:System.String" /> object.</returns>
    </member>
    <member name="M:System.String.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />.</summary>
      <param name="provider">An object that provides culture-specific formatting information.</param>
      <exception cref="T:System.FormatException">The value of the current <see cref="T:System.String" /> object cannot be parsed.</exception>
      <exception cref="T:System.OverflowException">The value of the current <see cref="T:System.String" /> object is a number greater than <see cref="F:System.SByte.MaxValue" /> or less than <see cref="F:System.SByte.MinValue" />.</exception>
      <returns>The converted value of the current <see cref="T:System.String" /> object.</returns>
    </member>
    <member name="M:System.String.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />.</summary>
      <param name="provider">An object that provides culture-specific formatting information.</param>
      <returns>The converted value of the current <see cref="T:System.String" /> object.</returns>
    </member>
    <member name="M:System.String.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />.</summary>
      <param name="type">The type of the returned object.</param>
      <param name="provider">An object that provides culture-specific formatting information.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidCastException">The value of the current <see cref="T:System.String" /> object cannot be converted to the type specified by the <paramref name="type" /> parameter.</exception>
      <returns>The converted value of the current <see cref="T:System.String" /> object.</returns>
    </member>
    <member name="M:System.String.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.</summary>
      <param name="provider">An object that provides culture-specific formatting information.</param>
      <exception cref="T:System.FormatException">The value of the current <see cref="T:System.String" /> object cannot be parsed.</exception>
      <exception cref="T:System.OverflowException">The value of the current <see cref="T:System.String" /> object is a number greater than <see cref="F:System.UInt16.MaxValue" /> or less than <see cref="F:System.UInt16.MinValue" />.</exception>
      <returns>The converted value of the current <see cref="T:System.String" /> object.</returns>
    </member>
    <member name="M:System.String.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />.</summary>
      <param name="provider">An object that provides culture-specific formatting information.</param>
      <exception cref="T:System.FormatException">The value of the current <see cref="T:System.String" /> object cannot be parsed.</exception>
      <exception cref="T:System.OverflowException">The value of the current <see cref="T:System.String" /> object is a number greater <see cref="F:System.UInt32.MaxValue" /> or less than <see cref="F:System.UInt32.MinValue" /></exception>
      <returns>The converted value of the current <see cref="T:System.String" /> object.</returns>
    </member>
    <member name="M:System.String.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />.</summary>
      <param name="provider">An object that provides culture-specific formatting information.</param>
      <returns>The converted value of the current <see cref="T:System.String" /> object.</returns>
    </member>
    <member name="M:System.String.ToCharArray">
      <summary>Copies the characters in this instance to a Unicode character array.</summary>
      <returns>A Unicode character array whose elements are the individual characters of this instance. If this instance is an empty string, the returned array is empty and has a zero length.</returns>
    </member>
    <member name="M:System.String.ToCharArray(System.Int32,System.Int32)">
      <summary>Copies the characters in a specified substring in this instance to a Unicode character array.</summary>
      <param name="startIndex">The starting position of a substring in this instance.</param>
      <param name="length">The length of the substring in this instance.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> or <paramref name="length" /> is less than zero.

 -or-

 <paramref name="startIndex" /> plus <paramref name="length" /> is greater than the length of this instance.</exception>
      <returns>A Unicode character array whose elements are the <paramref name="length" /> number of characters in this instance starting from character position <paramref name="startIndex" />.</returns>
    </member>
    <member name="M:System.String.ToLower">
      <summary>Returns a copy of this string converted to lowercase.</summary>
      <returns>A string in lowercase.</returns>
    </member>
    <member name="M:System.String.ToLower(System.Globalization.CultureInfo)">
      <summary>Returns a copy of this string converted to lowercase, using the casing rules of the specified culture.</summary>
      <param name="culture">An object that supplies culture-specific casing rules.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> is <see langword="null" />.</exception>
      <returns>The lowercase equivalent of the current string.</returns>
    </member>
    <member name="M:System.String.ToLowerInvariant">
      <summary>Returns a copy of this <see cref="T:System.String" /> object converted to lowercase using the casing rules of the invariant culture.</summary>
      <returns>The lowercase equivalent of the current string.</returns>
    </member>
    <member name="M:System.String.ToString">
      <summary>Returns this instance of <see cref="T:System.String" />; no actual conversion is performed.</summary>
      <returns>The current string.</returns>
    </member>
    <member name="M:System.String.ToString(System.IFormatProvider)">
      <summary>Returns this instance of <see cref="T:System.String" />; no actual conversion is performed.</summary>
      <param name="provider">(Reserved) An object that supplies culture-specific formatting information.</param>
      <returns>The current string.</returns>
    </member>
    <member name="M:System.String.ToUpper">
      <summary>Returns a copy of this string converted to uppercase.</summary>
      <returns>The uppercase equivalent of the current string.</returns>
    </member>
    <member name="M:System.String.ToUpper(System.Globalization.CultureInfo)">
      <summary>Returns a copy of this string converted to uppercase, using the casing rules of the specified culture.</summary>
      <param name="culture">An object that supplies culture-specific casing rules.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> is <see langword="null" />.</exception>
      <returns>The uppercase equivalent of the current string.</returns>
    </member>
    <member name="M:System.String.ToUpperInvariant">
      <summary>Returns a copy of this <see cref="T:System.String" /> object converted to uppercase using the casing rules of the invariant culture.</summary>
      <returns>The uppercase equivalent of the current string.</returns>
    </member>
    <member name="M:System.String.Trim">
      <summary>Removes all leading and trailing white-space characters from the current string.</summary>
      <returns>The string that remains after all white-space characters are removed from the start and end of the current string. If no characters can be trimmed from the current instance, the method returns the current instance unchanged.</returns>
    </member>
    <member name="M:System.String.Trim(System.Char)">
      <summary>Removes all leading and trailing instances of a character from the current string.</summary>
      <param name="trimChar">A Unicode character to remove.</param>
      <returns>The string that remains after all instances of the <paramref name="trimChar" /> character are removed from the start and end of the current string. If no characters can be trimmed from the current instance, the method returns the current instance unchanged.</returns>
    </member>
    <member name="M:System.String.Trim(System.Char[])">
      <summary>Removes all leading and trailing occurrences of a set of characters specified in an array from the current string.</summary>
      <param name="trimChars">An array of Unicode characters to remove, or <see langword="null" />.</param>
      <returns>The string that remains after all occurrences of the characters in the <paramref name="trimChars" /> parameter are removed from the start and end of the current string. If <paramref name="trimChars" /> is <see langword="null" /> or an empty array, white-space characters are removed instead. If no characters can be trimmed from the current instance, the method returns the current instance unchanged.</returns>
    </member>
    <member name="M:System.String.TrimEnd">
      <summary>Removes all the trailing white-space characters from the current string.</summary>
      <returns>The string that remains after all white-space characters are removed from the end of the current string. If no characters can be trimmed from the current instance, the method returns the current instance unchanged.</returns>
    </member>
    <member name="M:System.String.TrimEnd(System.Char)">
      <summary>Removes all the trailing occurrences of a character from the current string.</summary>
      <param name="trimChar">A Unicode character to remove.</param>
      <returns>The string that remains after all occurrences of the <paramref name="trimChar" /> character are removed from the end of the current string. If no characters can be trimmed from the current instance, the method returns the current instance unchanged.</returns>
    </member>
    <member name="M:System.String.TrimEnd(System.Char[])">
      <summary>Removes all the trailing occurrences of a set of characters specified in an array from the current string.</summary>
      <param name="trimChars">An array of Unicode characters to remove, or <see langword="null" />.</param>
      <returns>The string that remains after all occurrences of the characters in the <paramref name="trimChars" /> parameter are removed from the end of the current string. If <paramref name="trimChars" /> is <see langword="null" /> or an empty array, Unicode white-space characters are removed instead. If no characters can be trimmed from the current instance, the method returns the current instance unchanged.</returns>
    </member>
    <member name="M:System.String.TrimStart">
      <summary>Removes all the leading white-space characters from the current string.</summary>
      <returns>The string that remains after all white-space characters are removed from the start of the current string. If no characters can be trimmed from the current instance, the method returns the current instance unchanged.</returns>
    </member>
    <member name="M:System.String.TrimStart(System.Char)">
      <summary>Removes all the leading occurrences of a specified character from the current string.</summary>
      <param name="trimChar">The Unicode character to remove.</param>
      <returns>The string that remains after all occurrences of the <paramref name="trimChar" /> character are removed from the start of the current string. If no characters can be trimmed from the current instance, the method returns the current instance unchanged.</returns>
    </member>
    <member name="M:System.String.TrimStart(System.Char[])">
      <summary>Removes all the leading occurrences of a set of characters specified in an array from the current string.</summary>
      <param name="trimChars">An array of Unicode characters to remove, or <see langword="null" />.</param>
      <returns>The string that remains after all occurrences of characters in the <paramref name="trimChars" /> parameter are removed from the start of the current string. If <paramref name="trimChars" /> is <see langword="null" /> or an empty array, white-space characters are removed instead. If no characters can be trimmed from the current instance, the method returns the current instance unchanged.</returns>
    </member>
    <member name="P:System.String.Chars(System.Int32)">
      <summary>Gets the <see cref="T:System.Char" /> object at a specified position in the current <see cref="T:System.String" /> object.</summary>
      <param name="index">A position in the current string.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is greater than or equal to the length of this object or less than zero.</exception>
      <returns>The object at position <paramref name="index" />.</returns>
    </member>
    <member name="P:System.String.Length">
      <summary>Gets the number of characters in the current <see cref="T:System.String" /> object.</summary>
      <returns>The number of characters in the current string.</returns>
    </member>
    <member name="T:System.StringComparison">
      <summary>Specifies the culture, case, and sort rules to be used by certain overloads of the <see cref="M:System.String.Compare(System.String,System.String)" /> and <see cref="M:System.String.Equals(System.Object)" /> methods.</summary>
    </member>
    <member name="F:System.StringComparison.CurrentCulture">
      <summary>Compare strings using culture-sensitive sort rules and the current culture.</summary>
    </member>
    <member name="F:System.StringComparison.CurrentCultureIgnoreCase">
      <summary>Compare strings using culture-sensitive sort rules, the current culture, and ignoring the case of the strings being compared.</summary>
    </member>
    <member name="F:System.StringComparison.InvariantCulture">
      <summary>Compare strings using culture-sensitive sort rules and the invariant culture.</summary>
    </member>
    <member name="F:System.StringComparison.InvariantCultureIgnoreCase">
      <summary>Compare strings using culture-sensitive sort rules, the invariant culture, and ignoring the case of the strings being compared.</summary>
    </member>
    <member name="F:System.StringComparison.Ordinal">
      <summary>Compare strings using ordinal (binary) sort rules.</summary>
    </member>
    <member name="F:System.StringComparison.OrdinalIgnoreCase">
      <summary>Compare strings using ordinal (binary) sort rules and ignoring the case of the strings being compared.</summary>
    </member>
    <member name="T:System.StringSplitOptions">
      <summary>Specifies whether applicable <see cref="Overload:System.String.Split" /> method overloads include or omit empty substrings from the return value.</summary>
    </member>
    <member name="F:System.StringSplitOptions.None">
      <summary>The return value includes array elements that contain an empty string.</summary>
    </member>
    <member name="F:System.StringSplitOptions.RemoveEmptyEntries">
      <summary>The return value does not include array elements that contain an empty string.</summary>
    </member>
    <member name="F:System.StringSplitOptions.TrimEntries">
      <summary>Specifies that whitespace should be trimmed from each substring in the result.</summary>
    </member>
    <member name="T:System.Text.StringBuilder">
      <summary>Represents a mutable string of characters. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Text.StringBuilder" /> class.</summary>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.StringBuilder" /> class using the specified capacity.</summary>
      <param name="capacity">The suggested starting size of this instance.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is less than zero.</exception>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.StringBuilder" /> class that starts with a specified capacity and can grow to a specified maximum.</summary>
      <param name="capacity">The suggested starting size of the <see cref="T:System.Text.StringBuilder" />.</param>
      <param name="maxCapacity">The maximum number of characters the current string can contain.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxCapacity" /> is less than one, <paramref name="capacity" /> is less than zero, or <paramref name="capacity" /> is greater than <paramref name="maxCapacity" />.</exception>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.StringBuilder" /> class using the specified string.</summary>
      <param name="value">The string used to initialize the value of the instance. If <paramref name="value" /> is <see langword="null" />, the new <see cref="T:System.Text.StringBuilder" /> will contain the empty string (that is, it contains <see cref="F:System.String.Empty" />).</param>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.String,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.StringBuilder" /> class using the specified string and capacity.</summary>
      <param name="value">The string used to initialize the value of the instance. If <paramref name="value" /> is <see langword="null" />, the new <see cref="T:System.Text.StringBuilder" /> will contain the empty string (that is, it contains <see cref="F:System.String.Empty" />).</param>
      <param name="capacity">The suggested starting size of the <see cref="T:System.Text.StringBuilder" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is less than zero.</exception>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.String,System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.StringBuilder" /> class from the specified substring and capacity.</summary>
      <param name="value">The string that contains the substring used to initialize the value of this instance. If <paramref name="value" /> is <see langword="null" />, the new <see cref="T:System.Text.StringBuilder" /> will contain the empty string (that is, it contains <see cref="F:System.String.Empty" />).</param>
      <param name="startIndex">The position within <paramref name="value" /> where the substring begins.</param>
      <param name="length">The number of characters in the substring.</param>
      <param name="capacity">The suggested starting size of the <see cref="T:System.Text.StringBuilder" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is less than zero.

 -or-

 <paramref name="startIndex" /> plus <paramref name="length" /> is not a position within <paramref name="value" />.</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Boolean)">
      <summary>Appends the string representation of a specified Boolean value to this instance.</summary>
      <param name="value">The Boolean value to append.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <returns>A reference to this instance after the append operation has completed.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Byte)">
      <summary>Appends the string representation of a specified 8-bit unsigned integer to this instance.</summary>
      <param name="value">The value to append.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <returns>A reference to this instance after the append operation has completed.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Char)">
      <summary>Appends the string representation of a specified <see cref="T:System.Char" /> object to this instance.</summary>
      <param name="value">The UTF-16-encoded code unit to append.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <returns>A reference to this instance after the append operation has completed.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Char*,System.Int32)">
      <summary>Appends an array of Unicode characters starting at a specified address to this instance.</summary>
      <param name="value">A pointer to an array of characters.</param>
      <param name="valueCount">The number of characters in the array.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="valueCount" /> is less than zero.

 -or-

 Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="value" /> is a null pointer.</exception>
      <returns>A reference to this instance after the append operation has completed.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Char,System.Int32)">
      <summary>Appends a specified number of copies of the string representation of a Unicode character to this instance.</summary>
      <param name="value">The character to append.</param>
      <param name="repeatCount">The number of times to append <paramref name="value" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="repeatCount" /> is less than zero.

 -or-

 Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <exception cref="T:System.OutOfMemoryException">Out of memory.</exception>
      <returns>A reference to this instance after the append operation has completed.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Char[])">
      <summary>Appends the string representation of the Unicode characters in a specified array to this instance.</summary>
      <param name="value">The array of characters to append.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <returns>A reference to this instance after the append operation has completed.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Char[],System.Int32,System.Int32)">
      <summary>Appends the string representation of a specified subarray of Unicode characters to this instance.</summary>
      <param name="value">A character array.</param>
      <param name="startIndex">The starting position in <paramref name="value" />.</param>
      <param name="charCount">The number of characters to append.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />, and <paramref name="startIndex" /> and <paramref name="charCount" /> are not zero.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charCount" /> is less than zero.

 -or-

 <paramref name="startIndex" /> is less than zero.

 -or-

 <paramref name="startIndex" /> + <paramref name="charCount" /> is greater than the length of <paramref name="value" />.

 -or-

 Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <returns>A reference to this instance after the append operation has completed.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Decimal)">
      <summary>Appends the string representation of a specified decimal number to this instance.</summary>
      <param name="value">The value to append.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <returns>A reference to this instance after the append operation has completed.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Double)">
      <summary>Appends the string representation of a specified double-precision floating-point number to this instance.</summary>
      <param name="value">The value to append.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <returns>A reference to this instance after the append operation has completed.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Int16)">
      <summary>Appends the string representation of a specified 16-bit signed integer to this instance.</summary>
      <param name="value">The value to append.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <returns>A reference to this instance after the append operation has completed.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Int32)">
      <summary>Appends the string representation of a specified 32-bit signed integer to this instance.</summary>
      <param name="value">The value to append.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <returns>A reference to this instance after the append operation has completed.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Int64)">
      <summary>Appends the string representation of a specified 64-bit signed integer to this instance.</summary>
      <param name="value">The value to append.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <returns>A reference to this instance after the append operation has completed.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Object)">
      <summary>Appends the string representation of a specified object to this instance.</summary>
      <param name="value">The object to append.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <returns>A reference to this instance after the append operation has completed.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.ReadOnlyMemory{System.Char})">
      <summary>Appends the string representation of a specified read-only character memory region to this instance.</summary>
      <param name="value">The read-only character memory region to append.</param>
      <returns>A reference to this instance after the append operation is completed.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.ReadOnlySpan{System.Char})">
      <summary>Appends the string representation of a specified read-only character span to this instance.</summary>
      <param name="value">The read-only character span to append.</param>
      <returns>A reference to this instance after the append operation is completed.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.SByte)">
      <summary>Appends the string representation of a specified 8-bit signed integer to this instance.</summary>
      <param name="value">The value to append.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <returns>A reference to this instance after the append operation has completed.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Single)">
      <summary>Appends the string representation of a specified single-precision floating-point number to this instance.</summary>
      <param name="value">The value to append.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <returns>A reference to this instance after the append operation has completed.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.String)">
      <summary>Appends a copy of the specified string to this instance.</summary>
      <param name="value">The string to append.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <returns>A reference to this instance after the append operation has completed.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.String,System.Int32,System.Int32)">
      <summary>Appends a copy of a specified substring to this instance.</summary>
      <param name="value">The string that contains the substring to append.</param>
      <param name="startIndex">The starting position of the substring within <paramref name="value" />.</param>
      <param name="count">The number of characters in <paramref name="value" /> to append.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />, and <paramref name="startIndex" /> and <paramref name="count" /> are not zero.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> less than zero.

 -or-

 <paramref name="startIndex" /> less than zero.

 -or-

 <paramref name="startIndex" /> + <paramref name="count" /> is greater than the length of <paramref name="value" />.

 -or-

 Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <returns>A reference to this instance after the append operation has completed.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Text.StringBuilder)">
      <summary>Appends the string representation of a specified string builder to this instance.</summary>
      <param name="value">The string builder to append.</param>
      <returns>A reference to this instance after the append operation is completed.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Text.StringBuilder,System.Int32,System.Int32)">
      <summary>Appends a copy of a substring within a specified string builder to this instance.</summary>
      <param name="value">The string builder that contains the substring to append.</param>
      <param name="startIndex">The starting position of the substring within <paramref name="value" />.</param>
      <param name="count">The number of characters in <paramref name="value" /> to append.</param>
      <returns>A reference to this instance after the append operation has completed.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.UInt16)">
      <summary>Appends the string representation of a specified 16-bit unsigned integer to this instance.</summary>
      <param name="value">The value to append.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <returns>A reference to this instance after the append operation has completed.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.UInt32)">
      <summary>Appends the string representation of a specified 32-bit unsigned integer to this instance.</summary>
      <param name="value">The value to append.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <returns>A reference to this instance after the append operation has completed.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.UInt64)">
      <summary>Appends the string representation of a specified 64-bit unsigned integer to this instance.</summary>
      <param name="value">The value to append.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <returns>A reference to this instance after the append operation has completed.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object)">
      <summary>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a single argument using a specified format provider.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <param name="format">A composite format string.</param>
      <param name="arg0">The object to format.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.

 -or-

 The index of a format item is less than 0 (zero), or greater than or equal to one (1).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The length of the expanded string would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <returns>A reference to this instance after the append operation has completed. After the append operation, this instance contains any data that existed before the operation, suffixed by a copy of <paramref name="format" /> in which any format specification is replaced by the string representation of <paramref name="arg0" />.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object,System.Object)">
      <summary>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of either of two arguments using a specified format provider.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <param name="format">A composite format string.</param>
      <param name="arg0">The first object to format.</param>
      <param name="arg1">The second object to format.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.

 -or-

 The index of a format item is less than 0 (zero), or greater than or equal to 2 (two).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The length of the expanded string would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <returns>A reference to this instance after the append operation has completed. After the append operation, this instance contains any data that existed before the operation, suffixed by a copy of <paramref name="format" /> where any format specification is replaced by the string representation of the corresponding object argument.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)">
      <summary>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of either of three arguments using a specified format provider.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <param name="format">A composite format string.</param>
      <param name="arg0">The first object to format.</param>
      <param name="arg1">The second object to format.</param>
      <param name="arg2">The third object to format.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.

 -or-

 The index of a format item is less than 0 (zero), or greater than or equal to 3 (three).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The length of the expanded string would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <returns>A reference to this instance after the append operation has completed. After the append operation, this instance contains any data that existed before the operation, suffixed by a copy of <paramref name="format" /> where any format specification is replaced by the string representation of the corresponding object argument.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object[])">
      <summary>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a corresponding argument in a parameter array using a specified format provider.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <param name="format">A composite format string.</param>
      <param name="args">An array of objects to format.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.

 -or-

 The index of a format item is less than 0 (zero), or greater than or equal to the length of the <paramref name="args" /> array.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The length of the expanded string would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <returns>A reference to this instance after the append operation has completed. After the append operation, this instance contains any data that existed before the operation, suffixed by a copy of <paramref name="format" /> where any format specification is replaced by the string representation of the corresponding object argument.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object)">
      <summary>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a single argument.</summary>
      <param name="format">A composite format string.</param>
      <param name="arg0">An object to format.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.

 -or-

 The index of a format item is less than 0 (zero), or greater than or equal to 1.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The length of the expanded string would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <returns>A reference to this instance with <paramref name="format" /> appended. Each format item in <paramref name="format" /> is replaced by the string representation of <paramref name="arg0" />.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object,System.Object)">
      <summary>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of either of two arguments.</summary>
      <param name="format">A composite format string.</param>
      <param name="arg0">The first object to format.</param>
      <param name="arg1">The second object to format.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.

 -or-

 The index of a format item is less than 0 (zero), or greater than or equal to 2.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The length of the expanded string would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <returns>A reference to this instance with <paramref name="format" /> appended. Each format item in <paramref name="format" /> is replaced by the string representation of the corresponding object argument.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object,System.Object,System.Object)">
      <summary>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of either of three arguments.</summary>
      <param name="format">A composite format string.</param>
      <param name="arg0">The first object to format.</param>
      <param name="arg1">The second object to format.</param>
      <param name="arg2">The third object to format.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.

 -or-

 The index of a format item is less than 0 (zero), or greater than or equal to 3.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The length of the expanded string would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <returns>A reference to this instance with <paramref name="format" /> appended. Each format item in <paramref name="format" /> is replaced by the string representation of the corresponding object argument.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object[])">
      <summary>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a corresponding argument in a parameter array.</summary>
      <param name="format">A composite format string.</param>
      <param name="args">An array of objects to format.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> or <paramref name="args" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.

 -or-

 The index of a format item is less than 0 (zero), or greater than or equal to the length of the <paramref name="args" /> array.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The length of the expanded string would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <returns>A reference to this instance with <paramref name="format" /> appended. Each format item in <paramref name="format" /> is replaced by the string representation of the corresponding object argument.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.AppendJoin(System.Char,System.Object[])">
      <summary>Concatenates the string representations of the elements in the provided array of objects, using the specified char separator between each member, then appends the result to the current instance of the string builder.</summary>
      <param name="separator">The character to use as a separator. <paramref name="separator" /> is included in the joined strings only if <paramref name="values" /> has more than one element.</param>
      <param name="values">An array that contains the strings to concatenate and append to the current instance of the string builder.</param>
      <returns>A reference to this instance after the append operation has completed.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.AppendJoin(System.Char,System.String[])">
      <summary>Concatenates the strings of the provided array, using the specified char separator between each string, then appends the result to the current instance of the string builder.</summary>
      <param name="separator">The character to use as a separator. <paramref name="separator" /> is included in the joined strings only if <paramref name="values" /> has more than one element.</param>
      <param name="values">An array that contains the strings to concatenate and append to the current instance of the string builder.</param>
      <returns>A reference to this instance after the append operation has completed.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.AppendJoin(System.String,System.Object[])">
      <summary>Concatenates the string representations of the elements in the provided array of objects, using the specified separator between each member, then appends the result to the current instance of the string builder.</summary>
      <param name="separator">The string to use as a separator. <paramref name="separator" /> is included in the joined strings only if <paramref name="values" /> has more than one element.</param>
      <param name="values">An array that contains the strings to concatenate and append to the current instance of the string builder.</param>
      <returns>A reference to this instance after the append operation has completed.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.AppendJoin(System.String,System.String[])">
      <summary>Concatenates the strings of the provided array, using the specified separator between each string, then appends the result to the current instance of the string builder.</summary>
      <param name="separator">The string to use as a separator. <paramref name="separator" /> is included in the joined strings only if <paramref name="values" /> has more than one element.</param>
      <param name="values">An array that contains the strings to concatenate and append to the current instance of the string builder.</param>
      <returns>A reference to this instance after the append operation has completed.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.AppendJoin``1(System.Char,System.Collections.Generic.IEnumerable{``0})">
      <summary>Concatenates and appends the members of a collection, using the specified char separator between each member.</summary>
      <param name="separator">The character to use as a separator. <paramref name="separator" /> is included in the concatenated and appended strings only if <paramref name="values" /> has more than one element.</param>
      <param name="values">A collection that contains the objects to concatenate and append to the current instance of the string builder.</param>
      <typeparam name="T">The type of the members of <paramref name="values" />.</typeparam>
      <returns>A reference to this instance after the append operation has completed.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.AppendJoin``1(System.String,System.Collections.Generic.IEnumerable{``0})">
      <summary>Concatenates and appends the members of a collection, using the specified separator between each member.</summary>
      <param name="separator">The string to use as a separator. <paramref name="separator" /> is included in the concatenated and appended strings only if <paramref name="values" /> has more than one element.</param>
      <param name="values">A collection that contains the objects to concatenate and append to the current instance of the string builder.</param>
      <typeparam name="T">The type of the members of <paramref name="values" />.</typeparam>
      <returns>A reference to this instance after the append operation has completed.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.AppendLine">
      <summary>Appends the default line terminator to the end of the current <see cref="T:System.Text.StringBuilder" /> object.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <returns>A reference to this instance after the append operation has completed.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.AppendLine(System.String)">
      <summary>Appends a copy of the specified string followed by the default line terminator to the end of the current <see cref="T:System.Text.StringBuilder" /> object.</summary>
      <param name="value">The string to append.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <returns>A reference to this instance after the append operation has completed.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Clear">
      <summary>Removes all characters from the current <see cref="T:System.Text.StringBuilder" /> instance.</summary>
      <returns>An object whose <see cref="P:System.Text.StringBuilder.Length" /> is 0 (zero).</returns>
    </member>
    <member name="M:System.Text.StringBuilder.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
      <summary>Copies the characters from a specified segment of this instance to a specified segment of a destination <see cref="T:System.Char" /> array.</summary>
      <param name="sourceIndex">The starting position in this instance where characters will be copied from. The index is zero-based.</param>
      <param name="destination">The array where characters will be copied.</param>
      <param name="destinationIndex">The starting position in <paramref name="destination" /> where characters will be copied. The index is zero-based.</param>
      <param name="count">The number of characters to be copied.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceIndex" />, <paramref name="destinationIndex" />, or <paramref name="count" />, is less than zero.

 -or-

 <paramref name="sourceIndex" /> is greater than the length of this instance.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceIndex" /> + <paramref name="count" /> is greater than the length of this instance.

 -or-

 <paramref name="destinationIndex" /> + <paramref name="count" /> is greater than the length of <paramref name="destination" />.</exception>
    </member>
    <member name="M:System.Text.StringBuilder.CopyTo(System.Int32,System.Span{System.Char},System.Int32)">
      <summary>Copies the characters from a specified segment of this instance to a destination <see cref="T:System.Char" /> span.</summary>
      <param name="sourceIndex">The starting position in this instance where characters will be copied from. The index is zero-based.</param>
      <param name="destination">The writable span where characters will be copied.</param>
      <param name="count">The number of characters to be copied.</param>
    </member>
    <member name="M:System.Text.StringBuilder.EnsureCapacity(System.Int32)">
      <summary>Ensures that the capacity of this instance of <see cref="T:System.Text.StringBuilder" /> is at least the specified value.</summary>
      <param name="capacity">The minimum capacity to ensure.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is less than zero.

 -or-

 Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <returns>The new capacity of this instance.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Equals(System.ReadOnlySpan{System.Char})">
      <summary>Returns a value indicating whether the characters in this instance are equal to the characters in a specified read-only character span.</summary>
      <param name="span">The character span to compare with the current instance.</param>
      <returns>
        <see langword="true" /> if the characters in this instance and <paramref name="span" /> are the same; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Equals(System.Text.StringBuilder)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="sb">An object to compare with this instance, or <see langword="null" />.</param>
      <returns>
        <see langword="true" /> if this instance and <paramref name="sb" /> have equal string, <see cref="P:System.Text.StringBuilder.Capacity" />, and <see cref="P:System.Text.StringBuilder.MaxCapacity" /> values; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.GetChunks">
      <summary>Returns an object that can be used to iterate through the chunks of characters represented in a <see langword="ReadOnlyMemory&lt;Char&gt;" /> created from this <see cref="T:System.Text.StringBuilder" /> instance.</summary>
      <returns>An enumerator for the chunks in the <see langword="ReadOnlyMemory&lt;Char&gt;" />.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Boolean)">
      <summary>Inserts the string representation of a Boolean value into this instance at the specified character position.</summary>
      <param name="index">The position in this instance where insertion begins.</param>
      <param name="value">The value to insert.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the length of this instance.</exception>
      <exception cref="T:System.OutOfMemoryException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <returns>A reference to this instance after the insert operation has completed.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Byte)">
      <summary>Inserts the string representation of a specified 8-bit unsigned integer into this instance at the specified character position.</summary>
      <param name="index">The position in this instance where insertion begins.</param>
      <param name="value">The value to insert.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the length of this instance.</exception>
      <exception cref="T:System.OutOfMemoryException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <returns>A reference to this instance after the insert operation has completed.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Char)">
      <summary>Inserts the string representation of a specified Unicode character into this instance at the specified character position.</summary>
      <param name="index">The position in this instance where insertion begins.</param>
      <param name="value">The value to insert.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the length of this instance.

 -or-

 Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <returns>A reference to this instance after the insert operation has completed.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Char[])">
      <summary>Inserts the string representation of a specified array of Unicode characters into this instance at the specified character position.</summary>
      <param name="index">The position in this instance where insertion begins.</param>
      <param name="value">The character array to insert.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the length of this instance.

 -or-

 Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <returns>A reference to this instance after the insert operation has completed.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Char[],System.Int32,System.Int32)">
      <summary>Inserts the string representation of a specified subarray of Unicode characters into this instance at the specified character position.</summary>
      <param name="index">The position in this instance where insertion begins.</param>
      <param name="value">A character array.</param>
      <param name="startIndex">The starting index within <paramref name="value" />.</param>
      <param name="charCount">The number of characters to insert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />, and <paramref name="startIndex" /> and <paramref name="charCount" /> are not zero.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />, <paramref name="startIndex" />, or <paramref name="charCount" /> is less than zero.

 -or-

 <paramref name="index" /> is greater than the length of this instance.

 -or-

 <paramref name="startIndex" /> plus <paramref name="charCount" /> is not a position within <paramref name="value" />.

 -or-

 Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <returns>A reference to this instance after the insert operation has completed.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Decimal)">
      <summary>Inserts the string representation of a decimal number into this instance at the specified character position.</summary>
      <param name="index">The position in this instance where insertion begins.</param>
      <param name="value">The value to insert.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the length of this instance.</exception>
      <exception cref="T:System.OutOfMemoryException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <returns>A reference to this instance after the insert operation has completed.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Double)">
      <summary>Inserts the string representation of a double-precision floating-point number into this instance at the specified character position.</summary>
      <param name="index">The position in this instance where insertion begins.</param>
      <param name="value">The value to insert.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the length of this instance.</exception>
      <exception cref="T:System.OutOfMemoryException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <returns>A reference to this instance after the insert operation has completed.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Int16)">
      <summary>Inserts the string representation of a specified 16-bit signed integer into this instance at the specified character position.</summary>
      <param name="index">The position in this instance where insertion begins.</param>
      <param name="value">The value to insert.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the length of this instance.</exception>
      <exception cref="T:System.OutOfMemoryException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <returns>A reference to this instance after the insert operation has completed.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Int32)">
      <summary>Inserts the string representation of a specified 32-bit signed integer into this instance at the specified character position.</summary>
      <param name="index">The position in this instance where insertion begins.</param>
      <param name="value">The value to insert.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the length of this instance.</exception>
      <exception cref="T:System.OutOfMemoryException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <returns>A reference to this instance after the insert operation has completed.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Int64)">
      <summary>Inserts the string representation of a 64-bit signed integer into this instance at the specified character position.</summary>
      <param name="index">The position in this instance where insertion begins.</param>
      <param name="value">The value to insert.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the length of this instance.</exception>
      <exception cref="T:System.OutOfMemoryException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <returns>A reference to this instance after the insert operation has completed.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Object)">
      <summary>Inserts the string representation of an object into this instance at the specified character position.</summary>
      <param name="index">The position in this instance where insertion begins.</param>
      <param name="value">The object to insert, or <see langword="null" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the length of this instance.</exception>
      <exception cref="T:System.OutOfMemoryException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <returns>A reference to this instance after the insert operation has completed.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.ReadOnlySpan{System.Char})">
      <summary>Inserts the sequence of characters into this instance at the specified character position.</summary>
      <param name="index">The position in this instance where insertion begins.</param>
      <param name="value">The character span to insert.</param>
      <returns>A reference to this instance after the insert operation has completed.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.SByte)">
      <summary>Inserts the string representation of a specified 8-bit signed integer into this instance at the specified character position.</summary>
      <param name="index">The position in this instance where insertion begins.</param>
      <param name="value">The value to insert.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the length of this instance.</exception>
      <exception cref="T:System.OutOfMemoryException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <returns>A reference to this instance after the insert operation has completed.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Single)">
      <summary>Inserts the string representation of a single-precision floating point number into this instance at the specified character position.</summary>
      <param name="index">The position in this instance where insertion begins.</param>
      <param name="value">The value to insert.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the length of this instance.</exception>
      <exception cref="T:System.OutOfMemoryException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <returns>A reference to this instance after the insert operation has completed.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.String)">
      <summary>Inserts a string into this instance at the specified character position.</summary>
      <param name="index">The position in this instance where insertion begins.</param>
      <param name="value">The string to insert.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the current length of this instance.

 -or-

 The current length of this <see cref="T:System.Text.StringBuilder" /> object plus the length of <paramref name="value" /> exceeds <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <returns>A reference to this instance after the insert operation has completed.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.String,System.Int32)">
      <summary>Inserts one or more copies of a specified string into this instance at the specified character position.</summary>
      <param name="index">The position in this instance where insertion begins.</param>
      <param name="value">The string to insert.</param>
      <param name="count">The number of times to insert <paramref name="value" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the current length of this instance.

 -or-

 <paramref name="count" /> is less than zero.</exception>
      <exception cref="T:System.OutOfMemoryException">The current length of this <see cref="T:System.Text.StringBuilder" /> object plus the length of <paramref name="value" /> times <paramref name="count" /> exceeds <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <returns>A reference to this instance after insertion has completed.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.UInt16)">
      <summary>Inserts the string representation of a 16-bit unsigned integer into this instance at the specified character position.</summary>
      <param name="index">The position in this instance where insertion begins.</param>
      <param name="value">The value to insert.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the length of this instance.</exception>
      <exception cref="T:System.OutOfMemoryException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <returns>A reference to this instance after the insert operation has completed.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.UInt32)">
      <summary>Inserts the string representation of a 32-bit unsigned integer into this instance at the specified character position.</summary>
      <param name="index">The position in this instance where insertion begins.</param>
      <param name="value">The value to insert.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the length of this instance.</exception>
      <exception cref="T:System.OutOfMemoryException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <returns>A reference to this instance after the insert operation has completed.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.UInt64)">
      <summary>Inserts the string representation of a 64-bit unsigned integer into this instance at the specified character position.</summary>
      <param name="index">The position in this instance where insertion begins.</param>
      <param name="value">The value to insert.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the length of this instance.</exception>
      <exception cref="T:System.OutOfMemoryException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <returns>A reference to this instance after the insert operation has completed.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Remove(System.Int32,System.Int32)">
      <summary>Removes the specified range of characters from this instance.</summary>
      <param name="startIndex">The zero-based position in this instance where removal begins.</param>
      <param name="length">The number of characters to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="startIndex" /> or <paramref name="length" /> is less than zero, or <paramref name="startIndex" /> + <paramref name="length" /> is greater than the length of this instance.</exception>
      <returns>A reference to this instance after the excise operation has completed.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Replace(System.Char,System.Char)">
      <summary>Replaces all occurrences of a specified character in this instance with another specified character.</summary>
      <param name="oldChar">The character to replace.</param>
      <param name="newChar">The character that replaces <paramref name="oldChar" />.</param>
      <returns>A reference to this instance with <paramref name="oldChar" /> replaced by <paramref name="newChar" />.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Replace(System.Char,System.Char,System.Int32,System.Int32)">
      <summary>Replaces, within a substring of this instance, all occurrences of a specified character with another specified character.</summary>
      <param name="oldChar">The character to replace.</param>
      <param name="newChar">The character that replaces <paramref name="oldChar" />.</param>
      <param name="startIndex">The position in this instance where the substring begins.</param>
      <param name="count">The length of the substring.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> + <paramref name="count" /> is greater than the length of the value of this instance.

 -or-

 <paramref name="startIndex" /> or <paramref name="count" /> is less than zero.</exception>
      <returns>A reference to this instance with <paramref name="oldChar" /> replaced by <paramref name="newChar" /> in the range from <paramref name="startIndex" /> to <paramref name="startIndex" /> + <paramref name="count" /> -1.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Replace(System.String,System.String)">
      <summary>Replaces all occurrences of a specified string in this instance with another specified string.</summary>
      <param name="oldValue">The string to replace.</param>
      <param name="newValue">The string that replaces <paramref name="oldValue" />, or <see langword="null" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oldValue" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The length of <paramref name="oldValue" /> is zero.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <returns>A reference to this instance with all instances of <paramref name="oldValue" /> replaced by <paramref name="newValue" />.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Replace(System.String,System.String,System.Int32,System.Int32)">
      <summary>Replaces, within a substring of this instance, all occurrences of a specified string with another specified string.</summary>
      <param name="oldValue">The string to replace.</param>
      <param name="newValue">The string that replaces <paramref name="oldValue" />, or <see langword="null" />.</param>
      <param name="startIndex">The position in this instance where the substring begins.</param>
      <param name="count">The length of the substring.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oldValue" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The length of <paramref name="oldValue" /> is zero.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> or <paramref name="count" /> is less than zero.

 -or-

 <paramref name="startIndex" /> plus <paramref name="count" /> indicates a character position not within this instance.

 -or-

 Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <returns>A reference to this instance with all instances of <paramref name="oldValue" /> replaced by <paramref name="newValue" /> in the range from <paramref name="startIndex" /> to <paramref name="startIndex" /> + <paramref name="count" /> - 1.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the data necessary to deserialize the current <see cref="T:System.Text.StringBuilder" /> object.</summary>
      <param name="info">The object to populate with serialization information.</param>
      <param name="context">The place to store and retrieve serialized data. Reserved for future use.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.StringBuilder.ToString">
      <summary>Converts the value of this instance to a <see cref="T:System.String" />.</summary>
      <returns>A string whose value is the same as this instance.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.ToString(System.Int32,System.Int32)">
      <summary>Converts the value of a substring of this instance to a <see cref="T:System.String" />.</summary>
      <param name="startIndex">The starting position of the substring in this instance.</param>
      <param name="length">The length of the substring.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> or <paramref name="length" /> is less than zero.

 -or-

 The sum of <paramref name="startIndex" /> and <paramref name="length" /> is greater than the length of the current instance.</exception>
      <returns>A string whose value is the same as the specified substring of this instance.</returns>
    </member>
    <member name="P:System.Text.StringBuilder.Capacity">
      <summary>Gets or sets the maximum number of characters that can be contained in the memory allocated by the current instance.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">The value specified for a set operation is less than the current length of this instance.

 -or-

 The value specified for a set operation is greater than the maximum capacity.</exception>
      <returns>The maximum number of characters that can be contained in the memory allocated by the current instance. Its value can range from <see cref="P:System.Text.StringBuilder.Length" /> to <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</returns>
    </member>
    <member name="P:System.Text.StringBuilder.Chars(System.Int32)">
      <summary>Gets or sets the character at the specified character position in this instance.</summary>
      <param name="index">The position of the character.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is outside the bounds of this instance while setting a character.</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is outside the bounds of this instance while getting a character.</exception>
      <returns>The Unicode character at position <paramref name="index" />.</returns>
    </member>
    <member name="P:System.Text.StringBuilder.Length">
      <summary>Gets or sets the length of the current <see cref="T:System.Text.StringBuilder" /> object.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">The value specified for a set operation is less than zero or greater than <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <returns>The length of this instance.</returns>
    </member>
    <member name="P:System.Text.StringBuilder.MaxCapacity">
      <summary>Gets the maximum capacity of this instance.</summary>
      <returns>The maximum number of characters this instance can hold.</returns>
    </member>
    <member name="T:System.Text.UnicodeEncoding">
      <summary>Represents a UTF-16 encoding of Unicode characters.</summary>
    </member>
    <member name="F:System.Text.UnicodeEncoding.CharSize">
      <summary>Represents the Unicode character size in bytes. This field is a constant.</summary>
    </member>
    <member name="M:System.Text.UnicodeEncoding.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Text.UnicodeEncoding" /> class.</summary>
    </member>
    <member name="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.UnicodeEncoding" /> class. Parameters specify whether to use the big endian byte order and whether the <see cref="M:System.Text.UnicodeEncoding.GetPreamble" /> method returns a Unicode byte order mark.</summary>
      <param name="bigEndian">
        <see langword="true" /> to use the big endian byte order (most significant byte first), or <see langword="false" /> to use the little endian byte order (least significant byte first).</param>
      <param name="byteOrderMark">
        <see langword="true" /> to specify that the <see cref="M:System.Text.UnicodeEncoding.GetPreamble" /> method returns a Unicode byte order mark; otherwise, <see langword="false" />.</param>
    </member>
    <member name="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.UnicodeEncoding" /> class. Parameters specify whether to use the big endian byte order, whether to provide a Unicode byte order mark, and whether to throw an exception when an invalid encoding is detected.</summary>
      <param name="bigEndian">
        <see langword="true" /> to use the big endian byte order (most significant byte first); <see langword="false" /> to use the little endian byte order (least significant byte first).</param>
      <param name="byteOrderMark">
        <see langword="true" /> to specify that the <see cref="M:System.Text.UnicodeEncoding.GetPreamble" /> method returns a Unicode byte order mark; otherwise, <see langword="false" />.</param>
      <param name="throwOnInvalidBytes">
        <see langword="true" /> to specify that an exception should be thrown when an invalid encoding is detected; otherwise, <see langword="false" />.</param>
    </member>
    <member name="M:System.Text.UnicodeEncoding.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Text.UnicodeEncoding" /> object.</summary>
      <param name="value">The object to compare with the current object.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is an instance of <see cref="T:System.Text.UnicodeEncoding" /> and is equal to the current object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetByteCount(System.Char*,System.Int32)">
      <summary>Calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.</summary>
      <param name="chars">A pointer to the first character to encode.</param>
      <param name="count">The number of characters to encode.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than zero.  
  
 -or-  
  
 The resulting number of bytes is greater than the maximum number that can be returned as an integer.</exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled and <paramref name="chars" /> contains an invalid sequence of characters.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (for more information, see Character Encoding in .NET)
  
 -and-  
  
 <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <returns>The number of bytes produced by encoding the specified characters.</returns>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
      <summary>Calculates the number of bytes produced by encoding a set of characters from the specified character array.</summary>
      <param name="chars">The character array containing the set of characters to encode.</param>
      <param name="index">The index of the first character to encode.</param>
      <param name="count">The number of characters to encode.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero.  
  
 -or-  
  
 <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="chars" />.  
  
 -or-  
  
 The resulting number of bytes is greater than the maximum number that can be returned as an integer.</exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (for more information, see Character Encoding in .NET)
  
 -and-  
  
 <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <returns>The number of bytes produced by encoding the specified characters.</returns>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetByteCount(System.String)">
      <summary>Calculates the number of bytes produced by encoding the characters in the specified string.</summary>
      <param name="s">The string that contains the set of characters to encode.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled, and <paramref name="s" /> contains an invalid sequence of characters.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (for more information, see Character Encoding in .NET)
  
 -and-  
  
 <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <returns>The number of bytes produced by encoding the specified characters.</returns>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
      <summary>Encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.</summary>
      <param name="chars">A pointer to the first character to encode.</param>
      <param name="charCount">The number of characters to encode.</param>
      <param name="bytes">A pointer to the location at which to start writing the resulting sequence of bytes.</param>
      <param name="byteCount">The maximum number of bytes to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).  
  
 -or-  
  
 <paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charCount" /> or <paramref name="byteCount" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.  
  
 -or-  
  
 <paramref name="byteCount" /> is less than the resulting number of bytes.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (for more information, see Character Encoding in .NET)
  
 -and-  
  
 <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <returns>The actual number of bytes written at the location indicated by the <paramref name="bytes" /> parameter.</returns>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>Encodes a set of characters from the specified character array into the specified byte array.</summary>
      <param name="chars">The character array containing the set of characters to encode.</param>
      <param name="charIndex">The index of the first character to encode.</param>
      <param name="charCount">The number of characters to encode.</param>
      <param name="bytes">The byte array to contain the resulting sequence of bytes.</param>
      <param name="byteIndex">The index at which to start writing the resulting sequence of bytes.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).  
  
 -or-  
  
 <paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.  
  
 -or-  
  
 <paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.  
  
 -or-  
  
 <paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />.</exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.  
  
 -or-  
  
 <paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (for more information, see Character Encoding in .NET)
  
 -and-  
  
 <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <returns>The actual number of bytes written into <paramref name="bytes" />.</returns>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>Encodes a set of characters from the specified <see cref="T:System.String" /> into the specified byte array.</summary>
      <param name="s">The string containing the set of characters to encode.</param>
      <param name="charIndex">The index of the first character to encode.</param>
      <param name="charCount">The number of characters to encode.</param>
      <param name="bytes">The byte array to contain the resulting sequence of bytes.</param>
      <param name="byteIndex">The index at which to start writing the resulting sequence of bytes.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.  
  
 -or-  
  
 <paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.  
  
 -or-  
  
 <paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />.</exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled, and <paramref name="s" /> contains an invalid sequence of characters.  
  
 -or-  
  
 <paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (for more information, see Character Encoding in .NET)
  
 -and-  
  
 <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <returns>The actual number of bytes written into <paramref name="bytes" />.</returns>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte*,System.Int32)">
      <summary>Calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.</summary>
      <param name="bytes">A pointer to the first byte to decode.</param>
      <param name="count">The number of bytes to decode.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than zero.  
  
 -or-  
  
 The resulting number of bytes is greater than the maximum number that can be returned as an integer.</exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (for more information, see Character Encoding in .NET)
  
 -and-  
  
 <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
      <returns>The number of characters produced by decoding the specified sequence of bytes.</returns>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
      <summary>Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</summary>
      <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
      <param name="index">The index of the first byte to decode.</param>
      <param name="count">The number of bytes to decode.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero.  
  
 -or-  
  
 <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.  
  
 -or-  
  
 The resulting number of bytes is greater than the maximum number that can be returned as an integer.</exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (for more information, see Character Encoding in .NET)
  
 -and-  
  
 <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
      <returns>The number of characters produced by decoding the specified sequence of bytes.</returns>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
      <summary>Decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.</summary>
      <param name="bytes">A pointer to the first byte to decode.</param>
      <param name="byteCount">The number of bytes to decode.</param>
      <param name="chars">A pointer to the location at which to start writing the resulting set of characters.</param>
      <param name="charCount">The maximum number of characters to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).  
  
 -or-  
  
 <paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteCount" /> or <paramref name="charCount" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.  
  
 -or-  
  
 <paramref name="charCount" /> is less than the resulting number of characters.</exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (for more information, see Character Encoding in .NET)
  
 -and-  
  
 <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
      <returns>The actual number of characters written at the location indicated by the <paramref name="chars" /> parameter.</returns>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
      <summary>Decodes a sequence of bytes from the specified byte array into the specified character array.</summary>
      <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
      <param name="byteIndex">The index of the first byte to decode.</param>
      <param name="byteCount">The number of bytes to decode.</param>
      <param name="chars">The character array to contain the resulting set of characters.</param>
      <param name="charIndex">The index at which to start writing the resulting set of characters.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).  
  
 -or-  
  
 <paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteIndex" /> or <paramref name="byteCount" /> or <paramref name="charIndex" /> is less than zero.  
  
 -or-  
  
 <paramref name="byteindex" /> and <paramref name="byteCount" /> do not denote a valid range in <paramref name="bytes" />.  
  
 -or-  
  
 <paramref name="charIndex" /> is not a valid index in <paramref name="chars" />.</exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.  
  
 -or-  
  
 <paramref name="chars" /> does not have enough capacity from <paramref name="charIndex" /> to the end of the array to accommodate the resulting characters.</exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (for more information, see Character Encoding in .NET)
  
 -and-  
  
 <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
      <returns>The actual number of characters written into <paramref name="chars" />.</returns>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetDecoder">
      <summary>Obtains a decoder that converts a UTF-16 encoded sequence of bytes into a sequence of Unicode characters.</summary>
      <returns>A <see cref="T:System.Text.Decoder" /> that converts a UTF-16 encoded sequence of bytes into a sequence of Unicode characters.</returns>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetEncoder">
      <summary>Obtains an encoder that converts a sequence of Unicode characters into a UTF-16 encoded sequence of bytes.</summary>
      <returns>A <see cref="T:System.Text.Encoder" /> object that converts a sequence of Unicode characters into a UTF-16 encoded sequence of bytes.</returns>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>The hash code for the current <see cref="T:System.Text.UnicodeEncoding" /> object.</returns>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)">
      <summary>Calculates the maximum number of bytes produced by encoding the specified number of characters.</summary>
      <param name="charCount">The number of characters to encode.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charCount" /> is less than zero.  
  
 -or-  
  
 The resulting number of bytes is greater than the maximum number that can be returned as an integer.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (for more information, see Character Encoding in .NET)
  
 -and-  
  
 <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <returns>The maximum number of bytes produced by encoding the specified number of characters.</returns>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)">
      <summary>Calculates the maximum number of characters produced by decoding the specified number of bytes.</summary>
      <param name="byteCount">The number of bytes to decode.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteCount" /> is less than zero.  
  
 -or-  
  
 The resulting number of bytes is greater than the maximum number that can be returned as an integer.</exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (for more information, see Character Encoding in .NET)
  
 -and-  
  
 <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
      <returns>The maximum number of characters produced by decoding the specified number of bytes.</returns>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetPreamble">
      <summary>Returns a Unicode byte order mark encoded in UTF-16 format, if the constructor for this instance requests a byte order mark.</summary>
      <returns>A byte array containing the Unicode byte order mark, if the <see cref="T:System.Text.UnicodeEncoding" /> object is configured to supply one. Otherwise, this method returns a zero-length byte array.</returns>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)">
      <summary>Decodes a range of bytes from a byte array into a string.</summary>
      <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
      <param name="index">The index of the first byte to decode.</param>
      <param name="count">The number of bytes to decode.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero.  
  
 -or-  
  
 <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.</exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (for more information, see Character Encoding in .NET)
  
 -and-  
  
 <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
      <returns>A <see cref="T:System.String" /> object containing the results of decoding the specified sequence of bytes.</returns>
    </member>
    <member name="P:System.Text.UnicodeEncoding.Preamble">
      <summary>Gets a Unicode byte order mark encoded in UTF-16 format, if this object is configured to supply one.</summary>
      <returns>A byte span containing the Unicode byte order mark, if this object is configured to supply one; otherwise, the default span.</returns>
    </member>
    <member name="T:System.Text.UTF8Encoding">
      <summary>Represents a UTF-8 encoding of Unicode characters.</summary>
    </member>
    <member name="M:System.Text.UTF8Encoding.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Text.UTF8Encoding" /> class.</summary>
    </member>
    <member name="M:System.Text.UTF8Encoding.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.UTF8Encoding" /> class. A parameter specifies whether to provide a Unicode byte order mark.</summary>
      <param name="encoderShouldEmitUTF8Identifier">
        <see langword="true" /> to specify that the <see cref="M:System.Text.UTF8Encoding.GetPreamble" /> method returns a Unicode byte order mark; otherwise, <see langword="false" />.</param>
    </member>
    <member name="M:System.Text.UTF8Encoding.#ctor(System.Boolean,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.UTF8Encoding" /> class. Parameters specify whether to provide a Unicode byte order mark and whether to throw an exception when an invalid encoding is detected.</summary>
      <param name="encoderShouldEmitUTF8Identifier">
        <see langword="true" /> to specify that the <see cref="M:System.Text.UTF8Encoding.GetPreamble" /> method should return a Unicode byte order mark; otherwise, <see langword="false" />.</param>
      <param name="throwOnInvalidBytes">
        <see langword="true" /> to throw an exception when an invalid encoding is detected; otherwise, <see langword="false" />.</param>
    </member>
    <member name="M:System.Text.UTF8Encoding.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current <see cref="T:System.Text.UTF8Encoding" /> object.</summary>
      <param name="value">The object to compare with the current instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is an instance of <see cref="T:System.Text.UTF8Encoding" /> and is equal to the current object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetByteCount(System.Char*,System.Int32)">
      <summary>Calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.</summary>
      <param name="chars">A pointer to the first character to encode.</param>
      <param name="count">The number of characters to encode.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than zero.  
  
 -or-  
  
 The resulting number of bytes is greater than the maximum number that can be returned as an integer.</exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Character Encoding in .NET for a complete explanation).
  
 -and-  
  
 <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <returns>The number of bytes produced by encoding the specified characters.</returns>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
      <summary>Calculates the number of bytes produced by encoding a set of characters from the specified character array.</summary>
      <param name="chars">The character array containing the set of characters to encode.</param>
      <param name="index">The index of the first character to encode.</param>
      <param name="count">The number of characters to encode.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero.  
  
 -or-  
  
 <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="chars" />.  
  
 -or-  
  
 The resulting number of bytes is greater than the maximum number that can be returned as an integer.</exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (for more information, see Character Encoding in .NET)
  
 -and-  
  
 The <see cref="P:System.Text.Encoding.EncoderFallback" /> property is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <returns>The number of bytes produced by encoding the specified characters.</returns>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetByteCount(System.ReadOnlySpan{System.Char})">
      <summary>Calculates the number of bytes produced by encoding the specified character span.</summary>
      <param name="chars">The span that contains the set of characters to encode.</param>
      <exception cref="T:System.ArgumentException">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Character Encoding in .NET for complete explanation).
  
 -and-  
  
 <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <returns>The number of bytes produced by encoding the specified character span.</returns>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetByteCount(System.String)">
      <summary>Calculates the number of bytes produced by encoding the characters in the specified <see cref="T:System.String" />.</summary>
      <param name="chars">The <see cref="T:System.String" /> containing the set of characters to encode.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (for more information, see Character Encoding in .NET)
  
 -and-  
  
 <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <returns>The number of bytes produced by encoding the specified characters.</returns>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
      <summary>Encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.</summary>
      <param name="chars">A pointer to the first character to encode.</param>
      <param name="charCount">The number of characters to encode.</param>
      <param name="bytes">A pointer to the location at which to start writing the resulting sequence of bytes.</param>
      <param name="byteCount">The maximum number of bytes to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="bytes" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charCount" /> or <paramref name="byteCount" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.  
  
 -or-  
  
 <paramref name="byteCount" /> is less than the resulting number of bytes.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (for more information, see Character Encoding in .NET)
  
 -and-  
  
 <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <returns>The actual number of bytes written at the location indicated by <paramref name="bytes" />.</returns>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>Encodes a set of characters from the specified character array into the specified byte array.</summary>
      <param name="chars">The character array containing the set of characters to encode.</param>
      <param name="charIndex">The index of the first character to encode.</param>
      <param name="charCount">The number of characters to encode.</param>
      <param name="bytes">The byte array to contain the resulting sequence of bytes.</param>
      <param name="byteIndex">The index at which to start writing the resulting sequence of bytes.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="bytes" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.  
  
 -or-  
  
 <paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.  
  
 -or-  
  
 <paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />.</exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.  
  
 -or-  
  
 <paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (for more information, see Character Encoding in .NET)
  
 -and-  
  
 <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <returns>The actual number of bytes written into <paramref name="bytes" />.</returns>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetBytes(System.ReadOnlySpan{System.Char},System.Span{System.Byte})">
      <summary>Encodes the specified character span into the specified byte span.</summary>
      <param name="chars">The character span to encode.</param>
      <param name="bytes">The span to contain the resulting set of bytes.</param>
      <returns>The actual number of bytes written into <paramref name="bytes" />.</returns>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>Encodes a set of characters from the specified <see cref="T:System.String" /> into the specified byte array.</summary>
      <param name="s">The <see cref="T:System.String" /> containing the set of characters to encode.</param>
      <param name="charIndex">The index of the first character to encode.</param>
      <param name="charCount">The number of characters to encode.</param>
      <param name="bytes">The byte array to contain the resulting sequence of bytes.</param>
      <param name="byteIndex">The index at which to start writing the resulting sequence of bytes.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="bytes" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.  
  
 -or-  
  
 <paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.  
  
 -or-  
  
 <paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />.</exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled, and <paramref name="s" /> contains an invalid sequence of characters.  
  
 -or-  
  
 <paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (for more information, see Character Encoding in .NET)
  
 -and-  
  
 <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <returns>The actual number of bytes written into <paramref name="bytes" />.</returns>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetCharCount(System.Byte*,System.Int32)">
      <summary>Calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.</summary>
      <param name="bytes">A pointer to the first byte to decode.</param>
      <param name="count">The number of bytes to decode.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than zero.  
  
 -or-  
  
 The resulting number of bytes is greater than the maximum number that can be returned as an integer.</exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (for more information, see Character Encoding in .NET)
  
 -and-  
  
 <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
      <returns>The number of characters produced by decoding the specified sequence of bytes.</returns>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
      <summary>Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</summary>
      <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
      <param name="index">The index of the first byte to decode.</param>
      <param name="count">The number of bytes to decode.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero.  
  
 -or-  
  
 <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.  
  
 -or-  
  
 The resulting number of bytes is greater than the maximum number that can be returned as an integer.</exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (for more information, see Character Encoding in .NET)
  
 -and-  
  
 <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
      <returns>The number of characters produced by decoding the specified sequence of bytes.</returns>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetCharCount(System.ReadOnlySpan{System.Byte})">
      <summary>Calculates the number of characters produced by decoding the specified byte span.</summary>
      <param name="bytes">The span containing the set of bytes to decode.</param>
      <returns>The number of characters produced by decoding the specified byte span.</returns>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
      <summary>Decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.</summary>
      <param name="bytes">A pointer to the first byte to decode.</param>
      <param name="byteCount">The number of bytes to decode.</param>
      <param name="chars">A pointer to the location at which to start writing the resulting set of characters.</param>
      <param name="charCount">The maximum number of characters to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="chars" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteCount" /> or <paramref name="charCount" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.  
  
 -or-  
  
 <paramref name="charCount" /> is less than the resulting number of characters.</exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (for more information, see Character Encoding in .NET)
  
 -and-  
  
 <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
      <returns>The actual number of characters written at the location indicated by <paramref name="chars" />.</returns>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
      <summary>Decodes a sequence of bytes from the specified byte array into the specified character array.</summary>
      <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
      <param name="byteIndex">The index of the first byte to decode.</param>
      <param name="byteCount">The number of bytes to decode.</param>
      <param name="chars">The character array to contain the resulting set of characters.</param>
      <param name="charIndex">The index at which to start writing the resulting set of characters.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="chars" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteIndex" /> or <paramref name="byteCount" /> or <paramref name="charIndex" /> is less than zero.  
  
 -or-  
  
 <paramref name="byteindex" /> and <paramref name="byteCount" /> do not denote a valid range in <paramref name="bytes" />.  
  
 -or-  
  
 <paramref name="charIndex" /> is not a valid index in <paramref name="chars" />.</exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.  
  
 -or-  
  
 <paramref name="chars" /> does not have enough capacity from <paramref name="charIndex" /> to the end of the array to accommodate the resulting characters.</exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (for more information, see Character Encoding in .NET)
  
 -and-  
  
 <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
      <returns>The actual number of characters written into <paramref name="chars" />.</returns>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetChars(System.ReadOnlySpan{System.Byte},System.Span{System.Char})">
      <summary>Decodes the specified byte span into the specified character span.</summary>
      <param name="bytes">The span containing the bytes to decode.</param>
      <param name="chars">The span to contain the resulting set of characters.</param>
      <returns>The actual number of characters written into <paramref name="chars" />.</returns>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetDecoder">
      <summary>Obtains a decoder that converts a UTF-8 encoded sequence of bytes into a sequence of Unicode characters.</summary>
      <returns>A decoder that converts a UTF-8 encoded sequence of bytes into a sequence of Unicode characters.</returns>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetEncoder">
      <summary>Obtains an encoder that converts a sequence of Unicode characters into a UTF-8 encoded sequence of bytes.</summary>
      <returns>A <see cref="T:System.Text.Encoder" /> that converts a sequence of Unicode characters into a UTF-8 encoded sequence of bytes.</returns>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>The hash code for the current instance.</returns>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)">
      <summary>Calculates the maximum number of bytes produced by encoding the specified number of characters.</summary>
      <param name="charCount">The number of characters to encode.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charCount" /> is less than zero.  
  
 -or-  
  
 The resulting number of bytes is greater than the maximum number that can be returned as an integer.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (for more information, see Character Encoding in .NET)
  
 -and-  
  
 <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <returns>The maximum number of bytes produced by encoding the specified number of characters.</returns>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)">
      <summary>Calculates the maximum number of characters produced by decoding the specified number of bytes.</summary>
      <param name="byteCount">The number of bytes to decode.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteCount" /> is less than zero.  
  
 -or-  
  
 The resulting number of bytes is greater than the maximum number that can be returned as an integer.</exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (for more information, see Character Encoding in .NET)
  
 -and-  
  
 <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
      <returns>The maximum number of characters produced by decoding the specified number of bytes.</returns>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetPreamble">
      <summary>Returns a Unicode byte order mark encoded in UTF-8 format, if the <see cref="T:System.Text.UTF8Encoding" /> encoding object is configured to supply one.</summary>
      <returns>A byte array containing the Unicode byte order mark, if the <see cref="T:System.Text.UTF8Encoding" /> encoding object is configured to supply one. Otherwise, this method returns a zero-length byte array.</returns>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetString(System.Byte[],System.Int32,System.Int32)">
      <summary>Decodes a range of bytes from a byte array into a string.</summary>
      <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
      <param name="index">The index of the first byte to decode.</param>
      <param name="count">The number of bytes to decode.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero.  
  
 -or-  
  
 <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.</exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (for more information, see Character Encoding in .NET)
  
 -and-  
  
 <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
      <returns>A <see cref="T:System.String" /> containing the results of decoding the specified sequence of bytes.</returns>
    </member>
    <member name="P:System.Text.UTF8Encoding.Preamble">
      <summary>Gets a Unicode byte order mark encoded in UTF-8 format, if this object is configured to supply one.</summary>
      <returns>A byte span containing the Unicode byte order mark, if this object is configured to supply one; otherwise, the default span.</returns>
    </member>
    <member name="T:System.Threading.AbandonedMutexException">
      <summary>The exception that is thrown when one thread acquires a <see cref="T:System.Threading.Mutex" /> object that another thread has abandoned by exiting without releasing it.</summary>
    </member>
    <member name="M:System.Threading.AbandonedMutexException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.AbandonedMutexException" /> class with default values.</summary>
    </member>
    <member name="M:System.Threading.AbandonedMutexException.#ctor(System.Int32,System.Threading.WaitHandle)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.AbandonedMutexException" /> class with a specified index for the abandoned mutex, if applicable, and a <see cref="T:System.Threading.Mutex" /> object that represents the mutex.</summary>
      <param name="location">The index of the abandoned mutex in the array of wait handles if the exception is thrown for the <see cref="Overload:System.Threading.WaitHandle.WaitAny" /> method, or -1 if the exception is thrown for the <see cref="Overload:System.Threading.WaitHandle.WaitOne" /> or <see cref="Overload:System.Threading.WaitHandle.WaitAll" /> methods.</param>
      <param name="handle">A <see cref="T:System.Threading.Mutex" /> object that represents the abandoned mutex.</param>
    </member>
    <member name="M:System.Threading.AbandonedMutexException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.AbandonedMutexException" /> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Threading.AbandonedMutexException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.AbandonedMutexException" /> class with a specified error message.</summary>
      <param name="message">An error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.Threading.AbandonedMutexException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.AbandonedMutexException" /> class with a specified error message and inner exception.</summary>
      <param name="message">An error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.Threading.AbandonedMutexException.#ctor(System.String,System.Exception,System.Int32,System.Threading.WaitHandle)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.AbandonedMutexException" /> class with a specified error message, the inner exception, the index for the abandoned mutex, if applicable, and a <see cref="T:System.Threading.Mutex" /> object that represents the mutex.</summary>
      <param name="message">An error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
      <param name="location">The index of the abandoned mutex in the array of wait handles if the exception is thrown for the <see cref="Overload:System.Threading.WaitHandle.WaitAny" /> method, or -1 if the exception is thrown for the <see cref="Overload:System.Threading.WaitHandle.WaitOne" /> or <see cref="Overload:System.Threading.WaitHandle.WaitAll" /> methods.</param>
      <param name="handle">A <see cref="T:System.Threading.Mutex" /> object that represents the abandoned mutex.</param>
    </member>
    <member name="M:System.Threading.AbandonedMutexException.#ctor(System.String,System.Int32,System.Threading.WaitHandle)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.AbandonedMutexException" /> class with a specified error message, the index of the abandoned mutex, if applicable, and the abandoned mutex.</summary>
      <param name="message">An error message that explains the reason for the exception.</param>
      <param name="location">The index of the abandoned mutex in the array of wait handles if the exception is thrown for the <see cref="Overload:System.Threading.WaitHandle.WaitAny" /> method, or -1 if the exception is thrown for the <see cref="Overload:System.Threading.WaitHandle.WaitOne" /> or <see cref="Overload:System.Threading.WaitHandle.WaitAll" /> methods.</param>
      <param name="handle">A <see cref="T:System.Threading.Mutex" /> object that represents the abandoned mutex.</param>
    </member>
    <member name="P:System.Threading.AbandonedMutexException.Mutex">
      <summary>Gets the abandoned mutex that caused the exception, if known.</summary>
      <returns>A <see cref="T:System.Threading.Mutex" /> object that represents the abandoned mutex, or <see langword="null" /> if the abandoned mutex could not be identified.</returns>
    </member>
    <member name="P:System.Threading.AbandonedMutexException.MutexIndex">
      <summary>Gets the index of the abandoned mutex that caused the exception, if known.</summary>
      <returns>The index, in the array of wait handles passed to the <see cref="Overload:System.Threading.WaitHandle.WaitAny" /> method, of the <see cref="T:System.Threading.Mutex" /> object that represents the abandoned mutex, or -1 if the index of the abandoned mutex could not be determined.</returns>
    </member>
    <member name="T:System.Threading.AutoResetEvent">
      <summary>Represents a thread synchronization event that, when signaled, resets automatically after releasing a single waiting thread. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.AutoResetEvent" /> class with a Boolean value indicating whether to set the initial state to signaled.</summary>
      <param name="initialState">
        <see langword="true" /> to set the initial state to signaled; <see langword="false" /> to set the initial state to non-signaled.</param>
    </member>
    <member name="T:System.Threading.CountdownEvent">
      <summary>Represents a synchronization primitive that is signaled when its count reaches zero.</summary>
    </member>
    <member name="M:System.Threading.CountdownEvent.#ctor(System.Int32)">
      <summary>Initializes a new instance of <see cref="T:System.Threading.CountdownEvent" /> class with the specified count.</summary>
      <param name="initialCount">The number of signals initially required to set the <see cref="T:System.Threading.CountdownEvent" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="initialCount" /> is less than 0.</exception>
    </member>
    <member name="M:System.Threading.CountdownEvent.AddCount">
      <summary>Increments the <see cref="T:System.Threading.CountdownEvent" />'s current count by one.</summary>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The current instance is already set.  
  
 -or-  
  
 <see cref="P:System.Threading.CountdownEvent.CurrentCount" /> is equal to or greater than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Threading.CountdownEvent.AddCount(System.Int32)">
      <summary>Increments the <see cref="T:System.Threading.CountdownEvent" />'s current count by a specified value.</summary>
      <param name="signalCount">The value by which to increase <see cref="P:System.Threading.CountdownEvent.CurrentCount" />.</param>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signalCount" /> is less than or equal to 0.</exception>
      <exception cref="T:System.InvalidOperationException">The current instance is already set.  
  
 -or-  
  
 <see cref="P:System.Threading.CountdownEvent.CurrentCount" /> is equal to or greater than <see cref="F:System.Int32.MaxValue" /> after count is incremented by <paramref name="signalCount" />.</exception>
    </member>
    <member name="M:System.Threading.CountdownEvent.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.Threading.CountdownEvent" /> class.</summary>
    </member>
    <member name="M:System.Threading.CountdownEvent.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Threading.CountdownEvent" />, and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Threading.CountdownEvent.Reset">
      <summary>Resets the <see cref="P:System.Threading.CountdownEvent.CurrentCount" /> to the value of <see cref="P:System.Threading.CountdownEvent.InitialCount" />.</summary>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
    </member>
    <member name="M:System.Threading.CountdownEvent.Reset(System.Int32)">
      <summary>Resets the <see cref="P:System.Threading.CountdownEvent.InitialCount" /> property to a specified value.</summary>
      <param name="count">The number of signals required to set the <see cref="T:System.Threading.CountdownEvent" />.</param>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than 0.</exception>
    </member>
    <member name="M:System.Threading.CountdownEvent.Signal">
      <summary>Registers a signal with the <see cref="T:System.Threading.CountdownEvent" />, decrementing the value of <see cref="P:System.Threading.CountdownEvent.CurrentCount" />.</summary>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The current instance is already set.</exception>
      <returns>
        <see langword="true" /> if the signal caused the count to reach zero and the event was set; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.CountdownEvent.Signal(System.Int32)">
      <summary>Registers multiple signals with the <see cref="T:System.Threading.CountdownEvent" />, decrementing the value of <see cref="P:System.Threading.CountdownEvent.CurrentCount" /> by the specified amount.</summary>
      <param name="signalCount">The number of signals to register.</param>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signalCount" /> is less than 1.</exception>
      <exception cref="T:System.InvalidOperationException">The current instance is already set. -or- Or <paramref name="signalCount" /> is greater than <see cref="P:System.Threading.CountdownEvent.CurrentCount" />.</exception>
      <returns>
        <see langword="true" /> if the signals caused the count to reach zero and the event was set; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.CountdownEvent.TryAddCount">
      <summary>Attempts to increment <see cref="P:System.Threading.CountdownEvent.CurrentCount" /> by one.</summary>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Threading.CountdownEvent.CurrentCount" /> is equal to <see cref="F:System.Int32.MaxValue" />.</exception>
      <returns>
        <see langword="true" /> if the increment succeeded; otherwise, false. If <see cref="P:System.Threading.CountdownEvent.CurrentCount" /> is already at zero, this method will return <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.CountdownEvent.TryAddCount(System.Int32)">
      <summary>Attempts to increment <see cref="P:System.Threading.CountdownEvent.CurrentCount" /> by a specified value.</summary>
      <param name="signalCount">The value by which to increase <see cref="P:System.Threading.CountdownEvent.CurrentCount" />.</param>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signalCount" /> is less than or equal to 0.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Threading.CountdownEvent.CurrentCount" /> + <paramref name="signalCount" /> is equal to or greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <returns>
        <see langword="true" /> if the increment succeeded; otherwise, false. If <see cref="P:System.Threading.CountdownEvent.CurrentCount" /> is already at zero this will return <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.CountdownEvent.Wait">
      <summary>Blocks the current thread until the <see cref="T:System.Threading.CountdownEvent" /> is set.</summary>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
    </member>
    <member name="M:System.Threading.CountdownEvent.Wait(System.Int32)">
      <summary>Blocks the current thread until the <see cref="T:System.Threading.CountdownEvent" /> is set, using a 32-bit signed integer to measure the timeout.</summary>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" />(-1) to wait indefinitely.</param>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</exception>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Threading.CountdownEvent" /> was set; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.CountdownEvent.Wait(System.Int32,System.Threading.CancellationToken)">
      <summary>Blocks the current thread until the <see cref="T:System.Threading.CountdownEvent" /> is set, using a 32-bit signed integer to measure the timeout, while observing a <see cref="T:System.Threading.CancellationToken" />.</summary>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" />(-1) to wait indefinitely.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to observe.</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="cancellationToken" /> has been canceled.</exception>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed. -or- The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</exception>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Threading.CountdownEvent" /> was set; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.CountdownEvent.Wait(System.Threading.CancellationToken)">
      <summary>Blocks the current thread until the <see cref="T:System.Threading.CountdownEvent" /> is set, while observing a <see cref="T:System.Threading.CancellationToken" />.</summary>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to observe.</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="cancellationToken" /> has been canceled.</exception>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed. -or- The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</exception>
    </member>
    <member name="M:System.Threading.CountdownEvent.Wait(System.TimeSpan)">
      <summary>Blocks the current thread until the <see cref="T:System.Threading.CountdownEvent" /> is set, using a <see cref="T:System.TimeSpan" /> to measure the timeout.</summary>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</param>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Threading.CountdownEvent" /> was set; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.CountdownEvent.Wait(System.TimeSpan,System.Threading.CancellationToken)">
      <summary>Blocks the current thread until the <see cref="T:System.Threading.CountdownEvent" /> is set, using a <see cref="T:System.TimeSpan" /> to measure the timeout, while observing a <see cref="T:System.Threading.CancellationToken" />.</summary>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to observe.</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="cancellationToken" /> has been canceled.</exception>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed. -or- The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Threading.CountdownEvent" /> was set; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Threading.CountdownEvent.CurrentCount">
      <summary>Gets the number of remaining signals required to set the event.</summary>
      <returns>The number of remaining signals required to set the event.</returns>
    </member>
    <member name="P:System.Threading.CountdownEvent.InitialCount">
      <summary>Gets the numbers of signals initially required to set the event.</summary>
      <returns>The number of signals initially required to set the event.</returns>
    </member>
    <member name="P:System.Threading.CountdownEvent.IsSet">
      <summary>Indicates whether the <see cref="T:System.Threading.CountdownEvent" /> object's current count has reached zero.</summary>
      <returns>
        <see langword="true" /> if the current count is zero; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Threading.CountdownEvent.WaitHandle">
      <summary>Gets a <see cref="T:System.Threading.WaitHandle" /> that is used to wait for the event to be set.</summary>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
      <returns>A <see cref="T:System.Threading.WaitHandle" /> that is used to wait for the event to be set.</returns>
    </member>
    <member name="T:System.Threading.EventResetMode">
      <summary>Indicates whether an <see cref="T:System.Threading.EventWaitHandle" /> is reset automatically or manually after receiving a signal.</summary>
    </member>
    <member name="F:System.Threading.EventResetMode.AutoReset">
      <summary>When signaled, the <see cref="T:System.Threading.EventWaitHandle" /> resets automatically after releasing a single thread. If no threads are waiting, the <see cref="T:System.Threading.EventWaitHandle" /> remains signaled until a thread blocks, and resets after releasing the thread.</summary>
    </member>
    <member name="F:System.Threading.EventResetMode.ManualReset">
      <summary>When signaled, the <see cref="T:System.Threading.EventWaitHandle" /> releases all waiting threads and remains signaled until it is manually reset.</summary>
    </member>
    <member name="T:System.Threading.EventWaitHandle">
      <summary>Represents a thread synchronization event.</summary>
    </member>
    <member name="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.EventWaitHandle" /> class, specifying whether the wait handle is initially signaled, and whether it resets automatically or manually.</summary>
      <param name="initialState">
        <see langword="true" /> to set the initial state to signaled; <see langword="false" /> to set it to nonsignaled.</param>
      <param name="mode">One of the <see cref="T:System.Threading.EventResetMode" /> values that determines whether the event resets automatically or manually.</param>
    </member>
    <member name="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.EventWaitHandle" /> class, specifying whether the wait handle is initially signaled if created as a result of this call, whether it resets automatically or manually, and the name of a system synchronization event.</summary>
      <param name="initialState">
        <see langword="true" /> to set the initial state to signaled if the named event is created as a result of this call; <see langword="false" /> to set it to nonsignaled.</param>
      <param name="mode">One of the <see cref="T:System.Threading.EventResetMode" /> values that determines whether the event resets automatically or manually.</param>
      <param name="name">The name of a system-wide synchronization event.</param>
      <exception cref="T:System.IO.IOException">A Win32 error occurred.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The named event exists and has access control security, but the user does not have <see cref="F:System.Security.AccessControl.EventWaitHandleRights.FullControl" />.</exception>
      <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">The named event cannot be created, perhaps because a wait handle of a different type has the same name.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is longer than 260 characters.</exception>
    </member>
    <member name="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.EventWaitHandle" /> class, specifying whether the wait handle is initially signaled if created as a result of this call, whether it resets automatically or manually, the name of a system synchronization event, and a Boolean variable whose value after the call indicates whether the named system event was created.</summary>
      <param name="initialState">
        <see langword="true" /> to set the initial state to signaled if the named event is created as a result of this call; <see langword="false" /> to set it to nonsignaled.</param>
      <param name="mode">One of the <see cref="T:System.Threading.EventResetMode" /> values that determines whether the event resets automatically or manually.</param>
      <param name="name">The name of a system-wide synchronization event.</param>
      <param name="createdNew">When this method returns, contains <see langword="true" /> if a local event was created (that is, if <paramref name="name" /> is <see langword="null" /> or an empty string) or if the specified named system event was created; <see langword="false" /> if the specified named system event already existed. This parameter is passed uninitialized.</param>
      <exception cref="T:System.IO.IOException">A Win32 error occurred.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The named event exists and has access control security, but the user does not have <see cref="F:System.Security.AccessControl.EventWaitHandleRights.FullControl" />.</exception>
      <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">The named event cannot be created, perhaps because a wait handle of a different type has the same name.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is longer than 260 characters.</exception>
    </member>
    <member name="M:System.Threading.EventWaitHandle.OpenExisting(System.String)">
      <summary>Opens the specified named synchronization event, if it already exists.</summary>
      <param name="name">The name of the system synchronization event to open.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is an empty string.  
  
 -or-  
  
 <paramref name="name" /> is longer than 260 characters.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">The named system event does not exist.</exception>
      <exception cref="T:System.IO.IOException">A Win32 error occurred.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The named event exists, but the user does not have the security access required to use it.</exception>
      <returns>An  object that represents the named system event.</returns>
    </member>
    <member name="M:System.Threading.EventWaitHandle.Reset">
      <summary>Sets the state of the event to nonsignaled, causing threads to block.</summary>
      <exception cref="T:System.ObjectDisposedException">The <see cref="M:System.Threading.WaitHandle.Close" /> method was previously called on this <see cref="T:System.Threading.EventWaitHandle" />.</exception>
      <returns>
        <see langword="true" /> if the operation succeeds; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.EventWaitHandle.Set">
      <summary>Sets the state of the event to signaled, allowing one or more waiting threads to proceed.</summary>
      <exception cref="T:System.ObjectDisposedException">The <see cref="M:System.Threading.WaitHandle.Close" /> method was previously called on this <see cref="T:System.Threading.EventWaitHandle" />.</exception>
      <returns>
        <see langword="true" /> if the operation succeeds; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Threading.EventWaitHandle@)">
      <summary>Opens the specified named synchronization event, if it already exists, and returns a value that indicates whether the operation succeeded.</summary>
      <param name="name">The name of the system synchronization event to open.</param>
      <param name="result">When this method returns, contains a <see cref="T:System.Threading.EventWaitHandle" /> object that represents the named synchronization event if the call succeeded, or <see langword="null" /> if the call failed. This parameter is treated as uninitialized.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is an empty string.  
  
 -or-  
  
 <paramref name="name" /> is longer than 260 characters.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
      <exception cref="T:System.IO.IOException">A Win32 error occurred.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The named event exists, but the user does not have the desired security access.</exception>
      <returns>
        <see langword="true" /> if the named synchronization event was opened successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Threading.Interlocked">
      <summary>Provides atomic operations for variables that are shared by multiple threads.</summary>
    </member>
    <member name="M:System.Threading.Interlocked.Add(System.Int32@,System.Int32)">
      <summary>Adds two 32-bit integers and replaces the first integer with the sum, as an atomic operation.</summary>
      <param name="location1">A variable containing the first value to be added. The sum of the two values is stored in <paramref name="location1" />.</param>
      <param name="value">The value to be added to the integer at <paramref name="location1" />.</param>
      <exception cref="T:System.NullReferenceException">The address of <paramref name="location1" /> is a null pointer.</exception>
      <returns>The new value stored at <paramref name="location1" />.</returns>
    </member>
    <member name="M:System.Threading.Interlocked.Add(System.Int64@,System.Int64)">
      <summary>Adds two 64-bit integers and replaces the first integer with the sum, as an atomic operation.</summary>
      <param name="location1">A variable containing the first value to be added. The sum of the two values is stored in <paramref name="location1" />.</param>
      <param name="value">The value to be added to the integer at <paramref name="location1" />.</param>
      <exception cref="T:System.NullReferenceException">The address of <paramref name="location1" /> is a null pointer.</exception>
      <returns>The new value stored at <paramref name="location1" />.</returns>
    </member>
    <member name="M:System.Threading.Interlocked.Add(System.UInt32@,System.UInt32)">
      <summary>Adds two 32-bit unsigned integers and replaces the first integer with the sum, as an atomic operation.</summary>
      <param name="location1">A variable containing the first value to be added. The sum of the two values is stored in <paramref name="location1" />.</param>
      <param name="value">The value to be added to the integer at <paramref name="location1" />.</param>
      <exception cref="T:System.NullReferenceException">The address of <paramref name="location1" /> is a <see langword="null" /> pointer.</exception>
      <returns>The new value stored at <paramref name="location1" />.</returns>
    </member>
    <member name="M:System.Threading.Interlocked.Add(System.UInt64@,System.UInt64)">
      <summary>Adds two 64-bit unsigned integers and replaces the first integer with the sum, as an atomic operation.</summary>
      <param name="location1">A variable containing the first value to be added. The sum of the two values is stored in <paramref name="location1" />.</param>
      <param name="value">The value to be added to the integer at <paramref name="location1" />.</param>
      <exception cref="T:System.NullReferenceException">The address of <paramref name="location1" /> is a <see langword="null" /> pointer.</exception>
      <returns>The new value stored at <paramref name="location1" />.</returns>
    </member>
    <member name="M:System.Threading.Interlocked.And(System.Int32@,System.Int32)">
      <summary>Bitwise "ands" two 32-bit signed integers and replaces the first integer with the result, as an atomic operation.</summary>
      <param name="location1">A variable containing the first value to be combined. The result is stored in <paramref name="location1" />.</param>
      <param name="value">The value to be combined with the integer at <paramref name="location1" />.</param>
      <exception cref="T:System.NullReferenceException">The address of <paramref name="location1" /> is a <see langword="null" /> pointer.</exception>
      <returns>The original value in <paramref name="location1" />.</returns>
    </member>
    <member name="M:System.Threading.Interlocked.And(System.Int64@,System.Int64)">
      <summary>Bitwise "ands" two 64-bit signed integers and replaces the first integer with the result, as an atomic operation.</summary>
      <param name="location1">A variable containing the first value to be combined. The result is stored in <paramref name="location1" />.</param>
      <param name="value">The value to be combined with the integer at <paramref name="location1" />.</param>
      <exception cref="T:System.NullReferenceException">The address of <paramref name="location1" /> is a <see langword="null" /> pointer.</exception>
      <returns>The original value in <paramref name="location1" />.</returns>
    </member>
    <member name="M:System.Threading.Interlocked.And(System.UInt32@,System.UInt32)">
      <summary>Bitwise "ands" two 32-bit unsigned integers and replaces the first integer with the result, as an atomic operation.</summary>
      <param name="location1">A variable containing the first value to be combined. The result is stored in <paramref name="location1" />.</param>
      <param name="value">The value to be combined with the integer at <paramref name="location1" />.</param>
      <exception cref="T:System.NullReferenceException">The address of <paramref name="location1" /> is a <see langword="null" /> pointer.</exception>
      <returns>The original value in <paramref name="location1" />.</returns>
    </member>
    <member name="M:System.Threading.Interlocked.And(System.UInt64@,System.UInt64)">
      <summary>Bitwise "ands" two 64-bit unsigned integers and replaces the first integer with the result, as an atomic operation.</summary>
      <param name="location1">A variable containing the first value to be combined. The result is stored in <paramref name="location1" />.</param>
      <param name="value">The value to be combined with the integer at <paramref name="location1" />.</param>
      <exception cref="T:System.NullReferenceException">The address of <paramref name="location1" /> is a <see langword="null" /> pointer.</exception>
      <returns>The original value in <paramref name="location1" />.</returns>
    </member>
    <member name="M:System.Threading.Interlocked.CompareExchange(System.Double@,System.Double,System.Double)">
      <summary>Compares two double-precision floating point numbers for equality and, if they are equal, replaces the first value.</summary>
      <param name="location1">The destination, whose value is compared with <paramref name="comparand" /> and possibly replaced.</param>
      <param name="value">The value that replaces the destination value if the comparison results in equality.</param>
      <param name="comparand">The value that is compared to the value at <paramref name="location1" />.</param>
      <exception cref="T:System.NullReferenceException">The address of <paramref name="location1" /> is a null pointer.</exception>
      <returns>The original value in <paramref name="location1" />.</returns>
    </member>
    <member name="M:System.Threading.Interlocked.CompareExchange(System.Int32@,System.Int32,System.Int32)">
      <summary>Compares two 32-bit signed integers for equality and, if they are equal, replaces the first value.</summary>
      <param name="location1">The destination, whose value is compared with <paramref name="comparand" /> and possibly replaced.</param>
      <param name="value">The value that replaces the destination value if the comparison results in equality.</param>
      <param name="comparand">The value that is compared to the value at <paramref name="location1" />.</param>
      <exception cref="T:System.NullReferenceException">The address of <paramref name="location1" /> is a null pointer.</exception>
      <returns>The original value in <paramref name="location1" />.</returns>
    </member>
    <member name="M:System.Threading.Interlocked.CompareExchange(System.Int64@,System.Int64,System.Int64)">
      <summary>Compares two 64-bit signed integers for equality and, if they are equal, replaces the first value.</summary>
      <param name="location1">The destination, whose value is compared with <paramref name="comparand" /> and possibly replaced.</param>
      <param name="value">The value that replaces the destination value if the comparison results in equality.</param>
      <param name="comparand">The value that is compared to the value at <paramref name="location1" />.</param>
      <exception cref="T:System.NullReferenceException">The address of <paramref name="location1" /> is a null pointer.</exception>
      <returns>The original value in <paramref name="location1" />.</returns>
    </member>
    <member name="M:System.Threading.Interlocked.CompareExchange(System.IntPtr@,System.IntPtr,System.IntPtr)">
      <summary>Compares two platform-specific handles or pointers for equality and, if they are equal, replaces the first one.</summary>
      <param name="location1">The destination <see cref="T:System.IntPtr" />, whose value is compared with the value of <paramref name="comparand" /> and possibly replaced by <paramref name="value" />.</param>
      <param name="value">The <see cref="T:System.IntPtr" /> that replaces the destination value if the comparison results in equality.</param>
      <param name="comparand">The <see cref="T:System.IntPtr" /> that is compared to the value at <paramref name="location1" />.</param>
      <exception cref="T:System.NullReferenceException">The address of <paramref name="location1" /> is a null pointer.</exception>
      <returns>The original value in <paramref name="location1" />.</returns>
    </member>
    <member name="M:System.Threading.Interlocked.CompareExchange(System.Object@,System.Object,System.Object)">
      <summary>Compares two objects for reference equality and, if they are equal, replaces the first object.</summary>
      <param name="location1">The destination object that is compared by reference with <paramref name="comparand" /> and possibly replaced.</param>
      <param name="value">The object that replaces the destination object if the reference comparison results in equality.</param>
      <param name="comparand">The object that is compared by reference to the object at <paramref name="location1" />.</param>
      <exception cref="T:System.ArgumentNullException">The address of <paramref name="location1" /> is a <see langword="null" /> pointer.</exception>
      <exception cref="T:System.NullReferenceException">The address of <paramref name="location1" /> is a <see langword="null" /> pointer.</exception>
      <returns>The original value in <paramref name="location1" />.</returns>
    </member>
    <member name="M:System.Threading.Interlocked.CompareExchange(System.Single@,System.Single,System.Single)">
      <summary>Compares two single-precision floating point numbers for equality and, if they are equal, replaces the first value.</summary>
      <param name="location1">The destination, whose value is compared with <paramref name="comparand" /> and possibly replaced.</param>
      <param name="value">The value that replaces the destination value if the comparison results in equality.</param>
      <param name="comparand">The value that is compared to the value at <paramref name="location1" />.</param>
      <exception cref="T:System.NullReferenceException">The address of <paramref name="location1" /> is a null pointer.</exception>
      <returns>The original value in <paramref name="location1" />.</returns>
    </member>
    <member name="M:System.Threading.Interlocked.CompareExchange(System.UInt32@,System.UInt32,System.UInt32)">
      <summary>Compares two 32-bit unsigned integers for equality and, if they are equal, replaces the first value.</summary>
      <param name="location1">The destination, whose value is compared with <paramref name="comparand" /> and possibly replaced.</param>
      <param name="value">The value that replaces the destination value if the comparison results in equality.</param>
      <param name="comparand">The value that is compared to the value at <paramref name="location1" />.</param>
      <exception cref="T:System.NullReferenceException">The address of <paramref name="location1" /> is a <see langword="null" /> pointer.</exception>
      <returns>The original value in <paramref name="location1" />.</returns>
    </member>
    <member name="M:System.Threading.Interlocked.CompareExchange(System.UInt64@,System.UInt64,System.UInt64)">
      <summary>Compares two 64-bit unsigned integers for equality and, if they are equal, replaces the first value.</summary>
      <param name="location1">The destination, whose value is compared with <paramref name="comparand" /> and possibly replaced.</param>
      <param name="value">The value that replaces the destination value if the comparison results in equality.</param>
      <param name="comparand">The value that is compared to the value at <paramref name="location1" />.</param>
      <exception cref="T:System.NullReferenceException">The address of <paramref name="location1" /> is a <see langword="null" /> pointer.</exception>
      <returns>The original value in <paramref name="location1" />.</returns>
    </member>
    <member name="M:System.Threading.Interlocked.CompareExchange``1(``0@,``0,``0)">
      <summary>Compares two instances of the specified reference type <paramref name="T" /> for reference equality and, if they are equal, replaces the first one.</summary>
      <param name="location1">The destination, whose value is compared by reference with <paramref name="comparand" /> and possibly replaced. This is a reference parameter (<see langword="ref" /> in C#, <see langword="ByRef" /> in Visual Basic).</param>
      <param name="value">The value that replaces the destination value if the comparison by reference results in equality.</param>
      <param name="comparand">The value that is compared by reference to the value at <paramref name="location1" />.</param>
      <typeparam name="T">The type to be used for <paramref name="location1" />, <paramref name="value" />, and <paramref name="comparand" />. This type must be a reference type.</typeparam>
      <exception cref="T:System.NullReferenceException">The address of <paramref name="location1" /> is a null pointer.</exception>
      <returns>The original value in <paramref name="location1" />.</returns>
    </member>
    <member name="M:System.Threading.Interlocked.Decrement(System.Int32@)">
      <summary>Decrements a specified variable and stores the result, as an atomic operation.</summary>
      <param name="location">The variable whose value is to be decremented.</param>
      <exception cref="T:System.ArgumentNullException">The address of <paramref name="location" /> is a <see langword="null" /> pointer.</exception>
      <exception cref="T:System.NullReferenceException">The address of <paramref name="location" /> is a <see langword="null" /> pointer.</exception>
      <returns>The decremented value.</returns>
    </member>
    <member name="M:System.Threading.Interlocked.Decrement(System.Int64@)">
      <summary>Decrements the specified variable and stores the result, as an atomic operation.</summary>
      <param name="location">The variable whose value is to be decremented.</param>
      <exception cref="T:System.ArgumentNullException">The address of <paramref name="location" /> is a <see langword="null" /> pointer.</exception>
      <exception cref="T:System.NullReferenceException">The address of <paramref name="location" /> is a <see langword="null" /> pointer.</exception>
      <returns>The decremented value.</returns>
    </member>
    <member name="M:System.Threading.Interlocked.Decrement(System.UInt32@)">
      <summary>Decrements a specified variable and stores the result, as an atomic operation.</summary>
      <param name="location">The variable whose value is to be decremented.</param>
      <exception cref="T:System.NullReferenceException">The address of <paramref name="location" /> is a <see langword="null" /> pointer.</exception>
      <returns>The decremented value.</returns>
    </member>
    <member name="M:System.Threading.Interlocked.Decrement(System.UInt64@)">
      <summary>Decrements a specified variable and stores the result, as an atomic operation.</summary>
      <param name="location">The variable whose value is to be decremented.</param>
      <exception cref="T:System.NullReferenceException">The address of <paramref name="location" /> is a <see langword="null" /> pointer.</exception>
      <returns>The decremented value.</returns>
    </member>
    <member name="M:System.Threading.Interlocked.Exchange(System.Double@,System.Double)">
      <summary>Sets a double-precision floating point number to a specified value and returns the original value, as an atomic operation.</summary>
      <param name="location1">The variable to set to the specified value.</param>
      <param name="value">The value to which the <paramref name="location1" /> parameter is set.</param>
      <exception cref="T:System.NullReferenceException">The address of <paramref name="location1" /> is a <see langword="null" /> pointer.</exception>
      <returns>The original value of <paramref name="location1" />.</returns>
    </member>
    <member name="M:System.Threading.Interlocked.Exchange(System.Int32@,System.Int32)">
      <summary>Sets a 32-bit signed integer to a specified value and returns the original value, as an atomic operation.</summary>
      <param name="location1">The variable to set to the specified value.</param>
      <param name="value">The value to which the <paramref name="location1" /> parameter is set.</param>
      <exception cref="T:System.ArgumentNullException">The address of <paramref name="location1" /> is a <see langword="null" /> pointer.</exception>
      <exception cref="T:System.NullReferenceException">The address of <paramref name="location1" /> is a <see langword="null" /> pointer.</exception>
      <returns>The original value of <paramref name="location1" />.</returns>
    </member>
    <member name="M:System.Threading.Interlocked.Exchange(System.Int64@,System.Int64)">
      <summary>Sets a 64-bit signed integer to a specified value and returns the original value, as an atomic operation.</summary>
      <param name="location1">The variable to set to the specified value.</param>
      <param name="value">The value to which the <paramref name="location1" /> parameter is set.</param>
      <exception cref="T:System.NullReferenceException">The address of <paramref name="location1" /> is a <see langword="null" /> pointer.</exception>
      <returns>The original value of <paramref name="location1" />.</returns>
    </member>
    <member name="M:System.Threading.Interlocked.Exchange(System.IntPtr@,System.IntPtr)">
      <summary>Sets a platform-specific handle or pointer to a specified value and returns the original value, as an atomic operation.</summary>
      <param name="location1">The variable to set to the specified value.</param>
      <param name="value">The value to which the <paramref name="location1" /> parameter is set.</param>
      <exception cref="T:System.NullReferenceException">The address of <paramref name="location1" /> is a <see langword="null" /> pointer.</exception>
      <returns>The original value of <paramref name="location1" />.</returns>
    </member>
    <member name="M:System.Threading.Interlocked.Exchange(System.Object@,System.Object)">
      <summary>Sets an object to a specified value and returns a reference to the original object, as an atomic operation.</summary>
      <param name="location1">The variable to set to the specified value.</param>
      <param name="value">The value to which the <paramref name="location1" /> parameter is set.</param>
      <exception cref="T:System.ArgumentNullException">The address of <paramref name="location1" /> is a <see langword="null" /> pointer.</exception>
      <exception cref="T:System.NullReferenceException">The address of <paramref name="location1" /> is a <see langword="null" /> pointer.</exception>
      <returns>The original value of <paramref name="location1" />.</returns>
    </member>
    <member name="M:System.Threading.Interlocked.Exchange(System.Single@,System.Single)">
      <summary>Sets a single-precision floating point number to a specified value and returns the original value, as an atomic operation.</summary>
      <param name="location1">The variable to set to the specified value.</param>
      <param name="value">The value to which the <paramref name="location1" /> parameter is set.</param>
      <exception cref="T:System.NullReferenceException">The address of <paramref name="location1" /> is a <see langword="null" /> pointer.</exception>
      <returns>The original value of <paramref name="location1" />.</returns>
    </member>
    <member name="M:System.Threading.Interlocked.Exchange(System.UInt32@,System.UInt32)">
      <summary>Sets a 32-bit unsigned integer to a specified value and returns the original value, as an atomic operation.</summary>
      <param name="location1">The variable to set to the specified value.</param>
      <param name="value">The value to which the <paramref name="location1" /> parameter is set.</param>
      <exception cref="T:System.NullReferenceException">The address of <paramref name="location1" /> is a <see langword="null" /> pointer.</exception>
      <returns>The original value of <paramref name="location1" />.</returns>
    </member>
    <member name="M:System.Threading.Interlocked.Exchange(System.UInt64@,System.UInt64)">
      <summary>Sets a 64-bit unsigned integer to a specified value and returns the original value, as an atomic operation.</summary>
      <param name="location1">The variable to set to the specified value.</param>
      <param name="value">The value to which the <paramref name="location1" /> parameter is set.</param>
      <exception cref="T:System.NullReferenceException">The address of <paramref name="location1" /> is a <see langword="null" /> pointer.</exception>
      <returns>The original value of <paramref name="location1" />.</returns>
    </member>
    <member name="M:System.Threading.Interlocked.Exchange``1(``0@,``0)">
      <summary>Sets a variable of the specified type <paramref name="T" /> to a specified value and returns the original value, as an atomic operation.</summary>
      <param name="location1">The variable to set to the specified value. This is a reference parameter (<see langword="ref" /> in C#, <see langword="ByRef" /> in Visual Basic).</param>
      <param name="value">The value to which the <paramref name="location1" /> parameter is set.</param>
      <typeparam name="T">The type to be used for <paramref name="location1" /> and <paramref name="value" />. This type must be a reference type.</typeparam>
      <exception cref="T:System.NullReferenceException">The address of <paramref name="location1" /> is a <see langword="null" /> pointer.</exception>
      <returns>The original value of <paramref name="location1" />.</returns>
    </member>
    <member name="M:System.Threading.Interlocked.Increment(System.Int32@)">
      <summary>Increments a specified variable and stores the result, as an atomic operation.</summary>
      <param name="location">The variable whose value is to be incremented.</param>
      <exception cref="T:System.NullReferenceException">The address of <paramref name="location" /> is a <see langword="null" /> pointer.</exception>
      <returns>The incremented value.</returns>
    </member>
    <member name="M:System.Threading.Interlocked.Increment(System.Int64@)">
      <summary>Increments a specified variable and stores the result, as an atomic operation.</summary>
      <param name="location">The variable whose value is to be incremented.</param>
      <exception cref="T:System.NullReferenceException">The address of <paramref name="location" /> is a <see langword="null" /> pointer.</exception>
      <returns>The incremented value.</returns>
    </member>
    <member name="M:System.Threading.Interlocked.Increment(System.UInt32@)">
      <summary>Increments a specified variable and stores the result, as an atomic operation.</summary>
      <param name="location">The variable whose value is to be incremented.</param>
      <exception cref="T:System.NullReferenceException">The address of <paramref name="location" /> is a <see langword="null" /> pointer.</exception>
      <returns>The incremented value.</returns>
    </member>
    <member name="M:System.Threading.Interlocked.Increment(System.UInt64@)">
      <summary>Increments a specified variable and stores the result, as an atomic operation.</summary>
      <param name="location">The variable whose value is to be incremented.</param>
      <exception cref="T:System.NullReferenceException">The address of <paramref name="location" /> is a <see langword="null" /> pointer.</exception>
      <returns>The incremented value.</returns>
    </member>
    <member name="M:System.Threading.Interlocked.MemoryBarrier">
      <summary>Synchronizes memory access as follows: The processor that executes the current thread cannot reorder instructions in such a way that memory accesses before the call to <see cref="M:System.Threading.Interlocked.MemoryBarrier" /> execute after memory accesses that follow the call to <see cref="M:System.Threading.Interlocked.MemoryBarrier" />.</summary>
    </member>
    <member name="M:System.Threading.Interlocked.MemoryBarrierProcessWide">
      <summary>Provides a process-wide memory barrier that ensures that reads and writes from any CPU cannot move across the barrier.</summary>
    </member>
    <member name="M:System.Threading.Interlocked.Or(System.Int32@,System.Int32)">
      <summary>Bitwise "ors" two 32-bit signed integers and replaces the first integer with the result, as an atomic operation.</summary>
      <param name="location1">A variable containing the first value to be combined. The result is stored in <paramref name="location1" />.</param>
      <param name="value">The value to be combined with the integer at <paramref name="location1" />.</param>
      <exception cref="T:System.NullReferenceException">The address of <paramref name="location1" /> is a <see langword="null" /> pointer.</exception>
      <returns>The original value in <paramref name="location1" />.</returns>
    </member>
    <member name="M:System.Threading.Interlocked.Or(System.Int64@,System.Int64)">
      <summary>Bitwise "ors" two 64-bit signed integers and replaces the first integer with the result, as an atomic operation.</summary>
      <param name="location1">A variable containing the first value to be combined. The result is stored in <paramref name="location1" />.</param>
      <param name="value">The value to be combined with the integer at <paramref name="location1" />.</param>
      <exception cref="T:System.NullReferenceException">The address of <paramref name="location1" /> is a <see langword="null" /> pointer.</exception>
      <returns>The original value in <paramref name="location1" />.</returns>
    </member>
    <member name="M:System.Threading.Interlocked.Or(System.UInt32@,System.UInt32)">
      <summary>Bitwise "ors" two 32-bit unsigned integers and replaces the first integer with the result, as an atomic operation.</summary>
      <param name="location1">A variable containing the first value to be combined. The result is stored in <paramref name="location1" />.</param>
      <param name="value">The value to be combined with the integer at <paramref name="location1" />.</param>
      <exception cref="T:System.NullReferenceException">The address of <paramref name="location1" /> is a <see langword="null" /> pointer.</exception>
      <returns>The original value in <paramref name="location1" />.</returns>
    </member>
    <member name="M:System.Threading.Interlocked.Or(System.UInt64@,System.UInt64)">
      <summary>Bitwise "ors" two 64-bit unsigned integers and replaces the first integer with the result, as an atomic operation.</summary>
      <param name="location1">A variable containing the first value to be combined. The result is stored in <paramref name="location1" />.</param>
      <param name="value">The value to be combined with the integer at <paramref name="location1" />.</param>
      <exception cref="T:System.NullReferenceException">The address of <paramref name="location1" /> is a <see langword="null" /> pointer.</exception>
      <returns>The original value in <paramref name="location1" />.</returns>
    </member>
    <member name="M:System.Threading.Interlocked.Read(System.Int64@)">
      <summary>Returns a 64-bit value, loaded as an atomic operation.</summary>
      <param name="location">The 64-bit value to be loaded.</param>
      <returns>The loaded value.</returns>
    </member>
    <member name="M:System.Threading.Interlocked.Read(System.UInt64@)">
      <summary>Returns a 64-bit unsigned value, loaded as an atomic operation.</summary>
      <param name="location">The 64-bit value to be loaded.</param>
      <returns>The loaded value.</returns>
    </member>
    <member name="T:System.Threading.LazyInitializer">
      <summary>Provides lazy initialization routines.</summary>
    </member>
    <member name="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@)">
      <summary>Initializes a target reference type with the type's parameterless constructor if it hasn't already been initialized.</summary>
      <param name="target">A reference to initialize if it has not already been initialized. If it is <see langword="null" />, it is considered not initialized; otherwise, it's considered initialized.</param>
      <typeparam name="T">The type of the reference to be initialized.</typeparam>
      <exception cref="T:System.MemberAccessException">Permissions to access the constructor of type <paramref name="T" /> were missing.</exception>
      <exception cref="T:System.MissingMemberException">Type <paramref name="T" /> does not have a parameterless constructor.</exception>
      <returns>The initialized object.</returns>
    </member>
    <member name="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@)">
      <summary>Initializes a target reference or value type with its parameterless constructor if it hasn't already been initialized.</summary>
      <param name="target">A reference or value of type <c>T</c> to initialize if it hasn't already been initialized.</param>
      <param name="initialized">A reference to a Boolean value that determines whether the target has already been initialized.</param>
      <param name="syncLock">A reference to an object used as the mutually exclusive lock for initializing <paramref name="target" />. If <paramref name="syncLock" /> is <see langword="null" />, a new object will be instantiated.</param>
      <typeparam name="T">The type of the reference to be initialized.</typeparam>
      <exception cref="T:System.MemberAccessException">Permissions to access the constructor of type <paramref name="T" /> were missing.</exception>
      <exception cref="T:System.MissingMemberException">Type <paramref name="T" /> does not have a parameterless constructor.</exception>
      <returns>The initialized object.</returns>
    </member>
    <member name="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@,System.Func{``0})">
      <summary>Initializes a target reference or value type by using a specified function if it hasn't already been initialized.</summary>
      <param name="target">A reference or value of type <c>T</c> to initialize if it hasn't already been initialized.</param>
      <param name="initialized">A reference to a Boolean value that determines whether the target has already been initialized.</param>
      <param name="syncLock">A reference to an object used as the mutually exclusive lock for initializing <paramref name="target" />. If <paramref name="syncLock" /> is <see langword="null" />, a new object will be instantiated.</param>
      <param name="valueFactory">The function that is called to initialize the reference or value.</param>
      <typeparam name="T">The type of the reference to be initialized.</typeparam>
      <exception cref="T:System.MemberAccessException">Permissions to access the constructor of type <paramref name="T" /> were missing.</exception>
      <exception cref="T:System.MissingMemberException">Type <paramref name="T" /> does not have a parameterless constructor.</exception>
      <returns>The initialized object.</returns>
    </member>
    <member name="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Func{``0})">
      <summary>Initializes a target reference type by using a specified function if it hasn't already been initialized.</summary>
      <param name="target">The reference to initialize if it hasn't already been initialized.</param>
      <param name="valueFactory">The function that is called to initialize the reference.</param>
      <typeparam name="T">The type of the reference to be initialized.</typeparam>
      <exception cref="T:System.MissingMemberException">Type <paramref name="T" /> does not have a parameterless constructor.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="valueFactory" /> returned null (Nothing in Visual Basic).</exception>
      <returns>The initialized object.</returns>
    </member>
    <member name="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Object@,System.Func{``0})">
      <summary>Initializes a target reference type with a specified function if it has not already been initialized.</summary>
      <param name="target">A reference to initialize if it has not already been initialized. If it is <see langword="null" />, it is considered not initialized; otherwise, it's considered initialized.</param>
      <param name="syncLock">A reference to an object used as the mutually exclusive lock for initializing
            <paramref name="target" />. If <paramref name="syncLock" /> is <see langword="null" />, a new object will be instantiated.</param>
      <param name="valueFactory">The method to invoke to initialize <paramref name="target" />.</param>
      <typeparam name="T">The type of the reference to be initialized.</typeparam>
      <returns>The initialized object.</returns>
    </member>
    <member name="T:System.Threading.LazyThreadSafetyMode">
      <summary>Specifies how a <see cref="T:System.Lazy`1" /> instance synchronizes access among multiple threads.</summary>
    </member>
    <member name="F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication">
      <summary>Locks are used to ensure that only a single thread can initialize a <see cref="T:System.Lazy`1" /> instance in a thread-safe manner. If the initialization method (or the parameterless constructor, if there is no initialization method) uses locks internally, deadlocks can occur. If you use a <see cref="T:System.Lazy`1" /> constructor that specifies an initialization method (<paramref name="valueFactory" /> parameter), and if that initialization method throws an exception (or fails to handle an exception) the first time you call the <see cref="P:System.Lazy`1.Value" /> property, then the exception is cached and thrown again on subsequent calls to the <see cref="P:System.Lazy`1.Value" /> property. If you use a <see cref="T:System.Lazy`1" /> constructor that does not specify an initialization method, exceptions that are thrown by the parameterless constructor for <paramref name="T" /> are not cached. In that case, a subsequent call to the <see cref="P:System.Lazy`1.Value" /> property might successfully initialize the <see cref="T:System.Lazy`1" /> instance. If the initialization method recursively accesses the <see cref="P:System.Lazy`1.Value" /> property of the <see cref="T:System.Lazy`1" /> instance, an <see cref="T:System.InvalidOperationException" /> is thrown.</summary>
    </member>
    <member name="F:System.Threading.LazyThreadSafetyMode.None">
      <summary>The <see cref="T:System.Lazy`1" /> instance is not thread safe; if the instance is accessed from multiple threads, its behavior is undefined. Use this mode only when high performance is crucial and the <see cref="T:System.Lazy`1" /> instance is guaranteed never to be initialized from more than one thread. If you use a <see cref="T:System.Lazy`1" /> constructor that specifies an initialization method (<paramref name="valueFactory" /> parameter), and if that initialization method throws an exception (or fails to handle an exception) the first time you call the <see cref="P:System.Lazy`1.Value" /> property, then the exception is cached and thrown again on subsequent calls to the <see cref="P:System.Lazy`1.Value" /> property. If you use a <see cref="T:System.Lazy`1" /> constructor that does not specify an initialization method, exceptions that are thrown by the parameterless constructor for <paramref name="T" /> are not cached. In that case, a subsequent call to the <see cref="P:System.Lazy`1.Value" /> property might successfully initialize the <see cref="T:System.Lazy`1" /> instance. If the initialization method recursively accesses the <see cref="P:System.Lazy`1.Value" /> property of the <see cref="T:System.Lazy`1" /> instance, an <see cref="T:System.InvalidOperationException" /> is thrown.</summary>
    </member>
    <member name="F:System.Threading.LazyThreadSafetyMode.PublicationOnly">
      <summary>When multiple threads try to initialize a <see cref="T:System.Lazy`1" /> instance simultaneously, all threads are allowed to run the initialization method (or the parameterless constructor, if there is no initialization method). The first thread to complete initialization sets the value of the <see cref="T:System.Lazy`1" /> instance. That value is returned to any other threads that were simultaneously running the initialization method, unless the initialization method throws exceptions on those threads. Any instances of <paramref name="T" /> that were created by the competing threads are discarded. If the initialization method throws an exception on any thread, the exception is propagated out of the <see cref="P:System.Lazy`1.Value" /> property on that thread. The exception is not cached. The value of the <see cref="P:System.Lazy`1.IsValueCreated" /> property remains <see langword="false" />, and subsequent calls to the <see cref="P:System.Lazy`1.Value" /> property, either by the thread where the exception was thrown or by other threads, cause the initialization method to run again. If the initialization method recursively accesses the <see cref="P:System.Lazy`1.Value" /> property of the <see cref="T:System.Lazy`1" /> instance, no exception is thrown.</summary>
    </member>
    <member name="T:System.Threading.LockRecursionException">
      <summary>The exception that is thrown when recursive entry into a lock is not compatible with the recursion policy for the lock.</summary>
    </member>
    <member name="M:System.Threading.LockRecursionException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.LockRecursionException" /> class with a system-supplied message that describes the error.</summary>
    </member>
    <member name="M:System.Threading.LockRecursionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.LockRecursionException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Threading.LockRecursionException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.LockRecursionException" /> class with a specified message that describes the error.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor must make sure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.Threading.LockRecursionException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.LockRecursionException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor must make sure that this string has been localized for the current system culture.</param>
      <param name="innerException">The exception that caused the current exception. If the <paramref name="innerException" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.Threading.ManualResetEvent">
      <summary>Represents a thread synchronization event that, when signaled, must be reset manually. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Threading.ManualResetEvent.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.ManualResetEvent" /> class with a Boolean value indicating whether to set the initial state to signaled.</summary>
      <param name="initialState">
        <see langword="true" /> to set the initial state signaled; <see langword="false" /> to set the initial state to nonsignaled.</param>
    </member>
    <member name="T:System.Threading.ManualResetEventSlim">
      <summary>Represents a thread synchronization event that, when signaled, must be reset manually. This class is a lightweight alternative to <see cref="T:System.Threading.ManualResetEvent" />.</summary>
    </member>
    <member name="M:System.Threading.ManualResetEventSlim.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.ManualResetEventSlim" /> class with an initial state of nonsignaled.</summary>
    </member>
    <member name="M:System.Threading.ManualResetEventSlim.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.ManualResetEventSlim" /> class with a Boolean value indicating whether to set the initial state to signaled.</summary>
      <param name="initialState">true to set the initial state signaled; false to set the initial state to nonsignaled.</param>
    </member>
    <member name="M:System.Threading.ManualResetEventSlim.#ctor(System.Boolean,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.ManualResetEventSlim" /> class with a Boolean value indicating whether to set the initial state to signaled and a specified spin count.</summary>
      <param name="initialState">true to set the initial state to signaled; false to set the initial state to nonsignaled.</param>
      <param name="spinCount">The number of spin waits that will occur before falling back to a kernel-based wait operation.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="spinCount" /> is less than 0 or greater than the maximum allowed value.</exception>
    </member>
    <member name="M:System.Threading.ManualResetEventSlim.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.Threading.ManualResetEventSlim" /> class.</summary>
    </member>
    <member name="M:System.Threading.ManualResetEventSlim.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Threading.ManualResetEventSlim" />, and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Threading.ManualResetEventSlim.Reset">
      <summary>Sets the state of the event to nonsignaled, which causes threads to block.</summary>
      <exception cref="T:System.ObjectDisposedException">The object has already been disposed.</exception>
    </member>
    <member name="M:System.Threading.ManualResetEventSlim.Set">
      <summary>Sets the state of the event to signaled, which allows one or more threads waiting on the event to proceed.</summary>
    </member>
    <member name="M:System.Threading.ManualResetEventSlim.Wait">
      <summary>Blocks the current thread until the current <see cref="T:System.Threading.ManualResetEventSlim" /> is set.</summary>
      <exception cref="T:System.InvalidOperationException">The maximum number of waiters has been exceeded.</exception>
      <exception cref="T:System.ObjectDisposedException">The object has already been disposed.</exception>
    </member>
    <member name="M:System.Threading.ManualResetEventSlim.Wait(System.Int32)">
      <summary>Blocks the current thread until the current <see cref="T:System.Threading.ManualResetEventSlim" /> is set, using a 32-bit signed integer to measure the time interval.</summary>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" />(-1) to wait indefinitely.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</exception>
      <exception cref="T:System.InvalidOperationException">The maximum number of waiters has been exceeded.</exception>
      <exception cref="T:System.ObjectDisposedException">The object has already been disposed.</exception>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Threading.ManualResetEventSlim" /> was set; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.ManualResetEventSlim.Wait(System.Int32,System.Threading.CancellationToken)">
      <summary>Blocks the current thread until the current <see cref="T:System.Threading.ManualResetEventSlim" /> is set, using a 32-bit signed integer to measure the time interval, while observing a <see cref="T:System.Threading.CancellationToken" />.</summary>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" />(-1) to wait indefinitely.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to observe.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</exception>
      <exception cref="T:System.InvalidOperationException">The maximum number of waiters has been exceeded.</exception>
      <exception cref="T:System.ObjectDisposedException">The object has already been disposed or the <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has been disposed.</exception>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="cancellationToken" /> was canceled.</exception>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Threading.ManualResetEventSlim" /> was set; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.ManualResetEventSlim.Wait(System.Threading.CancellationToken)">
      <summary>Blocks the current thread until the current <see cref="T:System.Threading.ManualResetEventSlim" /> receives a signal, while observing a <see cref="T:System.Threading.CancellationToken" />.</summary>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to observe.</param>
      <exception cref="T:System.InvalidOperationException">The maximum number of waiters has been exceeded.</exception>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="cancellationToken" /> was canceled.</exception>
      <exception cref="T:System.ObjectDisposedException">The object has already been disposed or the <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has been disposed.</exception>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="cancellationToken" /> was
            canceled.</exception>
    </member>
    <member name="M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan)">
      <summary>Blocks the current thread until the current <see cref="T:System.Threading.ManualResetEventSlim" /> is set, using a <see cref="T:System.TimeSpan" /> to measure the time interval.</summary>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.  
  
 -or-  
  
 The number of milliseconds in <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.InvalidOperationException">The maximum number of waiters has been exceeded.</exception>
      <exception cref="T:System.ObjectDisposedException">The object has already been disposed.</exception>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Threading.ManualResetEventSlim" /> was set; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
      <summary>Blocks the current thread until the current <see cref="T:System.Threading.ManualResetEventSlim" /> is set, using a <see cref="T:System.TimeSpan" /> to measure the time interval, while observing a <see cref="T:System.Threading.CancellationToken" />.</summary>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to observe.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.  
  
 -or-  
  
 The number of milliseconds in <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.InvalidOperationException">The maximum number of waiters has been exceeded.</exception>
      <exception cref="T:System.ObjectDisposedException">The object has already been disposed or the <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has been disposed.</exception>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="cancellationToken" /> was canceled.</exception>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Threading.ManualResetEventSlim" /> was set; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Threading.ManualResetEventSlim.IsSet">
      <summary>Gets whether the event is set.</summary>
      <returns>true if the event is set; otherwise, false.</returns>
    </member>
    <member name="P:System.Threading.ManualResetEventSlim.SpinCount">
      <summary>Gets the number of spin waits that will occur before falling back to a kernel-based wait operation.</summary>
      <returns>Returns the number of spin waits that will occur before falling back to a kernel-based wait operation.</returns>
    </member>
    <member name="P:System.Threading.ManualResetEventSlim.WaitHandle">
      <summary>Gets the underlying <see cref="T:System.Threading.WaitHandle" /> object for this <see cref="T:System.Threading.ManualResetEventSlim" />.</summary>
      <returns>The underlying <see cref="T:System.Threading.WaitHandle" /> event object for this <see cref="T:System.Threading.ManualResetEventSlim" />.</returns>
    </member>
    <member name="T:System.Threading.Monitor">
      <summary>Provides a mechanism that synchronizes access to objects.</summary>
    </member>
    <member name="M:System.Threading.Monitor.Enter(System.Object)">
      <summary>Acquires an exclusive lock on the specified object.</summary>
      <param name="obj">The object on which to acquire the monitor lock.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="obj" /> parameter is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)">
      <summary>Acquires an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</summary>
      <param name="obj">The object on which to wait.</param>
      <param name="lockTaken">The result of the attempt to acquire the lock, passed by reference. The input must be <see langword="false" />. The output is <see langword="true" /> if the lock is acquired; otherwise, the output is <see langword="false" />. The output is set even if an exception occurs during the attempt to acquire the lock.  
  
 Note   If no exception occurs, the output of this method is always <see langword="true" />.</param>
      <exception cref="T:System.ArgumentException">The input to <paramref name="lockTaken" /> is <see langword="true" />.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="obj" /> parameter is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Monitor.Exit(System.Object)">
      <summary>Releases an exclusive lock on the specified object.</summary>
      <param name="obj">The object on which to release the lock.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="obj" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.Threading.SynchronizationLockException">The current thread does not own the lock for the specified object.</exception>
    </member>
    <member name="M:System.Threading.Monitor.IsEntered(System.Object)">
      <summary>Determines whether the current thread holds the lock on the specified object.</summary>
      <param name="obj">The object to test.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> is <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> if the current thread holds the lock on <paramref name="obj" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Monitor.Pulse(System.Object)">
      <summary>Notifies a thread in the waiting queue of a change in the locked object's state.</summary>
      <param name="obj">The object a thread is waiting for.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="obj" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.Threading.SynchronizationLockException">The calling thread does not own the lock for the specified object.</exception>
    </member>
    <member name="M:System.Threading.Monitor.PulseAll(System.Object)">
      <summary>Notifies all waiting threads of a change in the object's state.</summary>
      <param name="obj">The object that sends the pulse.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="obj" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.Threading.SynchronizationLockException">The calling thread does not own the lock for the specified object.</exception>
    </member>
    <member name="M:System.Threading.Monitor.TryEnter(System.Object)">
      <summary>Attempts to acquire an exclusive lock on the specified object.</summary>
      <param name="obj">The object on which to acquire the lock.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="obj" /> parameter is <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> if the current thread acquires the lock; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)">
      <summary>Attempts to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</summary>
      <param name="obj">The object on which to acquire the lock.</param>
      <param name="lockTaken">The result of the attempt to acquire the lock, passed by reference. The input must be <see langword="false" />. The output is <see langword="true" /> if the lock is acquired; otherwise, the output is <see langword="false" />. The output is set even if an exception occurs during the attempt to acquire the lock.</param>
      <exception cref="T:System.ArgumentException">The input to <paramref name="lockTaken" /> is <see langword="true" />.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="obj" /> parameter is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32)">
      <summary>Attempts, for the specified number of milliseconds, to acquire an exclusive lock on the specified object.</summary>
      <param name="obj">The object on which to acquire the lock.</param>
      <param name="millisecondsTimeout">The number of milliseconds to wait for the lock.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="obj" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is negative, and not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</exception>
      <returns>
        <see langword="true" /> if the current thread acquires the lock; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)">
      <summary>Attempts, for the specified number of milliseconds, to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</summary>
      <param name="obj">The object on which to acquire the lock.</param>
      <param name="millisecondsTimeout">The number of milliseconds to wait for the lock.</param>
      <param name="lockTaken">The result of the attempt to acquire the lock, passed by reference. The input must be <see langword="false" />. The output is <see langword="true" /> if the lock is acquired; otherwise, the output is <see langword="false" />. The output is set even if an exception occurs during the attempt to acquire the lock.</param>
      <exception cref="T:System.ArgumentException">The input to <paramref name="lockTaken" /> is <see langword="true" />.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="obj" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is negative, and not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</exception>
    </member>
    <member name="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)">
      <summary>Attempts, for the specified amount of time, to acquire an exclusive lock on the specified object.</summary>
      <param name="obj">The object on which to acquire the lock.</param>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> representing the amount of time to wait for the lock. A value of -1 millisecond specifies an infinite wait.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="obj" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value of <paramref name="timeout" /> in milliseconds is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (-1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <returns>
        <see langword="true" /> if the current thread acquires the lock; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)">
      <summary>Attempts, for the specified amount of time, to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</summary>
      <param name="obj">The object on which to acquire the lock.</param>
      <param name="timeout">The amount of time to wait for the lock. A value of -1 millisecond specifies an infinite wait.</param>
      <param name="lockTaken">The result of the attempt to acquire the lock, passed by reference. The input must be <see langword="false" />. The output is <see langword="true" /> if the lock is acquired; otherwise, the output is <see langword="false" />. The output is set even if an exception occurs during the attempt to acquire the lock.</param>
      <exception cref="T:System.ArgumentException">The input to <paramref name="lockTaken" /> is <see langword="true" />.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="obj" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value of <paramref name="timeout" /> in milliseconds is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (-1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Threading.Monitor.Wait(System.Object)">
      <summary>Releases the lock on an object and blocks the current thread until it reacquires the lock.</summary>
      <param name="obj">The object on which to wait.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="obj" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.Threading.SynchronizationLockException">The calling thread does not own the lock for the specified object.</exception>
      <exception cref="T:System.Threading.ThreadInterruptedException">The thread that invokes <see langword="Wait" /> is later interrupted from the waiting state. This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</exception>
      <returns>
        <see langword="true" /> if the call returned because the caller reacquired the lock for the specified object. This method does not return if the lock is not reacquired.</returns>
    </member>
    <member name="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
      <summary>Releases the lock on an object and blocks the current thread until it reacquires the lock. If the specified time-out interval elapses, the thread enters the ready queue.</summary>
      <param name="obj">The object on which to wait.</param>
      <param name="millisecondsTimeout">The number of milliseconds to wait before the thread enters the ready queue.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="obj" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.Threading.SynchronizationLockException">The calling thread does not own the lock for the specified object.</exception>
      <exception cref="T:System.Threading.ThreadInterruptedException">The thread that invokes <see langword="Wait" /> is later interrupted from the waiting state. This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value of the <paramref name="millisecondsTimeout" /> parameter is negative, and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</exception>
      <returns>
        <see langword="true" /> if the lock was reacquired before the specified time elapsed; <see langword="false" /> if the lock was reacquired after the specified time elapsed. The method does not return until the lock is reacquired.</returns>
    </member>
    <member name="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
      <summary>Releases the lock on an object and blocks the current thread until it reacquires the lock. If the specified time-out interval elapses, the thread enters the ready queue. This method also specifies whether the synchronization domain for the context (if in a synchronized context) is exited before the wait and reacquired afterward.</summary>
      <param name="obj">The object on which to wait.</param>
      <param name="millisecondsTimeout">The number of milliseconds to wait before the thread enters the ready queue.</param>
      <param name="exitContext">
        <see langword="true" /> to exit and reacquire the synchronization domain for the context (if in a synchronized context) before the wait; otherwise, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="obj" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.Threading.SynchronizationLockException">
        <see langword="Wait" /> is not invoked from within a synchronized block of code.</exception>
      <exception cref="T:System.Threading.ThreadInterruptedException">The thread that invokes <see langword="Wait" /> is later interrupted from the waiting state. This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value of the <paramref name="millisecondsTimeout" /> parameter is negative, and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</exception>
      <returns>
        <see langword="true" /> if the lock was reacquired before the specified time elapsed; <see langword="false" /> if the lock was reacquired after the specified time elapsed. The method does not return until the lock is reacquired.</returns>
    </member>
    <member name="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
      <summary>Releases the lock on an object and blocks the current thread until it reacquires the lock. If the specified time-out interval elapses, the thread enters the ready queue.</summary>
      <param name="obj">The object on which to wait.</param>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> representing the amount of time to wait before the thread enters the ready queue.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="obj" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.Threading.SynchronizationLockException">The calling thread does not own the lock for the specified object.</exception>
      <exception cref="T:System.Threading.ThreadInterruptedException">The thread that invokes <see langword="Wait" /> is later interrupted from the waiting state. This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value of the <paramref name="timeout" /> parameter in milliseconds is negative and does not represent <see cref="F:System.Threading.Timeout.Infinite" /> (-1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <returns>
        <see langword="true" /> if the lock was reacquired before the specified time elapsed; <see langword="false" /> if the lock was reacquired after the specified time elapsed. The method does not return until the lock is reacquired.</returns>
    </member>
    <member name="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
      <summary>Releases the lock on an object and blocks the current thread until it reacquires the lock. If the specified time-out interval elapses, the thread enters the ready queue. Optionally exits the synchronization domain for the synchronized context before the wait and reacquires the domain afterward.</summary>
      <param name="obj">The object on which to wait.</param>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> representing the amount of time to wait before the thread enters the ready queue.</param>
      <param name="exitContext">
        <see langword="true" /> to exit and reacquire the synchronization domain for the context (if in a synchronized context) before the wait; otherwise, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="obj" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.Threading.SynchronizationLockException">
        <see langword="Wait" /> is not invoked from within a synchronized block of code.</exception>
      <exception cref="T:System.Threading.ThreadInterruptedException">The thread that invokes Wait is later interrupted from the waiting state. This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="timeout" /> parameter is negative and does not represent <see cref="F:System.Threading.Timeout.Infinite" /> (-1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <returns>
        <see langword="true" /> if the lock was reacquired before the specified time elapsed; <see langword="false" /> if the lock was reacquired after the specified time elapsed. The method does not return until the lock is reacquired.</returns>
    </member>
    <member name="P:System.Threading.Monitor.LockContentionCount">
      <summary>Gets the number of times there was contention when trying to take the monitor's lock.</summary>
      <returns>The number of times there was contention when trying to take the monitor's lock.</returns>
    </member>
    <member name="T:System.Threading.Mutex">
      <summary>A synchronization primitive that can also be used for interprocess synchronization.</summary>
    </member>
    <member name="M:System.Threading.Mutex.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Mutex" /> class with default properties.</summary>
    </member>
    <member name="M:System.Threading.Mutex.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Mutex" /> class with a Boolean value that indicates whether the calling thread should have initial ownership of the mutex.</summary>
      <param name="initiallyOwned">
        <see langword="true" /> to give the calling thread initial ownership of the mutex; otherwise, <see langword="false" />.</param>
    </member>
    <member name="M:System.Threading.Mutex.#ctor(System.Boolean,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Mutex" /> class with a Boolean value that indicates whether the calling thread should have initial ownership of the mutex, and a string that is the name of the mutex.</summary>
      <param name="initiallyOwned">
        <see langword="true" /> to give the calling thread initial ownership of the named system mutex if the named system mutex is created as a result of this call; otherwise, <see langword="false" />.</param>
      <param name="name">The name of the <see cref="T:System.Threading.Mutex" />. If the value is <see langword="null" />, the <see cref="T:System.Threading.Mutex" /> is unnamed.</param>
      <exception cref="T:System.UnauthorizedAccessException">The named mutex exists and has access control security, but the user does not have <see cref="F:System.Security.AccessControl.MutexRights.FullControl" />.</exception>
      <exception cref="T:System.IO.IOException">A Win32 error occurred.</exception>
      <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">The named mutex cannot be created, perhaps because a wait handle of a different type has the same name.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is longer than 260 characters.</exception>
    </member>
    <member name="M:System.Threading.Mutex.#ctor(System.Boolean,System.String,System.Boolean@)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Mutex" /> class with a Boolean value that indicates whether the calling thread should have initial ownership of the mutex, a string that is the name of the mutex, and a Boolean value that, when the method returns, indicates whether the calling thread was granted initial ownership of the mutex.</summary>
      <param name="initiallyOwned">
        <see langword="true" /> to give the calling thread initial ownership of the named system mutex if the named system mutex is created as a result of this call; otherwise, <see langword="false" />.</param>
      <param name="name">The name of the <see cref="T:System.Threading.Mutex" />. If the value is <see langword="null" />, the <see cref="T:System.Threading.Mutex" /> is unnamed.</param>
      <param name="createdNew">When this method returns, contains a Boolean that is <see langword="true" /> if a local mutex was created (that is, if <paramref name="name" /> is <see langword="null" /> or an empty string) or if the specified named system mutex was created; <see langword="false" /> if the specified named system mutex already existed. This parameter is passed uninitialized.</param>
      <exception cref="T:System.UnauthorizedAccessException">The named mutex exists and has access control security, but the user does not have <see cref="F:System.Security.AccessControl.MutexRights.FullControl" />.</exception>
      <exception cref="T:System.IO.IOException">A Win32 error occurred.</exception>
      <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">The named mutex cannot be created, perhaps because a wait handle of a different type has the same name.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is longer than 260 characters.</exception>
    </member>
    <member name="M:System.Threading.Mutex.OpenExisting(System.String)">
      <summary>Opens the specified named mutex, if it already exists.</summary>
      <param name="name">The name of the system mutex to open.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is an empty string.  
  
 -or-  
  
 <paramref name="name" /> is longer than 260 characters.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">The named mutex does not exist.</exception>
      <exception cref="T:System.IO.IOException">A Win32 error occurred.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The named mutex exists, but the user does not have the security access required to use it.</exception>
      <returns>An object that represents the named system mutex.</returns>
    </member>
    <member name="M:System.Threading.Mutex.ReleaseMutex">
      <summary>Releases the <see cref="T:System.Threading.Mutex" /> once.</summary>
      <exception cref="T:System.ApplicationException">The calling thread does not own the mutex.</exception>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
    </member>
    <member name="M:System.Threading.Mutex.TryOpenExisting(System.String,System.Threading.Mutex@)">
      <summary>Opens the specified named mutex, if it already exists, and returns a value that indicates whether the operation succeeded.</summary>
      <param name="name">The name of the system mutex to open.</param>
      <param name="result">When this method returns, contains a <see cref="T:System.Threading.Mutex" /> object that represents the named mutex if the call succeeded, or <see langword="null" /> if the call failed. This parameter is treated as uninitialized.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is an empty string.  
  
 -or-  
  
 <paramref name="name" /> is longer than 260 characters.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
      <exception cref="T:System.IO.IOException">A Win32 error occurred.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The named mutex exists, but the user does not have the security access required to use it.</exception>
      <returns>
        <see langword="true" /> if the named mutex was opened successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Threading.SemaphoreFullException">
      <summary>The exception that is thrown when the <see cref="Overload:System.Threading.Semaphore.Release" /> method is called on a semaphore whose count is already at the maximum.</summary>
    </member>
    <member name="M:System.Threading.SemaphoreFullException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.SemaphoreFullException" /> class with default values.</summary>
    </member>
    <member name="M:System.Threading.SemaphoreFullException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.SemaphoreFullException" /> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Threading.SemaphoreFullException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.SemaphoreFullException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.Threading.SemaphoreFullException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.SemaphoreFullException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.Threading.SemaphoreSlim">
      <summary>Represents a lightweight alternative to <see cref="T:System.Threading.Semaphore" /> that limits the number of threads that can access a resource or pool of resources concurrently.</summary>
    </member>
    <member name="M:System.Threading.SemaphoreSlim.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.SemaphoreSlim" /> class, specifying the initial number of requests that can be granted concurrently.</summary>
      <param name="initialCount">The initial number of requests for the semaphore that can be granted concurrently.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="initialCount" /> is less than 0.</exception>
    </member>
    <member name="M:System.Threading.SemaphoreSlim.#ctor(System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.SemaphoreSlim" /> class, specifying the initial and maximum number of requests that can be granted concurrently.</summary>
      <param name="initialCount">The initial number of requests for the semaphore that can be granted concurrently.</param>
      <param name="maxCount">The maximum number of requests for the semaphore that can be granted concurrently.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="initialCount" /> is less than 0, or <paramref name="initialCount" /> is greater than <paramref name="maxCount" />, or <paramref name="maxCount" /> is equal to or less than 0.</exception>
    </member>
    <member name="M:System.Threading.SemaphoreSlim.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.Threading.SemaphoreSlim" /> class.</summary>
    </member>
    <member name="M:System.Threading.SemaphoreSlim.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Threading.SemaphoreSlim" />, and optionally releases the managed resources.</summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Threading.SemaphoreSlim.Release">
      <summary>Releases the <see cref="T:System.Threading.SemaphoreSlim" /> object once.</summary>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
      <exception cref="T:System.Threading.SemaphoreFullException">The <see cref="T:System.Threading.SemaphoreSlim" /> has already reached its maximum size.</exception>
      <returns>The previous count of the <see cref="T:System.Threading.SemaphoreSlim" />.</returns>
    </member>
    <member name="M:System.Threading.SemaphoreSlim.Release(System.Int32)">
      <summary>Releases the <see cref="T:System.Threading.SemaphoreSlim" /> object a specified number of times.</summary>
      <param name="releaseCount">The number of times to exit the semaphore.</param>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="releaseCount" /> is less than 1.</exception>
      <exception cref="T:System.Threading.SemaphoreFullException">The <see cref="T:System.Threading.SemaphoreSlim" /> has already reached its maximum size.</exception>
      <returns>The previous count of the <see cref="T:System.Threading.SemaphoreSlim" />.</returns>
    </member>
    <member name="M:System.Threading.SemaphoreSlim.Wait">
      <summary>Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim" />.</summary>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
    </member>
    <member name="M:System.Threading.SemaphoreSlim.Wait(System.Int32)">
      <summary>Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a 32-bit signed integer that specifies the timeout.</summary>
      <param name="millisecondsTimeout">The number of milliseconds to wait, <see cref="F:System.Threading.Timeout.Infinite" />(-1) to wait indefinitely, or zero to test the state of the wait handle and return immediately.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.SemaphoreSlim" /> has been disposed.</exception>
      <returns>
        <see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)">
      <summary>Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a 32-bit signed integer that specifies the timeout, while observing a <see cref="T:System.Threading.CancellationToken" />.</summary>
      <param name="millisecondsTimeout">The number of milliseconds to wait, <see cref="F:System.Threading.Timeout.Infinite" />(-1) to wait indefinitely, or zero to test the state of the wait handle and return immediately.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to observe.</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="cancellationToken" /> was canceled.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite timeout.

-or-

<paramref name="millisecondsTimeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.SemaphoreSlim" /> instance has been disposed, or the <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has been disposed.</exception>
      <returns>
        <see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.SemaphoreSlim.Wait(System.Threading.CancellationToken)">
      <summary>Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim" />, while observing a <see cref="T:System.Threading.CancellationToken" />.</summary>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> token to observe.</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="cancellationToken" /> was canceled.</exception>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.  
  
 -or-  
  
 The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</exception>
    </member>
    <member name="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan)">
      <summary>Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a <see cref="T:System.TimeSpan" /> to specify the timeout.</summary>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely, or a <see cref="T:System.TimeSpan" /> that represents 0 milliseconds to test the wait handle and return immediately.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is a negative number other than -1, which represents an infinite timeout.

-or- 

<paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.ObjectDisposedException">The semaphoreSlim instance has been disposed.</exception>
      <returns>
        <see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
      <summary>Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a <see cref="T:System.TimeSpan" /> that specifies the timeout, while observing a <see cref="T:System.Threading.CancellationToken" />.</summary>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely, or a <see cref="T:System.TimeSpan" /> that represents 0 milliseconds to test the wait handle and return immediately.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to observe.</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="cancellationToken" /> was canceled.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is a negative number other than -1, which represents an infinite timeout.

-or-.

<paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.ObjectDisposedException">The semaphoreSlim instance has been disposed.
          
-or-

The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</exception>
      <returns>
        <see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.SemaphoreSlim.WaitAsync">
      <summary>Asynchronously waits to enter the <see cref="T:System.Threading.SemaphoreSlim" />.</summary>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.SemaphoreSlim" /> has been disposed.</exception>
      <returns>A task that will complete when the semaphore has been entered.</returns>
    </member>
    <member name="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32)">
      <summary>Asynchronously waits to enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a 32-bit signed integer to measure the time interval.</summary>
      <param name="millisecondsTimeout">The number of milliseconds to wait, <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely, or zero to test the state of the wait handle and return immediately.</param>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite timeout.
          
-or-
          
<paramref name="millisecondsTimeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <returns>A task that will complete with a result of <see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />, otherwise with a result of <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32,System.Threading.CancellationToken)">
      <summary>Asynchronously waits to enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a 32-bit signed integer to measure the time interval, while observing a <see cref="T:System.Threading.CancellationToken" />.</summary>
      <param name="millisecondsTimeout">The number of milliseconds to wait, <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely, or zero to test the state of the wait handle and return immediately.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to observe.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a number other than -1, which represents an infinite timeout.
          
-or-

<paramref name="millisecondsTimeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="cancellationToken" /> was canceled.</exception>
      <returns>A task that will complete with a result of <see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />, otherwise with a result of <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.SemaphoreSlim.WaitAsync(System.Threading.CancellationToken)">
      <summary>Asynchronously waits to enter the <see cref="T:System.Threading.SemaphoreSlim" />, while observing a <see cref="T:System.Threading.CancellationToken" />.</summary>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> token to observe.</param>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="cancellationToken" /> was canceled.</exception>
      <returns>A task that will complete when the semaphore has been entered.</returns>
    </member>
    <member name="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan)">
      <summary>Asynchronously waits to enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a <see cref="T:System.TimeSpan" /> to measure the time interval.</summary>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely, or a <see cref="T:System.TimeSpan" /> that represents 0 milliseconds to test the wait handle and return immediately.</param>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is a negative number other than -1, which represents an infinite timeout.

-or-
          
<paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <returns>A task that will complete with a result of <see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />, otherwise with a result of <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan,System.Threading.CancellationToken)">
      <summary>Asynchronously waits to enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a <see cref="T:System.TimeSpan" /> to measure the time interval, while observing a <see cref="T:System.Threading.CancellationToken" />.</summary>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely, or a <see cref="T:System.TimeSpan" /> that represents 0 milliseconds to test the wait handle and return immediately.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> token to observe.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is a negative number other than -1, which represents an infinite timeout.
          
-or-

<paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="cancellationToken" /> was canceled.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.SemaphoreSlim" /> has been disposed.</exception>
      <returns>A task that will complete with a result of <see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />, otherwise with a result of <see langword="false" />.</returns>
    </member>
    <member name="P:System.Threading.SemaphoreSlim.AvailableWaitHandle">
      <summary>Returns a <see cref="T:System.Threading.WaitHandle" /> that can be used to wait on the semaphore.</summary>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.SemaphoreSlim" /> has been disposed.</exception>
      <returns>A <see cref="T:System.Threading.WaitHandle" /> that can be used to wait on the semaphore.</returns>
    </member>
    <member name="P:System.Threading.SemaphoreSlim.CurrentCount">
      <summary>Gets the number of remaining threads that can enter the <see cref="T:System.Threading.SemaphoreSlim" /> object.</summary>
      <returns>The number of remaining threads that can enter the semaphore.</returns>
    </member>
    <member name="T:System.Threading.SendOrPostCallback">
      <summary>Represents a method to be called when a message is to be dispatched to a synchronization context.</summary>
      <param name="state">The object passed to the delegate.</param>
    </member>
    <member name="T:System.Threading.SpinLock">
      <summary>Provides a mutual exclusion lock primitive where a thread trying to acquire the lock waits in a loop repeatedly checking until the lock becomes available.</summary>
    </member>
    <member name="M:System.Threading.SpinLock.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.SpinLock" /> structure with the option to track thread IDs to improve debugging.</summary>
      <param name="enableThreadOwnerTracking">Whether to capture and use thread IDs for debugging purposes.</param>
    </member>
    <member name="M:System.Threading.SpinLock.Enter(System.Boolean@)">
      <summary>Acquires the lock in a reliable manner, such that even if an exception occurs within the method call, <paramref name="lockTaken" /> can be examined reliably to determine whether the lock was acquired.</summary>
      <param name="lockTaken">True if the lock is acquired; otherwise, false. <paramref name="lockTaken" /> must be initialized to false prior to calling this method.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="lockTaken" /> argument must be initialized to false prior to calling Enter.</exception>
      <exception cref="T:System.Threading.LockRecursionException">Thread ownership tracking is enabled, and the current thread has already acquired this lock.</exception>
    </member>
    <member name="M:System.Threading.SpinLock.Exit">
      <summary>Releases the lock.</summary>
      <exception cref="T:System.Threading.SynchronizationLockException">Thread ownership tracking is enabled, and the current thread is not the owner of this lock.</exception>
    </member>
    <member name="M:System.Threading.SpinLock.Exit(System.Boolean)">
      <summary>Releases the lock.</summary>
      <param name="useMemoryBarrier">A Boolean value that indicates whether a memory fence should be issued in order to immediately publish the exit operation to other threads.</param>
      <exception cref="T:System.Threading.SynchronizationLockException">Thread ownership tracking is enabled, and the current thread is not the owner of this lock.</exception>
    </member>
    <member name="M:System.Threading.SpinLock.TryEnter(System.Boolean@)">
      <summary>Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <paramref name="lockTaken" /> can be examined reliably to determine whether the lock was acquired.</summary>
      <param name="lockTaken">True if the lock is acquired; otherwise, false. <paramref name="lockTaken" /> must be initialized to false prior to calling this method.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="lockTaken" /> argument must be initialized to false prior to calling TryEnter.</exception>
      <exception cref="T:System.Threading.LockRecursionException">Thread ownership tracking is enabled, and the current thread has already acquired this lock.</exception>
    </member>
    <member name="M:System.Threading.SpinLock.TryEnter(System.Int32,System.Boolean@)">
      <summary>Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <paramref name="lockTaken" /> can be examined reliably to determine whether the lock was acquired.</summary>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</param>
      <param name="lockTaken">True if the lock is acquired; otherwise, false. <paramref name="lockTaken" /> must be initialized to false prior to calling this method.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="lockTaken" /> argument must be initialized to false prior to calling TryEnter.</exception>
      <exception cref="T:System.Threading.LockRecursionException">Thread ownership tracking is enabled, and the current thread has already acquired this lock.</exception>
    </member>
    <member name="M:System.Threading.SpinLock.TryEnter(System.TimeSpan,System.Boolean@)">
      <summary>Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <paramref name="lockTaken" /> can be examined reliably to determine whether the lock was acquired.</summary>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</param>
      <param name="lockTaken">True if the lock is acquired; otherwise, false. <paramref name="lockTaken" /> must be initialized to false prior to calling this method.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <see cref="F:System.Int32.MaxValue" /> milliseconds.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="lockTaken" /> argument must be initialized to false prior to calling TryEnter.</exception>
      <exception cref="T:System.Threading.LockRecursionException">Thread ownership tracking is enabled, and the current thread has already acquired this lock.</exception>
    </member>
    <member name="P:System.Threading.SpinLock.IsHeld">
      <summary>Gets whether the lock is currently held by any thread.</summary>
      <returns>true if the lock is currently held by any thread; otherwise false.</returns>
    </member>
    <member name="P:System.Threading.SpinLock.IsHeldByCurrentThread">
      <summary>Gets whether the lock is held by the current thread.</summary>
      <exception cref="T:System.InvalidOperationException">Thread ownership tracking is disabled.</exception>
      <returns>true if the lock is held by the current thread; otherwise false.</returns>
    </member>
    <member name="P:System.Threading.SpinLock.IsThreadOwnerTrackingEnabled">
      <summary>Gets whether thread ownership tracking is enabled for this instance.</summary>
      <returns>true if thread ownership tracking is enabled for this instance; otherwise false.</returns>
    </member>
    <member name="T:System.Threading.SpinWait">
      <summary>Provides support for spin-based waiting.</summary>
    </member>
    <member name="M:System.Threading.SpinWait.Reset">
      <summary>Resets the spin counter.</summary>
    </member>
    <member name="M:System.Threading.SpinWait.SpinOnce">
      <summary>Performs a single spin.</summary>
    </member>
    <member name="M:System.Threading.SpinWait.SpinOnce(System.Int32)">
      <summary>Performs a single spin and calls <see cref="M:System.Threading.Thread.Sleep(System.Int32)" /> after a minimum spin count.</summary>
      <param name="sleep1Threshold">A minimum spin count after which <see langword="Thread.Sleep(1)" /> may be used. A value of -1 disables the use of <see langword="Thread.Sleep(1)" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sleep1Threshold" /> is less than -1.</exception>
    </member>
    <member name="M:System.Threading.SpinWait.SpinUntil(System.Func{System.Boolean})">
      <summary>Spins until the specified condition is satisfied.</summary>
      <param name="condition">A delegate to be executed over and over until it returns true.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="condition" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.SpinWait.SpinUntil(System.Func{System.Boolean},System.Int32)">
      <summary>Spins until the specified condition is satisfied or until the specified timeout is expired.</summary>
      <param name="condition">A delegate to be executed over and over until it returns true.</param>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="condition" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</exception>
      <returns>
        <see langword="true" /> if the condition is satisfied within the timeout; otherwise, false</returns>
    </member>
    <member name="M:System.Threading.SpinWait.SpinUntil(System.Func{System.Boolean},System.TimeSpan)">
      <summary>Spins until the specified condition is satisfied or until the specified timeout is expired.</summary>
      <param name="condition">A delegate to be executed over and over until it returns true.</param>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="condition" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <returns>
        <see langword="true" /> if the condition is satisfied within the timeout; otherwise, false</returns>
    </member>
    <member name="P:System.Threading.SpinWait.Count">
      <summary>Gets the number of times <see cref="M:System.Threading.SpinWait.SpinOnce" /> has been called on this instance.</summary>
      <returns>Returns an integer that represents the number of times <see cref="M:System.Threading.SpinWait.SpinOnce" /> has been called on this instance.</returns>
    </member>
    <member name="P:System.Threading.SpinWait.NextSpinWillYield">
      <summary>Gets whether the next call to <see cref="M:System.Threading.SpinWait.SpinOnce" /> will yield the processor, triggering a forced context switch.</summary>
      <returns>Whether the next call to <see cref="M:System.Threading.SpinWait.SpinOnce" /> will yield the processor, triggering a forced context switch.</returns>
    </member>
    <member name="T:System.Threading.SynchronizationContext">
      <summary>Provides the basic functionality for propagating a synchronization context in various synchronization models.</summary>
    </member>
    <member name="M:System.Threading.SynchronizationContext.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Threading.SynchronizationContext" /> class.</summary>
    </member>
    <member name="M:System.Threading.SynchronizationContext.CreateCopy">
      <summary>When overridden in a derived class, creates a copy of the synchronization context.</summary>
      <returns>A new <see cref="T:System.Threading.SynchronizationContext" /> object.</returns>
    </member>
    <member name="M:System.Threading.SynchronizationContext.IsWaitNotificationRequired">
      <summary>Determines if wait notification is required.</summary>
      <returns>
        <see langword="true" /> if wait notification is required; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.SynchronizationContext.OperationCompleted">
      <summary>When overridden in a derived class, responds to the notification that an operation has completed.</summary>
    </member>
    <member name="M:System.Threading.SynchronizationContext.OperationStarted">
      <summary>When overridden in a derived class, responds to the notification that an operation has started.</summary>
    </member>
    <member name="M:System.Threading.SynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)">
      <summary>When overridden in a derived class, dispatches an asynchronous message to a synchronization context.</summary>
      <param name="d">The <see cref="T:System.Threading.SendOrPostCallback" /> delegate to call.</param>
      <param name="state">The object passed to the delegate.</param>
    </member>
    <member name="M:System.Threading.SynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)">
      <summary>When overridden in a derived class, dispatches a synchronous message to a synchronization context.</summary>
      <param name="d">The <see cref="T:System.Threading.SendOrPostCallback" /> delegate to call.</param>
      <param name="state">The object passed to the delegate.</param>
      <exception cref="T:System.NotSupportedException">The method was called in a Windows Store app. The implementation of <see cref="T:System.Threading.SynchronizationContext" /> for Windows Store apps does not support the <see cref="M:System.Threading.SynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)" /> method.</exception>
    </member>
    <member name="M:System.Threading.SynchronizationContext.SetSynchronizationContext(System.Threading.SynchronizationContext)">
      <summary>Sets the current synchronization context.</summary>
      <param name="syncContext">The <see cref="T:System.Threading.SynchronizationContext" /> object to be set.</param>
    </member>
    <member name="M:System.Threading.SynchronizationContext.SetWaitNotificationRequired">
      <summary>Sets notification that wait notification is required and prepares the callback method so it can be called more reliably when a wait occurs.</summary>
    </member>
    <member name="M:System.Threading.SynchronizationContext.Wait(System.IntPtr[],System.Boolean,System.Int32)">
      <summary>Waits for any or all the elements in the specified array to receive a signal.</summary>
      <param name="waitHandles">An array of type <see cref="T:System.IntPtr" /> that contains the native operating system handles.</param>
      <param name="waitAll">
        <see langword="true" /> to wait for all handles; <see langword="false" /> to wait for any handle.</param>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="waitHandles" /> is null.</exception>
      <returns>The array index of the object that satisfied the wait.</returns>
    </member>
    <member name="M:System.Threading.SynchronizationContext.WaitHelper(System.IntPtr[],System.Boolean,System.Int32)">
      <summary>Helper function that waits for any or all the elements in the specified array to receive a signal.</summary>
      <param name="waitHandles">An array of type <see cref="T:System.IntPtr" /> that contains the native operating system handles.</param>
      <param name="waitAll">
        <see langword="true" /> to wait for all handles;  <see langword="false" /> to wait for any handle.</param>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</param>
      <returns>The array index of the object that satisfied the wait.</returns>
    </member>
    <member name="P:System.Threading.SynchronizationContext.Current">
      <summary>Gets the synchronization context for the current thread.</summary>
      <returns>A <see cref="T:System.Threading.SynchronizationContext" /> object representing the current synchronization context.</returns>
    </member>
    <member name="T:System.Threading.SynchronizationLockException">
      <summary>The exception that is thrown when a method requires the caller to own the lock on a given Monitor, and the method is invoked by a caller that does not own that lock.</summary>
    </member>
    <member name="M:System.Threading.SynchronizationLockException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.SynchronizationLockException" /> class with default properties.</summary>
    </member>
    <member name="M:System.Threading.SynchronizationLockException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.SynchronizationLockException" /> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Threading.SynchronizationLockException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.SynchronizationLockException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.Threading.SynchronizationLockException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.SynchronizationLockException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.Threading.Tasks.Parallel">
      <summary>Provides support for parallel loops and regions.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})">
      <summary>Executes a <see langword="for" /> loop in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</summary>
      <param name="fromInclusive">The start index, inclusive.</param>
      <param name="toExclusive">The end index, exclusive.</param>
      <param name="body">The delegate that is invoked once per iteration.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="body" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.AggregateException">The exception that contains all the individual exceptions thrown on all threads.</exception>
      <returns>A  structure that contains information about which portion of the loop completed.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32})">
      <summary>Executes a <see langword="for" /> loop in which iterations may run in parallel.</summary>
      <param name="fromInclusive">The start index, inclusive.</param>
      <param name="toExclusive">The end index, exclusive.</param>
      <param name="body">The delegate that is invoked once per iteration.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="body" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.AggregateException">The exception that contains all the individual exceptions thrown on all threads.</exception>
      <returns>A structure that contains information about which portion of the loop completed.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})">
      <summary>Executes a <see langword="for" /> loop in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</summary>
      <param name="fromInclusive">The start index, inclusive.</param>
      <param name="toExclusive">The end index, exclusive.</param>
      <param name="parallelOptions">An object that configures the behavior of this operation.</param>
      <param name="body">The delegate that is invoked once per iteration.</param>
      <exception cref="T:System.OperationCanceledException">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="body" /> argument is <see langword="null" />.  
  
 -or-  
  
 The <paramref name="parallelOptions" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.AggregateException">The exception that contains all the individual exceptions thrown on all threads.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</exception>
      <returns>A structure that contains information about which portion of the loop completed.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32})">
      <summary>Executes a <see langword="for" /> loop in which iterations may run in parallel and loop options can be configured.</summary>
      <param name="fromInclusive">The start index, inclusive.</param>
      <param name="toExclusive">The end index, exclusive.</param>
      <param name="parallelOptions">An object that configures the behavior of this operation.</param>
      <param name="body">The delegate that is invoked once per iteration.</param>
      <exception cref="T:System.OperationCanceledException">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="body" /> argument is <see langword="null" />.  
  
 -or-  
  
 The <paramref name="parallelOptions" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.AggregateException">The exception that contains all the individual exceptions thrown on all threads.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</exception>
      <returns>A  structure that contains information about which portion of the loop completed.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})">
      <summary>Executes a <see langword="for" /> loop with 64-bit indexes in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</summary>
      <param name="fromInclusive">The start index, inclusive.</param>
      <param name="toExclusive">The end index, exclusive.</param>
      <param name="body">The delegate that is invoked once per iteration.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="body" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.AggregateException">The exception that contains all the individual exceptions thrown on all threads.</exception>
      <returns>A <see cref="T:System.Threading.Tasks.ParallelLoopResult" /> structure that contains information on what portion of the loop completed.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64})">
      <summary>Executes a <see langword="for" /> loop with 64-bit indexes in which iterations may run in parallel.</summary>
      <param name="fromInclusive">The start index, inclusive.</param>
      <param name="toExclusive">The end index, exclusive.</param>
      <param name="body">The delegate that is invoked once per iteration.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="body" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.AggregateException">The exception that contains all the individual exceptions thrown on all threads.</exception>
      <returns>A structure that contains information about which portion of the loop completed.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})">
      <summary>Executes a <see langword="for" /> loop with 64-bit indexes in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</summary>
      <param name="fromInclusive">The start index, inclusive.</param>
      <param name="toExclusive">The end index, exclusive.</param>
      <param name="parallelOptions">An object that configures the behavior of this operation.</param>
      <param name="body">The delegate that is invoked once per iteration.</param>
      <exception cref="T:System.OperationCanceledException">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="body" /> argument is <see langword="null" />.  
  
 -or-  
  
 The <paramref name="parallelOptions" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.AggregateException">The exception that contains all the individual exceptions thrown on all threads.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</exception>
      <returns>A structure that contains information about which portion of the loop completed.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64})">
      <summary>Executes a <see langword="for" /> loop with 64-bit indexes in which iterations may run in parallel and loop options can be configured.</summary>
      <param name="fromInclusive">The start index, inclusive.</param>
      <param name="toExclusive">The end index, exclusive.</param>
      <param name="parallelOptions">An object that configures the behavior of this operation.</param>
      <param name="body">The delegate that is invoked once per iteration.</param>
      <exception cref="T:System.OperationCanceledException">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="body" /> argument is <see langword="null" />.  
  
 -or-  
  
 The <paramref name="parallelOptions" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.AggregateException">The exception that contains all the individual exceptions thrown on all threads.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</exception>
      <returns>A structure that contains information about which portion of the loop completed.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})">
      <summary>Executes a <see langword="for" /> loop with thread-local data in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</summary>
      <param name="fromInclusive">The start index, inclusive.</param>
      <param name="toExclusive">The end index, exclusive.</param>
      <param name="localInit">The function delegate that returns the initial state of the local data for each task.</param>
      <param name="body">The delegate that is invoked once per iteration.</param>
      <param name="localFinally">The delegate that performs a final action on the local state of each task.</param>
      <typeparam name="TLocal">The type of the thread-local data.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="body" /> argument is <see langword="null" />.  
  
 -or-  
  
 The <paramref name="localInit" /> argument is <see langword="null" />.  
  
 -or-  
  
 The <paramref name="localFinally" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.AggregateException">The exception that contains all the individual exceptions thrown on all threads.</exception>
      <returns>A  structure that contains information about which portion of the loop completed.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})">
      <summary>Executes a <see langword="for" /> loop with thread-local data in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</summary>
      <param name="fromInclusive">The start index, inclusive.</param>
      <param name="toExclusive">The end index, exclusive.</param>
      <param name="parallelOptions">An object that configures the behavior of this operation.</param>
      <param name="localInit">The function delegate that returns the initial state of the local data for each task.</param>
      <param name="body">The delegate that is invoked once per iteration.</param>
      <param name="localFinally">The delegate that performs a final action on the local state of each task.</param>
      <typeparam name="TLocal">The type of the thread-local data.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="body" /> argument is <see langword="null" />.  
  
 -or-  
  
 The <paramref name="localInit" /> argument is <see langword="null" />.  
  
 -or-  
  
 The <paramref name="localFinally" /> argument is <see langword="null" />.  
  
 -or-  
  
 The <paramref name="parallelOptions" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.OperationCanceledException">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</exception>
      <exception cref="T:System.AggregateException">The exception that contains all the individual exceptions thrown on all threads.</exception>
      <returns>A structure that contains information about which portion of the loop completed.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})">
      <summary>Executes a <see langword="for" /> loop with 64-bit indexes and thread-local data in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</summary>
      <param name="fromInclusive">The start index, inclusive.</param>
      <param name="toExclusive">The end index, exclusive.</param>
      <param name="localInit">The function delegate that returns the initial state of the local data for each task.</param>
      <param name="body">The delegate that is invoked once per iteration.</param>
      <param name="localFinally">The delegate that performs a final action on the local state of each task.</param>
      <typeparam name="TLocal">The type of the thread-local data.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="body" /> argument is <see langword="null" />.  
  
 -or-  
  
 The <paramref name="localInit" /> argument is <see langword="null" />.  
  
 -or-  
  
 The <paramref name="localFinally" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.AggregateException">The exception that contains all the individual exceptions thrown on all threads.</exception>
      <returns>A structure that contains information about which portion of the loop completed.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})">
      <summary>Executes a <see langword="for" /> loop with 64-bit indexes and thread-local data in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</summary>
      <param name="fromInclusive">The start index, inclusive.</param>
      <param name="toExclusive">The end index, exclusive.</param>
      <param name="parallelOptions">An object that configures the behavior of this operation.</param>
      <param name="localInit">The function delegate that returns the initial state of the local data for each thread.</param>
      <param name="body">The delegate that is invoked once per iteration.</param>
      <param name="localFinally">The delegate that performs a final action on the local state of each thread.</param>
      <typeparam name="TLocal">The type of the thread-local data.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="body" /> argument is <see langword="null" />.  
  
 -or-  
  
 The <paramref name="localInit" /> argument is <see langword="null" />.  
  
 -or-  
  
 The <paramref name="localFinally" /> argument is <see langword="null" />.  
  
 -or-  
  
 The <paramref name="parallelOptions" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.OperationCanceledException">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</exception>
      <exception cref="T:System.AggregateException">The exception that contains all the individual exceptions thrown on all threads.</exception>
      <returns>A structure that contains information about which portion of the loop completed.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})">
      <summary>Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on a <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</summary>
      <param name="source">The orderable partitioner that contains the original data source.</param>
      <param name="body">The delegate that is invoked once per iteration.</param>
      <typeparam name="TSource">The type of the elements in <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="source" /> argument is <see langword="null" />.  
  
 -or-  
  
 The <paramref name="body" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /> orderable partitioner returns <see langword="false" />.  
  
 -or-  
  
 The <see cref="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized" /> property in the source orderable partitioner returns <see langword="false" />.  
  
 -or-  
  
 Any methods in the source orderable partitioner return <see langword="null" />.</exception>
      <exception cref="T:System.AggregateException">The exception thrown from one of the specified delegates.</exception>
      <returns>A structure that contains information about which portion of the loop completed.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})">
      <summary>Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on a <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</summary>
      <param name="source">The orderable partitioner that contains the original data source.</param>
      <param name="parallelOptions">An object that configures the behavior of this operation.</param>
      <param name="body">The delegate that is invoked once per iteration.</param>
      <typeparam name="TSource">The type of the elements in <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="source" /> argument is  <see langword="null" />.  
  
 -or-  
  
 The <paramref name="parallelOptions" /> argument is <see langword="null" />.  
  
 -or-  
  
 The <paramref name="body" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /> orderable partitioner returns <see langword="false" />.  
  
 -or-  
  
 The <see cref="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized" /> property in the <paramref name="source" /> orderable partitioner returns <see langword="false" />.  
  
 -or-  
  
 The exception that is thrown when any methods in the <paramref name="source" /> orderable partitioner return <see langword="null" />.</exception>
      <exception cref="T:System.AggregateException">The exception that is thrown to contain an exception thrown from one of the specified delegates.</exception>
      <returns>A structure that contains information about which portion of the loop completed.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})">
      <summary>Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on a <see cref="T:System.Collections.Concurrent.Partitioner" /> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</summary>
      <param name="source">The partitioner that contains the original data source.</param>
      <param name="body">The delegate that is invoked once per iteration.</param>
      <typeparam name="TSource">The type of the elements in <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="source" /> argument is <see langword="null" />.  
  
 -or-  
  
 The <paramref name="body" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /> partitioner returns <see langword="false" />.  
  
 -or-  
  
 A method in the <paramref name="source" /> partitioner returns <see langword="null" />.  
  
 -or-  
  
 The <see cref="M:System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)" /> method in the <paramref name="source" /> partitioner does not return the correct number of partitions.</exception>
      <exception cref="T:System.AggregateException">The exception that is thrown to contain an exception thrown from one of the specified delegates.</exception>
      <returns>A structure that contains information about which portion of the loop completed.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})">
      <summary>Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on a <see cref="T:System.Collections.Concurrent.Partitioner" /> in which iterations may run in parallel.</summary>
      <param name="source">The partitioner that contains the original data source.</param>
      <param name="body">The delegate that is invoked once per iteration.</param>
      <typeparam name="TSource">The type of the elements in <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="source" /> argument is  <see langword="null" />.  
  
 -or-  
  
 The <paramref name="body" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /> partitioner returns <see langword="false" />.  
  
 -or-  
  
 The exception that is thrown when any methods in the <paramref name="source" /> partitioner return <see langword="null" />.  
  
 -or-  
  
 The <see cref="M:System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)" /> method in the <paramref name="source" /> partitioner does not return the correct number of partitions.</exception>
      <exception cref="T:System.AggregateException">The exception that is thrown to contain an exception thrown from one of the specified delegates.</exception>
      <returns>A structure that contains information about which portion of the loop completed.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})">
      <summary>Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on a <see cref="T:System.Collections.Concurrent.Partitioner" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</summary>
      <param name="source">The partitioner that contains the original data source.</param>
      <param name="parallelOptions">An object that configures the behavior of this operation.</param>
      <param name="body">The delegate that is invoked once per iteration.</param>
      <typeparam name="TSource">The type of the elements in <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="source" /> argument is <see langword="null" />.  
  
 -or-  
  
 The <paramref name="parallelOptions" /> argument is <see langword="null" />.  
  
 -or-  
  
 The <paramref name="body" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /> partitioner returns <see langword="false" />.  
  
 -or-  
  
 The exception that is thrown when any methods in the <paramref name="source" /> partitioner return <see langword="null" />.</exception>
      <exception cref="T:System.AggregateException">The exception that is thrown to contain an exception thrown from one of the specified delegates.</exception>
      <returns>A  structure that contains information about which portion of the loop completed.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})">
      <summary>Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on a <see cref="T:System.Collections.Concurrent.Partitioner" /> in which iterations may run in parallel and loop options can be configured.</summary>
      <param name="source">The partitioner that contains the original data source.</param>
      <param name="parallelOptions">An object that configures the behavior of this operation.</param>
      <param name="body">The delegate that is invoked once per iteration.</param>
      <typeparam name="TSource">The type of the elements in <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="source" /> argument is <see langword="null" />.  
  
 -or-  
  
 The <paramref name="parallelOptions" /> argument is <see langword="null" />.  
  
 -or-  
  
 The <paramref name="body" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /> partitioner returns <see langword="false" />.  
  
 -or-  
  
 The exception that is thrown when any methods in the <paramref name="source" /> partitioner return <see langword="null" />.</exception>
      <exception cref="T:System.AggregateException">The exception that is thrown to contain an exception thrown from one of the specified delegates.</exception>
      <returns>A structure that contains information about which portion of the loop completed.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})">
      <summary>Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with 64-bit indexes on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</summary>
      <param name="source">An enumerable data source.</param>
      <param name="body">The delegate that is invoked once per iteration.</param>
      <typeparam name="TSource">The type of the data in the source.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="source" /> argument is <see langword="null" />.  
  
 -or-  
  
 The <paramref name="body" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.AggregateException">The exception that contains all the individual exceptions thrown on all threads.</exception>
      <returns>A structure that contains information about which portion of the loop completed.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})">
      <summary>Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</summary>
      <param name="source">An enumerable data source.</param>
      <param name="body">The delegate that is invoked once per iteration.</param>
      <typeparam name="TSource">The type of the data in the source.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="source" /> argument is <see langword="null" />.  
  
 -or-  
  
 The <paramref name="body" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.AggregateException">The exception that contains all the individual exceptions thrown on all threads.</exception>
      <returns>A structure that contains information about which portion of the loop completed.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
      <summary>Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel.</summary>
      <param name="source">An enumerable data source.</param>
      <param name="body">The delegate that is invoked once per iteration.</param>
      <typeparam name="TSource">The type of the data in the source.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="source" /> argument is <see langword="null" />.  
  
 -or-  
  
 The <paramref name="body" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.AggregateException">The exception that contains all the individual exceptions thrown on all threads.</exception>
      <returns>A structure that contains information about which portion of the loop completed.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})">
      <summary>Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with 64-bit indexes on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</summary>
      <param name="source">An enumerable data source.</param>
      <param name="parallelOptions">An object that configures the behavior of this operation.</param>
      <param name="body">The delegate that is invoked once per iteration.</param>
      <typeparam name="TSource">The type of the data in the source.</typeparam>
      <exception cref="T:System.OperationCanceledException">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="source" /> argument is <see langword="null" />.  
  
 -or-  
  
 The <paramref name="parallelOptions" /> argument is <see langword="null" />.  
  
 -or-  
  
 The <paramref name="body" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.AggregateException">The exception that contains all the individual exceptions thrown on all threads.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</exception>
      <returns>A structure that contains information about which portion of the loop completed.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})">
      <summary>Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</summary>
      <param name="source">An enumerable data source.</param>
      <param name="parallelOptions">An object that configures the behavior of this operation.</param>
      <param name="body">The delegate that is invoked once per iteration.</param>
      <typeparam name="TSource">The type of the data in the source.</typeparam>
      <exception cref="T:System.OperationCanceledException">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="source" /> argument is <see langword="null" />.  
  
 -or-  
  
 The <paramref name="parallelOptions" /> argument is <see langword="null" />.  
  
 -or-  
  
 The <paramref name="body" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.AggregateException">The exception that contains all the individual exceptions thrown on all threads.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</exception>
      <returns>A structure that contains information about which portion of the loop completed.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})">
      <summary>Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel and loop options can be configured.</summary>
      <param name="source">An enumerable data source.</param>
      <param name="parallelOptions">An object that configures the behavior of this operation.</param>
      <param name="body">The delegate that is invoked once per iteration.</param>
      <typeparam name="TSource">The type of the data in the source.</typeparam>
      <exception cref="T:System.OperationCanceledException">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="source" /> argument is <see langword="null" />.  
  
 -or-  
  
 The <paramref name="parallelOptions" /> argument is <see langword="null" />.  
  
 -or-  
  
 The <paramref name="body" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.AggregateException">The exception that contains all the individual exceptions thrown on all threads.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</exception>
      <returns>A structure that contains information about which portion of the loop completed.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})">
      <summary>Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with thread-local data on a <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</summary>
      <param name="source">The orderable partitioner that contains the original data source.</param>
      <param name="localInit">The function delegate that returns the initial state of the local data for each task.</param>
      <param name="body">The delegate that is invoked once per iteration.</param>
      <param name="localFinally">The delegate that performs a final action on the local state of each task.</param>
      <typeparam name="TSource">The type of the elements in <paramref name="source" />.</typeparam>
      <typeparam name="TLocal">The type of the thread-local data.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="source" /> argument is <see langword="null" />.  
  
 -or-  
  
 The <paramref name="body" /> argument is <see langword="null" />.  
  
 -or-  
  
 The <paramref name="localInit" /> argument is <see langword="null" />.  
  
 -or-  
  
 The <paramref name="localFinally" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> returns <see langword="false" /> or the partitioner returns <see langword="null" /> partitions.</exception>
      <exception cref="T:System.AggregateException">The exception that contains all the individual exceptions thrown on all threads.</exception>
      <returns>A structure that contains information about which portion of the loop completed.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})">
      <summary>Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with 64-bit indexes and  with thread-local data on a <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> in which iterations may run in parallel , loop options can be configured, and the state of the loop can be monitored and manipulated.</summary>
      <param name="source">The orderable partitioner that contains the original data source.</param>
      <param name="parallelOptions">An object that configures the behavior of this operation.</param>
      <param name="localInit">The function delegate that returns the initial state of the local data for each task.</param>
      <param name="body">The delegate that is invoked once per iteration.</param>
      <param name="localFinally">The delegate that performs a final action on the local state of each task.</param>
      <typeparam name="TSource">The type of the elements in <paramref name="source" />.</typeparam>
      <typeparam name="TLocal">The type of the thread-local data.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="source" /> argument is <see langword="null" />.  
  
 -or-  
  
 The <paramref name="parallelOptions" /> argument is <see langword="null" />.  
  
 -or-  
  
 The <paramref name="body" /> argument is <see langword="null" />.  
  
 -or-  
  
 The <paramref name="localInit" /> or <paramref name="localFinally" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> returns <see langword="false" /> or the partitioner returns <see langword="null" /> partitions.</exception>
      <exception cref="T:System.AggregateException">The exception that contains all the individual exceptions thrown on all threads.</exception>
      <exception cref="T:System.OperationCanceledException">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</exception>
      <returns>A structure that contains information about which portion of the loop completed.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})">
      <summary>Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with thread-local data on a <see cref="T:System.Collections.Concurrent.Partitioner" /> in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</summary>
      <param name="source">The partitioner that contains the original data source.</param>
      <param name="localInit">The function delegate that returns the initial state of the local data for each task.</param>
      <param name="body">The delegate that is invoked once per iteration.</param>
      <param name="localFinally">The delegate that performs a final action on the local state of each task.</param>
      <typeparam name="TSource">The type of the elements in <paramref name="source" />.</typeparam>
      <typeparam name="TLocal">The type of the thread-local data.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="source" /> argument is <see langword="null" />.  
  
 -or-  
  
 The <paramref name="body" /> argument is <see langword="null" />.  
  
 -or-  
  
 The <paramref name="localInit" /> argument is <see langword="null" />.  
  
 -or-  
  
 The <paramref name="localFinally" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> returns <see langword="false" /> or the partitioner returns <see langword="null" /> partitions.</exception>
      <exception cref="T:System.AggregateException">The exception that contains all the individual exceptions thrown on all threads.</exception>
      <returns>A structure that contains information about which portion of the loop completed.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})">
      <summary>Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation  with thread-local data on a <see cref="T:System.Collections.Concurrent.Partitioner" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</summary>
      <param name="source">The partitioner that contains the original data source.</param>
      <param name="parallelOptions">An object that configures the behavior of this operation.</param>
      <param name="localInit">The function delegate that returns the initial state of the local data for each task.</param>
      <param name="body">The delegate that is invoked once per iteration.</param>
      <param name="localFinally">The delegate that performs a final action on the local state of each task.</param>
      <typeparam name="TSource">The type of the elements in <paramref name="source" />.</typeparam>
      <typeparam name="TLocal">The type of the thread-local data.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="source" /> argument is <see langword="null" />.  
  
 -or-  
  
 The <paramref name="parallelOptions" /> argument is <see langword="null" />.  
  
 -or-  
  
 The <paramref name="body" /> argument is <see langword="null" />.  
  
 -or-  
  
 The <paramref name="localInit" /> argument is <see langword="null" />.  
  
 -or-  
  
 The <paramref name="localFinally" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> returns <see langword="false" /> or the partitioner returns <see langword="null" /> partitions.</exception>
      <exception cref="T:System.AggregateException">The exception that contains all the individual exceptions thrown on all threads.</exception>
      <exception cref="T:System.OperationCanceledException">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</exception>
      <returns>A structure that contains information about which portion of the loop completed.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})">
      <summary>Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with thread-local data on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</summary>
      <param name="source">An enumerable data source.</param>
      <param name="localInit">The function delegate that returns the initial state of the local data for each task.</param>
      <param name="body">The delegate that is invoked once per iteration.</param>
      <param name="localFinally">The delegate that performs a final action on the local state of each task.</param>
      <typeparam name="TSource">The type of the data in the source.</typeparam>
      <typeparam name="TLocal">The type of the thread-local data.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="source" /> argument is <see langword="null" />.  
  
 -or-  
  
 The <paramref name="body" /> argument is <see langword="null" />.  
  
 -or-  
  
 The <paramref name="localInit" /> argument is <see langword="null" />.  
  
 -or-  
  
 The <paramref name="localFinally" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.AggregateException">The exception that contains all the individual exceptions thrown on all threads.</exception>
      <returns>A structure that contains information about which portion of the loop completed.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})">
      <summary>Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with thread-local data on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</summary>
      <param name="source">An enumerable data source.</param>
      <param name="localInit">The function delegate that returns the initial state of the local data for each task.</param>
      <param name="body">The delegate that is invoked once per iteration.</param>
      <param name="localFinally">The delegate that performs a final action on the local state of each task.</param>
      <typeparam name="TSource">The type of the data in the source.</typeparam>
      <typeparam name="TLocal">The type of the thread-local data.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="source" /> argument is <see langword="null" />.  
  
 -or-  
  
 The <paramref name="body" /> argument is <see langword="null" />.  
  
 -or-  
  
 The <paramref name="localInit" /> argument is <see langword="null" />.  
  
 -or-  
  
 The <paramref name="localFinally" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.AggregateException">The exception that contains all the individual exceptions thrown on all threads.</exception>
      <returns>A structure that contains information about which portion of the loop completed.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})">
      <summary>Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with thread-local data on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</summary>
      <param name="source">An enumerable data source.</param>
      <param name="parallelOptions">An object that configures the behavior of this operation.</param>
      <param name="localInit">The function delegate that returns the initial state of the local data for each task.</param>
      <param name="body">The delegate that is invoked once per iteration.</param>
      <param name="localFinally">The delegate that performs a final action on the local state of each task.</param>
      <typeparam name="TSource">The type of the data in the source.</typeparam>
      <typeparam name="TLocal">The type of the thread-local data.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="source" /> argument is <see langword="null" />.  
  
 -or-  
  
 The <paramref name="parallelOptions" /> argument is <see langword="null" />.  
  
 -or-  
  
 The <paramref name="body" /> argument is <see langword="null" />.  
  
 -or-  
  
 The <paramref name="localInit" /> argument is <see langword="null" />.  
  
 -or-  
  
 The <paramref name="localFinally" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.OperationCanceledException">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</exception>
      <exception cref="T:System.AggregateException">The exception that contains all the individual exceptions thrown on all threads.</exception>
      <returns>A structure that contains information about which portion of the loop completed.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})">
      <summary>Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with thread-local data and 64-bit indexes on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</summary>
      <param name="source">An enumerable data source.</param>
      <param name="parallelOptions">An object that configures the behavior of this operation.</param>
      <param name="localInit">The function delegate that returns the initial state of the local data for each task.</param>
      <param name="body">The delegate that is invoked once per iteration.</param>
      <param name="localFinally">The delegate that performs a final action on the local state of each task.</param>
      <typeparam name="TSource">The type of the data in the source.</typeparam>
      <typeparam name="TLocal">The type of the thread-local data.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="source" /> argument is <see langword="null" />.  
  
 -or-  
  
 The <paramref name="parallelOptions" /> argument is <see langword="null" />.  
  
 -or-  
  
 The <paramref name="body" /> argument is <see langword="null" />.  
  
 -or-  
  
 The <paramref name="localInit" /> argument is <see langword="null" />.  
  
 -or-  
  
 The <paramref name="localFinally" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.OperationCanceledException">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</exception>
      <exception cref="T:System.AggregateException">The exception that contains all the individual exceptions thrown on all threads.</exception>
      <returns>A structure that contains information about which portion of the loop completed.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.Invoke(System.Action[])">
      <summary>Executes each of the provided actions, possibly in parallel.</summary>
      <param name="actions">An array of <see cref="T:System.Action" /> to execute.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="actions" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.AggregateException">The exception that is thrown when any action in the <paramref name="actions" /> array throws an exception.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="actions" /> array contains a <see langword="null" /> element.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.Invoke(System.Threading.Tasks.ParallelOptions,System.Action[])">
      <summary>Executes each of the provided actions, possibly in parallel, unless the operation is cancelled by the user.</summary>
      <param name="parallelOptions">An object that configures the behavior of this operation.</param>
      <param name="actions">An array of actions to execute.</param>
      <exception cref="T:System.OperationCanceledException">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> is set.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="actions" /> argument is <see langword="null" />.  
  
 -or-  
  
 The <paramref name="parallelOptions" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.AggregateException">The exception that is thrown when any action in the <paramref name="actions" /> array throws an exception.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="actions" /> array contains a <see langword="null" /> element.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</exception>
    </member>
    <member name="T:System.Threading.Tasks.ParallelLoopResult">
      <summary>Provides completion status on the execution of a <see cref="T:System.Threading.Tasks.Parallel" /> loop.</summary>
    </member>
    <member name="P:System.Threading.Tasks.ParallelLoopResult.IsCompleted">
      <summary>Gets whether the loop ran to completion, such that all iterations of the loop were executed and the loop didn't receive a request to end prematurely.</summary>
      <returns>true if the loop ran to completion; otherwise false;</returns>
    </member>
    <member name="P:System.Threading.Tasks.ParallelLoopResult.LowestBreakIteration">
      <summary>Gets the index of the lowest iteration from which <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> was called.</summary>
      <returns>Returns an integer that represents the lowest iteration from which the Break statement was called.</returns>
    </member>
    <member name="T:System.Threading.Tasks.ParallelLoopState">
      <summary>Enables iterations of parallel loops to interact with other iterations. An instance of this class is provided by the <see cref="T:System.Threading.Tasks.Parallel" /> class to each loop; you can not create instances in your code.</summary>
    </member>
    <member name="M:System.Threading.Tasks.ParallelLoopState.Break">
      <summary>Communicates that the <see cref="T:System.Threading.Tasks.Parallel" /> loop should cease execution of iterations beyond the current iteration at the system's earliest convenience.</summary>
      <exception cref="T:System.InvalidOperationException">The <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> method was previously called. <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> and <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> may not be used in combination by iterations of the same loop.</exception>
    </member>
    <member name="M:System.Threading.Tasks.ParallelLoopState.Stop">
      <summary>Communicates that the <see cref="T:System.Threading.Tasks.Parallel" /> loop should cease execution at the system's earliest convenience.</summary>
      <exception cref="T:System.InvalidOperationException">The <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> method was called previously. <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> and <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> may not be used in combination by iterations of the same loop.</exception>
    </member>
    <member name="P:System.Threading.Tasks.ParallelLoopState.IsExceptional">
      <summary>Gets whether any iteration of the loop has thrown an exception that went unhandled by that iteration.</summary>
      <returns>
        <see langword="true" /> if an unhandled exception was thrown; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Threading.Tasks.ParallelLoopState.IsStopped">
      <summary>Gets whether any iteration of the loop has called the <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> method.</summary>
      <returns>
        <see langword="true" /> if any iteration has stopped the loop by calling the <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> method; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
      <summary>Gets the lowest iteration of the loop from which <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> was called.</summary>
      <returns>The lowest iteration from which <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> was called. In the case of a <see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" /> loop, the value is based on an internally-generated index.</returns>
    </member>
    <member name="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration">
      <summary>Gets whether the current iteration of the loop should exit based on requests made by this or other iterations.</summary>
      <returns>
        <see langword="true" /> if the current iteration should exit; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Threading.Tasks.ParallelOptions">
      <summary>Stores options that configure the operation of methods on the <see cref="T:System.Threading.Tasks.Parallel" /> class.</summary>
    </member>
    <member name="M:System.Threading.Tasks.ParallelOptions.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Tasks.ParallelOptions" /> class.</summary>
    </member>
    <member name="P:System.Threading.Tasks.ParallelOptions.CancellationToken">
      <summary>Gets or sets the <see cref="T:System.Threading.CancellationToken" /> associated with this <see cref="T:System.Threading.Tasks.ParallelOptions" /> instance.</summary>
      <returns>The token that is associated with this instance.</returns>
    </member>
    <member name="P:System.Threading.Tasks.ParallelOptions.MaxDegreeOfParallelism">
      <summary>Gets or sets the maximum number of concurrent tasks enabled by this <see cref="T:System.Threading.Tasks.ParallelOptions" /> instance.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">The property is being set to zero or to a value that is less than -1.</exception>
      <returns>An integer that represents the maximum degree of parallelism.</returns>
    </member>
    <member name="P:System.Threading.Tasks.ParallelOptions.TaskScheduler">
      <summary>Gets or sets the <see cref="T:System.Threading.Tasks.TaskScheduler" /> associated with this <see cref="T:System.Threading.Tasks.ParallelOptions" /> instance. Setting this property to null indicates that the current scheduler should be used.</summary>
      <returns>The task scheduler that is associated with this instance.</returns>
    </member>
    <member name="T:System.Threading.ThreadLocal`1">
      <summary>Provides thread-local storage of data.</summary>
      <typeparam name="T">Specifies the type of data stored per-thread.</typeparam>
    </member>
    <member name="M:System.Threading.ThreadLocal`1.#ctor">
      <summary>Initializes the <see cref="T:System.Threading.ThreadLocal`1" /> instance.</summary>
    </member>
    <member name="M:System.Threading.ThreadLocal`1.#ctor(System.Boolean)">
      <summary>Initializes the <see cref="T:System.Threading.ThreadLocal`1" /> instance and specifies whether all values are accessible from any thread.</summary>
      <param name="trackAllValues">
        <see langword="true" /> to track all values set on the instance and expose them through the <see cref="P:System.Threading.ThreadLocal`1.Values" /> property; <see langword="false" /> otherwise.</param>
    </member>
    <member name="M:System.Threading.ThreadLocal`1.#ctor(System.Func{`0})">
      <summary>Initializes the <see cref="T:System.Threading.ThreadLocal`1" /> instance with the specified <paramref name="valueFactory" /> function.</summary>
      <param name="valueFactory">The  <see cref="T:System.Func`1" /> invoked to produce a lazily-initialized value when an attempt is made to retrieve <see cref="P:System.Threading.ThreadLocal`1.Value" /> without it having been previously initialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="valueFactory" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Threading.ThreadLocal`1.#ctor(System.Func{`0},System.Boolean)">
      <summary>Initializes the <see cref="T:System.Threading.ThreadLocal`1" /> instance with the specified <paramref name="valueFactory" /> function and a flag that indicates whether all values are accessible from any thread.</summary>
      <param name="valueFactory">The <see cref="T:System.Func`1" /> invoked to produce a lazily-initialized value when an attempt is made to retrieve <see cref="P:System.Threading.ThreadLocal`1.Value" /> without it having been previously initialized.</param>
      <param name="trackAllValues">
        <see langword="true" /> to track all values set on the instance and expose them through the <see cref="P:System.Threading.ThreadLocal`1.Values" /> property; <see langword="false" /> otherwise.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="valueFactory" /> is a <see langword="null" /> reference (<see langword="Nothing" /> in Visual Basic).</exception>
    </member>
    <member name="M:System.Threading.ThreadLocal`1.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.Threading.ThreadLocal`1" /> class.</summary>
    </member>
    <member name="M:System.Threading.ThreadLocal`1.Dispose(System.Boolean)">
      <summary>Releases the resources used by this <see cref="T:System.Threading.ThreadLocal`1" /> instance.</summary>
      <param name="disposing">A Boolean value that indicates whether this method is being called due to a call to <see cref="M:System.Threading.ThreadLocal`1.Dispose" />.</param>
    </member>
    <member name="M:System.Threading.ThreadLocal`1.Finalize">
      <summary>Releases the resources used by this <see cref="T:System.Threading.ThreadLocal`1" /> instance.</summary>
    </member>
    <member name="M:System.Threading.ThreadLocal`1.ToString">
      <summary>Creates and returns a string representation of this instance for the current thread.</summary>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.ThreadLocal`1" /> instance has been disposed.</exception>
      <exception cref="T:System.NullReferenceException">The <see cref="P:System.Threading.ThreadLocal`1.Value" /> for the current thread is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">The initialization function attempted to reference <see cref="P:System.Threading.ThreadLocal`1.Value" /> recursively.</exception>
      <exception cref="T:System.MissingMemberException">No parameterless constructor is provided and no value factory is supplied.</exception>
      <returns>The result of calling <see cref="M:System.Object.ToString" /> on the <see cref="P:System.Threading.ThreadLocal`1.Value" />.</returns>
    </member>
    <member name="P:System.Threading.ThreadLocal`1.IsValueCreated">
      <summary>Gets whether <see cref="P:System.Threading.ThreadLocal`1.Value" /> is initialized on the current thread.</summary>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.ThreadLocal`1" /> instance has been disposed.</exception>
      <returns>true if <see cref="P:System.Threading.ThreadLocal`1.Value" /> is initialized on the current thread; otherwise false.</returns>
    </member>
    <member name="P:System.Threading.ThreadLocal`1.Value">
      <summary>Gets or sets the value of this instance for the current thread.</summary>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.ThreadLocal`1" /> instance has been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The initialization function attempted to reference <see cref="P:System.Threading.ThreadLocal`1.Value" /> recursively.</exception>
      <exception cref="T:System.MissingMemberException">No parameterless constructor is provided and no value factory is supplied.</exception>
      <returns>Returns an instance of the object that this ThreadLocal is responsible for initializing.</returns>
    </member>
    <member name="P:System.Threading.ThreadLocal`1.Values">
      <summary>Gets a list for all of the values currently stored by all of the threads that have accessed this instance.</summary>
      <exception cref="T:System.InvalidOperationException">Values stored by all threads are not available because this instance was initialized with the <paramref name="trackAllValues" /> argument set to <see langword="false" /> in the call to a class constructor.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.ThreadLocal`1" /> instance has been disposed.</exception>
      <returns>A list for all of the values currently stored by all of the threads that have accessed this instance.</returns>
    </member>
    <member name="T:System.Threading.Timeout">
      <summary>Contains constants that specify infinite time-out intervals. This class cannot be inherited.</summary>
    </member>
    <member name="F:System.Threading.Timeout.Infinite">
      <summary>A constant used to specify an infinite waiting period, for threading methods that accept an <see cref="T:System.Int32" /> parameter.</summary>
    </member>
    <member name="F:System.Threading.Timeout.InfiniteTimeSpan">
      <summary>A constant used to specify an infinite waiting period, for methods that accept a <see cref="T:System.TimeSpan" /> parameter.</summary>
    </member>
    <member name="T:System.Threading.Volatile">
      <summary>Contains methods for performing volatile memory operations.</summary>
    </member>
    <member name="M:System.Threading.Volatile.Read(System.Boolean@)">
      <summary>Reads the value of the specified field. On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</summary>
      <param name="location">The field to read.</param>
      <returns>The value that was read. This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</returns>
    </member>
    <member name="M:System.Threading.Volatile.Read(System.Byte@)">
      <summary>Reads the value of the specified field. On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</summary>
      <param name="location">The field to read.</param>
      <returns>The value that was read. This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</returns>
    </member>
    <member name="M:System.Threading.Volatile.Read(System.Double@)">
      <summary>Reads the value of the specified field. On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</summary>
      <param name="location">The field to read.</param>
      <returns>The value that was read. This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</returns>
    </member>
    <member name="M:System.Threading.Volatile.Read(System.Int16@)">
      <summary>Reads the value of the specified field. On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</summary>
      <param name="location">The field to read.</param>
      <returns>The value that was read. This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</returns>
    </member>
    <member name="M:System.Threading.Volatile.Read(System.Int32@)">
      <summary>Reads the value of the specified field. On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</summary>
      <param name="location">The field to read.</param>
      <returns>The value that was read. This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</returns>
    </member>
    <member name="M:System.Threading.Volatile.Read(System.Int64@)">
      <summary>Reads the value of the specified field. On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</summary>
      <param name="location">The field to read.</param>
      <returns>The value that was read. This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</returns>
    </member>
    <member name="M:System.Threading.Volatile.Read(System.IntPtr@)">
      <summary>Reads the value of the specified field. On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</summary>
      <param name="location">The field to read.</param>
      <returns>The value that was read. This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</returns>
    </member>
    <member name="M:System.Threading.Volatile.Read(System.SByte@)">
      <summary>Reads the value of the specified field. On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</summary>
      <param name="location">The field to read.</param>
      <returns>The value that was read. This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</returns>
    </member>
    <member name="M:System.Threading.Volatile.Read(System.Single@)">
      <summary>Reads the value of the specified field. On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</summary>
      <param name="location">The field to read.</param>
      <returns>The value that was read. This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</returns>
    </member>
    <member name="M:System.Threading.Volatile.Read(System.UInt16@)">
      <summary>Reads the value of the specified field. On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</summary>
      <param name="location">The field to read.</param>
      <returns>The value that was read. This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</returns>
    </member>
    <member name="M:System.Threading.Volatile.Read(System.UInt32@)">
      <summary>Reads the value of the specified field. On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</summary>
      <param name="location">The field to read.</param>
      <returns>The value that was read. This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</returns>
    </member>
    <member name="M:System.Threading.Volatile.Read(System.UInt64@)">
      <summary>Reads the value of the specified field. On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</summary>
      <param name="location">The field to read.</param>
      <returns>The value that was read. This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</returns>
    </member>
    <member name="M:System.Threading.Volatile.Read(System.UIntPtr@)">
      <summary>Reads the value of the specified field. On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</summary>
      <param name="location">The field to read.</param>
      <returns>The value that was read. This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</returns>
    </member>
    <member name="M:System.Threading.Volatile.Read``1(``0@)">
      <summary>Reads the object reference from the specified field. On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</summary>
      <param name="location">The field to read.</param>
      <typeparam name="T">The type of field to read. This must be a reference type, not a value type.</typeparam>
      <returns>The reference to <paramref name="T" /> that was read. This reference is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</returns>
    </member>
    <member name="M:System.Threading.Volatile.Write(System.Boolean@,System.Boolean)">
      <summary>Writes the specified value to the specified field. On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</summary>
      <param name="location">The field where the value is written.</param>
      <param name="value">The value to write. The value is written immediately so that it is visible to all processors in the computer.</param>
    </member>
    <member name="M:System.Threading.Volatile.Write(System.Byte@,System.Byte)">
      <summary>Writes the specified value to the specified field. On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</summary>
      <param name="location">The field where the value is written.</param>
      <param name="value">The value to write. The value is written immediately so that it is visible to all processors in the computer.</param>
    </member>
    <member name="M:System.Threading.Volatile.Write(System.Double@,System.Double)">
      <summary>Writes the specified value to the specified field. On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</summary>
      <param name="location">The field where the value is written.</param>
      <param name="value">The value to write. The value is written immediately so that it is visible to all processors in the computer.</param>
    </member>
    <member name="M:System.Threading.Volatile.Write(System.Int16@,System.Int16)">
      <summary>Writes the specified value to the specified field. On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</summary>
      <param name="location">The field where the value is written.</param>
      <param name="value">The value to write. The value is written immediately so that it is visible to all processors in the computer.</param>
    </member>
    <member name="M:System.Threading.Volatile.Write(System.Int32@,System.Int32)">
      <summary>Writes the specified value to the specified field. On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</summary>
      <param name="location">The field where the value is written.</param>
      <param name="value">The value to write. The value is written immediately so that it is visible to all processors in the computer.</param>
    </member>
    <member name="M:System.Threading.Volatile.Write(System.Int64@,System.Int64)">
      <summary>Writes the specified value to the specified field. On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</summary>
      <param name="location">The field where the value is written.</param>
      <param name="value">The value to write. The value is written immediately so that it is visible to all processors in the computer.</param>
    </member>
    <member name="M:System.Threading.Volatile.Write(System.IntPtr@,System.IntPtr)">
      <summary>Writes the specified value to the specified field. On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</summary>
      <param name="location">The field where the value is written.</param>
      <param name="value">The value to write. The value is written immediately so that it is visible to all processors in the computer.</param>
    </member>
    <member name="M:System.Threading.Volatile.Write(System.SByte@,System.SByte)">
      <summary>Writes the specified value to the specified field. On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</summary>
      <param name="location">The field where the value is written.</param>
      <param name="value">The value to write. The value is written immediately so that it is visible to all processors in the computer.</param>
    </member>
    <member name="M:System.Threading.Volatile.Write(System.Single@,System.Single)">
      <summary>Writes the specified value to the specified field. On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</summary>
      <param name="location">The field where the value is written.</param>
      <param name="value">The value to write. The value is written immediately so that it is visible to all processors in the computer.</param>
    </member>
    <member name="M:System.Threading.Volatile.Write(System.UInt16@,System.UInt16)">
      <summary>Writes the specified value to the specified field. On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</summary>
      <param name="location">The field where the value is written.</param>
      <param name="value">The value to write. The value is written immediately so that it is visible to all processors in the computer.</param>
    </member>
    <member name="M:System.Threading.Volatile.Write(System.UInt32@,System.UInt32)">
      <summary>Writes the specified value to the specified field. On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</summary>
      <param name="location">The field where the value is written.</param>
      <param name="value">The value to write. The value is written immediately so that it is visible to all processors in the computer.</param>
    </member>
    <member name="M:System.Threading.Volatile.Write(System.UInt64@,System.UInt64)">
      <summary>Writes the specified value to the specified field. On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</summary>
      <param name="location">The field where the value is written.</param>
      <param name="value">The value to write. The value is written immediately so that it is visible to all processors in the computer.</param>
    </member>
    <member name="M:System.Threading.Volatile.Write(System.UIntPtr@,System.UIntPtr)">
      <summary>Writes the specified value to the specified field. On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</summary>
      <param name="location">The field where the value is written.</param>
      <param name="value">The value to write. The value is written immediately so that it is visible to all processors in the computer.</param>
    </member>
    <member name="M:System.Threading.Volatile.Write``1(``0@,``0)">
      <summary>Writes the specified object reference to the specified field. On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</summary>
      <param name="location">The field where the object reference is written.</param>
      <param name="value">The object reference to write. The reference is written immediately so that it is visible to all processors in the computer.</param>
      <typeparam name="T">The type of field to write. This must be a reference type, not a value type.</typeparam>
    </member>
    <member name="T:System.Threading.WaitHandle">
      <summary>Encapsulates operating system-specific objects that wait for exclusive access to shared resources.</summary>
    </member>
    <member name="F:System.Threading.WaitHandle.InvalidHandle">
      <summary>Represents an invalid native operating system handle. This field is read-only.</summary>
    </member>
    <member name="F:System.Threading.WaitHandle.WaitTimeout">
      <summary>Indicates that a <see cref="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)" /> operation timed out before any of the wait handles were signaled. This field is constant.</summary>
    </member>
    <member name="M:System.Threading.WaitHandle.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.WaitHandle" /> class.</summary>
    </member>
    <member name="M:System.Threading.WaitHandle.Close">
      <summary>Releases all resources held by the current <see cref="T:System.Threading.WaitHandle" />.</summary>
    </member>
    <member name="M:System.Threading.WaitHandle.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.Threading.WaitHandle" /> class.</summary>
    </member>
    <member name="M:System.Threading.WaitHandle.Dispose(System.Boolean)">
      <summary>When overridden in a derived class, releases the unmanaged resources used by the <see cref="T:System.Threading.WaitHandle" />, and optionally releases the managed resources.</summary>
      <param name="explicitDisposing">
        <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle)">
      <summary>Signals one <see cref="T:System.Threading.WaitHandle" /> and waits on another.</summary>
      <param name="toSignal">The <see cref="T:System.Threading.WaitHandle" /> to signal.</param>
      <param name="toWaitOn">The <see cref="T:System.Threading.WaitHandle" /> to wait on.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="toSignal" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="toWaitOn" /> is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">The method was called on a thread in <see cref="F:System.Threading.ApartmentState.STA" /> state.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="toSignal" /> is a semaphore, and it already has a full count.</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait completed because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <returns>
        <see langword="true" /> if both the signal and the wait complete successfully; if the wait does not complete, the method does not return.</returns>
    </member>
    <member name="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)">
      <summary>Signals one <see cref="T:System.Threading.WaitHandle" /> and waits on another, specifying a time-out interval as a 32-bit signed integer and specifying whether to exit the synchronization domain for the context before entering the wait.</summary>
      <param name="toSignal">The <see cref="T:System.Threading.WaitHandle" /> to signal.</param>
      <param name="toWaitOn">The <see cref="T:System.Threading.WaitHandle" /> to wait on.</param>
      <param name="millisecondsTimeout">An integer that represents the interval to wait. If the value is <see cref="F:System.Threading.Timeout.Infinite" />, that is, -1, the wait is infinite.</param>
      <param name="exitContext">
        <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="toSignal" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="toWaitOn" /> is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">The method is called on a thread in <see cref="F:System.Threading.ApartmentState.STA" /> state.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Threading.WaitHandle" /> cannot be signaled because it would exceed its maximum count.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait completed because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <returns>
        <see langword="true" /> if both the signal and the wait completed successfully, or <see langword="false" /> if the signal completed but the wait timed out.</returns>
    </member>
    <member name="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)">
      <summary>Signals one <see cref="T:System.Threading.WaitHandle" /> and waits on another, specifying the time-out interval as a <see cref="T:System.TimeSpan" /> and specifying whether to exit the synchronization domain for the context before entering the wait.</summary>
      <param name="toSignal">The <see cref="T:System.Threading.WaitHandle" /> to signal.</param>
      <param name="toWaitOn">The <see cref="T:System.Threading.WaitHandle" /> to wait on.</param>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that represents the interval to wait. If the value is -1, the wait is infinite.</param>
      <param name="exitContext">
        <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="toSignal" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="toWaitOn" /> is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">The method was called on a thread in <see cref="F:System.Threading.ApartmentState.STA" /> state.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="toSignal" /> is a semaphore, and it already has a full count.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> evaluates to a negative number of milliseconds other than -1.  
  
 -or-  
  
 <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait completed because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <returns>
        <see langword="true" /> if both the signal and the wait completed successfully, or <see langword="false" /> if the signal completed but the wait timed out.</returns>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])">
      <summary>Waits for all the elements in the specified array to receive a signal.</summary>
      <param name="waitHandles">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait. This array cannot contain multiple references to the same object.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="waitHandles" /> parameter is <see langword="null" />. -or-  
  
 One or more of the objects in the <paramref name="waitHandles" /> array are <see langword="null" />.  
  
 -or-  
  
 <paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 2.0 or later.</exception>
      <exception cref="T:System.DuplicateWaitObjectException">
        <block subset="none" type="note">
          <para>  
 In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.ArgumentException" />, instead.</para>
        </block>  
  
 The <paramref name="waitHandles" /> array contains elements that are duplicates.</exception>
      <exception cref="T:System.NotSupportedException">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.  
  
 -or-  
  
 The current thread is in <see cref="F:System.Threading.ApartmentState.STA" /> state, and <paramref name="waitHandles" /> contains more than one element.</exception>
      <exception cref="T:System.ApplicationException">
        <paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 1.0 or 1.1.</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait terminated because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
      <returns>
        <see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise the method never returns.</returns>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)">
      <summary>Waits for all the elements in the specified array to receive a signal, using an <see cref="T:System.Int32" /> value to specify the time interval.</summary>
      <param name="waitHandles">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait. This array cannot contain multiple references to the same object (duplicates).</param>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="waitHandles" /> parameter is <see langword="null" />.  
  
 -or-  
  
 One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.  
  
 -or-  
  
 <paramref name="waitHandles" /> is an array with no elements.</exception>
      <exception cref="T:System.DuplicateWaitObjectException">
        <block subset="none" type="note">
          <para>  
 In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.ArgumentException" />, instead.</para>
        </block>  
  
 The <paramref name="waitHandles" /> array contains elements that are duplicates.</exception>
      <exception cref="T:System.NotSupportedException">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.  
  
 -or-  
  
 The current thread is in <see cref="F:System.Threading.ApartmentState.STA" /> state, and <paramref name="waitHandles" /> contains more than one element.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait completed because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
      <returns>
        <see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
      <summary>Waits for all the elements in the specified array to receive a signal, using an <see cref="T:System.Int32" /> value to specify the time interval and specifying whether to exit the synchronization domain before the wait.</summary>
      <param name="waitHandles">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait. This array cannot contain multiple references to the same object (duplicates).</param>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</param>
      <param name="exitContext">
        <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="waitHandles" /> parameter is <see langword="null" />.  
  
 -or-  
  
 One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.  
  
 -or-  
  
 <paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 2.0 or later.</exception>
      <exception cref="T:System.DuplicateWaitObjectException">The <paramref name="waitHandles" /> array contains elements that are duplicates.</exception>
      <exception cref="T:System.NotSupportedException">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.  
  
 -or-  
  
 The current thread is in <see cref="F:System.Threading.ApartmentState.STA" /> state, and <paramref name="waitHandles" /> contains more than one element.</exception>
      <exception cref="T:System.ApplicationException">
        <paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 1.0 or 1.1.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait completed because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
      <returns>
        <see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)">
      <summary>Waits for all the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> value to specify the time interval.</summary>
      <param name="waitHandles">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait. This array cannot contain multiple references to the same object.</param>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds, to wait indefinitely.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="waitHandles" /> parameter is <see langword="null" />.  
  
 -or-  
  
 One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.  
  
 -or-  
  
 <paramref name="waitHandles" /> is an array with no elements.</exception>
      <exception cref="T:System.DuplicateWaitObjectException">
        <block subset="none" type="note">
          <para>  
 In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.ArgumentException" />, instead.</para>
        </block>  
  
 The <paramref name="waitHandles" /> array contains elements that are duplicates.</exception>
      <exception cref="T:System.NotSupportedException">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.  
  
 -or-  
  
 The current thread is in <see cref="F:System.Threading.ApartmentState.STA" /> state, and <paramref name="waitHandles" /> contains more than one element.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.  
  
 -or-  
  
 <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait terminated because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
      <returns>
        <see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
      <summary>Waits for all the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> value to specify the time interval, and specifying whether to exit the synchronization domain before the wait.</summary>
      <param name="waitHandles">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait. This array cannot contain multiple references to the same object.</param>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds, to wait indefinitely.</param>
      <param name="exitContext">
        <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="waitHandles" /> parameter is <see langword="null" />.  
  
 -or-  
  
 One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.  
  
 -or-  
  
 <paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 2.0 or later.</exception>
      <exception cref="T:System.DuplicateWaitObjectException">The <paramref name="waitHandles" /> array contains elements that are duplicates.</exception>
      <exception cref="T:System.NotSupportedException">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.  
  
 -or-  
  
 The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element.</exception>
      <exception cref="T:System.ApplicationException">
        <paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 1.0 or 1.1.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.  
  
 -or-  
  
 <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait terminated because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
      <returns>
        <see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])">
      <summary>Waits for any of the elements in the specified array to receive a signal.</summary>
      <param name="waitHandles">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="waitHandles" /> parameter is <see langword="null" />.  
  
 -or-  
  
 One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</exception>
      <exception cref="T:System.ApplicationException">
        <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 1.0 or 1.1.</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait completed because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 2.0 or later.</exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
      <returns>The array index of the object that satisfied the wait.</returns>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)">
      <summary>Waits for any of the elements in the specified array to receive a signal, using a 32-bit signed integer to specify the time interval.</summary>
      <param name="waitHandles">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</param>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="waitHandles" /> parameter is <see langword="null" />.  
  
 -or-  
  
 One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait completed because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="waitHandles" /> is an array with no elements.</exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
      <returns>The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="millisecondsTimeout" /> has passed.</returns>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
      <summary>Waits for any of the elements in the specified array to receive a signal, using a 32-bit signed integer to specify the time interval, and specifying whether to exit the synchronization domain before the wait.</summary>
      <param name="waitHandles">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</param>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</param>
      <param name="exitContext">
        <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="waitHandles" /> parameter is <see langword="null" />.  
  
 -or-  
  
 One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</exception>
      <exception cref="T:System.ApplicationException">
        <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 1.0 or 1.1.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait completed because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 2.0 or later.</exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
      <returns>The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="millisecondsTimeout" /> has passed.</returns>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)">
      <summary>Waits for any of the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> to specify the time interval.</summary>
      <param name="waitHandles">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</param>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="waitHandles" /> parameter is <see langword="null" />.  
  
 -or-  
  
 One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.  
  
 -or-  
  
 <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait completed because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="waitHandles" /> is an array with no elements.</exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
      <returns>The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="timeout" /> has passed.</returns>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
      <summary>Waits for any of the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> to specify the time interval and specifying whether to exit the synchronization domain before the wait.</summary>
      <param name="waitHandles">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</param>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</param>
      <param name="exitContext">
        <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="waitHandles" /> parameter is <see langword="null" />.  
  
 -or-  
  
 One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</exception>
      <exception cref="T:System.ApplicationException">
        <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 1.0 or 1.1.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.  
  
 -or-  
  
 <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait completed because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 2.0 or later.</exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
      <returns>The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="timeout" /> has passed.</returns>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitOne">
      <summary>Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal.</summary>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait completed because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.InvalidOperationException">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
      <returns>
        <see langword="true" /> if the current instance receives a signal. If the current instance is never signaled, <see cref="M:System.Threading.WaitHandle.WaitOne" /> never returns.</returns>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitOne(System.Int32)">
      <summary>Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal, using a 32-bit signed integer to specify the time interval in milliseconds.</summary>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</param>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait completed because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.InvalidOperationException">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
      <returns>
        <see langword="true" /> if the current instance receives a signal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)">
      <summary>Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal, using a 32-bit signed integer to specify the time interval and specifying whether to exit the synchronization domain before the wait.</summary>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</param>
      <param name="exitContext">
        <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</param>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait completed because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.InvalidOperationException">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
      <returns>
        <see langword="true" /> if the current instance receives a signal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan)">
      <summary>Blocks the current thread until the current instance receives a signal, using a <see cref="T:System.TimeSpan" /> to specify the time interval.</summary>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</param>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.  
  
 -or-  
  
 <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait completed because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.InvalidOperationException">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
      <returns>
        <see langword="true" /> if the current instance receives a signal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)">
      <summary>Blocks the current thread until the current instance receives a signal, using a <see cref="T:System.TimeSpan" /> to specify the time interval and specifying whether to exit the synchronization domain before the wait.</summary>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</param>
      <param name="exitContext">
        <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</param>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.  
  
 -or-  
  
 <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait completed because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.InvalidOperationException">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
      <returns>
        <see langword="true" /> if the current instance receives a signal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Threading.WaitHandle.Handle">
      <summary>Gets or sets the native operating system handle.</summary>
      <returns>An <see cref="T:System.IntPtr" /> representing the native operating system handle. The default is the value of the <see cref="F:System.Threading.WaitHandle.InvalidHandle" /> field.</returns>
    </member>
    <member name="P:System.Threading.WaitHandle.SafeWaitHandle">
      <summary>Gets or sets the native operating system handle.</summary>
      <returns>A <see cref="T:Microsoft.Win32.SafeHandles.SafeWaitHandle" /> representing the native operating system handle.</returns>
    </member>
    <member name="T:System.Threading.WaitHandleCannotBeOpenedException">
      <summary>The exception that is thrown when an attempt is made to open a system mutex, semaphore, or event wait handle that does not exist.</summary>
    </member>
    <member name="M:System.Threading.WaitHandleCannotBeOpenedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.WaitHandleCannotBeOpenedException" /> class with default values.</summary>
    </member>
    <member name="M:System.Threading.WaitHandleCannotBeOpenedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.WaitHandleCannotBeOpenedException" /> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Threading.WaitHandleCannotBeOpenedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.WaitHandleCannotBeOpenedException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.Threading.WaitHandleCannotBeOpenedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.WaitHandleCannotBeOpenedException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.ThreadStaticAttribute">
      <summary>Indicates that the value of a static field is unique for each thread.</summary>
    </member>
    <member name="M:System.ThreadStaticAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ThreadStaticAttribute" /> class.</summary>
    </member>
    <member name="T:System.TimeoutException">
      <summary>The exception that is thrown when the time allotted for a process or operation has expired.</summary>
    </member>
    <member name="M:System.TimeoutException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.TimeoutException" /> class.</summary>
    </member>
    <member name="M:System.TimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.TimeoutException" /> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination. The <paramref name="context" /> parameter is reserved for future use, and can be specified as <see langword="null" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is <see langword="null" />, or <see cref="P:System.Exception.HResult" /> is zero (0).</exception>
    </member>
    <member name="M:System.TimeoutException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.TimeoutException" /> class with the specified error message.</summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.TimeoutException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.TimeoutException" /> class with the specified error message and inner exception.</summary>
      <param name="message">The message that describes the error.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.TimeSpan">
      <summary>Represents a time interval.</summary>
    </member>
    <member name="F:System.TimeSpan.MaxValue">
      <summary>Represents the maximum <see cref="T:System.TimeSpan" /> value. This field is read-only.</summary>
    </member>
    <member name="F:System.TimeSpan.MinValue">
      <summary>Represents the minimum <see cref="T:System.TimeSpan" /> value. This field is read-only.</summary>
    </member>
    <member name="F:System.TimeSpan.TicksPerDay">
      <summary>Represents the number of ticks in 1 day. This field is constant.</summary>
    </member>
    <member name="F:System.TimeSpan.TicksPerHour">
      <summary>Represents the number of ticks in 1 hour. This field is constant.</summary>
    </member>
    <member name="F:System.TimeSpan.TicksPerMillisecond">
      <summary>Represents the number of ticks in 1 millisecond. This field is constant.</summary>
    </member>
    <member name="F:System.TimeSpan.TicksPerMinute">
      <summary>Represents the number of ticks in 1 minute. This field is constant.</summary>
    </member>
    <member name="F:System.TimeSpan.TicksPerSecond">
      <summary>Represents the number of ticks in 1 second.</summary>
    </member>
    <member name="F:System.TimeSpan.Zero">
      <summary>Represents the zero <see cref="T:System.TimeSpan" /> value. This field is read-only.</summary>
    </member>
    <member name="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.TimeSpan" /> structure to a specified number of hours, minutes, and seconds.</summary>
      <param name="hours">Number of hours.</param>
      <param name="minutes">Number of minutes.</param>
      <param name="seconds">Number of seconds.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The parameters specify a <see cref="T:System.TimeSpan" /> value less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.</exception>
    </member>
    <member name="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.TimeSpan" /> structure to a specified number of days, hours, minutes, and seconds.</summary>
      <param name="days">Number of days.</param>
      <param name="hours">Number of hours.</param>
      <param name="minutes">Number of minutes.</param>
      <param name="seconds">Number of seconds.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The parameters specify a <see cref="T:System.TimeSpan" /> value less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.</exception>
    </member>
    <member name="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.TimeSpan" /> structure to a specified number of days, hours, minutes, seconds, and milliseconds.</summary>
      <param name="days">Number of days.</param>
      <param name="hours">Number of hours.</param>
      <param name="minutes">Number of minutes.</param>
      <param name="seconds">Number of seconds.</param>
      <param name="milliseconds">Number of milliseconds.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The parameters specify a <see cref="T:System.TimeSpan" /> value less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.</exception>
    </member>
    <member name="M:System.TimeSpan.#ctor(System.Int64)">
      <summary>Initializes a new instance of the <see cref="T:System.TimeSpan" /> structure to the specified number of ticks.</summary>
      <param name="ticks">A time period expressed in 100-nanosecond units.</param>
    </member>
    <member name="M:System.TimeSpan.Add(System.TimeSpan)">
      <summary>Returns a new <see cref="T:System.TimeSpan" /> object whose value is the sum of the specified <see cref="T:System.TimeSpan" /> object and this instance.</summary>
      <param name="ts">The time interval to add.</param>
      <exception cref="T:System.OverflowException">The resulting <see cref="T:System.TimeSpan" /> is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.</exception>
      <returns>A new object that represents the value of this instance plus the value of <paramref name="ts" />.</returns>
    </member>
    <member name="M:System.TimeSpan.Compare(System.TimeSpan,System.TimeSpan)">
      <summary>Compares two <see cref="T:System.TimeSpan" /> values and returns an integer that indicates whether the first value is shorter than, equal to, or longer than the second value.</summary>
      <param name="t1">The first time interval to compare.</param>
      <param name="t2">The second time interval to compare.</param>
      <returns>One of the following values.  
  
 <list type="table"><listheader><term> Value</term><description> Description</description></listheader><item><term> -1</term><description><paramref name="t1" /> is shorter than <paramref name="t2" />.</description></item><item><term> 0</term><description><paramref name="t1" /> is equal to <paramref name="t2" />.</description></item><item><term> 1</term><description><paramref name="t1" /> is longer than <paramref name="t2" />.</description></item></list></returns>
    </member>
    <member name="M:System.TimeSpan.CompareTo(System.Object)">
      <summary>Compares this instance to a specified object and returns an integer that indicates whether this instance is shorter than, equal to, or longer than the specified object.</summary>
      <param name="value">An object to compare, or <see langword="null" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.TimeSpan" />.</exception>
      <returns>One of the following values.  
  
 <list type="table"><listheader><term> Value</term><description> Description</description></listheader><item><term> -1</term><description> This instance is shorter than <paramref name="value" />.</description></item><item><term> 0</term><description> This instance is equal to <paramref name="value" />.</description></item><item><term> 1</term><description> This instance is longer than <paramref name="value" />, or <paramref name="value" /> is <see langword="null" />.</description></item></list></returns>
    </member>
    <member name="M:System.TimeSpan.CompareTo(System.TimeSpan)">
      <summary>Compares this instance to a specified <see cref="T:System.TimeSpan" /> object and returns an integer that indicates whether this instance is shorter than, equal to, or longer than the <see cref="T:System.TimeSpan" /> object.</summary>
      <param name="value">An object to compare to this instance.</param>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.  
  
 <list type="table"><listheader><term> Value</term><description> Description</description></listheader><item><term> A negative integer</term><description> This instance is shorter than <paramref name="value" />.</description></item><item><term> Zero</term><description> This instance is equal to <paramref name="value" />.</description></item><item><term> A positive integer</term><description> This instance is longer than <paramref name="value" />.</description></item></list></returns>
    </member>
    <member name="M:System.TimeSpan.Divide(System.Double)">
      <summary>Returns a new <see cref="T:System.TimeSpan" /> object which value is the result of division of this instance and the specified <paramref name="divisor" />.</summary>
      <param name="divisor">The value to be divided by.</param>
      <returns>A new object that represents the value of this instance divided by the value of <paramref name="divisor" />.</returns>
    </member>
    <member name="M:System.TimeSpan.Divide(System.TimeSpan)">
      <summary>Returns a new <see cref="T:System.Double" /> value which is the result of division of this instance and the specified <paramref name="ts" />.</summary>
      <param name="ts">The value to be divided by.</param>
      <returns>A new value that represents result of division of this instance by the value of the <paramref name="ts" />.</returns>
    </member>
    <member name="M:System.TimeSpan.Duration">
      <summary>Returns a new <see cref="T:System.TimeSpan" /> object whose value is the absolute value of the current <see cref="T:System.TimeSpan" /> object.</summary>
      <exception cref="T:System.OverflowException">The value of this instance is <see cref="F:System.TimeSpan.MinValue" />.</exception>
      <returns>A new object whose value is the absolute value of the current <see cref="T:System.TimeSpan" /> object.</returns>
    </member>
    <member name="M:System.TimeSpan.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="value">An object to compare with this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is a <see cref="T:System.TimeSpan" /> object that represents the same time interval as the current <see cref="T:System.TimeSpan" /> structure; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.TimeSpan.Equals(System.TimeSpan)">
      <summary>Returns a value indicating whether this instance is equal to a specified <see cref="T:System.TimeSpan" /> object.</summary>
      <param name="obj">An object to compare with this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> represents the same time interval as this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.TimeSpan.Equals(System.TimeSpan,System.TimeSpan)">
      <summary>Returns a value that indicates whether two specified instances of <see cref="T:System.TimeSpan" /> are equal.</summary>
      <param name="t1">The first time interval to compare.</param>
      <param name="t2">The second time interval to compare.</param>
      <returns>
        <see langword="true" /> if the values of <paramref name="t1" /> and <paramref name="t2" /> are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.TimeSpan.FromDays(System.Double)">
      <summary>Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of days, where the specification is accurate to the nearest millisecond.</summary>
      <param name="value">A number of days, accurate to the nearest millisecond.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.  
  
 -or-  
  
 <paramref name="value" /> is <see cref="F:System.Double.PositiveInfinity" />.  
  
 -or-  
  
 <paramref name="value" /> is <see cref="F:System.Double.NegativeInfinity" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />.</exception>
      <returns>An object that represents <paramref name="value" />.</returns>
    </member>
    <member name="M:System.TimeSpan.FromHours(System.Double)">
      <summary>Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of hours, where the specification is accurate to the nearest millisecond.</summary>
      <param name="value">A number of hours accurate to the nearest millisecond.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.  
  
 -or-  
  
 <paramref name="value" /> is <see cref="F:System.Double.PositiveInfinity" />.  
  
 -or-  
  
 <paramref name="value" /> is <see cref="F:System.Double.NegativeInfinity" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />.</exception>
      <returns>An object that represents <paramref name="value" />.</returns>
    </member>
    <member name="M:System.TimeSpan.FromMilliseconds(System.Double)">
      <summary>Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of milliseconds.</summary>
      <param name="value">A number of milliseconds.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.  
  
 -or-  
  
 <paramref name="value" /> is <see cref="F:System.Double.PositiveInfinity" />.  
  
 -or-  
  
 <paramref name="value" /> is <see cref="F:System.Double.NegativeInfinity" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />.</exception>
      <returns>An object that represents <paramref name="value" />.</returns>
    </member>
    <member name="M:System.TimeSpan.FromMinutes(System.Double)">
      <summary>Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of minutes, where the specification is accurate to the nearest millisecond.</summary>
      <param name="value">A number of minutes, accurate to the nearest millisecond.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.  
  
 -or-  
  
 <paramref name="value" /> is <see cref="F:System.Double.PositiveInfinity" />.  
  
 -or-  
  
 <paramref name="value" /> is <see cref="F:System.Double.NegativeInfinity" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />.</exception>
      <returns>An object that represents <paramref name="value" />.</returns>
    </member>
    <member name="M:System.TimeSpan.FromSeconds(System.Double)">
      <summary>Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of seconds, where the specification is accurate to the nearest millisecond.</summary>
      <param name="value">A number of seconds, accurate to the nearest millisecond.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.  
  
 -or-  
  
 <paramref name="value" /> is <see cref="F:System.Double.PositiveInfinity" />.  
  
 -or-  
  
 <paramref name="value" /> is <see cref="F:System.Double.NegativeInfinity" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />.</exception>
      <returns>An object that represents <paramref name="value" />.</returns>
    </member>
    <member name="M:System.TimeSpan.FromTicks(System.Int64)">
      <summary>Returns a <see cref="T:System.TimeSpan" /> that represents a specified time, where the specification is in units of ticks.</summary>
      <param name="value">A number of ticks that represent a time.</param>
      <returns>An object that represents <paramref name="value" />.</returns>
    </member>
    <member name="M:System.TimeSpan.GetHashCode">
      <summary>Returns a hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.TimeSpan.Multiply(System.Double)">
      <summary>Returns a new <see cref="T:System.TimeSpan" /> object which value is the result of multiplication of this instance and the specified <paramref name="factor" />.</summary>
      <param name="factor">The value to be multiplied by.</param>
      <returns>A new object that represents the value of this instance multiplied by the value of <paramref name="factor" />.</returns>
    </member>
    <member name="M:System.TimeSpan.Negate">
      <summary>Returns a new <see cref="T:System.TimeSpan" /> object whose value is the negated value of this instance.</summary>
      <exception cref="T:System.OverflowException">The negated value of this instance cannot be represented by a <see cref="T:System.TimeSpan" />; that is, the value of this instance is <see cref="F:System.TimeSpan.MinValue" />.</exception>
      <returns>A new object with the same numeric value as this instance, but with the opposite sign.</returns>
    </member>
    <member name="M:System.TimeSpan.op_Addition(System.TimeSpan,System.TimeSpan)">
      <summary>Adds two specified <see cref="T:System.TimeSpan" /> instances.</summary>
      <param name="t1">The first time interval to add.</param>
      <param name="t2">The second time interval to add.</param>
      <exception cref="T:System.OverflowException">The resulting <see cref="T:System.TimeSpan" /> is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.</exception>
      <returns>An object whose value is the sum of the values of <paramref name="t1" /> and <paramref name="t2" />.</returns>
    </member>
    <member name="M:System.TimeSpan.op_Division(System.TimeSpan,System.Double)">
      <summary>Returns a new <see cref="T:System.TimeSpan" /> object which value is the result of division of <paramref name="timeSpan" /> instance and the specified <paramref name="divisor" />.</summary>
      <param name="timeSpan">Dividend or the value to be divided.</param>
      <param name="divisor">The value to be divided by.</param>
      <returns>A new object that represents the value of <paramref name="timeSpan" /> instance divided by the value of <paramref name="divisor" />.</returns>
    </member>
    <member name="M:System.TimeSpan.op_Division(System.TimeSpan,System.TimeSpan)">
      <summary>Returns a new <see cref="T:System.Double" /> value which is the result of division of <paramref name="t1" /> instance and the specified <paramref name="t2" />.</summary>
      <param name="t1">Divident or the value to be divided.</param>
      <param name="t2">The value to be divided by.</param>
      <returns>A new value that represents result of division of <paramref name="t1" /> instance by the value of the <paramref name="t2" />.</returns>
    </member>
    <member name="M:System.TimeSpan.op_Equality(System.TimeSpan,System.TimeSpan)">
      <summary>Indicates whether two <see cref="T:System.TimeSpan" /> instances are equal.</summary>
      <param name="t1">The first time interval to compare.</param>
      <param name="t2">The second time interval to compare.</param>
      <returns>
        <see langword="true" /> if the values of <paramref name="t1" /> and <paramref name="t2" /> are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.TimeSpan.op_GreaterThan(System.TimeSpan,System.TimeSpan)">
      <summary>Indicates whether a specified <see cref="T:System.TimeSpan" /> is greater than another specified <see cref="T:System.TimeSpan" />.</summary>
      <param name="t1">The first time interval to compare.</param>
      <param name="t2">The second time interval to compare.</param>
      <returns>
        <see langword="true" /> if the value of <paramref name="t1" /> is greater than the value of <paramref name="t2" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.TimeSpan.op_GreaterThanOrEqual(System.TimeSpan,System.TimeSpan)">
      <summary>Indicates whether a specified <see cref="T:System.TimeSpan" /> is greater than or equal to another specified <see cref="T:System.TimeSpan" />.</summary>
      <param name="t1">The first time interval to compare.</param>
      <param name="t2">The second time interval to compare.</param>
      <returns>
        <see langword="true" /> if the value of <paramref name="t1" /> is greater than or equal to the value of <paramref name="t2" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.TimeSpan.op_Inequality(System.TimeSpan,System.TimeSpan)">
      <summary>Indicates whether two <see cref="T:System.TimeSpan" /> instances are not equal.</summary>
      <param name="t1">The first time interval to compare.</param>
      <param name="t2">The second time interval to compare.</param>
      <returns>
        <see langword="true" /> if the values of <paramref name="t1" /> and <paramref name="t2" /> are not equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.TimeSpan.op_LessThan(System.TimeSpan,System.TimeSpan)">
      <summary>Indicates whether a specified <see cref="T:System.TimeSpan" /> is less than another specified <see cref="T:System.TimeSpan" />.</summary>
      <param name="t1">The first time interval to compare.</param>
      <param name="t2">The second time interval to compare.</param>
      <returns>
        <see langword="true" /> if the value of <paramref name="t1" /> is less than the value of <paramref name="t2" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.TimeSpan.op_LessThanOrEqual(System.TimeSpan,System.TimeSpan)">
      <summary>Indicates whether a specified <see cref="T:System.TimeSpan" /> is less than or equal to another specified <see cref="T:System.TimeSpan" />.</summary>
      <param name="t1">The first time interval to compare.</param>
      <param name="t2">The second time interval to compare.</param>
      <returns>
        <see langword="true" /> if the value of <paramref name="t1" /> is less than or equal to the value of <paramref name="t2" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.TimeSpan.op_Multiply(System.Double,System.TimeSpan)">
      <summary>Returns a new <see cref="T:System.TimeSpan" /> object whose value is the result of multiplying the specified <paramref name="factor" /> and the specified <paramref name="timeSpan" /> instance.</summary>
      <param name="factor">The value to be multiplied by.</param>
      <param name="timeSpan">The value to be multiplied.</param>
      <returns>A new object that represents the value of the specified <paramref name="factor" /> multiplied by the value of the specified <paramref name="timeSpan" /> instance.</returns>
    </member>
    <member name="M:System.TimeSpan.op_Multiply(System.TimeSpan,System.Double)">
      <summary>Returns a new <see cref="T:System.TimeSpan" /> object whose value is the result of multiplying the specified <paramref name="timeSpan" /> instance and the specified <paramref name="factor" />.</summary>
      <param name="timeSpan">The value to be multiplied.</param>
      <param name="factor">The value to be multiplied by.</param>
      <returns>A new object that represents the value of the specified <paramref name="timeSpan" /> instance multiplied by the value of the specified <paramref name="factor" />.</returns>
    </member>
    <member name="M:System.TimeSpan.op_Subtraction(System.TimeSpan,System.TimeSpan)">
      <summary>Subtracts a specified <see cref="T:System.TimeSpan" /> from another specified <see cref="T:System.TimeSpan" />.</summary>
      <param name="t1">The minuend.</param>
      <param name="t2">The subtrahend.</param>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.</exception>
      <returns>An object whose value is the result of the value of <paramref name="t1" /> minus the value of <paramref name="t2" />.</returns>
    </member>
    <member name="M:System.TimeSpan.op_UnaryNegation(System.TimeSpan)">
      <summary>Returns a <see cref="T:System.TimeSpan" /> whose value is the negated value of the specified instance.</summary>
      <param name="t">The time interval to be negated.</param>
      <exception cref="T:System.OverflowException">The negated value of this instance cannot be represented by a <see cref="T:System.TimeSpan" />; that is, the value of this instance is <see cref="F:System.TimeSpan.MinValue" />.</exception>
      <returns>An object that has the same numeric value as this instance, but the opposite sign.</returns>
    </member>
    <member name="M:System.TimeSpan.op_UnaryPlus(System.TimeSpan)">
      <summary>Returns the specified instance of <see cref="T:System.TimeSpan" />.</summary>
      <param name="t">The time interval to return.</param>
      <returns>The time interval specified by <paramref name="t" />.</returns>
    </member>
    <member name="M:System.TimeSpan.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <summary>Converts the span representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified culture-specific format information.</summary>
      <param name="input">A span containing the characters that represent the time interval to convert.</param>
      <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
      <returns>A time interval that corresponds to <paramref name="input" />, as specified by <paramref name="formatProvider" />.</returns>
    </member>
    <member name="M:System.TimeSpan.Parse(System.String)">
      <summary>Converts the string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent.</summary>
      <param name="s">A string that specifies the time interval to convert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> has an invalid format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number that is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.  
  
 -or-  
  
 At least one of the days, hours, minutes, or seconds components is outside its valid range.</exception>
      <returns>A time interval that corresponds to <paramref name="s" />.</returns>
    </member>
    <member name="M:System.TimeSpan.Parse(System.String,System.IFormatProvider)">
      <summary>Converts the string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified culture-specific format information.</summary>
      <param name="input">A string that specifies the time interval to convert.</param>
      <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> has an invalid format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="input" /> represents a number that is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.  
  
 -or-  
  
 At least one of the days, hours, minutes, or seconds components in <paramref name="input" /> is outside its valid range.</exception>
      <returns>A time interval that corresponds to <paramref name="input" />, as specified by <paramref name="formatProvider" />.</returns>
    </member>
    <member name="M:System.TimeSpan.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.TimeSpanStyles)">
      <summary>Converts the char span of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified format and culture-specific format information. The format of the string representation must match the specified format exactly.</summary>
      <param name="input">A span that specifies the time interval to convert.</param>
      <param name="format">A standard or custom format string that defines the required format of <paramref name="input" />.</param>
      <param name="formatProvider">An object that provides culture-specific formatting information.</param>
      <param name="styles">A bitwise combination of enumeration values that defines the style elements that may be present in <paramref name="input" />.</param>
      <returns>A time interval that corresponds to <paramref name="input" />, as specified by <paramref name="format" /> and <paramref name="formatProvider" />.</returns>
    </member>
    <member name="M:System.TimeSpan.ParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.TimeSpanStyles)">
      <summary>Converts the string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified formats, culture-specific format information, and styles. The format of the string representation must match one of the specified formats exactly.</summary>
      <param name="input">A span that specifies the time interval to convert.</param>
      <param name="formats">An array of standard or custom format strings that define the required format of <paramref name="input" />.</param>
      <param name="formatProvider">An object that provides culture-specific formatting information.</param>
      <param name="styles">A bitwise combination of enumeration values that defines the style elements that may be present in input.</param>
      <returns>A time interval that corresponds to <paramref name="input" />, as specified by <paramref name="formats" />, <paramref name="formatProvider" />, and <paramref name="styles" />.</returns>
    </member>
    <member name="M:System.TimeSpan.ParseExact(System.String,System.String,System.IFormatProvider)">
      <summary>Converts the string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified format and culture-specific format information. The format of the string representation must match the specified format exactly.</summary>
      <param name="input">A string that specifies the time interval to convert.</param>
      <param name="format">A standard or custom format string that defines the required format of <paramref name="input" />.</param>
      <param name="formatProvider">An object that provides culture-specific formatting information.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> has an invalid format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="input" /> represents a number that is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.  
  
 -or-  
  
 At least one of the days, hours, minutes, or seconds components in <paramref name="input" /> is outside its valid range.</exception>
      <returns>A time interval that corresponds to <paramref name="input" />, as specified by <paramref name="format" /> and <paramref name="formatProvider" />.</returns>
    </member>
    <member name="M:System.TimeSpan.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.TimeSpanStyles)">
      <summary>Converts the string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified format, culture-specific format information, and styles. The format of the string representation must match the specified format exactly.</summary>
      <param name="input">A string that specifies the time interval to convert.</param>
      <param name="format">A standard or custom format string that defines the required format of <paramref name="input" />.</param>
      <param name="formatProvider">An object that provides culture-specific formatting information.</param>
      <param name="styles">A bitwise combination of enumeration values that defines the style elements that may be present in <paramref name="input" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> is an invalid <see cref="T:System.Globalization.TimeSpanStyles" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> has an invalid format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="input" /> represents a number that is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.  
  
 -or-  
  
 At least one of the days, hours, minutes, or seconds components in <paramref name="input" /> is outside its valid range.</exception>
      <returns>A time interval that corresponds to <paramref name="input" />, as specified by <paramref name="format" />, <paramref name="formatProvider" />, and <paramref name="styles" />.</returns>
    </member>
    <member name="M:System.TimeSpan.ParseExact(System.String,System.String[],System.IFormatProvider)">
      <summary>Converts the string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified array of format strings and culture-specific format information. The format of the string representation must match one of the specified formats exactly.</summary>
      <param name="input">A string that specifies the time interval to convert.</param>
      <param name="formats">An array of standard or custom format strings that defines the required format of <paramref name="input" />.</param>
      <param name="formatProvider">An object that provides culture-specific formatting information.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> has an invalid format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="input" /> represents a number that is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.  
  
 -or-  
  
 At least one of the days, hours, minutes, or seconds components in <paramref name="input" /> is outside its valid range.</exception>
      <returns>A time interval that corresponds to <paramref name="input" />, as specified by <paramref name="formats" /> and <paramref name="formatProvider" />.</returns>
    </member>
    <member name="M:System.TimeSpan.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.TimeSpanStyles)">
      <summary>Converts the string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified formats, culture-specific format information, and styles. The format of the string representation must match one of the specified formats exactly.</summary>
      <param name="input">A string that specifies the time interval to convert.</param>
      <param name="formats">An array of standard or custom format strings that define the required format of <paramref name="input" />.</param>
      <param name="formatProvider">An object that provides culture-specific formatting information.</param>
      <param name="styles">A bitwise combination of enumeration values that defines the style elements that may be present in input.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> is an invalid <see cref="T:System.Globalization.TimeSpanStyles" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> has an invalid format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="input" /> represents a number that is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.  
  
 -or-  
  
 At least one of the days, hours, minutes, or seconds components in <paramref name="input" /> is outside its valid range.</exception>
      <returns>A time interval that corresponds to <paramref name="input" />, as specified by <paramref name="formats" />, <paramref name="formatProvider" />, and <paramref name="styles" />.</returns>
    </member>
    <member name="M:System.TimeSpan.Subtract(System.TimeSpan)">
      <summary>Returns a new <see cref="T:System.TimeSpan" /> object whose value is the difference between the specified <see cref="T:System.TimeSpan" /> object and this instance.</summary>
      <param name="ts">The time interval to be subtracted.</param>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.</exception>
      <returns>A new time interval whose value is the result of the value of this instance minus the value of <paramref name="ts" />.</returns>
    </member>
    <member name="M:System.TimeSpan.ToString">
      <summary>Converts the value of the current <see cref="T:System.TimeSpan" /> object to its equivalent string representation.</summary>
      <returns>The string representation of the current <see cref="T:System.TimeSpan" /> value.</returns>
    </member>
    <member name="M:System.TimeSpan.ToString(System.String)">
      <summary>Converts the value of the current <see cref="T:System.TimeSpan" /> object to its equivalent string representation by using the specified format.</summary>
      <param name="format">A standard or custom <see cref="T:System.TimeSpan" /> format string.</param>
      <exception cref="T:System.FormatException">The <paramref name="format" /> parameter is not recognized or is not supported.</exception>
      <returns>The string representation of the current <see cref="T:System.TimeSpan" /> value in the format specified by the <paramref name="format" /> parameter.</returns>
    </member>
    <member name="M:System.TimeSpan.ToString(System.String,System.IFormatProvider)">
      <summary>Converts the value of the current <see cref="T:System.TimeSpan" /> object to its equivalent string representation by using the specified format and culture-specific formatting information.</summary>
      <param name="format">A standard or custom <see cref="T:System.TimeSpan" /> format string.</param>
      <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
      <exception cref="T:System.FormatException">The <paramref name="format" /> parameter is not recognized or is not supported.</exception>
      <returns>The string representation of the current <see cref="T:System.TimeSpan" /> value, as specified by <paramref name="format" /> and <paramref name="formatProvider" />.</returns>
    </member>
    <member name="M:System.TimeSpan.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <summary>Tries to format the value of the current timespan number instance into the provided span of characters.</summary>
      <param name="destination">When this method returns, this instance's value formatted as a span of characters.</param>
      <param name="charsWritten">When this method returns, the number of characters that were written in <paramref name="destination" />.</param>
      <param name="format">A span containing the charactes that represent a standard or custom format string that defines the acceptable format for <paramref name="destination" />.</param>
      <param name="formatProvider">An optional object that supplies culture-specific formatting information for <paramref name="destination" />.</param>
      <returns>
        <see langword="true" /> if the formatting was successful; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.TimeSpan.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.TimeSpan@)">
      <summary>Converts the span representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified culture-specific formatting information, and returns a value that indicates whether the conversion succeeded.</summary>
      <param name="input">A span containing the characters representing the time interval to convert.</param>
      <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
      <param name="result">When this method returns, contains an object that represents the time interval specified by <paramref name="input" />, or <see cref="F:System.TimeSpan.Zero" /> if the conversion failed. This parameter is passed uninitialized.</param>
      <returns>
        <see langword="true" /> if <paramref name="input" /> was converted successfully; otherwise, <see langword="false" />. This operation returns <see langword="false" /> if the <paramref name="input" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, has an invalid format, represents a time interval that is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />, or has at least one days, hours, minutes, or seconds component outside its valid range.</returns>
    </member>
    <member name="M:System.TimeSpan.TryParse(System.ReadOnlySpan{System.Char},System.TimeSpan@)">
      <summary>Converts the span representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent and returns a value that indicates whether the conversion succeeded.</summary>
      <param name="s">A span containing the characters representing the time interval to convert.</param>
      <param name="result">When this method returns, contains an object that represents the time interval specified by <paramref name="s" />, or <see cref="F:System.TimeSpan.Zero" /> if the conversion failed. This parameter is passed uninitialized.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />. This operation returns <see langword="false" /> if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, has an invalid format, represents a time interval that is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />, or has at least one days, hours, minutes, or seconds component outside its valid range.</returns>
    </member>
    <member name="M:System.TimeSpan.TryParse(System.String,System.IFormatProvider,System.TimeSpan@)">
      <summary>Converts the string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified culture-specific formatting information, and returns a value that indicates whether the conversion succeeded.</summary>
      <param name="input">A string that specifies the time interval to convert.</param>
      <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
      <param name="result">When this method returns, contains an object that represents the time interval specified by <paramref name="input" />, or <see cref="F:System.TimeSpan.Zero" /> if the conversion failed. This parameter is passed uninitialized.</param>
      <returns>
        <see langword="true" /> if <paramref name="input" /> was converted successfully; otherwise, <see langword="false" />. This operation returns <see langword="false" /> if the <paramref name="input" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, has an invalid format, represents a time interval that is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />, or has at least one days, hours, minutes, or seconds component outside its valid range.</returns>
    </member>
    <member name="M:System.TimeSpan.TryParse(System.String,System.TimeSpan@)">
      <summary>Converts the string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent and returns a value that indicates whether the conversion succeeded.</summary>
      <param name="s">A string that specifies the time interval to convert.</param>
      <param name="result">When this method returns, contains an object that represents the time interval specified by <paramref name="s" />, or <see cref="F:System.TimeSpan.Zero" /> if the conversion failed. This parameter is passed uninitialized.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />. This operation returns <see langword="false" /> if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, has an invalid format, represents a time interval that is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />, or has at least one days, hours, minutes, or seconds component outside its valid range.</returns>
    </member>
    <member name="M:System.TimeSpan.TryParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.TimeSpanStyles,System.TimeSpan@)">
      <summary>Converts the specified span representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified format, culture-specific format information, and styles, and returns a value that indicates whether the conversion succeeded. The format of the string representation must match the specified format exactly.</summary>
      <param name="input">A span containing the characters that represent a time interval to convert.</param>
      <param name="format">A span containing the charactes that represent a standard or custom format string that defines the acceptable format of <paramref name="input" />.</param>
      <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
      <param name="styles">One or more enumeration values that indicate the style of <paramref name="input" />.</param>
      <param name="result">When this method returns, contains an object that represents the time interval specified by <paramref name="input" />, or <see cref="F:System.TimeSpan.Zero" /> if the conversion failed. This parameter is passed uninitialized.</param>
      <returns>
        <see langword="true" /> if <paramref name="input" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.TimeSpan.TryParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.TimeSpan@)">
      <summary>Converts the specified span representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified format and culture-specific format information. The format of the string representation must match the specified format exactly.</summary>
      <param name="input">A span containing the characters that represent a time interval to convert.</param>
      <param name="format">A span containing the characters that represent a standard or custom format string that defines the acceptable format of <paramref name="input" />.</param>
      <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
      <param name="result">When this method returns, contains an object that represents the time interval specified by <paramref name="input" />, or <see cref="F:System.TimeSpan.Zero" /> if the conversion failed. This parameter is passed uninitialized.</param>
      <returns>
        <see langword="true" /> if <paramref name="input" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.TimeSpan.TryParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.TimeSpanStyles,System.TimeSpan@)">
      <summary>Converts the specified span representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified formats, culture-specific format information and styles. The format of the string representation must match one of the specified formats exactly.</summary>
      <param name="input">A span containing the characters that represent a time interval to convert.</param>
      <param name="formats">An array of standard or custom format strings that define the acceptable formats of <paramref name="input" />.</param>
      <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
      <param name="styles">One or more enumeration values that indicate the style of <paramref name="input" />.</param>
      <param name="result">When this method returns, contains an object that represents the time interval specified by <paramref name="input" />, or <see cref="F:System.TimeSpan.Zero" /> if the conversion failed. This parameter is passed uninitialized.</param>
      <returns>
        <see langword="true" /> if <paramref name="input" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.TimeSpan.TryParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.TimeSpan@)">
      <summary>Converts the specified span representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified formats and culture-specific format information. The format of the string representation must match one of the specified formats exactly.</summary>
      <param name="input">A span containing the characters that represent a time interval to convert.</param>
      <param name="formats">An array of standard or custom format strings that define the acceptable formats of <paramref name="input" />.</param>
      <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
      <param name="result">When this method returns, contains an object that represents the time interval specified by <paramref name="input" />, or <see cref="F:System.TimeSpan.Zero" /> if the conversion failed. This parameter is passed uninitialized.</param>
      <returns>
        <see langword="true" /> if <paramref name="input" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.TimeSpan.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.TimeSpanStyles,System.TimeSpan@)">
      <summary>Converts the string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified format, culture-specific format information and styles. The format of the string representation must match the specified format exactly.</summary>
      <param name="input">A string that specifies the time interval to convert.</param>
      <param name="format">A standard or custom format string that defines the required format of <paramref name="input" />.</param>
      <param name="formatProvider">An object that provides culture-specific formatting information.</param>
      <param name="styles">One or more enumeration values that indicate the style of <paramref name="input" />.</param>
      <param name="result">When this method returns, contains an object that represents the time interval specified by <paramref name="input" />, or <see cref="F:System.TimeSpan.Zero" /> if the conversion failed. This parameter is passed uninitialized.</param>
      <returns>
        <see langword="true" /> if <paramref name="input" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.TimeSpan.TryParseExact(System.String,System.String,System.IFormatProvider,System.TimeSpan@)">
      <summary>Converts the string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified format and culture-specific format information. The format of the string representation must match the specified format exactly.</summary>
      <param name="input">A string that specifies the time interval to convert.</param>
      <param name="format">A standard or custom format string that defines the required format of <paramref name="input" />.</param>
      <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
      <param name="result">When this method returns, contains an object that represents the time interval specified by <paramref name="input" />, or <see cref="F:System.TimeSpan.Zero" /> if the conversion failed. This parameter is passed uninitialized.</param>
      <returns>
        <see langword="true" /> if <paramref name="input" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.TimeSpan.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.TimeSpanStyles,System.TimeSpan@)">
      <summary>Converts the specified string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified formats, culture-specific format information and styles. The format of the string representation must match one of the specified formats exactly.</summary>
      <param name="input">A string that specifies the time interval to convert.</param>
      <param name="formats">An array of standard or custom format strings that define the acceptable formats of <paramref name="input" />.</param>
      <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
      <param name="styles">One or more enumeration values that indicate the style of <paramref name="input" />.</param>
      <param name="result">When this method returns, contains an object that represents the time interval specified by <paramref name="input" />, or <see cref="F:System.TimeSpan.Zero" /> if the conversion failed. This parameter is passed uninitialized.</param>
      <returns>
        <see langword="true" /> if <paramref name="input" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.TimeSpan.TryParseExact(System.String,System.String[],System.IFormatProvider,System.TimeSpan@)">
      <summary>Converts the specified string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified formats and culture-specific format information. The format of the string representation must match one of the specified formats exactly.</summary>
      <param name="input">A string that specifies the time interval to convert.</param>
      <param name="formats">An array of standard or custom format strings that define the acceptable formats of <paramref name="input" />.</param>
      <param name="formatProvider">An object that provides culture-specific formatting information.</param>
      <param name="result">When this method returns, contains an object that represents the time interval specified by <paramref name="input" />, or <see cref="F:System.TimeSpan.Zero" /> if the conversion failed. This parameter is passed uninitialized.</param>
      <returns>
        <see langword="true" /> if <paramref name="input" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.TimeSpan.Days">
      <summary>Gets the days component of the time interval represented by the current <see cref="T:System.TimeSpan" /> structure.</summary>
      <returns>The day component of this instance. The return value can be positive or negative.</returns>
    </member>
    <member name="P:System.TimeSpan.Hours">
      <summary>Gets the hours component of the time interval represented by the current <see cref="T:System.TimeSpan" /> structure.</summary>
      <returns>The hour component of the current <see cref="T:System.TimeSpan" /> structure. The return value ranges from -23 through 23.</returns>
    </member>
    <member name="P:System.TimeSpan.Milliseconds">
      <summary>Gets the milliseconds component of the time interval represented by the current <see cref="T:System.TimeSpan" /> structure.</summary>
      <returns>The millisecond component of the current <see cref="T:System.TimeSpan" /> structure. The return value ranges from -999 through 999.</returns>
    </member>
    <member name="P:System.TimeSpan.Minutes">
      <summary>Gets the minutes component of the time interval represented by the current <see cref="T:System.TimeSpan" /> structure.</summary>
      <returns>The minute component of the current <see cref="T:System.TimeSpan" /> structure. The return value ranges from -59 through 59.</returns>
    </member>
    <member name="P:System.TimeSpan.Seconds">
      <summary>Gets the seconds component of the time interval represented by the current <see cref="T:System.TimeSpan" /> structure.</summary>
      <returns>The second component of the current <see cref="T:System.TimeSpan" /> structure. The return value ranges from -59 through 59.</returns>
    </member>
    <member name="P:System.TimeSpan.Ticks">
      <summary>Gets the number of ticks that represent the value of the current <see cref="T:System.TimeSpan" /> structure.</summary>
      <returns>The number of ticks contained in this instance.</returns>
    </member>
    <member name="P:System.TimeSpan.TotalDays">
      <summary>Gets the value of the current <see cref="T:System.TimeSpan" /> structure expressed in whole and fractional days.</summary>
      <returns>The total number of days represented by this instance.</returns>
    </member>
    <member name="P:System.TimeSpan.TotalHours">
      <summary>Gets the value of the current <see cref="T:System.TimeSpan" /> structure expressed in whole and fractional hours.</summary>
      <returns>The total number of hours represented by this instance.</returns>
    </member>
    <member name="P:System.TimeSpan.TotalMilliseconds">
      <summary>Gets the value of the current <see cref="T:System.TimeSpan" /> structure expressed in whole and fractional milliseconds.</summary>
      <returns>The total number of milliseconds represented by this instance.</returns>
    </member>
    <member name="P:System.TimeSpan.TotalMinutes">
      <summary>Gets the value of the current <see cref="T:System.TimeSpan" /> structure expressed in whole and fractional minutes.</summary>
      <returns>The total number of minutes represented by this instance.</returns>
    </member>
    <member name="P:System.TimeSpan.TotalSeconds">
      <summary>Gets the value of the current <see cref="T:System.TimeSpan" /> structure expressed in whole and fractional seconds.</summary>
      <returns>The total number of seconds represented by this instance.</returns>
    </member>
    <member name="T:System.TimeZoneInfo">
      <summary>Represents any time zone in the world.</summary>
    </member>
    <member name="M:System.TimeZoneInfo.ClearCachedData">
      <summary>Clears cached time zone data.</summary>
    </member>
    <member name="M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo)">
      <summary>Converts a time to the time in a particular time zone.</summary>
      <param name="dateTime">The date and time to convert.</param>
      <param name="destinationTimeZone">The time zone to convert <paramref name="dateTime" /> to.</param>
      <exception cref="T:System.ArgumentException">The value of the <paramref name="dateTime" /> parameter represents an invalid time.</exception>
      <exception cref="T:System.ArgumentNullException">The value of the <paramref name="destinationTimeZone" /> parameter is <see langword="null" />.</exception>
      <returns>The date and time in the destination time zone.</returns>
    </member>
    <member name="M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo,System.TimeZoneInfo)">
      <summary>Converts a time from one time zone to another.</summary>
      <param name="dateTime">The date and time to convert.</param>
      <param name="sourceTimeZone">The time zone of <paramref name="dateTime" />.</param>
      <param name="destinationTimeZone">The time zone to convert <paramref name="dateTime" /> to.</param>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.DateTime.Kind" /> property of the <paramref name="dateTime" /> parameter is <see cref="F:System.DateTimeKind.Local" />, but the <paramref name="sourceTimeZone" /> parameter does not equal <see cref="F:System.DateTimeKind.Local" />.  
  
 -or-  
  
 The <see cref="P:System.DateTime.Kind" /> property of the <paramref name="dateTime" /> parameter is <see cref="F:System.DateTimeKind.Utc" />, but the <paramref name="sourceTimeZone" /> parameter does not equal <see cref="P:System.TimeZoneInfo.Utc" />.  
  
 -or-  
  
 The <paramref name="dateTime" /> parameter is an invalid time (that is, it represents a time that does not exist because of a time zone's adjustment rules).</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="sourceTimeZone" /> parameter is <see langword="null" />.  
  
 -or-  
  
 The <paramref name="destinationTimeZone" /> parameter is <see langword="null" />.</exception>
      <returns>The date and time in the destination time zone that corresponds to the <paramref name="dateTime" /> parameter in the source time zone.</returns>
    </member>
    <member name="M:System.TimeZoneInfo.ConvertTime(System.DateTimeOffset,System.TimeZoneInfo)">
      <summary>Converts a time to the time in a particular time zone.</summary>
      <param name="dateTimeOffset">The date and time to convert.</param>
      <param name="destinationTimeZone">The time zone to convert <paramref name="dateTime" /> to.</param>
      <exception cref="T:System.ArgumentNullException">The value of the <paramref name="destinationTimeZone" /> parameter is <see langword="null" />.</exception>
      <returns>The date and time in the destination time zone.</returns>
    </member>
    <member name="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTime,System.String)">
      <summary>Converts a time to the time in another time zone based on the time zone's identifier.</summary>
      <param name="dateTime">The date and time to convert.</param>
      <param name="destinationTimeZoneId">The identifier of the destination time zone.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationTimeZoneId" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidTimeZoneException">The time zone identifier was found, but the registry data is corrupted.</exception>
      <exception cref="T:System.Security.SecurityException">The process does not have the permissions required to read from the registry key that contains the time zone information.</exception>
      <exception cref="T:System.TimeZoneNotFoundException">The <paramref name="destinationTimeZoneId" /> identifier was not found on the local system.</exception>
      <returns>The date and time in the destination time zone.</returns>
    </member>
    <member name="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTime,System.String,System.String)">
      <summary>Converts a time from one time zone to another based on time zone identifiers.</summary>
      <param name="dateTime">The date and time to convert.</param>
      <param name="sourceTimeZoneId">The identifier of the source time zone.</param>
      <param name="destinationTimeZoneId">The identifier of the destination time zone.</param>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.DateTime.Kind" /> property of the <paramref name="dateTime" /> parameter does not correspond to the source time zone.  
  
 -or-  
  
 <paramref name="dateTime" /> is an invalid time in the source time zone.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceTimeZoneId" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="destinationTimeZoneId" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidTimeZoneException">The time zone identifiers were found, but the registry data is corrupted.</exception>
      <exception cref="T:System.Security.SecurityException">The user does not have the permissions required to read from the registry keys that hold time zone data.</exception>
      <exception cref="T:System.TimeZoneNotFoundException">The <paramref name="sourceTimeZoneId" /> identifier was not found on the local system.  
  
 -or-  
  
 The <paramref name="destinationTimeZoneId" /> identifier was not found on the local system.</exception>
      <returns>The date and time in the destination time zone that corresponds to the <paramref name="dateTime" /> parameter in the source time zone.</returns>
    </member>
    <member name="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTimeOffset,System.String)">
      <summary>Converts a time to the time in another time zone based on the time zone's identifier.</summary>
      <param name="dateTimeOffset">The date and time to convert.</param>
      <param name="destinationTimeZoneId">The identifier of the destination time zone.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationTimeZoneId" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidTimeZoneException">The time zone identifier was found but the registry data is corrupted.</exception>
      <exception cref="T:System.Security.SecurityException">The process does not have the permissions required to read from the registry key that contains the time zone information.</exception>
      <exception cref="T:System.TimeZoneNotFoundException">The <paramref name="destinationTimeZoneId" /> identifier was not found on the local system.</exception>
      <returns>The date and time in the destination time zone.</returns>
    </member>
    <member name="M:System.TimeZoneInfo.ConvertTimeFromUtc(System.DateTime,System.TimeZoneInfo)">
      <summary>Converts a Coordinated Universal Time (UTC) to the time in a specified time zone.</summary>
      <param name="dateTime">The Coordinated Universal Time (UTC).</param>
      <param name="destinationTimeZone">The time zone to convert <paramref name="dateTime" /> to.</param>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.DateTime.Kind" /> property of <paramref name="dateTime" /> is <see cref="F:System.DateTimeKind.Local" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationTimeZone" /> is <see langword="null" />.</exception>
      <returns>The date and time in the destination time zone. Its <see cref="P:System.DateTime.Kind" /> property is <see cref="F:System.DateTimeKind.Utc" /> if <paramref name="destinationTimeZone" /> is <see cref="P:System.TimeZoneInfo.Utc" />; otherwise, its <see cref="P:System.DateTime.Kind" /> property is <see cref="F:System.DateTimeKind.Unspecified" />.</returns>
    </member>
    <member name="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime)">
      <summary>Converts the specified date and time to Coordinated Universal Time (UTC).</summary>
      <param name="dateTime">The date and time to convert.</param>
      <exception cref="T:System.ArgumentException">
        <see langword="TimeZoneInfo.Local.IsInvalidDateTime(" />
        <paramref name="dateTime" />
        <see langword=")" /> returns <see langword="true" />.</exception>
      <returns>The Coordinated Universal Time (UTC) that corresponds to the <paramref name="dateTime" /> parameter. The <see cref="T:System.DateTime" /> value's <see cref="P:System.DateTime.Kind" /> property is always set to <see cref="F:System.DateTimeKind.Utc" />.</returns>
    </member>
    <member name="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)">
      <summary>Converts the time in a specified time zone to Coordinated Universal Time (UTC).</summary>
      <param name="dateTime">The date and time to convert.</param>
      <param name="sourceTimeZone">The time zone of <paramref name="dateTime" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTime" />.<see langword="Kind" /> is <see cref="F:System.DateTimeKind.Utc" /> and <paramref name="sourceTimeZone" /> does not equal <see cref="P:System.TimeZoneInfo.Utc" />.  
  
 -or-  
  
 <paramref name="dateTime" />.<see langword="Kind" /> is <see cref="F:System.DateTimeKind.Local" /> and <paramref name="sourceTimeZone" /> does not equal <see cref="P:System.TimeZoneInfo.Local" />.  
  
 -or-  
  
 <paramref name="sourceTimeZone" /><see langword=".IsInvalidDateTime(" /><paramref name="dateTime" /><see langword=")" /> returns <see langword="true" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceTimeZone" /> is <see langword="null" />.</exception>
      <returns>The Coordinated Universal Time (UTC) that corresponds to the <paramref name="dateTime" /> parameter. The <see cref="T:System.DateTime" /> object's <see cref="P:System.DateTime.Kind" /> property is always set to <see cref="F:System.DateTimeKind.Utc" />.</returns>
    </member>
    <member name="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String)">
      <summary>Creates a custom time zone with a specified identifier, an offset from Coordinated Universal Time (UTC), a display name, and a standard time display name.</summary>
      <param name="id">The time zone's identifier.</param>
      <param name="baseUtcOffset">An object that represents the time difference between this time zone and Coordinated Universal Time (UTC).</param>
      <param name="displayName">The display name of the new time zone.</param>
      <param name="standardDisplayName">The name of the new time zone's standard time.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="id" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="id" /> parameter is an empty string ("").  
  
 -or-  
  
 The <paramref name="baseUtcOffset" /> parameter does not represent a whole number of minutes.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="baseUtcOffset" /> parameter is greater than 14 hours or less than -14 hours.</exception>
      <returns>The new time zone.</returns>
    </member>
    <member name="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String,System.String,System.TimeZoneInfo.AdjustmentRule[])">
      <summary>Creates a custom time zone with a specified identifier, an offset from Coordinated Universal Time (UTC), a display name, a standard time name, a daylight saving time name, and daylight saving time rules.</summary>
      <param name="id">The time zone's identifier.</param>
      <param name="baseUtcOffset">An object that represents the time difference between this time zone and Coordinated Universal Time (UTC).</param>
      <param name="displayName">The display name of the new time zone.</param>
      <param name="standardDisplayName">The new time zone's standard time name.</param>
      <param name="daylightDisplayName">The daylight saving time name of the new time zone.</param>
      <param name="adjustmentRules">An array that augments the base UTC offset for a particular period.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="id" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="id" /> parameter is an empty string ("").  
  
 -or-  
  
 The <paramref name="baseUtcOffset" /> parameter does not represent a whole number of minutes.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="baseUtcOffset" /> parameter is greater than 14 hours or less than -14 hours.</exception>
      <exception cref="T:System.InvalidTimeZoneException">The adjustment rules specified in the <paramref name="adjustmentRules" /> parameter overlap.  
  
 -or-  
  
 The adjustment rules specified in the <paramref name="adjustmentRules" /> parameter are not in chronological order.  
  
 -or-  
  
 One or more elements in <paramref name="adjustmentRules" /> are <see langword="null" />.  
  
 -or-  
  
 A date can have multiple adjustment rules applied to it.  
  
 -or-  
  
 The sum of the <paramref name="baseUtcOffset" /> parameter and the <see cref="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta" /> value of one or more objects in the <paramref name="adjustmentRules" /> array is greater than 14 hours or less than -14 hours.</exception>
      <returns>A <see cref="T:System.TimeZoneInfo" /> object that represents the new time zone.</returns>
    </member>
    <member name="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String,System.String,System.TimeZoneInfo.AdjustmentRule[],System.Boolean)">
      <summary>Creates a custom time zone with a specified identifier, an offset from Coordinated Universal Time (UTC), a display name, a standard time name, a daylight saving time name, daylight saving time rules, and a value that indicates whether the returned object reflects daylight saving time information.</summary>
      <param name="id">The time zone's identifier.</param>
      <param name="baseUtcOffset">A <see cref="T:System.TimeSpan" /> object that represents the time difference between this time zone and Coordinated Universal Time (UTC).</param>
      <param name="displayName">The display name of the new time zone.</param>
      <param name="standardDisplayName">The standard time name of the new time zone.</param>
      <param name="daylightDisplayName">The daylight saving time name of the new time zone.</param>
      <param name="adjustmentRules">An array of <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> objects that augment the base UTC offset for a particular period.</param>
      <param name="disableDaylightSavingTime">
        <see langword="true" /> to discard any daylight saving time-related information present in <paramref name="adjustmentRules" /> with the new object; otherwise, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="id" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="id" /> parameter is an empty string ("").  
  
 -or-  
  
 The <paramref name="baseUtcOffset" /> parameter does not represent a whole number of minutes.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="baseUtcOffset" /> parameter is greater than 14 hours or less than -14 hours.</exception>
      <exception cref="T:System.InvalidTimeZoneException">The adjustment rules specified in the <paramref name="adjustmentRules" /> parameter overlap.  
  
 -or-  
  
 The adjustment rules specified in the <paramref name="adjustmentRules" /> parameter are not in chronological order.  
  
 -or-  
  
 One or more elements in <paramref name="adjustmentRules" /> are <see langword="null" />.  
  
 -or-  
  
 A date can have multiple adjustment rules applied to it.  
  
 -or-  
  
 The sum of the <paramref name="baseUtcOffset" /> parameter and the <see cref="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta" /> value of one or more objects in the <paramref name="adjustmentRules" /> array is greater than 14 hours or less than -14 hours.</exception>
      <returns>The new time zone. If the <paramref name="disableDaylightSavingTime" /> parameter is <see langword="true" />, the returned object has no daylight saving time data.</returns>
    </member>
    <member name="M:System.TimeZoneInfo.Equals(System.Object)">
      <summary>Determines whether the current <see cref="T:System.TimeZoneInfo" /> object and another object are equal.</summary>
      <param name="obj">A second object to compare with the current object.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> is a <see cref="T:System.TimeZoneInfo" /> object that is equal to the current instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.TimeZoneInfo.Equals(System.TimeZoneInfo)">
      <summary>Determines whether the current <see cref="T:System.TimeZoneInfo" /> object and another <see cref="T:System.TimeZoneInfo" /> object are equal.</summary>
      <param name="other">A second object to compare with the current object.</param>
      <returns>
        <see langword="true" /> if the two <see cref="T:System.TimeZoneInfo" /> objects are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)">
      <summary>Instantiates a new <see cref="T:System.TimeZoneInfo" /> object based on its identifier.</summary>
      <param name="id">The time zone identifier, which corresponds to the <see cref="P:System.TimeZoneInfo.Id" /> property.</param>
      <exception cref="T:System.OutOfMemoryException">The system does not have enough memory to hold information about the time zone.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="id" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.TimeZoneNotFoundException">The time zone identifier specified by <paramref name="id" /> was not found. This means that a time zone identifier whose name matches <paramref name="id" /> does not exist, or that the identifier exists but does not contain any time zone data.</exception>
      <exception cref="T:System.Security.SecurityException">The process does not have the permissions required to read from the registry key that contains the time zone information.</exception>
      <exception cref="T:System.InvalidTimeZoneException">The time zone identifier was found, but the registry data is corrupted.</exception>
      <returns>An object whose identifier is the value of the <paramref name="id" /> parameter.</returns>
    </member>
    <member name="M:System.TimeZoneInfo.FromSerializedString(System.String)">
      <summary>Deserializes a string to re-create an original serialized <see cref="T:System.TimeZoneInfo" /> object.</summary>
      <param name="source">The string representation of the serialized <see cref="T:System.TimeZoneInfo" /> object.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="source" /> parameter is <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="source" /> parameter is a null string.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The source parameter cannot be deserialized back into a <see cref="T:System.TimeZoneInfo" /> object.</exception>
      <returns>The original serialized object.</returns>
    </member>
    <member name="M:System.TimeZoneInfo.GetAdjustmentRules">
      <summary>Retrieves an array of <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> objects that apply to the current <see cref="T:System.TimeZoneInfo" /> object.</summary>
      <exception cref="T:System.OutOfMemoryException">The system does not have enough memory to make an in-memory copy of the adjustment rules.</exception>
      <returns>An array of objects for this time zone.</returns>
    </member>
    <member name="M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTime)">
      <summary>Returns information about the possible dates and times that an ambiguous date and time can be mapped to.</summary>
      <param name="dateTime">A date and time.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTime" /> is not an ambiguous time.</exception>
      <returns>An array of objects that represents possible Coordinated Universal Time (UTC) offsets that a particular date and time can be mapped to.</returns>
    </member>
    <member name="M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTimeOffset)">
      <summary>Returns information about the possible dates and times that an ambiguous date and time can be mapped to.</summary>
      <param name="dateTimeOffset">A date and time.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTimeOffset" /> is not an ambiguous time.</exception>
      <returns>An array of objects that represents possible Coordinated Universal Time (UTC) offsets that a particular date and time can be mapped to.</returns>
    </member>
    <member name="M:System.TimeZoneInfo.GetHashCode">
      <summary>Serves as a hash function for hashing algorithms and data structures such as hash tables.</summary>
      <returns>A 32-bit signed integer that serves as the hash code for this <see cref="T:System.TimeZoneInfo" /> object.</returns>
    </member>
    <member name="M:System.TimeZoneInfo.GetSystemTimeZones">
      <summary>Returns a sorted collection of all the time zones about which information is available on the local system.</summary>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory to store all time zone information.</exception>
      <exception cref="T:System.Security.SecurityException">The user does not have permission to read from the registry keys that contain time zone information.</exception>
      <returns>A read-only collection of <see cref="T:System.TimeZoneInfo" /> objects.</returns>
    </member>
    <member name="M:System.TimeZoneInfo.GetUtcOffset(System.DateTime)">
      <summary>Calculates the offset or difference between the time in this time zone and Coordinated Universal Time (UTC) for a particular date and time.</summary>
      <param name="dateTime">The date and time to determine the offset for.</param>
      <returns>An object that indicates the time difference between the two time zones.</returns>
    </member>
    <member name="M:System.TimeZoneInfo.GetUtcOffset(System.DateTimeOffset)">
      <summary>Calculates the offset or difference between the time in this time zone and Coordinated Universal Time (UTC) for a particular date and time.</summary>
      <param name="dateTimeOffset">The date and time to determine the offset for.</param>
      <returns>An object that indicates the time difference between Coordinated Universal Time (UTC) and the current time zone.</returns>
    </member>
    <member name="M:System.TimeZoneInfo.HasSameRules(System.TimeZoneInfo)">
      <summary>Indicates whether the current object and another <see cref="T:System.TimeZoneInfo" /> object have the same adjustment rules.</summary>
      <param name="other">A second object to compare with the current <see cref="T:System.TimeZoneInfo" /> object.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="other" /> parameter is <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> if the two time zones have identical adjustment rules and an identical base offset; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)">
      <summary>Determines whether a particular date and time in a particular time zone is ambiguous and can be mapped to two or more Coordinated Universal Time (UTC) times.</summary>
      <param name="dateTime">A date and time value.</param>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.DateTime.Kind" /> property of the <paramref name="dateTime" /> value is <see cref="F:System.DateTimeKind.Local" /> and <paramref name="dateTime" /> is an invalid time.</exception>
      <returns>
        <see langword="true" /> if the <paramref name="dateTime" /> parameter is ambiguous; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTimeOffset)">
      <summary>Determines whether a particular date and time in a particular time zone is ambiguous and can be mapped to two or more Coordinated Universal Time (UTC) times.</summary>
      <param name="dateTimeOffset">A date and time.</param>
      <returns>
        <see langword="true" /> if the <paramref name="dateTimeOffset" /> parameter is ambiguous in the current time zone; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)">
      <summary>Indicates whether a specified date and time falls in the range of daylight saving time for the time zone of the current <see cref="T:System.TimeZoneInfo" /> object.</summary>
      <param name="dateTime">A date and time value.</param>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.DateTime.Kind" /> property of the <paramref name="dateTime" /> value is <see cref="F:System.DateTimeKind.Local" /> and <paramref name="dateTime" /> is an invalid time.</exception>
      <returns>
        <see langword="true" /> if the <paramref name="dateTime" /> parameter is a daylight saving time; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTimeOffset)">
      <summary>Indicates whether a specified date and time falls in the range of daylight saving time for the time zone of the current <see cref="T:System.TimeZoneInfo" /> object.</summary>
      <param name="dateTimeOffset">A date and time value.</param>
      <returns>
        <see langword="true" /> if the <paramref name="dateTimeOffset" /> parameter is a daylight saving time; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)">
      <summary>Indicates whether a particular date and time is invalid.</summary>
      <param name="dateTime">A date and time value.</param>
      <returns>
        <see langword="true" /> if <paramref name="dateTime" /> is invalid; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.TimeZoneInfo.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary>Runs when the deserialization of an object has been completed.</summary>
      <param name="sender">The object that initiated the callback. The functionality for this parameter is not currently implemented.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The <see cref="T:System.TimeZoneInfo" /> object contains invalid or corrupted data.</exception>
    </member>
    <member name="M:System.TimeZoneInfo.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the data needed to serialize the current <see cref="T:System.TimeZoneInfo" /> object.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object to populate with data.</param>
      <param name="context">The destination for this serialization (see <see cref="T:System.Runtime.Serialization.StreamingContext" />).</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is <see langword="null" />.</exception>
    </member>
    <member name="M:System.TimeZoneInfo.ToSerializedString">
      <summary>Converts the current <see cref="T:System.TimeZoneInfo" /> object to a serialized string.</summary>
      <returns>A string that represents the current <see cref="T:System.TimeZoneInfo" /> object.</returns>
    </member>
    <member name="M:System.TimeZoneInfo.ToString">
      <summary>Returns the current <see cref="T:System.TimeZoneInfo" /> object's display name.</summary>
      <returns>The value of the <see cref="P:System.TimeZoneInfo.DisplayName" /> property of the current <see cref="T:System.TimeZoneInfo" /> object.</returns>
    </member>
    <member name="P:System.TimeZoneInfo.BaseUtcOffset">
      <summary>Gets the time difference between the current time zone's standard time and Coordinated Universal Time (UTC).</summary>
      <returns>An object that indicates the time difference between the current time zone's standard time and Coordinated Universal Time (UTC).</returns>
    </member>
    <member name="P:System.TimeZoneInfo.DaylightName">
      <summary>Gets the display name for the current time zone's daylight saving time.</summary>
      <returns>The display name for the time zone's daylight saving time.</returns>
    </member>
    <member name="P:System.TimeZoneInfo.DisplayName">
      <summary>Gets the general display name that represents the time zone.</summary>
      <returns>The time zone's general display name.</returns>
    </member>
    <member name="P:System.TimeZoneInfo.Id">
      <summary>Gets the time zone identifier.</summary>
      <returns>The time zone identifier.</returns>
    </member>
    <member name="P:System.TimeZoneInfo.Local">
      <summary>Gets a <see cref="T:System.TimeZoneInfo" /> object that represents the local time zone.</summary>
      <returns>An object that represents the local time zone.</returns>
    </member>
    <member name="P:System.TimeZoneInfo.StandardName">
      <summary>Gets the display name for the time zone's standard time.</summary>
      <returns>The display name of the time zone's standard time.</returns>
    </member>
    <member name="P:System.TimeZoneInfo.SupportsDaylightSavingTime">
      <summary>Gets a value indicating whether the time zone has any daylight saving time rules.</summary>
      <returns>
        <see langword="true" /> if the time zone supports daylight saving time; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.TimeZoneInfo.Utc">
      <summary>Gets a <see cref="T:System.TimeZoneInfo" /> object that represents the Coordinated Universal Time (UTC) zone.</summary>
      <returns>An object that represents the Coordinated Universal Time (UTC) zone.</returns>
    </member>
    <member name="T:System.Tuple">
      <summary>Provides static methods for creating tuple objects.</summary>
    </member>
    <member name="M:System.Tuple.Create``1(``0)">
      <summary>Creates a new 1-tuple, or singleton.</summary>
      <param name="item1">The value of the only component of the tuple.</param>
      <typeparam name="T1">The type of the only component of the tuple.</typeparam>
      <returns>A tuple whose value is (<paramref name="item1" />).</returns>
    </member>
    <member name="M:System.Tuple.Create``2(``0,``1)">
      <summary>Creates a new 2-tuple, or pair.</summary>
      <param name="item1">The value of the first component of the tuple.</param>
      <param name="item2">The value of the second component of the tuple.</param>
      <typeparam name="T1">The type of the first component of the tuple.</typeparam>
      <typeparam name="T2">The type of the second component of the tuple.</typeparam>
      <returns>A 2-tuple whose value is (<paramref name="item1" />, <paramref name="item2" />).</returns>
    </member>
    <member name="M:System.Tuple.Create``3(``0,``1,``2)">
      <summary>Creates a new 3-tuple, or triple.</summary>
      <param name="item1">The value of the first component of the tuple.</param>
      <param name="item2">The value of the second component of the tuple.</param>
      <param name="item3">The value of the third component of the tuple.</param>
      <typeparam name="T1">The type of the first component of the tuple.</typeparam>
      <typeparam name="T2">The type of the second component of the tuple.</typeparam>
      <typeparam name="T3">The type of the third component of the tuple.</typeparam>
      <returns>A 3-tuple whose value is (<paramref name="item1" />, <paramref name="item2" />, <paramref name="item3" />).</returns>
    </member>
    <member name="M:System.Tuple.Create``4(``0,``1,``2,``3)">
      <summary>Creates a new 4-tuple, or quadruple.</summary>
      <param name="item1">The value of the first component of the tuple.</param>
      <param name="item2">The value of the second component of the tuple.</param>
      <param name="item3">The value of the third component of the tuple.</param>
      <param name="item4">The value of the fourth component of the tuple.</param>
      <typeparam name="T1">The type of the first component of the tuple.</typeparam>
      <typeparam name="T2">The type of the second component of the tuple.</typeparam>
      <typeparam name="T3">The type of the third component of the tuple.</typeparam>
      <typeparam name="T4">The type of the fourth component of the tuple.</typeparam>
      <returns>A 4-tuple whose value is (<paramref name="item1" />, <paramref name="item2" />, <paramref name="item3" />, <paramref name="item4" />).</returns>
    </member>
    <member name="M:System.Tuple.Create``5(``0,``1,``2,``3,``4)">
      <summary>Creates a new 5-tuple, or quintuple.</summary>
      <param name="item1">The value of the first component of the tuple.</param>
      <param name="item2">The value of the second component of the tuple.</param>
      <param name="item3">The value of the third component of the tuple.</param>
      <param name="item4">The value of the fourth component of the tuple.</param>
      <param name="item5">The value of the fifth component of the tuple.</param>
      <typeparam name="T1">The type of the first component of the tuple.</typeparam>
      <typeparam name="T2">The type of the second component of the tuple.</typeparam>
      <typeparam name="T3">The type of the third component of the tuple.</typeparam>
      <typeparam name="T4">The type of the fourth component of the tuple.</typeparam>
      <typeparam name="T5">The type of the fifth component of the tuple.</typeparam>
      <returns>A 5-tuple whose value is (<paramref name="item1" />, <paramref name="item2" />, <paramref name="item3" />, <paramref name="item4" />, <paramref name="item5" />).</returns>
    </member>
    <member name="M:System.Tuple.Create``6(``0,``1,``2,``3,``4,``5)">
      <summary>Creates a new 6-tuple, or sextuple.</summary>
      <param name="item1">The value of the first component of the tuple.</param>
      <param name="item2">The value of the second component of the tuple.</param>
      <param name="item3">The value of the third component of the tuple.</param>
      <param name="item4">The value of the fourth component of the tuple.</param>
      <param name="item5">The value of the fifth component of the tuple.</param>
      <param name="item6">The value of the sixth component of the tuple.</param>
      <typeparam name="T1">The type of the first component of the tuple.</typeparam>
      <typeparam name="T2">The type of the second component of the tuple.</typeparam>
      <typeparam name="T3">The type of the third component of the tuple.</typeparam>
      <typeparam name="T4">The type of the fourth component of the tuple.</typeparam>
      <typeparam name="T5">The type of the fifth component of the tuple.</typeparam>
      <typeparam name="T6">The type of the sixth component of the tuple.</typeparam>
      <returns>A 6-tuple whose value is (<paramref name="item1" />, <paramref name="item2" />, <paramref name="item3" />, <paramref name="item4" />, <paramref name="item5" />, <paramref name="item6" />).</returns>
    </member>
    <member name="M:System.Tuple.Create``7(``0,``1,``2,``3,``4,``5,``6)">
      <summary>Creates a new 7-tuple, or septuple.</summary>
      <param name="item1">The value of the first component of the tuple.</param>
      <param name="item2">The value of the second component of the tuple.</param>
      <param name="item3">The value of the third component of the tuple.</param>
      <param name="item4">The value of the fourth component of the tuple.</param>
      <param name="item5">The value of the fifth component of the tuple.</param>
      <param name="item6">The value of the sixth component of the tuple.</param>
      <param name="item7">The value of the seventh component of the tuple.</param>
      <typeparam name="T1">The type of the first component of the tuple.</typeparam>
      <typeparam name="T2">The type of the second component of the tuple.</typeparam>
      <typeparam name="T3">The type of the third component of the tuple.</typeparam>
      <typeparam name="T4">The type of the fourth component of the tuple.</typeparam>
      <typeparam name="T5">The type of the fifth component of the tuple.</typeparam>
      <typeparam name="T6">The type of the sixth component of the tuple.</typeparam>
      <typeparam name="T7">The type of the seventh component of the tuple.</typeparam>
      <returns>A 7-tuple whose value is (<paramref name="item1" />, <paramref name="item2" />, <paramref name="item3" />, <paramref name="item4" />, <paramref name="item5" />, <paramref name="item6" />, <paramref name="item7" />).</returns>
    </member>
    <member name="M:System.Tuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)">
      <summary>Creates a new 8-tuple, or octuple.</summary>
      <param name="item1">The value of the first component of the tuple.</param>
      <param name="item2">The value of the second component of the tuple.</param>
      <param name="item3">The value of the third component of the tuple.</param>
      <param name="item4">The value of the fourth component of the tuple.</param>
      <param name="item5">The value of the fifth component of the tuple.</param>
      <param name="item6">The value of the sixth component of the tuple.</param>
      <param name="item7">The value of the seventh component of the tuple.</param>
      <param name="item8">The value of the eighth component of the tuple.</param>
      <typeparam name="T1">The type of the first component of the tuple.</typeparam>
      <typeparam name="T2">The type of the second component of the tuple.</typeparam>
      <typeparam name="T3">The type of the third component of the tuple.</typeparam>
      <typeparam name="T4">The type of the fourth component of the tuple.</typeparam>
      <typeparam name="T5">The type of the fifth component of the tuple.</typeparam>
      <typeparam name="T6">The type of the sixth component of the tuple.</typeparam>
      <typeparam name="T7">The type of the seventh component of the tuple.</typeparam>
      <typeparam name="T8">The type of the eighth component of the tuple.</typeparam>
      <returns>An 8-tuple (octuple) whose value is (<paramref name="item1" />, <paramref name="item2" />, <paramref name="item3" />, <paramref name="item4" />, <paramref name="item5" />, <paramref name="item6" />, <paramref name="item7" />, <paramref name="item8" />).</returns>
    </member>
    <member name="T:System.Tuple`1">
      <summary>Represents a 1-tuple, or singleton.</summary>
      <typeparam name="T1">The type of the tuple's only component.</typeparam>
    </member>
    <member name="M:System.Tuple`1.#ctor(`0)">
      <summary>Initializes a new instance of the <see cref="T:System.Tuple`1" /> class.</summary>
      <param name="item1">The value of the tuple's only component.</param>
    </member>
    <member name="M:System.Tuple`1.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.Tuple`1" /> object is equal to a specified object.</summary>
      <param name="obj">The object to compare with this instance.</param>
      <returns>
        <see langword="true" /> if the current instance is equal to the specified object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Tuple`1.GetHashCode">
      <summary>Returns the hash code for the current <see cref="T:System.Tuple`1" /> object.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Tuple`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>Compares the current <see cref="T:System.Tuple`1" /> object to a specified object by using a specified comparer, and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</summary>
      <param name="other">An object to compare with the current instance.</param>
      <param name="comparer">An object that provides custom rules for comparison.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> is not a <see cref="T:System.Tuple`1" /> object.</exception>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="other" /> in the sort order, as shown in the following table.  
  
 <list type="table"><listheader><term> Value</term><description> Description</description></listheader><item><term> A negative integer</term><description> This instance precedes <paramref name="other" />.</description></item><item><term> Zero</term><description> This instance and <paramref name="other" /> have the same position in the sort order.</description></item><item><term> A positive integer</term><description> This instance follows <paramref name="other" />.</description></item></list></returns>
    </member>
    <member name="M:System.Tuple`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.Tuple`1" /> object is equal to a specified object based on a specified comparison method.</summary>
      <param name="other">The object to compare with this instance.</param>
      <param name="comparer">An object that defines the method to use to evaluate whether the two objects are equal.</param>
      <returns>
        <see langword="true" /> if the current instance is equal to the specified object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Tuple`1.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>Calculates the hash code for the current <see cref="T:System.Tuple`1" /> object by using a specified computation method.</summary>
      <param name="comparer">An object whose <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> method calculates the hash code of the current <see cref="T:System.Tuple`1" /> object.</param>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Tuple`1.System#IComparable#CompareTo(System.Object)">
      <summary>Compares the current <see cref="T:System.Tuple`1" /> object to a specified object, and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</summary>
      <param name="obj">An object to compare with the current instance.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not a <see cref="T:System.Tuple`1" /> object.</exception>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="obj" /> in the sort order, as shown in the following table.  
  
 <list type="table"><listheader><term> Value</term><description> Description</description></listheader><item><term> A negative integer</term><description> This instance precedes <paramref name="obj" />.</description></item><item><term> Zero</term><description> This instance and <paramref name="obj" /> have the same position in the sort order.</description></item><item><term> A positive integer</term><description> This instance follows <paramref name="obj" />.</description></item></list></returns>
    </member>
    <member name="M:System.Tuple`1.ToString">
      <summary>Returns a string that represents the value of this <see cref="T:System.Tuple`1" /> instance.</summary>
      <returns>The string representation of this <see cref="T:System.Tuple`1" /> object.</returns>
    </member>
    <member name="P:System.Tuple`1.Item1">
      <summary>Gets the value of the <see cref="T:System.Tuple`1" /> object's single component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`1" /> object's single component.</returns>
    </member>
    <member name="P:System.Tuple`1.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
      <summary>Gets the value of the <see langword="Tuple" /> element.</summary>
      <param name="index">The index of the <see langword="Tuple" /> element. <paramref name="index" /> must be 0.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is less than 0 or greater than 0.</exception>
      <returns>The value of the <see langword="Tuple" /> element.</returns>
    </member>
    <member name="P:System.Tuple`1.System#Runtime#CompilerServices#ITuple#Length">
      <summary>Gets the number of elements in the <see langword="Tuple" />.</summary>
      <returns>1, the number of elements in a <see cref="T:System.Tuple`1" /> object.</returns>
    </member>
    <member name="T:System.Tuple`2">
      <summary>Represents a 2-tuple, or pair.</summary>
      <typeparam name="T1">The type of the tuple's first component.</typeparam>
      <typeparam name="T2">The type of the tuple's second component.</typeparam>
    </member>
    <member name="M:System.Tuple`2.#ctor(`0,`1)">
      <summary>Initializes a new instance of the <see cref="T:System.Tuple`2" /> class.</summary>
      <param name="item1">The value of the tuple's first component.</param>
      <param name="item2">The value of the tuple's second component.</param>
    </member>
    <member name="M:System.Tuple`2.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.Tuple`2" /> object is equal to a specified object.</summary>
      <param name="obj">The object to compare with this instance.</param>
      <returns>
        <see langword="true" /> if the current instance is equal to the specified object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Tuple`2.GetHashCode">
      <summary>Returns the hash code for the current <see cref="T:System.Tuple`2" /> object.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Tuple`2.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>Compares the current <see cref="T:System.Tuple`2" /> object to a specified object by using a specified comparer, and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</summary>
      <param name="other">An object to compare with the current instance.</param>
      <param name="comparer">An object that provides custom rules for comparison.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> is not a <see cref="T:System.Tuple`2" /> object.</exception>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="other" /> in the sort order, as shown in the following table.  
  
 <list type="table"><listheader><term> Value</term><description> Description</description></listheader><item><term> A negative integer</term><description> This instance precedes <paramref name="other" />.</description></item><item><term> Zero</term><description> This instance and <paramref name="other" /> have the same position in the sort order.</description></item><item><term> A positive integer</term><description> This instance follows <paramref name="other" />.</description></item></list></returns>
    </member>
    <member name="M:System.Tuple`2.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.Tuple`2" /> object is equal to a specified object based on a specified comparison method.</summary>
      <param name="other">The object to compare with this instance.</param>
      <param name="comparer">An object that defines the method to use to evaluate whether the two objects are equal.</param>
      <returns>
        <see langword="true" /> if the current instance is equal to the specified object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Tuple`2.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>Calculates the hash code for the current <see cref="T:System.Tuple`2" /> object by using a specified computation method.</summary>
      <param name="comparer">An object whose <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> method calculates the hash code of the current <see cref="T:System.Tuple`2" /> object.</param>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Tuple`2.System#IComparable#CompareTo(System.Object)">
      <summary>Compares the current <see cref="T:System.Tuple`2" /> object to a specified object and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</summary>
      <param name="obj">An object to compare with the current instance.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not a <see cref="T:System.Tuple`2" /> object.</exception>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="obj" /> in the sort order, as shown in the following table.  
  
 <list type="table"><listheader><term> Value</term><description> Description</description></listheader><item><term> A negative integer</term><description> This instance precedes <paramref name="obj" />.</description></item><item><term> Zero</term><description> This instance and <paramref name="obj" /> have the same position in the sort order.</description></item><item><term> A positive integer</term><description> This instance follows <paramref name="obj" />.</description></item></list></returns>
    </member>
    <member name="M:System.Tuple`2.ToString">
      <summary>Returns a string that represents the value of this <see cref="T:System.Tuple`2" /> instance.</summary>
      <returns>The string representation of this <see cref="T:System.Tuple`2" /> object.</returns>
    </member>
    <member name="P:System.Tuple`2.Item1">
      <summary>Gets the value of the current <see cref="T:System.Tuple`2" /> object's first component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`2" /> object's first component.</returns>
    </member>
    <member name="P:System.Tuple`2.Item2">
      <summary>Gets the value of the current <see cref="T:System.Tuple`2" /> object's second component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`2" /> object's second component.</returns>
    </member>
    <member name="P:System.Tuple`2.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
      <summary>Gets the value of the specified <see langword="Tuple" /> element.</summary>
      <param name="index">The index of the specified <see langword="Tuple" /> element. <paramref name="index" /> can range from 0 to 1.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is less than 0 or greater than 1.</exception>
      <returns>The value of the <see langword="Tuple" /> element at the specified position.</returns>
    </member>
    <member name="P:System.Tuple`2.System#Runtime#CompilerServices#ITuple#Length">
      <summary>Gets the number of elements in the <see langword="Tuple" />.</summary>
      <returns>2, the number of elements in a <see cref="T:System.Tuple`2" /> object.</returns>
    </member>
    <member name="T:System.Tuple`3">
      <summary>Represents a 3-tuple, or triple.</summary>
      <typeparam name="T1">The type of the tuple's first component.</typeparam>
      <typeparam name="T2">The type of the tuple's second component.</typeparam>
      <typeparam name="T3">The type of the tuple's third component.</typeparam>
    </member>
    <member name="M:System.Tuple`3.#ctor(`0,`1,`2)">
      <summary>Initializes a new instance of the <see cref="T:System.Tuple`3" /> class.</summary>
      <param name="item1">The value of the tuple's first component.</param>
      <param name="item2">The value of the tuple's second component.</param>
      <param name="item3">The value of the tuple's third component.</param>
    </member>
    <member name="M:System.Tuple`3.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.Tuple`3" /> object is equal to a specified object.</summary>
      <param name="obj">The object to compare with this instance.</param>
      <returns>
        <see langword="true" /> if the current instance is equal to the specified object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Tuple`3.GetHashCode">
      <summary>Returns the hash code for the current <see cref="T:System.Tuple`3" /> object.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Tuple`3.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>Compares the current <see cref="T:System.Tuple`3" /> object to a specified object by using a specified comparer, and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</summary>
      <param name="other">An object to compare with the current instance.</param>
      <param name="comparer">An object that provides custom rules for comparison.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> is not a <see cref="T:System.Tuple`3" /> object.</exception>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="other" /> in the sort order, as shown in the following table.  
  
 <list type="table"><listheader><term> Value</term><description> Description</description></listheader><item><term> A negative integer</term><description> This instance precedes <paramref name="other" />.</description></item><item><term> Zero</term><description> This instance and <paramref name="other" /> have the same position in the sort order.</description></item><item><term> A positive integer</term><description> This instance follows <paramref name="other" />.</description></item></list></returns>
    </member>
    <member name="M:System.Tuple`3.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.Tuple`3" /> object is equal to a specified object based on a specified comparison method.</summary>
      <param name="other">The object to compare with this instance.</param>
      <param name="comparer">An object that defines the method to use to evaluate whether the two objects are equal.</param>
      <returns>
        <see langword="true" /> if the current instance is equal to the specified object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Tuple`3.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>Calculates the hash code for the current <see cref="T:System.Tuple`3" /> object by using a specified computation method.</summary>
      <param name="comparer">An object whose <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> method calculates the hash code of the current <see cref="T:System.Tuple`3" /> object.</param>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Tuple`3.System#IComparable#CompareTo(System.Object)">
      <summary>Compares the current <see cref="T:System.Tuple`3" /> object to a specified object and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</summary>
      <param name="obj">An object to compare with the current instance.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not a <see cref="T:System.Tuple`3" /> object.</exception>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="obj" /> in the sort order, as shown in the following table.  
  
 <list type="table"><listheader><term> Value</term><description> Description</description></listheader><item><term> A negative integer</term><description> This instance precedes <paramref name="obj" />.</description></item><item><term> Zero</term><description> This instance and <paramref name="obj" /> have the same position in the sort order.</description></item><item><term> A positive integer</term><description> This instance follows <paramref name="obj" />.</description></item></list></returns>
    </member>
    <member name="M:System.Tuple`3.ToString">
      <summary>Returns a string that represents the value of this <see cref="T:System.Tuple`3" /> instance.</summary>
      <returns>The string representation of this <see cref="T:System.Tuple`3" /> object.</returns>
    </member>
    <member name="P:System.Tuple`3.Item1">
      <summary>Gets the value of the current <see cref="T:System.Tuple`3" /> object's first component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`3" /> object's first component.</returns>
    </member>
    <member name="P:System.Tuple`3.Item2">
      <summary>Gets the value of the current <see cref="T:System.Tuple`3" /> object's second component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`3" /> object's second component.</returns>
    </member>
    <member name="P:System.Tuple`3.Item3">
      <summary>Gets the value of the current <see cref="T:System.Tuple`3" /> object's third component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`3" /> object's third component.</returns>
    </member>
    <member name="P:System.Tuple`3.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
      <summary>Gets the value of the specified <see langword="Tuple" /> element.</summary>
      <param name="index">The index of the specified <see langword="Tuple" /> element. <paramref name="index" /> can range from 0 to 2.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is less than 0 or greater than 2.</exception>
      <returns>The value of the <see langword="Tuple" /> element at the specified position.</returns>
    </member>
    <member name="P:System.Tuple`3.System#Runtime#CompilerServices#ITuple#Length">
      <summary>Gets the number of elements in the <see langword="Tuple" />.</summary>
      <returns>3, the number of elements in a <see cref="T:System.Tuple`3" /> object.</returns>
    </member>
    <member name="T:System.Tuple`4">
      <summary>Represents a 4-tuple, or quadruple.</summary>
      <typeparam name="T1">The type of the tuple's first component.</typeparam>
      <typeparam name="T2">The type of the tuple's second component.</typeparam>
      <typeparam name="T3">The type of the tuple's third component.</typeparam>
      <typeparam name="T4">The type of the tuple's fourth component.</typeparam>
    </member>
    <member name="M:System.Tuple`4.#ctor(`0,`1,`2,`3)">
      <summary>Initializes a new instance of the <see cref="T:System.Tuple`4" /> class.</summary>
      <param name="item1">The value of the tuple's first component.</param>
      <param name="item2">The value of the tuple's second component.</param>
      <param name="item3">The value of the tuple's third component.</param>
      <param name="item4">The value of the tuple's fourth component</param>
    </member>
    <member name="M:System.Tuple`4.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.Tuple`4" /> object is equal to a specified object.</summary>
      <param name="obj">The object to compare with this instance.</param>
      <returns>
        <see langword="true" /> if the current instance is equal to the specified object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Tuple`4.GetHashCode">
      <summary>Returns the hash code for the current <see cref="T:System.Tuple`4" /> object.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Tuple`4.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>Compares the current <see cref="T:System.Tuple`4" /> object to a specified object by using a specified comparer and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</summary>
      <param name="other">An object to compare with the current instance.</param>
      <param name="comparer">An object that provides custom rules for comparison.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> is not a <see cref="T:System.Tuple`4" /> object.</exception>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="other" /> in the sort order, as shown in the following table.  
  
 <list type="table"><listheader><term> Value</term><description> Description</description></listheader><item><term> A negative integer</term><description> This instance precedes <paramref name="other" />.</description></item><item><term> Zero</term><description> This instance and <paramref name="other" /> have the same position in the sort order.</description></item><item><term> A positive integer</term><description> This instance follows <paramref name="other" />.</description></item></list></returns>
    </member>
    <member name="M:System.Tuple`4.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.Tuple`4" /> object is equal to a specified object based on a specified comparison method.</summary>
      <param name="other">The object to compare with this instance.</param>
      <param name="comparer">An object that defines the method to use to evaluate whether the two objects are equal.</param>
      <returns>
        <see langword="true" /> if the current instance is equal to the specified object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Tuple`4.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>Calculates the hash code for the current <see cref="T:System.Tuple`4" /> object by using a specified computation method.</summary>
      <param name="comparer">An object whose <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> method calculates the hash code of the current <see cref="T:System.Tuple`4" /> object.</param>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Tuple`4.System#IComparable#CompareTo(System.Object)">
      <summary>Compares the current <see cref="T:System.Tuple`4" /> object to a specified object and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</summary>
      <param name="obj">An object to compare with the current instance.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not a <see cref="T:System.Tuple`4" /> object.</exception>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="obj" /> in the sort order, as shown in the following table.  
  
 <list type="table"><listheader><term> Value</term><description> Description</description></listheader><item><term> A negative integer</term><description> This instance precedes <paramref name="obj" />.</description></item><item><term> Zero</term><description> This instance and <paramref name="obj" /> have the same position in the sort order.</description></item><item><term> A positive integer</term><description> This instance follows <paramref name="obj" />.</description></item></list></returns>
    </member>
    <member name="M:System.Tuple`4.ToString">
      <summary>Returns a string that represents the value of this <see cref="T:System.Tuple`4" /> instance.</summary>
      <returns>The string representation of this <see cref="T:System.Tuple`4" /> object.</returns>
    </member>
    <member name="P:System.Tuple`4.Item1">
      <summary>Gets the value of the current <see cref="T:System.Tuple`4" /> object's first component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`4" /> object's first component.</returns>
    </member>
    <member name="P:System.Tuple`4.Item2">
      <summary>Gets the value of the current <see cref="T:System.Tuple`4" /> object's second component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`4" /> object's second component.</returns>
    </member>
    <member name="P:System.Tuple`4.Item3">
      <summary>Gets the value of the current <see cref="T:System.Tuple`4" /> object's third component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`4" /> object's third component.</returns>
    </member>
    <member name="P:System.Tuple`4.Item4">
      <summary>Gets the value of the current <see cref="T:System.Tuple`4" /> object's fourth component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`4" /> object's fourth component.</returns>
    </member>
    <member name="P:System.Tuple`4.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
      <summary>Gets the value of the specified <see langword="Tuple" /> element.</summary>
      <param name="index">The index of the specified <see langword="Tuple" /> element. <paramref name="index" /> can range from 0 to 3.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is less than 0 or greater than 3.</exception>
      <returns>The value of the <see langword="Tuple" /> element at the specified position.</returns>
    </member>
    <member name="P:System.Tuple`4.System#Runtime#CompilerServices#ITuple#Length">
      <summary>Gets the number of elements in the <see langword="Tuple" />.</summary>
      <returns>4, the number of elements in a <see cref="T:System.Tuple`4" /> object.</returns>
    </member>
    <member name="T:System.Tuple`5">
      <summary>Represents a 5-tuple, or quintuple.</summary>
      <typeparam name="T1">The type of the tuple's first component.</typeparam>
      <typeparam name="T2">The type of the tuple's second component.</typeparam>
      <typeparam name="T3">The type of the tuple's third component.</typeparam>
      <typeparam name="T4">The type of the tuple's fourth component.</typeparam>
      <typeparam name="T5">The type of the tuple's fifth component.</typeparam>
    </member>
    <member name="M:System.Tuple`5.#ctor(`0,`1,`2,`3,`4)">
      <summary>Initializes a new instance of the <see cref="T:System.Tuple`5" /> class.</summary>
      <param name="item1">The value of the tuple's first component.</param>
      <param name="item2">The value of the tuple's second component.</param>
      <param name="item3">The value of the tuple's third component.</param>
      <param name="item4">The value of the tuple's fourth component</param>
      <param name="item5">The value of the tuple's fifth component.</param>
    </member>
    <member name="M:System.Tuple`5.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.Tuple`5" /> object is equal to a specified object.</summary>
      <param name="obj">The object to compare with this instance.</param>
      <returns>
        <see langword="true" /> if the current instance is equal to the specified object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Tuple`5.GetHashCode">
      <summary>Returns the hash code for the current <see cref="T:System.Tuple`5" /> object.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Tuple`5.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>Compares the current <see cref="T:System.Tuple`5" /> object to a specified object by using a specified comparer and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</summary>
      <param name="other">An object to compare with the current instance.</param>
      <param name="comparer">An object that provides custom rules for comparison.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> is not a <see cref="T:System.Tuple`5" /> object.</exception>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="other" /> in the sort order, as shown in the following table.  
  
 <list type="table"><listheader><term> Value</term><description> Description</description></listheader><item><term> A negative integer</term><description> This instance precedes <paramref name="other" />.</description></item><item><term> Zero</term><description> This instance and <paramref name="other" /> have the same position in the sort order.</description></item><item><term> A positive integer</term><description> This instance follows <paramref name="other" />.</description></item></list></returns>
    </member>
    <member name="M:System.Tuple`5.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.Tuple`5" /> object is equal to a specified object based on a specified comparison method.</summary>
      <param name="other">The object to compare with this instance.</param>
      <param name="comparer">An object that defines the method to use to evaluate whether the two objects are equal.</param>
      <returns>
        <see langword="true" /> if the current instance is equal to the specified object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Tuple`5.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>Calculates the hash code for the current <see cref="T:System.Tuple`5" /> object by using a specified computation method.</summary>
      <param name="comparer">An object whose <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> method calculates the hash code of the current <see cref="T:System.Tuple`5" /> object.</param>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Tuple`5.System#IComparable#CompareTo(System.Object)">
      <summary>Compares the current <see cref="T:System.Tuple`5" /> object to a specified object and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</summary>
      <param name="obj">An object to compare with the current instance.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not a <see cref="T:System.Tuple`5" /> object.</exception>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="obj" /> in the sort order, as shown in the following table.  
  
 <list type="table"><listheader><term> Value</term><description> Description</description></listheader><item><term> A negative integer</term><description> This instance precedes <paramref name="obj" />.</description></item><item><term> Zero</term><description> This instance and <paramref name="obj" /> have the same position in the sort order.</description></item><item><term> A positive integer</term><description> This instance follows <paramref name="obj" />.</description></item></list></returns>
    </member>
    <member name="M:System.Tuple`5.ToString">
      <summary>Returns a string that represents the value of this <see cref="T:System.Tuple`5" /> instance.</summary>
      <returns>The string representation of this <see cref="T:System.Tuple`5" /> object.</returns>
    </member>
    <member name="P:System.Tuple`5.Item1">
      <summary>Gets the value of the current <see cref="T:System.Tuple`5" /> object's first component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`5" /> object's first component.</returns>
    </member>
    <member name="P:System.Tuple`5.Item2">
      <summary>Gets the value of the current <see cref="T:System.Tuple`5" /> object's second component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`5" /> object's second component.</returns>
    </member>
    <member name="P:System.Tuple`5.Item3">
      <summary>Gets the value of the current <see cref="T:System.Tuple`5" /> object's third component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`5" /> object's third component.</returns>
    </member>
    <member name="P:System.Tuple`5.Item4">
      <summary>Gets the value of the current <see cref="T:System.Tuple`5" /> object's fourth component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`5" /> object's fourth component.</returns>
    </member>
    <member name="P:System.Tuple`5.Item5">
      <summary>Gets the value of the current <see cref="T:System.Tuple`5" /> object's fifth component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`5" /> object's fifth component.</returns>
    </member>
    <member name="P:System.Tuple`5.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
      <summary>Gets the value of the specified <see langword="Tuple" /> element.</summary>
      <param name="index">The index of the specified <see langword="Tuple" /> element. <paramref name="index" /> can range from 0 to 4.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is less than 0 or greater than 4.</exception>
      <returns>The value of the <see langword="Tuple" /> element at the specified position.</returns>
    </member>
    <member name="P:System.Tuple`5.System#Runtime#CompilerServices#ITuple#Length">
      <summary>Gets the number of elements in the <see langword="Tuple" />.</summary>
      <returns>5, the number of elements in a <see cref="T:System.Tuple`5" /> object.</returns>
    </member>
    <member name="T:System.Tuple`6">
      <summary>Represents a 6-tuple, or sextuple.</summary>
      <typeparam name="T1">The type of the tuple's first component.</typeparam>
      <typeparam name="T2">The type of the tuple's second component.</typeparam>
      <typeparam name="T3">The type of the tuple's third component.</typeparam>
      <typeparam name="T4">The type of the tuple's fourth component.</typeparam>
      <typeparam name="T5">The type of the tuple's fifth component.</typeparam>
      <typeparam name="T6">The type of the tuple's sixth component.</typeparam>
    </member>
    <member name="M:System.Tuple`6.#ctor(`0,`1,`2,`3,`4,`5)">
      <summary>Initializes a new instance of the <see cref="T:System.Tuple`6" /> class.</summary>
      <param name="item1">The value of the tuple's first component.</param>
      <param name="item2">The value of the tuple's second component.</param>
      <param name="item3">The value of the tuple's third component.</param>
      <param name="item4">The value of the tuple's fourth component</param>
      <param name="item5">The value of the tuple's fifth component.</param>
      <param name="item6">The value of the tuple's sixth component.</param>
    </member>
    <member name="M:System.Tuple`6.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.Tuple`6" /> object is equal to a specified object.</summary>
      <param name="obj">The object to compare with this instance.</param>
      <returns>
        <see langword="true" /> if the current instance is equal to the specified object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Tuple`6.GetHashCode">
      <summary>Returns the hash code for the current <see cref="T:System.Tuple`6" /> object.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>Compares the current <see cref="T:System.Tuple`6" /> object to a specified object by using a specified comparer and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</summary>
      <param name="other">An object to compare with the current instance.</param>
      <param name="comparer">An object that provides custom rules for comparison.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> is not a <see cref="T:System.Tuple`6" /> object.</exception>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="other" /> in the sort order, as shown in the following table.  
  
 <list type="table"><listheader><term> Value</term><description> Description</description></listheader><item><term> A negative integer</term><description> This instance precedes <paramref name="other" />.</description></item><item><term> Zero</term><description> This instance and <paramref name="other" /> have the same position in the sort order.</description></item><item><term> A positive integer</term><description> This instance follows <paramref name="other" />.</description></item></list></returns>
    </member>
    <member name="M:System.Tuple`6.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.Tuple`6" /> object is equal to a specified object based on a specified comparison method.</summary>
      <param name="other">The object to compare with this instance.</param>
      <param name="comparer">An object that defines the method to use to evaluate whether the two objects are equal.</param>
      <returns>
        <see langword="true" /> if the current instance is equal to the specified object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Tuple`6.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>Calculates the hash code for the current <see cref="T:System.Tuple`6" /> object by using a specified computation method.</summary>
      <param name="comparer">An object whose <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> method calculates the hash code of the current <see cref="T:System.Tuple`6" /> object.</param>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Tuple`6.System#IComparable#CompareTo(System.Object)">
      <summary>Compares the current <see cref="T:System.Tuple`6" /> object to a specified object and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</summary>
      <param name="obj">An object to compare with the current instance.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not a <see cref="T:System.Tuple`6" /> object.</exception>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="obj" /> in the sort order, as shown in the following table.  
  
 <list type="table"><listheader><term> Value</term><description> Description</description></listheader><item><term> A negative integer</term><description> This instance precedes <paramref name="obj" />.</description></item><item><term> Zero</term><description> This instance and <paramref name="obj" /> have the same position in the sort order.</description></item><item><term> A positive integer</term><description> This instance follows <paramref name="obj" />.</description></item></list></returns>
    </member>
    <member name="M:System.Tuple`6.ToString">
      <summary>Returns a string that represents the value of this <see cref="T:System.Tuple`6" /> instance.</summary>
      <returns>The string representation of this <see cref="T:System.Tuple`6" /> object.</returns>
    </member>
    <member name="P:System.Tuple`6.Item1">
      <summary>Gets the value of the current <see cref="T:System.Tuple`6" /> object's first component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`6" /> object's first component.</returns>
    </member>
    <member name="P:System.Tuple`6.Item2">
      <summary>Gets the value of the current <see cref="T:System.Tuple`6" /> object's second component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`6" /> object's second component.</returns>
    </member>
    <member name="P:System.Tuple`6.Item3">
      <summary>Gets the value of the current <see cref="T:System.Tuple`6" /> object's third component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`6" /> object's third component.</returns>
    </member>
    <member name="P:System.Tuple`6.Item4">
      <summary>Gets the value of the current <see cref="T:System.Tuple`6" /> object's fourth component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`6" /> object's fourth component.</returns>
    </member>
    <member name="P:System.Tuple`6.Item5">
      <summary>Gets the value of the current <see cref="T:System.Tuple`6" /> object's fifth component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`6" /> object's fifth  component.</returns>
    </member>
    <member name="P:System.Tuple`6.Item6">
      <summary>Gets the value of the current <see cref="T:System.Tuple`6" /> object's sixth component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`6" /> object's sixth component.</returns>
    </member>
    <member name="P:System.Tuple`6.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
      <summary>Gets the value of the specified <see langword="Tuple" /> element.</summary>
      <param name="index">The index of the specified <see langword="Tuple" /> element. <paramref name="index" /> can range from 0 to 5.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is less than 0 or greater than 5.</exception>
      <returns>The value of the <see langword="Tuple" /> element at the specified position.</returns>
    </member>
    <member name="P:System.Tuple`6.System#Runtime#CompilerServices#ITuple#Length">
      <summary>Gets the number of elements in the <see langword="Tuple" />.</summary>
      <returns>6, the number of elements in a <see cref="T:System.Tuple`6" /> object.</returns>
    </member>
    <member name="T:System.Tuple`7">
      <summary>Represents a 7-tuple, or septuple.</summary>
      <typeparam name="T1">The type of the tuple's first component.</typeparam>
      <typeparam name="T2">The type of the tuple's second component.</typeparam>
      <typeparam name="T3">The type of the tuple's third component.</typeparam>
      <typeparam name="T4">The type of the tuple's fourth component.</typeparam>
      <typeparam name="T5">The type of the tuple's fifth component.</typeparam>
      <typeparam name="T6">The type of the tuple's sixth component.</typeparam>
      <typeparam name="T7">The type of the tuple's seventh component.</typeparam>
    </member>
    <member name="M:System.Tuple`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
      <summary>Initializes a new instance of the <see cref="T:System.Tuple`7" /> class.</summary>
      <param name="item1">The value of the tuple's first component.</param>
      <param name="item2">The value of the tuple's second component.</param>
      <param name="item3">The value of the tuple's third component.</param>
      <param name="item4">The value of the tuple's fourth component</param>
      <param name="item5">The value of the tuple's fifth component.</param>
      <param name="item6">The value of the tuple's sixth component.</param>
      <param name="item7">The value of the tuple's seventh component.</param>
    </member>
    <member name="M:System.Tuple`7.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.Tuple`7" /> object is equal to a specified object.</summary>
      <param name="obj">The object to compare with this instance.</param>
      <returns>
        <see langword="true" /> if the current instance is equal to the specified object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Tuple`7.GetHashCode">
      <summary>Returns the hash code for the current <see cref="T:System.Tuple`7" /> object.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>Compares the current <see cref="T:System.Tuple`7" /> object to a specified object by using a specified comparer, and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</summary>
      <param name="other">An object to compare with the current instance.</param>
      <param name="comparer">An object that provides custom rules for comparison.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> is not a <see cref="T:System.Tuple`7" /> object.</exception>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="other" /> in the sort order, as shown in the following table.  
  
 <list type="table"><listheader><term> Value</term><description> Description</description></listheader><item><term> A negative integer</term><description> This instance precedes <paramref name="other" />.</description></item><item><term> Zero</term><description> This instance and <paramref name="other" /> have the same position in the sort order.</description></item><item><term> A positive integer</term><description> This instance follows <paramref name="other" />.</description></item></list></returns>
    </member>
    <member name="M:System.Tuple`7.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.Tuple`7" /> object is equal to a specified object based on a specified comparison method.</summary>
      <param name="other">The object to compare with this instance.</param>
      <param name="comparer">An object that defines the method to use to evaluate whether the two objects are equal.</param>
      <returns>
        <see langword="true" /> if the current instance is equal to the specified object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Tuple`7.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>Calculates the hash code for the current <see cref="T:System.Tuple`7" /> object by using a specified computation method.</summary>
      <param name="comparer">An object whose <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> method calculates the hash code of the current <see cref="T:System.Tuple`7" /> object.</param>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
      <summary>Compares the current <see cref="T:System.Tuple`7" /> object to a specified object and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</summary>
      <param name="obj">An object to compare with the current instance.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not a <see cref="T:System.Tuple`7" /> object.</exception>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="obj" /> in the sort order, as shown in the following table.  
  
 <list type="table"><listheader><term> Value</term><description> Description</description></listheader><item><term> A negative integer</term><description> This instance precedes <paramref name="obj" />.</description></item><item><term> Zero</term><description> This instance and <paramref name="obj" /> have the same position in the sort order.</description></item><item><term> A positive integer</term><description> This instance follows <paramref name="obj" />.</description></item></list></returns>
    </member>
    <member name="M:System.Tuple`7.ToString">
      <summary>Returns a string that represents the value of this <see cref="T:System.Tuple`7" /> instance.</summary>
      <returns>The string representation of this <see cref="T:System.Tuple`7" /> object.</returns>
    </member>
    <member name="P:System.Tuple`7.Item1">
      <summary>Gets the value of the current <see cref="T:System.Tuple`7" /> object's first component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`7" /> object's first component.</returns>
    </member>
    <member name="P:System.Tuple`7.Item2">
      <summary>Gets the value of the current <see cref="T:System.Tuple`7" /> object's second component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`7" /> object's second component.</returns>
    </member>
    <member name="P:System.Tuple`7.Item3">
      <summary>Gets the value of the current <see cref="T:System.Tuple`7" /> object's third component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`7" /> object's third component.</returns>
    </member>
    <member name="P:System.Tuple`7.Item4">
      <summary>Gets the value of the current <see cref="T:System.Tuple`7" /> object's fourth component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`7" /> object's fourth component.</returns>
    </member>
    <member name="P:System.Tuple`7.Item5">
      <summary>Gets the value of the current <see cref="T:System.Tuple`7" /> object's fifth component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`7" /> object's fifth component.</returns>
    </member>
    <member name="P:System.Tuple`7.Item6">
      <summary>Gets the value of the current <see cref="T:System.Tuple`7" /> object's sixth component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`7" /> object's sixth component.</returns>
    </member>
    <member name="P:System.Tuple`7.Item7">
      <summary>Gets the value of the current <see cref="T:System.Tuple`7" /> object's seventh component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`7" /> object's seventh component.</returns>
    </member>
    <member name="P:System.Tuple`7.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
      <summary>Gets the value of the specified <see langword="Tuple" /> element.</summary>
      <param name="index">The index of the specified <see langword="Tuple" /> element. <paramref name="index" /> can range from 0 to 6.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is less than 0 or greater than 6.</exception>
      <returns>The value of the <see langword="Tuple" /> element at the specified position.</returns>
    </member>
    <member name="P:System.Tuple`7.System#Runtime#CompilerServices#ITuple#Length">
      <summary>Gets the number of elements in the <see langword="Tuple" />.</summary>
      <returns>7, the number of elements in a <see cref="T:System.Tuple`7" /> object.</returns>
    </member>
    <member name="T:System.Tuple`8">
      <summary>Represents an n-tuple, where n is 8 or greater.</summary>
      <typeparam name="T1">The type of the tuple's first component.</typeparam>
      <typeparam name="T2">The type of the tuple's second component.</typeparam>
      <typeparam name="T3">The type of the tuple's third component.</typeparam>
      <typeparam name="T4">The type of the tuple's fourth component.</typeparam>
      <typeparam name="T5">The type of the tuple's fifth component.</typeparam>
      <typeparam name="T6">The type of the tuple's sixth component.</typeparam>
      <typeparam name="T7">The type of the tuple's seventh component.</typeparam>
      <typeparam name="TRest">Any generic <see langword="Tuple" /> object that defines the types of the tuple's remaining components.</typeparam>
    </member>
    <member name="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
      <summary>Initializes a new instance of the <see cref="T:System.Tuple`8" /> class.</summary>
      <param name="item1">The value of the tuple's first component.</param>
      <param name="item2">The value of the tuple's second component.</param>
      <param name="item3">The value of the tuple's third component.</param>
      <param name="item4">The value of the tuple's fourth component</param>
      <param name="item5">The value of the tuple's fifth component.</param>
      <param name="item6">The value of the tuple's sixth component.</param>
      <param name="item7">The value of the tuple's seventh component.</param>
      <param name="rest">Any generic <see langword="Tuple" /> object that contains the values of the tuple's remaining components.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="rest" /> is not a generic <see langword="Tuple" /> object.</exception>
    </member>
    <member name="M:System.Tuple`8.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.Tuple`8" /> object is equal to a specified object.</summary>
      <param name="obj">The object to compare with this instance.</param>
      <returns>
        <see langword="true" /> if the current instance is equal to the specified object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Tuple`8.GetHashCode">
      <summary>Calculates the hash code for the current <see cref="T:System.Tuple`8" /> object.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>Compares the current <see cref="T:System.Tuple`8" /> object to a specified object by using a specified comparer and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</summary>
      <param name="other">An object to compare with the current instance.</param>
      <param name="comparer">An object that provides custom rules for comparison.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> is not a <see cref="T:System.Tuple`8" /> object.</exception>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="other" /> in the sort order, as shown in the following table.  
  
 <list type="table"><listheader><term> Value</term><description> Description</description></listheader><item><term> A negative integer</term><description> This instance precedes <paramref name="other" />.</description></item><item><term> Zero</term><description> This instance and <paramref name="other" /> have the same position in the sort order.</description></item><item><term> A positive integer</term><description> This instance follows <paramref name="other" />.</description></item></list></returns>
    </member>
    <member name="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.Tuple`8" /> object is equal to a specified object based on a specified comparison method.</summary>
      <param name="other">The object to compare with this instance.</param>
      <param name="comparer">An object that defines the method to use to evaluate whether the two objects are equal.</param>
      <returns>
        <see langword="true" /> if the current instance is equal to the specified object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Tuple`8.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>Calculates the hash code for the current <see cref="T:System.Tuple`8" /> object by using a specified computation method.</summary>
      <param name="comparer">An object whose <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> method calculates the hash code of the current <see cref="T:System.Tuple`8" /> object.</param>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
      <summary>Compares the current <see cref="T:System.Tuple`8" /> object to a specified object and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</summary>
      <param name="obj">An object to compare with the current instance.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not a <see cref="T:System.Tuple`8" /> object.</exception>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="obj" /> in the sort order, as shown in the following table.  
  
 <list type="table"><listheader><term> Value</term><description> Description</description></listheader><item><term> A negative integer</term><description> This instance precedes <paramref name="obj" />.</description></item><item><term> Zero</term><description> This instance and <paramref name="obj" /> have the same position in the sort order.</description></item><item><term> A positive integer</term><description> This instance follows <paramref name="obj" />.</description></item></list></returns>
    </member>
    <member name="M:System.Tuple`8.ToString">
      <summary>Returns a string that represents the value of this <see cref="T:System.Tuple`8" /> instance.</summary>
      <returns>The string representation of this <see cref="T:System.Tuple`8" /> object.</returns>
    </member>
    <member name="P:System.Tuple`8.Item1">
      <summary>Gets the value of the current <see cref="T:System.Tuple`8" /> object's first component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`8" /> object's first component.</returns>
    </member>
    <member name="P:System.Tuple`8.Item2">
      <summary>Gets the value of the current <see cref="T:System.Tuple`8" /> object's second component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`8" /> object's second component.</returns>
    </member>
    <member name="P:System.Tuple`8.Item3">
      <summary>Gets the value of the current <see cref="T:System.Tuple`8" /> object's third component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`8" /> object's third component.</returns>
    </member>
    <member name="P:System.Tuple`8.Item4">
      <summary>Gets the value of the current <see cref="T:System.Tuple`8" /> object's fourth component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`8" /> object's fourth component.</returns>
    </member>
    <member name="P:System.Tuple`8.Item5">
      <summary>Gets the value of the current <see cref="T:System.Tuple`8" /> object's fifth component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`8" /> object's fifth component.</returns>
    </member>
    <member name="P:System.Tuple`8.Item6">
      <summary>Gets the value of the current <see cref="T:System.Tuple`8" /> object's sixth component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`8" /> object's sixth component.</returns>
    </member>
    <member name="P:System.Tuple`8.Item7">
      <summary>Gets the value of the current <see cref="T:System.Tuple`8" /> object's seventh component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`8" /> object's seventh component.</returns>
    </member>
    <member name="P:System.Tuple`8.Rest">
      <summary>Gets the current <see cref="T:System.Tuple`8" /> object's remaining components.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`8" /> object's remaining components.</returns>
    </member>
    <member name="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
      <summary>Gets the value of the specified <see langword="Tuple" /> element.</summary>
      <param name="index">The index of the specified <see langword="Tuple" /> element. <paramref name="index" /> can range from 0 for <see langword="Item1" /> to one less than the number of elements in the <see langword="Tuple" />.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is less than 0.  
  
 -or-  
  
 <paramref name="index" /> is greater than or equal to <see cref="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Length" />.</exception>
      <returns>The value of the <see langword="Tuple" /> element at the specified position.</returns>
    </member>
    <member name="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Length">
      <summary>Gets the number of elements in the <see langword="Tuple" />.</summary>
      <returns>The number of elements in the <see langword="Tuple" />.</returns>
    </member>
    <member name="T:System.Type">
      <summary>Represents type declarations: class types, interface types, array types, value types, enumeration types, type parameters, generic type definitions, and open or closed constructed generic types.</summary>
    </member>
    <member name="F:System.Type.Delimiter">
      <summary>Separates names in the namespace of the <see cref="T:System.Type" />. This field is read-only.</summary>
    </member>
    <member name="F:System.Type.EmptyTypes">
      <summary>Represents an empty array of type <see cref="T:System.Type" />. This field is read-only.</summary>
    </member>
    <member name="F:System.Type.FilterAttribute">
      <summary>Represents the member filter used on attributes. This field is read-only.</summary>
    </member>
    <member name="F:System.Type.FilterName">
      <summary>Represents the case-sensitive member filter used on names. This field is read-only.</summary>
    </member>
    <member name="F:System.Type.FilterNameIgnoreCase">
      <summary>Represents the case-insensitive member filter used on names. This field is read-only.</summary>
    </member>
    <member name="F:System.Type.Missing">
      <summary>Represents a missing value in the <see cref="T:System.Type" /> information. This field is read-only.</summary>
    </member>
    <member name="M:System.Type.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Type" /> class.</summary>
    </member>
    <member name="M:System.Type.Equals(System.Object)">
      <summary>Determines if the underlying system type of the current <see cref="T:System.Type" /> object is the same as the underlying system type of the specified <see cref="T:System.Object" />.</summary>
      <param name="o">The object whose underlying system type is to be compared with the underlying system type of the current <see cref="T:System.Type" />. For the comparison to succeed, <paramref name="o" /> must be able to be cast or converted to an object of type   <see cref="T:System.Type" />.</param>
      <returns>
        <see langword="true" /> if the underlying system type of <paramref name="o" /> is the same as the underlying system type of the current <see cref="T:System.Type" />; otherwise, <see langword="false" />. This method also returns <see langword="false" /> if:
  
-   <paramref name="o" /> is <see langword="null" />.  
  
-   <paramref name="o" /> cannot be cast or converted to a <see cref="T:System.Type" /> object.</returns>
    </member>
    <member name="M:System.Type.Equals(System.Type)">
      <summary>Determines if the underlying system type of the current <see cref="T:System.Type" /> is the same as the underlying system type of the specified <see cref="T:System.Type" />.</summary>
      <param name="o">The object whose underlying system type is to be compared with the underlying system type of the current <see cref="T:System.Type" />.</param>
      <returns>
        <see langword="true" /> if the underlying system type of <paramref name="o" /> is the same as the underlying system type of the current <see cref="T:System.Type" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)">
      <summary>Returns an array of <see cref="T:System.Type" /> objects representing a filtered list of interfaces implemented or inherited by the current <see cref="T:System.Type" />.</summary>
      <param name="filter">The delegate that compares the interfaces against <paramref name="filterCriteria" />.</param>
      <param name="filterCriteria">The search criteria that determines whether an interface should be included in the returned array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filter" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">A static initializer is invoked and throws an exception.</exception>
      <returns>An array of <see cref="T:System.Type" /> objects representing a filtered list of the interfaces implemented or inherited by the current <see cref="T:System.Type" />, or an empty array if no interfaces matching the filter are implemented or inherited by the current <see cref="T:System.Type" />.</returns>
    </member>
    <member name="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)">
      <summary>Returns a filtered array of <see cref="T:System.Reflection.MemberInfo" /> objects of the specified member type.</summary>
      <param name="memberType">A bitwise combination of the enumeration values that indicates the type of member to search for.</param>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specify how the search is conducted.  
  
 -or-  
  
 <see cref="F:System.Reflection.BindingFlags.Default" /> to return <see langword="null" />.</param>
      <param name="filter">The delegate that does the comparisons, returning <see langword="true" /> if the member currently being inspected matches the <paramref name="filterCriteria" /> and <see langword="false" /> otherwise.</param>
      <param name="filterCriteria">The search criteria that determines whether a member is returned in the array of <see langword="MemberInfo" /> objects.  
  
 The fields of <see langword="FieldAttributes" />, <see langword="MethodAttributes" />, and <see langword="MethodImplAttributes" /> can be used in conjunction with the <see langword="FilterAttribute" /> delegate supplied by this class.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filter" /> is <see langword="null" />.</exception>
      <returns>A filtered array of <see cref="T:System.Reflection.MemberInfo" /> objects of the specified member type.  
  
 -or-  
  
 An empty array if the current <see cref="T:System.Type" /> does not have members of type <paramref name="memberType" /> that match the filter criteria.</returns>
    </member>
    <member name="M:System.Type.GetArrayRank">
      <summary>Gets the number of dimensions in an array.</summary>
      <exception cref="T:System.NotSupportedException">The functionality of this method is unsupported in the base class and must be implemented in a derived class instead.</exception>
      <exception cref="T:System.ArgumentException">The current type is not an array.</exception>
      <returns>An integer that contains the number of dimensions in the current type.</returns>
    </member>
    <member name="M:System.Type.GetAttributeFlagsImpl">
      <summary>When overridden in a derived class, implements the <see cref="P:System.Type.Attributes" /> property and gets a bitwise combination of enumeration values that indicate the attributes associated with the <see cref="T:System.Type" />.</summary>
      <returns>A <see cref="T:System.Reflection.TypeAttributes" /> object representing the attribute set of the <see cref="T:System.Type" />.</returns>
    </member>
    <member name="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</summary>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specify how the search is conducted.  
  
 -or-  
  
 <see cref="F:System.Reflection.BindingFlags.Default" /> to return <see langword="null" />.</param>
      <param name="binder">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.  
  
 -or-  
  
 A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</param>
      <param name="callConvention">The object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and the stack is cleaned up.</param>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the constructor to get.  
  
 -or-  
  
 An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.</param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. The default binder does not process this parameter.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="types" /> is <see langword="null" />.  
  
 -or-  
  
 One of the elements in <paramref name="types" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> is multidimensional.  
  
 -or-  
  
 <paramref name="modifiers" /> is multidimensional.  
  
 -or-  
  
 <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</exception>
      <returns>An object representing the constructor that matches the specified requirements, if found; otherwise, <see langword="null" />.</returns>
    </member>
    <member name="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints.</summary>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specify how the search is conducted.  
  
 -or-  
  
 <see cref="F:System.Reflection.BindingFlags.Default" /> to return <see langword="null" />.</param>
      <param name="binder">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.  
  
 -or-  
  
 A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</param>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the constructor to get.  
  
 -or-  
  
 An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.  
  
 -or-  
  
 <see cref="F:System.Type.EmptyTypes" />.</param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the parameter type array. The default binder does not process this parameter.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="types" /> is <see langword="null" />.  
  
 -or-  
  
 One of the elements in <paramref name="types" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> is multidimensional.  
  
 -or-  
  
 <paramref name="modifiers" /> is multidimensional.  
  
 -or-  
  
 <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</exception>
      <returns>A <see cref="T:System.Reflection.ConstructorInfo" /> object representing the constructor that matches the specified requirements, if found; otherwise, <see langword="null" />.</returns>
    </member>
    <member name="M:System.Type.GetConstructor(System.Type[])">
      <summary>Searches for a public instance constructor whose parameters match the types in the specified array.</summary>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the desired constructor.  
  
 -or-  
  
 An empty array of <see cref="T:System.Type" /> objects, to get a constructor that takes no parameters. Such an empty array is provided by the <see langword="static" /> field <see cref="F:System.Type.EmptyTypes" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="types" /> is <see langword="null" />.  
  
 -or-  
  
 One of the elements in <paramref name="types" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> is multidimensional.</exception>
      <returns>An object representing the public instance constructor whose parameters match the types in the parameter type array, if found; otherwise, <see langword="null" />.</returns>
    </member>
    <member name="M:System.Type.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>When overridden in a derived class, searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</summary>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specify how the search is conducted.  
  
 -or-  
  
<see cref="F:System.Reflection.BindingFlags.Default" /> to return <see langword="null" />.</param>
      <param name="binder">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.  
  
 -or-  
  
 A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</param>
      <param name="callConvention">The object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and the stack is cleaned up.</param>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the constructor to get.  
  
 -or-  
  
 An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.</param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. The default binder does not process this parameter.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="types" /> is <see langword="null" />.  
  
 -or-  
  
 One of the elements in <paramref name="types" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> is multidimensional.  
  
 -or-  
  
 <paramref name="modifiers" /> is multidimensional.  
  
 -or-  
  
 <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</exception>
      <exception cref="T:System.NotSupportedException">The current type is a <see cref="T:System.Reflection.Emit.TypeBuilder" /> or <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />.</exception>
      <returns>A <see cref="T:System.Reflection.ConstructorInfo" /> object representing the constructor that matches the specified requirements, if found; otherwise, <see langword="null" />.</returns>
    </member>
    <member name="M:System.Type.GetConstructors">
      <summary>Returns all the public constructors defined for the current <see cref="T:System.Type" />.</summary>
      <returns>An array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing all the public instance constructors defined for the current <see cref="T:System.Type" />, but not including the type initializer (static constructor). If no public instance constructors are defined for the current <see cref="T:System.Type" />, or if the current <see cref="T:System.Type" /> represents a type parameter in the definition of a generic type or generic method, an empty array of type <see cref="T:System.Reflection.ConstructorInfo" /> is returned.</returns>
    </member>
    <member name="M:System.Type.GetConstructors(System.Reflection.BindingFlags)">
      <summary>When overridden in a derived class, searches for the constructors defined for the current <see cref="T:System.Type" />, using the specified <see langword="BindingFlags" />.</summary>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specify how the search is conducted.  
  
-or-  
  
<see cref="F:System.Reflection.BindingFlags.Default" /> to return an empty array.</param>
      <returns>An array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing all constructors defined for the current <see cref="T:System.Type" /> that match the specified binding constraints, including the type initializer if it is defined. Returns an empty array of type <see cref="T:System.Reflection.ConstructorInfo" /> if no constructors are defined for the current <see cref="T:System.Type" />, if none of the defined constructors match the binding constraints, or if the current <see cref="T:System.Type" /> represents a type parameter in the definition of a generic type or generic method.</returns>
    </member>
    <member name="M:System.Type.GetDefaultMembers">
      <summary>Searches for the members defined for the current <see cref="T:System.Type" /> whose <see cref="T:System.Reflection.DefaultMemberAttribute" /> is set.</summary>
      <returns>An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all default members of the current <see cref="T:System.Type" />.  
  
 -or-  
  
 An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have default members.</returns>
    </member>
    <member name="M:System.Type.GetElementType">
      <summary>When overridden in a derived class, returns the <see cref="T:System.Type" /> of the object encompassed or referred to by the current array, pointer or reference type.</summary>
      <returns>The <see cref="T:System.Type" /> of the object encompassed or referred to by the current array, pointer, or reference type, or <see langword="null" /> if the current <see cref="T:System.Type" /> is not an array or a pointer, or is not passed by reference, or represents a generic type or a type parameter in the definition of a generic type or generic method.</returns>
    </member>
    <member name="M:System.Type.GetEnumName(System.Object)">
      <summary>Returns the name of the constant that has the specified value, for the current enumeration type.</summary>
      <param name="value">The value whose name is to be retrieved.</param>
      <exception cref="T:System.ArgumentException">The current type is not an enumeration.  
  
 -or-  
  
 <paramref name="value" /> is neither of the current type nor does it have the same underlying type as the current type.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <returns>The name of the member of the current enumeration type that has the specified value, or <see langword="null" /> if no such constant is found.</returns>
    </member>
    <member name="M:System.Type.GetEnumNames">
      <summary>Returns the names of the members of the current enumeration type.</summary>
      <exception cref="T:System.ArgumentException">The current type is not an enumeration.</exception>
      <returns>An array that contains the names of the members of the enumeration.</returns>
    </member>
    <member name="M:System.Type.GetEnumUnderlyingType">
      <summary>Returns the underlying type of the current enumeration type.</summary>
      <exception cref="T:System.ArgumentException">The current type is not an enumeration.  
  
 -or-  
  
 The enumeration type is not valid, because it contains more than one instance field.</exception>
      <returns>The underlying type of the current enumeration.</returns>
    </member>
    <member name="M:System.Type.GetEnumValues">
      <summary>Returns an array of the values of the constants in the current enumeration type.</summary>
      <exception cref="T:System.ArgumentException">The current type is not an enumeration.</exception>
      <returns>An array that contains the values. The elements of the array are sorted by the binary values (that is, the unsigned values) of the enumeration constants.</returns>
    </member>
    <member name="M:System.Type.GetEvent(System.String)">
      <summary>Returns the <see cref="T:System.Reflection.EventInfo" /> object representing the specified public event.</summary>
      <param name="name">The string containing the name of an event that is declared or inherited by the current <see cref="T:System.Type" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
      <returns>The object representing the specified public event that is declared or inherited by the current <see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</returns>
    </member>
    <member name="M:System.Type.GetEvent(System.String,System.Reflection.BindingFlags)">
      <summary>When overridden in a derived class, returns the <see cref="T:System.Reflection.EventInfo" /> object representing the specified event, using the specified binding constraints.</summary>
      <param name="name">The string containing the name of an event which is declared or inherited by the current <see cref="T:System.Type" />.</param>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specify how the search is conducted.  
  
 -or-  
  
 <see cref="F:System.Reflection.BindingFlags.Default" /> to return <see langword="null" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
      <returns>The object representing the specified event that is declared or inherited by the current <see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</returns>
    </member>
    <member name="M:System.Type.GetEvents">
      <summary>Returns all the public events that are declared or inherited by the current <see cref="T:System.Type" />.</summary>
      <returns>An array of <see cref="T:System.Reflection.EventInfo" /> objects representing all the public events which are declared or inherited by the current <see cref="T:System.Type" />.  
  
 -or-  
  
 An empty array of type <see cref="T:System.Reflection.EventInfo" />, if the current <see cref="T:System.Type" /> does not have public events.</returns>
    </member>
    <member name="M:System.Type.GetEvents(System.Reflection.BindingFlags)">
      <summary>When overridden in a derived class, searches for events that are declared or inherited by the current <see cref="T:System.Type" />, using the specified binding constraints.</summary>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specify how the search is conducted.

-or-

 <see cref="F:System.Reflection.BindingFlags.Default" /> to return an empty array.</param>
      <returns>An array of <see cref="T:System.Reflection.EventInfo" /> objects representing all events that are declared or inherited by the current <see cref="T:System.Type" /> that match the specified binding constraints.  
  
 -or-  
  
 An empty array of type <see cref="T:System.Reflection.EventInfo" />, if the current <see cref="T:System.Type" /> does not have events, or if none of the events match the binding constraints.</returns>
    </member>
    <member name="M:System.Type.GetField(System.String)">
      <summary>Searches for the public field with the specified name.</summary>
      <param name="name">The string containing the name of the data field to get.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">This <see cref="T:System.Type" /> object is a <see cref="T:System.Reflection.Emit.TypeBuilder" /> whose <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> method has not yet been called.</exception>
      <returns>An object representing the public field with the specified name, if found; otherwise, <see langword="null" />.</returns>
    </member>
    <member name="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>Searches for the specified field, using the specified binding constraints.</summary>
      <param name="name">The string containing the name of the data field to get.</param>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specify how the search is conducted.  
  
 -or-  
  
 <see cref="F:System.Reflection.BindingFlags.Default" /> to return <see langword="null" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
      <returns>An object representing the field that matches the specified requirements, if found; otherwise, <see langword="null" />.</returns>
    </member>
    <member name="M:System.Type.GetFields">
      <summary>Returns all the public fields of the current <see cref="T:System.Type" />.</summary>
      <returns>An array of <see cref="T:System.Reflection.FieldInfo" /> objects representing all the public fields defined for the current <see cref="T:System.Type" />.  
  
 -or-  
  
 An empty array of type <see cref="T:System.Reflection.FieldInfo" />, if no public fields are defined for the current <see cref="T:System.Type" />.</returns>
    </member>
    <member name="M:System.Type.GetFields(System.Reflection.BindingFlags)">
      <summary>When overridden in a derived class, searches for the fields defined for the current <see cref="T:System.Type" />, using the specified binding constraints.</summary>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specify how the search is conducted.

-or-

 <see cref="F:System.Reflection.BindingFlags.Default" /> to return an empty array.</param>
      <returns>An array of <see cref="T:System.Reflection.FieldInfo" /> objects representing all fields defined for the current <see cref="T:System.Type" /> that match the specified binding constraints.  
  
 -or-  
  
 An empty array of type <see cref="T:System.Reflection.FieldInfo" />, if no fields are defined for the current <see cref="T:System.Type" />, or if none of the defined fields match the binding constraints.</returns>
    </member>
    <member name="M:System.Type.GetGenericArguments">
      <summary>Returns an array of <see cref="T:System.Type" /> objects that represent the type arguments of a closed generic type or the type parameters of a generic type definition.</summary>
      <exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class. Derived classes must provide an implementation.</exception>
      <returns>An array of <see cref="T:System.Type" /> objects that represent the type arguments of a generic type. Returns an empty array if the current type is not a generic type.</returns>
    </member>
    <member name="M:System.Type.GetGenericParameterConstraints">
      <summary>Returns an array of <see cref="T:System.Type" /> objects that represent the constraints on the current generic type parameter.</summary>
      <exception cref="T:System.InvalidOperationException">The current <see cref="T:System.Type" /> object is not a generic type parameter. That is, the <see cref="P:System.Type.IsGenericParameter" /> property returns <see langword="false" />.</exception>
      <returns>An array of <see cref="T:System.Type" /> objects that represent the constraints on the current generic type parameter.</returns>
    </member>
    <member name="M:System.Type.GetGenericTypeDefinition">
      <summary>Returns a <see cref="T:System.Type" /> object that represents a generic type definition from which the current generic type can be constructed.</summary>
      <exception cref="T:System.InvalidOperationException">The current type is not a generic type.  That is, <see cref="P:System.Type.IsGenericType" /> returns <see langword="false" />.</exception>
      <exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class. Derived classes must provide an implementation.</exception>
      <returns>A <see cref="T:System.Type" /> object representing a generic type from which the current type can be constructed.</returns>
    </member>
    <member name="M:System.Type.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>The hash code for this instance.</returns>
    </member>
    <member name="M:System.Type.GetInterface(System.String)">
      <summary>Searches for the interface with the specified name.</summary>
      <param name="name">The string containing the name of the interface to get. For generic interfaces, this is the mangled name.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">The current <see cref="T:System.Type" /> represents a type that implements the same generic interface with different type arguments.</exception>
      <returns>An object representing the interface with the specified name, implemented or inherited by the current <see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</returns>
    </member>
    <member name="M:System.Type.GetInterface(System.String,System.Boolean)">
      <summary>When overridden in a derived class, searches for the specified interface, specifying whether to do a case-insensitive search for the interface name.</summary>
      <param name="name">The string containing the name of the interface to get. For generic interfaces, this is the mangled name.</param>
      <param name="ignoreCase">
        <see langword="true" /> to ignore the case of that part of <paramref name="name" /> that specifies the simple interface name (the part that specifies the namespace must be correctly cased).  
  
 -or-  
  
 <see langword="false" /> to perform a case-sensitive search for all parts of <paramref name="name" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">The current <see cref="T:System.Type" /> represents a type that implements the same generic interface with different type arguments.</exception>
      <returns>An object representing the interface with the specified name, implemented or inherited by the current <see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</returns>
    </member>
    <member name="M:System.Type.GetInterfaceMap(System.Type)">
      <summary>Returns an interface mapping for the specified interface type.</summary>
      <param name="interfaceType">The interface type to retrieve a mapping for.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="interfaceType" /> is not implemented by the current type.  
  
-or-  
  
The <paramref name="interfaceType" /> argument does not refer to an interface.  
  
-or-  

The current instance or <paramref name="interfaceType" /> argument is an open generic type; that is, the <see cref="P:System.Type.ContainsGenericParameters" /> property returns <see langword="true" />.

-or-


 <paramref name="interfaceType" /> is a generic interface, and the current type is an array type.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="interfaceType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The current <see cref="T:System.Type" /> represents a generic type parameter; that is, <see cref="P:System.Type.IsGenericParameter" /> is <see langword="true" />.</exception>
      <exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class. Derived classes must provide an implementation.</exception>
      <returns>An object that represents the interface mapping for <paramref name="interfaceType" />.</returns>
    </member>
    <member name="M:System.Type.GetInterfaces">
      <summary>When overridden in a derived class, gets all the interfaces implemented or inherited by the current <see cref="T:System.Type" />.</summary>
      <exception cref="T:System.Reflection.TargetInvocationException">A static initializer is invoked and throws an exception.</exception>
      <returns>An array of <see cref="T:System.Type" /> objects representing all the interfaces implemented or inherited by the current <see cref="T:System.Type" />.  
  
 -or-  
  
 An empty array of type <see cref="T:System.Type" />, if no interfaces are implemented or inherited by the current <see cref="T:System.Type" />.</returns>
    </member>
    <member name="M:System.Type.GetMember(System.String)">
      <summary>Searches for the public members with the specified name.</summary>
      <param name="name">The string containing the name of the public members to get.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
      <returns>An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with the specified name, if found; otherwise, an empty array.</returns>
    </member>
    <member name="M:System.Type.GetMember(System.String,System.Reflection.BindingFlags)">
      <summary>Searches for the specified members, using the specified binding constraints.</summary>
      <param name="name">The string containing the name of the members to get.</param>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specify how the search is conducted.  
  
 -or-  
  
 <see cref="F:System.Reflection.BindingFlags.Default" /> to return an empty array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
      <returns>An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with the specified name, if found; otherwise, an empty array.</returns>
    </member>
    <member name="M:System.Type.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
      <summary>Searches for the specified members of the specified member type, using the specified binding constraints.</summary>
      <param name="name">The string containing the name of the members to get.</param>
      <param name="type">The value to search for.</param>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specify how the search is conducted.  
  
 -or-  
  
 <see cref="F:System.Reflection.BindingFlags.Default" /> to return an empty array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">A derived class must provide an implementation.</exception>
      <returns>An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with the specified name, if found; otherwise, an empty array.</returns>
    </member>
    <member name="M:System.Type.GetMembers">
      <summary>Returns all the public members of the current <see cref="T:System.Type" />.</summary>
      <returns>An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all the public members of the current <see cref="T:System.Type" />.  
  
 -or-  
  
 An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have public members.</returns>
    </member>
    <member name="M:System.Type.GetMembers(System.Reflection.BindingFlags)">
      <summary>When overridden in a derived class, searches for the members defined for the current <see cref="T:System.Type" />, using the specified binding constraints.</summary>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specify how the search is conducted.  
  
 -or-  
  
 <see cref="F:System.Reflection.BindingFlags.Default" /> to return an empty array.</param>
      <returns>An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all members defined for the current <see cref="T:System.Type" /> that match the specified binding constraints.  
  
 -or-  
  
 An empty array if no members are defined for the current <see cref="T:System.Type" />, or if none of the defined members match the binding constraints.</returns>
    </member>
    <member name="M:System.Type.GetMethod(System.String)">
      <summary>Searches for the public method with the specified name.</summary>
      <param name="name">The string containing the name of the public method to get.</param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method is found with the specified name.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
      <returns>An object that represents the public method with the specified name, if found; otherwise, <see langword="null" />.</returns>
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Int32,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Searches for the specified method whose parameters match the specified generic parameter count, argument types and modifiers, using the specified binding constraints and the specified calling convention.</summary>
      <param name="name">The string containing the name of the public method to get.</param>
      <param name="genericParameterCount">The number of generic type parameters of the method.</param>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specify how the search is conducted.

-or-

<see cref="F:System.Reflection.BindingFlags.Default" /> to return <see langword="null" />.</param>
      <param name="binder">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.

-or-

A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</param>
      <param name="callConvention">The object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and how the stack is cleaned up.</param>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.

-or-

An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters.</param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. To be only used when calling through COM interop, and only parameters that are passed by reference are handled. The default binder does not process this parameter.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.

-or-

<paramref name="types" /> is <see langword="null" />.

-or-

One of the elements in the <paramref name="types" /> array is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="genericParameterCount" /> is negative.</exception>
      <returns>An object representing the method that matches the specified generic parameter count, argument types, modifiers, binding constraints and calling convention, if found; otherwise, <see langword="null" />.</returns>
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Int32,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Searches for the specified method whose parameters match the specified generic parameter count, argument types and modifiers, using the specified binding constraints.</summary>
      <param name="name">The string containing the name of the public method to get.</param>
      <param name="genericParameterCount">The number of generic type parameters of the method.</param>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specify how the search is conducted.

-or-

<see cref="F:System.Reflection.BindingFlags.Default" /> to return <see langword="null" />.</param>
      <param name="binder">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.

-or-

A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</param>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.

-or-

An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters.</param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. To be only used when calling through COM interop, and only parameters that are passed by reference are handled. The default binder does not process this parameter.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.

-or-

<paramref name="types" /> is <see langword="null" />.

-or-

One of the elements in the <paramref name="types" /> array is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="genericParameterCount" /> is negative.</exception>
      <returns>An object representing the method that matches the specified generic parameter count, argument types, modifiers and binding constraints, if found; otherwise, <see langword="null" />.</returns>
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Int32,System.Type[])">
      <summary>Searches for the specified public method whose parameters match the specified generic parameter count and argument types.</summary>
      <param name="name">The string containing the name of the public method to get.</param>
      <param name="genericParameterCount">The number of generic type parameters of the method.</param>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.

-or-

An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.

-or-

<paramref name="types" /> is <see langword="null" />.

-or-

One of the elements in the <paramref name="types" /> array is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="genericParameterCount" /> is negative.</exception>
      <returns>An object representing the public method whose parameters match the specified generic parameter count and argument types, if found; otherwise, <see langword="null" />.</returns>
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Int32,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Searches for the specified public method whose parameters match the specified generic parameter count, argument types and modifiers.</summary>
      <param name="name">The string containing the name of the public method to get.</param>
      <param name="genericParameterCount">The number of generic type parameters of the method.</param>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.

-or-

An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters.</param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. To be only used when calling through COM interop, and only parameters that are passed by reference are handled. The default binder does not process this parameter.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.

-or-

<paramref name="types" /> is <see langword="null" />.

-or-

One of the elements in the <paramref name="types" /> array is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="genericParameterCount" /> is negative.</exception>
      <returns>An object representing the public method that matches the specified generic parameter count, argument types and modifiers, if found; otherwise, <see langword="null" />.</returns>
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags)">
      <summary>Searches for the specified method, using the specified binding constraints.</summary>
      <param name="name">The string containing the name of the method to get.</param>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specify how the search is conducted.  
  
 -or-  
  
 <see cref="F:System.Reflection.BindingFlags.Default" /> to return <see langword="null" />.</param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method is found with the specified name and matching the specified binding constraints.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
      <returns>An object representing the method that matches the specified requirements, if found; otherwise, <see langword="null" />.</returns>
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</summary>
      <param name="name">The string containing the name of the method to get.</param>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specify how the search is conducted.  
  
 -or-  
  
 <see cref="F:System.Reflection.BindingFlags.Default" /> to return <see langword="null" />.</param>
      <param name="binder">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.  
  
 -or-  
  
 A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</param>
      <param name="callConvention">The object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and how the stack is cleaned up.</param>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.  
  
 -or-  
  
 An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters.</param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. To be only used when calling through COM interop, and only parameters that are passed by reference are handled. The default binder does not process this parameter.</param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method is found with the specified name and matching the specified binding constraints.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="types" /> is <see langword="null" />.  
  
 -or-  
  
 One of the elements in <paramref name="types" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> is multidimensional.  
  
 -or-  
  
 <paramref name="modifiers" /> is multidimensional.</exception>
      <returns>An object representing the method that matches the specified requirements, if found; otherwise, <see langword="null" />.</returns>
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints.</summary>
      <param name="name">The string containing the name of the method to get.</param>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specify how the search is conducted.  
  
 -or-  
  
 <see cref="F:System.Reflection.BindingFlags.Default" /> to return <see langword="null" />.</param>
      <param name="binder">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.  
  
 -or-  
  
 A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</param>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.  
  
 -or-  
  
 An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters.</param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. To be only used when calling through COM interop, and only parameters that are passed by reference are handled. The default binder does not process this parameter.</param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method is found with the specified name and matching the specified binding constraints.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="types" /> is <see langword="null" />.  
  
 -or-  
  
 One of the elements in <paramref name="types" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> is multidimensional.  
  
 -or-  
  
 <paramref name="modifiers" /> is multidimensional.</exception>
      <returns>An object representing the method that matches the specified requirements, if found; otherwise, <see langword="null" />.</returns>
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Type[])">
      <summary>Searches for the specified public method whose parameters match the specified argument types.</summary>
      <param name="name">The string containing the name of the public method to get.</param>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.  
  
 -or-  
  
 An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters.</param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method is found with the specified name and specified parameters.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="types" /> is <see langword="null" />.  
  
 -or-  
  
 One of the elements in <paramref name="types" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> is multidimensional.</exception>
      <returns>An object representing the public method whose parameters match the specified argument types, if found; otherwise, <see langword="null" />.</returns>
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Searches for the specified public method whose parameters match the specified argument types and modifiers.</summary>
      <param name="name">The string containing the name of the public method to get.</param>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.  
  
 -or-  
  
 An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters.</param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. To be only used when calling through COM interop, and only parameters that are passed by reference are handled. The default binder does not process this parameter.</param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method is found with the specified name and specified parameters.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="types" /> is <see langword="null" />.  
  
 -or-  
  
 One of the elements in <paramref name="types" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> is multidimensional.  
  
 -or-  
  
 <paramref name="modifiers" /> is multidimensional.</exception>
      <returns>An object representing the public method that matches the specified requirements, if found; otherwise, <see langword="null" />.</returns>
    </member>
    <member name="M:System.Type.GetMethodImpl(System.String,System.Int32,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>When overridden in a derived class, searches for the specified method whose parameters match the specified generic parameter count, argument types and modifiers, using the specified binding constraints and the specified calling convention.</summary>
      <param name="name">The string containing the name of the method to get.</param>
      <param name="genericParameterCount">The number of generic type parameters of the method.</param>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specify how the search is conducted.

-or-

<see cref="F:System.Reflection.BindingFlags.Default" /> to return <see langword="null" />.</param>
      <param name="binder">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.

-or-

A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</param>
      <param name="callConvention">The object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and what process cleans up the stack.</param>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.

-or-

An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a method that takes no parameters.

-or-

<see langword="null" />. If <paramref name="types" /> is <see langword="null" />, arguments are not matched.</param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. The default binder does not process this parameter.</param>
      <exception cref="T:System.NotSupportedException">The method needs to be overriden and called in a derived class.</exception>
      <returns>An object representing the method that matches the specified generic parameter count, argument types, modifiers, binding constraints and calling convention, if found; otherwise, <see langword="null" />.</returns>
    </member>
    <member name="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>When overridden in a derived class, searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</summary>
      <param name="name">The string containing the name of the method to get.</param>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specify how the search is conducted.  
  
 -or-  
  
 <see cref="F:System.Reflection.BindingFlags.Default" /> to return <see langword="null" />.</param>
      <param name="binder">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.  
  
 -or-  
  
 A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</param>
      <param name="callConvention">The object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and what process cleans up the stack.</param>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.  
  
 -or-  
  
 An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a method that takes no parameters.  
  
 -or-  
  
 <see langword="null" />. If <paramref name="types" /> is <see langword="null" />, arguments are not matched.</param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. The default binder does not process this parameter.</param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method is found with the specified name and matching the specified binding constraints.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> is multidimensional.  
  
 -or-  
  
 <paramref name="modifiers" /> is multidimensional.  
  
 -or-  
  
 <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</exception>
      <exception cref="T:System.NotSupportedException">The current type is a <see cref="T:System.Reflection.Emit.TypeBuilder" /> or <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />.</exception>
      <returns>An object representing the method that matches the specified requirements, if found; otherwise, <see langword="null" />.</returns>
    </member>
    <member name="M:System.Type.GetMethods">
      <summary>Returns all the public methods of the current <see cref="T:System.Type" />.</summary>
      <returns>An array of <see cref="T:System.Reflection.MethodInfo" /> objects representing all the public methods defined for the current <see cref="T:System.Type" />.  
  
 -or-  
  
 An empty array of type <see cref="T:System.Reflection.MethodInfo" />, if no public methods are defined for the current <see cref="T:System.Type" />.</returns>
    </member>
    <member name="M:System.Type.GetMethods(System.Reflection.BindingFlags)">
      <summary>When overridden in a derived class, searches for the methods defined for the current <see cref="T:System.Type" />, using the specified binding constraints.</summary>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specify how the search is conducted.

-or-

 <see cref="F:System.Reflection.BindingFlags.Default" /> to return an empty array.</param>
      <returns>An array of <see cref="T:System.Reflection.MethodInfo" /> objects representing all methods defined for the current <see cref="T:System.Type" /> that match the specified binding constraints.  
  
 -or-  
  
 An empty array of type <see cref="T:System.Reflection.MethodInfo" />, if no methods are defined for the current <see cref="T:System.Type" />, or if none of the defined methods match the binding constraints.</returns>
    </member>
    <member name="M:System.Type.GetNestedType(System.String)">
      <summary>Searches for the public nested type with the specified name.</summary>
      <param name="name">The string containing the name of the nested type to get.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
      <returns>An object representing the public nested type with the specified name, if found; otherwise, <see langword="null" />.</returns>
    </member>
    <member name="M:System.Type.GetNestedType(System.String,System.Reflection.BindingFlags)">
      <summary>When overridden in a derived class, searches for the specified nested type, using the specified binding constraints.</summary>
      <param name="name">The string containing the name of the nested type to get.</param>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specify how the search is conducted.  
  
 -or-  
  
 <see cref="F:System.Reflection.BindingFlags.Default" /> to return <see langword="null" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
      <returns>An object representing the nested type that matches the specified requirements, if found; otherwise, <see langword="null" />.</returns>
    </member>
    <member name="M:System.Type.GetNestedTypes">
      <summary>Returns the public types nested in the current <see cref="T:System.Type" />.</summary>
      <returns>An array of <see cref="T:System.Type" /> objects representing the public types nested in the current <see cref="T:System.Type" /> (the search is not recursive), or an empty array of type <see cref="T:System.Type" /> if no public types are nested in the current <see cref="T:System.Type" />.</returns>
    </member>
    <member name="M:System.Type.GetNestedTypes(System.Reflection.BindingFlags)">
      <summary>When overridden in a derived class, searches for the types nested in the current <see cref="T:System.Type" />, using the specified binding constraints.</summary>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specify how the search is conducted.  
  
 -or-  
  
 <see cref="F:System.Reflection.BindingFlags.Default" /> to return <see langword="null" />.</param>
      <returns>An array of <see cref="T:System.Type" /> objects representing all the types nested in the current <see cref="T:System.Type" /> that match the specified binding constraints (the search is not recursive), or an empty array of type <see cref="T:System.Type" />, if no nested types are found that match the binding constraints.</returns>
    </member>
    <member name="M:System.Type.GetProperties">
      <summary>Returns all the public properties of the current <see cref="T:System.Type" />.</summary>
      <returns>An array of <see cref="T:System.Reflection.PropertyInfo" /> objects representing all public properties of the current <see cref="T:System.Type" />.  
  
 -or-  
  
 An empty array of type <see cref="T:System.Reflection.PropertyInfo" />, if the current <see cref="T:System.Type" /> does not have public properties.</returns>
    </member>
    <member name="M:System.Type.GetProperties(System.Reflection.BindingFlags)">
      <summary>When overridden in a derived class, searches for the properties of the current <see cref="T:System.Type" />, using the specified binding constraints.</summary>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specify how the search is conducted.

-or-

 <see cref="F:System.Reflection.BindingFlags.Default" /> to return an empty array.</param>
      <returns>An array of objects representing all properties of the current <see cref="T:System.Type" /> that match the specified binding constraints.  
  
 -or-  
  
 An empty array of type <see cref="T:System.Reflection.PropertyInfo" />, if the current <see cref="T:System.Type" /> does not have properties, or if none of the properties match the binding constraints.</returns>
    </member>
    <member name="M:System.Type.GetProperty(System.String)">
      <summary>Searches for the public property with the specified name.</summary>
      <param name="name">The string containing the name of the public property to get.</param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one property is found with the specified name.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
      <returns>An object representing the public property with the specified name, if found; otherwise, <see langword="null" />.</returns>
    </member>
    <member name="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags)">
      <summary>Searches for the specified property, using the specified binding constraints.</summary>
      <param name="name">The string containing the name of the property to get.</param>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specify how the search is conducted.  
  
 -or-  
  
<see cref="F:System.Reflection.BindingFlags.Default" /> to return <see langword="null" />.</param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one property is found with the specified name and matching the specified binding constraints.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
      <returns>An object representing the property that matches the specified requirements, if found; otherwise, <see langword="null" />.</returns>
    </member>
    <member name="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Searches for the specified property whose parameters match the specified argument types and modifiers, using the specified binding constraints.</summary>
      <param name="name">The string containing the name of the property to get.</param>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specify how the search is conducted.  
  
 -or-  
  
 <see cref="F:System.Reflection.BindingFlags.Default" /> to return <see langword="null" />.</param>
      <param name="binder">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.  
  
 -or-  
  
 A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</param>
      <param name="returnType">The return type of the property.</param>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.  
  
 -or-  
  
 An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. The default binder does not process this parameter.</param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one property is found with the specified name and matching the specified binding constraints.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="types" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> is multidimensional.  
  
 -or-  
  
 <paramref name="modifiers" /> is multidimensional.  
  
 -or-  
  
 <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</exception>
      <exception cref="T:System.NullReferenceException">An element of <paramref name="types" /> is <see langword="null" />.</exception>
      <returns>An object representing the property that matches the specified requirements, if found; otherwise, <see langword="null" />.</returns>
    </member>
    <member name="M:System.Type.GetProperty(System.String,System.Type)">
      <summary>Searches for the public property with the specified name and return type.</summary>
      <param name="name">The string containing the name of the public property to get.</param>
      <param name="returnType">The return type of the property.</param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one property is found with the specified name.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />, or <paramref name="returnType" /> is <see langword="null" />.</exception>
      <returns>An object representing the public property with the specified name, if found; otherwise, <see langword="null" />.</returns>
    </member>
    <member name="M:System.Type.GetProperty(System.String,System.Type,System.Type[])">
      <summary>Searches for the specified public property whose parameters match the specified argument types.</summary>
      <param name="name">The string containing the name of the public property to get.</param>
      <param name="returnType">The return type of the property.</param>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.  
  
 -or-  
  
 An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one property is found with the specified name and matching the specified argument types.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="types" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> is multidimensional.</exception>
      <exception cref="T:System.NullReferenceException">An element of <paramref name="types" /> is <see langword="null" />.</exception>
      <returns>An object representing the public property whose parameters match the specified argument types, if found; otherwise, <see langword="null" />.</returns>
    </member>
    <member name="M:System.Type.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Searches for the specified public property whose parameters match the specified argument types and modifiers.</summary>
      <param name="name">The string containing the name of the public property to get.</param>
      <param name="returnType">The return type of the property.</param>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.  
  
 -or-  
  
 An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. The default binder does not process this parameter.</param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one property is found with the specified name and matching the specified argument types and modifiers.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="types" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> is multidimensional.  
  
 -or-  
  
 <paramref name="modifiers" /> is multidimensional.  
  
 -or-  
  
 <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</exception>
      <exception cref="T:System.NullReferenceException">An element of <paramref name="types" /> is <see langword="null" />.</exception>
      <returns>An object representing the public property that matches the specified requirements, if found; otherwise, <see langword="null" />.</returns>
    </member>
    <member name="M:System.Type.GetProperty(System.String,System.Type[])">
      <summary>Searches for the specified public property whose parameters match the specified argument types.</summary>
      <param name="name">The string containing the name of the public property to get.</param>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.  
  
 -or-  
  
 An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one property is found with the specified name and matching the specified argument types.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="types" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> is multidimensional.</exception>
      <exception cref="T:System.NullReferenceException">An element of <paramref name="types" /> is <see langword="null" />.</exception>
      <returns>An object representing the public property whose parameters match the specified argument types, if found; otherwise, <see langword="null" />.</returns>
    </member>
    <member name="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>When overridden in a derived class, searches for the specified property whose parameters match the specified argument types and modifiers, using the specified binding constraints.</summary>
      <param name="name">The string containing the name of the property to get.</param>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specify how the search is conducted.  
  
 -or-  
  
 <see cref="F:System.Reflection.BindingFlags.Default" /> to return <see langword="null" />.</param>
      <param name="binder">An object that defines a set of properties and enables binding, which can involve selection of an overloaded member, coercion of argument types, and invocation of a member through reflection.  
  
 -or-  
  
 A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</param>
      <param name="returnType">The return type of the property.</param>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.  
  
 -or-  
  
 An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. The default binder does not process this parameter.</param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one property is found with the specified name and matching the specified binding constraints.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="types" /> is <see langword="null" />.  
  
 -or-  
  
 One of the elements in <paramref name="types" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> is multidimensional.  
  
 -or-  
  
 <paramref name="modifiers" /> is multidimensional.  
  
 -or-  
  
 <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</exception>
      <exception cref="T:System.NotSupportedException">The current type is a <see cref="T:System.Reflection.Emit.TypeBuilder" />, <see cref="T:System.Reflection.Emit.EnumBuilder" />, or <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />.</exception>
      <returns>An object representing the property that matches the specified requirements, if found; otherwise, <see langword="null" />.</returns>
    </member>
    <member name="M:System.Type.GetType">
      <summary>Gets the current <see cref="T:System.Type" />.</summary>
      <exception cref="T:System.Reflection.TargetInvocationException">A class initializer is invoked and throws an exception.</exception>
      <returns>The current <see cref="T:System.Type" />.</returns>
    </member>
    <member name="M:System.Type.GetType(System.String)">
      <summary>Gets the <see cref="T:System.Type" /> with the specified name, performing a case-sensitive search.</summary>
      <param name="typeName">The assembly-qualified name of the type to get. See <see cref="P:System.Type.AssemblyQualifiedName" />. If the type is in the currently executing assembly or in mscorlib.dll/System.Private.CoreLib.dll, it is sufficient to supply the type name qualified by its namespace.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">A class initializer is invoked and throws an exception.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.  
  
 -or-  
  
 <paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.  
  
 -or-  
  
 <paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</exception>
      <exception cref="T:System.IO.FileLoadException">
        <block subset="none" type="note">
          <para>  
 In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.IO.IOException" />, instead.</para>
        </block>  
  
 The assembly or one of its dependencies was found, but could not be loaded.</exception>
      <exception cref="T:System.BadImageFormatException">The assembly or one of its dependencies is not valid.  
  
 -or-  
  
 Version 2.0 or later of the common language runtime is currently loaded, and the assembly was compiled with a later version.</exception>
      <returns>The type with the specified name, if found; otherwise, <see langword="null" />.</returns>
    </member>
    <member name="M:System.Type.GetType(System.String,System.Boolean)">
      <summary>Gets the <see cref="T:System.Type" /> with the specified name, performing a case-sensitive search and specifying whether to throw an exception if the type is not found.</summary>
      <param name="typeName">The assembly-qualified name of the type to get. See <see cref="P:System.Type.AssemblyQualifiedName" />. If the type is in the currently executing assembly or in mscorlib.dll/System.Private.CoreLib.dll, it is sufficient to supply the type name qualified by its namespace.</param>
      <param name="throwOnError">
        <see langword="true" /> to throw an exception if the type cannot be found; <see langword="false" /> to return <see langword="null" />. Specifying <see langword="false" /> also suppresses some other exception conditions, but not all of them. See the Exceptions section.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">A class initializer is invoked and throws an exception.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="throwOnError" /> is <see langword="true" /> and the type is not found.  
  
 -or-  
  
 <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.  
  
 -or-  
  
 <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> is an empty string.  
  
 -or-  
  
 <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> represents an array type with an invalid size.  
  
 -or-  
  
 <paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid syntax. For example, "MyType[,*,]".  
  
 -or-  
  
 <paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.  
  
 -or-  
  
 <paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.  
  
 -or-  
  
 <paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="throwOnError" /> is <see langword="true" /> and the assembly or one of its dependencies was not found.</exception>
      <exception cref="T:System.IO.FileLoadException">
        <block subset="none" type="note">
          <para>  
 In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.IO.IOException" />, instead.</para>
        </block>  
  
 The assembly or one of its dependencies was found, but could not be loaded.</exception>
      <exception cref="T:System.BadImageFormatException">The assembly or one of its dependencies is not valid.  
  
 -or-  
  
 Version 2.0 or later of the common language runtime is currently loaded, and the assembly was compiled with a later version.</exception>
      <returns>The type with the specified name. If the type is not found, the <paramref name="throwOnError" /> parameter specifies whether <see langword="null" /> is returned or an exception is thrown. In some cases, an exception is thrown regardless of the value of <paramref name="throwOnError" />. See the Exceptions section.</returns>
    </member>
    <member name="M:System.Type.GetType(System.String,System.Boolean,System.Boolean)">
      <summary>Gets the <see cref="T:System.Type" /> with the specified name, specifying whether to throw an exception if the type is not found and whether to perform a case-sensitive search.</summary>
      <param name="typeName">The assembly-qualified name of the type to get. See <see cref="P:System.Type.AssemblyQualifiedName" />. If the type is in the currently executing assembly or in mscorlib.dll/System.Private.CoreLib.dll, it is sufficient to supply the type name qualified by its namespace.</param>
      <param name="throwOnError">
        <see langword="true" /> to throw an exception if the type cannot be found; <see langword="false" /> to return <see langword="null" />. Specifying <see langword="false" /> also suppresses some other exception conditions, but not all of them. See the Exceptions section.</param>
      <param name="ignoreCase">
        <see langword="true" /> to perform a case-insensitive search for <paramref name="typeName" />, <see langword="false" /> to perform a case-sensitive search for <paramref name="typeName" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">A class initializer is invoked and throws an exception.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="throwOnError" /> is <see langword="true" /> and the type is not found.  
  
 -or-  
  
 <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.  
  
 -or-  
  
 <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> is an empty string.  
  
 -or-  
  
 <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> represents an array type with an invalid size.  
  
 -or-  
  
 <paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid syntax. For example, "MyType[,*,]".  
  
 -or-  
  
 <paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.  
  
 -or-  
  
 <paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.  
  
 -or-  
  
 <paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="throwOnError" /> is <see langword="true" /> and the assembly or one of its dependencies was not found.</exception>
      <exception cref="T:System.IO.FileLoadException">The assembly or one of its dependencies was found, but could not be loaded.</exception>
      <exception cref="T:System.BadImageFormatException">The assembly or one of its dependencies is not valid.  
  
 -or-  
  
 Version 2.0 or later of the common language runtime is currently loaded, and the assembly was compiled with a later version.</exception>
      <returns>The type with the specified name. If the type is not found, the <paramref name="throwOnError" /> parameter specifies whether <see langword="null" /> is returned or an exception is thrown. In some cases, an exception is thrown regardless of the value of <paramref name="throwOnError" />. See the Exceptions section.</returns>
    </member>
    <member name="M:System.Type.GetType(System.String,System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly},System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type})">
      <summary>Gets the type with the specified name, optionally providing custom methods to resolve the assembly and the type.</summary>
      <param name="typeName">The name of the type to get. If the <paramref name="typeResolver" /> parameter is provided, the type name can be any string that <paramref name="typeResolver" /> is capable of resolving. If the <paramref name="assemblyResolver" /> parameter is provided or if standard type resolution is used, <paramref name="typeName" /> must be an assembly-qualified name (see <see cref="P:System.Type.AssemblyQualifiedName" />), unless the type is in the currently executing assembly or in mscorlib.dll/System.Private.CoreLib.dll, in which case it is sufficient to supply the type name qualified by its namespace.</param>
      <param name="assemblyResolver">A method that locates and returns the assembly that is specified in <paramref name="typeName" />. The assembly name is passed to <paramref name="assemblyResolver" /> as an <see cref="T:System.Reflection.AssemblyName" /> object. If <paramref name="typeName" /> does not contain the name of an assembly, <paramref name="assemblyResolver" /> is not called. If <paramref name="assemblyResolver" /> is not supplied, standard assembly resolution is performed.  
  
 Caution   Do not pass methods from unknown or untrusted callers. Doing so could result in elevation of privilege for malicious code. Use only methods that you provide or that you are familiar with.</param>
      <param name="typeResolver">A method that locates and returns the type that is specified by <paramref name="typeName" /> from the assembly that is returned by <paramref name="assemblyResolver" /> or by standard assembly resolution. If no assembly is provided, the <paramref name="typeResolver" /> method can provide one. The method also takes a parameter that specifies whether to perform a case-insensitive search; <see langword="false" /> is passed to that parameter.  
  
 Caution   Do not pass methods from unknown or untrusted callers.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">A class initializer is invoked and throws an exception.</exception>
      <exception cref="T:System.ArgumentException">An error occurs when <paramref name="typeName" /> is parsed into a type name and an assembly name (for example, when the simple type name includes an unescaped special character).  
  
 -or-  
  
 <paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.  
  
 -or-  
  
 <paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.  
  
 -or-  
  
 <paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</exception>
      <exception cref="T:System.IO.FileLoadException">The assembly or one of its dependencies was found, but could not be loaded.  
  
 -or-  
  
 <paramref name="typeName" /> contains an invalid assembly name.  
  
 -or-  
  
 <paramref name="typeName" /> is a valid assembly name without a type name.</exception>
      <exception cref="T:System.BadImageFormatException">The assembly or one of its dependencies is not valid.  
  
 -or-  
  
 The assembly was compiled with a later version of the common language runtime than the version that is currently loaded.</exception>
      <returns>The type with the specified name, or <see langword="null" /> if the type is not found.</returns>
    </member>
    <member name="M:System.Type.GetType(System.String,System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly},System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type},System.Boolean)">
      <summary>Gets the type with the specified name, specifying whether to throw an exception if the type is not found, and optionally providing custom methods to resolve the assembly and the type.</summary>
      <param name="typeName">The name of the type to get. If the <paramref name="typeResolver" /> parameter is provided, the type name can be any string that <paramref name="typeResolver" /> is capable of resolving. If the <paramref name="assemblyResolver" /> parameter is provided or if standard type resolution is used, <paramref name="typeName" /> must be an assembly-qualified name (see <see cref="P:System.Type.AssemblyQualifiedName" />), unless the type is in the currently executing assembly or in mscorlib.dll/System.Private.CoreLib.dll, in which case it is sufficient to supply the type name qualified by its namespace.</param>
      <param name="assemblyResolver">A method that locates and returns the assembly that is specified in <paramref name="typeName" />. The assembly name is passed to <paramref name="assemblyResolver" /> as an <see cref="T:System.Reflection.AssemblyName" /> object. If <paramref name="typeName" /> does not contain the name of an assembly, <paramref name="assemblyResolver" /> is not called. If <paramref name="assemblyResolver" /> is not supplied, standard assembly resolution is performed.  
  
 Caution   Do not pass methods from unknown or untrusted callers. Doing so could result in elevation of privilege for malicious code. Use only methods that you provide or that you are familiar with.</param>
      <param name="typeResolver">A method that locates and returns the type that is specified by <paramref name="typeName" /> from the assembly that is returned by <paramref name="assemblyResolver" /> or by standard assembly resolution. If no assembly is provided, the method can provide one. The method also takes a parameter that specifies whether to perform a case-insensitive search; <see langword="false" /> is passed to that parameter.  
  
 Caution   Do not pass methods from unknown or untrusted callers.</param>
      <param name="throwOnError">
        <see langword="true" /> to throw an exception if the type cannot be found; <see langword="false" /> to return <see langword="null" />. Specifying <see langword="false" /> also suppresses some other exception conditions, but not all of them. See the Exceptions section.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">A class initializer is invoked and throws an exception.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="throwOnError" /> is <see langword="true" /> and the type is not found.  
  
 -or-  
  
 <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.  
  
 -or-  
  
 <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> is an empty string.  
  
 -or-  
  
 <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> represents an array type with an invalid size.  
  
 -or-  
  
 <paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</exception>
      <exception cref="T:System.ArgumentException">An error occurs when <paramref name="typeName" /> is parsed into a type name and an assembly name (for example, when the simple type name includes an unescaped special character).  
  
 -or-  
  
 <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid syntax (for example, "MyType[,*,]").  
  
 -or-  
  
 <paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.  
  
 -or-  
  
 <paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.  
  
 -or-  
  
 <paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="throwOnError" /> is <see langword="true" /> and the assembly or one of its dependencies was not found.  
  
 -or-  
  
 <paramref name="typeName" /> contains an invalid assembly name.  
  
 -or-  
  
 <paramref name="typeName" /> is a valid assembly name without a type name.</exception>
      <exception cref="T:System.IO.FileLoadException">The assembly or one of its dependencies was found, but could not be loaded.</exception>
      <exception cref="T:System.BadImageFormatException">The assembly or one of its dependencies is not valid.  
  
 -or-  
  
 The assembly was compiled with a later version of the common language runtime than the version that is currently loaded.</exception>
      <returns>The type with the specified name. If the type is not found, the <paramref name="throwOnError" /> parameter specifies whether <see langword="null" /> is returned or an exception is thrown. In some cases, an exception is thrown regardless of the value of <paramref name="throwOnError" />. See the Exceptions section.</returns>
    </member>
    <member name="M:System.Type.GetType(System.String,System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly},System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type},System.Boolean,System.Boolean)">
      <summary>Gets the type with the specified name, specifying whether to perform a case-sensitive search and whether to throw an exception if the type is not found, and optionally providing custom methods to resolve the assembly and the type.</summary>
      <param name="typeName">The name of the type to get. If the <paramref name="typeResolver" /> parameter is provided, the type name can be any string that <paramref name="typeResolver" /> is capable of resolving. If the <paramref name="assemblyResolver" /> parameter is provided or if standard type resolution is used, <paramref name="typeName" /> must be an assembly-qualified name (see <see cref="P:System.Type.AssemblyQualifiedName" />), unless the type is in the currently executing assembly or in mscorlib.dll/System.Private.CoreLib.dll, in which case it is sufficient to supply the type name qualified by its namespace.</param>
      <param name="assemblyResolver">A method that locates and returns the assembly that is specified in <paramref name="typeName" />. The assembly name is passed to <paramref name="assemblyResolver" /> as an <see cref="T:System.Reflection.AssemblyName" /> object. If <paramref name="typeName" /> does not contain the name of an assembly, <paramref name="assemblyResolver" /> is not called. If <paramref name="assemblyResolver" /> is not supplied, standard assembly resolution is performed.  
  
 Caution   Do not pass methods from unknown or untrusted callers. Doing so could result in elevation of privilege for malicious code. Use only methods that you provide or that you are familiar with.</param>
      <param name="typeResolver">A method that locates and returns the type that is specified by <paramref name="typeName" /> from the assembly that is returned by <paramref name="assemblyResolver" /> or by standard assembly resolution. If no assembly is provided, the method can provide one. The method also takes a parameter that specifies whether to perform a case-insensitive search; the value of <paramref name="ignoreCase" /> is passed to that parameter.  
  
 Caution   Do not pass methods from unknown or untrusted callers.</param>
      <param name="throwOnError">
        <see langword="true" /> to throw an exception if the type cannot be found; <see langword="false" /> to return <see langword="null" />. Specifying <see langword="false" /> also suppresses some other exception conditions, but not all of them. See the Exceptions section.</param>
      <param name="ignoreCase">
        <see langword="true" /> to perform a case-insensitive search for <paramref name="typeName" />, <see langword="false" /> to perform a case-sensitive search for <paramref name="typeName" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">A class initializer is invoked and throws an exception.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="throwOnError" /> is <see langword="true" /> and the type is not found.  
  
 -or-  
  
 <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.  
  
 -or-  
  
 <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> is an empty string.  
  
 -or-  
  
 <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> represents an array type with an invalid size.  
  
 -or-  
  
 <paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</exception>
      <exception cref="T:System.ArgumentException">An error occurs when <paramref name="typeName" /> is parsed into a type name and an assembly name (for example, when the simple type name includes an unescaped special character).  
  
 -or-  
  
 <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid syntax (for example, "MyType[,*,]").  
  
 -or-  
  
 <paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.  
  
 -or-  
  
 <paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.  
  
 -or-  
  
 <paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="throwOnError" /> is <see langword="true" /> and the assembly or one of its dependencies was not found.</exception>
      <exception cref="T:System.IO.FileLoadException">The assembly or one of its dependencies was found, but could not be loaded.  
  
 -or-  
  
 <paramref name="typeName" /> contains an invalid assembly name.  
  
 -or-  
  
 <paramref name="typeName" /> is a valid assembly name without a type name.</exception>
      <exception cref="T:System.BadImageFormatException">The assembly or one of its dependencies is not valid.  
  
 -or-  
  
 The assembly was compiled with a later version of the common language runtime than the version that is currently loaded.</exception>
      <returns>The type with the specified name. If the type is not found, the <paramref name="throwOnError" /> parameter specifies whether <see langword="null" /> is returned or an exception is thrown. In some cases, an exception is thrown regardless of the value of <paramref name="throwOnError" />. See the Exceptions section.</returns>
    </member>
    <member name="M:System.Type.GetTypeArray(System.Object[])">
      <summary>Gets the types of the objects in the specified array.</summary>
      <param name="args">An array of objects whose types to determine.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="args" /> is <see langword="null" />.  
  
 -or-  
  
 One or more of the elements in <paramref name="args" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">The class initializers are invoked and at least one throws an exception.</exception>
      <returns>An array of <see cref="T:System.Type" /> objects representing the types of the corresponding elements in <paramref name="args" />.</returns>
    </member>
    <member name="M:System.Type.GetTypeCode(System.Type)">
      <summary>Gets the underlying type code of the specified <see cref="T:System.Type" />.</summary>
      <param name="type">The type whose underlying type code to get.</param>
      <returns>The code of the underlying type, or <see cref="F:System.TypeCode.Empty" /> if <paramref name="type" /> is <see langword="null" />.</returns>
    </member>
    <member name="M:System.Type.GetTypeCodeImpl">
      <summary>Returns the underlying type code of this <see cref="T:System.Type" /> instance.</summary>
      <returns>The type code of the underlying type.</returns>
    </member>
    <member name="M:System.Type.GetTypeFromCLSID(System.Guid)">
      <summary>Gets the type associated with the specified class identifier (CLSID).</summary>
      <param name="clsid">The CLSID of the type to get.</param>
      <returns>
        <see langword="System.__ComObject" /> regardless of whether the CLSID is valid.</returns>
    </member>
    <member name="M:System.Type.GetTypeFromCLSID(System.Guid,System.Boolean)">
      <summary>Gets the type associated with the specified class identifier (CLSID), specifying whether to throw an exception if an error occurs while loading the type.</summary>
      <param name="clsid">The CLSID of the type to get.</param>
      <param name="throwOnError">
        <see langword="true" /> to throw any exception that occurs.  
  
 -or-  
  
 <see langword="false" /> to ignore any exception that occurs.</param>
      <returns>
        <see langword="System.__ComObject" /> regardless of whether the CLSID is valid.</returns>
    </member>
    <member name="M:System.Type.GetTypeFromCLSID(System.Guid,System.String)">
      <summary>Gets the type associated with the specified class identifier (CLSID) from the specified server.</summary>
      <param name="clsid">The CLSID of the type to get.</param>
      <param name="server">The server from which to load the type. If the server name is <see langword="null" />, this method automatically reverts to the local machine.</param>
      <returns>
        <see langword="System.__ComObject" /> regardless of whether the CLSID is valid.</returns>
    </member>
    <member name="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)">
      <summary>Gets the type associated with the specified class identifier (CLSID) from the specified server, specifying whether to throw an exception if an error occurs while loading the type.</summary>
      <param name="clsid">The CLSID of the type to get.</param>
      <param name="server">The server from which to load the type. If the server name is <see langword="null" />, this method automatically reverts to the local machine.</param>
      <param name="throwOnError">
        <see langword="true" /> to throw any exception that occurs.  
  
 -or-  
  
 <see langword="false" /> to ignore any exception that occurs.</param>
      <returns>
        <see langword="System.__ComObject" /> regardless of whether the CLSID is valid.</returns>
    </member>
    <member name="M:System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)">
      <summary>Gets the type referenced by the specified type handle.</summary>
      <param name="handle">The object that refers to the type.</param>
      <exception cref="T:System.Reflection.TargetInvocationException">A class initializer is invoked and throws an exception.</exception>
      <returns>The type referenced by the specified <see cref="T:System.RuntimeTypeHandle" />, or <see langword="null" /> if the <see cref="P:System.RuntimeTypeHandle.Value" /> property of <paramref name="handle" /> is <see langword="null" />.</returns>
    </member>
    <member name="M:System.Type.GetTypeFromProgID(System.String)">
      <summary>Gets the type associated with the specified program identifier (ProgID), returning null if an error is encountered while loading the <see cref="T:System.Type" />.</summary>
      <param name="progID">The ProgID of the type to get.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="progID" /> is <see langword="null" />.</exception>
      <returns>The type associated with the specified ProgID, if <paramref name="progID" /> is a valid entry in the registry and a type is associated with it; otherwise, <see langword="null" />.</returns>
    </member>
    <member name="M:System.Type.GetTypeFromProgID(System.String,System.Boolean)">
      <summary>Gets the type associated with the specified program identifier (ProgID), specifying whether to throw an exception if an error occurs while loading the type.</summary>
      <param name="progID">The ProgID of the type to get.</param>
      <param name="throwOnError">
        <see langword="true" /> to throw any exception that occurs.  
  
 -or-  
  
 <see langword="false" /> to ignore any exception that occurs.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="progID" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">The specified ProgID is not registered.</exception>
      <returns>The type associated with the specified program identifier (ProgID), if <paramref name="progID" /> is a valid entry in the registry and a type is associated with it; otherwise, <see langword="null" />.</returns>
    </member>
    <member name="M:System.Type.GetTypeFromProgID(System.String,System.String)">
      <summary>Gets the type associated with the specified program identifier (progID) from the specified server, returning null if an error is encountered while loading the type.</summary>
      <param name="progID">The progID of the type to get.</param>
      <param name="server">The server from which to load the type. If the server name is <see langword="null" />, this method automatically reverts to the local machine.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="prodID" /> is <see langword="null" />.</exception>
      <returns>The type associated with the specified program identifier (progID), if <paramref name="progID" /> is a valid entry in the registry and a type is associated with it; otherwise, <see langword="null" />.</returns>
    </member>
    <member name="M:System.Type.GetTypeFromProgID(System.String,System.String,System.Boolean)">
      <summary>Gets the type associated with the specified program identifier (progID) from the specified server, specifying whether to throw an exception if an error occurs while loading the type.</summary>
      <param name="progID">The progID of the <see cref="T:System.Type" /> to get.</param>
      <param name="server">The server from which to load the type. If the server name is <see langword="null" />, this method automatically reverts to the local machine.</param>
      <param name="throwOnError">
        <see langword="true" /> to throw any exception that occurs.  
  
 -or-  
  
 <see langword="false" /> to ignore any exception that occurs.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="progID" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">The specified progID is not registered.</exception>
      <returns>The type associated with the specified program identifier (progID), if <paramref name="progID" /> is a valid entry in the registry and a type is associated with it; otherwise, <see langword="null" />.</returns>
    </member>
    <member name="M:System.Type.GetTypeHandle(System.Object)">
      <summary>Gets the handle for the <see cref="T:System.Type" /> of a specified object.</summary>
      <param name="o">The object for which to get the type handle.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="o" /> is <see langword="null" />.</exception>
      <returns>The handle for the <see cref="T:System.Type" /> of the specified <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:System.Type.HasElementTypeImpl">
      <summary>When overridden in a derived class, implements the <see cref="P:System.Type.HasElementType" /> property and determines whether the current <see cref="T:System.Type" /> encompasses or refers to another type; that is, whether the current <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])">
      <summary>Invokes the specified member, using the specified binding constraints and matching the specified argument list.</summary>
      <param name="name">The string containing the name of the constructor, method, property, or field member to invoke.  
  
 -or-  
  
 An empty string ("") to invoke the default member.  
  
 -or-  
  
 For <see langword="IDispatch" /> members, a string representing the DispID, for example "[DispID=3]".</param>
      <param name="invokeAttr">A bitwise combination of the enumeration values that specify how the search is conducted. The access can be one of the <see langword="BindingFlags" /> such as <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />, and so on. The type of lookup need not be specified. If the type of lookup is omitted, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> | <see langword="BindingFlags.Static" /> are used.</param>
      <param name="binder">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.  
  
 -or-  
  
 A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />. Note that explicitly defining a <see cref="T:System.Reflection.Binder" /> object may be required for successfully invoking method overloads with variable arguments.</param>
      <param name="target">The object on which to invoke the specified member.</param>
      <param name="args">An array containing the arguments to pass to the member to invoke.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="invokeAttr" /> does not contain <see langword="CreateInstance" /> and <paramref name="name" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="invokeAttr" /> is not a valid <see cref="T:System.Reflection.BindingFlags" /> attribute.  
  
 -or-  
  
 <paramref name="invokeAttr" /> does not contain one of the following binding flags: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.  
  
 -or-  
  
 <paramref name="invokeAttr" /> contains <see langword="CreateInstance" /> combined with <see langword="InvokeMethod" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.  
  
 -or-  
  
 <paramref name="invokeAttr" /> contains both <see langword="GetField" /> and <see langword="SetField" />.  
  
 -or-  
  
 <paramref name="invokeAttr" /> contains both <see langword="GetProperty" /> and <see langword="SetProperty" />.  
  
 -or-  
  
 <paramref name="invokeAttr" /> contains <see langword="InvokeMethod" /> combined with <see langword="SetField" /> or <see langword="SetProperty" />.  
  
 -or-  
  
 <paramref name="invokeAttr" /> contains <see langword="SetField" /> and <paramref name="args" /> has more than one element.  
  
 -or-  
  
 This method is called on a COM object and one of the following binding flags was not passed in: <see langword="BindingFlags.InvokeMethod" />, <see langword="BindingFlags.GetProperty" />, <see langword="BindingFlags.SetProperty" />, <see langword="BindingFlags.PutDispProperty" />, or <see langword="BindingFlags.PutRefDispProperty" />.  
  
 -or-  
  
 One of the named parameter arrays contains a string that is <see langword="null" />.</exception>
      <exception cref="T:System.MethodAccessException">The specified member is a class initializer.</exception>
      <exception cref="T:System.MissingFieldException">The field or property cannot be found.</exception>
      <exception cref="T:System.MissingMethodException">No method can be found that matches the arguments in <paramref name="args" />.  
  
 -or-  
  
 The current <see cref="T:System.Type" /> object represents a type that contains open type parameters, that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns <see langword="true" />.</exception>
      <exception cref="T:System.Reflection.TargetException">The specified member cannot be invoked on <paramref name="target" />.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method matches the binding criteria.</exception>
      <exception cref="T:System.NotSupportedException">The .NET Compact Framework does not currently support this method.</exception>
      <exception cref="T:System.InvalidOperationException">The method represented by <paramref name="name" /> has one or more unspecified generic type parameters. That is, the method's <see cref="P:System.Reflection.MethodBase.ContainsGenericParameters" /> property returns <see langword="true" />.</exception>
      <returns>An object representing the return value of the invoked member.</returns>
    </member>
    <member name="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Globalization.CultureInfo)">
      <summary>Invokes the specified member, using the specified binding constraints and matching the specified argument list and culture.</summary>
      <param name="name">The string containing the name of the constructor, method, property, or field member to invoke.  
  
 -or-  
  
 An empty string ("") to invoke the default member.  
  
 -or-  
  
 For <see langword="IDispatch" /> members, a string representing the DispID, for example "[DispID=3]".</param>
      <param name="invokeAttr">A bitwise combination of the enumeration values that specify how the search is conducted. The access can be one of the <see langword="BindingFlags" /> such as <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />, and so on. The type of lookup need not be specified. If the type of lookup is omitted, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> | <see langword="BindingFlags.Static" /> are used.</param>
      <param name="binder">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.  
  
 -or-  
  
 A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />. Note that explicitly defining a <see cref="T:System.Reflection.Binder" /> object may be required for successfully invoking method overloads with variable arguments.</param>
      <param name="target">The object on which to invoke the specified member.</param>
      <param name="args">An array containing the arguments to pass to the member to invoke.</param>
      <param name="culture">The object representing the globalization locale to use, which may be necessary for locale-specific conversions, such as converting a numeric <see cref="T:System.String" /> to a <see cref="T:System.Double" />.  
  
 -or-  
  
 A null reference (<see langword="Nothing" /> in Visual Basic) to use the current thread's <see cref="T:System.Globalization.CultureInfo" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="invokeAttr" /> does not contain <see langword="CreateInstance" /> and <paramref name="name" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="invokeAttr" /> is not a valid <see cref="T:System.Reflection.BindingFlags" /> attribute.  
  
 -or-  
  
 <paramref name="invokeAttr" /> does not contain one of the following binding flags: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.  
  
 -or-  
  
 <paramref name="invokeAttr" /> contains <see langword="CreateInstance" /> combined with <see langword="InvokeMethod" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.  
  
 -or-  
  
 <paramref name="invokeAttr" /> contains both <see langword="GetField" /> and <see langword="SetField" />.  
  
 -or-  
  
 <paramref name="invokeAttr" /> contains both <see langword="GetProperty" /> and <see langword="SetProperty" />.  
  
 -or-  
  
 <paramref name="invokeAttr" /> contains <see langword="InvokeMethod" /> combined with <see langword="SetField" /> or <see langword="SetProperty" />.  
  
 -or-  
  
 <paramref name="invokeAttr" /> contains <see langword="SetField" /> and <paramref name="args" /> has more than one element.  
  
 -or-  
  
 This method is called on a COM object and one of the following binding flags was not passed in: <see langword="BindingFlags.InvokeMethod" />, <see langword="BindingFlags.GetProperty" />, <see langword="BindingFlags.SetProperty" />, <see langword="BindingFlags.PutDispProperty" />, or <see langword="BindingFlags.PutRefDispProperty" />.  
  
 -or-  
  
 One of the named parameter arrays contains a string that is <see langword="null" />.</exception>
      <exception cref="T:System.MethodAccessException">The specified member is a class initializer.</exception>
      <exception cref="T:System.MissingFieldException">The field or property cannot be found.</exception>
      <exception cref="T:System.MissingMethodException">No method can be found that matches the arguments in <paramref name="args" />.  
  
 -or-  
  
 The current <see cref="T:System.Type" /> object represents a type that contains open type parameters, that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns <see langword="true" />.</exception>
      <exception cref="T:System.Reflection.TargetException">The specified member cannot be invoked on <paramref name="target" />.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method matches the binding criteria.</exception>
      <exception cref="T:System.InvalidOperationException">The method represented by <paramref name="name" /> has one or more unspecified generic type parameters. That is, the method's <see cref="P:System.Reflection.MethodBase.ContainsGenericParameters" /> property returns <see langword="true" />.</exception>
      <returns>An object representing the return value of the invoked member.</returns>
    </member>
    <member name="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary>When overridden in a derived class, invokes the specified member, using the specified binding constraints and matching the specified argument list, modifiers and culture.</summary>
      <param name="name">The string containing the name of the constructor, method, property, or field member to invoke.  
  
 -or-  
  
 An empty string ("") to invoke the default member.  
  
 -or-  
  
 For <see langword="IDispatch" /> members, a string representing the DispID, for example "[DispID=3]".</param>
      <param name="invokeAttr">A bitwise combination of the enumeration values that specify how the search is conducted. The access can be one of the <see langword="BindingFlags" /> such as <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />, and so on. The type of lookup need not be specified. If the type of lookup is omitted, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> | <see langword="BindingFlags.Static" /> are used.</param>
      <param name="binder">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.  
  
 -or-  
  
 A null reference (Nothing in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />. Note that explicitly defining a <see cref="T:System.Reflection.Binder" /> object may be required for successfully invoking method overloads with variable arguments.</param>
      <param name="target">The object on which to invoke the specified member.</param>
      <param name="args">An array containing the arguments to pass to the member to invoke.</param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="args" /> array. A parameter's associated attributes are stored in the member's signature.  
  
 The default binder processes this parameter only when calling a COM component.</param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> object representing the globalization locale to use, which may be necessary for locale-specific conversions, such as converting a numeric String to a Double.  
  
 -or-  
  
 A null reference (<see langword="Nothing" /> in Visual Basic) to use the current thread's <see cref="T:System.Globalization.CultureInfo" />.</param>
      <param name="namedParameters">An array containing the names of the parameters to which the values in the <paramref name="args" /> array are passed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="invokeAttr" /> does not contain <see langword="CreateInstance" /> and <paramref name="name" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="args" /> and <paramref name="modifiers" /> do not have the same length.  
  
 -or-  
  
 <paramref name="invokeAttr" /> is not a valid <see cref="T:System.Reflection.BindingFlags" /> attribute.  
  
 -or-  
  
 <paramref name="invokeAttr" /> does not contain one of the following binding flags: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.  
  
 -or-  
  
 <paramref name="invokeAttr" /> contains <see langword="CreateInstance" /> combined with <see langword="InvokeMethod" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.  
  
 -or-  
  
 <paramref name="invokeAttr" /> contains both <see langword="GetField" /> and <see langword="SetField" />.  
  
 -or-  
  
 <paramref name="invokeAttr" /> contains both <see langword="GetProperty" /> and <see langword="SetProperty" />.  
  
 -or-  
  
 <paramref name="invokeAttr" /> contains <see langword="InvokeMethod" /> combined with <see langword="SetField" /> or <see langword="SetProperty" />.  
  
 -or-  
  
 <paramref name="invokeAttr" /> contains <see langword="SetField" /> and <paramref name="args" /> has more than one element.  
  
 -or-  
  
 The named parameter array is larger than the argument array.  
  
 -or-  
  
 This method is called on a COM object and one of the following binding flags was not passed in: <see langword="BindingFlags.InvokeMethod" />, <see langword="BindingFlags.GetProperty" />, <see langword="BindingFlags.SetProperty" />, <see langword="BindingFlags.PutDispProperty" />, or <see langword="BindingFlags.PutRefDispProperty" />.  
  
 -or-  
  
 One of the named parameter arrays contains a string that is <see langword="null" />.</exception>
      <exception cref="T:System.MethodAccessException">The specified member is a class initializer.</exception>
      <exception cref="T:System.MissingFieldException">The field or property cannot be found.</exception>
      <exception cref="T:System.MissingMethodException">No method can be found that matches the arguments in <paramref name="args" />.  
  
 -or-  
  
 No member can be found that has the argument names supplied in <paramref name="namedParameters" />.  
  
 -or-  
  
 The current <see cref="T:System.Type" /> object represents a type that contains open type parameters, that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns <see langword="true" />.</exception>
      <exception cref="T:System.Reflection.TargetException">The specified member cannot be invoked on <paramref name="target" />.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method matches the binding criteria.</exception>
      <exception cref="T:System.InvalidOperationException">The method represented by <paramref name="name" /> has one or more unspecified generic type parameters. That is, the method's <see cref="P:System.Reflection.MethodBase.ContainsGenericParameters" /> property returns <see langword="true" />.</exception>
      <returns>An object representing the return value of the invoked member.</returns>
    </member>
    <member name="M:System.Type.IsArrayImpl">
      <summary>When overridden in a derived class, implements the <see cref="P:System.Type.IsArray" /> property and determines whether the <see cref="T:System.Type" /> is an array.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> is an array; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Type.IsAssignableFrom(System.Type)">
      <summary>Determines whether an instance of a specified type <paramref name="c" /> can be assigned to a variable of the current type.</summary>
      <param name="c">The type to compare with the current type.</param>
      <returns>
        <see langword="true" /> if any of the following conditions is true:  
  
-   <paramref name="c" /> and the current instance represent the same type.  
  
-   <paramref name="c" /> is derived either directly or indirectly from the current instance. <paramref name="c" /> is derived directly from the current instance if it inherits from the current instance; <paramref name="c" /> is derived indirectly from the current instance if it inherits from a succession of one or more classes that inherit from the current instance.  
  
-   The current instance is an interface that <paramref name="c" /> implements.  
  
-   <paramref name="c" /> is a generic type parameter, and the current instance represents one of the constraints of <paramref name="c" />.  
  
-   <paramref name="c" /> represents a value type, and the current instance represents <c>Nullable&lt;c&gt;</c> (<c>Nullable(Of c)</c> in Visual Basic).  
  
 <see langword="false" /> if none of these conditions are true, or if <paramref name="c" /> is <see langword="null" />.</returns>
    </member>
    <member name="M:System.Type.IsAssignableTo(System.Type)">
      <summary>Determines whether the current type can be assigned to a variable of the specified <paramref name="targetType" />.</summary>
      <param name="targetType">The type to compare with the current type.</param>
      <returns>
        <see langword="true" /> if any of the following conditions is true:  
  
-   The current instance and <paramref name="targetType" /> represent the same type.  
  
-   The current type is derived either directly or indirectly from <paramref name="targetType" />. The current type is derived directly from <paramref name="targetType" /> if it inherits from <paramref name="targetType" />; the current type is derived indirectly from <paramref name="targetType" /> if it inherits from a succession of one or more classes that inherit from <paramref name="targetType" />.  
  
-   <paramref name="targetType" /> is an interface that the current type implements.  
  
-   The current type is a generic type parameter, and <paramref name="targetType" /> represents one of the constraints of the current type.  
  
-   The current type represents a value type, and <paramref name="targetType" /> represents <c>Nullable&lt;c&gt;</c> (<c>Nullable(Of c)</c> in Visual Basic).  
  
 <see langword="false" /> if none of these conditions are true, or if <paramref name="targetType" /> or <see langword="this" /> is <see langword="null" />.</returns>
    </member>
    <member name="M:System.Type.IsByRefImpl">
      <summary>When overridden in a derived class, implements the <see cref="P:System.Type.IsByRef" /> property and determines whether the <see cref="T:System.Type" /> is passed by reference.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> is passed by reference; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Type.IsCOMObjectImpl">
      <summary>When overridden in a derived class, implements the <see cref="P:System.Type.IsCOMObject" /> property and determines whether the <see cref="T:System.Type" /> is a COM object.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> is a COM object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Type.IsContextfulImpl">
      <summary>Implements the <see cref="P:System.Type.IsContextful" /> property and determines whether the <see cref="T:System.Type" /> can be hosted in a context.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> can be hosted in a context; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Type.IsEnumDefined(System.Object)">
      <summary>Returns a value that indicates whether the specified value exists in the current enumeration type.</summary>
      <param name="value">The value to be tested.</param>
      <exception cref="T:System.ArgumentException">The current type is not an enumeration.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> is of a type that cannot be the underlying type of an enumeration.</exception>
      <returns>
        <see langword="true" /> if the specified value is a member of the current enumeration type; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Type.IsEquivalentTo(System.Type)">
      <summary>Determines whether two COM types have the same identity and are eligible for type equivalence.</summary>
      <param name="other">The COM type that is tested for equivalence with the current type.</param>
      <returns>
        <see langword="true" /> if the COM types are equivalent; otherwise, <see langword="false" />. This method also returns <see langword="false" /> if one type is in an assembly that is loaded for execution, and the other is in an assembly that is loaded into the reflection-only context.</returns>
    </member>
    <member name="M:System.Type.IsInstanceOfType(System.Object)">
      <summary>Determines whether the specified object is an instance of the current <see cref="T:System.Type" />.</summary>
      <param name="o">The object to compare with the current type.</param>
      <returns>
        <see langword="true" /> if the current <see langword="Type" /> is in the inheritance hierarchy of the object represented by <paramref name="o" />, or if the current <see langword="Type" /> is an interface that <paramref name="o" /> implements. <see langword="false" /> if neither of these conditions is the case, if <paramref name="o" /> is <see langword="null" />, or if the current <see langword="Type" /> is an open generic type (that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns <see langword="true" />).</returns>
    </member>
    <member name="M:System.Type.IsMarshalByRefImpl">
      <summary>Implements the <see cref="P:System.Type.IsMarshalByRef" /> property and determines whether the <see cref="T:System.Type" /> is marshaled by reference.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> is marshaled by reference; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Type.IsPointerImpl">
      <summary>When overridden in a derived class, implements the <see cref="P:System.Type.IsPointer" /> property and determines whether the <see cref="T:System.Type" /> is a pointer.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> is a pointer; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Type.IsPrimitiveImpl">
      <summary>When overridden in a derived class, implements the <see cref="P:System.Type.IsPrimitive" /> property and determines whether the <see cref="T:System.Type" /> is one of the primitive types.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> is one of the primitive types; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Type.IsSubclassOf(System.Type)">
      <summary>Determines whether the current <see cref="T:System.Type" /> derives from the specified <see cref="T:System.Type" />.</summary>
      <param name="c">The type to compare with the current type.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="c" /> is <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> if the current <see langword="Type" /> derives from <paramref name="c" />; otherwise, <see langword="false" />. This method also returns <see langword="false" /> if <paramref name="c" /> and the current <see langword="Type" /> are equal.</returns>
    </member>
    <member name="M:System.Type.IsValueTypeImpl">
      <summary>Implements the <see cref="P:System.Type.IsValueType" /> property and determines whether the <see cref="T:System.Type" /> is a value type; that is, not a class or an interface.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> is a value type; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Type.MakeArrayType">
      <summary>Returns a <see cref="T:System.Type" /> object representing a one-dimensional array of the current type, with a lower bound of zero.</summary>
      <exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class. Derived classes must provide an implementation.</exception>
      <exception cref="T:System.TypeLoadException">The current type is <see cref="T:System.TypedReference" />.  
  
 -or-  
  
 The current type is a <see langword="ByRef" /> type. That is, <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</exception>
      <returns>A <see cref="T:System.Type" /> object representing a one-dimensional array of the current type, with a lower bound of zero.</returns>
    </member>
    <member name="M:System.Type.MakeArrayType(System.Int32)">
      <summary>Returns a <see cref="T:System.Type" /> object representing an array of the current type, with the specified number of dimensions.</summary>
      <param name="rank">The number of dimensions for the array. This number must be less than or equal to 32.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="rank" /> is invalid. For example, 0 or negative.</exception>
      <exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class.</exception>
      <exception cref="T:System.TypeLoadException">The current type is <see cref="T:System.TypedReference" />.  
  
 -or-  
  
 The current type is a <see langword="ByRef" /> type. That is, <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.  
  
 -or-  
  
 <paramref name="rank" /> is greater than 32.</exception>
      <returns>An object representing an array of the current type, with the specified number of dimensions.</returns>
    </member>
    <member name="M:System.Type.MakeByRefType">
      <summary>Returns a <see cref="T:System.Type" /> object that represents the current type when passed as a <see langword="ref" /> parameter (<see langword="ByRef" /> parameter in Visual Basic).</summary>
      <exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class.</exception>
      <exception cref="T:System.TypeLoadException">The current type is <see cref="T:System.TypedReference" />.  
  
 -or-  
  
 The current type is a <see langword="ByRef" /> type. That is, <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</exception>
      <returns>A <see cref="T:System.Type" /> object that represents the current type when passed as a <see langword="ref" /> parameter (<see langword="ByRef" /> parameter in Visual Basic).</returns>
    </member>
    <member name="M:System.Type.MakeGenericMethodParameter(System.Int32)">
      <summary>Returns a signature type object that can be passed into the <c>Type[]</c> array parameter of a <see cref="Overload:System.Type.GetMethod" /> method to represent a generic parameter reference.</summary>
      <param name="position">The typed parameter position.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> is negative.</exception>
      <returns>A signature type object that can be passed into the <c>Type[]</c> array parameter of a <see cref="Overload:System.Type.GetMethod" /> method to represent a generic parameter reference.</returns>
    </member>
    <member name="M:System.Type.MakeGenericSignatureType(System.Type,System.Type[])">
      <summary>Creates a generic signature type, which allows third party reimplementations of Reflection to fully support the use of signature types in querying type members.</summary>
      <param name="genericTypeDefinition">The generic type definition.</param>
      <param name="typeArguments">An array of type arguments.</param>
      <returns>A generic signature type.</returns>
    </member>
    <member name="M:System.Type.MakeGenericType(System.Type[])">
      <summary>Substitutes the elements of an array of types for the type parameters of the current generic type definition and returns a <see cref="T:System.Type" /> object representing the resulting constructed type.</summary>
      <param name="typeArguments">An array of types to be substituted for the type parameters of the current generic type.</param>
      <exception cref="T:System.InvalidOperationException">The current type does not represent a generic type definition. That is, <see cref="P:System.Type.IsGenericTypeDefinition" /> returns <see langword="false" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeArguments" /> is <see langword="null" />.  
  
 -or-  
  
 Any element of <paramref name="typeArguments" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The number of elements in <paramref name="typeArguments" /> is not the same as the number of type parameters in the current generic type definition.  
  
 -or-  
  
 Any element of <paramref name="typeArguments" /> does not satisfy the constraints specified for the corresponding type parameter of the current generic type.  
  
 -or-  
  
 <paramref name="typeArguments" /> contains an element that is a pointer type (<see cref="P:System.Type.IsPointer" /> returns <see langword="true" />), a by-ref type (<see cref="P:System.Type.IsByRef" /> returns <see langword="true" />), or <see cref="T:System.Void" />.</exception>
      <exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class. Derived classes must provide an implementation.</exception>
      <returns>A <see cref="T:System.Type" /> representing the constructed type formed by substituting the elements of <paramref name="typeArguments" /> for the type parameters of the current generic type.</returns>
    </member>
    <member name="M:System.Type.MakePointerType">
      <summary>Returns a <see cref="T:System.Type" /> object that represents a pointer to the current type.</summary>
      <exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class.</exception>
      <exception cref="T:System.TypeLoadException">The current type is <see cref="T:System.TypedReference" />.  
  
 -or-  
  
 The current type is a <see langword="ByRef" /> type. That is, <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</exception>
      <returns>A <see cref="T:System.Type" /> object that represents a pointer to the current type.</returns>
    </member>
    <member name="M:System.Type.op_Equality(System.Type,System.Type)">
      <summary>Indicates whether two <see cref="T:System.Type" /> objects are equal.</summary>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is equal to <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Type.op_Inequality(System.Type,System.Type)">
      <summary>Indicates whether two <see cref="T:System.Type" /> objects are not equal.</summary>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is not equal to <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)">
      <summary>Gets the <see cref="T:System.Type" /> with the specified name, specifying whether to perform a case-sensitive search and whether to throw an exception if the type is not found. The type is loaded for reflection only, not for execution.</summary>
      <param name="typeName">The assembly-qualified name of the <see cref="T:System.Type" /> to get.</param>
      <param name="throwIfNotFound">
        <see langword="true" /> to throw a <see cref="T:System.TypeLoadException" /> if the type cannot be found; <see langword="false" /> to return <see langword="null" /> if the type cannot be found. Specifying <see langword="false" /> also suppresses some other exception conditions, but not all of them. See the Exceptions section.</param>
      <param name="ignoreCase">
        <see langword="true" /> to perform a case-insensitive search for <paramref name="typeName" />; <see langword="false" /> to perform a case-sensitive search for <paramref name="typeName" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">A class initializer is invoked and throws an exception.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="throwIfNotFound" /> is <see langword="true" /> and the type is not found.  
  
 -or-  
  
 <paramref name="throwIfNotFound" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.  
  
 -or-  
  
 <paramref name="throwIfNotFound" /> is <see langword="true" /> and <paramref name="typeName" /> is an empty string.  
  
 -or-  
  
 <paramref name="throwIfNotFound" /> is <see langword="true" /> and <paramref name="typeName" /> represents an array type with an invalid size.  
  
 -or-  
  
 <paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" /> objects.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeName" /> does not include the assembly name.  
  
 -or-  
  
 <paramref name="throwIfNotFound" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid syntax; for example, "MyType[,*,]".  
  
 -or-  
  
 <paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.  
  
 -or-  
  
 <paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.  
  
 -or-  
  
 <paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="throwIfNotFound" /> is <see langword="true" /> and the assembly or one of its dependencies was not found.</exception>
      <exception cref="T:System.IO.FileLoadException">The assembly or one of its dependencies was found, but could not be loaded.</exception>
      <exception cref="T:System.BadImageFormatException">The assembly or one of its dependencies is not valid.  
  
 -or-  
  
 The assembly was compiled with a later version of the common language runtime than the version that is currently loaded.</exception>
      <exception cref="T:System.PlatformNotSupportedException">.NET Core only: This member is not supported.</exception>
      <returns>The type with the specified name, if found; otherwise, <see langword="null" />. If the type is not found, the <paramref name="throwIfNotFound" /> parameter specifies whether <see langword="null" /> is returned or an exception is thrown. In some cases, an exception is thrown regardless of the value of <paramref name="throwIfNotFound" />. See the Exceptions section.</returns>
    </member>
    <member name="M:System.Type.ToString">
      <summary>Returns a <see langword="String" /> representing the name of the current <see langword="Type" />.</summary>
      <returns>A <see cref="T:System.String" /> representing the name of the current <see cref="T:System.Type" />.</returns>
    </member>
    <member name="P:System.Type.Assembly">
      <summary>Gets the <see cref="T:System.Reflection.Assembly" /> in which the type is declared. For generic types, gets the <see cref="T:System.Reflection.Assembly" /> in which the generic type is defined.</summary>
      <returns>An <see cref="T:System.Reflection.Assembly" /> instance that describes the assembly containing the current type. For generic types, the instance describes the assembly that contains the generic type definition, not the assembly that creates and uses a particular constructed type.</returns>
    </member>
    <member name="P:System.Type.AssemblyQualifiedName">
      <summary>Gets the assembly-qualified name of the type, which includes the name of the assembly from which this <see cref="T:System.Type" /> object was loaded.</summary>
      <returns>The assembly-qualified name of the <see cref="T:System.Type" />, which includes the name of the assembly from which the <see cref="T:System.Type" /> was loaded, or <see langword="null" /> if the current instance represents a generic type parameter.</returns>
    </member>
    <member name="P:System.Type.Attributes">
      <summary>Gets the attributes associated with the <see cref="T:System.Type" />.</summary>
      <returns>A <see cref="T:System.Reflection.TypeAttributes" /> object representing the attribute set of the <see cref="T:System.Type" />, unless the <see cref="T:System.Type" /> represents a generic type parameter, in which case the value is unspecified.</returns>
    </member>
    <member name="P:System.Type.BaseType">
      <summary>Gets the type from which the current <see cref="T:System.Type" /> directly inherits.</summary>
      <returns>The <see cref="T:System.Type" /> from which the current <see cref="T:System.Type" /> directly inherits, or <see langword="null" /> if the current <see langword="Type" /> represents the <see cref="T:System.Object" /> class or an interface.</returns>
    </member>
    <member name="P:System.Type.ContainsGenericParameters">
      <summary>Gets a value indicating whether the current <see cref="T:System.Type" /> object has type parameters that have not been replaced by specific types.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> object is itself a generic type parameter or has type parameters for which specific types have not been supplied; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.DeclaringMethod">
      <summary>Gets a <see cref="T:System.Reflection.MethodBase" /> that represents the declaring method, if the current <see cref="T:System.Type" /> represents a type parameter of a generic method.</summary>
      <returns>If the current <see cref="T:System.Type" /> represents a type parameter of a generic method, a <see cref="T:System.Reflection.MethodBase" /> that represents declaring method; otherwise, <see langword="null" />.</returns>
    </member>
    <member name="P:System.Type.DeclaringType">
      <summary>Gets the type that declares the current nested type or generic type parameter.</summary>
      <returns>A <see cref="T:System.Type" /> object representing the enclosing type, if the current type is a nested type; or the generic type definition, if the current type is a type parameter of a generic type; or the type that declares the generic method, if the current type is a type parameter of a generic method; otherwise, <see langword="null" />.</returns>
    </member>
    <member name="P:System.Type.DefaultBinder">
      <summary>Gets a reference to the default binder, which implements internal rules for selecting the appropriate members to be called by <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</summary>
      <returns>A reference to the default binder used by the system.</returns>
    </member>
    <member name="P:System.Type.FullName">
      <summary>Gets the fully qualified name of the type, including its namespace but not its assembly.</summary>
      <returns>The fully qualified name of the type, including its namespace but not its assembly; or <see langword="null" /> if the current instance represents a generic type parameter, an array type, pointer type, or <see langword="byref" /> type based on a type parameter, or a generic type that is not a generic type definition but contains unresolved type parameters.</returns>
    </member>
    <member name="P:System.Type.GenericParameterAttributes">
      <summary>Gets a combination of <see cref="T:System.Reflection.GenericParameterAttributes" /> flags that describe the covariance and special constraints of the current generic type parameter.</summary>
      <exception cref="T:System.InvalidOperationException">The current <see cref="T:System.Type" /> object is not a generic type parameter. That is, the <see cref="P:System.Type.IsGenericParameter" /> property returns <see langword="false" />.</exception>
      <exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class.</exception>
      <returns>A bitwise combination of <see cref="T:System.Reflection.GenericParameterAttributes" /> values that describes the covariance and special constraints of the current generic type parameter.</returns>
    </member>
    <member name="P:System.Type.GenericParameterPosition">
      <summary>Gets the position of the type parameter in the type parameter list of the generic type or method that declared the parameter, when the <see cref="T:System.Type" /> object represents a type parameter of a generic type or a generic method.</summary>
      <exception cref="T:System.InvalidOperationException">The current type does not represent a type parameter. That is, <see cref="P:System.Type.IsGenericParameter" /> returns <see langword="false" />.</exception>
      <returns>The position of a type parameter in the type parameter list of the generic type or method that defines the parameter. Position numbers begin at 0.</returns>
    </member>
    <member name="P:System.Type.GenericTypeArguments">
      <summary>Gets an array of the generic type arguments for this type.</summary>
      <returns>An array of the generic type arguments for this type.</returns>
    </member>
    <member name="P:System.Type.GUID">
      <summary>Gets the GUID associated with the <see cref="T:System.Type" />.</summary>
      <returns>The GUID associated with the <see cref="T:System.Type" />.</returns>
    </member>
    <member name="P:System.Type.HasElementType">
      <summary>Gets a value indicating whether the current <see cref="T:System.Type" /> encompasses or refers to another type; that is, whether the current <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsAbstract">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is abstract and must be overridden.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> is abstract; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsAnsiClass">
      <summary>Gets a value indicating whether the string format attribute <see langword="AnsiClass" /> is selected for the <see cref="T:System.Type" />.</summary>
      <returns>
        <see langword="true" /> if the string format attribute <see langword="AnsiClass" /> is selected for the <see cref="T:System.Type" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsArray">
      <summary>Gets a value that indicates whether the type is an array.</summary>
      <returns>
        <see langword="true" /> if the current type is an array; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsAutoClass">
      <summary>Gets a value indicating whether the string format attribute <see langword="AutoClass" /> is selected for the <see cref="T:System.Type" />.</summary>
      <returns>
        <see langword="true" /> if the string format attribute <see langword="AutoClass" /> is selected for the <see cref="T:System.Type" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsAutoLayout">
      <summary>Gets a value indicating whether the fields of the current type are laid out automatically by the common language runtime.</summary>
      <returns>
        <see langword="true" /> if the <see cref="P:System.Type.Attributes" /> property of the current type includes <see cref="F:System.Reflection.TypeAttributes.AutoLayout" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsByRef">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is passed by reference.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> is passed by reference; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsByRefLike">
      <summary>Gets a value that indicates whether the type is a byref-like structure.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> is a a byref-like structure; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsClass">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is a class or a delegate; that is, not a value type or interface.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> is a class; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsCOMObject">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is a COM object.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> is a COM object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsConstructedGenericType">
      <summary>Gets a value that indicates whether this object represents a constructed generic type. You can create instances of a constructed generic type.</summary>
      <returns>
        <see langword="true" /> if this object represents a constructed generic type; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsContextful">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> can be hosted in a context.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> can be hosted in a context; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsEnum">
      <summary>Gets a value indicating whether the current <see cref="T:System.Type" /> represents an enumeration.</summary>
      <returns>
        <see langword="true" /> if the current <see cref="T:System.Type" /> represents an enumeration; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsExplicitLayout">
      <summary>Gets a value indicating whether the fields of the current type are laid out at explicitly specified offsets.</summary>
      <returns>
        <see langword="true" /> if the <see cref="P:System.Type.Attributes" /> property of the current type includes <see cref="F:System.Reflection.TypeAttributes.ExplicitLayout" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsGenericMethodParameter">
      <summary>Gets a value that indicates whether the current <see cref="T:System.Type" /> represents a type parameter in the definition of a generic method.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> object represents a type parameter of a generic method definition; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsGenericParameter">
      <summary>Gets a value indicating whether the current <see cref="T:System.Type" /> represents a type parameter in the definition of a generic type or method.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> object represents a type parameter of a generic type definition or generic method definition; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsGenericType">
      <summary>Gets a value indicating whether the current type is a generic type.</summary>
      <returns>
        <see langword="true" /> if the current type is a generic type; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsGenericTypeDefinition">
      <summary>Gets a value indicating whether the current <see cref="T:System.Type" /> represents a generic type definition, from which other generic types can be constructed.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> object represents a generic type definition; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsGenericTypeParameter">
      <summary>Gets a value that indicates whether the current <see cref="T:System.Type" /> represents a type parameter in the definition of a generic type.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> object represents a type parameter of a generic type definition; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsImport">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> has a <see cref="T:System.Runtime.InteropServices.ComImportAttribute" /> attribute applied, indicating that it was imported from a COM type library.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> has a <see cref="T:System.Runtime.InteropServices.ComImportAttribute" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsInterface">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is an interface; that is, not a class or a value type.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> is an interface; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsLayoutSequential">
      <summary>Gets a value indicating whether the fields of the current type are laid out sequentially, in the order that they were defined or emitted to the metadata.</summary>
      <returns>
        <see langword="true" /> if the <see cref="P:System.Type.Attributes" /> property of the current type includes <see cref="F:System.Reflection.TypeAttributes.SequentialLayout" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsMarshalByRef">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is marshaled by reference.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> is marshaled by reference; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsNested">
      <summary>Gets a value indicating whether the current <see cref="T:System.Type" /> object represents a type whose definition is nested inside the definition of another type.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> is nested inside another type; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsNestedAssembly">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is nested and visible only within its own assembly.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> is nested and visible only within its own assembly; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsNestedFamANDAssem">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is nested and visible only to classes that belong to both its own family and its own assembly.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> is nested and visible only to classes that belong to both its own family and its own assembly; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsNestedFamily">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is nested and visible only within its own family.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> is nested and visible only within its own family; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsNestedFamORAssem">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is nested and visible only to classes that belong to either its own family or to its own assembly.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> is nested and visible only to classes that belong to its own family or to its own assembly; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsNestedPrivate">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is nested and declared private.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> is nested and declared private; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsNestedPublic">
      <summary>Gets a value indicating whether a class is nested and declared public.</summary>
      <returns>
        <see langword="true" /> if the class is nested and declared public; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsNotPublic">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is not declared public.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> is not declared public and is not a nested type; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsPointer">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is a pointer.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> is a pointer; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsPrimitive">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is one of the primitive types.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> is one of the primitive types; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsPublic">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is declared public.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> is declared public and is not a nested type; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsSealed">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is declared sealed.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> is declared sealed; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsSecurityCritical">
      <summary>Gets a value that indicates whether the current type is security-critical or security-safe-critical at the current trust level, and therefore can perform critical operations.</summary>
      <returns>
        <see langword="true" /> if the current type is security-critical or security-safe-critical at the current trust level; <see langword="false" /> if it is transparent.</returns>
    </member>
    <member name="P:System.Type.IsSecuritySafeCritical">
      <summary>Gets a value that indicates whether the current type is security-safe-critical at the current trust level; that is, whether it can perform critical operations and can be accessed by transparent code.</summary>
      <returns>
        <see langword="true" /> if the current type is security-safe-critical at the current trust level; <see langword="false" /> if it is security-critical or transparent.</returns>
    </member>
    <member name="P:System.Type.IsSecurityTransparent">
      <summary>Gets a value that indicates whether the current type is transparent at the current trust level, and therefore cannot perform critical operations.</summary>
      <returns>
        <see langword="true" /> if the type is security-transparent at the current trust level; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsSerializable">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is serializable.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> is serializable; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsSignatureType">
      <summary>Gets a value that indicates whether the type is a signature type.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> is a signature type; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsSpecialName">
      <summary>Gets a value indicating whether the type has a name that requires special handling.</summary>
      <returns>
        <see langword="true" /> if the type has a name that requires special handling; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsSZArray">
      <summary>Gets a value that indicates whether the type is an array type that can represent only a single-dimensional array with a zero lower bound.</summary>
      <returns>
        <see langword="true" /> if the current <see cref="T:System.Type" /> is an array type that can represent only a single-dimensional array with a zero lower bound; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsTypeDefinition">
      <summary>Gets a value that indicates whether the type is a type definition.</summary>
      <returns>
        <see langword="true" /> if the current <see cref="T:System.Type" /> is a type definition; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsUnicodeClass">
      <summary>Gets a value indicating whether the string format attribute <see langword="UnicodeClass" /> is selected for the <see cref="T:System.Type" />.</summary>
      <returns>
        <see langword="true" /> if the string format attribute <see langword="UnicodeClass" /> is selected for the <see cref="T:System.Type" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsValueType">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is a value type.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> is a value type; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsVariableBoundArray">
      <summary>Gets a value that indicates whether the type is an array type that can represent a multi-dimensional array or an array with an arbitrary lower bound.</summary>
      <returns>
        <see langword="true" /> if the current <see cref="T:System.Type" /> is an array type that can represent a multi-dimensional array or an array with an arbitrary lower bound; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsVisible">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> can be accessed by code outside the assembly.</summary>
      <returns>
        <see langword="true" /> if the current <see cref="T:System.Type" /> is a public type or a public nested type such that all the enclosing types are public; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.MemberType">
      <summary>Gets a <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a type or a nested type.</summary>
      <returns>A <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a type or a nested type.</returns>
    </member>
    <member name="P:System.Type.Module">
      <summary>Gets the module (the DLL) in which the current <see cref="T:System.Type" /> is defined.</summary>
      <returns>The module in which the current <see cref="T:System.Type" /> is defined.</returns>
    </member>
    <member name="P:System.Type.Namespace">
      <summary>Gets the namespace of the <see cref="T:System.Type" />.</summary>
      <returns>The namespace of the <see cref="T:System.Type" />; <see langword="null" /> if the current instance has no namespace or represents a generic parameter.</returns>
    </member>
    <member name="P:System.Type.ReflectedType">
      <summary>Gets the class object that was used to obtain this member.</summary>
      <returns>The <see langword="Type" /> object through which this <see cref="T:System.Type" /> object was obtained.</returns>
    </member>
    <member name="P:System.Type.StructLayoutAttribute">
      <summary>Gets a <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> that describes the layout of the current type.</summary>
      <exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class.</exception>
      <returns>Gets a <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> that describes the gross layout features of the current type.</returns>
    </member>
    <member name="P:System.Type.TypeHandle">
      <summary>Gets the handle for the current <see cref="T:System.Type" />.</summary>
      <exception cref="T:System.NotSupportedException">The .NET Compact Framework does not currently support this property.</exception>
      <returns>The handle for the current <see cref="T:System.Type" />.</returns>
    </member>
    <member name="P:System.Type.TypeInitializer">
      <summary>Gets the initializer for the type.</summary>
      <returns>An object that contains the name of the class constructor for the <see cref="T:System.Type" />.</returns>
    </member>
    <member name="P:System.Type.UnderlyingSystemType">
      <summary>Indicates the type provided by the common language runtime that represents this type.</summary>
      <returns>The underlying system type for the <see cref="T:System.Type" />.</returns>
    </member>
    <member name="T:System.TypeAccessException">
      <summary>The exception that is thrown when a method attempts to use a type that it does not have access to.</summary>
    </member>
    <member name="M:System.TypeAccessException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.TypeAccessException" /> class with a system-supplied message that describes the error.</summary>
    </member>
    <member name="M:System.TypeAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.TypeAccessException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.TypeAccessException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.TypeAccessException" /> class with a specified message that describes the error.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor must ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.TypeAccessException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.TypeAccessException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor must ensure that this string has been localized for the current system culture.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.TypeCode">
      <summary>Specifies the type of an object.</summary>
    </member>
    <member name="F:System.TypeCode.Boolean">
      <summary>A simple type representing Boolean values of <see langword="true" /> or <see langword="false" />.</summary>
    </member>
    <member name="F:System.TypeCode.Byte">
      <summary>An integral type representing unsigned 8-bit integers with values between 0 and 255.</summary>
    </member>
    <member name="F:System.TypeCode.Char">
      <summary>An integral type representing unsigned 16-bit integers with values between 0 and 65535. The set of possible values for the <see cref="F:System.TypeCode.Char" /> type corresponds to the Unicode character set.</summary>
    </member>
    <member name="F:System.TypeCode.DateTime">
      <summary>A type representing a date and time value.</summary>
    </member>
    <member name="F:System.TypeCode.DBNull">
      <summary>A database null (column) value.</summary>
    </member>
    <member name="F:System.TypeCode.Decimal">
      <summary>A simple type representing values ranging from 1.0 x 10 -28 to approximately 7.9 x 10 28 with 28-29 significant digits.</summary>
    </member>
    <member name="F:System.TypeCode.Double">
      <summary>A floating point type representing values ranging from approximately 5.0 x 10 -324 to 1.7 x 10 308 with a precision of 15-16 digits.</summary>
    </member>
    <member name="F:System.TypeCode.Empty">
      <summary>A null reference.</summary>
    </member>
    <member name="F:System.TypeCode.Int16">
      <summary>An integral type representing signed 16-bit integers with values between -32768 and 32767.</summary>
    </member>
    <member name="F:System.TypeCode.Int32">
      <summary>An integral type representing signed 32-bit integers with values between -2147483648 and 2147483647.</summary>
    </member>
    <member name="F:System.TypeCode.Int64">
      <summary>An integral type representing signed 64-bit integers with values between -9223372036854775808 and 9223372036854775807.</summary>
    </member>
    <member name="F:System.TypeCode.Object">
      <summary>A general type representing any reference or value type not explicitly represented by another <see langword="TypeCode" />.</summary>
    </member>
    <member name="F:System.TypeCode.SByte">
      <summary>An integral type representing signed 8-bit integers with values between -128 and 127.</summary>
    </member>
    <member name="F:System.TypeCode.Single">
      <summary>A floating point type representing values ranging from approximately 1.5 x 10 -45 to 3.4 x 10 38 with a precision of 7 digits.</summary>
    </member>
    <member name="F:System.TypeCode.String">
      <summary>A sealed class type representing Unicode character strings.</summary>
    </member>
    <member name="F:System.TypeCode.UInt16">
      <summary>An integral type representing unsigned 16-bit integers with values between 0 and 65535.</summary>
    </member>
    <member name="F:System.TypeCode.UInt32">
      <summary>An integral type representing unsigned 32-bit integers with values between 0 and 4294967295.</summary>
    </member>
    <member name="F:System.TypeCode.UInt64">
      <summary>An integral type representing unsigned 64-bit integers with values between 0 and 18446744073709551615.</summary>
    </member>
    <member name="T:System.TypeInitializationException">
      <summary>The exception that is thrown as a wrapper around the exception thrown by the class initializer. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.TypeInitializationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.TypeInitializationException" /> class with the default error message, the specified type name, and a reference to the inner exception that is the root cause of this exception.</summary>
      <param name="fullTypeName">The fully qualified name of the type that fails to initialize.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.TypeInitializationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the type name and additional exception information.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="P:System.TypeInitializationException.TypeName">
      <summary>Gets the fully qualified name of the type that fails to initialize.</summary>
      <returns>The fully qualified name of the type that fails to initialize.</returns>
    </member>
    <member name="T:System.TypeLoadException">
      <summary>The exception that is thrown when type-loading failures occur.</summary>
    </member>
    <member name="M:System.TypeLoadException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.TypeLoadException" /> class.</summary>
    </member>
    <member name="M:System.TypeLoadException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.TypeLoadException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> object is <see langword="null" />.</exception>
    </member>
    <member name="M:System.TypeLoadException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.TypeLoadException" /> class with a specified error message.</summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.TypeLoadException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.TypeLoadException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.TypeLoadException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the class name, method name, resource ID, and additional exception information.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> object is <see langword="null" />.</exception>
    </member>
    <member name="P:System.TypeLoadException.Message">
      <summary>Gets the error message for this exception.</summary>
      <returns>The error message string.</returns>
    </member>
    <member name="P:System.TypeLoadException.TypeName">
      <summary>Gets the fully qualified name of the type that causes the exception.</summary>
      <returns>The fully qualified type name.</returns>
    </member>
    <member name="T:System.UInt16">
      <summary>Represents a 16-bit unsigned integer.</summary>
    </member>
    <member name="F:System.UInt16.MaxValue">
      <summary>Represents the largest possible value of <see cref="T:System.UInt16" />. This field is constant.</summary>
    </member>
    <member name="F:System.UInt16.MinValue">
      <summary>Represents the smallest possible value of <see cref="T:System.UInt16" />. This field is constant.</summary>
    </member>
    <member name="M:System.UInt16.CompareTo(System.Object)">
      <summary>Compares this instance to a specified object and returns an indication of their relative values.</summary>
      <param name="value">An object to compare, or <see langword="null" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.UInt16" />.</exception>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.  
  
 <list type="table"><listheader><term> Return Value</term><description> Description</description></listheader><item><term> Less than zero</term><description> This instance is less than <paramref name="value" />.</description></item><item><term> Zero</term><description> This instance is equal to <paramref name="value" />.</description></item><item><term> Greater than zero</term><description> This instance is greater than <paramref name="value" />, or <paramref name="value" /> is <see langword="null" />.</description></item></list></returns>
    </member>
    <member name="M:System.UInt16.CompareTo(System.UInt16)">
      <summary>Compares this instance to a specified 16-bit unsigned integer and returns an indication of their relative values.</summary>
      <param name="value">An unsigned integer to compare.</param>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.  
  
 <list type="table"><listheader><term> Return Value</term><description> Description</description></listheader><item><term> Less than zero</term><description> This instance is less than <paramref name="value" />.</description></item><item><term> Zero</term><description> This instance is equal to <paramref name="value" />.</description></item><item><term> Greater than zero</term><description> This instance is greater than <paramref name="value" />.</description></item></list></returns>
    </member>
    <member name="M:System.UInt16.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="obj">An object to compare to this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> is an instance of <see cref="T:System.UInt16" /> and equals the value of this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.UInt16.Equals(System.UInt16)">
      <summary>Returns a value indicating whether this instance is equal to a specified <see cref="T:System.UInt16" /> value.</summary>
      <param name="obj">A 16-bit unsigned integer to compare to this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> has the same value as this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.UInt16.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.UInt16.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.UInt16" />.</summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.UInt16" />.</returns>
    </member>
    <member name="M:System.UInt16.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Converts the span representation of a number in a specified style and culture-specific format to its 16-bit unsigned integer equivalent.</summary>
      <param name="s">A span containing the characters that represent the number to convert. The span is interpreted by using the style specified by the <paramref name="style" /> parameter.</param>
      <param name="style">A bitwise combination of enumeration values that indicate the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <returns>A 16-bit unsigned integer equivalent to the number specified in <paramref name="s" />.</returns>
    </member>
    <member name="M:System.UInt16.Parse(System.String)">
      <summary>Converts the string representation of a number to its 16-bit unsigned integer equivalent.</summary>
      <param name="s">A string that represents the number to convert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />.</exception>
      <returns>A 16-bit unsigned integer equivalent to the number contained in <paramref name="s" />.</returns>
    </member>
    <member name="M:System.UInt16.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>Converts the string representation of a number in a specified style to its 16-bit unsigned integer equivalent.  
  
 This method is not CLS-compliant. The CLS-compliant alternative is <see cref="M:System.Int32.Parse(System.String,System.Globalization.NumberStyles)" />.</summary>
      <param name="s">A string that represents the number to convert. The string is interpreted by using the style specified by the <paramref name="style" /> parameter.</param>
      <param name="style">A bitwise combination of the enumeration values that specify the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  
  
 -or-  
  
 <paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />.  
  
 -or-  
  
 <paramref name="s" /> includes non-zero, fractional digits.</exception>
      <returns>A 16-bit unsigned integer equivalent to the number specified in <paramref name="s" />.</returns>
    </member>
    <member name="M:System.UInt16.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its 16-bit unsigned integer equivalent.</summary>
      <param name="s">A string that represents the number to convert. The string is interpreted by using the style specified by the <paramref name="style" /> parameter.</param>
      <param name="style">A bitwise combination of enumeration values that indicate the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  
  
 -or-  
  
 <paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number that is less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />.  
  
 -or-  
  
 <paramref name="s" /> includes non-zero, fractional digits.</exception>
      <returns>A 16-bit unsigned integer equivalent to the number specified in <paramref name="s" />.</returns>
    </member>
    <member name="M:System.UInt16.Parse(System.String,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified culture-specific format to its 16-bit unsigned integer equivalent.</summary>
      <param name="s">A string that represents the number to convert.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />.</exception>
      <returns>A 16-bit unsigned integer equivalent to the number specified in <paramref name="s" />.</returns>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>
        <see langword="true" /> if the value of the current instance is not zero; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Byte" />.</returns>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Char" />.</returns>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
      <returns>This conversion is not supported. No value is returned.</returns>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The current value of this instance, converted to a <see cref="T:System.Decimal" />.</returns>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The current value of this instance, converted to a <see cref="T:System.Double" />.</returns>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The current value of this instance, converted to an <see cref="T:System.Int16" />.</returns>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of this instance, converted to an <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The current value of this instance, converted to an <see cref="T:System.Int64" />.</returns>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The current value of this instance, converted to an <see cref="T:System.SByte" />.</returns>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The current value pf this instance, converted to a <see cref="T:System.Single" />.</returns>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />.</summary>
      <param name="type">The type to which to convert this <see cref="T:System.UInt16" /> value.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> implementation that supplies information about the format of the returned value.</param>
      <returns>The current value of this instance, converted to <paramref name="type" />.</returns>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The current value of this instance, unchanged.</returns>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The current value of this instance, converted to a <see cref="T:System.UInt32" />.</returns>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The current value of this instance, converted to a <see cref="T:System.UInt64" />.</returns>
    </member>
    <member name="M:System.UInt16.ToString">
      <summary>Converts the numeric value of this instance to its equivalent string representation.</summary>
      <returns>The string representation of the value of this instance, which consists of a sequence of digits ranging from 0 to 9, without a sign or leading zeros.</returns>
    </member>
    <member name="M:System.UInt16.ToString(System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>The string representation of the value of this instance, which consists of a sequence of digits ranging from 0 to 9, without a sign or leading zeros.</returns>
    </member>
    <member name="M:System.UInt16.ToString(System.String)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified format.</summary>
      <param name="format">A numeric format string.</param>
      <exception cref="T:System.FormatException">The <paramref name="format" /> parameter is invalid.</exception>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" />.</returns>
    </member>
    <member name="M:System.UInt16.ToString(System.String,System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.</summary>
      <param name="format">A numeric format string.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.</exception>
      <returns>The string representation of the value of this instance, as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
    </member>
    <member name="M:System.UInt16.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <summary>Tries to format the value of the current unsigned short number instance into the provided span of characters.</summary>
      <param name="destination">&gt;When this method returns, this instance's value formatted as a span of characters.</param>
      <param name="charsWritten">When this method returns, the number of characters that were written in <paramref name="destination" />.</param>
      <param name="format">A span containing the charactes that represent a standard or custom format string that defines the acceptable format for <paramref name="destination" />.</param>
      <param name="provider">An optional object that supplies culture-specific formatting information for <paramref name="destination" />.</param>
      <returns>
        <see langword="true" /> if the formatting was successful; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.UInt16.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.UInt16@)">
      <summary>Tries to convert the span representation of a number in a specified style and culture-specific format to its 16-bit unsigned integer equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <param name="s">A span containing the characters that represent the number to convert. The span is interpreted by using the style specified by the <paramref name="style" /> parameter.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <param name="result">When this method returns, contains the 16-bit unsigned integer value equivalent to the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not in a format compliant with <paramref name="style" />, or represents a number less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />. This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.UInt16.TryParse(System.ReadOnlySpan{System.Char},System.UInt16@)">
      <summary>Tries to convert the span representation of a number to its 16-bit unsigned integer equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <param name="s">A span containing the characters representing the number to convert.</param>
      <param name="result">When this method returns, contains the 16-bit unsigned integer value that is equivalent to the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not in the correct format. , or represents a number less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />. This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.UInt16.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.UInt16@)">
      <summary>Tries to convert the string representation of a number in a specified style and culture-specific format to its 16-bit unsigned integer equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <param name="s">A string that represents the number to convert. The string is interpreted by using the style specified by the <paramref name="style" /> parameter.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <param name="result">When this method returns, contains the 16-bit unsigned integer value equivalent to the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not in a format compliant with <paramref name="style" />, or represents a number less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />. This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  
  
 -or-  
  
 <paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.UInt16.TryParse(System.String,System.UInt16@)">
      <summary>Tries to convert the string representation of a number to its 16-bit unsigned integer equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <param name="s">A string that represents the number to convert.</param>
      <param name="result">When this method returns, contains the 16-bit unsigned integer value that is equivalent to the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not in the correct format. , or represents a number less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />. This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.UInt32">
      <summary>Represents a 32-bit unsigned integer.</summary>
    </member>
    <member name="F:System.UInt32.MaxValue">
      <summary>Represents the largest possible value of <see cref="T:System.UInt32" />. This field is constant.</summary>
    </member>
    <member name="F:System.UInt32.MinValue">
      <summary>Represents the smallest possible value of <see cref="T:System.UInt32" />. This field is constant.</summary>
    </member>
    <member name="M:System.UInt32.CompareTo(System.Object)">
      <summary>Compares this instance to a specified object and returns an indication of their relative values.</summary>
      <param name="value">An object to compare, or <see langword="null" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.UInt32" />.</exception>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.  
  
 <list type="table"><listheader><term> Return Value</term><description> Description</description></listheader><item><term> Less than zero</term><description> This instance is less than <paramref name="value" />.</description></item><item><term> Zero</term><description> This instance is equal to <paramref name="value" />.</description></item><item><term> Greater than zero</term><description> This instance is greater than <paramref name="value" />, or <paramref name="value" /> is <see langword="null" />.</description></item></list></returns>
    </member>
    <member name="M:System.UInt32.CompareTo(System.UInt32)">
      <summary>Compares this instance to a specified 32-bit unsigned integer and returns an indication of their relative values.</summary>
      <param name="value">An unsigned integer to compare.</param>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.  
  
 <list type="table"><listheader><term> Return value</term><description> Description</description></listheader><item><term> Less than zero</term><description> This instance is less than <paramref name="value" />.</description></item><item><term> Zero</term><description> This instance is equal to <paramref name="value" />.</description></item><item><term> Greater than zero</term><description> This instance is greater than <paramref name="value" />.</description></item></list></returns>
    </member>
    <member name="M:System.UInt32.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="obj">An object to compare with this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> is an instance of <see cref="T:System.UInt32" /> and equals the value of this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.UInt32.Equals(System.UInt32)">
      <summary>Returns a value indicating whether this instance is equal to a specified <see cref="T:System.UInt32" />.</summary>
      <param name="obj">A value to compare to this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> has the same value as this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.UInt32.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.UInt32.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.UInt32" />.</summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.UInt32" />.</returns>
    </member>
    <member name="M:System.UInt32.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Converts the span representation of a number in a specified style and culture-specific format to its 32-bit unsigned integer equivalent.</summary>
      <param name="s">A span containing the characters that represent the number to convert. The span is interpreted by using the style specified by the <paramref name="style" /> parameter.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <returns>A 32-bit unsigned integer equivalent to the number specified in <paramref name="s" />.</returns>
    </member>
    <member name="M:System.UInt32.Parse(System.String)">
      <summary>Converts the string representation of a number to its 32-bit unsigned integer equivalent.</summary>
      <param name="s">A string representing the number to convert.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="s" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">The <paramref name="s" /> parameter is not of the correct format.</exception>
      <exception cref="T:System.OverflowException">The <paramref name="s" /> parameter represents a number that is less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />.</exception>
      <returns>A 32-bit unsigned integer equivalent to the number contained in <paramref name="s" />.</returns>
    </member>
    <member name="M:System.UInt32.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>Converts the string representation of a number in a specified style to its 32-bit unsigned integer equivalent.</summary>
      <param name="s">A string representing the number to convert. The string is interpreted by using the style specified by the <paramref name="style" /> parameter.</param>
      <param name="style">A bitwise combination of the enumeration values that specify the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  
  
 -or-  
  
 <paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number that is less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />.  
  
 -or-  
  
 <paramref name="s" /> includes non-zero, fractional digits.</exception>
      <returns>A 32-bit unsigned integer equivalent to the number specified in <paramref name="s" />.</returns>
    </member>
    <member name="M:System.UInt32.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its 32-bit unsigned integer equivalent.</summary>
      <param name="s">A string representing the number to convert. The string is interpreted by using the style specified by the <paramref name="style" /> parameter.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  
  
 -or-  
  
 <paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number that is less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />.  
  
 -or-  
  
 <paramref name="s" /> includes non-zero, fractional digits.</exception>
      <returns>A 32-bit unsigned integer equivalent to the number specified in <paramref name="s" />.</returns>
    </member>
    <member name="M:System.UInt32.Parse(System.String,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified culture-specific format to its 32-bit unsigned integer equivalent.</summary>
      <param name="s">A string that represents the number to convert.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct style.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number that is less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />.</exception>
      <returns>A 32-bit unsigned integer equivalent to the number specified in <paramref name="s" />.</returns>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>
        <see langword="true" /> if the value of the current instance is not zero; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Byte" />.</returns>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Char" />.</returns>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
      <returns>This conversion is not supported. No value is returned.</returns>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Decimal" />.</returns>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Double" />.</returns>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int16" />.</returns>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int64" />.</returns>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to an <see cref="T:System.SByte" />.</returns>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Single" />.</returns>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />.</summary>
      <param name="type">The type to which to convert this <see cref="T:System.UInt32" /> value.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> implementation that supplies culture-specific information about the format of the returned value.</param>
      <returns>The value of the current instance, converted to <paramref name="type" />.</returns>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt16" />.</returns>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, unchanged.</returns>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt64" />.</returns>
    </member>
    <member name="M:System.UInt32.ToString">
      <summary>Converts the numeric value of this instance to its equivalent string representation.</summary>
      <returns>The string representation of the value of this instance, consisting of a sequence of digits ranging from 0 to 9, without a sign or leading zeroes.</returns>
    </member>
    <member name="M:System.UInt32.ToString(System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>The string representation of the value of this instance, which consists of a sequence of digits ranging from 0 to 9, without a sign or leading zeros.</returns>
    </member>
    <member name="M:System.UInt32.ToString(System.String)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified format.</summary>
      <param name="format">A numeric format string.</param>
      <exception cref="T:System.FormatException">The <paramref name="format" /> parameter is invalid.</exception>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" />.</returns>
    </member>
    <member name="M:System.UInt32.ToString(System.String,System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.</summary>
      <param name="format">A numeric format string.</param>
      <param name="provider">An object that supplies culture-specific formatting information about this instance.</param>
      <exception cref="T:System.FormatException">The <paramref name="format" /> parameter is invalid.</exception>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
    </member>
    <member name="M:System.UInt32.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <summary>Tries to format the value of the current unsigned integer number instance into the provided span of characters.</summary>
      <param name="destination">&gt;When this method returns, this instance's value formatted as a span of characters.</param>
      <param name="charsWritten">When this method returns, the number of characters that were written in <paramref name="destination" />.</param>
      <param name="format">A span containing the charactes that represent a standard or custom format string that defines the acceptable format for <paramref name="destination" />.</param>
      <param name="provider">An optional object that supplies culture-specific formatting information for <paramref name="destination" />.</param>
      <returns>
        <see langword="true" /> if the formatting was successful; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.UInt32.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.UInt32@)">
      <summary>Tries to convert the span representation of a number in a specified style and culture-specific format to its 32-bit unsigned integer equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <param name="s">A span containing the characters that represent the number to convert. The span is interpreted by using the style specified by the <paramref name="style" /> parameter.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <param name="result">When this method returns, contains the 32-bit unsigned integer value equivalent to the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not in a format compliant with <paramref name="style" />, or represents a number that is less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />. This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.UInt32.TryParse(System.ReadOnlySpan{System.Char},System.UInt32@)">
      <summary>Tries to convert the span representation of a number to its 32-bit unsigned integer equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <param name="s">A span containing the characters that represent the number to convert.</param>
      <param name="result">When this method returns, contains the 32-bit unsigned integer value that is equivalent to the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not of the correct format, or represents a number that is less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />. This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.UInt32.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.UInt32@)">
      <summary>Tries to convert the string representation of a number in a specified style and culture-specific format to its 32-bit unsigned integer equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <param name="s">A string that represents the number to convert. The string is interpreted by using the style specified by the <paramref name="style" /> parameter.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <param name="result">When this method returns, contains the 32-bit unsigned integer value equivalent to the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not in a format compliant with <paramref name="style" />, or represents a number that is less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />. This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  
  
 -or-  
  
 <paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.UInt32.TryParse(System.String,System.UInt32@)">
      <summary>Tries to convert the string representation of a number to its 32-bit unsigned integer equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <param name="s">A string that represents the number to convert.</param>
      <param name="result">When this method returns, contains the 32-bit unsigned integer value that is equivalent to the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not of the correct format, or represents a number that is less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />. This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.UInt64">
      <summary>Represents a 64-bit unsigned integer.</summary>
    </member>
    <member name="F:System.UInt64.MaxValue">
      <summary>Represents the largest possible value of <see cref="T:System.UInt64" />. This field is constant.</summary>
    </member>
    <member name="F:System.UInt64.MinValue">
      <summary>Represents the smallest possible value of <see cref="T:System.UInt64" />. This field is constant.</summary>
    </member>
    <member name="M:System.UInt64.CompareTo(System.Object)">
      <summary>Compares this instance to a specified object and returns an indication of their relative values.</summary>
      <param name="value">An object to compare, or <see langword="null" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.UInt64" />.</exception>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.  
  
 <list type="table"><listheader><term> Return Value</term><description> Description</description></listheader><item><term> Less than zero</term><description> This instance is less than <paramref name="value" />.</description></item><item><term> Zero</term><description> This instance is equal to <paramref name="value" />.</description></item><item><term> Greater than zero</term><description> This instance is greater than <paramref name="value" />, or <paramref name="value" /> is <see langword="null" />.</description></item></list></returns>
    </member>
    <member name="M:System.UInt64.CompareTo(System.UInt64)">
      <summary>Compares this instance to a specified 64-bit unsigned integer and returns an indication of their relative values.</summary>
      <param name="value">An unsigned integer to compare.</param>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.  
  
 <list type="table"><listheader><term> Return Value</term><description> Description</description></listheader><item><term> Less than zero</term><description> This instance is less than <paramref name="value" />.</description></item><item><term> Zero</term><description> This instance is equal to <paramref name="value" />.</description></item><item><term> Greater than zero</term><description> This instance is greater than <paramref name="value" />.</description></item></list></returns>
    </member>
    <member name="M:System.UInt64.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="obj">An object to compare to this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> is an instance of <see cref="T:System.UInt64" /> and equals the value of this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.UInt64.Equals(System.UInt64)">
      <summary>Returns a value indicating whether this instance is equal to a specified <see cref="T:System.UInt64" /> value.</summary>
      <param name="obj">A <see cref="T:System.UInt64" /> value to compare to this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> has the same value as this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.UInt64.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.UInt64.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.UInt64" />.</summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.UInt64" />.</returns>
    </member>
    <member name="M:System.UInt64.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Converts the span representation of a number in a specified style and culture-specific format to its 64-bit unsigned integer equivalent.</summary>
      <param name="s">A span containing the characters that represent the number to convert. The span is interpreted by using the style specified by the <paramref name="style" /> parameter.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <returns>A 64-bit unsigned integer equivalent to the number specified in <paramref name="s" />.</returns>
    </member>
    <member name="M:System.UInt64.Parse(System.String)">
      <summary>Converts the string representation of a number to its 64-bit unsigned integer equivalent.</summary>
      <param name="s">A string that represents the number to convert.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="s" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">The <paramref name="s" /> parameter is not in the correct format.</exception>
      <exception cref="T:System.OverflowException">The <paramref name="s" /> parameter represents a number less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />.</exception>
      <returns>A 64-bit unsigned integer equivalent to the number contained in <paramref name="s" />.</returns>
    </member>
    <member name="M:System.UInt64.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>Converts the string representation of a number in a specified style to its 64-bit unsigned integer equivalent.</summary>
      <param name="s">A string that represents the number to convert. The string is interpreted by using the style specified by the <paramref name="style" /> parameter.</param>
      <param name="style">A bitwise combination of the enumeration values that specifies the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="s" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  
  
 -or-  
  
 <paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">The <paramref name="s" /> parameter is not in a format compliant with <paramref name="style" />.</exception>
      <exception cref="T:System.OverflowException">The <paramref name="s" /> parameter represents a number less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />.  
  
 -or-  
  
 <paramref name="s" /> includes non-zero, fractional digits.</exception>
      <returns>A 64-bit unsigned integer equivalent to the number specified in <paramref name="s" />.</returns>
    </member>
    <member name="M:System.UInt64.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its 64-bit unsigned integer equivalent.</summary>
      <param name="s">A string that represents the number to convert. The string is interpreted by using the style specified by the <paramref name="style" /> parameter.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="s" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  
  
 -or-  
  
 <paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">The <paramref name="s" /> parameter is not in a format compliant with <paramref name="style" />.</exception>
      <exception cref="T:System.OverflowException">The <paramref name="s" /> parameter represents a number less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />.  
  
 -or-  
  
 <paramref name="s" /> includes non-zero, fractional digits.</exception>
      <returns>A 64-bit unsigned integer equivalent to the number specified in <paramref name="s" />.</returns>
    </member>
    <member name="M:System.UInt64.Parse(System.String,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified culture-specific format to its 64-bit unsigned integer equivalent.</summary>
      <param name="s">A string that represents the number to convert.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="s" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">The <paramref name="s" /> parameter is not in the correct style.</exception>
      <exception cref="T:System.OverflowException">The <paramref name="s" /> parameter represents a number less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />.</exception>
      <returns>A 64-bit unsigned integer equivalent to the number specified in <paramref name="s" />.</returns>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>
        <see langword="true" /> if the value of the current instance is not zero; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Byte" />.</returns>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Char" />.</returns>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
      <returns>This conversion is not supported. No value is returned.</returns>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Decimal" />.</returns>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Double" />.</returns>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int16" />.</returns>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int64" />.</returns>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to an <see cref="T:System.SByte" />.</returns>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Single" />.</returns>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />.</summary>
      <param name="type">The type to which to convert this <see cref="T:System.UInt64" /> value.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> implementation that supplies information about the format of the returned value.</param>
      <returns>The value of the current instance, converted to <paramref name="type" />.</returns>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt16" />.</returns>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt32" />.</returns>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, unchanged.</returns>
    </member>
    <member name="M:System.UInt64.ToString">
      <summary>Converts the numeric value of this instance to its equivalent string representation.</summary>
      <returns>The string representation of the value of this instance, consisting of a sequence of digits ranging from 0 to 9, without a sign or leading zeroes.</returns>
    </member>
    <member name="M:System.UInt64.ToString(System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>The string representation of the value of this instance, consisting of a sequence of digits ranging from 0 to 9, without a sign or leading zeros.</returns>
    </member>
    <member name="M:System.UInt64.ToString(System.String)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified format.</summary>
      <param name="format">A numeric format string.</param>
      <exception cref="T:System.FormatException">The <paramref name="format" /> parameter is invalid.</exception>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" />.</returns>
    </member>
    <member name="M:System.UInt64.ToString(System.String,System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.</summary>
      <param name="format">A numeric format string.</param>
      <param name="provider">An object that supplies culture-specific formatting information about this instance.</param>
      <exception cref="T:System.FormatException">The <paramref name="format" /> parameter is invalid.</exception>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
    </member>
    <member name="M:System.UInt64.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <summary>Tries to format the value of the current unsigned long number instance into the provided span of characters.</summary>
      <param name="destination">When this method returns, this instance's value formatted as a span of characters.</param>
      <param name="charsWritten">When this method returns, the number of characters that were written in <paramref name="destination" />.</param>
      <param name="format">A span containing the characters that represent a standard or custom format string that defines the acceptable format of <paramref name="destination" />.</param>
      <param name="provider">An optional object that supplies culture-specific formatting information for <paramref name="destination" />.</param>
      <returns>
        <see langword="true" /> if the formatting was successful; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.UInt64.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.UInt64@)">
      <summary>Tries to convert the span representation of a number in a specified style and culture-specific format to its 64-bit unsigned integer equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <param name="s">A span containing the characters that represent the number to convert. The span is interpreted by using the style specified by the <paramref name="style" /> parameter.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <param name="result">When this method returns, contains the 64-bit unsigned integer value equivalent to the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not in a format compliant with <paramref name="style" />, or represents a number less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />. This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.UInt64.TryParse(System.ReadOnlySpan{System.Char},System.UInt64@)">
      <summary>Tries to convert the span representation of a number to its 64-bit unsigned integer equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <param name="s">A span containing the characters that represent the number to convert.</param>
      <param name="result">When this method returns, contains the 64-bit unsigned integer value that is equivalent to the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not of the correct format, or represents a number less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />. This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.UInt64.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.UInt64@)">
      <summary>Tries to convert the string representation of a number in a specified style and culture-specific format to its 64-bit unsigned integer equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <param name="s">A string that represents the number to convert. The string is interpreted by using the style specified by the <paramref name="style" /> parameter.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <param name="result">When this method returns, contains the 64-bit unsigned integer value equivalent to the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not in a format compliant with <paramref name="style" />, or represents a number less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />. This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  
  
 -or-  
  
 <paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.UInt64.TryParse(System.String,System.UInt64@)">
      <summary>Tries to convert the string representation of a number to its 64-bit unsigned integer equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <param name="s">A string that represents the number to convert.</param>
      <param name="result">When this method returns, contains the 64-bit unsigned integer value that is equivalent to the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not of the correct format, or represents a number less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />. This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.UIntPtr">
      <summary>A platform-specific type that is used to represent a pointer or a handle.</summary>
    </member>
    <member name="F:System.UIntPtr.Zero">
      <summary>A read-only field that represents a pointer or handle that has been initialized to zero.</summary>
    </member>
    <member name="M:System.UIntPtr.#ctor(System.UInt32)">
      <summary>Initializes a new instance of the <see cref="T:System.UIntPtr" /> structure using the specified 32-bit pointer or handle.</summary>
      <param name="value">A pointer or handle contained in a 32-bit unsigned integer.</param>
    </member>
    <member name="M:System.UIntPtr.#ctor(System.UInt64)">
      <summary>Initializes a new instance of <see cref="T:System.UIntPtr" /> using the specified 64-bit pointer or handle.</summary>
      <param name="value">A pointer or handle contained in a 64-bit unsigned integer.</param>
      <exception cref="T:System.OverflowException">On a 32-bit platform, <paramref name="value" /> is too large to represent as an <see cref="T:System.UIntPtr" />.</exception>
    </member>
    <member name="M:System.UIntPtr.#ctor(System.Void*)">
      <summary>Initializes a new instance of <see cref="T:System.UIntPtr" /> using the specified pointer to an unspecified type.</summary>
      <param name="value">A pointer to an unspecified type.</param>
    </member>
    <member name="M:System.UIntPtr.Add(System.UIntPtr,System.Int32)">
      <summary>Adds an offset to the value of an unsigned pointer.</summary>
      <param name="pointer">The unsigned pointer to add the offset to.</param>
      <param name="offset">The offset to add.</param>
      <returns>A new unsigned pointer that reflects the addition of <paramref name="offset" /> to <paramref name="pointer" />.</returns>
    </member>
    <member name="M:System.UIntPtr.CompareTo(System.Object)">
      <summary>Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.</summary>
      <param name="value">An object to compare, or <see langword="null" />.</param>
      <returns>A value that indicates the relative order of the objects being compared. The return value has these meanings:   
 <list type="table"><listheader><term> Value</term><description> Meaning</description></listheader><item><term> Less than zero</term><description> This instance precedes <paramref name="obj" /> in the sort order.</description></item><item><term> Zero</term><description> This instance occurs in the same position in the sort order as <paramref name="obj" />.</description></item><item><term> Greater than zero</term><description> This instance follows <paramref name="obj" /> in the sort order.</description></item></list></returns>
    </member>
    <member name="M:System.UIntPtr.CompareTo(System.UIntPtr)">
      <summary>Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.</summary>
      <param name="value">An unsigned native integer to compare.</param>
      <returns>A value that indicates the relative order of the objects being compared. The return value has these meanings:   
 <list type="table"><listheader><term> Value</term><description> Meaning</description></listheader><item><term> Less than zero</term><description> This instance precedes <paramref name="other" /> in the sort order.</description></item><item><term> Zero</term><description> This instance occurs in the same position in the sort order as <paramref name="other" />.</description></item><item><term> Greater than zero</term><description> This instance follows <paramref name="other" /> in the sort order.</description></item></list></returns>
    </member>
    <member name="M:System.UIntPtr.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="obj">An object to compare with this instance or <see langword="null" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> is an instance of <see cref="T:System.UIntPtr" /> and equals the value of this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.UIntPtr.Equals(System.UIntPtr)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
        <see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.UIntPtr.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.UIntPtr.op_Addition(System.UIntPtr,System.Int32)">
      <summary>Adds an offset to the value of an unsigned pointer.</summary>
      <param name="pointer">The unsigned pointer to add the offset to.</param>
      <param name="offset">The offset to add.</param>
      <returns>A new unsigned pointer that reflects the addition of <paramref name="offset" /> to <paramref name="pointer" />.</returns>
    </member>
    <member name="M:System.UIntPtr.op_Equality(System.UIntPtr,System.UIntPtr)">
      <summary>Determines whether two specified instances of <see cref="T:System.UIntPtr" /> are equal.</summary>
      <param name="value1">The first pointer or handle to compare.</param>
      <param name="value2">The second pointer or handle to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="value1" /> equals <paramref name="value2" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UInt32)~System.UIntPtr">
      <summary>Converts the value of a 32-bit unsigned integer to an <see cref="T:System.UIntPtr" />.</summary>
      <param name="value">A 32-bit unsigned integer.</param>
      <returns>A new instance of <see cref="T:System.UIntPtr" /> initialized to <paramref name="value" />.</returns>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UInt64)~System.UIntPtr">
      <summary>Converts the value of a 64-bit unsigned integer to an <see cref="T:System.UIntPtr" />.</summary>
      <param name="value">A 64-bit unsigned integer.</param>
      <exception cref="T:System.OverflowException">On a 32-bit platform, <paramref name="value" /> is too large to represent as an <see cref="T:System.UIntPtr" />.</exception>
      <returns>A new instance of <see cref="T:System.UIntPtr" /> initialized to <paramref name="value" />.</returns>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UIntPtr)~System.UInt32">
      <summary>Converts the value of the specified <see cref="T:System.UIntPtr" /> to a 32-bit unsigned integer.</summary>
      <param name="value">The pointer or handle to convert.</param>
      <exception cref="T:System.OverflowException">On a 64-bit platform, the value of <paramref name="value" /> is too large to represent as a 32-bit unsigned integer.</exception>
      <returns>The contents of <paramref name="value" />.</returns>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UIntPtr)~System.UInt64">
      <summary>Converts the value of the specified <see cref="T:System.UIntPtr" /> to a 64-bit unsigned integer.</summary>
      <param name="value">The pointer or handle to convert.</param>
      <returns>The contents of <paramref name="value" />.</returns>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UIntPtr)~System.Void*">
      <summary>Converts the value of the specified <see cref="T:System.UIntPtr" /> to a pointer to an unspecified type.  
  
 This API is not CLS-compliant.</summary>
      <param name="value">The pointer or handle to convert.</param>
      <returns>The contents of <paramref name="value" />.</returns>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.Void*)~System.UIntPtr">
      <summary>Converts the specified pointer to an unspecified type to an <see cref="T:System.UIntPtr" />.  
  
 This API is not CLS-compliant.</summary>
      <param name="value">A pointer to an unspecified type.</param>
      <returns>A new instance of <see cref="T:System.UIntPtr" /> initialized to <paramref name="value" />.</returns>
    </member>
    <member name="M:System.UIntPtr.op_Inequality(System.UIntPtr,System.UIntPtr)">
      <summary>Determines whether two specified instances of <see cref="T:System.UIntPtr" /> are not equal.</summary>
      <param name="value1">The first pointer or handle to compare.</param>
      <param name="value2">The second pointer or handle to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="value1" /> does not equal <paramref name="value2" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.UIntPtr.op_Subtraction(System.UIntPtr,System.Int32)">
      <summary>Subtracts an offset from the value of an unsigned pointer.</summary>
      <param name="pointer">The unsigned pointer to subtract the offset from.</param>
      <param name="offset">The offset to subtract.</param>
      <returns>A new unsigned pointer that reflects the subtraction of <paramref name="offset" /> from <paramref name="pointer" />.</returns>
    </member>
    <member name="M:System.UIntPtr.Parse(System.String)">
      <summary>Converts the string representation of a number to its unsigned native integer equivalent.</summary>
      <param name="s">A string containing a number to convert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="P:System.UIntPtr.MinValue" /> or greater than <see cref="P:System.UIntPtr.MaxValue" />.</exception>
      <returns>An unsigned native integer equivalent to the number contained in <paramref name="s" />.</returns>
    </member>
    <member name="M:System.UIntPtr.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>Converts the string representation of a number in a specified style to its unsigned native integer equivalent.</summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">A bitwise combination of the enumeration values that indicates the style elements that can be present in <paramref name="s" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value or <paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="P:System.UIntPtr.MinValue" /> or greater than <see cref="P:System.UIntPtr.MaxValue" />.</exception>
      <returns>An unsigned native integer equivalent to the number contained in <paramref name="s" />.</returns>
    </member>
    <member name="M:System.UIntPtr.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its unsigned native integer equivalent.</summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">A bitwise combination of the enumeration values that indicates the style elements that can be present in <paramref name="s" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value or <paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="P:System.UIntPtr.MinValue" /> or greater than <see cref="P:System.UIntPtr.MaxValue" />.</exception>
      <returns>An unsigned native integer equivalent to the number contained in <paramref name="s" />.</returns>
    </member>
    <member name="M:System.UIntPtr.Parse(System.String,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified culture-specific format to its unsigned native integer equivalent.</summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="P:System.UIntPtr.MinValue" /> or greater than <see cref="P:System.UIntPtr.MaxValue" />.</exception>
      <returns>An unsigned native integer equivalent to the number contained in <paramref name="s" />.</returns>
    </member>
    <member name="M:System.UIntPtr.Subtract(System.UIntPtr,System.Int32)">
      <summary>Subtracts an offset from the value of an unsigned pointer.</summary>
      <param name="pointer">The unsigned pointer to subtract the offset from.</param>
      <param name="offset">The offset to subtract.</param>
      <returns>A new unsigned pointer that reflects the subtraction of <paramref name="offset" /> from <paramref name="pointer" />.</returns>
    </member>
    <member name="M:System.UIntPtr.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the data needed to serialize the current <see cref="T:System.UIntPtr" /> object.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object to populate with data.</param>
      <param name="context">The destination for this serialization. (This parameter is not used; specify <see langword="null" />.)</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.UIntPtr.ToPointer">
      <summary>Converts the value of this instance to a pointer to an unspecified type.</summary>
      <returns>A pointer to <see cref="T:System.Void" />; that is, a pointer to memory containing data of an unspecified type.</returns>
    </member>
    <member name="M:System.UIntPtr.ToString">
      <summary>Converts the numeric value of this instance to its equivalent string representation.</summary>
      <returns>The string representation of the value of this instance.</returns>
    </member>
    <member name="M:System.UIntPtr.ToString(System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>The string representation of the value of this instance as specified by <paramref name="provider" />.</returns>
    </member>
    <member name="M:System.UIntPtr.ToString(System.String)">
      <summary>Converts the numeric value of this instance to its equivalent string representation, using the specified format.</summary>
      <param name="format">A standard or custom numeric format string.</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid or not supported.</exception>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" />.</returns>
    </member>
    <member name="M:System.UIntPtr.ToString(System.String,System.IFormatProvider)">
      <summary>Formats the value of the current instance using the specified format.</summary>
      <param name="format">The format to use.   
 -or-   
 A <see langword="null" /> reference (<see langword="Nothing" /> in Visual Basic) to use the default format defined for the type of the <see cref="T:System.IFormattable" /> implementation.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid or not supported.</exception>
      <returns>The value of the current instance in the specified format.</returns>
    </member>
    <member name="M:System.UIntPtr.ToUInt32">
      <summary>Converts the value of this instance to a 32-bit unsigned integer.</summary>
      <exception cref="T:System.OverflowException">On a 64-bit platform, the value of this instance is too large to represent as a 32-bit unsigned integer.</exception>
      <returns>A 32-bit unsigned integer equal to the value of this instance.</returns>
    </member>
    <member name="M:System.UIntPtr.ToUInt64">
      <summary>Converts the value of this instance to a 64-bit unsigned integer.</summary>
      <returns>A 64-bit unsigned integer equal to the value of this instance.</returns>
    </member>
    <member name="M:System.UIntPtr.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.UIntPtr@)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its unsigned native integer equivalent. A return value indicates whether the conversion succeeded.</summary>
      <param name="s">A string containing a number to convert. The string is interpreted using the style specified by <paramref name="style" />.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="s" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <param name="result">When this method returns, contains the unsigned native integer value equivalent of the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or Empty, is not of the correct format, or represents a number less than <see cref="P:System.UIntPtr.MinValue" /> or greater than <see cref="P:System.UIntPtr.MaxValue" />. This parameter is passed uninitialized; any value originally supplied in result will be overwritten.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.UIntPtr.TryParse(System.String,System.UIntPtr@)">
      <summary>Converts the string representation of a number to its unsigned native integer equivalent. A return value indicates whether the conversion succeeded.</summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="result">When this method returns, contains the unsigned native integer value equivalent of the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or Empty, is not of the correct format, or represents a number less than <see cref="P:System.UIntPtr.MinValue" /> or greater than <see cref="P:System.UIntPtr.MaxValue" />. This parameter is passed uninitialized; any value originally supplied in result will be overwritten.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.UIntPtr.MaxValue">
      <summary>Represents the largest possible value of <see cref="T:System.UIntPtr" />.</summary>
    </member>
    <member name="P:System.UIntPtr.MinValue">
      <summary>Represents the smallest possible value of <see cref="T:System.UIntPtr" />.</summary>
    </member>
    <member name="P:System.UIntPtr.Size">
      <summary>Gets the size of this instance.</summary>
      <returns>The size of a pointer or handle on this platform, measured in bytes. The value of this property is 4 on a 32-bit platform, and 8 on a 64-bit platform.</returns>
    </member>
    <member name="T:System.UnauthorizedAccessException">
      <summary>The exception that is thrown when the operating system denies access because of an I/O error or a specific type of security error.</summary>
    </member>
    <member name="M:System.UnauthorizedAccessException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.UnauthorizedAccessException" /> class.</summary>
    </member>
    <member name="M:System.UnauthorizedAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.UnauthorizedAccessException" /> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.UnauthorizedAccessException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.UnauthorizedAccessException" /> class with a specified error message.</summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.UnauthorizedAccessException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.UnauthorizedAccessException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.ValueType">
      <summary>Provides the base class for value types.</summary>
    </member>
    <member name="M:System.ValueType.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ValueType" /> class.</summary>
    </member>
    <member name="M:System.ValueType.Equals(System.Object)">
      <summary>Indicates whether this instance and a specified object are equal.</summary>
      <param name="obj">The object to compare with the current instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ValueType.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
    </member>
    <member name="M:System.ValueType.ToString">
      <summary>Returns the fully qualified type name of this instance.</summary>
      <returns>The fully qualified type name.</returns>
    </member>
    <member name="T:System.Version">
      <summary>Represents the version number of an assembly, operating system, or the common language runtime. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Version.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Version" /> class.</summary>
    </member>
    <member name="M:System.Version.#ctor(System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Version" /> class using the specified major and minor values.</summary>
      <param name="major">The major version number.</param>
      <param name="minor">The minor version number.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="major" /> or <paramref name="minor" /> is less than zero.</exception>
    </member>
    <member name="M:System.Version.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Version" /> class using the specified major, minor, and build values.</summary>
      <param name="major">The major version number.</param>
      <param name="minor">The minor version number.</param>
      <param name="build">The build number.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="major" />, <paramref name="minor" />, or <paramref name="build" /> is less than zero.</exception>
    </member>
    <member name="M:System.Version.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Version" /> class with the specified major, minor, build, and revision numbers.</summary>
      <param name="major">The major version number.</param>
      <param name="minor">The minor version number.</param>
      <param name="build">The build number.</param>
      <param name="revision">The revision number.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="major" />, <paramref name="minor" />, <paramref name="build" />, or <paramref name="revision" /> is less than zero.</exception>
    </member>
    <member name="M:System.Version.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Version" /> class using the specified string.</summary>
      <param name="version">A string containing the major, minor, build, and revision numbers, where each number is delimited with a period character ('.').</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="version" /> has fewer than two components or more than four components.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">A major, minor, build, or revision component is less than zero.</exception>
      <exception cref="T:System.FormatException">At least one component of <paramref name="version" /> does not parse to an integer.</exception>
      <exception cref="T:System.OverflowException">At least one component of <paramref name="version" /> represents a number greater than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Version.Clone">
      <summary>Returns a new <see cref="T:System.Version" /> object whose value is the same as the current <see cref="T:System.Version" /> object.</summary>
      <returns>A new <see cref="T:System.Object" /> whose values are a copy of the current <see cref="T:System.Version" /> object.</returns>
    </member>
    <member name="M:System.Version.CompareTo(System.Object)">
      <summary>Compares the current <see cref="T:System.Version" /> object to a specified object and returns an indication of their relative values.</summary>
      <param name="version">An object to compare, or <see langword="null" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="version" /> is not of type <see cref="T:System.Version" />.</exception>
      <returns>A signed integer that indicates the relative values of the two objects, as shown in the following table.  
  
 <list type="table"><listheader><term> Return value</term><description> Meaning</description></listheader><item><term> Less than zero</term><description> The current <see cref="T:System.Version" /> object is a version before <paramref name="version" />.</description></item><item><term> Zero</term><description> The current <see cref="T:System.Version" /> object is the same version as <paramref name="version" />.</description></item><item><term> Greater than zero</term><description> The current <see cref="T:System.Version" /> object is a version subsequent to <paramref name="version" />, or <paramref name="version" /> is <see langword="null" />.</description></item></list></returns>
    </member>
    <member name="M:System.Version.CompareTo(System.Version)">
      <summary>Compares the current <see cref="T:System.Version" /> object to a specified <see cref="T:System.Version" /> object and returns an indication of their relative values.</summary>
      <param name="value">A <see cref="T:System.Version" /> object to compare to the current <see cref="T:System.Version" /> object, or <see langword="null" />.</param>
      <returns>A signed integer that indicates the relative values of the two objects, as shown in the following table.  
  
 <list type="table"><listheader><term> Return value</term><description> Meaning</description></listheader><item><term> Less than zero</term><description> The current <see cref="T:System.Version" /> object is a version before <paramref name="value" />.</description></item><item><term> Zero</term><description> The current <see cref="T:System.Version" /> object is the same version as <paramref name="value" />.</description></item><item><term> Greater than zero</term><description> The current <see cref="T:System.Version" /> object is a version subsequent to <paramref name="value" />, or <paramref name="value" /> is <see langword="null" />.</description></item></list></returns>
    </member>
    <member name="M:System.Version.Equals(System.Object)">
      <summary>Returns a value indicating whether the current <see cref="T:System.Version" /> object is equal to a specified object.</summary>
      <param name="obj">An object to compare with the current <see cref="T:System.Version" /> object, or <see langword="null" />.</param>
      <returns>
        <see langword="true" /> if the current <see cref="T:System.Version" /> object and <paramref name="obj" /> are both <see cref="T:System.Version" /> objects, and every component of the current <see cref="T:System.Version" /> object matches the corresponding component of <paramref name="obj" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Version.Equals(System.Version)">
      <summary>Returns a value indicating whether the current <see cref="T:System.Version" /> object and a specified <see cref="T:System.Version" /> object represent the same value.</summary>
      <param name="obj">A <see cref="T:System.Version" /> object to compare to the current <see cref="T:System.Version" /> object, or <see langword="null" />.</param>
      <returns>
        <see langword="true" /> if every component of the current <see cref="T:System.Version" /> object matches the corresponding component of the <paramref name="obj" /> parameter; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Version.GetHashCode">
      <summary>Returns a hash code for the current <see cref="T:System.Version" /> object.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Version.op_Equality(System.Version,System.Version)">
      <summary>Determines whether two specified <see cref="T:System.Version" /> objects are equal.</summary>
      <param name="v1">The first <see cref="T:System.Version" /> object.</param>
      <param name="v2">The second <see cref="T:System.Version" /> object.</param>
      <returns>
        <see langword="true" /> if <paramref name="v1" /> equals <paramref name="v2" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Version.op_GreaterThan(System.Version,System.Version)">
      <summary>Determines whether the first specified <see cref="T:System.Version" /> object is greater than the second specified <see cref="T:System.Version" /> object.</summary>
      <param name="v1">The first <see cref="T:System.Version" /> object.</param>
      <param name="v2">The second <see cref="T:System.Version" /> object.</param>
      <returns>
        <see langword="true" /> if <paramref name="v1" /> is greater than <paramref name="v2" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Version.op_GreaterThanOrEqual(System.Version,System.Version)">
      <summary>Determines whether the first specified <see cref="T:System.Version" /> object is greater than or equal to the second specified <see cref="T:System.Version" /> object.</summary>
      <param name="v1">The first <see cref="T:System.Version" /> object.</param>
      <param name="v2">The second <see cref="T:System.Version" /> object.</param>
      <returns>
        <see langword="true" /> if <paramref name="v1" /> is greater than or equal to <paramref name="v2" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Version.op_Inequality(System.Version,System.Version)">
      <summary>Determines whether two specified <see cref="T:System.Version" /> objects are not equal.</summary>
      <param name="v1">The first <see cref="T:System.Version" /> object.</param>
      <param name="v2">The second <see cref="T:System.Version" /> object.</param>
      <returns>
        <see langword="true" /> if <paramref name="v1" /> does not equal <paramref name="v2" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Version.op_LessThan(System.Version,System.Version)">
      <summary>Determines whether the first specified <see cref="T:System.Version" /> object is less than the second specified <see cref="T:System.Version" /> object.</summary>
      <param name="v1">The first <see cref="T:System.Version" /> object.</param>
      <param name="v2">The second <see cref="T:System.Version" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="v1" /> is <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> if <paramref name="v1" /> is less than <paramref name="v2" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Version.op_LessThanOrEqual(System.Version,System.Version)">
      <summary>Determines whether the first specified <see cref="T:System.Version" /> object is less than or equal to the second <see cref="T:System.Version" /> object.</summary>
      <param name="v1">The first <see cref="T:System.Version" /> object.</param>
      <param name="v2">The second <see cref="T:System.Version" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="v1" /> is <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> if <paramref name="v1" /> is less than or equal to <paramref name="v2" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Version.Parse(System.ReadOnlySpan{System.Char})">
      <summary>Converts the specified read-only span of characters that represents a version number to an equivalent <see cref="T:System.Version" /> object.</summary>
      <param name="input">A read-only span of characters that contains a version number to convert.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> has fewer than two or more than four version components.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">At least one component in <paramref name="input" /> is less than zero.</exception>
      <exception cref="T:System.FormatException">At least one component in <paramref name="input" /> is not an integer.</exception>
      <exception cref="T:System.OverflowException">At least one component in <paramref name="input" /> represents a number that is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <returns>An object that is equivalent to the version number specified in the <paramref name="input" /> parameter.</returns>
    </member>
    <member name="M:System.Version.Parse(System.String)">
      <summary>Converts the string representation of a version number to an equivalent <see cref="T:System.Version" /> object.</summary>
      <param name="input">A string that contains a version number to convert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> has fewer than two or more than four version components.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">At least one component in <paramref name="input" /> is less than zero.</exception>
      <exception cref="T:System.FormatException">At least one component in <paramref name="input" /> is not an integer.</exception>
      <exception cref="T:System.OverflowException">At least one component in <paramref name="input" /> represents a number that is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <returns>An object that is equivalent to the version number specified in the <paramref name="input" /> parameter.</returns>
    </member>
    <member name="M:System.Version.ToString">
      <summary>Converts the value of the current <see cref="T:System.Version" /> object to its equivalent <see cref="T:System.String" /> representation.</summary>
      <returns>The <see cref="T:System.String" /> representation of the values of the major, minor, build, and revision components of the current <see cref="T:System.Version" /> object, as depicted in the following format. Each component is separated by a period character ('.'). Square brackets ('[' and ']') indicate a component that will not appear in the return value if the component is not defined:  
  
 major.minor[.build[.revision]]  
  
 For example, if you create a <see cref="T:System.Version" /> object using the constructor <c>Version(1,1)</c>, the returned string is "1.1". If you create a <see cref="T:System.Version" /> object using the constructor <c>Version(1,3,4,2)</c>, the returned string is "1.3.4.2".</returns>
    </member>
    <member name="M:System.Version.ToString(System.Int32)">
      <summary>Converts the value of the current <see cref="T:System.Version" /> object to its equivalent <see cref="T:System.String" /> representation. A specified count indicates the number of components to return.</summary>
      <param name="fieldCount">The number of components to return. The <paramref name="fieldCount" /> ranges from 0 to 4.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fieldCount" /> is less than 0, or more than 4.  
  
 -or-  
  
 <paramref name="fieldCount" /> is more than the number of components defined in the current <see cref="T:System.Version" /> object.</exception>
      <returns>The <see cref="T:System.String" /> representation of the values of the major, minor, build, and revision components of the current <see cref="T:System.Version" /> object, each separated by a period character ('.'). The <paramref name="fieldCount" /> parameter determines how many components are returned.  
  
 <list type="table"><listheader><term> fieldCount</term><description> Return Value</description></listheader><item><term> 0</term><description> An empty string ("").</description></item><item><term> 1</term><description> major</description></item><item><term> 2</term><description> major.minor</description></item><item><term> 3</term><description> major.minor.build</description></item><item><term> 4</term><description> major.minor.build.revision</description></item></list>  

 For example, if you create <see cref="T:System.Version" /> object using the constructor <c>Version(1,3,5)</c>, <c>ToString(2)</c> returns "1.3" and <c>ToString(4)</c> throws an exception.</returns>
    </member>
    <member name="M:System.Version.TryFormat(System.Span{System.Char},System.Int32,System.Int32@)">
      <summary>Tries to format this version instance into a span of characters.</summary>
      <param name="destination">When this method returns, the formatted version in the span of characters.</param>
      <param name="fieldCount">The number of components to return. This value ranges from 0 to 4.</param>
      <param name="charsWritten">When this method returns, the number of characters that were written in <paramref name="destination" />.</param>
      <returns>
        <see langword="true" /> if the formatting was successful; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Version.TryFormat(System.Span{System.Char},System.Int32@)">
      <summary>Tries to format this version instance into a span of characters.</summary>
      <param name="destination">When this method returns, the formatted version in the span of characters.</param>
      <param name="charsWritten">When this method returns, the number of characters that were written in <paramref name="destination" />.</param>
      <returns>
        <see langword="true" /> if the formatting was successful; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Version.TryParse(System.ReadOnlySpan{System.Char},System.Version@)">
      <summary>Tries to convert the specified read-only span of characters representing a version number to an equivalent <see cref="T:System.Version" /> object, and returns a value that indicates whether the conversion succeeded.</summary>
      <param name="input">A read-only span of characters that contains a version number to convert.</param>
      <param name="result">When this method returns, the <see cref="T:System.Version" /> equivalent of the number that is contained in <paramref name="input" />, if the conversion succeeded. If <paramref name="input" /> is <see langword="null" />, <see cref="F:System.String.Empty" />, or if the conversion fails, <paramref name="result" /> is <see langword="null" /> when the method returns.</param>
      <returns>
        <see langword="true" /> if the <paramref name="input" /> parameter was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Version.TryParse(System.String,System.Version@)">
      <summary>Tries to convert the string representation of a version number to an equivalent <see cref="T:System.Version" /> object, and returns a value that indicates whether the conversion succeeded.</summary>
      <param name="input">A string that contains a version number to convert.</param>
      <param name="result">When this method returns, contains the <see cref="T:System.Version" /> equivalent of the number that is contained in <paramref name="input" />, if the conversion succeeded. If <paramref name="input" /> is <see langword="null" />, <see cref="F:System.String.Empty" />, or if the conversion fails, <paramref name="result" /> is <see langword="null" /> when the method returns.</param>
      <returns>
        <see langword="true" /> if the <paramref name="input" /> parameter was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Version.Build">
      <summary>Gets the value of the build component of the version number for the current <see cref="T:System.Version" /> object.</summary>
      <returns>The build number, or -1 if the build number is undefined.</returns>
    </member>
    <member name="P:System.Version.Major">
      <summary>Gets the value of the major component of the version number for the current <see cref="T:System.Version" /> object.</summary>
      <returns>The major version number.</returns>
    </member>
    <member name="P:System.Version.MajorRevision">
      <summary>Gets the high 16 bits of the revision number.</summary>
      <returns>A 16-bit signed integer.</returns>
    </member>
    <member name="P:System.Version.Minor">
      <summary>Gets the value of the minor component of the version number for the current <see cref="T:System.Version" /> object.</summary>
      <returns>The minor version number.</returns>
    </member>
    <member name="P:System.Version.MinorRevision">
      <summary>Gets the low 16 bits of the revision number.</summary>
      <returns>A 16-bit signed integer.</returns>
    </member>
    <member name="P:System.Version.Revision">
      <summary>Gets the value of the revision component of the version number for the current <see cref="T:System.Version" /> object.</summary>
      <returns>The revision number, or -1 if the revision number is undefined.</returns>
    </member>
    <member name="T:System.Void">
      <summary>Specifies a return value type for a method that does not return a value.</summary>
    </member>
    <member name="T:System.WeakReference">
      <summary>Represents a weak reference, which references an object while still allowing that object to be reclaimed by garbage collection.</summary>
    </member>
    <member name="M:System.WeakReference.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.WeakReference" /> class, referencing the specified object.</summary>
      <param name="target">The object to track or <see langword="null" />.</param>
    </member>
    <member name="M:System.WeakReference.#ctor(System.Object,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.WeakReference" /> class, referencing the specified object and using the specified resurrection tracking.</summary>
      <param name="target">An object to track.</param>
      <param name="trackResurrection">Indicates when to stop tracking the object. If <see langword="true" />, the object is tracked after finalization; if <see langword="false" />, the object is only tracked until finalization.</param>
    </member>
    <member name="M:System.WeakReference.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.WeakReference" /> class, using deserialized data from the specified serialization and stream objects.</summary>
      <param name="info">An object that holds all the data needed to serialize or deserialize the current <see cref="T:System.WeakReference" /> object.</param>
      <param name="context">(Reserved) Describes the source and destination of the serialized stream specified by <paramref name="info" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.WeakReference.Finalize">
      <summary>Discards the reference to the target represented by the current <see cref="T:System.WeakReference" /> object.</summary>
    </member>
    <member name="M:System.WeakReference.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with all the data needed to serialize the current <see cref="T:System.WeakReference" /> object.</summary>
      <param name="info">An object that holds all the data needed to serialize or deserialize the current <see cref="T:System.WeakReference" /> object.</param>
      <param name="context">(Reserved) The location where serialized data is stored and retrieved.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is <see langword="null" />.</exception>
    </member>
    <member name="P:System.WeakReference.IsAlive">
      <summary>Gets an indication whether the object referenced by the current <see cref="T:System.WeakReference" /> object has been garbage collected.</summary>
      <returns>
        <see langword="true" /> if the object referenced by the current <see cref="T:System.WeakReference" /> object has not been garbage collected and is still accessible; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.WeakReference.Target">
      <summary>Gets or sets the object (the target) referenced by the current <see cref="T:System.WeakReference" /> object.</summary>
      <exception cref="T:System.InvalidOperationException">The reference to the target object is invalid. This exception can be thrown while setting this property if the value is a null reference or if the object has been finalized during the set operation.</exception>
      <returns>
        <see langword="null" /> if the object referenced by the current <see cref="T:System.WeakReference" /> object has been garbage collected; otherwise, a reference to the object referenced by the current <see cref="T:System.WeakReference" /> object.</returns>
    </member>
    <member name="P:System.WeakReference.TrackResurrection">
      <summary>Gets an indication whether the object referenced by the current <see cref="T:System.WeakReference" /> object is tracked after it is finalized.</summary>
      <returns>
        <see langword="true" /> if the object the current <see cref="T:System.WeakReference" /> object refers to is tracked after finalization; or <see langword="false" /> if the object is only tracked until finalization.</returns>
    </member>
    <member name="T:System.WeakReference`1">
      <summary>Represents a typed weak reference, which references an object while still allowing that object to be reclaimed by garbage collection.</summary>
      <typeparam name="T">The type of the object referenced.</typeparam>
    </member>
    <member name="M:System.WeakReference`1.#ctor(`0)">
      <summary>Initializes a new instance of the <see cref="T:System.WeakReference`1" /> class that references the specified object.</summary>
      <param name="target">The object to reference, or <see langword="null" />.</param>
    </member>
    <member name="M:System.WeakReference`1.#ctor(`0,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.WeakReference`1" /> class that references the specified object and uses the specified resurrection tracking.</summary>
      <param name="target">The object to reference, or <see langword="null" />.</param>
      <param name="trackResurrection">
        <see langword="true" /> to track the object after finalization; <see langword="false" /> to track the object only until finalization.</param>
    </member>
    <member name="M:System.WeakReference`1.Finalize">
      <summary>Discards the reference to the target that is represented by the current <see cref="T:System.WeakReference`1" /> object.</summary>
    </member>
    <member name="M:System.WeakReference`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with all the data necessary to serialize the current <see cref="T:System.WeakReference`1" /> object.</summary>
      <param name="info">An object that holds all the data necessary to serialize or deserialize the current <see cref="T:System.WeakReference`1" /> object.</param>
      <param name="context">The location where serialized data is stored and retrieved.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.WeakReference`1.SetTarget(`0)">
      <summary>Sets the target object that is referenced by this <see cref="T:System.WeakReference`1" /> object.</summary>
      <param name="target">The new target object.</param>
    </member>
    <member name="M:System.WeakReference`1.TryGetTarget(`0@)">
      <summary>Tries to retrieve the target object that is referenced by the current <see cref="T:System.WeakReference`1" /> object.</summary>
      <param name="target">When this method returns, contains the target object, if it is available. This parameter is treated as uninitialized.</param>
      <returns>
        <see langword="true" /> if the target was retrieved; otherwise, <see langword="false" />.</returns>
    </member>
  </members>
</doc>