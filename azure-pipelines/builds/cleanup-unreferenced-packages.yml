trigger: none

parameters:
- name: artifactName
  type: string
  default: CentOSStream9_Online_MsftSdk_x64_BuildLogs_Attempt1
  displayName: (Optional) Source Build Artrifact Name to retrieve sbrpPackageUsage.json from

- name: skipPackages
  type: string
  default: ' '
  displayName: (Optional) List of packages (<name>,<version>) to skip from deletion (space separated)

resources:
  pipelines:
  - pipeline: dotnet-source-build
    source: dotnet-source-build-lite

  repositories:
  - repository: 1ESPipelineTemplates
    type: git
    name: 1ESPipelineTemplates/1ESPipelineTemplates
    ref: refs/tags/release

jobs:
- job: DownloadArtifact
  displayName: Download Artifact from Dependency Pipeline
  pool:
    vmImage: ubuntu-latest

  steps:
  - task: DownloadPipelineArtifact@2
    inputs:
      buildType: specific
      buildVersionToDownload: specific
      project: internal
      definition: $(resources.pipeline.dotnet-source-build.pipelineName)
      pipelineId: $(resources.pipeline.dotnet-source-build.runID)
      artifactName: ${{ parameters.artifactName }}
      itemPattern: '**/sbrpPackageUsage.json'
      targetPath: $(Pipeline.Workspace)
      allowPartiallySucceededBuilds: true
      allowFailedBuilds: true

  - script: |
      if [ -f "$(Pipeline.Workspace)/artifacts/log/Release/sbrpPackageUsage.json" ]; then
        echo "sbrpPackageUsage.json file found."
        cat "$(Pipeline.Workspace)/artifacts/log/Release/sbrpPackageUsage.json"
      else
        echo "sbrpPackageUsage.json file not found."
      fi
    displayName: Check and display sbrpPackageUsage.json

  - script: |
      json_file="$(Pipeline.Workspace)/artifacts/log/Release/sbrpPackageUsage.json"
      repo_root="$(Build.SourcesDirectory)/source-build-reference-packages"
      unreferenced_paths=$(jq -r '.UnreferencedSbrps[]' "$json_file")
      skip_packages_array=($(echo "${{ parameters.skipPackages }}" | sed 's/,/\//g'))

      for path in $unreferenced_paths; do
        skip=false
        for skip_package in "${skip_packages_array[@]}"; do
          if [[ "$path" == *"$skip_package"* ]]; then
            echo "Skipping $path as it matches skip package $skip_package"
            skip=true
            break
          fi
        done

        if [ "$skip" = true ]; then
          continue
        fi

        # textOnlyPackage usage detection has false positives and should be skipped
        if [[ "$path" == *"textOnlyPackage"* ]]; then
          echo "Skipping $path as it contains 'textOnlyPackage'"
          continue
        fi

        package_path="$repo_root${path#/__w/1/s/src/source-build-reference-packages}"
        echo "Deleting $package_path"
        rm -rf "$package_path"
      done
    displayName: Delete Unreferenced Packages
